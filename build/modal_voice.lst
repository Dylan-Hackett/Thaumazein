ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"modal_voice.cc"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text._ZN6stmlib16SemitonesToRatioEf,"axG",%progbits,_ZN6stmlib16SemitonesToRatioEf,comda
  19              		.align	1
  20              		.weak	_ZN6stmlib16SemitonesToRatioEf
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	_ZN6stmlib16SemitonesToRatioEf:
  26              	.LVL0:
  27              	.LFB1492:
  28              		.file 1 "eurorack/stmlib/dsp/units.h"
   1:eurorack/stmlib/dsp/units.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/stmlib/dsp/units.h **** //
   3:eurorack/stmlib/dsp/units.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/dsp/units.h **** //
   5:eurorack/stmlib/dsp/units.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/dsp/units.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/dsp/units.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/dsp/units.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/dsp/units.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/dsp/units.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/dsp/units.h **** // 
  12:eurorack/stmlib/dsp/units.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/dsp/units.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/dsp/units.h **** // 
  15:eurorack/stmlib/dsp/units.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/dsp/units.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/dsp/units.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/dsp/units.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/dsp/units.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/dsp/units.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/dsp/units.h **** // THE SOFTWARE.
  22:eurorack/stmlib/dsp/units.h **** // 
  23:eurorack/stmlib/dsp/units.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/dsp/units.h **** //
  25:eurorack/stmlib/dsp/units.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/dsp/units.h **** //
  27:eurorack/stmlib/dsp/units.h **** // Conversion from semitones to frequency ratio.
  28:eurorack/stmlib/dsp/units.h **** 
  29:eurorack/stmlib/dsp/units.h **** #ifndef STMLIB_DSP_UNITS_H_
  30:eurorack/stmlib/dsp/units.h **** #define STMLIB_DSP_UNITS_H_
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 2


  31:eurorack/stmlib/dsp/units.h **** 
  32:eurorack/stmlib/dsp/units.h **** #include "stmlib/stmlib.h"
  33:eurorack/stmlib/dsp/units.h **** #include "stmlib/dsp/dsp.h"
  34:eurorack/stmlib/dsp/units.h **** 
  35:eurorack/stmlib/dsp/units.h **** namespace stmlib {
  36:eurorack/stmlib/dsp/units.h **** 
  37:eurorack/stmlib/dsp/units.h **** extern const float lut_pitch_ratio_high[257];
  38:eurorack/stmlib/dsp/units.h **** extern const float lut_pitch_ratio_low[257];
  39:eurorack/stmlib/dsp/units.h **** 
  40:eurorack/stmlib/dsp/units.h **** inline float SemitonesToRatio(float semitones) {
  29              		.loc 1 40 48 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  41:eurorack/stmlib/dsp/units.h ****   float pitch = semitones + 128.0f;
  34              		.loc 1 41 3 view .LVU1
  35              		.loc 1 41 9 is_stmt 0 view .LVU2
  36 0000 DFED0E7A 		vldr.32	s15, .L2
  42:eurorack/stmlib/dsp/units.h ****   MAKE_INTEGRAL_FRACTIONAL(pitch)
  43:eurorack/stmlib/dsp/units.h **** 
  44:eurorack/stmlib/dsp/units.h ****   return lut_pitch_ratio_high[pitch_integral] * \
  45:eurorack/stmlib/dsp/units.h ****       lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
  37              		.loc 1 45 74 view .LVU3
  38 0004 0E4A     		ldr	r2, .L2+4
  41:eurorack/stmlib/dsp/units.h ****   float pitch = semitones + 128.0f;
  39              		.loc 1 41 9 view .LVU4
  40 0006 30EE270A 		vadd.f32	s0, s0, s15
  41              	.LVL1:
  42:eurorack/stmlib/dsp/units.h ****   MAKE_INTEGRAL_FRACTIONAL(pitch)
  42              		.loc 1 42 3 is_stmt 1 view .LVU5
  43 000a FDEEC07A 		vcvt.s32.f32	s15, s0
  44              	.LVL2:
  42:eurorack/stmlib/dsp/units.h ****   MAKE_INTEGRAL_FRACTIONAL(pitch)
  45              		.loc 1 42 3 view .LVU6
  44:eurorack/stmlib/dsp/units.h ****       lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
  46              		.loc 1 44 3 view .LVU7
  42:eurorack/stmlib/dsp/units.h ****   MAKE_INTEGRAL_FRACTIONAL(pitch)
  47              		.loc 1 42 3 is_stmt 0 view .LVU8
  48 000e B8EEE77A 		vcvt.f32.s32	s14, s15
  44:eurorack/stmlib/dsp/units.h ****       lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
  49              		.loc 1 44 45 view .LVU9
  50 0012 17EE901A 		vmov	r1, s15	@ int
  42:eurorack/stmlib/dsp/units.h ****   MAKE_INTEGRAL_FRACTIONAL(pitch)
  51              		.loc 1 42 3 view .LVU10
  52 0016 30EE470A 		vsub.f32	s0, s0, s14
  53              	.LVL3:
  54              		.loc 1 45 27 view .LVU11
  55 001a BEEECC0A 		vcvt.s32.f32	s0, s0, #8
  56              	.LVL4:
  57              		.loc 1 45 74 view .LVU12
  58 001e 10EE103A 		vmov	r3, s0	@ int
  59 0022 02EB8302 		add	r2, r2, r3, lsl #2
  44:eurorack/stmlib/dsp/units.h ****       lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
  60              		.loc 1 44 45 view .LVU13
  61 0026 074B     		ldr	r3, .L2+8
  62 0028 03EB8103 		add	r3, r3, r1, lsl #2
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 3


  63              		.loc 1 45 74 view .LVU14
  64 002c 92ED000A 		vldr.32	s0, [r2]
  65 0030 D3ED007A 		vldr.32	s15, [r3]
  66              	.LVL5:
  46:eurorack/stmlib/dsp/units.h **** }
  67              		.loc 1 46 1 view .LVU15
  68 0034 20EE270A 		vmul.f32	s0, s0, s15
  69 0038 7047     		bx	lr
  70              	.L3:
  71 003a 00BF     		.align	2
  72              	.L2:
  73 003c 00000043 		.word	1124073472
  74 0040 00000000 		.word	_ZN6stmlib19lut_pitch_ratio_lowE
  75 0044 00000000 		.word	_ZN6stmlib20lut_pitch_ratio_highE
  76              		.cfi_endproc
  77              	.LFE1492:
  79              		.section	.text._ZN6plaits10ModalVoice4InitEv,"ax",%progbits
  80              		.align	1
  81              		.global	_ZN6plaits10ModalVoice4InitEv
  82              		.syntax unified
  83              		.thumb
  84              		.thumb_func
  86              	_ZN6plaits10ModalVoice4InitEv:
  87              	.LVL6:
  88              	.LFB1501:
  89              		.file 2 "eurorack/plaits/dsp/physical_modelling/modal_voice.cc"
   1:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** //
   3:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** //
   5:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** // 
  12:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** // 
  15:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** // 
  23:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** //
  25:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** //
  27:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** // Simple modal synthesis voice with a mallet exciter:
  28:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** // click -> LPF -> resonator.
  29:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** // 
  30:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** // The click is replaced by continuous white noise when the trigger input
  31:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** // of the module is not patched.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 4


  32:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** 
  33:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** #include "plaits/dsp/physical_modelling/modal_voice.h"
  34:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** 
  35:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** #include <algorithm>
  36:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** 
  37:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** #include "stmlib/dsp/units.h"
  38:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** #include "stmlib/utils/random.h"
  39:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** 
  40:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** #include "plaits/dsp/noise/dust.h"
  41:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** 
  42:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** namespace plaits {
  43:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** 
  44:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** using namespace std;
  45:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** using namespace stmlib;
  46:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** 
  47:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** void ModalVoice::Init() {
  90              		.loc 2 47 25 is_stmt 1 view -0
  91              		.cfi_startproc
  92              		@ args = 0, pretend = 0, frame = 0
  93              		@ frame_needed = 0, uses_anonymous_args = 0
  94              		@ link register save eliminated.
  48:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   excitation_filter_.Init();
  95              		.loc 2 48 3 view .LVU17
  96              	.LBB22:
  97              	.LBI22:
  98              		.file 3 "eurorack/plaits/dsp/physical_modelling/resonator.h"
   1:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
   3:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
   5:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/physical_modelling/resonator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/physical_modelling/resonator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/physical_modelling/resonator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/physical_modelling/resonator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/physical_modelling/resonator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/physical_modelling/resonator.h **** // 
  12:eurorack/plaits/dsp/physical_modelling/resonator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/physical_modelling/resonator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/physical_modelling/resonator.h **** // 
  15:eurorack/plaits/dsp/physical_modelling/resonator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/physical_modelling/resonator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/physical_modelling/resonator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/physical_modelling/resonator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/physical_modelling/resonator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/physical_modelling/resonator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/physical_modelling/resonator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/physical_modelling/resonator.h **** // 
  23:eurorack/plaits/dsp/physical_modelling/resonator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
  25:eurorack/plaits/dsp/physical_modelling/resonator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
  27:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Resonator, taken from Rings' code but with fixed position.
  28:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  29:eurorack/plaits/dsp/physical_modelling/resonator.h **** #ifndef PLAITS_DSP_PHYSICAL_MODELLING_RESONATOR_H_
  30:eurorack/plaits/dsp/physical_modelling/resonator.h **** #define PLAITS_DSP_PHYSICAL_MODELLING_RESONATOR_H_
  31:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 5


  32:eurorack/plaits/dsp/physical_modelling/resonator.h **** #include "stmlib/dsp/filter.h"
  33:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  34:eurorack/plaits/dsp/physical_modelling/resonator.h **** namespace plaits {
  35:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  36:eurorack/plaits/dsp/physical_modelling/resonator.h **** const int kMaxNumModes = 24;
  37:eurorack/plaits/dsp/physical_modelling/resonator.h **** const int kModeBatchSize = 4;
  38:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  39:eurorack/plaits/dsp/physical_modelling/resonator.h **** // We render 4 modes simultaneously since there are enough registers to hold
  40:eurorack/plaits/dsp/physical_modelling/resonator.h **** // all state variables.
  41:eurorack/plaits/dsp/physical_modelling/resonator.h **** template<int batch_size>
  42:eurorack/plaits/dsp/physical_modelling/resonator.h **** class ResonatorSvf {
  43:eurorack/plaits/dsp/physical_modelling/resonator.h ****  public:
  44:eurorack/plaits/dsp/physical_modelling/resonator.h ****   ResonatorSvf() { }
  45:eurorack/plaits/dsp/physical_modelling/resonator.h ****   ~ResonatorSvf() { }
  46:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
  47:eurorack/plaits/dsp/physical_modelling/resonator.h ****   void Init() {
  99              		.loc 3 47 8 view .LVU18
 100              	.LBB23:
  48:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
 101              		.loc 3 48 23 view .LVU19
  49:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1_[i] = state_2_[i] = 0.0f;
 102              		.loc 3 49 33 is_stmt 0 view .LVU20
 103 0000 0023     		movs	r3, #0
 104              	.LBE23:
 105              	.LBE22:
  49:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   resonator_.Init(0.015f, kMaxNumModes);
 106              		.loc 2 49 18 view .LVU21
 107 0002 1821     		movs	r1, #24
 108 0004 9FED030A 		vldr.32	s0, .L5
 109              	.LBB25:
 110              	.LBB24:
 111              		.loc 3 49 33 view .LVU22
 112 0008 4360     		str	r3, [r0, #4]	@ float
 113              		.loc 3 49 19 view .LVU23
 114 000a 40F8083B 		str	r3, [r0], #8	@ float
 115              	.LVL7:
  48:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
 116              		.loc 3 48 5 is_stmt 1 view .LVU24
  48:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
 117              		.loc 3 48 23 view .LVU25
  48:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
 118              		.loc 3 48 23 is_stmt 0 view .LVU26
 119              	.LBE24:
 120              	.LBE25:
 121              		.loc 2 49 3 is_stmt 1 view .LVU27
 122              		.loc 2 49 18 is_stmt 0 view .LVU28
 123 000e FFF7FEBF 		b	_ZN6plaits9Resonator4InitEfi
 124              	.LVL8:
 125              	.L6:
 126              		.loc 2 49 18 view .LVU29
 127 0012 00BF     		.align	2
 128              	.L5:
 129 0014 8FC2753C 		.word	1014350479
 130              		.cfi_endproc
 131              	.LFE1501:
 133              		.section	.text._ZN6plaits10ModalVoice6RenderEbbfffffPfS1_S1_j,"ax",%progbits
 134              		.align	1
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 6


 135              		.global	_ZN6plaits10ModalVoice6RenderEbbfffffPfS1_S1_j
 136              		.syntax unified
 137              		.thumb
 138              		.thumb_func
 140              	_ZN6plaits10ModalVoice6RenderEbbfffffPfS1_S1_j:
 141              	.LVL9:
 142              	.LFB1502:
  50:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** }
  51:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** 
  52:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** void ModalVoice::Render(
  53:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     bool sustain,
  54:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     bool trigger,
  55:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     float accent,
  56:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     float f0,
  57:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     float structure,
  58:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     float brightness,
  59:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     float damping,
  60:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     float* temp,
  61:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     float* out,
  62:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     float* aux,
  63:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     size_t size) {
 143              		.loc 2 63 18 is_stmt 1 view -0
 144              		.cfi_startproc
 145              		@ args = 12, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
  64:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   const float density = brightness * brightness;
 147              		.loc 2 64 3 view .LVU31
  65:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   
  66:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   brightness += 0.25f * accent * (1.0f - brightness);
 148              		.loc 2 66 3 view .LVU32
  63:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   const float density = brightness * brightness;
 149              		.loc 2 63 18 is_stmt 0 view .LVU33
 150 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 151              		.cfi_def_cfa_offset 36
 152              		.cfi_offset 4, -36
 153              		.cfi_offset 5, -32
 154              		.cfi_offset 6, -28
 155              		.cfi_offset 7, -24
 156              		.cfi_offset 8, -20
 157              		.cfi_offset 9, -16
 158              		.cfi_offset 10, -12
 159              		.cfi_offset 11, -8
 160              		.cfi_offset 14, -4
 161              		.loc 2 66 23 view .LVU34
 162 0004 F5EE007A 		vmov.f32	s15, #2.5e-1
  63:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   const float density = brightness * brightness;
 163              		.loc 2 63 18 view .LVU35
 164 0008 0546     		mov	r5, r0
 165 000a 9346     		mov	fp, r2
 166 000c 1C46     		mov	r4, r3
  67:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   damping += 0.25f * accent * (1.0f - damping);
  68:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   
  69:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   const float range = sustain ? 36.0f : 60.0f;
 167              		.loc 2 69 31 view .LVU36
 168 000e 0E46     		mov	r6, r1
  66:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   damping += 0.25f * accent * (1.0f - damping);
 169              		.loc 2 66 23 view .LVU37
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 7


 170 0010 60EE277A 		vmul.f32	s15, s0, s15
  63:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   const float density = brightness * brightness;
 171              		.loc 2 63 18 view .LVU38
 172 0014 2DED0A8B 		vpush.64	{d8, d9, d10, d11, d12}
 173              		.cfi_def_cfa_offset 76
 174              		.cfi_offset 80, -76
 175              		.cfi_offset 81, -72
 176              		.cfi_offset 82, -68
 177              		.cfi_offset 83, -64
 178              		.cfi_offset 84, -60
 179              		.cfi_offset 85, -56
 180              		.cfi_offset 86, -52
 181              		.cfi_offset 87, -48
 182              		.cfi_offset 88, -44
 183              		.cfi_offset 89, -40
  66:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   damping += 0.25f * accent * (1.0f - damping);
 184              		.loc 2 66 40 view .LVU39
 185 0018 F7EE00BA 		vmov.f32	s23, #1.0e+0
  63:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   const float density = brightness * brightness;
 186              		.loc 2 63 18 view .LVU40
 187 001c 81B0     		sub	sp, sp, #4
 188              		.cfi_def_cfa_offset 80
  66:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   damping += 0.25f * accent * (1.0f - damping);
 189              		.loc 2 66 14 view .LVU41
 190 001e B0EE61BA 		vmov.f32	s22, s3
  63:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   const float density = brightness * brightness;
 191              		.loc 2 63 18 view .LVU42
 192 0022 B0EE40CA 		vmov.f32	s24, s0
 193 0026 DDF85890 		ldr	r9, [sp, #88]
  66:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   damping += 0.25f * accent * (1.0f - damping);
 194              		.loc 2 66 40 view .LVU43
 195 002a 3BEEE17A 		vsub.f32	s14, s23, s3
  63:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   const float density = brightness * brightness;
 196              		.loc 2 63 18 view .LVU44
 197 002e F0EE609A 		vmov.f32	s19, s1
 198 0032 F0EE41AA 		vmov.f32	s21, s2
  66:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   damping += 0.25f * accent * (1.0f - damping);
 199              		.loc 2 66 14 view .LVU45
 200 0036 A7EE87BA 		vfma.f32	s22, s15, s14
 201              	.LVL10:
  67:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   damping += 0.25f * accent * (1.0f - damping);
 202              		.loc 2 67 3 is_stmt 1 view .LVU46
  67:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   damping += 0.25f * accent * (1.0f - damping);
 203              		.loc 2 67 37 is_stmt 0 view .LVU47
 204 003a 3BEEC27A 		vsub.f32	s14, s23, s4
  63:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   const float density = brightness * brightness;
 205              		.loc 2 63 18 view .LVU48
 206 003e B0EE619A 		vmov.f32	s18, s3
  67:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   damping += 0.25f * accent * (1.0f - damping);
 207              		.loc 2 67 11 view .LVU49
 208 0042 A7EE272A 		vfma.f32	s4, s14, s15
 209              	.LVL11:
  63:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   const float density = brightness * brightness;
 210              		.loc 2 63 18 view .LVU50
 211 0046 DDE914A8 		ldrd	r10, r8, [sp, #80]
  67:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   damping += 0.25f * accent * (1.0f - damping);
 212              		.loc 2 67 11 view .LVU51
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 8


 213 004a B0EE42AA 		vmov.f32	s20, s4
 214              	.LVL12:
 215              		.loc 2 69 3 is_stmt 1 view .LVU52
 216              		.loc 2 69 31 is_stmt 0 view .LVU53
 217 004e 0029     		cmp	r1, #0
 218 0050 40F0A680 		bne	.L8
 219              	.LVL13:
  70:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   const float f = sustain ? 4.0f * f0 : 2.0f * f0;
 220              		.loc 2 70 3 is_stmt 1 view .LVU54
 221              		.loc 2 70 27 is_stmt 0 view .LVU55
 222 0054 30EEA08A 		vadd.f32	s16, s1, s1
  69:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   const float f = sustain ? 4.0f * f0 : 2.0f * f0;
 223              		.loc 2 69 31 view .LVU56
 224 0058 9FED750A 		vldr.32	s0, .L36
 225              	.LVL14:
  69:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   const float f = sustain ? 4.0f * f0 : 2.0f * f0;
 226              		.loc 2 69 31 view .LVU57
 227 005c A6E0     		b	.L24
 228              	.LVL15:
 229              	.L13:
 230              	.LBB56:
 231              	.LBB57:
  71:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   const float cutoff = min(
  72:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       f * SemitonesToRatio((brightness * (2.0f - brightness) - 0.5f) * range),
  73:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       0.499f);
  74:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   const float q = sustain ? 0.7f : 1.5f;
  75:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   
  76:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   // Synthesize excitation signal.
  77:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   if (sustain) {
  78:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     const float dust_f = 0.00005f + 0.99995f * density * density;
  79:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     for (size_t i = 0; i < size; ++i) {
  80:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       temp[i] = Dust(dust_f) * (4.0f - dust_f * 3.0f) * accent;
 232              		.loc 2 80 7 is_stmt 1 view .LVU58
 233              	.LBB58:
 234              	.LBI58:
 235              		.file 4 "eurorack/plaits/dsp/noise/dust.h"
   1:eurorack/plaits/dsp/noise/dust.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/noise/dust.h **** //
   3:eurorack/plaits/dsp/noise/dust.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/noise/dust.h **** //
   5:eurorack/plaits/dsp/noise/dust.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/noise/dust.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/noise/dust.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/noise/dust.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/noise/dust.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/noise/dust.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/noise/dust.h **** // 
  12:eurorack/plaits/dsp/noise/dust.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/noise/dust.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/noise/dust.h **** // 
  15:eurorack/plaits/dsp/noise/dust.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/noise/dust.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/noise/dust.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/noise/dust.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/noise/dust.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/noise/dust.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/noise/dust.h **** // THE SOFTWARE.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 9


  22:eurorack/plaits/dsp/noise/dust.h **** // 
  23:eurorack/plaits/dsp/noise/dust.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/noise/dust.h **** //
  25:eurorack/plaits/dsp/noise/dust.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/noise/dust.h **** //
  27:eurorack/plaits/dsp/noise/dust.h **** // Randomly clocked samples.
  28:eurorack/plaits/dsp/noise/dust.h **** 
  29:eurorack/plaits/dsp/noise/dust.h **** #ifndef PLAITS_DSP_NOISE_DUST_H_
  30:eurorack/plaits/dsp/noise/dust.h **** #define PLAITS_DSP_NOISE_DUST_H_
  31:eurorack/plaits/dsp/noise/dust.h **** 
  32:eurorack/plaits/dsp/noise/dust.h **** #include "stmlib/utils/random.h"
  33:eurorack/plaits/dsp/noise/dust.h **** 
  34:eurorack/plaits/dsp/noise/dust.h **** namespace plaits {
  35:eurorack/plaits/dsp/noise/dust.h **** 
  36:eurorack/plaits/dsp/noise/dust.h **** inline float Dust(float frequency) {
 236              		.loc 4 36 14 view .LVU59
 237              	.LBB59:
  37:eurorack/plaits/dsp/noise/dust.h ****   float inv_frequency = 1.0f / frequency;
 238              		.loc 4 37 3 view .LVU60
  38:eurorack/plaits/dsp/noise/dust.h ****   float u = stmlib::Random::GetFloat();
 239              		.loc 4 38 3 view .LVU61
 240              	.LBB60:
 241              	.LBI60:
 242              		.file 5 "eurorack/stmlib/utils/random.h"
   1:eurorack/stmlib/utils/random.h **** // Copyright 2012 Emilie Gillet.
   2:eurorack/stmlib/utils/random.h **** //
   3:eurorack/stmlib/utils/random.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/utils/random.h **** //
   5:eurorack/stmlib/utils/random.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/utils/random.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/utils/random.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/utils/random.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/utils/random.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/utils/random.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/utils/random.h **** // 
  12:eurorack/stmlib/utils/random.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/utils/random.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/utils/random.h **** // 
  15:eurorack/stmlib/utils/random.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/utils/random.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/utils/random.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/utils/random.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/utils/random.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/utils/random.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/utils/random.h **** // THE SOFTWARE.
  22:eurorack/stmlib/utils/random.h **** // 
  23:eurorack/stmlib/utils/random.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/utils/random.h **** //
  25:eurorack/stmlib/utils/random.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/utils/random.h **** //
  27:eurorack/stmlib/utils/random.h **** // Fast 16-bit pseudo random number generator.
  28:eurorack/stmlib/utils/random.h **** 
  29:eurorack/stmlib/utils/random.h **** #ifndef STMLIB_UTILS_RANDOM_H_
  30:eurorack/stmlib/utils/random.h **** #define STMLIB_UTILS_RANDOM_H_
  31:eurorack/stmlib/utils/random.h **** 
  32:eurorack/stmlib/utils/random.h **** #include "stmlib/stmlib.h"
  33:eurorack/stmlib/utils/random.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 10


  34:eurorack/stmlib/utils/random.h **** namespace stmlib {
  35:eurorack/stmlib/utils/random.h **** 
  36:eurorack/stmlib/utils/random.h **** class Random {
  37:eurorack/stmlib/utils/random.h ****  public:
  38:eurorack/stmlib/utils/random.h ****   static inline uint32_t state() { return rng_state_; }
  39:eurorack/stmlib/utils/random.h **** 
  40:eurorack/stmlib/utils/random.h ****   static inline void Seed(uint32_t seed) {
  41:eurorack/stmlib/utils/random.h ****     rng_state_ = seed;
  42:eurorack/stmlib/utils/random.h ****   }
  43:eurorack/stmlib/utils/random.h **** 
  44:eurorack/stmlib/utils/random.h ****   static inline uint32_t GetWord() {
  45:eurorack/stmlib/utils/random.h ****     rng_state_ = rng_state_ * 1664525L + 1013904223L;
  46:eurorack/stmlib/utils/random.h ****     return state();
  47:eurorack/stmlib/utils/random.h ****   }
  48:eurorack/stmlib/utils/random.h ****   
  49:eurorack/stmlib/utils/random.h ****   static inline int16_t GetSample() {
  50:eurorack/stmlib/utils/random.h ****     return static_cast<int16_t>(GetWord() >> 16);
  51:eurorack/stmlib/utils/random.h ****   }
  52:eurorack/stmlib/utils/random.h **** 
  53:eurorack/stmlib/utils/random.h ****   static inline float GetFloat() {
 243              		.loc 5 53 23 view .LVU62
 244              	.LBB61:
  54:eurorack/stmlib/utils/random.h ****     return static_cast<float>(GetWord()) / 4294967296.0f;
 245              		.loc 5 54 5 view .LVU63
 246              	.LBB62:
 247              	.LBI62:
  44:eurorack/stmlib/utils/random.h ****     rng_state_ = rng_state_ * 1664525L + 1013904223L;
 248              		.loc 5 44 26 view .LVU64
 249              	.LBB63:
  45:eurorack/stmlib/utils/random.h ****     return state();
 250              		.loc 5 45 5 view .LVU65
  45:eurorack/stmlib/utils/random.h ****     return state();
 251              		.loc 5 45 40 is_stmt 0 view .LVU66
 252 005e 7549     		ldr	r1, .L36+4
 253              	.LBE63:
 254              	.LBE62:
 255              	.LBE61:
 256              	.LBE60:
 257              	.LBE59:
 258              	.LBE58:
 259              		.loc 2 80 38 view .LVU67
 260 0060 B0EE086A 		vmov.f32	s12, #3.0e+0
 261              	.LBB72:
 262              	.LBB70:
 263              	.LBB68:
 264              	.LBB66:
 265              	.LBB65:
 266              	.LBB64:
  45:eurorack/stmlib/utils/random.h ****     return state();
 267              		.loc 5 45 40 view .LVU68
 268 0064 DFF804E2 		ldr	lr, .L36+60
 269 0068 0EFB0313 		mla	r3, lr, r3, r1
  46:eurorack/stmlib/utils/random.h ****   }
 270              		.loc 5 46 5 is_stmt 1 view .LVU69
 271              	.LBE64:
 272              	.LBE65:
 273              	.LBE66:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 11


 274              	.LBE68:
 275              	.LBE70:
 276              	.LBE72:
 277              	.LBE57:
 278              	.LBE56:
  38:eurorack/stmlib/utils/random.h **** 
 279              		.loc 5 38 36 view .LVU70
 280              	.LBB75:
 281              	.LBB74:
  79:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       temp[i] = Dust(dust_f) * (4.0f - dust_f * 3.0f) * accent;
 282              		.loc 2 79 5 is_stmt 0 view .LVU71
 283 006c 3146     		mov	r1, r6
 284              	.LBB73:
 285              	.LBB71:
 286              	.LBB69:
 287              	.LBB67:
 288              		.loc 5 54 12 view .LVU72
 289 006e 07EE903A 		vmov	s15, r3	@ int
 290 0072 F8EE676A 		vcvt.f32.u32	s13, s15
 291              		.loc 5 54 44 view .LVU73
 292 0076 DFED707A 		vldr.32	s15, .L36+8
 293 007a 66EEA76A 		vmul.f32	s13, s13, s15
 294              	.LVL16:
 295              		.loc 5 54 44 view .LVU74
 296              	.LBE67:
 297              	.LBE69:
  39:eurorack/plaits/dsp/noise/dust.h ****   if (u < frequency) {
 298              		.loc 4 39 3 is_stmt 1 view .LVU75
 299 007e B4EEE67A 		vcmpe.f32	s14, s13
 300 0082 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  40:eurorack/plaits/dsp/noise/dust.h ****     return u * inv_frequency;
 301              		.loc 4 40 5 view .LVU76
  37:eurorack/plaits/dsp/noise/dust.h ****   float u = stmlib::Random::GetFloat();
 302              		.loc 4 37 9 is_stmt 0 view .LVU77
 303 0086 CABF     		itet	gt
 304 0088 CBEE877A 		vdivgt.f32	s15, s23, s14
  41:eurorack/plaits/dsp/noise/dust.h ****   } else {
  42:eurorack/plaits/dsp/noise/dust.h ****     return 0.0f;
 305              		.loc 4 42 12 view .LVU78
 306 008c DFED6B6A 		vldrle.32	s13, .L36+12
 307              	.LVL17:
  40:eurorack/plaits/dsp/noise/dust.h ****   } else {
 308              		.loc 4 40 16 view .LVU79
 309 0090 67EEA66A 		vmulgt.f32	s13, s15, s13
 310              	.LBE71:
 311              	.LBE73:
 312              		.loc 2 80 38 view .LVU80
 313 0094 F1EE007A 		vmov.f32	s15, #4.0e+0
 314 0098 E7EE467A 		vfms.f32	s15, s14, s12
 315              		.loc 2 80 30 view .LVU81
 316 009c 67EEA67A 		vmul.f32	s15, s15, s13
 317              		.loc 2 80 55 view .LVU82
 318 00a0 67EE8C7A 		vmul.f32	s15, s15, s24
 319              		.loc 2 80 15 view .LVU83
 320 00a4 E2EC017A 		vstmia.32	r2!, {s15}
  79:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       temp[i] = Dust(dust_f) * (4.0f - dust_f * 3.0f) * accent;
 321              		.loc 2 79 5 is_stmt 1 view .LVU84
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 12


 322              	.L18:
  79:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       temp[i] = Dust(dust_f) * (4.0f - dust_f * 3.0f) * accent;
 323              		.loc 2 79 26 discriminator 3 view .LVU85
 324 00a8 6245     		cmp	r2, ip
 325 00aa D8D1     		bne	.L13
 326 00ac 01B1     		cbz	r1, .L14
 327 00ae 0360     		str	r3, [r0]
 328              	.L14:
 329              	.LBE74:
 330              	.LBE75:
  74:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   
 331              		.loc 2 74 27 is_stmt 0 view .LVU86
 332 00b0 9FED637A 		vldr.32	s14, .L36+16
 333              	.LVL18:
 334              	.L15:
  81:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     }
  82:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   } else {
  83:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     fill(&temp[0], &temp[size], 0.0f);
  84:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     if (trigger) {
  85:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       const float attenuation = 1.0f - damping * 0.5f;
  86:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       const float amplitude = (0.12f + 0.08f * accent) * attenuation;
  87:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       temp[0] = amplitude * SemitonesToRatio(cutoff * cutoff * 24.0f) / cutoff;
  88:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     }
  89:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   }
  90:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   const float one = 1.0f;
 335              		.loc 2 90 3 is_stmt 1 view .LVU87
  91:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   excitation_filter_.Process<FILTER_MODE_LOW_PASS, false>(
 336              		.loc 2 91 3 view .LVU88
 337              	.LBB76:
 338              	.LBI76:
  50:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  51:eurorack/plaits/dsp/physical_modelling/resonator.h ****   }
  52:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
  53:eurorack/plaits/dsp/physical_modelling/resonator.h ****   template<stmlib::FilterMode mode, bool add>
  54:eurorack/plaits/dsp/physical_modelling/resonator.h ****   void Process(
 339              		.loc 3 54 8 view .LVU89
 340              	.LBB77:
 341              	.LBB78:
  55:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* f,
  56:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* q,
  57:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* gain,
  58:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* in,
  59:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float* out,
  60:eurorack/plaits/dsp/physical_modelling/resonator.h ****       size_t size) {
  61:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float g[batch_size];
  62:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float r[batch_size];
  63:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float r_plus_g[batch_size];
  64:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float h[batch_size];
  65:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float state_1[batch_size];
  66:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float state_2[batch_size];
  67:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float gains[batch_size];
  68:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
 342              		.loc 3 68 23 view .LVU90
 343              	.LBB79:
 344              	.LBI79:
 345              		.file 6 "eurorack/stmlib/dsp/filter.h"
   1:eurorack/stmlib/dsp/filter.h **** // Copyright 2014 Emilie Gillet.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 13


   2:eurorack/stmlib/dsp/filter.h **** //
   3:eurorack/stmlib/dsp/filter.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/dsp/filter.h **** //
   5:eurorack/stmlib/dsp/filter.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/dsp/filter.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/dsp/filter.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/dsp/filter.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/dsp/filter.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/dsp/filter.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/dsp/filter.h **** // 
  12:eurorack/stmlib/dsp/filter.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/dsp/filter.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/dsp/filter.h **** // 
  15:eurorack/stmlib/dsp/filter.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/dsp/filter.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/dsp/filter.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/dsp/filter.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/dsp/filter.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/dsp/filter.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/dsp/filter.h **** // THE SOFTWARE.
  22:eurorack/stmlib/dsp/filter.h **** // 
  23:eurorack/stmlib/dsp/filter.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/dsp/filter.h **** //
  25:eurorack/stmlib/dsp/filter.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/dsp/filter.h **** //
  27:eurorack/stmlib/dsp/filter.h **** // Zero-delay-feedback filters (one pole and SVF).
  28:eurorack/stmlib/dsp/filter.h **** // Naive SVF.
  29:eurorack/stmlib/dsp/filter.h **** 
  30:eurorack/stmlib/dsp/filter.h **** #ifndef STMLIB_DSP_FILTER_H_
  31:eurorack/stmlib/dsp/filter.h **** #define STMLIB_DSP_FILTER_H_
  32:eurorack/stmlib/dsp/filter.h **** 
  33:eurorack/stmlib/dsp/filter.h **** #include "stmlib/stmlib.h"
  34:eurorack/stmlib/dsp/filter.h **** 
  35:eurorack/stmlib/dsp/filter.h **** #include <cmath>
  36:eurorack/stmlib/dsp/filter.h **** #include <algorithm>
  37:eurorack/stmlib/dsp/filter.h **** 
  38:eurorack/stmlib/dsp/filter.h **** namespace stmlib {
  39:eurorack/stmlib/dsp/filter.h **** 
  40:eurorack/stmlib/dsp/filter.h **** enum FilterMode {
  41:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_LOW_PASS,
  42:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_BAND_PASS,
  43:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_BAND_PASS_NORMALIZED,
  44:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_HIGH_PASS
  45:eurorack/stmlib/dsp/filter.h **** };
  46:eurorack/stmlib/dsp/filter.h **** 
  47:eurorack/stmlib/dsp/filter.h **** enum FrequencyApproximation {
  48:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_EXACT,
  49:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_ACCURATE,
  50:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_FAST,
  51:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_DIRTY
  52:eurorack/stmlib/dsp/filter.h **** };
  53:eurorack/stmlib/dsp/filter.h **** 
  54:eurorack/stmlib/dsp/filter.h **** #define M_PI_F float(M_PI)
  55:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_2 M_PI * M_PI
  56:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_3 M_PI_POW_2 * M_PI
  57:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_5 M_PI_POW_3 * M_PI_POW_2
  58:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_7 M_PI_POW_5 * M_PI_POW_2
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 14


  59:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_9 M_PI_POW_7 * M_PI_POW_2
  60:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_11 M_PI_POW_9 * M_PI_POW_2
  61:eurorack/stmlib/dsp/filter.h **** 
  62:eurorack/stmlib/dsp/filter.h **** class DCBlocker {
  63:eurorack/stmlib/dsp/filter.h ****  public:
  64:eurorack/stmlib/dsp/filter.h ****   DCBlocker() { }
  65:eurorack/stmlib/dsp/filter.h ****   ~DCBlocker() { }
  66:eurorack/stmlib/dsp/filter.h ****   
  67:eurorack/stmlib/dsp/filter.h ****   void Init(float pole) {
  68:eurorack/stmlib/dsp/filter.h ****     x_ = 0.0f;
  69:eurorack/stmlib/dsp/filter.h ****     y_ = 0.0f;
  70:eurorack/stmlib/dsp/filter.h ****     pole_ = pole;
  71:eurorack/stmlib/dsp/filter.h ****   }
  72:eurorack/stmlib/dsp/filter.h ****   
  73:eurorack/stmlib/dsp/filter.h ****   inline void Process(float* in_out, size_t size) {
  74:eurorack/stmlib/dsp/filter.h ****     float x = x_;
  75:eurorack/stmlib/dsp/filter.h ****     float y = y_;
  76:eurorack/stmlib/dsp/filter.h ****     const float pole = pole_;
  77:eurorack/stmlib/dsp/filter.h ****     while (size--) {
  78:eurorack/stmlib/dsp/filter.h ****       float old_x = x;
  79:eurorack/stmlib/dsp/filter.h ****       x = *in_out;
  80:eurorack/stmlib/dsp/filter.h ****       *in_out++ = y = y * pole + x - old_x;
  81:eurorack/stmlib/dsp/filter.h ****     }
  82:eurorack/stmlib/dsp/filter.h ****     x_ = x;
  83:eurorack/stmlib/dsp/filter.h ****     y_ = y;
  84:eurorack/stmlib/dsp/filter.h ****   }
  85:eurorack/stmlib/dsp/filter.h ****   
  86:eurorack/stmlib/dsp/filter.h ****  private:
  87:eurorack/stmlib/dsp/filter.h ****   float pole_;
  88:eurorack/stmlib/dsp/filter.h ****   float x_;
  89:eurorack/stmlib/dsp/filter.h ****   float y_;
  90:eurorack/stmlib/dsp/filter.h **** };
  91:eurorack/stmlib/dsp/filter.h **** 
  92:eurorack/stmlib/dsp/filter.h **** class OnePole {
  93:eurorack/stmlib/dsp/filter.h ****  public:
  94:eurorack/stmlib/dsp/filter.h ****   OnePole() { }
  95:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
  96:eurorack/stmlib/dsp/filter.h ****   
  97:eurorack/stmlib/dsp/filter.h ****   void Init() {
  98:eurorack/stmlib/dsp/filter.h ****     set_f<FREQUENCY_DIRTY>(0.01f);
  99:eurorack/stmlib/dsp/filter.h ****     Reset();
 100:eurorack/stmlib/dsp/filter.h ****   }
 101:eurorack/stmlib/dsp/filter.h ****   
 102:eurorack/stmlib/dsp/filter.h ****   void Reset() {
 103:eurorack/stmlib/dsp/filter.h ****     state_ = 0.0f;
 104:eurorack/stmlib/dsp/filter.h ****   }
 105:eurorack/stmlib/dsp/filter.h ****   
 106:eurorack/stmlib/dsp/filter.h ****   template<FrequencyApproximation approximation>
 107:eurorack/stmlib/dsp/filter.h ****   static inline float tan(float f) {
 346              		.loc 6 107 23 view .LVU91
 347              	.LBB80:
 108:eurorack/stmlib/dsp/filter.h ****     if (approximation == FREQUENCY_EXACT) {
 109:eurorack/stmlib/dsp/filter.h ****       // Clip coefficient to about 100.
 110:eurorack/stmlib/dsp/filter.h ****       f = f < 0.497f ? f : 0.497f;
 111:eurorack/stmlib/dsp/filter.h ****       return tanf(M_PI_F * f);
 112:eurorack/stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_DIRTY) {
 113:eurorack/stmlib/dsp/filter.h ****       // Optimized for frequencies below 8kHz.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 15


 114:eurorack/stmlib/dsp/filter.h ****       const float a = 3.736e-01f * M_PI_POW_3;
 115:eurorack/stmlib/dsp/filter.h ****       return f * (M_PI_F + a * f * f);
 116:eurorack/stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_FAST) {
 117:eurorack/stmlib/dsp/filter.h ****       // The usual tangent approximation uses 3.1755e-01 and 2.033e-01, but
 118:eurorack/stmlib/dsp/filter.h ****       // the coefficients used here are optimized to minimize error for the
 119:eurorack/stmlib/dsp/filter.h ****       // 16Hz to 16kHz range, with a sample rate of 48kHz.
 120:eurorack/stmlib/dsp/filter.h ****       const float a = 3.260e-01f * M_PI_POW_3;
 121:eurorack/stmlib/dsp/filter.h ****       const float b = 1.823e-01f * M_PI_POW_5;
 122:eurorack/stmlib/dsp/filter.h ****       float f2 = f * f;
 348              		.loc 6 122 13 is_stmt 0 view .LVU92
 349 00b4 28EE086A 		vmul.f32	s12, s16, s16
 350              	.LVL19:
 123:eurorack/stmlib/dsp/filter.h ****       return f * (M_PI_F + f2 * (a + b * f2));
 351              		.loc 6 123 36 view .LVU93
 352 00b8 DFED627A 		vldr.32	s15, .L36+20
 353 00bc DFED626A 		vldr.32	s13, .L36+24
 354              	.LBE80:
 355              	.LBE79:
  69:eurorack/plaits/dsp/physical_modelling/resonator.h ****       g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
  70:eurorack/plaits/dsp/physical_modelling/resonator.h ****       r[i] = 1.0f / q[i];
  71:eurorack/plaits/dsp/physical_modelling/resonator.h ****       h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
  72:eurorack/plaits/dsp/physical_modelling/resonator.h ****       r_plus_g[i] = r[i] + g[i];
  73:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1[i] = state_1_[i];
  74:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_2[i] = state_2_[i];
 356              		.loc 3 74 28 view .LVU94
 357 00c0 4A46     		mov	r2, r9
 358 00c2 2346     		mov	r3, r4
 359              	.LBB84:
 360              	.LBB81:
 361              		.loc 6 123 36 view .LVU95
 362 00c4 E6EE276A 		vfma.f32	s13, s12, s15
 363              		.loc 6 123 26 view .LVU96
 364 00c8 DFED607A 		vldr.32	s15, .L36+28
 365 00cc E6EE267A 		vfma.f32	s15, s12, s13
 366              	.LBE81:
 367              	.LBE84:
  73:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_2[i] = state_2_[i];
 368              		.loc 3 73 28 view .LVU97
 369 00d0 D5ED006A 		vldr.32	s13, [r5]
 370              	.LBB85:
 371              	.LBB82:
 372              		.loc 6 123 45 view .LVU98
 373 00d4 28EE278A 		vmul.f32	s16, s16, s15
 374              	.LVL20:
 375              		.loc 6 123 45 view .LVU99
 376              	.LBE82:
 377              	.LBE85:
  70:eurorack/plaits/dsp/physical_modelling/resonator.h ****       h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
 378              		.loc 3 70 19 view .LVU100
 379 00d8 CBEE877A 		vdiv.f32	s15, s23, s14
 380              	.LVL21:
  71:eurorack/plaits/dsp/physical_modelling/resonator.h ****       r_plus_g[i] = r[i] + g[i];
 381              		.loc 3 71 27 view .LVU101
 382 00dc B0EE6B7A 		vmov.f32	s14, s23
 383 00e0 A8EE277A 		vfma.f32	s14, s16, s15
  72:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1[i] = state_1_[i];
 384              		.loc 3 72 26 view .LVU102
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 16


 385 00e4 38EE276A 		vadd.f32	s12, s16, s15
  71:eurorack/plaits/dsp/physical_modelling/resonator.h ****       r_plus_g[i] = r[i] + g[i];
 386              		.loc 3 71 41 view .LVU103
 387 00e8 A8EE087A 		vfma.f32	s14, s16, s16
  71:eurorack/plaits/dsp/physical_modelling/resonator.h ****       r_plus_g[i] = r[i] + g[i];
 388              		.loc 3 71 19 view .LVU104
 389 00ec 8BEE875A 		vdiv.f32	s10, s23, s14
 390              	.LVL22:
 391              		.loc 3 74 28 view .LVU105
 392 00f0 95ED017A 		vldr.32	s14, [r5, #4]
 393              	.LVL23:
  68:eurorack/plaits/dsp/physical_modelling/resonator.h ****       g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
 394              		.loc 3 68 5 is_stmt 1 view .LVU106
  68:eurorack/plaits/dsp/physical_modelling/resonator.h ****       g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
 395              		.loc 3 68 23 view .LVU107
 396              	.L21:
  68:eurorack/plaits/dsp/physical_modelling/resonator.h ****       g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
 397              		.loc 3 68 23 is_stmt 0 view .LVU108
 398              	.LBE78:
  75:eurorack/plaits/dsp/physical_modelling/resonator.h ****       gains[i] = gain[i];
  76:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  77:eurorack/plaits/dsp/physical_modelling/resonator.h ****     
  78:eurorack/plaits/dsp/physical_modelling/resonator.h ****     while (size--) {
 399              		.loc 3 78 5 is_stmt 1 view .LVU109
 400              		.loc 3 78 5 is_stmt 0 view .LVU110
 401 00f4 8AB9     		cbnz	r2, .L19
 402              	.LVL24:
 403              	.LBB87:
  79:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float s_in = *in++;
  80:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float s_out = 0.0f;
  81:eurorack/plaits/dsp/physical_modelling/resonator.h ****       for (int i = 0; i < batch_size; ++i) {
  82:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
  83:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float bp = g[i] * hp + state_1[i];
  84:eurorack/plaits/dsp/physical_modelling/resonator.h ****         state_1[i] = g[i] * hp + bp;
  85:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float lp = g[i] * bp + state_2[i];
  86:eurorack/plaits/dsp/physical_modelling/resonator.h ****         state_2[i] = g[i] * bp + lp;
  87:eurorack/plaits/dsp/physical_modelling/resonator.h ****         s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
  88:eurorack/plaits/dsp/physical_modelling/resonator.h ****       }
  89:eurorack/plaits/dsp/physical_modelling/resonator.h ****       if (add) {
  90:eurorack/plaits/dsp/physical_modelling/resonator.h ****         *out++ += s_out;
  91:eurorack/plaits/dsp/physical_modelling/resonator.h ****       } else {
  92:eurorack/plaits/dsp/physical_modelling/resonator.h ****         *out++ = s_out;
  93:eurorack/plaits/dsp/physical_modelling/resonator.h ****       }
  94:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  95:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
 404              		.loc 3 95 23 is_stmt 1 view .LVU111
 405 00f6 4346     		mov	r3, r8
 406              	.LVL25:
 407              		.loc 3 95 23 is_stmt 0 view .LVU112
 408 00f8 2246     		mov	r2, r4
 409              	.LVL26:
 410              		.loc 3 95 23 view .LVU113
 411 00fa 4744     		add	r7, r7, r8
  96:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1_[i] = state_1[i];
 412              		.loc 3 96 19 view .LVU114
 413 00fc C5ED006A 		vstr.32	s13, [r5]
  97:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_2_[i] = state_2[i];
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 17


 414              		.loc 3 97 19 view .LVU115
 415 0100 85ED017A 		vstr.32	s14, [r5, #4]
  95:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1_[i] = state_1[i];
 416              		.loc 3 95 5 is_stmt 1 view .LVU116
 417              	.LVL27:
  95:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1_[i] = state_1[i];
 418              		.loc 3 95 23 view .LVU117
 419              	.L20:
  95:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1_[i] = state_1[i];
 420              		.loc 3 95 23 is_stmt 0 view .LVU118
 421              	.LBE87:
 422              	.LBE77:
 423              	.LBE76:
 424              	.LBB98:
  92:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       &cutoff, &q, &one, temp, temp, size);
  93:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   for (size_t i = 0; i < size; ++i) {
 425              		.loc 2 93 24 is_stmt 1 discriminator 3 view .LVU119
 426 0104 9F42     		cmp	r7, r3
 427 0106 26D0     		beq	.L22
  94:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     aux[i] += temp[i];
 428              		.loc 2 94 5 discriminator 2 view .LVU120
 429              		.loc 2 94 12 is_stmt 0 discriminator 2 view .LVU121
 430 0108 D3ED007A 		vldr.32	s15, [r3]
 431              		.loc 2 94 21 discriminator 2 view .LVU122
 432 010c B2EC017A 		vldmia.32	r2!, {s14}
 433              		.loc 2 94 12 discriminator 2 view .LVU123
 434 0110 77EE877A 		vadd.f32	s15, s15, s14
 435 0114 E3EC017A 		vstmia.32	r3!, {s15}
  93:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     aux[i] += temp[i];
 436              		.loc 2 93 3 is_stmt 1 discriminator 2 view .LVU124
 437 0118 F4E7     		b	.L20
 438              	.LVL28:
 439              	.L19:
  93:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     aux[i] += temp[i];
 440              		.loc 2 93 3 is_stmt 0 discriminator 2 view .LVU125
 441              	.LBE98:
 442              	.LBB99:
 443              	.LBB96:
 444              	.LBB88:
 445              	.LBB89:
 446              	.LBB90:
  82:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float bp = g[i] * hp + state_1[i];
 447              		.loc 3 82 32 view .LVU126
 448 011a F3EC017A 		vldmia.32	r3!, {s15}
 449              	.LVL29:
  82:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float bp = g[i] * hp + state_1[i];
 450              		.loc 3 82 32 view .LVU127
 451              	.LBE90:
 452              	.LBE89:
 453              	.LBE88:
  78:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float s_in = *in++;
 454              		.loc 3 78 5 view .LVU128
 455 011e 013A     		subs	r2, r2, #1
 456              	.LVL30:
 457              	.LBB94:
 458              	.LBB93:
  81:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 18


 459              		.loc 3 81 25 is_stmt 1 view .LVU129
 460              	.LBB91:
  82:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float bp = g[i] * hp + state_1[i];
 461              		.loc 3 82 32 is_stmt 0 view .LVU130
 462 0120 E6EEC67A 		vfms.f32	s15, s13, s12
  82:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float bp = g[i] * hp + state_1[i];
 463              		.loc 3 82 59 view .LVU131
 464 0124 77EEC77A 		vsub.f32	s15, s15, s14
  82:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float bp = g[i] * hp + state_1[i];
 465              		.loc 3 82 21 view .LVU132
 466 0128 67EE857A 		vmul.f32	s15, s15, s10
 467              	.LVL31:
  83:eurorack/plaits/dsp/physical_modelling/resonator.h ****         state_1[i] = g[i] * hp + bp;
 468              		.loc 3 83 21 view .LVU133
 469 012c E7EE886A 		vfma.f32	s13, s15, s16
 470              	.LVL32:
  83:eurorack/plaits/dsp/physical_modelling/resonator.h ****         state_1[i] = g[i] * hp + bp;
 471              		.loc 3 83 21 view .LVU134
 472 0130 F0EE665A 		vmov.f32	s11, s13
 473              	.LVL33:
  84:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float lp = g[i] * bp + state_2[i];
 474              		.loc 3 84 32 view .LVU135
 475 0134 E7EE886A 		vfma.f32	s13, s15, s16
 476              	.LVL34:
  85:eurorack/plaits/dsp/physical_modelling/resonator.h ****         state_2[i] = g[i] * bp + lp;
 477              		.loc 3 85 21 view .LVU136
 478 0138 F0EE477A 		vmov.f32	s15, s14
 479              	.LVL35:
  85:eurorack/plaits/dsp/physical_modelling/resonator.h ****         state_2[i] = g[i] * bp + lp;
 480              		.loc 3 85 21 view .LVU137
 481 013c E5EE887A 		vfma.f32	s15, s11, s16
 482              	.LVL36:
  86:eurorack/plaits/dsp/physical_modelling/resonator.h ****         s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
 483              		.loc 3 86 32 view .LVU138
 484 0140 B0EE677A 		vmov.f32	s14, s15
 485              	.LVL37:
  86:eurorack/plaits/dsp/physical_modelling/resonator.h ****         s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
 486              		.loc 3 86 32 view .LVU139
 487 0144 A5EE887A 		vfma.f32	s14, s11, s16
 488              	.LVL38:
  86:eurorack/plaits/dsp/physical_modelling/resonator.h ****         s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
 489              		.loc 3 86 32 view .LVU140
 490              	.LBE91:
  81:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
 491              		.loc 3 81 7 is_stmt 1 view .LVU141
  81:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
 492              		.loc 3 81 25 view .LVU142
 493              	.LBB92:
  87:eurorack/plaits/dsp/physical_modelling/resonator.h ****       }
 494              		.loc 3 87 15 is_stmt 0 view .LVU143
 495 0148 DFED3C5A 		vldr.32	s11, .L36+12
 496              	.LVL39:
  87:eurorack/plaits/dsp/physical_modelling/resonator.h ****       }
 497              		.loc 3 87 15 view .LVU144
 498 014c 77EEA57A 		vadd.f32	s15, s15, s11
 499              	.LVL40:
  87:eurorack/plaits/dsp/physical_modelling/resonator.h ****       }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 19


 500              		.loc 3 87 15 view .LVU145
 501              	.LBE92:
 502              	.LBE93:
  92:eurorack/plaits/dsp/physical_modelling/resonator.h ****       }
 503              		.loc 3 92 16 view .LVU146
 504 0150 43ED017A 		vstr.32	s15, [r3, #-4]
 505              	.LBE94:
  78:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float s_in = *in++;
 506              		.loc 3 78 5 view .LVU147
 507 0154 CEE7     		b	.L21
 508              	.LVL41:
 509              	.L22:
  78:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float s_in = *in++;
 510              		.loc 3 78 5 view .LVU148
 511              	.LBE96:
 512              	.LBE99:
  95:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   }
  96:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   
  97:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   resonator_.Process(f0, structure, brightness, damping, temp, out, size);
 513              		.loc 2 97 3 is_stmt 1 view .LVU149
 514              		.loc 2 97 21 is_stmt 0 view .LVU150
 515 0156 F0EE4A1A 		vmov.f32	s3, s20
 516 015a 4B46     		mov	r3, r9
 517 015c B0EE4B1A 		vmov.f32	s2, s22
 518 0160 5246     		mov	r2, r10
 519 0162 F0EE6A0A 		vmov.f32	s1, s21
 520 0166 2146     		mov	r1, r4
 521 0168 B0EE690A 		vmov.f32	s0, s19
 522 016c 05F10800 		add	r0, r5, #8
  98:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** }
 523              		.loc 2 98 1 view .LVU151
 524 0170 01B0     		add	sp, sp, #4
 525              		.cfi_remember_state
 526              		.cfi_def_cfa_offset 76
 527              		@ sp needed
 528 0172 BDEC0A8B 		vldm	sp!, {d8-d12}
 529              		.cfi_restore 88
 530              		.cfi_restore 89
 531              		.cfi_restore 86
 532              		.cfi_restore 87
 533              		.cfi_restore 84
 534              		.cfi_restore 85
 535              		.cfi_restore 82
 536              		.cfi_restore 83
 537              		.cfi_restore 80
 538              		.cfi_restore 81
 539              		.cfi_def_cfa_offset 36
 540              	.LVL42:
 541              		.loc 2 98 1 view .LVU152
 542 0176 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 543              		.cfi_restore 14
 544              		.cfi_restore 11
 545              		.cfi_restore 10
 546              		.cfi_restore 9
 547              		.cfi_restore 8
 548              		.cfi_restore 7
 549              		.cfi_restore 6
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 20


 550              		.cfi_restore 5
 551              		.cfi_restore 4
 552              		.cfi_def_cfa_offset 0
 553              	.LVL43:
  97:eurorack/plaits/dsp/physical_modelling/modal_voice.cc **** }
 554              		.loc 2 97 21 view .LVU153
 555 017a FFF7FEBF 		b	_ZN6plaits9Resonator7ProcessEffffPKfPfj
 556              	.LVL44:
 557              	.L11:
 558              		.cfi_restore_state
  64:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   
 559              		.loc 2 64 15 view .LVU154
 560 017e 29EE099A 		vmul.f32	s18, s18, s18
 561              	.LVL45:
  77:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     const float dust_f = 0.00005f + 0.99995f * density * density;
 562              		.loc 2 77 3 is_stmt 1 view .LVU155
 563              	.LBB100:
  78:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     for (size_t i = 0; i < size; ++i) {
 564              		.loc 2 78 5 view .LVU156
  78:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     for (size_t i = 0; i < size; ++i) {
 565              		.loc 2 78 46 is_stmt 0 view .LVU157
 566 0182 DFED337A 		vldr.32	s15, .L36+32
  78:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     for (size_t i = 0; i < size; ++i) {
 567              		.loc 2 78 17 view .LVU158
 568 0186 9FED337A 		vldr.32	s14, .L36+36
 569 018a 2246     		mov	r2, r4
 570 018c 3248     		ldr	r0, .L36+40
 571 018e 04EB070C 		add	ip, r4, r7
  78:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     for (size_t i = 0; i < size; ++i) {
 572              		.loc 2 78 46 view .LVU159
 573 0192 69EE277A 		vmul.f32	s15, s18, s15
  78:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     for (size_t i = 0; i < size; ++i) {
 574              		.loc 2 78 17 view .LVU160
 575 0196 0021     		movs	r1, #0
 576 0198 0368     		ldr	r3, [r0]
 577 019a A7EE897A 		vfma.f32	s14, s15, s18
 578              	.LVL46:
  79:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       temp[i] = Dust(dust_f) * (4.0f - dust_f * 3.0f) * accent;
 579              		.loc 2 79 5 is_stmt 1 view .LVU161
  79:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       temp[i] = Dust(dust_f) * (4.0f - dust_f * 3.0f) * accent;
 580              		.loc 2 79 5 is_stmt 0 view .LVU162
 581 019e 83E7     		b	.L18
 582              	.LVL47:
 583              	.L8:
  79:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       temp[i] = Dust(dust_f) * (4.0f - dust_f * 3.0f) * accent;
 584              		.loc 2 79 5 view .LVU163
 585              	.LBE100:
  70:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   const float cutoff = min(
 586              		.loc 2 70 3 is_stmt 1 view .LVU164
  70:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   const float cutoff = min(
 587              		.loc 2 70 27 is_stmt 0 view .LVU165
 588 01a0 B1EE008A 		vmov.f32	s16, #4.0e+0
  69:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   const float f = sustain ? 4.0f * f0 : 2.0f * f0;
 589              		.loc 2 69 31 view .LVU166
 590 01a4 9FED2D0A 		vldr.32	s0, .L36+44
 591              	.LVL48:
  70:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   const float cutoff = min(
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 21


 592              		.loc 2 70 27 view .LVU167
 593 01a8 20EE888A 		vmul.f32	s16, s1, s16
 594              	.LVL49:
 595              	.L24:
  71:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       f * SemitonesToRatio((brightness * (2.0f - brightness) - 0.5f) * range),
 596              		.loc 2 71 3 is_stmt 1 discriminator 4 view .LVU168
  72:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       0.499f);
 597              		.loc 2 72 48 is_stmt 0 discriminator 4 view .LVU169
 598 01ac B0EE007A 		vmov.f32	s14, #2.0e+0
 599 01b0 4FEA8907 		lsl	r7, r9, #2
  72:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       0.499f);
 600              		.loc 2 72 62 discriminator 4 view .LVU170
 601 01b4 FEEE007A 		vmov.f32	s15, #-5.0e-1
  72:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       0.499f);
 602              		.loc 2 72 48 discriminator 4 view .LVU171
 603 01b8 37EE4B7A 		vsub.f32	s14, s14, s22
  72:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       0.499f);
 604              		.loc 2 72 62 discriminator 4 view .LVU172
 605 01bc E7EE0B7A 		vfma.f32	s15, s14, s22
  72:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       0.499f);
 606              		.loc 2 72 27 discriminator 4 view .LVU173
 607 01c0 27EE800A 		vmul.f32	s0, s15, s0
 608 01c4 FFF7FEFF 		bl	_ZN6stmlib16SemitonesToRatioEf
 609              	.LVL50:
  72:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       0.499f);
 610              		.loc 2 72 9 discriminator 4 view .LVU174
 611 01c8 20EE088A 		vmul.f32	s16, s0, s16
 612              	.LVL51:
 613              	.LBB101:
 614              	.LBI101:
 615              		.file 7 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h"
   1:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
   3:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** //
   5:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // any later version.
  10:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  11:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  16:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  20:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  25:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** /*
  26:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 22


  27:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  30:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  38:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  39:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  42:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  */
  50:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  51:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  */
  55:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  56:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  59:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  73:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** # include <type_traits>
  74:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  75:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus > 201703L
  76:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** # include <compare>
  77:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  78:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  79:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** {
  81:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  83:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /*
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 23


  84:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    * A constexpr wrapper for __builtin_memcmp.
  85:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    * @param __num The number of elements of type _Tp (not bytes).
  86:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    */
  87:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Up>
  88:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
  89:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline int
  90:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
  91:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
  92:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  93:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
  94:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  95:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
  96:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
  97:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
  98:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  for(; __num > 0; ++__first1, ++__first2, --__num)
  99:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    if (*__first1 != *__first2)
 100:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      return *__first1 < *__first2 ? -1 : 1;
 101:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return 0;
 102:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 103:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       else
 104:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 105:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 106:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 107:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 108:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 109:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
 110:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
 111:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
 112:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _BoolType>
 113:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap
 114:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 115:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 116:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static void
 117:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 119:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    _ValueType1;
 121:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
 122:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  *__a = *__b;
 123:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  *__b = __tmp;
 124:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 125:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 126:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 127:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<>
 128:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap<true>
 129:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 130:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 131:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static void
 132:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 133:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 134:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  swap(*__a, *__b);
 135:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 136:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 137:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif // C++03
 138:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 139:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 140:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 24


 141:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 142:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 143:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 144:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   Nothing.
 145:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 146:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 147:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  iterators themselves.
 148:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 149:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 150:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 151:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline void
 152:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 153:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 154:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 155:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 156:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 157:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 158:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 159:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 160:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 161:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 162:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType1;
 163:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 164:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType2;
 165:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 166:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 167:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType2>)
 168:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 169:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType1>)
 170:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 171:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 172:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType1;
 173:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 174:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType2;
 175:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 176:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 177:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 178:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 179:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #else
 180:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 181:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // 187. iter_swap underspecified
 182:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       swap(*__a, *__b);
 183:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 184:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 185:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 186:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 187:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 188:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 189:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 190:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 191:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 192:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 193:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 194:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 195:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 196:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  The ranges must not overlap.
 197:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 25


 198:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 199:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 200:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _ForwardIterator2
 201:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 202:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 203:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 204:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 205:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 206:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 207:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 208:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 209:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 210:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 211:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 212:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 213:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __first2;
 214:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 215:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 216:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 217:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 218:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 219:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 220:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 221:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 222:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 223:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 224:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 225:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 226:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 227:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 228:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 229:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 230:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 616              		.loc 7 230 5 is_stmt 1 discriminator 4 view .LVU175
 617              	.LBB102:
 231:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 232:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 233:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 234:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 235:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (__b < __a)
 618              		.loc 7 235 7 is_stmt 0 discriminator 4 view .LVU176
 619 01cc DFED247A 		vldr.32	s15, .L36+48
 236:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 620              		.loc 7 236 9 discriminator 4 view .LVU177
 621 01d0 B4EE678A 		vcmp.f32	s16, s15
 622 01d4 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 623 01d8 37FE888A 		vselgt.f32	s16, s15, s16
 624              	.LVL52:
 625              		.loc 7 236 9 discriminator 4 view .LVU178
 626              	.LBE102:
 627              	.LBE101:
  74:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   
 628              		.loc 2 74 3 is_stmt 1 discriminator 4 view .LVU179
  74:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   
 629              		.loc 2 74 27 is_stmt 0 discriminator 4 view .LVU180
 630 01dc 002E     		cmp	r6, #0
 631 01de CED1     		bne	.L11
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 26


 632              	.LVL53:
  77:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     const float dust_f = 0.00005f + 0.99995f * density * density;
 633              		.loc 2 77 3 is_stmt 1 view .LVU181
 634              	.LBB103:
  83:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     if (trigger) {
 635              		.loc 2 83 5 view .LVU182
 636              	.LBB104:
 637              	.LBI104:
 237:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 238:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 239:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 240:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 241:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 242:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 243:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 244:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 245:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 246:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 247:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 248:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 249:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 250:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 251:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 252:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 253:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 254:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 255:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 256:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 257:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 258:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 259:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (__a < __b)
 260:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 261:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 262:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 263:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 264:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 265:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 266:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 267:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 268:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 269:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 270:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 271:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 272:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 273:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 274:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 275:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 276:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 277:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 278:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b, _Compare __comp)
 279:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 280:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       //return __comp(__b, __a) ? __b : __a;
 281:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (__comp(__b, __a))
 282:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 283:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 284:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 285:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 27


 286:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 287:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 288:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 289:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 290:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 291:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 292:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 293:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 294:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 295:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 296:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 297:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 298:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 299:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 300:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
 301:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 302:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       //return __comp(__a, __b) ? __b : __a;
 303:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (__comp(__a, __b))
 304:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 305:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 306:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 307:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 308:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // Fallback implementation of the function in bits/stl_iterator.h used to
 309:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // remove the __normal_iterator wrapper. See copy, fill, ...
 310:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Iterator>
 311:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 312:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _Iterator
 313:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __niter_base(_Iterator __it)
 314:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
 315:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     { return __it; }
 316:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 317:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // Reverse the __niter_base transformation to get a
 318:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // __normal_iterator back again (this assumes that __normal_iterator
 319:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // is only used to wrap random access iterators, like pointers).
 320:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _From, typename _To>
 321:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 322:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _From
 323:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __niter_wrap(_From __from, _To __res)
 324:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     { return __from + (__res - std::__niter_base(__from)); }
 325:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 326:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // No need to wrap, iterator already has the right type.
 327:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Iterator>
 328:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 329:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _Iterator
 330:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __niter_wrap(const _Iterator&, _Iterator __res)
 331:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     { return __res; }
 332:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 333:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // All of these auxiliary structs serve two purposes.  (1) Replace
 334:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
 335:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // because the input and output ranges are permitted to overlap.)
 336:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // (2) If we're using random access iterators, then write the loop as
 337:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // a for loop with an explicit count.
 338:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 339:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, bool _IsSimple, typename _Category>
 340:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move
 341:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 342:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 28


 343:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 344:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static _OI
 345:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 346:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 347:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 348:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    *__result = *__first;
 349:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 350:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 351:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 352:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 353:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 354:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Category>
 355:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move<true, false, _Category>
 356:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 357:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 358:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 359:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static _OI
 360:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 361:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 362:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 363:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    *__result = std::move(*__first);
 364:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 365:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 366:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 367:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 368:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 369:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<>
 370:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move<false, false, random_access_iterator_tag>
 371:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 372:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 373:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 374:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static _OI
 375:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 376:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 377:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 378:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 379:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    {
 380:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      *__result = *__first;
 381:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      ++__first;
 382:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      ++__result;
 383:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    }
 384:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 385:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 386:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 387:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 388:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 389:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<>
 390:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move<true, false, random_access_iterator_tag>
 391:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 392:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 393:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 394:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static _OI
 395:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 396:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 397:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 398:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 399:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 29


 400:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      *__result = std::move(*__first);
 401:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      ++__first;
 402:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      ++__result;
 403:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    }
 404:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 405:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 406:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 407:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 408:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 409:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove>
 410:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move<_IsMove, true, random_access_iterator_tag>
 411:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 412:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _Tp>
 413:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 414:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static _Tp*
 415:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 416:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 417:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 418:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 419:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 					   is_move_assignable<_Tp>,
 420:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 421:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  // trivial types can have deleted assignment
 422:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 423:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 424:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 425:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  if (_Num)
 426:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 427:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return __result + _Num;
 428:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 429:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 430:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 431:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // Helpers for streambuf iterators (either istream or ostream).
 432:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // NB: avoid including <iosfwd>, relatively large.
 433:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _CharT>
 434:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct char_traits;
 435:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 436:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 437:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     class istreambuf_iterator;
 438:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 439:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 440:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     class ostreambuf_iterator;
 441:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 442:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 443:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 444:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 445:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a2(_CharT*, _CharT*,
 446:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 447:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 448:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 449:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 450:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 451:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a2(const _CharT*, const _CharT*,
 452:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 453:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 454:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 455:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 456:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				    _CharT*>::__type
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 30


 457:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
 458:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
 459:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 460:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 461:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 462:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 463:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a2(_II __first, _II __last, _OI __result)
 464:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 465:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_II>::iterator_category _Category;
 466:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
 467:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
 468:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return std::__copy_move<_IsMove, false, _Category>::
 469:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  __copy_m(__first, __last, __result);
 470:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 471:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
 472:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 			      _Category>::__copy_m(__first, __last, __result);
 473:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 474:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 475:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
 476:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 477:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 478:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct _Deque_iterator;
 479:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 480:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** _GLIBCXX_END_NAMESPACE_CONTAINER
 481:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 482:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 483:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
 484:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _OI
 485:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 486:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 487:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		   _OI);
 488:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 489:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 490:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
 491:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
 492:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 493:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 494:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>);
 495:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 496:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _Tp>
 497:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<
 498:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __is_random_access_iter<_II>::__value,
 499:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
 500:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a1(_II, _II, _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
 501:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 502:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 503:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 504:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 505:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a1(_II __first, _II __last, _OI __result)
 506:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 507:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 508:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 509:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 510:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 511:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a(_II __first, _II __last, _OI __result)
 512:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 513:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return std::__niter_wrap(__result,
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 31


 514:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		std::__copy_move_a1<_IsMove>(std::__niter_base(__first),
 515:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 					     std::__niter_base(__last),
 516:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 					     std::__niter_base(__result)));
 517:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 518:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 519:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 520:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
 521:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _OI
 522:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 523:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 524:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		  _OI);
 525:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 526:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 527:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	   typename _II, typename _Ite, typename _Seq, typename _Cat>
 528:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
 529:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a(_II, _II,
 530:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);
 531:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 532:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 533:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	   typename _IIte, typename _ISeq, typename _ICat,
 534:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	   typename _OIte, typename _OSeq, typename _OCat>
 535:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
 536:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a(const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 537:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 538:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
 539:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 540:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 541:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 542:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 543:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  An input iterator.
 544:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last   An input iterator.
 545:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __result An output iterator.
 546:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   result + (last - first)
 547:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 548:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 549:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 550:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 551:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 552:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  [first,last); the copy_backward function should be used instead.
 553:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 554:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 555:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  within [first,last).
 556:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 557:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 558:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 559:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 560:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     copy(_II __first, _II __last, _OI __result)
 561:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 562:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 563:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 564:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 565:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 566:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_can_increment_range(__first, __last, __result);
 567:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 568:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move_a<__is_move_iterator<_II>::__value>
 569:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 570:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 32


 571:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 572:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 573:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 574:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 575:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 576:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  An input iterator.
 577:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last   An input iterator.
 578:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __result An output iterator.
 579:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   result + (last - first)
 580:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 581:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 582:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 583:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 584:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 585:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  [first,last); the move_backward function should be used instead.
 586:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 587:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 588:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  within [first,last).
 589:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 590:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 591:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 592:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 593:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     move(_II __first, _II __last, _OI __result)
 594:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 595:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 596:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 597:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 598:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 599:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_can_increment_range(__first, __last, __result);
 600:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 601:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move_a<true>(std::__miter_base(__first),
 602:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				      std::__miter_base(__last), __result);
 603:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 604:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 605:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::move(_Tp, _Up, _Vp)
 606:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #else
 607:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::copy(_Tp, _Up, _Vp)
 608:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 609:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 610:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, bool _IsSimple, typename _Category>
 611:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move_backward
 612:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 613:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 614:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 615:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static _BI2
 616:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 617:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 618:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  while (__first != __last)
 619:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    *--__result = *--__last;
 620:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 621:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 622:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 623:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 624:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 625:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Category>
 626:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move_backward<true, false, _Category>
 627:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 33


 628:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 629:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 630:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static _BI2
 631:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 632:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 633:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  while (__first != __last)
 634:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    *--__result = std::move(*--__last);
 635:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 636:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 637:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 638:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 639:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 640:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<>
 641:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move_backward<false, false, random_access_iterator_tag>
 642:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 643:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 644:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 645:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static _BI2
 646:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 647:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 648:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type
 649:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    __n = __last - __first;
 650:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  for (; __n > 0; --__n)
 651:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    *--__result = *--__last;
 652:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 653:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 654:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 655:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 656:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 657:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<>
 658:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move_backward<true, false, random_access_iterator_tag>
 659:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 660:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 661:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 662:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static _BI2
 663:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 664:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 665:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type
 666:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    __n = __last - __first;
 667:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  for (; __n > 0; --__n)
 668:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    *--__result = std::move(*--__last);
 669:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 670:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 671:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 672:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 673:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 674:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove>
 675:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
 676:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 677:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _Tp>
 678:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 679:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static _Tp*
 680:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 681:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 682:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 683:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 684:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 					   is_move_assignable<_Tp>,
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 34


 685:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 686:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  // trivial types can have deleted assignment
 687:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 688:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 689:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 690:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  if (_Num)
 691:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 692:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return __result - _Num;
 693:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 694:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 695:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 696:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 697:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 698:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _BI2
 699:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 700:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 701:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_BI1>::iterator_category _Category;
 702:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
 703:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
 704:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return std::__copy_move_backward<_IsMove, false, _Category>::
 705:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  __copy_move_b(__first, __last, __result);
 706:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 707:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move_backward<_IsMove,
 708:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				       __memcpyable<_BI2, _BI1>::__value,
 709:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				       _Category>::__copy_move_b(__first,
 710:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 								 __last,
 711:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 								 __result);
 712:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 713:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 714:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 715:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 716:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _BI2
 717:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 718:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 719:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 720:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 721:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
 722:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _OI
 723:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 724:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 			    _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 725:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 			    _OI);
 726:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 727:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 728:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
 729:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
 730:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a1(
 731:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 732:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 733:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>);
 734:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 735:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _Tp>
 736:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<
 737:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __is_random_access_iter<_II>::__value,
 738:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
 739:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a1(_II, _II,
 740:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 			    _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
 741:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 35


 742:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 743:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 744:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 745:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a(_II __first, _II __last, _OI __result)
 746:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 747:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return std::__niter_wrap(__result,
 748:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		std::__copy_move_backward_a1<_IsMove>
 749:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		  (std::__niter_base(__first), std::__niter_base(__last),
 750:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		   std::__niter_base(__result)));
 751:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 752:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 753:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 754:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
 755:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _OI
 756:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a(
 757:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 758:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 759:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		_OI);
 760:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 761:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 762:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	   typename _II, typename _Ite, typename _Seq, typename _Cat>
 763:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
 764:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a(_II, _II,
 765:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);
 766:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 767:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 768:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	   typename _IIte, typename _ISeq, typename _ICat,
 769:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	   typename _OIte, typename _OSeq, typename _OCat>
 770:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
 771:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a(
 772:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 773:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 774:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
 775:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 776:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 777:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 778:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 779:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  A bidirectional iterator.
 780:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last   A bidirectional iterator.
 781:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __result A bidirectional iterator.
 782:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   result - (last - first)
 783:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 784:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  The function has the same effect as copy, but starts at the end of the
 785:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 786:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 787:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 788:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 789:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  optimizations such as unrolling).
 790:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 791:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  Result may not be in the range (first,last].  Use copy instead.  Note
 792:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 793:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 794:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _BI1, typename _BI2>
 795:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 796:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _BI2
 797:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 798:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 36


 799:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 800:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
 801:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 802:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<
 803:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
 804:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
 805:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_can_decrement_range(__first, __last, __result);
 806:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 807:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
 808:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 809:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 810:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 811:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 812:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 813:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 814:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 815:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  A bidirectional iterator.
 816:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last   A bidirectional iterator.
 817:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __result A bidirectional iterator.
 818:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   result - (last - first)
 819:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 820:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  The function has the same effect as move, but starts at the end of the
 821:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 822:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 823:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 824:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 825:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  optimizations such as unrolling).
 826:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 827:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  Result may not be in the range (first,last].  Use move instead.  Note
 828:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 829:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 830:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _BI1, typename _BI2>
 831:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 832:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _BI2
 833:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 834:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 835:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 836:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
 837:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 838:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<
 839:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
 840:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
 841:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_can_decrement_range(__first, __last, __result);
 842:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 843:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 844:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 					       std::__miter_base(__last),
 845:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 					       __result);
 846:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 847:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 848:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::move_backward(_Tp, _Up, _Vp)
 849:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #else
 850:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::copy_backward(_Tp, _Up, _Vp)
 851:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 852:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 853:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 854:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 855:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline typename
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 37


 856:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
 857:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 858:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      const _Tp& __value)
 859:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 860:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       for (; __first != __last; ++__first)
 861:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	*__first = __value;
 862:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 863:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 864:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 865:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 866:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline typename
 867:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
 868:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 869:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      const _Tp& __value)
 870:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 871:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       const _Tp __tmp = __value;
 872:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       for (; __first != __last; ++__first)
 873:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	*__first = __tmp;
 874:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 875:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 876:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // Specialization: for char types we can use memset.
 877:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 878:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 879:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline typename
 880:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
 881:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 882:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 883:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       const _Tp __tmp = __c;
 884:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cpp_lib_is_constant_evaluated
 885:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
 886:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 887:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  for (; __first != __last; ++__first)
 888:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    *__first = __tmp;
 889:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return;
 890:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 891:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 892:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (const size_t __len = __last - __first)
 893:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 894:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 895:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 896:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Ite, typename _Cont, typename _Tp>
 897:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 898:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline void
 899:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __fill_a1(::__gnu_cxx::__normal_iterator<_Ite, _Cont> __first,
 900:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      ::__gnu_cxx::__normal_iterator<_Ite, _Cont> __last,
 901:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      const _Tp& __value)
 902:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     { std::__fill_a1(__first.base(), __last.base(), __value); }
 903:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 904:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _VTp>
 905:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     void
 906:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __fill_a1(const _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
 907:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      const _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
 908:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      const _VTp&);
 909:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 910:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _FIte, typename _Tp>
 911:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 912:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline void
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 38


 913:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 914:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     { std::__fill_a1(__first, __last, __value); }
 915:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 916:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Ite, typename _Seq, typename _Cat, typename _Tp>
 917:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     void
 918:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __fill_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 919:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	     const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 920:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	     const _Tp&);
 921:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 922:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 923:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Fills the range [first,last) with copies of value.
 924:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 925:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  A forward iterator.
 926:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last   A forward iterator.
 927:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __value  A reference-to-const of arbitrary type.
 928:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   Nothing.
 929:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 930:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This function fills a range with copies of the same value.  For char
 931:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  types filling contiguous areas of memory, this becomes an inline call
 932:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  to @c memset or @c wmemset.
 933:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 934:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 935:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 936:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline void
 937:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 638              		.loc 7 937 5 view .LVU183
 639              	.LBB105:
 640              	.LBI105:
 913:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     { std::__fill_a1(__first, __last, __value); }
 641              		.loc 7 913 5 view .LVU184
 642              	.LBB106:
 643              	.LBI106:
 868:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      const _Tp& __value)
 644              		.loc 7 868 5 view .LVU185
 645              	.LBB107:
 873:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 646              		.loc 7 873 11 is_stmt 0 view .LVU186
 647 01e0 3A46     		mov	r2, r7
 648 01e2 3146     		mov	r1, r6
 649 01e4 2046     		mov	r0, r4
 650 01e6 FFF7FEFF 		bl	memset
 651              	.LVL54:
 873:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 652              		.loc 7 873 11 view .LVU187
 653              	.LBE107:
 654              	.LBE106:
 655              	.LBE105:
 656              	.LBE104:
  84:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       const float attenuation = 1.0f - damping * 0.5f;
 657              		.loc 2 84 5 is_stmt 1 view .LVU188
 658              	.LBB108:
 659 01ea BBF1000F 		cmp	fp, #0
 660 01ee 1BD0     		beq	.L35
 661              	.LBB109:
  85:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       const float amplitude = (0.12f + 0.08f * accent) * attenuation;
 662              		.loc 2 85 7 view .LVU189
  85:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       const float amplitude = (0.12f + 0.08f * accent) * attenuation;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 39


 663              		.loc 2 85 19 is_stmt 0 view .LVU190
 664 01f0 B6EE007A 		vmov.f32	s14, #5.0e-1
  86:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       temp[0] = amplitude * SemitonesToRatio(cutoff * cutoff * 24.0f) / cutoff;
 665              		.loc 2 86 38 view .LVU191
 666 01f4 DFED1B8A 		vldr.32	s17, .L36+52
  85:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       const float amplitude = (0.12f + 0.08f * accent) * attenuation;
 667              		.loc 2 85 19 view .LVU192
 668 01f8 F0EE6B7A 		vmov.f32	s15, s23
  87:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     }
 669              		.loc 2 87 45 view .LVU193
 670 01fc B3EE080A 		vmov.f32	s0, #2.4e+1
  85:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       const float amplitude = (0.12f + 0.08f * accent) * attenuation;
 671              		.loc 2 85 19 view .LVU194
 672 0200 EAEE477A 		vfms.f32	s15, s20, s14
 673              	.LVL55:
  86:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       temp[0] = amplitude * SemitonesToRatio(cutoff * cutoff * 24.0f) / cutoff;
 674              		.loc 2 86 7 is_stmt 1 view .LVU195
  86:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       temp[0] = amplitude * SemitonesToRatio(cutoff * cutoff * 24.0f) / cutoff;
 675              		.loc 2 86 38 is_stmt 0 view .LVU196
 676 0204 9FED187A 		vldr.32	s14, .L36+56
 677 0208 ECEE078A 		vfma.f32	s17, s24, s14
  86:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****       temp[0] = amplitude * SemitonesToRatio(cutoff * cutoff * 24.0f) / cutoff;
 678              		.loc 2 86 19 view .LVU197
 679 020c 68EEA78A 		vmul.f32	s17, s17, s15
 680              	.LVL56:
  87:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     }
 681              		.loc 2 87 7 is_stmt 1 view .LVU198
 682              	.LBE109:
 683              	.LBE108:
 684              	.LBE103:
 685              	.LBB113:
 686              	.LBB97:
 687              	.LBB95:
 688              	.LBB86:
 689              	.LBB83:
 122:eurorack/stmlib/dsp/filter.h ****       return f * (M_PI_F + f2 * (a + b * f2));
 690              		.loc 6 122 13 is_stmt 0 view .LVU199
 691 0210 68EE087A 		vmul.f32	s15, s16, s16
 692              	.LVL57:
 122:eurorack/stmlib/dsp/filter.h ****       return f * (M_PI_F + f2 * (a + b * f2));
 693              		.loc 6 122 13 view .LVU200
 694              	.LBE83:
 695              	.LBE86:
 696              	.LBE95:
 697              	.LBE97:
 698              	.LBE113:
 699              	.LBB114:
 700              	.LBB111:
 701              	.LBB110:
  87:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     }
 702              		.loc 2 87 45 view .LVU201
 703 0214 27EE800A 		vmul.f32	s0, s15, s0
 704 0218 FFF7FEFF 		bl	_ZN6stmlib16SemitonesToRatioEf
 705              	.LVL58:
  87:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     }
 706              		.loc 2 87 27 view .LVU202
 707 021c 20EE280A 		vmul.f32	s0, s0, s17
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 40


  87:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     }
 708              		.loc 2 87 71 view .LVU203
 709 0220 C0EE087A 		vdiv.f32	s15, s0, s16
  87:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     }
 710              		.loc 2 87 15 view .LVU204
 711 0224 C4ED007A 		vstr.32	s15, [r4]
 712              	.LVL59:
 713              	.L35:
  87:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****     }
 714              		.loc 2 87 15 view .LVU205
 715              	.LBE110:
 716              	.LBE111:
 717              	.LBE114:
  74:eurorack/plaits/dsp/physical_modelling/modal_voice.cc ****   
 718              		.loc 2 74 27 view .LVU206
 719 0228 B7EE087A 		vmov.f32	s14, #1.5e+0
 720              	.LBB115:
 721              	.LBB112:
 722 022c 42E7     		b	.L15
 723              	.L37:
 724 022e 00BF     		.align	2
 725              	.L36:
 726 0230 00007042 		.word	1114636288
 727 0234 5FF36E3C 		.word	1013904223
 728 0238 0000802F 		.word	796917760
 729 023c 00000000 		.word	0
 730 0240 3333333F 		.word	1060320051
 731 0244 49265F42 		.word	1113531977
 732 0248 8FBA2141 		.word	1092729487
 733 024c DB0F4940 		.word	1078530011
 734 0250 B9FC7F3F 		.word	1065352377
 735 0254 17B75138 		.word	944879383
 736 0258 00000000 		.word	_ZN6stmlib6Random10rng_state_E
 737 025c 00001042 		.word	1108344832
 738 0260 EE7CFF3E 		.word	1056931054
 739 0264 8FC2F53D 		.word	1039516303
 740 0268 0AD7A33D 		.word	1034147594
 741 026c 0D661900 		.word	1664525
 742              	.LBE112:
 743              	.LBE115:
 744              		.cfi_endproc
 745              	.LFE1502:
 747              		.text
 748              	.Letext0:
 749              		.file 8 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/machine/_default_types.h"
 750              		.file 9 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/_stdint.h"
 751              		.file 10 "/Library/DaisyToolchain/0.2.0/arm/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 752              		.file 11 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cmath"
 753              		.file 12 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h"
 754              		.file 13 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/type_traits"
 755              		.file 14 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/debug/debug.h"
 756              		.file 15 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdlib"
 757              		.file 16 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/arm-none-eabi/thumb/v
 758              		.file 17 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/algorithmfwd.h"
 759              		.file 18 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h"
 760              		.file 19 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/exception_ptr.h"
 761              		.file 20 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/predefined_ops.h
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 41


 762              		.file 21 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/math.h"
 763              		.file 22 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdlib.h"
 764              		.file 23 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/math.h"
 765              		.file 24 "eurorack/stmlib/stmlib.h"
 766              		.file 25 "eurorack/plaits/dsp/physical_modelling/modal_voice.h"
 767              		.file 26 "<built-in>"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s 			page 42


DEFINED SYMBOLS
                            *ABS*:0000000000000000 modal_voice.cc
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s:19     .text._ZN6stmlib16SemitonesToRatioEf:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s:25     .text._ZN6stmlib16SemitonesToRatioEf:0000000000000000 _ZN6stmlib16SemitonesToRatioEf
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s:73     .text._ZN6stmlib16SemitonesToRatioEf:000000000000003c $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s:80     .text._ZN6plaits10ModalVoice4InitEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s:86     .text._ZN6plaits10ModalVoice4InitEv:0000000000000000 _ZN6plaits10ModalVoice4InitEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s:129    .text._ZN6plaits10ModalVoice4InitEv:0000000000000014 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s:134    .text._ZN6plaits10ModalVoice6RenderEbbfffffPfS1_S1_j:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s:140    .text._ZN6plaits10ModalVoice6RenderEbbfffffPfS1_S1_j:0000000000000000 _ZN6plaits10ModalVoice6RenderEbbfffffPfS1_S1_j
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccyv78ZY.s:726    .text._ZN6plaits10ModalVoice6RenderEbbfffffPfS1_S1_j:0000000000000230 $d

UNDEFINED SYMBOLS
_ZN6stmlib19lut_pitch_ratio_lowE
_ZN6stmlib20lut_pitch_ratio_highE
_ZN6plaits9Resonator4InitEfi
_ZN6plaits9Resonator7ProcessEffffPKfPfj
memset
_ZN6stmlib6Random10rng_state_E
