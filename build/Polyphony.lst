ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"Polyphony.cpp"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text._ZN15PolyphonyEngineD2Ev,"ax",%progbits
  19              		.align	1
  20              		.global	_ZN15PolyphonyEngineD2Ev
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	_ZN15PolyphonyEngineD2Ev:
  26              	.LVL0:
  27              	.LFB6119:
  28              		.file 1 "Polyphony.cpp"
   1:Polyphony.cpp **** #include "Thaumazein.h"
   2:Polyphony.cpp **** #include "Polyphony.h"
   3:Polyphony.cpp **** #include "stmlib/utils/buffer_allocator.h"
   4:Polyphony.cpp **** 
   5:Polyphony.cpp **** DSY_SDRAM_BSS char shared_buffer[262144];
   6:Polyphony.cpp **** 
   7:Polyphony.cpp **** const int MAX_ENGINE_INDEX = 15;
   8:Polyphony.cpp **** 
   9:Polyphony.cpp **** 
  10:Polyphony.cpp **** PolyphonyEngine poly_engine;
  11:Polyphony.cpp **** 
  12:Polyphony.cpp **** const float PolyphonyEngine::kTouchMidiNotes_[12] = {
  13:Polyphony.cpp ****     40.0f, 41.0f, 43.0f, 45.0f, 47.0f, 48.0f, // E2, F2, G2, A2, B2, C3
  14:Polyphony.cpp ****     50.0f, 52.0f, 53.0f, 55.0f, 57.0f, 59.0f  // D3, E3, F3, G3, A3, B3
  15:Polyphony.cpp **** };
  16:Polyphony.cpp **** 
  17:Polyphony.cpp **** PolyphonyEngine::PolyphonyEngine() : allocator_(nullptr), hw_ptr_(nullptr), engine_changed_flag_(fa
  18:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
  19:Polyphony.cpp ****     memset(voice_note_, 0, sizeof(voice_note_));
  20:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
  21:Polyphony.cpp ****     memset(mix_buffer_aux_, 0, sizeof(mix_buffer_aux_));
  22:Polyphony.cpp **** }
  23:Polyphony.cpp **** 
  24:Polyphony.cpp **** PolyphonyEngine::~PolyphonyEngine() {
  29              		.loc 1 24 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LBB1251:
  25:Polyphony.cpp ****     if (allocator_) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 2


  34              		.loc 1 25 5 view .LVU1
  35              		.loc 1 25 9 is_stmt 0 view .LVU2
  36 0000 00F58043 		add	r3, r0, #16384
  37              	.LBE1251:
  24:Polyphony.cpp ****     if (allocator_) {
  38              		.loc 1 24 1 view .LVU3
  39 0004 10B5     		push	{r4, lr}
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 4, -8
  42              		.cfi_offset 14, -4
  24:Polyphony.cpp ****     if (allocator_) {
  43              		.loc 1 24 1 view .LVU4
  44 0006 0446     		mov	r4, r0
  45              	.LBB1253:
  46              		.loc 1 25 9 view .LVU5
  47 0008 D3F8B40B 		ldr	r0, [r3, #2996]
  48              	.LVL1:
  49              		.loc 1 25 5 view .LVU6
  50 000c 10B1     		cbz	r0, .L2
  26:Polyphony.cpp ****         delete allocator_;
  51              		.loc 1 26 9 is_stmt 1 view .LVU7
  52              	.LVL2:
  53              	.LBB1252:
  54              	.LBI1252:
  55              		.file 2 "eurorack/stmlib/utils/buffer_allocator.h"
   1:eurorack/stmlib/utils/buffer_allocator.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/stmlib/utils/buffer_allocator.h **** //
   3:eurorack/stmlib/utils/buffer_allocator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/utils/buffer_allocator.h **** //
   5:eurorack/stmlib/utils/buffer_allocator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/utils/buffer_allocator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/utils/buffer_allocator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/utils/buffer_allocator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/utils/buffer_allocator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/utils/buffer_allocator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/utils/buffer_allocator.h **** // 
  12:eurorack/stmlib/utils/buffer_allocator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/utils/buffer_allocator.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/utils/buffer_allocator.h **** // 
  15:eurorack/stmlib/utils/buffer_allocator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/utils/buffer_allocator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/utils/buffer_allocator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/utils/buffer_allocator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/utils/buffer_allocator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/utils/buffer_allocator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/utils/buffer_allocator.h **** // THE SOFTWARE.
  22:eurorack/stmlib/utils/buffer_allocator.h **** // 
  23:eurorack/stmlib/utils/buffer_allocator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/utils/buffer_allocator.h **** //
  25:eurorack/stmlib/utils/buffer_allocator.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/utils/buffer_allocator.h **** //
  27:eurorack/stmlib/utils/buffer_allocator.h **** // Stream buffer for serialization.
  28:eurorack/stmlib/utils/buffer_allocator.h **** 
  29:eurorack/stmlib/utils/buffer_allocator.h **** #ifndef STMLIB_UTILS_BUFFER_ALLOCATOR_H_
  30:eurorack/stmlib/utils/buffer_allocator.h **** #define STMLIB_UTILS_BUFFER_ALLOCATOR_H_
  31:eurorack/stmlib/utils/buffer_allocator.h **** 
  32:eurorack/stmlib/utils/buffer_allocator.h **** #include "stmlib/stmlib.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 3


  33:eurorack/stmlib/utils/buffer_allocator.h **** 
  34:eurorack/stmlib/utils/buffer_allocator.h **** namespace stmlib {
  35:eurorack/stmlib/utils/buffer_allocator.h **** 
  36:eurorack/stmlib/utils/buffer_allocator.h **** class BufferAllocator {
  37:eurorack/stmlib/utils/buffer_allocator.h ****  public:
  38:eurorack/stmlib/utils/buffer_allocator.h ****   BufferAllocator() { }
  39:eurorack/stmlib/utils/buffer_allocator.h ****   ~BufferAllocator() { }
  56              		.loc 2 39 3 view .LVU8
  57              		.loc 2 39 3 is_stmt 0 view .LVU9
  58              	.LBE1252:
  59              		.loc 1 26 16 view .LVU10
  60 000e 1021     		movs	r1, #16
  61 0010 FFF7FEFF 		bl	_ZdlPvj
  62              	.LVL3:
  27:Polyphony.cpp ****         allocator_ = nullptr;
  63              		.loc 1 27 9 is_stmt 1 view .LVU11
  64              	.L2:
  65              	.LBE1253:
  28:Polyphony.cpp ****     }
  29:Polyphony.cpp **** }
  66              		.loc 1 29 1 is_stmt 0 view .LVU12
  67 0014 2046     		mov	r0, r4
  68 0016 10BD     		pop	{r4, pc}
  69              		.loc 1 29 1 view .LVU13
  70              		.cfi_endproc
  71              	.LFE6119:
  73              		.global	_ZN15PolyphonyEngineD1Ev
  74              		.thumb_set _ZN15PolyphonyEngineD1Ev,_ZN15PolyphonyEngineD2Ev
  75              		.section	.text._ZN13VoiceEnvelope7TriggerEv,"axG",%progbits,_ZN13VoiceEnvelope7TriggerEv,comdat
  76              		.align	1
  77              		.weak	_ZN13VoiceEnvelope7TriggerEv
  78              		.syntax unified
  79              		.thumb
  80              		.thumb_func
  82              	_ZN13VoiceEnvelope7TriggerEv:
  83              	.LVL4:
  84              	.LFB5536:
  85              		.file 3 "VoiceEnvelope.h"
   1:VoiceEnvelope.h **** #pragma once
   2:VoiceEnvelope.h **** #include <algorithm>
   3:VoiceEnvelope.h **** 
   4:VoiceEnvelope.h **** // Simple envelope for each polyphonic voice
   5:VoiceEnvelope.h **** class VoiceEnvelope {
   6:VoiceEnvelope.h **** public:
   7:VoiceEnvelope.h ****     enum EnvState {
   8:VoiceEnvelope.h ****         ENV_IDLE,
   9:VoiceEnvelope.h ****         ENV_ATTACK,
  10:VoiceEnvelope.h ****         ENV_SUSTAIN,
  11:VoiceEnvelope.h ****         ENV_DECAY,
  12:VoiceEnvelope.h ****         ENV_RESET
  13:VoiceEnvelope.h ****     };
  14:VoiceEnvelope.h **** 
  15:VoiceEnvelope.h ****     enum EnvMode {
  16:VoiceEnvelope.h ****         MODE_AR,   // Attack-Release
  17:VoiceEnvelope.h ****         MODE_ASR   // Attack-Sustain-Release
  18:VoiceEnvelope.h ****     };
  19:VoiceEnvelope.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 4


  20:VoiceEnvelope.h ****     VoiceEnvelope() :
  21:VoiceEnvelope.h ****         current_state(ENV_IDLE),
  22:VoiceEnvelope.h ****         mode(MODE_ASR),
  23:VoiceEnvelope.h ****         current_value(0.0f),
  24:VoiceEnvelope.h ****         attack_curve_coefficient(0.5f),
  25:VoiceEnvelope.h ****         release_curve_coefficient(0.5f),
  26:VoiceEnvelope.h ****         phase(0),
  27:VoiceEnvelope.h ****         decay_start_level(0.0f)
  28:VoiceEnvelope.h ****     {}
  29:VoiceEnvelope.h **** 
  30:VoiceEnvelope.h ****     void Init(float sample_rate) {
  31:VoiceEnvelope.h ****         time_range_2x = 2.0f * 4.0f * sample_rate;  // 4s max time
  32:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
  33:VoiceEnvelope.h ****         min_decay_time_a = 0.4f * sample_rate;      // 400ms min decay A
  34:VoiceEnvelope.h ****         min_decay_time_b = 0.0001f * sample_rate;    // 0.1ms min decay B (pulse-like release)
  35:VoiceEnvelope.h ****         reset_time = 0.008f * sample_rate;          // 8ms reset time
  36:VoiceEnvelope.h ****         reset_coefficient = 1.0f / reset_time;
  37:VoiceEnvelope.h ****         
  38:VoiceEnvelope.h ****         // Default curves
  39:VoiceEnvelope.h ****         SetAttackCurve(0.5f);
  40:VoiceEnvelope.h ****         SetReleaseCurve(0.5f);
  41:VoiceEnvelope.h ****     }
  42:VoiceEnvelope.h **** 
  43:VoiceEnvelope.h ****     void SetMode(EnvMode new_mode) {
  44:VoiceEnvelope.h ****         mode = new_mode;
  45:VoiceEnvelope.h ****     }
  46:VoiceEnvelope.h **** 
  47:VoiceEnvelope.h ****     // Original combined shape method for backward compatibility
  48:VoiceEnvelope.h ****     void SetShape(float value) {
  49:VoiceEnvelope.h ****         float curve;
  50:VoiceEnvelope.h ****         if (value < 0.5f) {
  51:VoiceEnvelope.h ****             attack_time = min_attack_time;
  52:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * value * value) + min_decay_time_a;
  53:VoiceEnvelope.h ****             curve = value * 0.15f;
  54:VoiceEnvelope.h ****         } else {
  55:VoiceEnvelope.h ****             float norm_val = 2.0f * value - 1.0f;
  56:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(time_range_2x * norm_val * norm_val) + min_attack_tim
  57:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
  58:VoiceEnvelope.h ****             curve = 0.5f;
  59:VoiceEnvelope.h ****         }
  60:VoiceEnvelope.h ****         attack_coefficient = 1.0f / attack_time;
  61:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
  62:VoiceEnvelope.h ****         SetAttackCurve(curve);
  63:VoiceEnvelope.h ****         SetReleaseCurve(curve);
  64:VoiceEnvelope.h ****     }
  65:VoiceEnvelope.h ****     
  66:VoiceEnvelope.h ****     // New methods for separate attack and release control
  67:VoiceEnvelope.h ****     void SetAttackTime(float value) {
  68:VoiceEnvelope.h ****         // Map 0-1 value to attack time (exponential scaling)
  69:VoiceEnvelope.h ****         // value³ for finer control at shorter settings
  70:VoiceEnvelope.h ****         float value_cubed = value * value * value;
  71:VoiceEnvelope.h ****         
  72:VoiceEnvelope.h ****         // Special handling for super punchy attacks at low values
  73:VoiceEnvelope.h ****         if (value < 0.1f) {
  74:VoiceEnvelope.h ****             // Extra fast attacks at the beginning of the range
  75:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(min_attack_time + 
  76:VoiceEnvelope.h ****                                            (min_attack_time * 9.0f * value / 0.1f));
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 5


  77:VoiceEnvelope.h ****         } else {
  78:VoiceEnvelope.h ****             // Normal range from 2ms to 4 seconds
  79:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(0.002f * time_range_2x/8.0f + 
  80:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
  81:VoiceEnvelope.h ****         }
  82:VoiceEnvelope.h ****         
  83:VoiceEnvelope.h ****         attack_coefficient = 1.0f / attack_time;
  84:VoiceEnvelope.h ****         
  85:VoiceEnvelope.h ****         // Make curve more exponential for faster attacks
  86:VoiceEnvelope.h ****         if (value < 0.3f) {
  87:VoiceEnvelope.h ****             // More exponential curve for punchy attacks
  88:VoiceEnvelope.h ****             SetAttackCurve(0.7f + (0.3f - value)); // 0.7 to 1.0 range for punchier curve
  89:VoiceEnvelope.h ****         } else {
  90:VoiceEnvelope.h ****             // Normal curve
  91:VoiceEnvelope.h ****             SetAttackCurve(0.5f);
  92:VoiceEnvelope.h ****         }
  93:VoiceEnvelope.h ****     }
  94:VoiceEnvelope.h ****     
  95:VoiceEnvelope.h ****     void SetReleaseTime(float value) {
  96:VoiceEnvelope.h ****         // Map 0-1 value to release time (exponential scaling)
  97:VoiceEnvelope.h ****         // value³ for finer control at shorter settings
  98:VoiceEnvelope.h ****         float value_cubed = value * value * value;
  99:VoiceEnvelope.h ****         
 100:VoiceEnvelope.h ****         // Release time ranges from min_decay_time_b to 8 seconds
 101:VoiceEnvelope.h ****         decay_time = static_cast<size_t>(min_decay_time_b + 
 102:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 103:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
 104:VoiceEnvelope.h ****         
 105:VoiceEnvelope.h ****         // Use consistent release curve regardless of release time
 106:VoiceEnvelope.h ****         SetReleaseCurve(0.5f);
 107:VoiceEnvelope.h ****     }
 108:VoiceEnvelope.h ****     
 109:VoiceEnvelope.h ****     void SetAttackCurve(float value) {
 110:VoiceEnvelope.h ****         float cu = value - 0.5f;
 111:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
 112:VoiceEnvelope.h ****     }
 113:VoiceEnvelope.h ****     
 114:VoiceEnvelope.h ****     void SetReleaseCurve(float value) {
 115:VoiceEnvelope.h ****         float cu = value - 0.5f;
 116:VoiceEnvelope.h ****         release_curve_coefficient = 128.0f * cu * cu;
 117:VoiceEnvelope.h ****     }
 118:VoiceEnvelope.h **** 
 119:VoiceEnvelope.h ****     void Trigger() {
  86              		.loc 3 119 10 is_stmt 1 view -0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              		@ link register save eliminated.
 120:VoiceEnvelope.h ****         switch (current_state) {
  91              		.loc 3 120 9 view .LVU15
  92              		.loc 3 120 17 is_stmt 0 view .LVU16
  93 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
  94              		.loc 3 120 9 view .LVU17
  95 0002 13B1     		cbz	r3, .L7
  96 0004 032B     		cmp	r3, #3
  97 0006 04D0     		beq	.L8
  98 0008 7047     		bx	lr
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 6


  99              	.L7:
 121:VoiceEnvelope.h ****             case ENV_IDLE:
 100              		.loc 3 121 13 is_stmt 1 view .LVU18
 122:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 101              		.loc 3 122 17 view .LVU19
 102              		.loc 3 122 31 is_stmt 0 view .LVU20
 103 000a 0122     		movs	r2, #1
 123:VoiceEnvelope.h ****                 phase = 0;
 104              		.loc 3 123 23 view .LVU21
 105 000c C363     		str	r3, [r0, #60]
 122:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 106              		.loc 3 122 31 view .LVU22
 107 000e 0270     		strb	r2, [r0]
 108              		.loc 3 123 17 is_stmt 1 view .LVU23
 124:VoiceEnvelope.h ****                 break;
 109              		.loc 3 124 17 view .LVU24
 110 0010 7047     		bx	lr
 111              	.L8:
 112              	.LVL5:
 113              	.LBB1258:
 114              	.LBI1258:
 119:VoiceEnvelope.h ****         switch (current_state) {
 115              		.loc 3 119 10 view .LVU25
 116              	.LBB1259:
 125:VoiceEnvelope.h ****             case ENV_DECAY:
 117              		.loc 3 125 13 view .LVU26
 126:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 118              		.loc 3 126 17 view .LVU27
 119              	.LBB1260:
 120              	.LBB1261:
 127:VoiceEnvelope.h ****                 phase = CalculateAttackPhase(current_value);
 128:VoiceEnvelope.h ****                 break;
 129:VoiceEnvelope.h ****             default:
 130:VoiceEnvelope.h ****                 break;
 131:VoiceEnvelope.h ****         }
 132:VoiceEnvelope.h ****     }
 133:VoiceEnvelope.h **** 
 134:VoiceEnvelope.h ****     void Release() {
 135:VoiceEnvelope.h ****         switch (current_state) {
 136:VoiceEnvelope.h ****             case ENV_ATTACK:
 137:VoiceEnvelope.h ****                 // Preserve the attack curve character when transitioning to release
 138:VoiceEnvelope.h ****                 // This decouples release time from affecting attack punchiness
 139:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(static_cast<float>(phase) * attack_coeffic
 140:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 141:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 142:VoiceEnvelope.h ****                 break;
 143:VoiceEnvelope.h ****             case ENV_SUSTAIN:
 144:VoiceEnvelope.h ****                 phase = 0;
 145:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 146:VoiceEnvelope.h ****                 break;
 147:VoiceEnvelope.h ****             default:
 148:VoiceEnvelope.h ****                 break;
 149:VoiceEnvelope.h ****         }
 150:VoiceEnvelope.h ****     }
 151:VoiceEnvelope.h **** 
 152:VoiceEnvelope.h ****     float Process() {
 153:VoiceEnvelope.h ****         float ph;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 7


 154:VoiceEnvelope.h ****         switch (current_state) {
 155:VoiceEnvelope.h ****             case ENV_IDLE:
 156:VoiceEnvelope.h ****                 current_value = 0.0f;
 157:VoiceEnvelope.h ****                 break;
 158:VoiceEnvelope.h **** 
 159:VoiceEnvelope.h ****             case ENV_ATTACK:
 160:VoiceEnvelope.h ****                 ph = static_cast<float>(phase) * attack_coefficient;
 161:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 162:VoiceEnvelope.h ****                 if (phase >= attack_time) {
 163:VoiceEnvelope.h ****                     current_state = (mode == MODE_AR) ? ENV_DECAY : ENV_SUSTAIN;
 164:VoiceEnvelope.h ****                     phase = 0;
 165:VoiceEnvelope.h ****                 } else {
 166:VoiceEnvelope.h ****                     phase++;
 167:VoiceEnvelope.h ****                 }
 168:VoiceEnvelope.h ****                 break;
 169:VoiceEnvelope.h **** 
 170:VoiceEnvelope.h ****             case ENV_SUSTAIN:
 171:VoiceEnvelope.h ****                 current_value = 1.0f;
 172:VoiceEnvelope.h ****                 break;
 173:VoiceEnvelope.h **** 
 174:VoiceEnvelope.h ****             case ENV_DECAY:
 175:VoiceEnvelope.h ****                 // Use current_value as starting point for decay
 176:VoiceEnvelope.h ****                 // This preserves the correct level from attack phase
 177:VoiceEnvelope.h ****                 ph = static_cast<float>(phase) * decay_coefficient;
 178:VoiceEnvelope.h ****                 if (phase == 0) {
 179:VoiceEnvelope.h ****                     // On first frame, use current value
 180:VoiceEnvelope.h ****                     decay_start_level = current_value;
 181:VoiceEnvelope.h ****                 }
 182:VoiceEnvelope.h ****                 current_value = decay_start_level * (1.0f - ph) / (1.0f + release_curve_coefficient
 183:VoiceEnvelope.h ****                 
 184:VoiceEnvelope.h ****                 if (phase >= decay_time) {
 185:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 186:VoiceEnvelope.h ****                     phase = 0;
 187:VoiceEnvelope.h ****                 } else {
 188:VoiceEnvelope.h ****                     phase++;
 189:VoiceEnvelope.h ****                 }
 190:VoiceEnvelope.h ****                 break;
 191:VoiceEnvelope.h **** 
 192:VoiceEnvelope.h ****             case ENV_RESET:
 193:VoiceEnvelope.h ****                 current_value = reset_target - static_cast<float>(phase) * reset_coefficient;
 194:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 195:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 196:VoiceEnvelope.h ****                     phase = 0;
 197:VoiceEnvelope.h ****                 } else {
 198:VoiceEnvelope.h ****                     phase++;
 199:VoiceEnvelope.h ****                 }
 200:VoiceEnvelope.h ****                 break;
 201:VoiceEnvelope.h ****         }
 202:VoiceEnvelope.h ****         return std::min(std::max(current_value, 0.0f), 1.0f);
 203:VoiceEnvelope.h ****     }
 204:VoiceEnvelope.h **** 
 205:VoiceEnvelope.h ****     void Reset() {
 206:VoiceEnvelope.h ****         if (current_state == ENV_IDLE) return;
 207:VoiceEnvelope.h ****         current_state = ENV_RESET;
 208:VoiceEnvelope.h ****         reset_target = current_value;
 209:VoiceEnvelope.h ****         phase = 0;
 210:VoiceEnvelope.h ****     }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 8


 211:VoiceEnvelope.h **** 
 212:VoiceEnvelope.h ****     bool IsActive() const {
 213:VoiceEnvelope.h ****         return current_state != ENV_IDLE;
 214:VoiceEnvelope.h ****     }
 215:VoiceEnvelope.h **** 
 216:VoiceEnvelope.h **** private:
 217:VoiceEnvelope.h ****     float CalculateAttackAmplitude(float ph) {
 218:VoiceEnvelope.h ****         return ph / (1.0f + attack_curve_coefficient * (1.0f - ph));
 219:VoiceEnvelope.h ****     }
 220:VoiceEnvelope.h **** 
 221:VoiceEnvelope.h ****     float CalculateDecayAmplitude(float ph) {
 222:VoiceEnvelope.h ****         return (1.0f - ph) / (1.0f + release_curve_coefficient * ph);
 223:VoiceEnvelope.h ****     }
 224:VoiceEnvelope.h **** 
 225:VoiceEnvelope.h ****     size_t CalculateAttackPhase(float amp) {
 226:VoiceEnvelope.h ****         return static_cast<size_t>(roundf(attack_time * amp * (1.0f + attack_curve_coefficient) / (
 121              		.loc 3 226 69 is_stmt 0 view .LVU28
 122 0012 B7EE007A 		vmov.f32	s14, #1.0e+0
 123              	.LBE1261:
 124              	.LBE1260:
 127:VoiceEnvelope.h ****                 phase = CalculateAttackPhase(current_value);
 125              		.loc 3 127 45 view .LVU29
 126 0016 D0ED015A 		vldr.32	s11, [r0, #4]
 127              	.LBB1265:
 128              	.LBB1262:
 129              		.loc 3 226 71 view .LVU30
 130 001a 90ED026A 		vldr.32	s12, [r0, #8]
 131              	.LBE1262:
 132              	.LBE1265:
 126:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 133              		.loc 3 126 31 view .LVU31
 134 001e 0123     		movs	r3, #1
 135              	.LBB1266:
 136              	.LBB1263:
 137              		.loc 3 226 55 view .LVU32
 138 0020 D0ED0D7A 		vldr.32	s15, [r0, #52]	@ int
 139              		.loc 3 226 69 view .LVU33
 140 0024 76EE076A 		vadd.f32	s13, s12, s14
 141              	.LBE1263:
 142              	.LBE1266:
 126:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 143              		.loc 3 126 31 view .LVU34
 144 0028 0370     		strb	r3, [r0]
 127:VoiceEnvelope.h ****                 phase = CalculateAttackPhase(current_value);
 145              		.loc 3 127 17 is_stmt 1 view .LVU35
 146              	.LVL6:
 147              	.LBB1267:
 148              	.LBI1260:
 225:VoiceEnvelope.h ****         return static_cast<size_t>(roundf(attack_time * amp * (1.0f + attack_curve_coefficient) / (
 149              		.loc 3 225 12 view .LVU36
 150              	.LBB1264:
 151              		.loc 3 226 9 view .LVU37
 152              		.loc 3 226 105 is_stmt 0 view .LVU38
 153 002a A5EE867A 		vfma.f32	s14, s11, s12
 154              		.loc 3 226 55 view .LVU39
 155 002e F8EE677A 		vcvt.f32.u32	s15, s15
 156 0032 67EEA57A 		vmul.f32	s15, s15, s11
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 9


 157              		.loc 3 226 61 view .LVU40
 158 0036 67EEA67A 		vmul.f32	s15, s15, s13
 159              		.loc 3 226 105 view .LVU41
 160 003a F0EE476A 		vmov.f32	s13, s14
 161              		.loc 3 226 42 view .LVU42
 162 003e 87EEA67A 		vdiv.f32	s14, s15, s13
 163 0042 F8FE477A 		vrinta.f32	s15, s14
 164              	.LVL7:
 165              		.loc 3 226 139 view .LVU43
 166 0046 FCEEE77A 		vcvt.u32.f32	s15, s15
 167 004a C0ED0F7A 		vstr.32	s15, [r0, #60]	@ int
 168              	.LBE1264:
 169              	.LBE1267:
 128:VoiceEnvelope.h ****             default:
 170              		.loc 3 128 17 is_stmt 1 view .LVU44
 171              	.LVL8:
 128:VoiceEnvelope.h ****             default:
 172              		.loc 3 128 17 is_stmt 0 view .LVU45
 173              	.LBE1259:
 174              	.LBE1258:
 132:VoiceEnvelope.h **** 
 175              		.loc 3 132 5 view .LVU46
 176 004e 7047     		bx	lr
 177              		.cfi_endproc
 178              	.LFE5536:
 180              		.section	.text._ZN13VoiceEnvelope7ReleaseEv,"axG",%progbits,_ZN13VoiceEnvelope7ReleaseEv,comdat
 181              		.align	1
 182              		.weak	_ZN13VoiceEnvelope7ReleaseEv
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 187              	_ZN13VoiceEnvelope7ReleaseEv:
 188              	.LVL9:
 189              	.LFB5537:
 134:VoiceEnvelope.h ****         switch (current_state) {
 190              		.loc 3 134 10 is_stmt 1 view -0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              		@ link register save eliminated.
 135:VoiceEnvelope.h ****             case ENV_ATTACK:
 195              		.loc 3 135 9 view .LVU48
 135:VoiceEnvelope.h ****             case ENV_ATTACK:
 196              		.loc 3 135 17 is_stmt 0 view .LVU49
 197 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 135:VoiceEnvelope.h ****             case ENV_ATTACK:
 198              		.loc 3 135 9 view .LVU50
 199 0002 012B     		cmp	r3, #1
 200 0004 02D0     		beq	.L11
 201 0006 022B     		cmp	r3, #2
 202 0008 14D0     		beq	.L12
 203 000a 7047     		bx	lr
 204              	.L11:
 205              	.LVL10:
 206              	.LBB1272:
 207              	.LBI1272:
 134:VoiceEnvelope.h ****         switch (current_state) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 10


 208              		.loc 3 134 10 is_stmt 1 view .LVU51
 209              	.LBB1273:
 136:VoiceEnvelope.h ****                 // Preserve the attack curve character when transitioning to release
 210              		.loc 3 136 13 view .LVU52
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 211              		.loc 3 139 17 view .LVU53
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 212              		.loc 3 139 58 is_stmt 0 view .LVU54
 213 000c D0ED0F7A 		vldr.32	s15, [r0, #60]	@ int
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 214              		.loc 3 139 57 view .LVU55
 215 0010 90ED0B7A 		vldr.32	s14, [r0, #44]
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 216              		.loc 3 139 58 view .LVU56
 217 0014 F8EE677A 		vcvt.f32.u32	s15, s15
 218              	.LBB1274:
 219              	.LBB1275:
 218:VoiceEnvelope.h ****     }
 220              		.loc 3 218 27 view .LVU57
 221 0018 90ED026A 		vldr.32	s12, [r0, #8]
 222              	.LBE1275:
 223              	.LBE1274:
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 224              		.loc 3 139 57 view .LVU58
 225 001c 67EE877A 		vmul.f32	s15, s15, s14
 226              	.LVL11:
 227              	.LBB1277:
 228              	.LBI1274:
 217:VoiceEnvelope.h ****         return ph / (1.0f + attack_curve_coefficient * (1.0f - ph));
 229              		.loc 3 217 11 is_stmt 1 view .LVU59
 230              	.LBB1276:
 218:VoiceEnvelope.h ****     }
 231              		.loc 3 218 9 view .LVU60
 218:VoiceEnvelope.h ****     }
 232              		.loc 3 218 62 is_stmt 0 view .LVU61
 233 0020 B7EE007A 		vmov.f32	s14, #1.0e+0
 234 0024 77EE676A 		vsub.f32	s13, s14, s15
 218:VoiceEnvelope.h ****     }
 235              		.loc 3 218 27 view .LVU62
 236 0028 A6EE267A 		vfma.f32	s14, s12, s13
 237              	.LVL12:
 218:VoiceEnvelope.h ****     }
 238              		.loc 3 218 67 view .LVU63
 239 002c C7EE876A 		vdiv.f32	s13, s15, s14
 240              	.LBE1276:
 241              	.LBE1277:
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 242              		.loc 3 139 31 view .LVU64
 243 0030 C0ED016A 		vstr.32	s13, [r0, #4]
 140:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 244              		.loc 3 140 17 is_stmt 1 view .LVU65
 245              	.LVL13:
 246              	.L12:
 140:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 247              		.loc 3 140 17 is_stmt 0 view .LVU66
 248              	.LBE1273:
 249              	.LBE1272:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 11


 143:VoiceEnvelope.h ****                 phase = 0;
 250              		.loc 3 143 13 is_stmt 1 view .LVU67
 144:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 251              		.loc 3 144 17 view .LVU68
 144:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 252              		.loc 3 144 23 is_stmt 0 view .LVU69
 253 0034 0023     		movs	r3, #0
 254 0036 C363     		str	r3, [r0, #60]
 145:VoiceEnvelope.h ****                 break;
 255              		.loc 3 145 17 is_stmt 1 view .LVU70
 145:VoiceEnvelope.h ****                 break;
 256              		.loc 3 145 31 is_stmt 0 view .LVU71
 257 0038 0323     		movs	r3, #3
 258 003a 0370     		strb	r3, [r0]
 146:VoiceEnvelope.h ****             default:
 259              		.loc 3 146 17 is_stmt 1 view .LVU72
 150:VoiceEnvelope.h **** 
 260              		.loc 3 150 5 is_stmt 0 view .LVU73
 261 003c 7047     		bx	lr
 262              		.cfi_endproc
 263              	.LFE5537:
 265              		.section	.text._ZN13VoiceEnvelope5ResetEv,"axG",%progbits,_ZN13VoiceEnvelope5ResetEv,comdat
 266              		.align	1
 267              		.weak	_ZN13VoiceEnvelope5ResetEv
 268              		.syntax unified
 269              		.thumb
 270              		.thumb_func
 272              	_ZN13VoiceEnvelope5ResetEv:
 273              	.LVL14:
 274              	.LFB5539:
 205:VoiceEnvelope.h ****         if (current_state == ENV_IDLE) return;
 275              		.loc 3 205 10 is_stmt 1 view -0
 276              		.cfi_startproc
 277              		@ args = 0, pretend = 0, frame = 0
 278              		@ frame_needed = 0, uses_anonymous_args = 0
 279              		@ link register save eliminated.
 206:VoiceEnvelope.h ****         current_state = ENV_RESET;
 280              		.loc 3 206 9 view .LVU75
 281 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 282 0002 2BB1     		cbz	r3, .L14
 283              	.LVL15:
 284              	.LBB1280:
 285              	.LBI1280:
 205:VoiceEnvelope.h ****         if (current_state == ENV_IDLE) return;
 286              		.loc 3 205 10 view .LVU76
 287              	.LBB1281:
 207:VoiceEnvelope.h ****         reset_target = current_value;
 288              		.loc 3 207 9 view .LVU77
 207:VoiceEnvelope.h ****         reset_target = current_value;
 289              		.loc 3 207 23 is_stmt 0 view .LVU78
 290 0004 0423     		movs	r3, #4
 291 0006 0370     		strb	r3, [r0]
 208:VoiceEnvelope.h ****         phase = 0;
 292              		.loc 3 208 9 is_stmt 1 view .LVU79
 208:VoiceEnvelope.h ****         phase = 0;
 293              		.loc 3 208 22 is_stmt 0 view .LVU80
 294 0008 4368     		ldr	r3, [r0, #4]	@ float
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 12


 295 000a 8362     		str	r3, [r0, #40]	@ float
 209:VoiceEnvelope.h ****     }
 296              		.loc 3 209 9 is_stmt 1 view .LVU81
 209:VoiceEnvelope.h ****     }
 297              		.loc 3 209 15 is_stmt 0 view .LVU82
 298 000c 0023     		movs	r3, #0
 299 000e C363     		str	r3, [r0, #60]
 300              	.LVL16:
 301              	.L14:
 209:VoiceEnvelope.h ****     }
 302              		.loc 3 209 15 view .LVU83
 303              	.LBE1281:
 304              	.LBE1280:
 210:VoiceEnvelope.h **** 
 305              		.loc 3 210 5 view .LVU84
 306 0010 7047     		bx	lr
 307              		.cfi_endproc
 308              	.LFE5539:
 310              		.section	.text._ZN15PolyphonyEngineC2Ev,"ax",%progbits
 311              		.align	1
 312              		.global	_ZN15PolyphonyEngineC2Ev
 313              		.syntax unified
 314              		.thumb
 315              		.thumb_func
 317              	_ZN15PolyphonyEngineC2Ev:
 318              	.LVL17:
 319              	.LFB6116:
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 320              		.loc 1 17 1 is_stmt 1 view -0
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 0
 323              		@ frame_needed = 0, uses_anonymous_args = 0
 324              	.LBB1515:
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 325              		.loc 1 17 103 view .LVU86
 326 0000 00F58C42 		add	r2, r0, #17920
 327              	.LBE1515:
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 328              		.loc 1 17 1 is_stmt 0 view .LVU87
 329 0004 38B5     		push	{r3, r4, r5, lr}
 330              		.cfi_def_cfa_offset 16
 331              		.cfi_offset 3, -16
 332              		.cfi_offset 4, -12
 333              		.cfi_offset 5, -8
 334              		.cfi_offset 14, -4
 335 0006 5032     		adds	r2, r2, #80
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 336              		.loc 1 17 1 view .LVU88
 337 0008 0446     		mov	r4, r0
 338 000a 0346     		mov	r3, r0
 339              	.L20:
 340              	.LVL18:
 341              	.LBB1648:
 342              	.LBB1516:
 343              	.LBI1516:
 344              		.file 4 "eurorack/plaits/dsp/voice.h"
   1:eurorack/plaits/dsp/voice.h **** // Copyright 2016 Emilie Gillet.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 13


   2:eurorack/plaits/dsp/voice.h **** //
   3:eurorack/plaits/dsp/voice.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/voice.h **** //
   5:eurorack/plaits/dsp/voice.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/voice.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/voice.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/voice.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/voice.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/voice.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/voice.h **** // 
  12:eurorack/plaits/dsp/voice.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/voice.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/voice.h **** // 
  15:eurorack/plaits/dsp/voice.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/voice.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/voice.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/voice.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/voice.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/voice.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/voice.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/voice.h **** // 
  23:eurorack/plaits/dsp/voice.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/voice.h **** //
  25:eurorack/plaits/dsp/voice.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/voice.h **** //
  27:eurorack/plaits/dsp/voice.h **** // Main synthesis voice.
  28:eurorack/plaits/dsp/voice.h **** 
  29:eurorack/plaits/dsp/voice.h **** #ifndef PLAITS_DSP_VOICE_H_
  30:eurorack/plaits/dsp/voice.h **** #define PLAITS_DSP_VOICE_H_
  31:eurorack/plaits/dsp/voice.h **** 
  32:eurorack/plaits/dsp/voice.h **** #include "stmlib/stmlib.h"
  33:eurorack/plaits/dsp/voice.h **** 
  34:eurorack/plaits/dsp/voice.h **** #include "stmlib/dsp/filter.h"
  35:eurorack/plaits/dsp/voice.h **** #include "stmlib/dsp/limiter.h"
  36:eurorack/plaits/dsp/voice.h **** #include "stmlib/utils/buffer_allocator.h"
  37:eurorack/plaits/dsp/voice.h **** 
  38:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/additive_engine.h"
  39:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/bass_drum_engine.h"
  40:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/chord_engine.h"
  41:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/engine.h"
  42:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/fm_engine.h"
  43:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/grain_engine.h"
  44:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/hi_hat_engine.h"
  45:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/modal_engine.h"
  46:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/noise_engine.h"
  47:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/particle_engine.h"
  48:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/snare_drum_engine.h"
  49:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/speech_engine.h"
  50:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/string_engine.h"
  51:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/swarm_engine.h"
  52:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/virtual_analog_engine.h"
  53:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/waveshaping_engine.h"
  54:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/wavetable_engine.h"
  55:eurorack/plaits/dsp/voice.h **** 
  56:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/envelope.h"
  57:eurorack/plaits/dsp/voice.h **** 
  58:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/fx/low_pass_gate.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 14


  59:eurorack/plaits/dsp/voice.h **** 
  60:eurorack/plaits/dsp/voice.h **** namespace plaits {
  61:eurorack/plaits/dsp/voice.h **** 
  62:eurorack/plaits/dsp/voice.h **** const int kMaxEngines = 16;
  63:eurorack/plaits/dsp/voice.h **** const int kMaxTriggerDelay = 8;
  64:eurorack/plaits/dsp/voice.h **** const int kTriggerDelay = 5;
  65:eurorack/plaits/dsp/voice.h **** 
  66:eurorack/plaits/dsp/voice.h **** class ChannelPostProcessor {
  67:eurorack/plaits/dsp/voice.h ****  public:
  68:eurorack/plaits/dsp/voice.h ****   ChannelPostProcessor() { }
  69:eurorack/plaits/dsp/voice.h ****   ~ChannelPostProcessor() { }
  70:eurorack/plaits/dsp/voice.h ****   
  71:eurorack/plaits/dsp/voice.h ****   void Init() {
  72:eurorack/plaits/dsp/voice.h ****     lpg_.Init();
  73:eurorack/plaits/dsp/voice.h ****     Reset();
  74:eurorack/plaits/dsp/voice.h ****   }
  75:eurorack/plaits/dsp/voice.h ****   
  76:eurorack/plaits/dsp/voice.h ****   void Reset() {
  77:eurorack/plaits/dsp/voice.h ****     limiter_.Init();
  78:eurorack/plaits/dsp/voice.h ****   }
  79:eurorack/plaits/dsp/voice.h ****   
  80:eurorack/plaits/dsp/voice.h ****   void Process(
  81:eurorack/plaits/dsp/voice.h ****       float gain,
  82:eurorack/plaits/dsp/voice.h ****       bool bypass_lpg,
  83:eurorack/plaits/dsp/voice.h ****       float low_pass_gate_gain,
  84:eurorack/plaits/dsp/voice.h ****       float low_pass_gate_frequency,
  85:eurorack/plaits/dsp/voice.h ****       float low_pass_gate_hf_bleed,
  86:eurorack/plaits/dsp/voice.h ****       float* in,
  87:eurorack/plaits/dsp/voice.h ****       short* out,
  88:eurorack/plaits/dsp/voice.h ****       size_t size,
  89:eurorack/plaits/dsp/voice.h ****       size_t stride) {
  90:eurorack/plaits/dsp/voice.h ****     if (gain < 0.0f) {
  91:eurorack/plaits/dsp/voice.h ****       limiter_.Process(-gain, in, size);
  92:eurorack/plaits/dsp/voice.h ****     }
  93:eurorack/plaits/dsp/voice.h ****     const float post_gain = (gain < 0.0f ? 1.0f : gain) * -32767.0f;
  94:eurorack/plaits/dsp/voice.h ****     if (!bypass_lpg) {
  95:eurorack/plaits/dsp/voice.h ****       lpg_.Process(
  96:eurorack/plaits/dsp/voice.h ****           post_gain * low_pass_gate_gain,
  97:eurorack/plaits/dsp/voice.h ****           low_pass_gate_frequency,
  98:eurorack/plaits/dsp/voice.h ****           low_pass_gate_hf_bleed,
  99:eurorack/plaits/dsp/voice.h ****           in,
 100:eurorack/plaits/dsp/voice.h ****           out,
 101:eurorack/plaits/dsp/voice.h ****           size,
 102:eurorack/plaits/dsp/voice.h ****           stride);
 103:eurorack/plaits/dsp/voice.h ****     } else {
 104:eurorack/plaits/dsp/voice.h ****       while (size--) {
 105:eurorack/plaits/dsp/voice.h ****         *out = stmlib::Clip16(1 + static_cast<int32_t>(*in++ * post_gain));
 106:eurorack/plaits/dsp/voice.h ****         out += stride;
 107:eurorack/plaits/dsp/voice.h ****       }
 108:eurorack/plaits/dsp/voice.h ****     }
 109:eurorack/plaits/dsp/voice.h ****   }
 110:eurorack/plaits/dsp/voice.h ****   
 111:eurorack/plaits/dsp/voice.h ****  private:
 112:eurorack/plaits/dsp/voice.h ****   stmlib::Limiter limiter_;
 113:eurorack/plaits/dsp/voice.h ****   LowPassGate lpg_;
 114:eurorack/plaits/dsp/voice.h ****   
 115:eurorack/plaits/dsp/voice.h ****   DISALLOW_COPY_AND_ASSIGN(ChannelPostProcessor);
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 15


 116:eurorack/plaits/dsp/voice.h **** };
 117:eurorack/plaits/dsp/voice.h **** 
 118:eurorack/plaits/dsp/voice.h **** struct Patch {
 119:eurorack/plaits/dsp/voice.h ****   float note;
 120:eurorack/plaits/dsp/voice.h ****   float harmonics;
 121:eurorack/plaits/dsp/voice.h ****   float timbre;
 122:eurorack/plaits/dsp/voice.h ****   float morph;
 123:eurorack/plaits/dsp/voice.h ****   float frequency_modulation_amount;
 124:eurorack/plaits/dsp/voice.h ****   float timbre_modulation_amount;
 125:eurorack/plaits/dsp/voice.h ****   float morph_modulation_amount;
 126:eurorack/plaits/dsp/voice.h **** 
 127:eurorack/plaits/dsp/voice.h ****   int engine;
 128:eurorack/plaits/dsp/voice.h ****   float decay;
 129:eurorack/plaits/dsp/voice.h ****   float lpg_colour;
 130:eurorack/plaits/dsp/voice.h **** };
 131:eurorack/plaits/dsp/voice.h **** 
 132:eurorack/plaits/dsp/voice.h **** struct Modulations {
 133:eurorack/plaits/dsp/voice.h ****   float engine;
 134:eurorack/plaits/dsp/voice.h ****   float note;
 135:eurorack/plaits/dsp/voice.h ****   float frequency;
 136:eurorack/plaits/dsp/voice.h ****   float harmonics;
 137:eurorack/plaits/dsp/voice.h ****   float timbre;
 138:eurorack/plaits/dsp/voice.h ****   float morph;
 139:eurorack/plaits/dsp/voice.h ****   float trigger;
 140:eurorack/plaits/dsp/voice.h ****   float level;
 141:eurorack/plaits/dsp/voice.h **** 
 142:eurorack/plaits/dsp/voice.h ****   bool frequency_patched;
 143:eurorack/plaits/dsp/voice.h ****   bool timbre_patched;
 144:eurorack/plaits/dsp/voice.h ****   bool morph_patched;
 145:eurorack/plaits/dsp/voice.h ****   bool trigger_patched;
 146:eurorack/plaits/dsp/voice.h ****   bool level_patched;
 147:eurorack/plaits/dsp/voice.h **** };
 148:eurorack/plaits/dsp/voice.h **** 
 149:eurorack/plaits/dsp/voice.h **** class Voice {
 150:eurorack/plaits/dsp/voice.h ****  public:
 151:eurorack/plaits/dsp/voice.h ****   Voice() { }
 345              		.loc 4 151 3 is_stmt 1 view .LVU89
 346              	.LBB1517:
 347              	.LBI1517:
 348              		.file 5 "eurorack/plaits/dsp/engine/additive_engine.h"
   1:eurorack/plaits/dsp/engine/additive_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/additive_engine.h **** //
   3:eurorack/plaits/dsp/engine/additive_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/additive_engine.h **** //
   5:eurorack/plaits/dsp/engine/additive_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/additive_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/additive_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/additive_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/additive_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/additive_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/additive_engine.h **** // 
  12:eurorack/plaits/dsp/engine/additive_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/additive_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/additive_engine.h **** // 
  15:eurorack/plaits/dsp/engine/additive_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/additive_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/additive_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 16


  18:eurorack/plaits/dsp/engine/additive_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/additive_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/additive_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/additive_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/additive_engine.h **** // 
  23:eurorack/plaits/dsp/engine/additive_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/additive_engine.h **** //
  25:eurorack/plaits/dsp/engine/additive_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/additive_engine.h **** //
  27:eurorack/plaits/dsp/engine/additive_engine.h **** // Additive synthesis with 24+8 partials.
  28:eurorack/plaits/dsp/engine/additive_engine.h **** 
  29:eurorack/plaits/dsp/engine/additive_engine.h **** #ifndef PLAITS_DSP_ENGINE_ADDITIVE_ENGINE_H_
  30:eurorack/plaits/dsp/engine/additive_engine.h **** #define PLAITS_DSP_ENGINE_ADDITIVE_ENGINE_H_
  31:eurorack/plaits/dsp/engine/additive_engine.h **** 
  32:eurorack/plaits/dsp/engine/additive_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/additive_engine.h **** #include "plaits/dsp/oscillator/harmonic_oscillator.h"
  34:eurorack/plaits/dsp/engine/additive_engine.h **** 
  35:eurorack/plaits/dsp/engine/additive_engine.h **** namespace plaits {
  36:eurorack/plaits/dsp/engine/additive_engine.h ****   
  37:eurorack/plaits/dsp/engine/additive_engine.h **** const int kHarmonicBatchSize = 12;
  38:eurorack/plaits/dsp/engine/additive_engine.h **** const int kNumHarmonics = 36;
  39:eurorack/plaits/dsp/engine/additive_engine.h **** const int kNumHarmonicOscillators = kNumHarmonics / kHarmonicBatchSize;
  40:eurorack/plaits/dsp/engine/additive_engine.h **** 
  41:eurorack/plaits/dsp/engine/additive_engine.h **** class AdditiveEngine : public Engine {
  42:eurorack/plaits/dsp/engine/additive_engine.h ****  public:
  43:eurorack/plaits/dsp/engine/additive_engine.h ****   AdditiveEngine() { }
 349              		.loc 5 43 3 view .LVU90
 350              	.LBB1518:
 351              	.LBB1519:
 352              	.LBI1519:
 353              		.file 6 "eurorack/plaits/dsp/engine/engine.h"
   1:eurorack/plaits/dsp/engine/engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/engine.h **** //
   3:eurorack/plaits/dsp/engine/engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/engine.h **** //
   5:eurorack/plaits/dsp/engine/engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/engine.h **** // 
  12:eurorack/plaits/dsp/engine/engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/engine.h **** // 
  15:eurorack/plaits/dsp/engine/engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/engine.h **** // 
  23:eurorack/plaits/dsp/engine/engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/engine.h **** //
  25:eurorack/plaits/dsp/engine/engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/engine.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 17


  27:eurorack/plaits/dsp/engine/engine.h **** // Base class for all engines.
  28:eurorack/plaits/dsp/engine/engine.h **** 
  29:eurorack/plaits/dsp/engine/engine.h **** #ifndef PLAITS_DSP_ENGINE_ENGINE_H_
  30:eurorack/plaits/dsp/engine/engine.h **** #define PLAITS_DSP_ENGINE_ENGINE_H_
  31:eurorack/plaits/dsp/engine/engine.h **** 
  32:eurorack/plaits/dsp/engine/engine.h **** #include "plaits/dsp/dsp.h"
  33:eurorack/plaits/dsp/engine/engine.h **** 
  34:eurorack/plaits/dsp/engine/engine.h **** #include "stmlib/dsp/units.h"
  35:eurorack/plaits/dsp/engine/engine.h **** #include "stmlib/utils/buffer_allocator.h"
  36:eurorack/plaits/dsp/engine/engine.h **** 
  37:eurorack/plaits/dsp/engine/engine.h **** namespace plaits {
  38:eurorack/plaits/dsp/engine/engine.h **** 
  39:eurorack/plaits/dsp/engine/engine.h **** inline float NoteToFrequency(float midi_note) {
  40:eurorack/plaits/dsp/engine/engine.h ****   midi_note -= 9.0f;
  41:eurorack/plaits/dsp/engine/engine.h ****   CONSTRAIN(midi_note, -128.0f, 127.0f);
  42:eurorack/plaits/dsp/engine/engine.h ****   return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
  43:eurorack/plaits/dsp/engine/engine.h **** }
  44:eurorack/plaits/dsp/engine/engine.h **** 
  45:eurorack/plaits/dsp/engine/engine.h **** enum TriggerState {
  46:eurorack/plaits/dsp/engine/engine.h ****   TRIGGER_LOW = 0,
  47:eurorack/plaits/dsp/engine/engine.h ****   TRIGGER_RISING_EDGE = 1,
  48:eurorack/plaits/dsp/engine/engine.h ****   TRIGGER_UNPATCHED = 2,
  49:eurorack/plaits/dsp/engine/engine.h ****   TRIGGER_UNPATCHED_AUTOTRIGGED = 3,
  50:eurorack/plaits/dsp/engine/engine.h **** };
  51:eurorack/plaits/dsp/engine/engine.h **** 
  52:eurorack/plaits/dsp/engine/engine.h **** struct EngineParameters {
  53:eurorack/plaits/dsp/engine/engine.h ****   TriggerState trigger;
  54:eurorack/plaits/dsp/engine/engine.h ****   float note;
  55:eurorack/plaits/dsp/engine/engine.h ****   float timbre;
  56:eurorack/plaits/dsp/engine/engine.h ****   float morph;
  57:eurorack/plaits/dsp/engine/engine.h ****   float harmonics;
  58:eurorack/plaits/dsp/engine/engine.h ****   float accent;
  59:eurorack/plaits/dsp/engine/engine.h **** };
  60:eurorack/plaits/dsp/engine/engine.h **** 
  61:eurorack/plaits/dsp/engine/engine.h **** struct PostProcessingSettings {
  62:eurorack/plaits/dsp/engine/engine.h ****   // A negative value indicates that a limiter must be used.
  63:eurorack/plaits/dsp/engine/engine.h ****   float out_gain;
  64:eurorack/plaits/dsp/engine/engine.h ****   float aux_gain;
  65:eurorack/plaits/dsp/engine/engine.h ****   
  66:eurorack/plaits/dsp/engine/engine.h ****   // When this flag is set to true, the engine declares that it will 
  67:eurorack/plaits/dsp/engine/engine.h ****   // render a signal that already has an envelope (eg: modal drum, 808 kick).
  68:eurorack/plaits/dsp/engine/engine.h ****   // By reporting this information, the synthesis voice upstream will
  69:eurorack/plaits/dsp/engine/engine.h ****   // bypass the internal envelope/LPG.
  70:eurorack/plaits/dsp/engine/engine.h ****   //
  71:eurorack/plaits/dsp/engine/engine.h ****   // This parameter can be changed on a per-call basis when calling Render()
  72:eurorack/plaits/dsp/engine/engine.h ****   // This is used by the speech synthesis engine, which renders either
  73:eurorack/plaits/dsp/engine/engine.h ****   // a continuous vowel sound (which needs to be enveloped by the LPG)
  74:eurorack/plaits/dsp/engine/engine.h ****   // or a word/sentence (which is already enveloped).
  75:eurorack/plaits/dsp/engine/engine.h ****   bool already_enveloped;
  76:eurorack/plaits/dsp/engine/engine.h **** };
  77:eurorack/plaits/dsp/engine/engine.h **** 
  78:eurorack/plaits/dsp/engine/engine.h **** class Engine {
  79:eurorack/plaits/dsp/engine/engine.h ****  public:
  80:eurorack/plaits/dsp/engine/engine.h ****   Engine() { }
 354              		.loc 6 80 3 view .LVU91
 355              		.loc 6 80 3 is_stmt 0 view .LVU92
 356              	.LBE1519:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 18


 357              		.loc 5 43 20 view .LVU93
 358 000c 3949     		ldr	r1, .L24
 359 000e 1960     		str	r1, [r3]
 360              		.loc 5 43 20 is_stmt 1 view .LVU94
 361              	.LVL19:
 362              		.loc 5 43 20 is_stmt 0 view .LVU95
 363              	.LBE1518:
 364              	.LBE1517:
 365              	.LBB1520:
 366              	.LBI1520:
 367              		.file 7 "eurorack/plaits/dsp/engine/bass_drum_engine.h"
   1:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/bass_drum_engine.h **** //
   3:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/bass_drum_engine.h **** //
   5:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // 
  12:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // 
  15:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // 
  23:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/bass_drum_engine.h **** //
  25:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/bass_drum_engine.h **** //
  27:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // 808 and synthetic bass drum generators.
  28:eurorack/plaits/dsp/engine/bass_drum_engine.h **** 
  29:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #ifndef PLAITS_DSP_ENGINE_BASS_DRUM_ENGINE_H_
  30:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #define PLAITS_DSP_ENGINE_BASS_DRUM_ENGINE_H_
  31:eurorack/plaits/dsp/engine/bass_drum_engine.h **** 
  32:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/drums/analog_bass_drum.h"
  33:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/drums/synthetic_bass_drum.h"
  34:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/fx/overdrive.h"
  36:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/fx/sample_rate_reducer.h"
  37:eurorack/plaits/dsp/engine/bass_drum_engine.h **** 
  38:eurorack/plaits/dsp/engine/bass_drum_engine.h **** namespace plaits {
  39:eurorack/plaits/dsp/engine/bass_drum_engine.h ****   
  40:eurorack/plaits/dsp/engine/bass_drum_engine.h **** class BassDrumEngine : public Engine {
  41:eurorack/plaits/dsp/engine/bass_drum_engine.h ****  public:
  42:eurorack/plaits/dsp/engine/bass_drum_engine.h ****   BassDrumEngine() { }
 368              		.loc 7 42 3 is_stmt 1 view .LVU96
 369              	.LBB1521:
 370              	.LBB1522:
 371              	.LBI1522:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 19


 372              		.loc 6 80 3 view .LVU97
 373              		.loc 6 80 3 is_stmt 0 view .LVU98
 374              	.LBE1522:
 375              		.loc 7 42 20 view .LVU99
 376 0010 3949     		ldr	r1, .L24+4
 377 0012 C3F84811 		str	r1, [r3, #328]
 378              	.LVL20:
 379              	.LBB1523:
 380              	.LBI1523:
 381              		.file 8 "eurorack/plaits/dsp/drums/analog_bass_drum.h"
   1:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/analog_bass_drum.h **** //
   3:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/analog_bass_drum.h **** //
   5:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // 
  12:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // 
  15:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // 
  23:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/analog_bass_drum.h **** //
  25:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/analog_bass_drum.h **** //
  27:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // 808 bass drum model, revisited.
  28:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  29:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #ifndef PLAITS_DSP_DRUMS_ANALOG_BASS_DRUM_H_
  30:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #define PLAITS_DSP_DRUMS_ANALOG_BASS_DRUM_H_
  31:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  32:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include <algorithm>
  33:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  34:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "stmlib/dsp/filter.h"
  36:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "stmlib/dsp/parameter_interpolator.h"
  37:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "stmlib/dsp/units.h"
  38:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  39:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "plaits/dsp/dsp.h"
  40:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "plaits/dsp/oscillator/sine_oscillator.h"
  41:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  42:eurorack/plaits/dsp/drums/analog_bass_drum.h **** namespace plaits {
  43:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  44:eurorack/plaits/dsp/drums/analog_bass_drum.h **** class AnalogBassDrum {
  45:eurorack/plaits/dsp/drums/analog_bass_drum.h ****  public:
  46:eurorack/plaits/dsp/drums/analog_bass_drum.h ****   AnalogBassDrum() { }
 382              		.loc 8 46 3 is_stmt 1 view .LVU100
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 20


 383              	.LBB1524:
 384              	.LBI1524:
 385              		.file 9 "eurorack/stmlib/dsp/filter.h"
   1:eurorack/stmlib/dsp/filter.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/stmlib/dsp/filter.h **** //
   3:eurorack/stmlib/dsp/filter.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/dsp/filter.h **** //
   5:eurorack/stmlib/dsp/filter.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/dsp/filter.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/dsp/filter.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/dsp/filter.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/dsp/filter.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/dsp/filter.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/dsp/filter.h **** // 
  12:eurorack/stmlib/dsp/filter.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/dsp/filter.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/dsp/filter.h **** // 
  15:eurorack/stmlib/dsp/filter.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/dsp/filter.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/dsp/filter.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/dsp/filter.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/dsp/filter.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/dsp/filter.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/dsp/filter.h **** // THE SOFTWARE.
  22:eurorack/stmlib/dsp/filter.h **** // 
  23:eurorack/stmlib/dsp/filter.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/dsp/filter.h **** //
  25:eurorack/stmlib/dsp/filter.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/dsp/filter.h **** //
  27:eurorack/stmlib/dsp/filter.h **** // Zero-delay-feedback filters (one pole and SVF).
  28:eurorack/stmlib/dsp/filter.h **** // Naive SVF.
  29:eurorack/stmlib/dsp/filter.h **** 
  30:eurorack/stmlib/dsp/filter.h **** #ifndef STMLIB_DSP_FILTER_H_
  31:eurorack/stmlib/dsp/filter.h **** #define STMLIB_DSP_FILTER_H_
  32:eurorack/stmlib/dsp/filter.h **** 
  33:eurorack/stmlib/dsp/filter.h **** #include "stmlib/stmlib.h"
  34:eurorack/stmlib/dsp/filter.h **** 
  35:eurorack/stmlib/dsp/filter.h **** #include <cmath>
  36:eurorack/stmlib/dsp/filter.h **** #include <algorithm>
  37:eurorack/stmlib/dsp/filter.h **** 
  38:eurorack/stmlib/dsp/filter.h **** namespace stmlib {
  39:eurorack/stmlib/dsp/filter.h **** 
  40:eurorack/stmlib/dsp/filter.h **** enum FilterMode {
  41:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_LOW_PASS,
  42:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_BAND_PASS,
  43:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_BAND_PASS_NORMALIZED,
  44:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_HIGH_PASS
  45:eurorack/stmlib/dsp/filter.h **** };
  46:eurorack/stmlib/dsp/filter.h **** 
  47:eurorack/stmlib/dsp/filter.h **** enum FrequencyApproximation {
  48:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_EXACT,
  49:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_ACCURATE,
  50:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_FAST,
  51:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_DIRTY
  52:eurorack/stmlib/dsp/filter.h **** };
  53:eurorack/stmlib/dsp/filter.h **** 
  54:eurorack/stmlib/dsp/filter.h **** #define M_PI_F float(M_PI)
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 21


  55:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_2 M_PI * M_PI
  56:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_3 M_PI_POW_2 * M_PI
  57:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_5 M_PI_POW_3 * M_PI_POW_2
  58:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_7 M_PI_POW_5 * M_PI_POW_2
  59:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_9 M_PI_POW_7 * M_PI_POW_2
  60:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_11 M_PI_POW_9 * M_PI_POW_2
  61:eurorack/stmlib/dsp/filter.h **** 
  62:eurorack/stmlib/dsp/filter.h **** class DCBlocker {
  63:eurorack/stmlib/dsp/filter.h ****  public:
  64:eurorack/stmlib/dsp/filter.h ****   DCBlocker() { }
  65:eurorack/stmlib/dsp/filter.h ****   ~DCBlocker() { }
  66:eurorack/stmlib/dsp/filter.h ****   
  67:eurorack/stmlib/dsp/filter.h ****   void Init(float pole) {
  68:eurorack/stmlib/dsp/filter.h ****     x_ = 0.0f;
  69:eurorack/stmlib/dsp/filter.h ****     y_ = 0.0f;
  70:eurorack/stmlib/dsp/filter.h ****     pole_ = pole;
  71:eurorack/stmlib/dsp/filter.h ****   }
  72:eurorack/stmlib/dsp/filter.h ****   
  73:eurorack/stmlib/dsp/filter.h ****   inline void Process(float* in_out, size_t size) {
  74:eurorack/stmlib/dsp/filter.h ****     float x = x_;
  75:eurorack/stmlib/dsp/filter.h ****     float y = y_;
  76:eurorack/stmlib/dsp/filter.h ****     const float pole = pole_;
  77:eurorack/stmlib/dsp/filter.h ****     while (size--) {
  78:eurorack/stmlib/dsp/filter.h ****       float old_x = x;
  79:eurorack/stmlib/dsp/filter.h ****       x = *in_out;
  80:eurorack/stmlib/dsp/filter.h ****       *in_out++ = y = y * pole + x - old_x;
  81:eurorack/stmlib/dsp/filter.h ****     }
  82:eurorack/stmlib/dsp/filter.h ****     x_ = x;
  83:eurorack/stmlib/dsp/filter.h ****     y_ = y;
  84:eurorack/stmlib/dsp/filter.h ****   }
  85:eurorack/stmlib/dsp/filter.h ****   
  86:eurorack/stmlib/dsp/filter.h ****  private:
  87:eurorack/stmlib/dsp/filter.h ****   float pole_;
  88:eurorack/stmlib/dsp/filter.h ****   float x_;
  89:eurorack/stmlib/dsp/filter.h ****   float y_;
  90:eurorack/stmlib/dsp/filter.h **** };
  91:eurorack/stmlib/dsp/filter.h **** 
  92:eurorack/stmlib/dsp/filter.h **** class OnePole {
  93:eurorack/stmlib/dsp/filter.h ****  public:
  94:eurorack/stmlib/dsp/filter.h ****   OnePole() { }
  95:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
  96:eurorack/stmlib/dsp/filter.h ****   
  97:eurorack/stmlib/dsp/filter.h ****   void Init() {
  98:eurorack/stmlib/dsp/filter.h ****     set_f<FREQUENCY_DIRTY>(0.01f);
  99:eurorack/stmlib/dsp/filter.h ****     Reset();
 100:eurorack/stmlib/dsp/filter.h ****   }
 101:eurorack/stmlib/dsp/filter.h ****   
 102:eurorack/stmlib/dsp/filter.h ****   void Reset() {
 103:eurorack/stmlib/dsp/filter.h ****     state_ = 0.0f;
 104:eurorack/stmlib/dsp/filter.h ****   }
 105:eurorack/stmlib/dsp/filter.h ****   
 106:eurorack/stmlib/dsp/filter.h ****   template<FrequencyApproximation approximation>
 107:eurorack/stmlib/dsp/filter.h ****   static inline float tan(float f) {
 108:eurorack/stmlib/dsp/filter.h ****     if (approximation == FREQUENCY_EXACT) {
 109:eurorack/stmlib/dsp/filter.h ****       // Clip coefficient to about 100.
 110:eurorack/stmlib/dsp/filter.h ****       f = f < 0.497f ? f : 0.497f;
 111:eurorack/stmlib/dsp/filter.h ****       return tanf(M_PI_F * f);
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 22


 112:eurorack/stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_DIRTY) {
 113:eurorack/stmlib/dsp/filter.h ****       // Optimized for frequencies below 8kHz.
 114:eurorack/stmlib/dsp/filter.h ****       const float a = 3.736e-01f * M_PI_POW_3;
 115:eurorack/stmlib/dsp/filter.h ****       return f * (M_PI_F + a * f * f);
 116:eurorack/stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_FAST) {
 117:eurorack/stmlib/dsp/filter.h ****       // The usual tangent approximation uses 3.1755e-01 and 2.033e-01, but
 118:eurorack/stmlib/dsp/filter.h ****       // the coefficients used here are optimized to minimize error for the
 119:eurorack/stmlib/dsp/filter.h ****       // 16Hz to 16kHz range, with a sample rate of 48kHz.
 120:eurorack/stmlib/dsp/filter.h ****       const float a = 3.260e-01f * M_PI_POW_3;
 121:eurorack/stmlib/dsp/filter.h ****       const float b = 1.823e-01f * M_PI_POW_5;
 122:eurorack/stmlib/dsp/filter.h ****       float f2 = f * f;
 123:eurorack/stmlib/dsp/filter.h ****       return f * (M_PI_F + f2 * (a + b * f2));
 124:eurorack/stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_ACCURATE) {
 125:eurorack/stmlib/dsp/filter.h ****       // These coefficients don't need to be tweaked for the audio range.
 126:eurorack/stmlib/dsp/filter.h ****       const float a = 3.333314036e-01f * M_PI_POW_3;
 127:eurorack/stmlib/dsp/filter.h ****       const float b = 1.333923995e-01f * M_PI_POW_5;
 128:eurorack/stmlib/dsp/filter.h ****       const float c = 5.33740603e-02f * M_PI_POW_7;
 129:eurorack/stmlib/dsp/filter.h ****       const float d = 2.900525e-03f * M_PI_POW_9;
 130:eurorack/stmlib/dsp/filter.h ****       const float e = 9.5168091e-03f * M_PI_POW_11;
 131:eurorack/stmlib/dsp/filter.h ****       float f2 = f * f;
 132:eurorack/stmlib/dsp/filter.h ****       return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
 133:eurorack/stmlib/dsp/filter.h ****     }
 134:eurorack/stmlib/dsp/filter.h ****   }
 135:eurorack/stmlib/dsp/filter.h ****   
 136:eurorack/stmlib/dsp/filter.h ****   // Set frequency and resonance from true units. Various approximations
 137:eurorack/stmlib/dsp/filter.h ****   // are available to avoid the cost of tanf.
 138:eurorack/stmlib/dsp/filter.h ****   template<FrequencyApproximation approximation>
 139:eurorack/stmlib/dsp/filter.h ****   inline void set_f(float f) {
 140:eurorack/stmlib/dsp/filter.h ****     g_ = tan<approximation>(f);
 141:eurorack/stmlib/dsp/filter.h ****     gi_ = 1.0f / (1.0f + g_);
 142:eurorack/stmlib/dsp/filter.h ****   }
 143:eurorack/stmlib/dsp/filter.h ****   
 144:eurorack/stmlib/dsp/filter.h ****   template<FilterMode mode>
 145:eurorack/stmlib/dsp/filter.h ****   inline float Process(float in) {
 146:eurorack/stmlib/dsp/filter.h ****     float lp;
 147:eurorack/stmlib/dsp/filter.h ****     lp = (g_ * in + state_) * gi_;
 148:eurorack/stmlib/dsp/filter.h ****     state_ = g_ * (in - lp) + lp;
 149:eurorack/stmlib/dsp/filter.h **** 
 150:eurorack/stmlib/dsp/filter.h ****     if (mode == FILTER_MODE_LOW_PASS) {
 151:eurorack/stmlib/dsp/filter.h ****       return lp;
 152:eurorack/stmlib/dsp/filter.h ****     } else if (mode == FILTER_MODE_HIGH_PASS) {
 153:eurorack/stmlib/dsp/filter.h ****       return in - lp;
 154:eurorack/stmlib/dsp/filter.h ****     } else {
 155:eurorack/stmlib/dsp/filter.h ****       return 0.0f;
 156:eurorack/stmlib/dsp/filter.h ****     }
 157:eurorack/stmlib/dsp/filter.h ****   }
 158:eurorack/stmlib/dsp/filter.h ****   
 159:eurorack/stmlib/dsp/filter.h ****   template<FilterMode mode>
 160:eurorack/stmlib/dsp/filter.h ****   inline void Process(float* in_out, size_t size) {
 161:eurorack/stmlib/dsp/filter.h ****     while (size--) {
 162:eurorack/stmlib/dsp/filter.h ****       *in_out = Process<mode>(*in_out);
 163:eurorack/stmlib/dsp/filter.h ****       ++in_out;
 164:eurorack/stmlib/dsp/filter.h ****     }
 165:eurorack/stmlib/dsp/filter.h ****   }
 166:eurorack/stmlib/dsp/filter.h ****   
 167:eurorack/stmlib/dsp/filter.h ****  private:
 168:eurorack/stmlib/dsp/filter.h ****   float g_;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 23


 169:eurorack/stmlib/dsp/filter.h ****   float gi_;
 170:eurorack/stmlib/dsp/filter.h ****   float state_;
 171:eurorack/stmlib/dsp/filter.h ****   
 172:eurorack/stmlib/dsp/filter.h ****   DISALLOW_COPY_AND_ASSIGN(OnePole);
 173:eurorack/stmlib/dsp/filter.h **** };
 174:eurorack/stmlib/dsp/filter.h **** 
 175:eurorack/stmlib/dsp/filter.h **** 
 176:eurorack/stmlib/dsp/filter.h **** 
 177:eurorack/stmlib/dsp/filter.h **** class Svf {
 178:eurorack/stmlib/dsp/filter.h ****  public:
 179:eurorack/stmlib/dsp/filter.h ****   Svf() { }
 386              		.loc 9 179 3 view .LVU101
 387              		.loc 9 179 3 is_stmt 0 view .LVU102
 388              	.LBE1524:
 389              	.LBB1525:
 390              	.LBI1525:
 391              		.file 10 "eurorack/plaits/dsp/oscillator/sine_oscillator.h"
   1:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // Simple sine oscillator (wavetable) + fast sine oscillator (magic circle).
  28:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
  29:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // The fast implementation might glitch a bit under heavy modulations of the
  30:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // frequency.
  31:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  32:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_SINE_OSCILLATOR_H_
  33:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #define PLAITS_DSP_OSCILLATOR_SINE_OSCILLATOR_H_
  34:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  35:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #include "stmlib/dsp/dsp.h"
  36:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  37:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #include "stmlib/dsp/rsqrt.h"
  38:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  39:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #include "plaits/resources.h"
  40:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 24


  41:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** namespace plaits {
  42:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  43:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** class SineOscillator {
  44:eurorack/plaits/dsp/oscillator/sine_oscillator.h ****  public:
  45:eurorack/plaits/dsp/oscillator/sine_oscillator.h ****   SineOscillator() { }
 392              		.loc 10 45 3 is_stmt 1 view .LVU103
 393              		.loc 10 45 3 is_stmt 0 view .LVU104
 394              	.LBE1525:
 395              	.LBE1523:
 396              	.LBB1526:
 397              	.LBI1526:
 398              		.file 11 "eurorack/plaits/dsp/drums/synthetic_bass_drum.h"
   1:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** //
   3:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** //
   5:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // 
  12:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // 
  15:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // 
  23:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** //
  25:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** //
  27:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Naive bass drum model (modulated oscillator with FM + envelope).
  28:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Inadvertently 909-ish.
  29:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  30:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #ifndef PLAITS_DSP_DRUMS_SYNTHETIC_BASS_DRUM_H_
  31:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #define PLAITS_DSP_DRUMS_SYNTHETIC_BASS_DRUM_H_
  32:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  33:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "stmlib/dsp/dsp.h"
  34:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "stmlib/dsp/units.h"
  35:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "stmlib/utils/random.h"
  36:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  37:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "plaits/dsp/dsp.h"
  38:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "plaits/resources.h"
  39:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  40:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** namespace plaits {
  41:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  42:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** class SyntheticBassDrumClick {
  43:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  public:
  44:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   SyntheticBassDrumClick() { }
  45:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumClick() { }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 25


  46:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  47:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   void Init() {
  48:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     lp_ = 0.0f;
  49:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     hp_ = 0.0f;
  50:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     filter_.Init();
  51:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  52:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   }
  53:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  54:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float Process(float in) {
  55:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     SLOPE(lp_, in, 0.5f, 0.1f);
  56:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     ONE_POLE(hp_, lp_, 0.04f);
  57:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     return filter_.Process<stmlib::FILTER_MODE_LOW_PASS>(lp_ - hp_);
  58:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   }
  59:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  60:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  private:
  61:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float lp_;
  62:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float hp_;
  63:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   stmlib::Svf filter_;
  64:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  65:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   DISALLOW_COPY_AND_ASSIGN(SyntheticBassDrumClick);
  66:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** };
  67:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  68:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** class SyntheticBassDrumAttackNoise {
  69:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  public:
  70:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   SyntheticBassDrumAttackNoise() { }
  71:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumAttackNoise() { }
  72:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  73:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   void Init() {
  74:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     lp_ = 0.0f;
  75:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     hp_ = 0.0f;
  76:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   }
  77:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  78:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float Render() {
  79:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     float sample = stmlib::Random::GetFloat();
  80:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     ONE_POLE(lp_, sample, 0.05f);
  81:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     ONE_POLE(hp_, lp_, 0.005f);
  82:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     return lp_ - hp_;
  83:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   }
  84:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  85:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  private:
  86:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float lp_;
  87:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float hp_;
  88:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  89:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   DISALLOW_COPY_AND_ASSIGN(SyntheticBassDrumAttackNoise);
  90:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** };
  91:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  92:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** class SyntheticBassDrum {
  93:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  public:
  94:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   SyntheticBassDrum() { }
 399              		.loc 11 94 3 is_stmt 1 view .LVU105
 400              	.LBB1527:
 401              	.LBI1527:
  44:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumClick() { }
 402              		.loc 11 44 3 view .LVU106
 403              	.LBB1528:
 404              	.LBI1528:
 405              		.loc 9 179 3 view .LVU107
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 26


 406              		.loc 9 179 3 is_stmt 0 view .LVU108
 407              	.LBE1528:
 408              	.LBE1527:
 409              	.LBB1529:
 410              	.LBI1529:
  70:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumAttackNoise() { }
 411              		.loc 11 70 3 is_stmt 1 view .LVU109
  70:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumAttackNoise() { }
 412              		.loc 11 70 3 is_stmt 0 view .LVU110
 413              	.LBE1529:
 414              	.LBE1526:
 415              	.LBB1530:
 416              	.LBI1530:
 417              		.file 12 "eurorack/plaits/dsp/fx/overdrive.h"
   1:eurorack/plaits/dsp/fx/overdrive.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/plaits/dsp/fx/overdrive.h **** //
   3:eurorack/plaits/dsp/fx/overdrive.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/fx/overdrive.h **** //
   5:eurorack/plaits/dsp/fx/overdrive.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/fx/overdrive.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/fx/overdrive.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/fx/overdrive.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/fx/overdrive.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/fx/overdrive.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/fx/overdrive.h **** // 
  12:eurorack/plaits/dsp/fx/overdrive.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/fx/overdrive.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/fx/overdrive.h **** // 
  15:eurorack/plaits/dsp/fx/overdrive.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/fx/overdrive.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/fx/overdrive.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/fx/overdrive.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/fx/overdrive.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/fx/overdrive.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/fx/overdrive.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/fx/overdrive.h **** // 
  23:eurorack/plaits/dsp/fx/overdrive.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/fx/overdrive.h **** //
  25:eurorack/plaits/dsp/fx/overdrive.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/fx/overdrive.h **** //
  27:eurorack/plaits/dsp/fx/overdrive.h **** // Distortion/overdrive.
  28:eurorack/plaits/dsp/fx/overdrive.h **** 
  29:eurorack/plaits/dsp/fx/overdrive.h **** #ifndef PLAITS_DSP_FX_OVERDRIVE_H_
  30:eurorack/plaits/dsp/fx/overdrive.h **** #define PLAITS_DSP_FX_OVERDRIVE_H_
  31:eurorack/plaits/dsp/fx/overdrive.h **** 
  32:eurorack/plaits/dsp/fx/overdrive.h **** #include <algorithm>
  33:eurorack/plaits/dsp/fx/overdrive.h **** 
  34:eurorack/plaits/dsp/fx/overdrive.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/fx/overdrive.h **** #include "stmlib/dsp/parameter_interpolator.h"
  36:eurorack/plaits/dsp/fx/overdrive.h **** 
  37:eurorack/plaits/dsp/fx/overdrive.h **** namespace plaits {
  38:eurorack/plaits/dsp/fx/overdrive.h ****   
  39:eurorack/plaits/dsp/fx/overdrive.h **** class Overdrive {
  40:eurorack/plaits/dsp/fx/overdrive.h ****  public:
  41:eurorack/plaits/dsp/fx/overdrive.h ****   Overdrive() { }
 418              		.loc 12 41 3 is_stmt 1 view .LVU111
 419              		.loc 12 41 3 is_stmt 0 view .LVU112
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 27


 420              	.LBE1530:
 421              	.LBE1521:
 422              	.LBE1520:
 423              	.LBB1531:
 424              	.LBI1531:
 425              		.file 13 "eurorack/plaits/dsp/engine/chord_engine.h"
   1:eurorack/plaits/dsp/engine/chord_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/chord_engine.h **** //
   3:eurorack/plaits/dsp/engine/chord_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/chord_engine.h **** //
   5:eurorack/plaits/dsp/engine/chord_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/chord_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/chord_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/chord_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/chord_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/chord_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/chord_engine.h **** // 
  12:eurorack/plaits/dsp/engine/chord_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/chord_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/chord_engine.h **** // 
  15:eurorack/plaits/dsp/engine/chord_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/chord_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/chord_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/chord_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/chord_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/chord_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/chord_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/chord_engine.h **** // 
  23:eurorack/plaits/dsp/engine/chord_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/chord_engine.h **** //
  25:eurorack/plaits/dsp/engine/chord_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/chord_engine.h **** //
  27:eurorack/plaits/dsp/engine/chord_engine.h **** // Chords: wavetable and divide-down organ/string machine.
  28:eurorack/plaits/dsp/engine/chord_engine.h **** 
  29:eurorack/plaits/dsp/engine/chord_engine.h **** #ifndef PLAITS_DSP_ENGINE_CHORD_ENGINE_H_
  30:eurorack/plaits/dsp/engine/chord_engine.h **** #define PLAITS_DSP_ENGINE_CHORD_ENGINE_H_
  31:eurorack/plaits/dsp/engine/chord_engine.h **** 
  32:eurorack/plaits/dsp/engine/chord_engine.h **** #include "stmlib/dsp/hysteresis_quantizer.h"
  33:eurorack/plaits/dsp/engine/chord_engine.h **** 
  34:eurorack/plaits/dsp/engine/chord_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/chord_engine.h **** #include "plaits/dsp/oscillator/string_synth_oscillator.h"
  36:eurorack/plaits/dsp/engine/chord_engine.h **** #include "plaits/dsp/oscillator/wavetable_oscillator.h"
  37:eurorack/plaits/dsp/engine/chord_engine.h **** 
  38:eurorack/plaits/dsp/engine/chord_engine.h **** namespace plaits {
  39:eurorack/plaits/dsp/engine/chord_engine.h **** 
  40:eurorack/plaits/dsp/engine/chord_engine.h **** const int kChordNumNotes = 4;
  41:eurorack/plaits/dsp/engine/chord_engine.h **** const int kChordNumVoices = 5;
  42:eurorack/plaits/dsp/engine/chord_engine.h **** const int kChordNumChords = 11;
  43:eurorack/plaits/dsp/engine/chord_engine.h **** const int kChordNumHarmonics = 3;
  44:eurorack/plaits/dsp/engine/chord_engine.h **** 
  45:eurorack/plaits/dsp/engine/chord_engine.h **** class ChordEngine : public Engine {
  46:eurorack/plaits/dsp/engine/chord_engine.h ****  public:
  47:eurorack/plaits/dsp/engine/chord_engine.h ****   ChordEngine() { }
 426              		.loc 13 47 3 is_stmt 1 view .LVU113
 427              	.LBB1532:
 428              	.LBB1533:
 429              	.LBI1533:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 28


 430              		.loc 6 80 3 view .LVU114
 431              		.loc 6 80 3 is_stmt 0 view .LVU115
 432              	.LBE1533:
 433              		.loc 13 47 17 view .LVU116
 434 0016 3949     		ldr	r1, .L24+8
 435 0018 C3F80012 		str	r1, [r3, #512]
 436              		.loc 13 47 17 is_stmt 1 view .LVU117
 437              		.loc 13 47 17 view .LVU118
 438              	.LVL21:
 439              	.LBB1534:
 440              	.LBI1534:
 441              		.file 14 "eurorack/stmlib/dsp/hysteresis_quantizer.h"
   1:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // Copyright 2015 Emilie Gillet.
   2:eurorack/stmlib/dsp/hysteresis_quantizer.h **** //
   3:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/dsp/hysteresis_quantizer.h **** //
   5:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // 
  12:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // 
  15:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // THE SOFTWARE.
  22:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // 
  23:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/dsp/hysteresis_quantizer.h **** //
  25:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/dsp/hysteresis_quantizer.h **** //
  27:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // Quantize a float in [0, 1] to an integer in [0, num_steps[. Apply hysteresis
  28:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // to prevent jumps near the decision boundary.
  29:eurorack/stmlib/dsp/hysteresis_quantizer.h **** 
  30:eurorack/stmlib/dsp/hysteresis_quantizer.h **** #ifndef STMLIB_DSP_HYSTERESIS_QUANTIZER_H_
  31:eurorack/stmlib/dsp/hysteresis_quantizer.h **** #define STMLIB_DSP_HYSTERESIS_QUANTIZER_H_
  32:eurorack/stmlib/dsp/hysteresis_quantizer.h **** 
  33:eurorack/stmlib/dsp/hysteresis_quantizer.h **** #include "stmlib/stmlib.h"
  34:eurorack/stmlib/dsp/hysteresis_quantizer.h **** 
  35:eurorack/stmlib/dsp/hysteresis_quantizer.h **** namespace stmlib {
  36:eurorack/stmlib/dsp/hysteresis_quantizer.h **** 
  37:eurorack/stmlib/dsp/hysteresis_quantizer.h **** class HysteresisQuantizer {
  38:eurorack/stmlib/dsp/hysteresis_quantizer.h ****  public:
  39:eurorack/stmlib/dsp/hysteresis_quantizer.h ****   HysteresisQuantizer() { }
 442              		.loc 14 39 3 view .LVU119
 443              		.loc 14 39 3 is_stmt 0 view .LVU120
 444              	.LBE1534:
 445              	.LBE1532:
 446              	.LBE1531:
 447              	.LBB1535:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 29


 448              	.LBI1535:
 449              		.file 15 "eurorack/plaits/dsp/engine/fm_engine.h"
   1:eurorack/plaits/dsp/engine/fm_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/fm_engine.h **** //
   3:eurorack/plaits/dsp/engine/fm_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/fm_engine.h **** //
   5:eurorack/plaits/dsp/engine/fm_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/fm_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/fm_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/fm_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/fm_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/fm_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/fm_engine.h **** // 
  12:eurorack/plaits/dsp/engine/fm_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/fm_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/fm_engine.h **** // 
  15:eurorack/plaits/dsp/engine/fm_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/fm_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/fm_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/fm_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/fm_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/fm_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/fm_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/fm_engine.h **** // 
  23:eurorack/plaits/dsp/engine/fm_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/fm_engine.h **** //
  25:eurorack/plaits/dsp/engine/fm_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/fm_engine.h **** //
  27:eurorack/plaits/dsp/engine/fm_engine.h **** // Classic 2-op FM, as found in Braids, Rings and Elements.
  28:eurorack/plaits/dsp/engine/fm_engine.h **** 
  29:eurorack/plaits/dsp/engine/fm_engine.h **** #ifndef PLAITS_DSP_ENGINE_FM_ENGINE_H_
  30:eurorack/plaits/dsp/engine/fm_engine.h **** #define PLAITS_DSP_ENGINE_FM_ENGINE_H_
  31:eurorack/plaits/dsp/engine/fm_engine.h **** 
  32:eurorack/plaits/dsp/engine/fm_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/fm_engine.h **** 
  34:eurorack/plaits/dsp/engine/fm_engine.h **** namespace plaits {
  35:eurorack/plaits/dsp/engine/fm_engine.h ****   
  36:eurorack/plaits/dsp/engine/fm_engine.h **** class FMEngine : public Engine {
  37:eurorack/plaits/dsp/engine/fm_engine.h ****  public:
  38:eurorack/plaits/dsp/engine/fm_engine.h ****   FMEngine() { }
 450              		.loc 15 38 3 is_stmt 1 view .LVU121
 451              	.LBB1536:
 452              	.LBB1537:
 453              	.LBI1537:
 454              		.loc 6 80 3 view .LVU122
 455              		.loc 6 80 3 is_stmt 0 view .LVU123
 456              	.LBE1537:
 457              		.loc 15 38 14 view .LVU124
 458 001c 3849     		ldr	r1, .L24+12
 459 001e C3F85013 		str	r1, [r3, #848]
 460              	.LVL22:
 461              		.loc 15 38 14 view .LVU125
 462              	.LBE1536:
 463              	.LBE1535:
 464              	.LBB1538:
 465              	.LBI1538:
 466              		.file 16 "eurorack/plaits/dsp/engine/grain_engine.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 30


   1:eurorack/plaits/dsp/engine/grain_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/grain_engine.h **** //
   3:eurorack/plaits/dsp/engine/grain_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/grain_engine.h **** //
   5:eurorack/plaits/dsp/engine/grain_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/grain_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/grain_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/grain_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/grain_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/grain_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/grain_engine.h **** // 
  12:eurorack/plaits/dsp/engine/grain_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/grain_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/grain_engine.h **** // 
  15:eurorack/plaits/dsp/engine/grain_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/grain_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/grain_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/grain_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/grain_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/grain_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/grain_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/grain_engine.h **** // 
  23:eurorack/plaits/dsp/engine/grain_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/grain_engine.h **** //
  25:eurorack/plaits/dsp/engine/grain_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/grain_engine.h **** //
  27:eurorack/plaits/dsp/engine/grain_engine.h **** // Windowed sine segments.
  28:eurorack/plaits/dsp/engine/grain_engine.h **** 
  29:eurorack/plaits/dsp/engine/grain_engine.h **** #ifndef PLAITS_DSP_ENGINE_GRAIN_ENGINE_H_
  30:eurorack/plaits/dsp/engine/grain_engine.h **** #define PLAITS_DSP_ENGINE_GRAIN_ENGINE_H_
  31:eurorack/plaits/dsp/engine/grain_engine.h **** 
  32:eurorack/plaits/dsp/engine/grain_engine.h **** #include "stmlib/dsp/filter.h"
  33:eurorack/plaits/dsp/engine/grain_engine.h **** 
  34:eurorack/plaits/dsp/engine/grain_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/grain_engine.h **** #include "plaits/dsp/oscillator/grainlet_oscillator.h"
  36:eurorack/plaits/dsp/engine/grain_engine.h **** #include "plaits/dsp/oscillator/vosim_oscillator.h"
  37:eurorack/plaits/dsp/engine/grain_engine.h **** #include "plaits/dsp/oscillator/z_oscillator.h"
  38:eurorack/plaits/dsp/engine/grain_engine.h **** 
  39:eurorack/plaits/dsp/engine/grain_engine.h **** namespace plaits {
  40:eurorack/plaits/dsp/engine/grain_engine.h ****   
  41:eurorack/plaits/dsp/engine/grain_engine.h **** class GrainEngine : public Engine {
  42:eurorack/plaits/dsp/engine/grain_engine.h ****  public:
  43:eurorack/plaits/dsp/engine/grain_engine.h ****   GrainEngine() { }
 467              		.loc 16 43 3 is_stmt 1 view .LVU126
 468              	.LBB1539:
 469              	.LBB1540:
 470              	.LBI1540:
 471              		.loc 6 80 3 view .LVU127
 472              		.loc 6 80 3 is_stmt 0 view .LVU128
 473              	.LBE1540:
 474              		.loc 16 43 17 view .LVU129
 475 0022 3849     		ldr	r1, .L24+16
 476 0024 C3F88813 		str	r1, [r3, #904]
 477              		.loc 16 43 17 is_stmt 1 view .LVU130
 478              	.LVL23:
 479              	.LBB1541:
 480              	.LBI1541:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 31


 481              		.file 17 "eurorack/plaits/dsp/oscillator/z_oscillator.h"
   1:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/z_oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/z_oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/z_oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/z_oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // Sinewave multiplied by and sync'ed to a carrier.
  28:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  29:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_Z_OSCILLATOR_H_
  30:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #define PLAITS_DSP_OSCILLATOR_Z_OSCILLATOR_H_
  31:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  32:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include <algorithm>
  33:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  34:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  36:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include "stmlib/dsp/polyblep.h"
  37:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  38:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include "plaits/resources.h"
  39:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  40:eurorack/plaits/dsp/oscillator/z_oscillator.h **** namespace plaits {
  41:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  42:eurorack/plaits/dsp/oscillator/z_oscillator.h **** class ZOscillator {
  43:eurorack/plaits/dsp/oscillator/z_oscillator.h ****  public:
  44:eurorack/plaits/dsp/oscillator/z_oscillator.h ****   ZOscillator() { }
 482              		.loc 17 44 3 view .LVU131
 483              		.loc 17 44 3 is_stmt 0 view .LVU132
 484              	.LBE1541:
 485              		.loc 16 43 17 is_stmt 1 view .LVU133
 486              		.loc 16 43 17 is_stmt 0 view .LVU134
 487              	.LBE1539:
 488              	.LBE1538:
 489              	.LBB1542:
 490              	.LBI1542:
 491              		.file 18 "eurorack/plaits/dsp/engine/hi_hat_engine.h"
   1:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/hi_hat_engine.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 32


   3:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/hi_hat_engine.h **** //
   5:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // 
  12:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // 
  15:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // 
  23:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/hi_hat_engine.h **** //
  25:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/hi_hat_engine.h **** //
  27:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // 808-style HH with two noise sources - one faithful to the original, the other
  28:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // more metallic.
  29:eurorack/plaits/dsp/engine/hi_hat_engine.h **** 
  30:eurorack/plaits/dsp/engine/hi_hat_engine.h **** #ifndef PLAITS_DSP_ENGINE_HI_HAT_ENGINE_H_
  31:eurorack/plaits/dsp/engine/hi_hat_engine.h **** #define PLAITS_DSP_ENGINE_HI_HAT_ENGINE_H_
  32:eurorack/plaits/dsp/engine/hi_hat_engine.h **** 
  33:eurorack/plaits/dsp/engine/hi_hat_engine.h **** #include "plaits/dsp/drums/hi_hat.h"
  34:eurorack/plaits/dsp/engine/hi_hat_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/hi_hat_engine.h **** 
  36:eurorack/plaits/dsp/engine/hi_hat_engine.h **** namespace plaits {
  37:eurorack/plaits/dsp/engine/hi_hat_engine.h ****   
  38:eurorack/plaits/dsp/engine/hi_hat_engine.h **** class HiHatEngine : public Engine {
  39:eurorack/plaits/dsp/engine/hi_hat_engine.h ****  public:
  40:eurorack/plaits/dsp/engine/hi_hat_engine.h ****   HiHatEngine() { }
 492              		.loc 18 40 3 is_stmt 1 view .LVU135
 493              	.LBB1543:
 494              	.LBB1544:
 495              	.LBI1544:
 496              		.loc 6 80 3 view .LVU136
 497              		.loc 6 80 3 is_stmt 0 view .LVU137
 498              	.LBE1544:
 499              		.loc 18 40 17 view .LVU138
 500 0028 3749     		ldr	r1, .L24+20
 501 002a C3F80C14 		str	r1, [r3, #1036]
 502              	.LVL24:
 503              	.LBB1545:
 504              	.LBI1545:
 505              		.file 19 "eurorack/plaits/dsp/drums/hi_hat.h"
   1:eurorack/plaits/dsp/drums/hi_hat.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/hi_hat.h **** //
   3:eurorack/plaits/dsp/drums/hi_hat.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/hi_hat.h **** //
   5:eurorack/plaits/dsp/drums/hi_hat.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 33


   6:eurorack/plaits/dsp/drums/hi_hat.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/hi_hat.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/hi_hat.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/hi_hat.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/hi_hat.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/hi_hat.h **** // 
  12:eurorack/plaits/dsp/drums/hi_hat.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/hi_hat.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/hi_hat.h **** // 
  15:eurorack/plaits/dsp/drums/hi_hat.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/hi_hat.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/hi_hat.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/hi_hat.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/hi_hat.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/hi_hat.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/hi_hat.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/hi_hat.h **** // 
  23:eurorack/plaits/dsp/drums/hi_hat.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/hi_hat.h **** //
  25:eurorack/plaits/dsp/drums/hi_hat.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/hi_hat.h **** //
  27:eurorack/plaits/dsp/drums/hi_hat.h **** // 808 HH, with a few extra parameters to push things to the CY territory...
  28:eurorack/plaits/dsp/drums/hi_hat.h **** // The template parameter MetallicNoiseSource allows another kind of "metallic
  29:eurorack/plaits/dsp/drums/hi_hat.h **** // noise" to be used, for results which are more similar to KR-55 or FM hi-hats.
  30:eurorack/plaits/dsp/drums/hi_hat.h **** 
  31:eurorack/plaits/dsp/drums/hi_hat.h **** #ifndef PLAITS_DSP_DRUMS_HI_HAT_H_
  32:eurorack/plaits/dsp/drums/hi_hat.h **** #define PLAITS_DSP_DRUMS_HI_HAT_H_
  33:eurorack/plaits/dsp/drums/hi_hat.h **** 
  34:eurorack/plaits/dsp/drums/hi_hat.h **** #include <algorithm>
  35:eurorack/plaits/dsp/drums/hi_hat.h **** 
  36:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/dsp/dsp.h"
  37:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/dsp/filter.h"
  38:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/dsp/parameter_interpolator.h"
  39:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/dsp/units.h"
  40:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/utils/random.h"
  41:eurorack/plaits/dsp/drums/hi_hat.h **** 
  42:eurorack/plaits/dsp/drums/hi_hat.h **** #include "plaits/dsp/dsp.h"
  43:eurorack/plaits/dsp/drums/hi_hat.h **** #include "plaits/dsp/oscillator/oscillator.h"
  44:eurorack/plaits/dsp/drums/hi_hat.h **** 
  45:eurorack/plaits/dsp/drums/hi_hat.h **** namespace plaits {
  46:eurorack/plaits/dsp/drums/hi_hat.h **** 
  47:eurorack/plaits/dsp/drums/hi_hat.h **** // 808 style "metallic noise" with 6 square oscillators.
  48:eurorack/plaits/dsp/drums/hi_hat.h **** class SquareNoise {
  49:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
  50:eurorack/plaits/dsp/drums/hi_hat.h ****   SquareNoise() { }
  51:eurorack/plaits/dsp/drums/hi_hat.h ****   ~SquareNoise() { }
  52:eurorack/plaits/dsp/drums/hi_hat.h **** 
  53:eurorack/plaits/dsp/drums/hi_hat.h ****   void Init() {
  54:eurorack/plaits/dsp/drums/hi_hat.h ****     std::fill(&phase_[0], &phase_[6], 0);
  55:eurorack/plaits/dsp/drums/hi_hat.h ****   }
  56:eurorack/plaits/dsp/drums/hi_hat.h ****     
  57:eurorack/plaits/dsp/drums/hi_hat.h ****   void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
  58:eurorack/plaits/dsp/drums/hi_hat.h ****     const float ratios[6] = {
  59:eurorack/plaits/dsp/drums/hi_hat.h ****         // Nominal f0: 414 Hz
  60:eurorack/plaits/dsp/drums/hi_hat.h ****         1.0f, 1.304f, 1.466f, 1.787f, 1.932f, 2.536f
  61:eurorack/plaits/dsp/drums/hi_hat.h ****     };
  62:eurorack/plaits/dsp/drums/hi_hat.h ****   
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 34


  63:eurorack/plaits/dsp/drums/hi_hat.h ****     uint32_t increment[6];
  64:eurorack/plaits/dsp/drums/hi_hat.h ****     uint32_t phase[6];
  65:eurorack/plaits/dsp/drums/hi_hat.h ****     for (int i = 0; i < 6; ++i) {
  66:eurorack/plaits/dsp/drums/hi_hat.h ****       float f = f0 * ratios[i];
  67:eurorack/plaits/dsp/drums/hi_hat.h ****       if (f >= 0.499f) f = 0.499f;
  68:eurorack/plaits/dsp/drums/hi_hat.h ****       increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
  69:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[i] = phase_[i];
  70:eurorack/plaits/dsp/drums/hi_hat.h ****     }
  71:eurorack/plaits/dsp/drums/hi_hat.h **** 
  72:eurorack/plaits/dsp/drums/hi_hat.h ****     while (size--) {
  73:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[0] += increment[0];
  74:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[1] += increment[1];
  75:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[2] += increment[2];
  76:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[3] += increment[3];
  77:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[4] += increment[4];
  78:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[5] += increment[5];
  79:eurorack/plaits/dsp/drums/hi_hat.h ****       uint32_t noise = 0;
  80:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[0] >> 31);
  81:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[1] >> 31);
  82:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[2] >> 31);
  83:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[3] >> 31);
  84:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[4] >> 31);
  85:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[5] >> 31);
  86:eurorack/plaits/dsp/drums/hi_hat.h ****       *out++ = 0.33f * static_cast<float>(noise) - 1.0f;
  87:eurorack/plaits/dsp/drums/hi_hat.h ****     }
  88:eurorack/plaits/dsp/drums/hi_hat.h ****   
  89:eurorack/plaits/dsp/drums/hi_hat.h ****     for (int i = 0; i < 6; ++i) {
  90:eurorack/plaits/dsp/drums/hi_hat.h ****       phase_[i] = phase[i];
  91:eurorack/plaits/dsp/drums/hi_hat.h ****     }
  92:eurorack/plaits/dsp/drums/hi_hat.h ****   }
  93:eurorack/plaits/dsp/drums/hi_hat.h **** 
  94:eurorack/plaits/dsp/drums/hi_hat.h ****  private:
  95:eurorack/plaits/dsp/drums/hi_hat.h ****   uint32_t phase_[6];
  96:eurorack/plaits/dsp/drums/hi_hat.h **** 
  97:eurorack/plaits/dsp/drums/hi_hat.h ****   DISALLOW_COPY_AND_ASSIGN(SquareNoise);
  98:eurorack/plaits/dsp/drums/hi_hat.h **** };
  99:eurorack/plaits/dsp/drums/hi_hat.h **** 
 100:eurorack/plaits/dsp/drums/hi_hat.h **** class RingModNoise {
 101:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
 102:eurorack/plaits/dsp/drums/hi_hat.h ****   RingModNoise() { }
 103:eurorack/plaits/dsp/drums/hi_hat.h ****   ~RingModNoise() { }
 104:eurorack/plaits/dsp/drums/hi_hat.h **** 
 105:eurorack/plaits/dsp/drums/hi_hat.h ****   void Init() {
 106:eurorack/plaits/dsp/drums/hi_hat.h ****     for (int i = 0; i < 6; ++i) {
 107:eurorack/plaits/dsp/drums/hi_hat.h ****       oscillator_[i].Init();
 108:eurorack/plaits/dsp/drums/hi_hat.h ****     }
 109:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 110:eurorack/plaits/dsp/drums/hi_hat.h ****   
 111:eurorack/plaits/dsp/drums/hi_hat.h ****   void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
 112:eurorack/plaits/dsp/drums/hi_hat.h ****     const float ratio = f0 / (0.01f + f0);
 113:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f1a = 200.0f / kSampleRate * ratio;
 114:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f1b = 7530.0f / kSampleRate * ratio;
 115:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f2a = 510.0f / kSampleRate * ratio;
 116:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f2b = 8075.0f / kSampleRate * ratio;
 117:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f3a = 730.0f / kSampleRate * ratio;
 118:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f3b = 10500.0f / kSampleRate * ratio;
 119:eurorack/plaits/dsp/drums/hi_hat.h ****     
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 35


 120:eurorack/plaits/dsp/drums/hi_hat.h ****     std::fill(&out[0], &out[size], 0.0f);
 121:eurorack/plaits/dsp/drums/hi_hat.h ****     
 122:eurorack/plaits/dsp/drums/hi_hat.h ****     RenderPair(&oscillator_[0], f1a, f1b, temp_1, temp_2, out, size);
 123:eurorack/plaits/dsp/drums/hi_hat.h ****     RenderPair(&oscillator_[2], f2a, f2b, temp_1, temp_2, out, size);
 124:eurorack/plaits/dsp/drums/hi_hat.h ****     RenderPair(&oscillator_[4], f3a, f3b, temp_1, temp_2, out, size);
 125:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 126:eurorack/plaits/dsp/drums/hi_hat.h **** 
 127:eurorack/plaits/dsp/drums/hi_hat.h ****  private:
 128:eurorack/plaits/dsp/drums/hi_hat.h ****   void RenderPair(
 129:eurorack/plaits/dsp/drums/hi_hat.h ****       Oscillator* osc,
 130:eurorack/plaits/dsp/drums/hi_hat.h ****       float f1,
 131:eurorack/plaits/dsp/drums/hi_hat.h ****       float f2,
 132:eurorack/plaits/dsp/drums/hi_hat.h ****       float* temp_1,
 133:eurorack/plaits/dsp/drums/hi_hat.h ****       float* temp_2,
 134:eurorack/plaits/dsp/drums/hi_hat.h ****       float* out,
 135:eurorack/plaits/dsp/drums/hi_hat.h ****       size_t size) {
 136:eurorack/plaits/dsp/drums/hi_hat.h ****     osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
 137:eurorack/plaits/dsp/drums/hi_hat.h ****     osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
 138:eurorack/plaits/dsp/drums/hi_hat.h ****     while (size--) {
 139:eurorack/plaits/dsp/drums/hi_hat.h ****       *out++ += *temp_1++ * *temp_2++;
 140:eurorack/plaits/dsp/drums/hi_hat.h ****     }
 141:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 142:eurorack/plaits/dsp/drums/hi_hat.h ****   Oscillator oscillator_[6];
 143:eurorack/plaits/dsp/drums/hi_hat.h ****   
 144:eurorack/plaits/dsp/drums/hi_hat.h ****   DISALLOW_COPY_AND_ASSIGN(RingModNoise);
 145:eurorack/plaits/dsp/drums/hi_hat.h **** };
 146:eurorack/plaits/dsp/drums/hi_hat.h **** 
 147:eurorack/plaits/dsp/drums/hi_hat.h **** class SwingVCA {
 148:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
 149:eurorack/plaits/dsp/drums/hi_hat.h ****   float operator()(float s, float gain) {
 150:eurorack/plaits/dsp/drums/hi_hat.h ****    s *= s > 0.0f ? 10.0f : 0.1f;
 151:eurorack/plaits/dsp/drums/hi_hat.h ****    s = s / (1.0f + fabsf(s));
 152:eurorack/plaits/dsp/drums/hi_hat.h ****    return (s + 1.0f) * gain;
 153:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 154:eurorack/plaits/dsp/drums/hi_hat.h **** };
 155:eurorack/plaits/dsp/drums/hi_hat.h **** 
 156:eurorack/plaits/dsp/drums/hi_hat.h **** class LinearVCA {
 157:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
 158:eurorack/plaits/dsp/drums/hi_hat.h ****   float operator()(float s, float gain) {
 159:eurorack/plaits/dsp/drums/hi_hat.h ****    return s * gain;
 160:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 161:eurorack/plaits/dsp/drums/hi_hat.h **** };
 162:eurorack/plaits/dsp/drums/hi_hat.h **** 
 163:eurorack/plaits/dsp/drums/hi_hat.h **** template<typename MetallicNoiseSource, typename VCA, bool resonance>
 164:eurorack/plaits/dsp/drums/hi_hat.h **** class HiHat {
 165:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
 166:eurorack/plaits/dsp/drums/hi_hat.h ****   HiHat() { }
 506              		.loc 19 166 3 is_stmt 1 view .LVU139
 507              	.LBB1546:
 508              	.LBI1546:
  50:eurorack/plaits/dsp/drums/hi_hat.h ****   ~SquareNoise() { }
 509              		.loc 19 50 3 view .LVU140
  50:eurorack/plaits/dsp/drums/hi_hat.h ****   ~SquareNoise() { }
 510              		.loc 19 50 3 is_stmt 0 view .LVU141
 511              	.LBE1546:
 512              	.LBB1547:
 513              	.LBI1547:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 36


 514              		.loc 9 179 3 is_stmt 1 view .LVU142
 515              		.loc 9 179 3 is_stmt 0 view .LVU143
 516              	.LBE1547:
 517              	.LBB1548:
 518              	.LBI1548:
 519              		.loc 9 179 3 is_stmt 1 view .LVU144
 520              		.loc 9 179 3 is_stmt 0 view .LVU145
 521              	.LBE1548:
 522              	.LBE1545:
 523              	.LBB1549:
 524              	.LBI1549:
 525              		.loc 19 166 3 is_stmt 1 view .LVU146
 526              	.LBB1550:
 527              	.LBI1550:
 102:eurorack/plaits/dsp/drums/hi_hat.h ****   ~RingModNoise() { }
 528              		.loc 19 102 3 view .LVU147
 529              	.LBE1550:
 530              	.LBE1549:
 531              	.LBE1543:
 532              	.LBE1542:
 533              	.LBE1516:
 534              	.LBE1648:
 102:eurorack/plaits/dsp/drums/hi_hat.h ****   ~RingModNoise() { }
 535              		.loc 19 102 18 view .LVU148
 536              	.LBB1649:
 537              	.LBB1638:
 538              	.LBB1555:
 539              	.LBB1554:
 540              	.LBB1553:
 541              	.LBB1551:
 542              	.LBI1551:
 543              		.loc 9 179 3 view .LVU149
 544              		.loc 9 179 3 is_stmt 0 view .LVU150
 545              	.LBE1551:
 546              	.LBB1552:
 547              	.LBI1552:
 548              		.loc 9 179 3 is_stmt 1 view .LVU151
 549              		.loc 9 179 3 is_stmt 0 view .LVU152
 550              	.LBE1552:
 551              	.LBE1553:
 552              	.LBE1554:
 553              	.LBE1555:
 554              	.LBB1556:
 555              	.LBI1556:
 556              		.file 20 "eurorack/plaits/dsp/engine/modal_engine.h"
   1:eurorack/plaits/dsp/engine/modal_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/modal_engine.h **** //
   3:eurorack/plaits/dsp/engine/modal_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/modal_engine.h **** //
   5:eurorack/plaits/dsp/engine/modal_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/modal_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/modal_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/modal_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/modal_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/modal_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/modal_engine.h **** // 
  12:eurorack/plaits/dsp/engine/modal_engine.h **** // The above copyright notice and this permission notice shall be included in
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 37


  13:eurorack/plaits/dsp/engine/modal_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/modal_engine.h **** // 
  15:eurorack/plaits/dsp/engine/modal_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/modal_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/modal_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/modal_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/modal_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/modal_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/modal_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/modal_engine.h **** // 
  23:eurorack/plaits/dsp/engine/modal_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/modal_engine.h **** //
  25:eurorack/plaits/dsp/engine/modal_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/modal_engine.h **** //
  27:eurorack/plaits/dsp/engine/modal_engine.h **** // One voice of modal synthesis.
  28:eurorack/plaits/dsp/engine/modal_engine.h **** 
  29:eurorack/plaits/dsp/engine/modal_engine.h **** #ifndef PLAITS_DSP_ENGINE_MODAL_ENGINE_H_
  30:eurorack/plaits/dsp/engine/modal_engine.h **** #define PLAITS_DSP_ENGINE_MODAL_ENGINE_H_
  31:eurorack/plaits/dsp/engine/modal_engine.h **** 
  32:eurorack/plaits/dsp/engine/modal_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/modal_engine.h **** #include "plaits/dsp/physical_modelling/modal_voice.h"
  34:eurorack/plaits/dsp/engine/modal_engine.h **** 
  35:eurorack/plaits/dsp/engine/modal_engine.h **** namespace plaits {
  36:eurorack/plaits/dsp/engine/modal_engine.h **** 
  37:eurorack/plaits/dsp/engine/modal_engine.h **** class ModalEngine : public Engine {
  38:eurorack/plaits/dsp/engine/modal_engine.h ****  public:
  39:eurorack/plaits/dsp/engine/modal_engine.h ****   ModalEngine() { }
 557              		.loc 20 39 3 is_stmt 1 view .LVU153
 558              	.LBB1557:
 559              	.LBB1558:
 560              	.LBI1558:
 561              		.loc 6 80 3 view .LVU154
 562              		.loc 6 80 3 is_stmt 0 view .LVU155
 563              	.LBE1558:
 564              		.loc 20 39 17 view .LVU156
 565 002e 3749     		ldr	r1, .L24+24
 566 0030 C3F85415 		str	r1, [r3, #1364]
 567              	.LVL25:
 568              	.LBB1559:
 569              	.LBI1559:
 570              		.file 21 "eurorack/plaits/dsp/physical_modelling/modal_voice.h"
   1:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** //
   3:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** //
   5:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // 
  12:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // 
  15:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 38


  17:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // 
  23:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** //
  25:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** //
  27:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // Simple modal synthesis voice with a mallet exciter:
  28:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // click -> LPF -> resonator.
  29:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // 
  30:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // The click is replaced by continuous white noise when the trigger input
  31:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // of the module is not patched.
  32:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** 
  33:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** #ifndef PLAITS_DSP_PHYSICAL_MODELLING_MODAL_VOICE_H_
  34:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** #define PLAITS_DSP_PHYSICAL_MODELLING_MODAL_VOICE_H_
  35:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** 
  36:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** #include "plaits/dsp/physical_modelling/resonator.h"
  37:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** 
  38:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** namespace plaits {
  39:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** 
  40:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** class ModalVoice {
  41:eurorack/plaits/dsp/physical_modelling/modal_voice.h ****  public:
  42:eurorack/plaits/dsp/physical_modelling/modal_voice.h ****   ModalVoice() { }
 571              		.loc 21 42 3 is_stmt 1 view .LVU157
 572              	.LBB1560:
 573              	.LBI1560:
 574              		.file 22 "eurorack/plaits/dsp/physical_modelling/resonator.h"
   1:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
   3:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
   5:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/physical_modelling/resonator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/physical_modelling/resonator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/physical_modelling/resonator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/physical_modelling/resonator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/physical_modelling/resonator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/physical_modelling/resonator.h **** // 
  12:eurorack/plaits/dsp/physical_modelling/resonator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/physical_modelling/resonator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/physical_modelling/resonator.h **** // 
  15:eurorack/plaits/dsp/physical_modelling/resonator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/physical_modelling/resonator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/physical_modelling/resonator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/physical_modelling/resonator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/physical_modelling/resonator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/physical_modelling/resonator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/physical_modelling/resonator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/physical_modelling/resonator.h **** // 
  23:eurorack/plaits/dsp/physical_modelling/resonator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
  25:eurorack/plaits/dsp/physical_modelling/resonator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
  27:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Resonator, taken from Rings' code but with fixed position.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 39


  28:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  29:eurorack/plaits/dsp/physical_modelling/resonator.h **** #ifndef PLAITS_DSP_PHYSICAL_MODELLING_RESONATOR_H_
  30:eurorack/plaits/dsp/physical_modelling/resonator.h **** #define PLAITS_DSP_PHYSICAL_MODELLING_RESONATOR_H_
  31:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  32:eurorack/plaits/dsp/physical_modelling/resonator.h **** #include "stmlib/dsp/filter.h"
  33:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  34:eurorack/plaits/dsp/physical_modelling/resonator.h **** namespace plaits {
  35:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  36:eurorack/plaits/dsp/physical_modelling/resonator.h **** const int kMaxNumModes = 24;
  37:eurorack/plaits/dsp/physical_modelling/resonator.h **** const int kModeBatchSize = 4;
  38:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  39:eurorack/plaits/dsp/physical_modelling/resonator.h **** // We render 4 modes simultaneously since there are enough registers to hold
  40:eurorack/plaits/dsp/physical_modelling/resonator.h **** // all state variables.
  41:eurorack/plaits/dsp/physical_modelling/resonator.h **** template<int batch_size>
  42:eurorack/plaits/dsp/physical_modelling/resonator.h **** class ResonatorSvf {
  43:eurorack/plaits/dsp/physical_modelling/resonator.h ****  public:
  44:eurorack/plaits/dsp/physical_modelling/resonator.h ****   ResonatorSvf() { }
 575              		.loc 22 44 3 view .LVU158
 576              		.loc 22 44 3 is_stmt 0 view .LVU159
 577              	.LBE1560:
 578              	.LBB1561:
 579              	.LBI1561:
  45:eurorack/plaits/dsp/physical_modelling/resonator.h ****   ~ResonatorSvf() { }
  46:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
  47:eurorack/plaits/dsp/physical_modelling/resonator.h ****   void Init() {
  48:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
  49:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1_[i] = state_2_[i] = 0.0f;
  50:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  51:eurorack/plaits/dsp/physical_modelling/resonator.h ****   }
  52:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
  53:eurorack/plaits/dsp/physical_modelling/resonator.h ****   template<stmlib::FilterMode mode, bool add>
  54:eurorack/plaits/dsp/physical_modelling/resonator.h ****   void Process(
  55:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* f,
  56:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* q,
  57:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* gain,
  58:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* in,
  59:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float* out,
  60:eurorack/plaits/dsp/physical_modelling/resonator.h ****       size_t size) {
  61:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float g[batch_size];
  62:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float r[batch_size];
  63:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float r_plus_g[batch_size];
  64:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float h[batch_size];
  65:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float state_1[batch_size];
  66:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float state_2[batch_size];
  67:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float gains[batch_size];
  68:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
  69:eurorack/plaits/dsp/physical_modelling/resonator.h ****       g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
  70:eurorack/plaits/dsp/physical_modelling/resonator.h ****       r[i] = 1.0f / q[i];
  71:eurorack/plaits/dsp/physical_modelling/resonator.h ****       h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
  72:eurorack/plaits/dsp/physical_modelling/resonator.h ****       r_plus_g[i] = r[i] + g[i];
  73:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1[i] = state_1_[i];
  74:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_2[i] = state_2_[i];
  75:eurorack/plaits/dsp/physical_modelling/resonator.h ****       gains[i] = gain[i];
  76:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  77:eurorack/plaits/dsp/physical_modelling/resonator.h ****     
  78:eurorack/plaits/dsp/physical_modelling/resonator.h ****     while (size--) {
  79:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float s_in = *in++;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 40


  80:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float s_out = 0.0f;
  81:eurorack/plaits/dsp/physical_modelling/resonator.h ****       for (int i = 0; i < batch_size; ++i) {
  82:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
  83:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float bp = g[i] * hp + state_1[i];
  84:eurorack/plaits/dsp/physical_modelling/resonator.h ****         state_1[i] = g[i] * hp + bp;
  85:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float lp = g[i] * bp + state_2[i];
  86:eurorack/plaits/dsp/physical_modelling/resonator.h ****         state_2[i] = g[i] * bp + lp;
  87:eurorack/plaits/dsp/physical_modelling/resonator.h ****         s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
  88:eurorack/plaits/dsp/physical_modelling/resonator.h ****       }
  89:eurorack/plaits/dsp/physical_modelling/resonator.h ****       if (add) {
  90:eurorack/plaits/dsp/physical_modelling/resonator.h ****         *out++ += s_out;
  91:eurorack/plaits/dsp/physical_modelling/resonator.h ****       } else {
  92:eurorack/plaits/dsp/physical_modelling/resonator.h ****         *out++ = s_out;
  93:eurorack/plaits/dsp/physical_modelling/resonator.h ****       }
  94:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  95:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
  96:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1_[i] = state_1[i];
  97:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_2_[i] = state_2[i];
  98:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  99:eurorack/plaits/dsp/physical_modelling/resonator.h ****   }
 100:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
 101:eurorack/plaits/dsp/physical_modelling/resonator.h ****  private:
 102:eurorack/plaits/dsp/physical_modelling/resonator.h ****   float state_1_[batch_size];
 103:eurorack/plaits/dsp/physical_modelling/resonator.h ****   float state_2_[batch_size];
 104:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
 105:eurorack/plaits/dsp/physical_modelling/resonator.h ****   DISALLOW_COPY_AND_ASSIGN(ResonatorSvf);
 106:eurorack/plaits/dsp/physical_modelling/resonator.h **** };
 107:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
 108:eurorack/plaits/dsp/physical_modelling/resonator.h **** class Resonator {
 109:eurorack/plaits/dsp/physical_modelling/resonator.h ****  public:
 110:eurorack/plaits/dsp/physical_modelling/resonator.h ****   Resonator() { }
 580              		.loc 22 110 3 is_stmt 1 view .LVU160
 581              	.LBE1561:
 582              	.LBE1559:
 583              	.LBE1557:
 584              	.LBE1556:
 585              	.LBE1638:
 586              	.LBE1649:
 587              		.loc 22 110 15 view .LVU161
 588              	.LBB1650:
 589              	.LBB1639:
 590              	.LBB1562:
 591              	.LBI1562:
 592              		.file 23 "eurorack/plaits/dsp/engine/noise_engine.h"
   1:eurorack/plaits/dsp/engine/noise_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/noise_engine.h **** //
   3:eurorack/plaits/dsp/engine/noise_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/noise_engine.h **** //
   5:eurorack/plaits/dsp/engine/noise_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/noise_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/noise_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/noise_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/noise_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/noise_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/noise_engine.h **** // 
  12:eurorack/plaits/dsp/engine/noise_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/noise_engine.h **** // all copies or substantial portions of the Software.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 41


  14:eurorack/plaits/dsp/engine/noise_engine.h **** // 
  15:eurorack/plaits/dsp/engine/noise_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/noise_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/noise_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/noise_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/noise_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/noise_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/noise_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/noise_engine.h **** // 
  23:eurorack/plaits/dsp/engine/noise_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/noise_engine.h **** //
  25:eurorack/plaits/dsp/engine/noise_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/noise_engine.h **** //
  27:eurorack/plaits/dsp/engine/noise_engine.h **** // Clocked noise processed by a multimode filter.
  28:eurorack/plaits/dsp/engine/noise_engine.h **** 
  29:eurorack/plaits/dsp/engine/noise_engine.h **** #ifndef PLAITS_DSP_ENGINE_NOISE_ENGINE_H_
  30:eurorack/plaits/dsp/engine/noise_engine.h **** #define PLAITS_DSP_ENGINE_NOISE_ENGINE_H_
  31:eurorack/plaits/dsp/engine/noise_engine.h **** 
  32:eurorack/plaits/dsp/engine/noise_engine.h **** #include "stmlib/dsp/filter.h"
  33:eurorack/plaits/dsp/engine/noise_engine.h **** 
  34:eurorack/plaits/dsp/engine/noise_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/noise_engine.h **** #include "plaits/dsp/noise/clocked_noise.h"
  36:eurorack/plaits/dsp/engine/noise_engine.h **** 
  37:eurorack/plaits/dsp/engine/noise_engine.h **** namespace plaits {
  38:eurorack/plaits/dsp/engine/noise_engine.h **** 
  39:eurorack/plaits/dsp/engine/noise_engine.h **** class NoiseEngine : public Engine {
  40:eurorack/plaits/dsp/engine/noise_engine.h ****  public:
  41:eurorack/plaits/dsp/engine/noise_engine.h ****   NoiseEngine() { }
 593              		.loc 23 41 3 view .LVU162
 594              	.LBB1563:
 595              	.LBB1564:
 596              	.LBI1564:
 597              		.loc 6 80 3 view .LVU163
 598              		.loc 6 80 3 is_stmt 0 view .LVU164
 599              	.LBE1564:
 600              		.loc 23 41 17 view .LVU165
 601 0034 3649     		ldr	r1, .L24+28
 602 0036 C3F89816 		str	r1, [r3, #1688]
 603              		.loc 23 41 17 is_stmt 1 view .LVU166
 604              	.LVL26:
 605              	.LBB1565:
 606              	.LBI1565:
 607              		.loc 9 179 3 view .LVU167
 608              		.loc 9 179 3 is_stmt 0 view .LVU168
 609              	.LBE1565:
 610              		.loc 23 41 17 is_stmt 1 view .LVU169
 611              		.loc 23 41 17 is_stmt 0 view .LVU170
 612              	.LBE1563:
 613              	.LBE1562:
 614              	.LBB1566:
 615              	.LBI1566:
 616              		.file 24 "eurorack/plaits/dsp/engine/particle_engine.h"
   1:eurorack/plaits/dsp/engine/particle_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/particle_engine.h **** //
   3:eurorack/plaits/dsp/engine/particle_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/particle_engine.h **** //
   5:eurorack/plaits/dsp/engine/particle_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 42


   6:eurorack/plaits/dsp/engine/particle_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/particle_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/particle_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/particle_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/particle_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/particle_engine.h **** // 
  12:eurorack/plaits/dsp/engine/particle_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/particle_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/particle_engine.h **** // 
  15:eurorack/plaits/dsp/engine/particle_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/particle_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/particle_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/particle_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/particle_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/particle_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/particle_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/particle_engine.h **** // 
  23:eurorack/plaits/dsp/engine/particle_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/particle_engine.h **** //
  25:eurorack/plaits/dsp/engine/particle_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/particle_engine.h **** //
  27:eurorack/plaits/dsp/engine/particle_engine.h **** // Filtered random pulses.
  28:eurorack/plaits/dsp/engine/particle_engine.h **** 
  29:eurorack/plaits/dsp/engine/particle_engine.h **** #ifndef PLAITS_DSP_ENGINE_PARTICLE_ENGINE_H_
  30:eurorack/plaits/dsp/engine/particle_engine.h **** #define PLAITS_DSP_ENGINE_PARTICLE_ENGINE_H_
  31:eurorack/plaits/dsp/engine/particle_engine.h **** 
  32:eurorack/plaits/dsp/engine/particle_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/particle_engine.h **** #include "plaits/dsp/fx/diffuser.h"
  34:eurorack/plaits/dsp/engine/particle_engine.h **** #include "plaits/dsp/noise/particle.h"
  35:eurorack/plaits/dsp/engine/particle_engine.h **** 
  36:eurorack/plaits/dsp/engine/particle_engine.h **** namespace plaits {
  37:eurorack/plaits/dsp/engine/particle_engine.h **** 
  38:eurorack/plaits/dsp/engine/particle_engine.h **** const int kNumParticles = 6;
  39:eurorack/plaits/dsp/engine/particle_engine.h **** 
  40:eurorack/plaits/dsp/engine/particle_engine.h **** class ParticleEngine : public Engine {
  41:eurorack/plaits/dsp/engine/particle_engine.h ****  public:
  42:eurorack/plaits/dsp/engine/particle_engine.h ****   ParticleEngine() { }
 617              		.loc 24 42 3 is_stmt 1 view .LVU171
 618              	.LBB1567:
 619              	.LBB1568:
 620              	.LBI1568:
 621              		.loc 6 80 3 view .LVU172
 622              		.loc 6 80 3 is_stmt 0 view .LVU173
 623              	.LBE1568:
 624              		.loc 24 42 20 view .LVU174
 625 003a 3649     		ldr	r1, .L24+32
 626 003c C3F81817 		str	r1, [r3, #1816]
 627              		.loc 24 42 20 is_stmt 1 view .LVU175
 628              	.LVL27:
 629              	.LBB1569:
 630              	.LBI1569:
 631              		.file 25 "eurorack/plaits/dsp/fx/diffuser.h"
   1:eurorack/plaits/dsp/fx/diffuser.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/fx/diffuser.h **** //
   3:eurorack/plaits/dsp/fx/diffuser.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/fx/diffuser.h **** //
   5:eurorack/plaits/dsp/fx/diffuser.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 43


   6:eurorack/plaits/dsp/fx/diffuser.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/fx/diffuser.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/fx/diffuser.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/fx/diffuser.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/fx/diffuser.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/fx/diffuser.h **** // 
  12:eurorack/plaits/dsp/fx/diffuser.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/fx/diffuser.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/fx/diffuser.h **** // 
  15:eurorack/plaits/dsp/fx/diffuser.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/fx/diffuser.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/fx/diffuser.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/fx/diffuser.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/fx/diffuser.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/fx/diffuser.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/fx/diffuser.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/fx/diffuser.h **** // 
  23:eurorack/plaits/dsp/fx/diffuser.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/fx/diffuser.h **** //
  25:eurorack/plaits/dsp/fx/diffuser.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/fx/diffuser.h **** //
  27:eurorack/plaits/dsp/fx/diffuser.h **** // Granular diffuser.
  28:eurorack/plaits/dsp/fx/diffuser.h **** 
  29:eurorack/plaits/dsp/fx/diffuser.h **** #ifndef PLAITS_DSP_FX_DIFFUSER_H_
  30:eurorack/plaits/dsp/fx/diffuser.h **** #define PLAITS_DSP_FX_DIFFUSER_H_
  31:eurorack/plaits/dsp/fx/diffuser.h **** 
  32:eurorack/plaits/dsp/fx/diffuser.h **** #include "stmlib/stmlib.h"
  33:eurorack/plaits/dsp/fx/diffuser.h **** 
  34:eurorack/plaits/dsp/fx/diffuser.h **** #include "plaits/dsp/fx/fx_engine.h"
  35:eurorack/plaits/dsp/fx/diffuser.h **** 
  36:eurorack/plaits/dsp/fx/diffuser.h **** namespace plaits {
  37:eurorack/plaits/dsp/fx/diffuser.h **** 
  38:eurorack/plaits/dsp/fx/diffuser.h **** class Diffuser {
  39:eurorack/plaits/dsp/fx/diffuser.h ****  public:
  40:eurorack/plaits/dsp/fx/diffuser.h ****   Diffuser() { }
 632              		.loc 25 40 3 view .LVU176
 633              	.LBB1570:
 634              	.LBI1570:
 635              		.file 26 "eurorack/plaits/dsp/fx/fx_engine.h"
   1:eurorack/plaits/dsp/fx/fx_engine.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/plaits/dsp/fx/fx_engine.h **** //
   3:eurorack/plaits/dsp/fx/fx_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/fx/fx_engine.h **** //
   5:eurorack/plaits/dsp/fx/fx_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/fx/fx_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/fx/fx_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/fx/fx_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/fx/fx_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/fx/fx_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/fx/fx_engine.h **** // 
  12:eurorack/plaits/dsp/fx/fx_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/fx/fx_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/fx/fx_engine.h **** // 
  15:eurorack/plaits/dsp/fx/fx_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/fx/fx_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/fx/fx_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/fx/fx_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 44


  19:eurorack/plaits/dsp/fx/fx_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/fx/fx_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/fx/fx_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/fx/fx_engine.h **** // 
  23:eurorack/plaits/dsp/fx/fx_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/fx/fx_engine.h **** //
  25:eurorack/plaits/dsp/fx/fx_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/fx/fx_engine.h **** //
  27:eurorack/plaits/dsp/fx/fx_engine.h **** // Base class for building reverbs.
  28:eurorack/plaits/dsp/fx/fx_engine.h **** 
  29:eurorack/plaits/dsp/fx/fx_engine.h **** #ifndef PLAITS_DSP_FX_FX_ENGINE_H_
  30:eurorack/plaits/dsp/fx/fx_engine.h **** #define PLAITS_DSP_FX_FX_ENGINE_H_
  31:eurorack/plaits/dsp/fx/fx_engine.h **** 
  32:eurorack/plaits/dsp/fx/fx_engine.h **** #include <algorithm>
  33:eurorack/plaits/dsp/fx/fx_engine.h **** 
  34:eurorack/plaits/dsp/fx/fx_engine.h **** #include "stmlib/stmlib.h"
  35:eurorack/plaits/dsp/fx/fx_engine.h **** 
  36:eurorack/plaits/dsp/fx/fx_engine.h **** #include "stmlib/dsp/dsp.h"
  37:eurorack/plaits/dsp/fx/fx_engine.h **** #include "stmlib/dsp/cosine_oscillator.h"
  38:eurorack/plaits/dsp/fx/fx_engine.h **** 
  39:eurorack/plaits/dsp/fx/fx_engine.h **** namespace plaits {
  40:eurorack/plaits/dsp/fx/fx_engine.h **** 
  41:eurorack/plaits/dsp/fx/fx_engine.h **** #define TAIL , -1
  42:eurorack/plaits/dsp/fx/fx_engine.h **** 
  43:eurorack/plaits/dsp/fx/fx_engine.h **** enum Format {
  44:eurorack/plaits/dsp/fx/fx_engine.h ****   FORMAT_12_BIT,
  45:eurorack/plaits/dsp/fx/fx_engine.h ****   FORMAT_16_BIT,
  46:eurorack/plaits/dsp/fx/fx_engine.h ****   FORMAT_32_BIT
  47:eurorack/plaits/dsp/fx/fx_engine.h **** };
  48:eurorack/plaits/dsp/fx/fx_engine.h **** 
  49:eurorack/plaits/dsp/fx/fx_engine.h **** enum LFOIndex {
  50:eurorack/plaits/dsp/fx/fx_engine.h ****   LFO_1,
  51:eurorack/plaits/dsp/fx/fx_engine.h ****   LFO_2
  52:eurorack/plaits/dsp/fx/fx_engine.h **** };
  53:eurorack/plaits/dsp/fx/fx_engine.h **** 
  54:eurorack/plaits/dsp/fx/fx_engine.h **** template<Format format>
  55:eurorack/plaits/dsp/fx/fx_engine.h **** struct DataType { };
  56:eurorack/plaits/dsp/fx/fx_engine.h **** 
  57:eurorack/plaits/dsp/fx/fx_engine.h **** template<>
  58:eurorack/plaits/dsp/fx/fx_engine.h **** struct DataType<FORMAT_12_BIT> {
  59:eurorack/plaits/dsp/fx/fx_engine.h ****   typedef uint16_t T;
  60:eurorack/plaits/dsp/fx/fx_engine.h ****   
  61:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline float Decompress(T value) {
  62:eurorack/plaits/dsp/fx/fx_engine.h ****     return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
  63:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  64:eurorack/plaits/dsp/fx/fx_engine.h ****   
  65:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline T Compress(float value) {
  66:eurorack/plaits/dsp/fx/fx_engine.h ****     return static_cast<uint16_t>(
  67:eurorack/plaits/dsp/fx/fx_engine.h ****         stmlib::Clip16(static_cast<int32_t>(value * 4096.0f)));
  68:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  69:eurorack/plaits/dsp/fx/fx_engine.h **** };
  70:eurorack/plaits/dsp/fx/fx_engine.h **** 
  71:eurorack/plaits/dsp/fx/fx_engine.h **** template<>
  72:eurorack/plaits/dsp/fx/fx_engine.h **** struct DataType<FORMAT_16_BIT> {
  73:eurorack/plaits/dsp/fx/fx_engine.h ****   typedef uint16_t T;
  74:eurorack/plaits/dsp/fx/fx_engine.h ****   
  75:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline float Decompress(T value) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 45


  76:eurorack/plaits/dsp/fx/fx_engine.h ****     return static_cast<float>(static_cast<int16_t>(value)) / 32768.0f;
  77:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  78:eurorack/plaits/dsp/fx/fx_engine.h ****   
  79:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline T Compress(float value) {
  80:eurorack/plaits/dsp/fx/fx_engine.h ****     return static_cast<uint16_t>(
  81:eurorack/plaits/dsp/fx/fx_engine.h ****         stmlib::Clip16(static_cast<int32_t>(value * 32768.0f)));
  82:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  83:eurorack/plaits/dsp/fx/fx_engine.h **** };
  84:eurorack/plaits/dsp/fx/fx_engine.h **** 
  85:eurorack/plaits/dsp/fx/fx_engine.h **** template<>
  86:eurorack/plaits/dsp/fx/fx_engine.h **** struct DataType<FORMAT_32_BIT> {
  87:eurorack/plaits/dsp/fx/fx_engine.h ****   typedef float T;
  88:eurorack/plaits/dsp/fx/fx_engine.h ****   
  89:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline float Decompress(T value) {
  90:eurorack/plaits/dsp/fx/fx_engine.h ****     return value;;
  91:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  92:eurorack/plaits/dsp/fx/fx_engine.h ****   
  93:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline T Compress(float value) {
  94:eurorack/plaits/dsp/fx/fx_engine.h ****     return value;
  95:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  96:eurorack/plaits/dsp/fx/fx_engine.h **** };
  97:eurorack/plaits/dsp/fx/fx_engine.h **** 
  98:eurorack/plaits/dsp/fx/fx_engine.h **** template<
  99:eurorack/plaits/dsp/fx/fx_engine.h ****     size_t size,
 100:eurorack/plaits/dsp/fx/fx_engine.h ****     Format format = FORMAT_12_BIT>
 101:eurorack/plaits/dsp/fx/fx_engine.h **** class FxEngine {
 102:eurorack/plaits/dsp/fx/fx_engine.h ****  public:
 103:eurorack/plaits/dsp/fx/fx_engine.h ****   typedef typename DataType<format>::T T;
 104:eurorack/plaits/dsp/fx/fx_engine.h ****   FxEngine() { }
 636              		.loc 26 104 3 view .LVU177
 637              	.LBE1570:
 638              	.LBE1569:
 639              	.LBE1567:
 640              	.LBE1566:
 641              	.LBE1639:
 642              	.LBE1650:
 643              		.loc 26 104 14 view .LVU178
 644              	.LBB1651:
 645              	.LBB1640:
 646              	.LBB1573:
 647              	.LBB1572:
 648              	.LBB1571:
 649              	.LBI1571:
 650              		.loc 9 179 3 view .LVU179
 651              		.loc 9 179 3 is_stmt 0 view .LVU180
 652              	.LBE1571:
 653              	.LBE1572:
 654              	.LBE1573:
 655              	.LBB1574:
 656              	.LBI1574:
 657              		.file 27 "eurorack/plaits/dsp/engine/snare_drum_engine.h"
   1:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/snare_drum_engine.h **** //
   3:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/snare_drum_engine.h **** //
   5:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // of this software and associated documentation files (the "Software"), to deal
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 46


   7:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // 
  12:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // 
  15:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // 
  23:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/snare_drum_engine.h **** //
  25:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/snare_drum_engine.h **** //
  27:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // 808 and synthetic snare drum generators.
  28:eurorack/plaits/dsp/engine/snare_drum_engine.h **** 
  29:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #ifndef PLAITS_DSP_ENGINE_SNARE_DRUM_ENGINE_H_
  30:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #define PLAITS_DSP_ENGINE_SNARE_DRUM_ENGINE_H_
  31:eurorack/plaits/dsp/engine/snare_drum_engine.h **** 
  32:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #include "plaits/dsp/drums/analog_snare_drum.h"
  33:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #include "plaits/dsp/drums/synthetic_snare_drum.h"
  34:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/snare_drum_engine.h **** 
  36:eurorack/plaits/dsp/engine/snare_drum_engine.h **** namespace plaits {
  37:eurorack/plaits/dsp/engine/snare_drum_engine.h ****   
  38:eurorack/plaits/dsp/engine/snare_drum_engine.h **** class SnareDrumEngine : public Engine {
  39:eurorack/plaits/dsp/engine/snare_drum_engine.h ****  public:
  40:eurorack/plaits/dsp/engine/snare_drum_engine.h ****   SnareDrumEngine() { }
 658              		.loc 27 40 3 is_stmt 1 view .LVU181
 659              	.LBB1575:
 660              	.LBB1576:
 661              	.LBI1576:
 662              		.loc 6 80 3 view .LVU182
 663              		.loc 6 80 3 is_stmt 0 view .LVU183
 664              	.LBE1576:
 665              		.loc 27 40 21 view .LVU184
 666 0040 3549     		ldr	r1, .L24+36
 667 0042 C3F8F817 		str	r1, [r3, #2040]
 668              	.LVL28:
 669              	.LBB1577:
 670              	.LBI1577:
 671              		.file 28 "eurorack/plaits/dsp/drums/analog_snare_drum.h"
   1:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/analog_snare_drum.h **** //
   3:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/analog_snare_drum.h **** //
   5:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // copies of the Software, and to permit persons to whom the Software is
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 47


  10:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // 
  12:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // 
  15:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // 
  23:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/analog_snare_drum.h **** //
  25:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/analog_snare_drum.h **** //
  27:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // 808 snare drum model, revisited.
  28:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  29:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #ifndef PLAITS_DSP_DRUMS_ANALOG_SNARE_DRUM_H_
  30:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #define PLAITS_DSP_DRUMS_ANALOG_SNARE_DRUM_H_
  31:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  32:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include <algorithm>
  33:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  34:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/dsp/filter.h"
  36:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/dsp/parameter_interpolator.h"
  37:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/dsp/units.h"
  38:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/utils/random.h"
  39:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  40:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "plaits/dsp/dsp.h"
  41:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "plaits/dsp/oscillator/sine_oscillator.h"
  42:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  43:eurorack/plaits/dsp/drums/analog_snare_drum.h **** namespace plaits {
  44:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  45:eurorack/plaits/dsp/drums/analog_snare_drum.h **** class AnalogSnareDrum {
  46:eurorack/plaits/dsp/drums/analog_snare_drum.h ****  public:
  47:eurorack/plaits/dsp/drums/analog_snare_drum.h ****   AnalogSnareDrum() { }
 672              		.loc 28 47 3 is_stmt 1 view .LVU185
 673              	.LBE1577:
 674              	.LBE1575:
 675              	.LBE1574:
 676              	.LBE1640:
 677              	.LBE1651:
 678              		.loc 28 47 21 view .LVU186
 679              	.LBB1652:
 680              	.LBB1641:
 681              	.LBB1586:
 682              	.LBB1584:
 683              	.LBB1579:
 684              	.LBB1578:
 685              	.LBI1578:
 686              		.loc 9 179 3 view .LVU187
 687              		.loc 9 179 3 is_stmt 0 view .LVU188
 688              	.LBE1578:
 689              	.LBE1579:
 690              	.LBE1584:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 48


 691              	.LBE1586:
 692              	.LBE1641:
 693              	.LBE1652:
 694              		.loc 28 47 21 is_stmt 1 view .LVU189
 695              	.LBB1653:
 696              	.LBB1642:
 697              	.LBB1587:
 698              	.LBB1585:
 699              	.LBB1580:
 700              	.LBI1580:
 701              		.file 29 "eurorack/plaits/dsp/drums/synthetic_snare_drum.h"
   1:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** //
   3:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** //
   5:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // 
  12:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // 
  15:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // 
  23:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** //
  25:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** //
  27:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Naive snare drum model (two modulated oscillators + filtered noise).
  28:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Uses a few magic numbers taken from the 909 schematics:
  29:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // - Ratio between the two modes of the drum set to 1.47.
  30:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // - Funky coupling between the two modes.
  31:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // - Noise coloration filters and envelope shapes for the snare.
  32:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  33:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #ifndef PLAITS_DSP_DRUMS_SYNTHETIC_SNARE_DRUM_H_
  34:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #define PLAITS_DSP_DRUMS_SYNTHETIC_SNARE_DRUM_H_
  35:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  36:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include <algorithm>
  37:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  38:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include "stmlib/dsp/dsp.h"
  39:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include "stmlib/dsp/parameter_interpolator.h"
  40:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include "stmlib/dsp/units.h"
  41:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  42:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include "plaits/dsp/dsp.h"
  43:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  44:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** namespace plaits {
  45:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  46:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** class SyntheticSnareDrum {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 49


  47:eurorack/plaits/dsp/drums/synthetic_snare_drum.h ****  public:
  48:eurorack/plaits/dsp/drums/synthetic_snare_drum.h ****   SyntheticSnareDrum() { }
 702              		.loc 29 48 3 view .LVU190
 703              	.LBB1581:
 704              	.LBI1581:
  94:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
 705              		.loc 9 94 3 view .LVU191
  94:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
 706              		.loc 9 94 3 is_stmt 0 view .LVU192
 707              	.LBE1581:
 708              	.LBB1582:
 709              	.LBI1582:
  94:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
 710              		.loc 9 94 3 is_stmt 1 view .LVU193
  94:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
 711              		.loc 9 94 3 is_stmt 0 view .LVU194
 712              	.LBE1582:
 713              	.LBB1583:
 714              	.LBI1583:
 715              		.loc 9 179 3 is_stmt 1 view .LVU195
 716              		.loc 9 179 3 is_stmt 0 view .LVU196
 717              	.LBE1583:
 718              	.LBE1580:
 719              	.LBE1585:
 720              	.LBE1587:
 721              	.LBB1588:
 722              	.LBI1588:
 723              		.file 30 "eurorack/plaits/dsp/engine/speech_engine.h"
   1:eurorack/plaits/dsp/engine/speech_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/speech_engine.h **** //
   3:eurorack/plaits/dsp/engine/speech_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/speech_engine.h **** //
   5:eurorack/plaits/dsp/engine/speech_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/speech_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/speech_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/speech_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/speech_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/speech_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/speech_engine.h **** // 
  12:eurorack/plaits/dsp/engine/speech_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/speech_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/speech_engine.h **** // 
  15:eurorack/plaits/dsp/engine/speech_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/speech_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/speech_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/speech_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/speech_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/speech_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/speech_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/speech_engine.h **** // 
  23:eurorack/plaits/dsp/engine/speech_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/speech_engine.h **** //
  25:eurorack/plaits/dsp/engine/speech_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/speech_engine.h **** //
  27:eurorack/plaits/dsp/engine/speech_engine.h **** // Various flavours of speech synthesis.
  28:eurorack/plaits/dsp/engine/speech_engine.h **** 
  29:eurorack/plaits/dsp/engine/speech_engine.h **** #ifndef PLAITS_DSP_ENGINE_SPEECH_ENGINE_H_
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 50


  30:eurorack/plaits/dsp/engine/speech_engine.h **** #define PLAITS_DSP_ENGINE_SPEECH_ENGINE_H_
  31:eurorack/plaits/dsp/engine/speech_engine.h **** 
  32:eurorack/plaits/dsp/engine/speech_engine.h **** #include "stmlib/dsp/hysteresis_quantizer.h"
  33:eurorack/plaits/dsp/engine/speech_engine.h **** 
  34:eurorack/plaits/dsp/engine/speech_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/speech_engine.h **** #include "plaits/dsp/speech/lpc_speech_synth_controller.h"
  36:eurorack/plaits/dsp/engine/speech_engine.h **** #include "plaits/dsp/speech/naive_speech_synth.h"
  37:eurorack/plaits/dsp/engine/speech_engine.h **** #include "plaits/dsp/speech/sam_speech_synth.h"
  38:eurorack/plaits/dsp/engine/speech_engine.h **** 
  39:eurorack/plaits/dsp/engine/speech_engine.h **** namespace plaits {
  40:eurorack/plaits/dsp/engine/speech_engine.h **** 
  41:eurorack/plaits/dsp/engine/speech_engine.h **** class SpeechEngine : public Engine {
  42:eurorack/plaits/dsp/engine/speech_engine.h ****  public:
  43:eurorack/plaits/dsp/engine/speech_engine.h ****   SpeechEngine() { }
 724              		.loc 30 43 3 is_stmt 1 view .LVU197
 725              	.LBB1589:
 726              	.LBB1590:
 727              	.LBI1590:
 728              		.loc 6 80 3 view .LVU198
 729              		.loc 6 80 3 is_stmt 0 view .LVU199
 730              	.LBE1590:
 731              		.loc 30 43 18 view .LVU200
 732 0046 3549     		ldr	r1, .L24+40
 733 0048 C3F81C19 		str	r1, [r3, #2332]
 734              	.LVL29:
 735              	.LBB1591:
 736              	.LBI1591:
 737              		.loc 14 39 3 is_stmt 1 view .LVU201
 738              		.loc 14 39 3 is_stmt 0 view .LVU202
 739              	.LBE1591:
 740              	.LBB1592:
 741              	.LBI1592:
 742              		.file 31 "eurorack/plaits/dsp/speech/naive_speech_synth.h"
   1:eurorack/plaits/dsp/speech/naive_speech_synth.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/speech/naive_speech_synth.h **** //
   3:eurorack/plaits/dsp/speech/naive_speech_synth.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/speech/naive_speech_synth.h **** //
   5:eurorack/plaits/dsp/speech/naive_speech_synth.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/speech/naive_speech_synth.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/speech/naive_speech_synth.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/speech/naive_speech_synth.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/speech/naive_speech_synth.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/speech/naive_speech_synth.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/speech/naive_speech_synth.h **** // 
  12:eurorack/plaits/dsp/speech/naive_speech_synth.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/speech/naive_speech_synth.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/speech/naive_speech_synth.h **** // 
  15:eurorack/plaits/dsp/speech/naive_speech_synth.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/speech/naive_speech_synth.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/speech/naive_speech_synth.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/speech/naive_speech_synth.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/speech/naive_speech_synth.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/speech/naive_speech_synth.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/speech/naive_speech_synth.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/speech/naive_speech_synth.h **** // 
  23:eurorack/plaits/dsp/speech/naive_speech_synth.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/speech/naive_speech_synth.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 51


  25:eurorack/plaits/dsp/speech/naive_speech_synth.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/speech/naive_speech_synth.h **** //
  27:eurorack/plaits/dsp/speech/naive_speech_synth.h **** // Naive speech synth - made from "synthesizer" building blocks (pulse
  28:eurorack/plaits/dsp/speech/naive_speech_synth.h **** // oscillator and zero-delay SVF).
  29:eurorack/plaits/dsp/speech/naive_speech_synth.h **** 
  30:eurorack/plaits/dsp/speech/naive_speech_synth.h **** #ifndef PLAITS_DSP_SPEECH_NAIVE_SPEECH_SYNTH_H_
  31:eurorack/plaits/dsp/speech/naive_speech_synth.h **** #define PLAITS_DSP_SPEECH_NAIVE_SPEECH_SYNTH_H_
  32:eurorack/plaits/dsp/speech/naive_speech_synth.h **** 
  33:eurorack/plaits/dsp/speech/naive_speech_synth.h **** #include "stmlib/dsp/filter.h"
  34:eurorack/plaits/dsp/speech/naive_speech_synth.h **** 
  35:eurorack/plaits/dsp/speech/naive_speech_synth.h **** #include "plaits/dsp/dsp.h"
  36:eurorack/plaits/dsp/speech/naive_speech_synth.h **** #include "plaits/dsp/oscillator/oscillator.h"
  37:eurorack/plaits/dsp/speech/naive_speech_synth.h **** 
  38:eurorack/plaits/dsp/speech/naive_speech_synth.h **** namespace plaits {
  39:eurorack/plaits/dsp/speech/naive_speech_synth.h **** 
  40:eurorack/plaits/dsp/speech/naive_speech_synth.h **** const int kNaiveSpeechNumFormants = 5;
  41:eurorack/plaits/dsp/speech/naive_speech_synth.h **** const int kNaiveSpeechNumPhonemes = 5;
  42:eurorack/plaits/dsp/speech/naive_speech_synth.h **** const int kNaiveSpeechNumRegisters = 5;
  43:eurorack/plaits/dsp/speech/naive_speech_synth.h **** 
  44:eurorack/plaits/dsp/speech/naive_speech_synth.h **** class NaiveSpeechSynth {
  45:eurorack/plaits/dsp/speech/naive_speech_synth.h ****  public:
  46:eurorack/plaits/dsp/speech/naive_speech_synth.h ****   NaiveSpeechSynth() { }
 743              		.loc 31 46 3 is_stmt 1 view .LVU203
 744              	.LBB1593:
 745              	.LBI1593:
 746              		.file 32 "eurorack/plaits/dsp/oscillator/oscillator.h"
   1:eurorack/plaits/dsp/oscillator/oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/oscillator.h **** // Single waveform oscillator. Can optionally do audio-rate linear FM, with
  28:eurorack/plaits/dsp/oscillator/oscillator.h **** // through-zero capabilities (negative frequencies).
  29:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  30:eurorack/plaits/dsp/oscillator/oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_OSCILLATOR_H_
  31:eurorack/plaits/dsp/oscillator/oscillator.h **** #define PLAITS_DSP_OSCILLATOR_OSCILLATOR_H_
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 52


  32:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  33:eurorack/plaits/dsp/oscillator/oscillator.h **** #include "stmlib/dsp/dsp.h"
  34:eurorack/plaits/dsp/oscillator/oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  35:eurorack/plaits/dsp/oscillator/oscillator.h **** #include "stmlib/dsp/polyblep.h"
  36:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  37:eurorack/plaits/dsp/oscillator/oscillator.h **** namespace plaits {
  38:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  39:eurorack/plaits/dsp/oscillator/oscillator.h **** enum OscillatorShape {
  40:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_IMPULSE_TRAIN,
  41:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SAW,
  42:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_TRIANGLE,
  43:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SLOPE,
  44:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SQUARE,
  45:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SQUARE_BRIGHT,
  46:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SQUARE_DARK,
  47:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SQUARE_TRIANGLE
  48:eurorack/plaits/dsp/oscillator/oscillator.h **** };
  49:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  50:eurorack/plaits/dsp/oscillator/oscillator.h **** const float kMaxFrequency = 0.25f;
  51:eurorack/plaits/dsp/oscillator/oscillator.h **** const float kMinFrequency = 0.000001f;
  52:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  53:eurorack/plaits/dsp/oscillator/oscillator.h **** class Oscillator {
  54:eurorack/plaits/dsp/oscillator/oscillator.h ****  public:
  55:eurorack/plaits/dsp/oscillator/oscillator.h ****   Oscillator() { }
 747              		.loc 32 55 3 view .LVU204
 748              		.loc 32 55 3 is_stmt 0 view .LVU205
 749              	.LBE1593:
 750              	.LBE1592:
 751              	.LBE1589:
 752              	.LBE1588:
 753              	.LBE1642:
 754              	.LBE1653:
 755              		.loc 31 46 22 is_stmt 1 view .LVU206
 756              	.LBB1654:
 757              	.LBB1643:
 758              	.LBB1601:
 759              	.LBB1600:
 760              	.LBB1595:
 761              	.LBB1594:
 762              	.LBI1594:
 763              		.loc 9 179 3 view .LVU207
 764              		.loc 9 179 3 is_stmt 0 view .LVU208
 765              	.LBE1594:
 766              	.LBE1595:
 767              	.LBB1596:
 768              	.LBI1596:
 769              		.file 33 "eurorack/plaits/dsp/speech/sam_speech_synth.h"
   1:eurorack/plaits/dsp/speech/sam_speech_synth.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/speech/sam_speech_synth.h **** //
   3:eurorack/plaits/dsp/speech/sam_speech_synth.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/speech/sam_speech_synth.h **** //
   5:eurorack/plaits/dsp/speech/sam_speech_synth.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/speech/sam_speech_synth.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/speech/sam_speech_synth.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/speech/sam_speech_synth.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/speech/sam_speech_synth.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/speech/sam_speech_synth.h **** // furnished to do so, subject to the following conditions:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 53


  11:eurorack/plaits/dsp/speech/sam_speech_synth.h **** // 
  12:eurorack/plaits/dsp/speech/sam_speech_synth.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/speech/sam_speech_synth.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/speech/sam_speech_synth.h **** // 
  15:eurorack/plaits/dsp/speech/sam_speech_synth.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/speech/sam_speech_synth.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/speech/sam_speech_synth.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/speech/sam_speech_synth.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/speech/sam_speech_synth.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/speech/sam_speech_synth.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/speech/sam_speech_synth.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/speech/sam_speech_synth.h **** // 
  23:eurorack/plaits/dsp/speech/sam_speech_synth.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/speech/sam_speech_synth.h **** //
  25:eurorack/plaits/dsp/speech/sam_speech_synth.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/speech/sam_speech_synth.h **** //
  27:eurorack/plaits/dsp/speech/sam_speech_synth.h **** // SAM-inspired speech synth (as used in Shruthi/Ambika/Braids).
  28:eurorack/plaits/dsp/speech/sam_speech_synth.h **** 
  29:eurorack/plaits/dsp/speech/sam_speech_synth.h **** #ifndef PLAITS_DSP_SPEECH_SAM_SPEECH_SYNTH_H_
  30:eurorack/plaits/dsp/speech/sam_speech_synth.h **** #define PLAITS_DSP_SPEECH_SAM_SPEECH_SYNTH_H_
  31:eurorack/plaits/dsp/speech/sam_speech_synth.h **** 
  32:eurorack/plaits/dsp/speech/sam_speech_synth.h **** #include "plaits/dsp/dsp.h"
  33:eurorack/plaits/dsp/speech/sam_speech_synth.h **** 
  34:eurorack/plaits/dsp/speech/sam_speech_synth.h **** namespace plaits {
  35:eurorack/plaits/dsp/speech/sam_speech_synth.h ****   
  36:eurorack/plaits/dsp/speech/sam_speech_synth.h **** const int kSAMNumFormants = 3;
  37:eurorack/plaits/dsp/speech/sam_speech_synth.h **** const int kSAMNumVowels = 9;
  38:eurorack/plaits/dsp/speech/sam_speech_synth.h **** const int kSAMNumConsonants = 8;
  39:eurorack/plaits/dsp/speech/sam_speech_synth.h **** const int kSAMNumPhonemes = kSAMNumVowels + kSAMNumConsonants;
  40:eurorack/plaits/dsp/speech/sam_speech_synth.h **** 
  41:eurorack/plaits/dsp/speech/sam_speech_synth.h **** class SAMSpeechSynth {
  42:eurorack/plaits/dsp/speech/sam_speech_synth.h ****  public:
  43:eurorack/plaits/dsp/speech/sam_speech_synth.h ****   SAMSpeechSynth() { }
 770              		.loc 33 43 3 is_stmt 1 view .LVU209
 771              		.loc 33 43 3 is_stmt 0 view .LVU210
 772              	.LBE1596:
 773              	.LBB1597:
 774              	.LBI1597:
 775              		.file 34 "eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h"
   1:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** //
   3:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** //
   5:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** // 
  12:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** // 
  15:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 54


  19:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** // 
  23:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** //
  25:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** //
  27:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** // Feeds frames to the LPC10 speech synth.
  28:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** 
  29:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** #ifndef PLAITS_DSP_SPEECH_LPC_SPEECH_SYNTH_CONTROLLER_H_
  30:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** #define PLAITS_DSP_SPEECH_LPC_SPEECH_SYNTH_CONTROLLER_H_
  31:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** 
  32:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** #include "plaits/dsp/speech/lpc_speech_synth.h"
  33:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** 
  34:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** #include "stmlib/utils/buffer_allocator.h"
  35:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** 
  36:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** namespace plaits {
  37:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** 
  38:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** class BitStream {
  39:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****  public:
  40:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   BitStream() { }
  41:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   ~BitStream() { }
  42:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** 
  43:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   inline void Init(const uint8_t* p) {
  44:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****     p_ = p;
  45:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****     available_ = 0;
  46:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****     bits_ = 0;
  47:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   }
  48:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** 
  49:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   inline void Flush() {
  50:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****     while (available_) {
  51:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****       GetBits(1);
  52:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****     }
  53:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   }
  54:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** 
  55:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   inline uint8_t GetBits(int num_bits) {
  56:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****     int shift = num_bits;
  57:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****     if (num_bits > available_) {
  58:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****       bits_ <<= available_;
  59:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****       shift -= available_;
  60:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****       bits_ |= Reverse(*p_++);
  61:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****       available_ += 8;
  62:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****     }
  63:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****     bits_ <<= shift;
  64:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****     uint8_t result = bits_ >> 8;
  65:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****     bits_ &= 0xff;
  66:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****     available_ -= num_bits;
  67:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****     return result;
  68:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   }
  69:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** 
  70:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   inline const uint8_t* ptr() const { return p_; }
  71:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** 
  72:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****  private:
  73:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   inline uint8_t Reverse(uint8_t b) const {
  74:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****     b = (b >> 4) | (b << 4);
  75:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 55


  76:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
  77:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****     return b;
  78:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   }
  79:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** 
  80:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   const uint8_t* p_;
  81:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   int available_;
  82:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   uint16_t bits_;
  83:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** 
  84:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   DISALLOW_COPY_AND_ASSIGN(BitStream);
  85:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** };
  86:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** 
  87:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** const int kLPCSpeechSynthMaxWords = 32;
  88:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** const int kLPCSpeechSynthMaxFrames = 1024;
  89:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** const int kLPCSpeechSynthNumVowels = 5;
  90:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** const int kLPCSpeechSynthNumConsonants = 10;
  91:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** const int kLPCSpeechSynthNumPhonemes = \
  92:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****     kLPCSpeechSynthNumVowels + kLPCSpeechSynthNumConsonants;
  93:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** const float kLPCSpeechSynthFPS = 40.0f;
  94:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** 
  95:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** struct LPCSpeechSynthWordBankData {
  96:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   const uint8_t* data;
  97:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   size_t size;
  98:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** };
  99:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** 
 100:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** class LPCSpeechSynthWordBank {
 101:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****  public:
 102:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   LPCSpeechSynthWordBank() { }
 103:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   ~LPCSpeechSynthWordBank() { }
 104:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** 
 105:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   void Init(
 106:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****       const LPCSpeechSynthWordBankData* word_banks,
 107:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****       int num_banks,
 108:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****       stmlib::BufferAllocator* allocator);
 109:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   
 110:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   bool Load(int index);
 111:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   void Reset();
 112:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   
 113:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   inline int num_frames() const { return num_frames_; }
 114:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   inline const LPCSpeechSynth::Frame* frames() const { return frames_; }
 115:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   
 116:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   inline void GetWordBoundaries(float address, int* start, int* end) {
 117:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****     if (num_words_ == 0) {
 118:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****       *start = *end = -1;
 119:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****     } else {
 120:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****       int word = static_cast<int>(address * static_cast<float>(num_words_));
 121:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****       if (word >= num_words_) {
 122:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****         word = num_words_ - 1;
 123:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****       }
 124:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****       *start = word_boundaries_[word];
 125:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****       *end = word_boundaries_[word + 1] - 1;
 126:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****     }
 127:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   }
 128:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   
 129:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****  private:
 130:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   size_t LoadNextWord(const uint8_t* data);
 131:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   
 132:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   const LPCSpeechSynthWordBankData* word_banks_;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 56


 133:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   
 134:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   int num_banks_;
 135:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   int loaded_bank_;
 136:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   int num_frames_;
 137:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   int num_words_;
 138:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   int word_boundaries_[kLPCSpeechSynthMaxWords];
 139:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   
 140:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   LPCSpeechSynth::Frame* frames_;
 141:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   
 142:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   static uint8_t energy_lut_[16];
 143:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   static uint8_t period_lut_[64];
 144:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   static int16_t k0_lut_[32];
 145:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   static int16_t k1_lut_[32];
 146:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   static int8_t k2_lut_[16];
 147:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   static int8_t k3_lut_[16];
 148:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   static int8_t k4_lut_[16];
 149:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   static int8_t k5_lut_[16];
 150:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   static int8_t k6_lut_[16];
 151:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   static int8_t k7_lut_[8];
 152:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   static int8_t k8_lut_[8];
 153:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   static int8_t k9_lut_[8];
 154:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** };
 155:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** 
 156:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h **** class LPCSpeechSynthController {
 157:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****  public:
 158:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   LPCSpeechSynthController() { }
 776              		.loc 34 158 3 is_stmt 1 view .LVU211
 777              	.LBB1598:
 778              	.LBI1598:
 779              		.file 35 "eurorack/plaits/dsp/speech/lpc_speech_synth.h"
   1:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** //
   3:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** //
   5:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** // 
  12:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** // 
  15:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** // 
  23:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** //
  25:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** //
  27:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** // LPC10 speech synth.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 57


  28:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** 
  29:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** #ifndef PLAITS_DSP_SPEECH_LPC_SPEECH_SYNTH_H_
  30:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** #define PLAITS_DSP_SPEECH_LPC_SPEECH_SYNTH_H_
  31:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** 
  32:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** #include "stmlib/dsp/dsp.h"
  33:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** 
  34:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** #include "plaits/dsp/dsp.h"
  35:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** 
  36:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** namespace plaits {
  37:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** 
  38:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** const int kLPCOrder = 10;
  39:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** 
  40:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** const float kLPCSpeechSynthDefaultF0 = 100.0f;
  41:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** 
  42:eurorack/plaits/dsp/speech/lpc_speech_synth.h **** class LPCSpeechSynth {
  43:eurorack/plaits/dsp/speech/lpc_speech_synth.h ****  public:
  44:eurorack/plaits/dsp/speech/lpc_speech_synth.h ****   LPCSpeechSynth() { }
 780              		.loc 35 44 3 view .LVU212
 781              		.loc 35 44 3 is_stmt 0 view .LVU213
 782              	.LBE1598:
 783              	.LBE1597:
 784              	.LBB1599:
 785              	.LBI1599:
 102:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   ~LPCSpeechSynthWordBank() { }
 786              		.loc 34 102 3 is_stmt 1 view .LVU214
 102:eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h ****   ~LPCSpeechSynthWordBank() { }
 787              		.loc 34 102 3 is_stmt 0 view .LVU215
 788              	.LBE1599:
 789              	.LBE1600:
 790              	.LBE1601:
 791              	.LBB1602:
 792              	.LBI1602:
 793              		.file 36 "eurorack/plaits/dsp/engine/string_engine.h"
   1:eurorack/plaits/dsp/engine/string_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/string_engine.h **** //
   3:eurorack/plaits/dsp/engine/string_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/string_engine.h **** //
   5:eurorack/plaits/dsp/engine/string_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/string_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/string_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/string_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/string_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/string_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/string_engine.h **** // 
  12:eurorack/plaits/dsp/engine/string_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/string_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/string_engine.h **** // 
  15:eurorack/plaits/dsp/engine/string_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/string_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/string_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/string_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/string_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/string_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/string_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/string_engine.h **** // 
  23:eurorack/plaits/dsp/engine/string_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/string_engine.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 58


  25:eurorack/plaits/dsp/engine/string_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/string_engine.h **** //
  27:eurorack/plaits/dsp/engine/string_engine.h **** // Three voices of string synthesis.
  28:eurorack/plaits/dsp/engine/string_engine.h **** 
  29:eurorack/plaits/dsp/engine/string_engine.h **** #ifndef PLAITS_DSP_ENGINE_STRING_ENGINE_H_
  30:eurorack/plaits/dsp/engine/string_engine.h **** #define PLAITS_DSP_ENGINE_STRING_ENGINE_H_
  31:eurorack/plaits/dsp/engine/string_engine.h **** 
  32:eurorack/plaits/dsp/engine/string_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/string_engine.h **** #include "plaits/dsp/physical_modelling/string_voice.h"
  34:eurorack/plaits/dsp/engine/string_engine.h **** 
  35:eurorack/plaits/dsp/engine/string_engine.h **** namespace plaits {
  36:eurorack/plaits/dsp/engine/string_engine.h **** 
  37:eurorack/plaits/dsp/engine/string_engine.h **** const int kNumStrings = 3;
  38:eurorack/plaits/dsp/engine/string_engine.h **** 
  39:eurorack/plaits/dsp/engine/string_engine.h **** class StringEngine : public Engine {
  40:eurorack/plaits/dsp/engine/string_engine.h ****  public:
  41:eurorack/plaits/dsp/engine/string_engine.h ****   StringEngine() { }
 794              		.loc 36 41 3 is_stmt 1 view .LVU216
 795              	.LBB1603:
 796              	.LBB1604:
 797              	.LBI1604:
 798              		.loc 6 80 3 view .LVU217
 799              		.loc 6 80 3 is_stmt 0 view .LVU218
 800              	.LBE1604:
 801              		.loc 36 41 18 view .LVU219
 802 004c 3449     		ldr	r1, .L24+44
 803 004e C3F82C1B 		str	r1, [r3, #2860]
 804              		.loc 36 41 18 is_stmt 1 view .LVU220
 805              	.LVL30:
 806              	.LBB1605:
 807              	.LBI1605:
 808              		.file 37 "eurorack/plaits/dsp/physical_modelling/delay_line.h"
   1:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/plaits/dsp/physical_modelling/delay_line.h **** //
   3:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/physical_modelling/delay_line.h **** //
   5:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // 
  12:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // 
  15:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // 
  23:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/physical_modelling/delay_line.h **** //
  25:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // -----------------------------------------------------------------------------
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 59


  26:eurorack/plaits/dsp/physical_modelling/delay_line.h **** //
  27:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // Delay line (same implementation as from stmlib, but does not own its buffer).
  28:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  29:eurorack/plaits/dsp/physical_modelling/delay_line.h **** #ifndef PLAITS_DSP_PHYSICAL_MODELLING_DELAY_LINE_H_
  30:eurorack/plaits/dsp/physical_modelling/delay_line.h **** #define PLAITS_DSP_PHYSICAL_MODELLING_DELAY_LINE_H_
  31:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  32:eurorack/plaits/dsp/physical_modelling/delay_line.h **** #include <algorithm>
  33:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  34:eurorack/plaits/dsp/physical_modelling/delay_line.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  36:eurorack/plaits/dsp/physical_modelling/delay_line.h **** namespace plaits {
  37:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  38:eurorack/plaits/dsp/physical_modelling/delay_line.h **** template<typename T, size_t max_delay>
  39:eurorack/plaits/dsp/physical_modelling/delay_line.h **** class DelayLine {
  40:eurorack/plaits/dsp/physical_modelling/delay_line.h ****  public:
  41:eurorack/plaits/dsp/physical_modelling/delay_line.h ****   DelayLine() { }
 809              		.loc 37 41 3 view .LVU221
 810              		.loc 37 41 3 is_stmt 0 view .LVU222
 811              	.LBE1605:
 812              	.LBE1603:
 813              	.LBE1602:
 814              	.LBB1606:
 815              	.LBI1606:
 816              		.file 38 "eurorack/plaits/dsp/engine/swarm_engine.h"
   1:eurorack/plaits/dsp/engine/swarm_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/swarm_engine.h **** //
   3:eurorack/plaits/dsp/engine/swarm_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/swarm_engine.h **** //
   5:eurorack/plaits/dsp/engine/swarm_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/swarm_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/swarm_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/swarm_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/swarm_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/swarm_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/swarm_engine.h **** // 
  12:eurorack/plaits/dsp/engine/swarm_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/swarm_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/swarm_engine.h **** // 
  15:eurorack/plaits/dsp/engine/swarm_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/swarm_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/swarm_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/swarm_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/swarm_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/swarm_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/swarm_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/swarm_engine.h **** // 
  23:eurorack/plaits/dsp/engine/swarm_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/swarm_engine.h **** //
  25:eurorack/plaits/dsp/engine/swarm_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/swarm_engine.h **** //
  27:eurorack/plaits/dsp/engine/swarm_engine.h **** // Swarm of sawtooths and sines.
  28:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  29:eurorack/plaits/dsp/engine/swarm_engine.h **** #ifndef PLAITS_DSP_ENGINE_SWARM_ENGINE_H_
  30:eurorack/plaits/dsp/engine/swarm_engine.h **** #define PLAITS_DSP_ENGINE_SWARM_ENGINE_H_
  31:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  32:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "stmlib/dsp/polyblep.h"
  33:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "stmlib/dsp/units.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 60


  34:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "stmlib/utils/random.h"
  35:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  36:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/dsp/engine/engine.h"
  37:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/dsp/oscillator/oscillator.h"
  38:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/dsp/oscillator/string_synth_oscillator.h"
  39:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/dsp/oscillator/sine_oscillator.h"
  40:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/resources.h"
  41:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  42:eurorack/plaits/dsp/engine/swarm_engine.h **** namespace plaits {
  43:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  44:eurorack/plaits/dsp/engine/swarm_engine.h **** const int kNumSwarmVoices = 8;
  45:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  46:eurorack/plaits/dsp/engine/swarm_engine.h **** class GrainEnvelope {
  47:eurorack/plaits/dsp/engine/swarm_engine.h ****  public:
  48:eurorack/plaits/dsp/engine/swarm_engine.h ****   GrainEnvelope() { }
  49:eurorack/plaits/dsp/engine/swarm_engine.h ****   ~GrainEnvelope() { }
  50:eurorack/plaits/dsp/engine/swarm_engine.h ****   
  51:eurorack/plaits/dsp/engine/swarm_engine.h ****   void Init() {
  52:eurorack/plaits/dsp/engine/swarm_engine.h ****     from_ = 0.0f;
  53:eurorack/plaits/dsp/engine/swarm_engine.h ****     interval_ = 1.0f;
  54:eurorack/plaits/dsp/engine/swarm_engine.h ****     phase_ = 1.0f;
  55:eurorack/plaits/dsp/engine/swarm_engine.h ****     fm_ = 0.0f;
  56:eurorack/plaits/dsp/engine/swarm_engine.h ****     amplitude_ = 0.5f;
  57:eurorack/plaits/dsp/engine/swarm_engine.h ****     previous_size_ratio_ = 0.0f;
  58:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
  59:eurorack/plaits/dsp/engine/swarm_engine.h ****   
  60:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline void Step(float rate, bool burst_mode, bool start_burst) {
  61:eurorack/plaits/dsp/engine/swarm_engine.h ****     bool randomize = false;
  62:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (start_burst) {
  63:eurorack/plaits/dsp/engine/swarm_engine.h ****       phase_ = 0.5f;
  64:eurorack/plaits/dsp/engine/swarm_engine.h ****       fm_ = 16.0f;
  65:eurorack/plaits/dsp/engine/swarm_engine.h ****       randomize = true;
  66:eurorack/plaits/dsp/engine/swarm_engine.h ****     } else {
  67:eurorack/plaits/dsp/engine/swarm_engine.h ****       phase_ += rate * fm_;
  68:eurorack/plaits/dsp/engine/swarm_engine.h ****       if (phase_ >= 1.0f) {
  69:eurorack/plaits/dsp/engine/swarm_engine.h ****         phase_ -= static_cast<float>(static_cast<int>(phase_));
  70:eurorack/plaits/dsp/engine/swarm_engine.h ****         randomize = true;
  71:eurorack/plaits/dsp/engine/swarm_engine.h ****       }
  72:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
  73:eurorack/plaits/dsp/engine/swarm_engine.h ****     
  74:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (randomize) {
  75:eurorack/plaits/dsp/engine/swarm_engine.h ****       from_ += interval_;
  76:eurorack/plaits/dsp/engine/swarm_engine.h ****       interval_ = stmlib::Random::GetFloat() - from_;
  77:eurorack/plaits/dsp/engine/swarm_engine.h ****       // Randomize the duration of the grain.
  78:eurorack/plaits/dsp/engine/swarm_engine.h ****       if (burst_mode) {
  79:eurorack/plaits/dsp/engine/swarm_engine.h ****         fm_ *= 0.8f + 0.2f * stmlib::Random::GetFloat();
  80:eurorack/plaits/dsp/engine/swarm_engine.h ****       } else {
  81:eurorack/plaits/dsp/engine/swarm_engine.h ****         fm_ = 0.5f + 1.5f * stmlib::Random::GetFloat();
  82:eurorack/plaits/dsp/engine/swarm_engine.h ****       }
  83:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
  84:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
  85:eurorack/plaits/dsp/engine/swarm_engine.h ****   
  86:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline float frequency(float size_ratio) const {
  87:eurorack/plaits/dsp/engine/swarm_engine.h ****     // We approximate two overlapping grains of frequencies f1 and f2
  88:eurorack/plaits/dsp/engine/swarm_engine.h ****     // By a continuous tone ramping from f1 to f2. This allows a continuous
  89:eurorack/plaits/dsp/engine/swarm_engine.h ****     // transition between the "grain cloud" and "swarm of glissandi" textures.
  90:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (size_ratio < 1.0f) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 61


  91:eurorack/plaits/dsp/engine/swarm_engine.h ****       return 2.0f * (from_ + interval_ * phase_) - 1.0f;
  92:eurorack/plaits/dsp/engine/swarm_engine.h ****     } else {
  93:eurorack/plaits/dsp/engine/swarm_engine.h ****       return from_;
  94:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
  95:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
  96:eurorack/plaits/dsp/engine/swarm_engine.h ****   
  97:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline float amplitude(float size_ratio) {
  98:eurorack/plaits/dsp/engine/swarm_engine.h ****     float target_amplitude = 1.0f;
  99:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (size_ratio >= 1.0f) {
 100:eurorack/plaits/dsp/engine/swarm_engine.h ****       float phase = (phase_ - 0.5f) * size_ratio;
 101:eurorack/plaits/dsp/engine/swarm_engine.h ****       CONSTRAIN(phase, -1.0f, 1.0f);
 102:eurorack/plaits/dsp/engine/swarm_engine.h ****       float e = stmlib::InterpolateWrap(
 103:eurorack/plaits/dsp/engine/swarm_engine.h ****           lut_sine, 0.5f * phase + 1.25f, 1024.0f);
 104:eurorack/plaits/dsp/engine/swarm_engine.h ****       target_amplitude = 0.5f * (e + 1.0f);
 105:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
 106:eurorack/plaits/dsp/engine/swarm_engine.h ****     
 107:eurorack/plaits/dsp/engine/swarm_engine.h ****     if ((size_ratio >= 1.0f) ^ (previous_size_ratio_ >= 1.0f)) {
 108:eurorack/plaits/dsp/engine/swarm_engine.h ****       filter_coefficient_ = 0.5f;
 109:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
 110:eurorack/plaits/dsp/engine/swarm_engine.h ****     filter_coefficient_ *= 0.95f;
 111:eurorack/plaits/dsp/engine/swarm_engine.h ****     
 112:eurorack/plaits/dsp/engine/swarm_engine.h ****     previous_size_ratio_ = size_ratio;
 113:eurorack/plaits/dsp/engine/swarm_engine.h ****     ONE_POLE(amplitude_, target_amplitude, 0.5f - filter_coefficient_);
 114:eurorack/plaits/dsp/engine/swarm_engine.h ****     return amplitude_;
 115:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
 116:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 117:eurorack/plaits/dsp/engine/swarm_engine.h ****  private:
 118:eurorack/plaits/dsp/engine/swarm_engine.h ****   float from_;
 119:eurorack/plaits/dsp/engine/swarm_engine.h ****   float interval_;
 120:eurorack/plaits/dsp/engine/swarm_engine.h ****   float phase_;
 121:eurorack/plaits/dsp/engine/swarm_engine.h ****   float fm_;
 122:eurorack/plaits/dsp/engine/swarm_engine.h ****   float amplitude_;
 123:eurorack/plaits/dsp/engine/swarm_engine.h ****   float previous_size_ratio_;
 124:eurorack/plaits/dsp/engine/swarm_engine.h ****   float filter_coefficient_;
 125:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 126:eurorack/plaits/dsp/engine/swarm_engine.h ****   DISALLOW_COPY_AND_ASSIGN(GrainEnvelope);
 127:eurorack/plaits/dsp/engine/swarm_engine.h **** };
 128:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 129:eurorack/plaits/dsp/engine/swarm_engine.h **** class AdditiveSawOscillator {
 130:eurorack/plaits/dsp/engine/swarm_engine.h ****  public:
 131:eurorack/plaits/dsp/engine/swarm_engine.h ****   AdditiveSawOscillator() { }
 132:eurorack/plaits/dsp/engine/swarm_engine.h ****   ~AdditiveSawOscillator() { }
 133:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 134:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline void Init() {
 135:eurorack/plaits/dsp/engine/swarm_engine.h ****     phase_ = 0.0f;
 136:eurorack/plaits/dsp/engine/swarm_engine.h ****     next_sample_ = 0.0f;
 137:eurorack/plaits/dsp/engine/swarm_engine.h ****     frequency_ = 0.01f;
 138:eurorack/plaits/dsp/engine/swarm_engine.h ****     gain_ = 0.0f;
 139:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
 140:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 141:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline void Render(
 142:eurorack/plaits/dsp/engine/swarm_engine.h ****       float frequency,
 143:eurorack/plaits/dsp/engine/swarm_engine.h ****       float level,
 144:eurorack/plaits/dsp/engine/swarm_engine.h ****       float* out,
 145:eurorack/plaits/dsp/engine/swarm_engine.h ****       size_t size) {
 146:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (frequency >= kMaxFrequency) {
 147:eurorack/plaits/dsp/engine/swarm_engine.h ****       frequency = kMaxFrequency;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 62


 148:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
 149:eurorack/plaits/dsp/engine/swarm_engine.h ****     stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
 150:eurorack/plaits/dsp/engine/swarm_engine.h ****     stmlib::ParameterInterpolator gain(&gain_, level, size);
 151:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 152:eurorack/plaits/dsp/engine/swarm_engine.h ****     float next_sample = next_sample_;
 153:eurorack/plaits/dsp/engine/swarm_engine.h ****     float phase = phase_;
 154:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 155:eurorack/plaits/dsp/engine/swarm_engine.h ****     while (size--) {
 156:eurorack/plaits/dsp/engine/swarm_engine.h ****       float this_sample = next_sample;
 157:eurorack/plaits/dsp/engine/swarm_engine.h ****       next_sample = 0.0f;
 158:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 159:eurorack/plaits/dsp/engine/swarm_engine.h ****       const float frequency = fm.Next();
 160:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 161:eurorack/plaits/dsp/engine/swarm_engine.h ****       phase += frequency;
 162:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 163:eurorack/plaits/dsp/engine/swarm_engine.h ****       if (phase >= 1.0f) {
 164:eurorack/plaits/dsp/engine/swarm_engine.h ****         phase -= 1.0f;
 165:eurorack/plaits/dsp/engine/swarm_engine.h ****         float t = phase / frequency;
 166:eurorack/plaits/dsp/engine/swarm_engine.h ****         this_sample -= stmlib::ThisBlepSample(t);
 167:eurorack/plaits/dsp/engine/swarm_engine.h ****         next_sample -= stmlib::NextBlepSample(t);
 168:eurorack/plaits/dsp/engine/swarm_engine.h ****       }
 169:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 170:eurorack/plaits/dsp/engine/swarm_engine.h ****       next_sample += phase;
 171:eurorack/plaits/dsp/engine/swarm_engine.h ****       *out++ += (2.0f * this_sample - 1.0f) * gain.Next();
 172:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
 173:eurorack/plaits/dsp/engine/swarm_engine.h ****     phase_ = phase;
 174:eurorack/plaits/dsp/engine/swarm_engine.h ****     next_sample_ = next_sample;
 175:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
 176:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 177:eurorack/plaits/dsp/engine/swarm_engine.h ****  private:
 178:eurorack/plaits/dsp/engine/swarm_engine.h ****   // Oscillator state.
 179:eurorack/plaits/dsp/engine/swarm_engine.h ****   float phase_;
 180:eurorack/plaits/dsp/engine/swarm_engine.h ****   float next_sample_;
 181:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 182:eurorack/plaits/dsp/engine/swarm_engine.h ****   // For interpolation of parameters.
 183:eurorack/plaits/dsp/engine/swarm_engine.h ****   float frequency_;
 184:eurorack/plaits/dsp/engine/swarm_engine.h ****   float gain_;
 185:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 186:eurorack/plaits/dsp/engine/swarm_engine.h ****   DISALLOW_COPY_AND_ASSIGN(AdditiveSawOscillator);
 187:eurorack/plaits/dsp/engine/swarm_engine.h **** };
 188:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 189:eurorack/plaits/dsp/engine/swarm_engine.h **** class SwarmVoice {
 190:eurorack/plaits/dsp/engine/swarm_engine.h ****  public:
 191:eurorack/plaits/dsp/engine/swarm_engine.h ****   SwarmVoice() { }
 192:eurorack/plaits/dsp/engine/swarm_engine.h ****   ~SwarmVoice() { }
 193:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 194:eurorack/plaits/dsp/engine/swarm_engine.h ****   void Init(float rank) {
 195:eurorack/plaits/dsp/engine/swarm_engine.h ****     rank_ = rank;
 196:eurorack/plaits/dsp/engine/swarm_engine.h ****     envelope_.Init();
 197:eurorack/plaits/dsp/engine/swarm_engine.h ****     saw_.Init();
 198:eurorack/plaits/dsp/engine/swarm_engine.h ****     sine_.Init();
 199:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
 200:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 201:eurorack/plaits/dsp/engine/swarm_engine.h ****   void Render(
 202:eurorack/plaits/dsp/engine/swarm_engine.h ****       float f0,
 203:eurorack/plaits/dsp/engine/swarm_engine.h ****       float density,
 204:eurorack/plaits/dsp/engine/swarm_engine.h ****       bool burst_mode,
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 63


 205:eurorack/plaits/dsp/engine/swarm_engine.h ****       bool start_burst,
 206:eurorack/plaits/dsp/engine/swarm_engine.h ****       float spread,
 207:eurorack/plaits/dsp/engine/swarm_engine.h ****       float size_ratio,
 208:eurorack/plaits/dsp/engine/swarm_engine.h ****       float* saw,
 209:eurorack/plaits/dsp/engine/swarm_engine.h ****       float* sine,
 210:eurorack/plaits/dsp/engine/swarm_engine.h ****       size_t size) {
 211:eurorack/plaits/dsp/engine/swarm_engine.h ****     envelope_.Step(density, burst_mode, start_burst);
 212:eurorack/plaits/dsp/engine/swarm_engine.h ****     
 213:eurorack/plaits/dsp/engine/swarm_engine.h ****     const float scale = 1.0f / kNumSwarmVoices;
 214:eurorack/plaits/dsp/engine/swarm_engine.h ****     const float amplitude = envelope_.amplitude(size_ratio) * scale;
 215:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 216:eurorack/plaits/dsp/engine/swarm_engine.h ****     const float expo_amount = envelope_.frequency(size_ratio);
 217:eurorack/plaits/dsp/engine/swarm_engine.h ****     f0 *= stmlib::SemitonesToRatio(48.0f * expo_amount * spread * rank_);
 218:eurorack/plaits/dsp/engine/swarm_engine.h ****     
 219:eurorack/plaits/dsp/engine/swarm_engine.h ****     const float linear_amount = rank_ * (rank_ + 0.01f) * spread * 0.25f;
 220:eurorack/plaits/dsp/engine/swarm_engine.h ****     f0 *= 1.0f + linear_amount;
 221:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 222:eurorack/plaits/dsp/engine/swarm_engine.h ****     saw_.Render(f0, amplitude, saw, size);
 223:eurorack/plaits/dsp/engine/swarm_engine.h ****     sine_.Render(f0, amplitude, sine, size);
 224:eurorack/plaits/dsp/engine/swarm_engine.h ****   };
 225:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 226:eurorack/plaits/dsp/engine/swarm_engine.h ****  private:
 227:eurorack/plaits/dsp/engine/swarm_engine.h ****   float rank_;
 228:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 229:eurorack/plaits/dsp/engine/swarm_engine.h ****   GrainEnvelope envelope_;
 230:eurorack/plaits/dsp/engine/swarm_engine.h ****   AdditiveSawOscillator saw_;
 231:eurorack/plaits/dsp/engine/swarm_engine.h ****   FastSineOscillator sine_;
 232:eurorack/plaits/dsp/engine/swarm_engine.h **** };
 233:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 234:eurorack/plaits/dsp/engine/swarm_engine.h **** class SwarmEngine : public Engine {
 235:eurorack/plaits/dsp/engine/swarm_engine.h ****  public:
 236:eurorack/plaits/dsp/engine/swarm_engine.h ****   SwarmEngine() { }
 817              		.loc 38 236 3 is_stmt 1 view .LVU223
 818              	.LBB1607:
 819              	.LBB1608:
 820              	.LBI1608:
 821              		.loc 6 80 3 view .LVU224
 822              		.loc 6 80 3 is_stmt 0 view .LVU225
 823              	.LBE1608:
 824              		.loc 38 236 17 view .LVU226
 825 0052 3449     		ldr	r1, .L24+48
 826 0054 C3F8781C 		str	r1, [r3, #3192]
 827              		.loc 38 236 17 is_stmt 1 view .LVU227
 828              	.LVL31:
 829              		.loc 38 236 17 is_stmt 0 view .LVU228
 830              	.LBE1607:
 831              	.LBE1606:
 832              	.LBB1609:
 833              	.LBI1609:
 834              		.file 39 "eurorack/plaits/dsp/engine/virtual_analog_engine.h"
   1:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** //
   3:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** //
   5:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // in the Software without restriction, including without limitation the rights
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 64


   8:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // 
  12:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // 
  15:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // 
  23:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** //
  25:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** //
  27:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // 2 variable shape oscillators with sync and crossfading.
  28:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** 
  29:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #ifndef PLAITS_DSP_ENGINE_VIRTUAL_ANALOG_ENGINE_H_
  30:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #define PLAITS_DSP_ENGINE_VIRTUAL_ANALOG_ENGINE_H_
  31:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** 
  32:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #include "plaits/dsp/oscillator/variable_saw_oscillator.h"
  34:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #include "plaits/dsp/oscillator/variable_shape_oscillator.h"
  35:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** 
  36:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #define VA_VARIANT 2
  37:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** 
  38:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** namespace plaits {
  39:eurorack/plaits/dsp/engine/virtual_analog_engine.h ****   
  40:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** class VirtualAnalogEngine : public Engine {
  41:eurorack/plaits/dsp/engine/virtual_analog_engine.h ****  public:
  42:eurorack/plaits/dsp/engine/virtual_analog_engine.h ****   VirtualAnalogEngine() { }
 835              		.loc 39 42 3 is_stmt 1 view .LVU229
 836              	.LBB1610:
 837              	.LBB1611:
 838              	.LBI1611:
 839              		.loc 6 80 3 view .LVU230
 840              		.loc 6 80 3 is_stmt 0 view .LVU231
 841              	.LBE1611:
 842              		.loc 39 42 25 view .LVU232
 843 0058 3349     		ldr	r1, .L24+52
 844 005a C3F8881E 		str	r1, [r3, #3720]
 845              	.LVL32:
 846              	.LBB1612:
 847              	.LBI1612:
 848              		.file 40 "eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h"
   1:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 65


   9:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // Continuously variable waveform: triangle > saw > square. Both square and
  28:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // triangle have variable slope / pulse-width. Additionally, the phase resets
  29:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // can be locked to a master frequency.
  30:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  31:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_VARIABLE_SHAPE_OSCILLATOR_H_
  32:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #define PLAITS_DSP_OSCILLATOR_VARIABLE_SHAPE_OSCILLATOR_H_
  33:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  34:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  36:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #include "stmlib/dsp/polyblep.h"
  37:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  38:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #include <algorithm>
  39:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  40:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** namespace plaits {
  41:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  42:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** class VariableShapeOscillator {
  43:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h ****  public:
  44:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h ****   VariableShapeOscillator() { }
 849              		.loc 40 44 3 is_stmt 1 view .LVU233
 850              		.loc 40 44 3 is_stmt 0 view .LVU234
 851              	.LBE1612:
 852              	.LBB1613:
 853              	.LBI1613:
 854              		.loc 40 44 3 is_stmt 1 view .LVU235
 855              		.loc 40 44 3 is_stmt 0 view .LVU236
 856              	.LBE1613:
 857              	.LBB1614:
 858              	.LBI1614:
 859              		.loc 40 44 3 is_stmt 1 view .LVU237
 860              		.loc 40 44 3 is_stmt 0 view .LVU238
 861              	.LBE1614:
 862              	.LBB1615:
 863              	.LBI1615:
 864              		.file 41 "eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h"
   1:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 66


   6:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // Saw with variable slope or notch
  28:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  29:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_VARIABLE_SAW_OSCILLATOR_H_
  30:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #define PLAITS_DSP_OSCILLATOR_VARIABLE_SAW_OSCILLATOR_H_
  31:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  32:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include "stmlib/dsp/dsp.h"
  33:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  34:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include "stmlib/dsp/polyblep.h"
  35:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  36:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include <algorithm>
  37:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  38:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include "plaits/dsp/oscillator/oscillator.h"
  39:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  40:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** namespace plaits {
  41:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  42:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** const float kVariableSawNotchDepth = 0.2f;
  43:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  44:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** class VariableSawOscillator {
  45:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h ****  public:
  46:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h ****   VariableSawOscillator() { }
 865              		.loc 41 46 3 is_stmt 1 view .LVU239
 866              		.loc 41 46 3 is_stmt 0 view .LVU240
 867              	.LBE1615:
 868              	.LBE1610:
 869              	.LBE1609:
 870              	.LBB1616:
 871              	.LBI1616:
 872              		.file 42 "eurorack/plaits/dsp/engine/waveshaping_engine.h"
   1:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/waveshaping_engine.h **** //
   3:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/waveshaping_engine.h **** //
   5:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 67


   9:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // 
  12:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // 
  15:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // 
  23:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/waveshaping_engine.h **** //
  25:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/waveshaping_engine.h **** //
  27:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // Slope -> Waveshaper -> Wavefolder.
  28:eurorack/plaits/dsp/engine/waveshaping_engine.h **** 
  29:eurorack/plaits/dsp/engine/waveshaping_engine.h **** #ifndef PLAITS_DSP_ENGINE_WAVESHAPING_ENGINE_H_
  30:eurorack/plaits/dsp/engine/waveshaping_engine.h **** #define PLAITS_DSP_ENGINE_WAVESHAPING_ENGINE_H_
  31:eurorack/plaits/dsp/engine/waveshaping_engine.h **** 
  32:eurorack/plaits/dsp/engine/waveshaping_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/waveshaping_engine.h **** #include "plaits/dsp/oscillator/oscillator.h"
  34:eurorack/plaits/dsp/engine/waveshaping_engine.h **** 
  35:eurorack/plaits/dsp/engine/waveshaping_engine.h **** namespace plaits {
  36:eurorack/plaits/dsp/engine/waveshaping_engine.h ****   
  37:eurorack/plaits/dsp/engine/waveshaping_engine.h **** class WaveshapingEngine : public Engine {
  38:eurorack/plaits/dsp/engine/waveshaping_engine.h ****  public:
  39:eurorack/plaits/dsp/engine/waveshaping_engine.h ****   WaveshapingEngine() { }
 873              		.loc 42 39 3 is_stmt 1 view .LVU241
 874              	.LBB1617:
 875              	.LBB1618:
 876              	.LBI1618:
 877              		.loc 6 80 3 view .LVU242
 878              		.loc 6 80 3 is_stmt 0 view .LVU243
 879              	.LBE1618:
 880              		.loc 42 39 23 view .LVU244
 881 005e 3349     		ldr	r1, .L24+56
 882 0060 C3F82C1F 		str	r1, [r3, #3884]
 883              	.LVL33:
 884              	.LBB1619:
 885              	.LBI1619:
 886              		.loc 32 55 3 is_stmt 1 view .LVU245
 887              		.loc 32 55 3 is_stmt 0 view .LVU246
 888              	.LBE1619:
 889              	.LBB1620:
 890              	.LBI1620:
 891              		.loc 32 55 3 is_stmt 1 view .LVU247
 892              		.loc 32 55 3 is_stmt 0 view .LVU248
 893              	.LBE1620:
 894              	.LBE1617:
 895              	.LBE1616:
 896              	.LBB1621:
 897              	.LBI1621:
 898              		.file 43 "eurorack/plaits/dsp/engine/wavetable_engine.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 68


   1:eurorack/plaits/dsp/engine/wavetable_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/wavetable_engine.h **** //
   3:eurorack/plaits/dsp/engine/wavetable_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/wavetable_engine.h **** //
   5:eurorack/plaits/dsp/engine/wavetable_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/wavetable_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/wavetable_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/wavetable_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/wavetable_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/wavetable_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/wavetable_engine.h **** // 
  12:eurorack/plaits/dsp/engine/wavetable_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/wavetable_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/wavetable_engine.h **** // 
  15:eurorack/plaits/dsp/engine/wavetable_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/wavetable_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/wavetable_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/wavetable_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/wavetable_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/wavetable_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/wavetable_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/wavetable_engine.h **** // 
  23:eurorack/plaits/dsp/engine/wavetable_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/wavetable_engine.h **** //
  25:eurorack/plaits/dsp/engine/wavetable_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/wavetable_engine.h **** //
  27:eurorack/plaits/dsp/engine/wavetable_engine.h **** // 8x8x3 wave terrain.
  28:eurorack/plaits/dsp/engine/wavetable_engine.h **** 
  29:eurorack/plaits/dsp/engine/wavetable_engine.h **** #ifndef PLAITS_DSP_ENGINE_WAVETABLE_ENGINE_H_
  30:eurorack/plaits/dsp/engine/wavetable_engine.h **** #define PLAITS_DSP_ENGINE_WAVETABLE_ENGINE_H_
  31:eurorack/plaits/dsp/engine/wavetable_engine.h **** 
  32:eurorack/plaits/dsp/engine/wavetable_engine.h **** #include "stmlib/dsp/hysteresis_quantizer.h"
  33:eurorack/plaits/dsp/engine/wavetable_engine.h **** 
  34:eurorack/plaits/dsp/engine/wavetable_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/wavetable_engine.h **** #include "plaits/dsp/oscillator/wavetable_oscillator.h"
  36:eurorack/plaits/dsp/engine/wavetable_engine.h **** 
  37:eurorack/plaits/dsp/engine/wavetable_engine.h **** namespace plaits {
  38:eurorack/plaits/dsp/engine/wavetable_engine.h **** 
  39:eurorack/plaits/dsp/engine/wavetable_engine.h **** class WavetableEngine : public Engine {
  40:eurorack/plaits/dsp/engine/wavetable_engine.h ****  public:
  41:eurorack/plaits/dsp/engine/wavetable_engine.h ****   WavetableEngine() { }
 899              		.loc 43 41 3 is_stmt 1 view .LVU249
 900              	.LBB1622:
 901              	.LBB1623:
 902              	.LBI1623:
 903              		.loc 6 80 3 view .LVU250
 904              		.loc 6 80 3 is_stmt 0 view .LVU251
 905              	.LBE1623:
 906              		.loc 43 41 21 view .LVU252
 907 0064 3249     		ldr	r1, .L24+60
 908 0066 C3F8801F 		str	r1, [r3, #3968]
 909              	.LVL34:
 910              	.LBB1624:
 911              	.LBI1624:
 912              		.file 44 "eurorack/plaits/dsp/oscillator/wavetable_oscillator.h"
   1:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 69


   3:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** // Integrated wavetable synthesis.
  28:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** 
  29:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_WAVETABLE_OSCILLATOR_H_
  30:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** #define PLAITS_DSP_OSCILLATOR_WAVETABLE_OSCILLATOR_H_
  31:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** 
  32:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** #include <algorithm>
  33:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** 
  34:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  36:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** 
  37:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** #include "plaits/dsp/oscillator/oscillator.h"
  38:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** 
  39:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** namespace plaits {
  40:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** 
  41:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h **** class Differentiator {
  42:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h ****  public:
  43:eurorack/plaits/dsp/oscillator/wavetable_oscillator.h ****   Differentiator() { }
 913              		.loc 44 43 3 is_stmt 1 view .LVU253
 914              		.loc 44 43 3 is_stmt 0 view .LVU254
 915              	.LBE1624:
 916              	.LBE1622:
 917              	.LBE1621:
 918              	.LBB1625:
 919              	.LBI1625:
 920              		.loc 14 39 3 is_stmt 1 view .LVU255
 921              		.loc 14 39 3 is_stmt 0 view .LVU256
 922              	.LBE1625:
 923              	.LBB1626:
 924              	.LBI1626:
 925              		.file 45 "eurorack/plaits/dsp/envelope.h"
   1:eurorack/plaits/dsp/envelope.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/envelope.h **** //
   3:eurorack/plaits/dsp/envelope.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 70


   4:eurorack/plaits/dsp/envelope.h **** //
   5:eurorack/plaits/dsp/envelope.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/envelope.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/envelope.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/envelope.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/envelope.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/envelope.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/envelope.h **** // 
  12:eurorack/plaits/dsp/envelope.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/envelope.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/envelope.h **** // 
  15:eurorack/plaits/dsp/envelope.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/envelope.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/envelope.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/envelope.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/envelope.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/envelope.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/envelope.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/envelope.h **** // 
  23:eurorack/plaits/dsp/envelope.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/envelope.h **** //
  25:eurorack/plaits/dsp/envelope.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/envelope.h **** //
  27:eurorack/plaits/dsp/envelope.h **** // Envelope for the internal LPG.
  28:eurorack/plaits/dsp/envelope.h **** 
  29:eurorack/plaits/dsp/envelope.h **** #ifndef PLAITS_DSP_ENVELOPE_H_
  30:eurorack/plaits/dsp/envelope.h **** #define PLAITS_DSP_ENVELOPE_H_
  31:eurorack/plaits/dsp/envelope.h **** 
  32:eurorack/plaits/dsp/envelope.h **** #include "stmlib/stmlib.h"
  33:eurorack/plaits/dsp/envelope.h **** 
  34:eurorack/plaits/dsp/envelope.h **** namespace plaits {
  35:eurorack/plaits/dsp/envelope.h **** 
  36:eurorack/plaits/dsp/envelope.h **** class LPGEnvelope {
  37:eurorack/plaits/dsp/envelope.h ****  public:
  38:eurorack/plaits/dsp/envelope.h ****   LPGEnvelope() { }
  39:eurorack/plaits/dsp/envelope.h ****   ~LPGEnvelope() { }
  40:eurorack/plaits/dsp/envelope.h ****   
  41:eurorack/plaits/dsp/envelope.h ****   inline void Init() {
  42:eurorack/plaits/dsp/envelope.h ****     vactrol_state_ = 0.0f;
  43:eurorack/plaits/dsp/envelope.h ****     gain_ = 1.0f;
  44:eurorack/plaits/dsp/envelope.h ****     frequency_ = 0.5f;
  45:eurorack/plaits/dsp/envelope.h ****     hf_bleed_ = 0.0f;
  46:eurorack/plaits/dsp/envelope.h ****   }
  47:eurorack/plaits/dsp/envelope.h ****   
  48:eurorack/plaits/dsp/envelope.h ****   inline void Trigger() {
  49:eurorack/plaits/dsp/envelope.h ****     ramp_up_ = true;
  50:eurorack/plaits/dsp/envelope.h ****   }
  51:eurorack/plaits/dsp/envelope.h ****   
  52:eurorack/plaits/dsp/envelope.h ****   inline void ProcessPing(
  53:eurorack/plaits/dsp/envelope.h ****       float attack,
  54:eurorack/plaits/dsp/envelope.h ****       float short_decay,
  55:eurorack/plaits/dsp/envelope.h ****       float decay_tail,
  56:eurorack/plaits/dsp/envelope.h ****       float hf) {
  57:eurorack/plaits/dsp/envelope.h ****     if (ramp_up_) {
  58:eurorack/plaits/dsp/envelope.h ****       vactrol_state_ += attack;
  59:eurorack/plaits/dsp/envelope.h ****       if (vactrol_state_ >= 1.0f) {
  60:eurorack/plaits/dsp/envelope.h ****         vactrol_state_ = 1.0f;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 71


  61:eurorack/plaits/dsp/envelope.h ****         ramp_up_ = false;
  62:eurorack/plaits/dsp/envelope.h ****       }
  63:eurorack/plaits/dsp/envelope.h ****     }
  64:eurorack/plaits/dsp/envelope.h ****     ProcessLP(ramp_up_ ? vactrol_state_ : 0.0f, short_decay, decay_tail, hf);
  65:eurorack/plaits/dsp/envelope.h ****   }
  66:eurorack/plaits/dsp/envelope.h ****   
  67:eurorack/plaits/dsp/envelope.h ****   inline void ProcessLP(
  68:eurorack/plaits/dsp/envelope.h ****       float level,
  69:eurorack/plaits/dsp/envelope.h ****       float short_decay,
  70:eurorack/plaits/dsp/envelope.h ****       float decay_tail,
  71:eurorack/plaits/dsp/envelope.h ****       float hf) {
  72:eurorack/plaits/dsp/envelope.h ****     float vactrol_input = level;
  73:eurorack/plaits/dsp/envelope.h ****     float vactrol_error = (vactrol_input - vactrol_state_);
  74:eurorack/plaits/dsp/envelope.h ****     float vactrol_state_2 = vactrol_state_ * vactrol_state_;
  75:eurorack/plaits/dsp/envelope.h ****     float vactrol_state_4 = vactrol_state_2 * vactrol_state_2;
  76:eurorack/plaits/dsp/envelope.h ****     float tail = 1.0f - vactrol_state_;
  77:eurorack/plaits/dsp/envelope.h ****     float tail_2 = tail * tail;
  78:eurorack/plaits/dsp/envelope.h ****     float vactrol_coefficient = (vactrol_error > 0.0f)
  79:eurorack/plaits/dsp/envelope.h ****         ? 0.6f
  80:eurorack/plaits/dsp/envelope.h ****         : short_decay + (1.0f - vactrol_state_4) * decay_tail;
  81:eurorack/plaits/dsp/envelope.h ****     vactrol_state_ += vactrol_coefficient * vactrol_error;
  82:eurorack/plaits/dsp/envelope.h ****     
  83:eurorack/plaits/dsp/envelope.h ****     gain_ = vactrol_state_;
  84:eurorack/plaits/dsp/envelope.h ****     frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
  85:eurorack/plaits/dsp/envelope.h ****     hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
  86:eurorack/plaits/dsp/envelope.h ****   }
  87:eurorack/plaits/dsp/envelope.h ****   
  88:eurorack/plaits/dsp/envelope.h ****   inline float gain() const { return gain_; }
  89:eurorack/plaits/dsp/envelope.h ****   inline float frequency() const { return frequency_; }
  90:eurorack/plaits/dsp/envelope.h ****   inline float hf_bleed() const { return hf_bleed_; }
  91:eurorack/plaits/dsp/envelope.h ****   
  92:eurorack/plaits/dsp/envelope.h ****  private:
  93:eurorack/plaits/dsp/envelope.h ****   float vactrol_state_;
  94:eurorack/plaits/dsp/envelope.h ****   float gain_;
  95:eurorack/plaits/dsp/envelope.h ****   float frequency_;
  96:eurorack/plaits/dsp/envelope.h ****   float hf_bleed_;
  97:eurorack/plaits/dsp/envelope.h ****   bool ramp_up_;
  98:eurorack/plaits/dsp/envelope.h ****   
  99:eurorack/plaits/dsp/envelope.h ****   DISALLOW_COPY_AND_ASSIGN(LPGEnvelope);
 100:eurorack/plaits/dsp/envelope.h **** };
 101:eurorack/plaits/dsp/envelope.h **** 
 102:eurorack/plaits/dsp/envelope.h **** class DecayEnvelope {
 103:eurorack/plaits/dsp/envelope.h ****  public:
 104:eurorack/plaits/dsp/envelope.h ****   DecayEnvelope() { }
 926              		.loc 45 104 3 is_stmt 1 view .LVU257
 927              		.loc 45 104 3 is_stmt 0 view .LVU258
 928              	.LBE1626:
 929              	.LBB1627:
 930              	.LBI1627:
  38:eurorack/plaits/dsp/envelope.h ****   ~LPGEnvelope() { }
 931              		.loc 45 38 3 is_stmt 1 view .LVU259
  38:eurorack/plaits/dsp/envelope.h ****   ~LPGEnvelope() { }
 932              		.loc 45 38 3 is_stmt 0 view .LVU260
 933              	.LBE1627:
 934              	.LBB1628:
 935              	.LBI1628:
 936              		.loc 37 41 3 is_stmt 1 view .LVU261
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 72


 937              		.loc 37 41 3 is_stmt 0 view .LVU262
 938              	.LBE1628:
 939              	.LBB1629:
 940              	.LBI1629:
  68:eurorack/plaits/dsp/voice.h ****   ~ChannelPostProcessor() { }
 941              		.loc 4 68 3 is_stmt 1 view .LVU263
 942              	.LBB1630:
 943              	.LBI1630:
 944              		.file 46 "eurorack/stmlib/dsp/limiter.h"
   1:eurorack/stmlib/dsp/limiter.h **** // Copyright 2015 Emilie Gillet.
   2:eurorack/stmlib/dsp/limiter.h **** //
   3:eurorack/stmlib/dsp/limiter.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/dsp/limiter.h **** //
   5:eurorack/stmlib/dsp/limiter.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/dsp/limiter.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/dsp/limiter.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/dsp/limiter.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/dsp/limiter.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/dsp/limiter.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/dsp/limiter.h **** // 
  12:eurorack/stmlib/dsp/limiter.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/dsp/limiter.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/dsp/limiter.h **** // 
  15:eurorack/stmlib/dsp/limiter.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/dsp/limiter.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/dsp/limiter.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/dsp/limiter.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/dsp/limiter.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/dsp/limiter.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/dsp/limiter.h **** // THE SOFTWARE.
  22:eurorack/stmlib/dsp/limiter.h **** // 
  23:eurorack/stmlib/dsp/limiter.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/dsp/limiter.h **** //
  25:eurorack/stmlib/dsp/limiter.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/dsp/limiter.h **** //
  27:eurorack/stmlib/dsp/limiter.h **** // Limiter.
  28:eurorack/stmlib/dsp/limiter.h **** 
  29:eurorack/stmlib/dsp/limiter.h **** #ifndef STMLIB_DSP_LIMITER_H_
  30:eurorack/stmlib/dsp/limiter.h **** #define STMLIB_DSP_LIMITER_H_
  31:eurorack/stmlib/dsp/limiter.h **** 
  32:eurorack/stmlib/dsp/limiter.h **** #include "stmlib/stmlib.h"
  33:eurorack/stmlib/dsp/limiter.h **** 
  34:eurorack/stmlib/dsp/limiter.h **** #include <algorithm>
  35:eurorack/stmlib/dsp/limiter.h **** 
  36:eurorack/stmlib/dsp/limiter.h **** #include "stmlib/dsp/dsp.h"
  37:eurorack/stmlib/dsp/limiter.h **** #include "stmlib/dsp/filter.h"
  38:eurorack/stmlib/dsp/limiter.h **** 
  39:eurorack/stmlib/dsp/limiter.h **** namespace stmlib {
  40:eurorack/stmlib/dsp/limiter.h **** 
  41:eurorack/stmlib/dsp/limiter.h **** class Limiter {
  42:eurorack/stmlib/dsp/limiter.h ****  public:
  43:eurorack/stmlib/dsp/limiter.h ****   Limiter() { }
 945              		.loc 46 43 3 view .LVU264
 946              		.loc 46 43 3 is_stmt 0 view .LVU265
 947              	.LBE1630:
 948              	.LBB1631:
 949              	.LBI1631:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 73


 950              		.file 47 "eurorack/plaits/dsp/fx/low_pass_gate.h"
   1:eurorack/plaits/dsp/fx/low_pass_gate.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/plaits/dsp/fx/low_pass_gate.h **** //
   3:eurorack/plaits/dsp/fx/low_pass_gate.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/fx/low_pass_gate.h **** //
   5:eurorack/plaits/dsp/fx/low_pass_gate.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/fx/low_pass_gate.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/fx/low_pass_gate.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/fx/low_pass_gate.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/fx/low_pass_gate.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/fx/low_pass_gate.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/fx/low_pass_gate.h **** // 
  12:eurorack/plaits/dsp/fx/low_pass_gate.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/fx/low_pass_gate.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/fx/low_pass_gate.h **** // 
  15:eurorack/plaits/dsp/fx/low_pass_gate.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/fx/low_pass_gate.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/fx/low_pass_gate.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/fx/low_pass_gate.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/fx/low_pass_gate.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/fx/low_pass_gate.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/fx/low_pass_gate.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/fx/low_pass_gate.h **** // 
  23:eurorack/plaits/dsp/fx/low_pass_gate.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/fx/low_pass_gate.h **** //
  25:eurorack/plaits/dsp/fx/low_pass_gate.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/fx/low_pass_gate.h **** //
  27:eurorack/plaits/dsp/fx/low_pass_gate.h **** // Approximative low pass gate.
  28:eurorack/plaits/dsp/fx/low_pass_gate.h **** 
  29:eurorack/plaits/dsp/fx/low_pass_gate.h **** #ifndef PLAITS_DSP_FX_LOW_PASS_GATE_H_
  30:eurorack/plaits/dsp/fx/low_pass_gate.h **** #define PLAITS_DSP_FX_LOW_PASS_GATE_H_
  31:eurorack/plaits/dsp/fx/low_pass_gate.h **** 
  32:eurorack/plaits/dsp/fx/low_pass_gate.h **** #include <algorithm>
  33:eurorack/plaits/dsp/fx/low_pass_gate.h **** 
  34:eurorack/plaits/dsp/fx/low_pass_gate.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/fx/low_pass_gate.h **** #include "stmlib/dsp/filter.h"
  36:eurorack/plaits/dsp/fx/low_pass_gate.h **** #include "stmlib/dsp/parameter_interpolator.h"
  37:eurorack/plaits/dsp/fx/low_pass_gate.h **** 
  38:eurorack/plaits/dsp/fx/low_pass_gate.h **** namespace plaits {
  39:eurorack/plaits/dsp/fx/low_pass_gate.h ****   
  40:eurorack/plaits/dsp/fx/low_pass_gate.h **** class LowPassGate {
  41:eurorack/plaits/dsp/fx/low_pass_gate.h ****  public:
  42:eurorack/plaits/dsp/fx/low_pass_gate.h ****   LowPassGate() { }
 951              		.loc 47 42 3 is_stmt 1 view .LVU266
 952              	.LBB1632:
 953              	.LBI1632:
 954              		.loc 9 179 3 view .LVU267
 955              		.loc 9 179 3 is_stmt 0 view .LVU268
 956              	.LBE1632:
 957              	.LBE1631:
 958              	.LBE1629:
 959              	.LBB1633:
 960              	.LBI1633:
  68:eurorack/plaits/dsp/voice.h ****   ~ChannelPostProcessor() { }
 961              		.loc 4 68 3 is_stmt 1 view .LVU269
 962              	.LBB1634:
 963              	.LBI1634:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 74


 964              		.loc 46 43 3 view .LVU270
 965              		.loc 46 43 3 is_stmt 0 view .LVU271
 966              	.LBE1634:
 967              	.LBB1635:
 968              	.LBI1635:
 969              		.loc 47 42 3 is_stmt 1 view .LVU272
 970              	.LBB1636:
 971              	.LBI1636:
 972              		.loc 9 179 3 view .LVU273
 973              		.loc 9 179 3 is_stmt 0 view .LVU274
 974              	.LBE1636:
 975              	.LBE1635:
 976              	.LBE1633:
 977              	.LBB1637:
 978              	.LBI1637:
  81:eurorack/plaits/dsp/engine/engine.h ****   ~Engine() { }
  82:eurorack/plaits/dsp/engine/engine.h ****   virtual void Init(stmlib::BufferAllocator* allocator) = 0;
  83:eurorack/plaits/dsp/engine/engine.h ****   virtual void Reset() = 0;
  84:eurorack/plaits/dsp/engine/engine.h ****   virtual void Render(
  85:eurorack/plaits/dsp/engine/engine.h ****       const EngineParameters& parameters,
  86:eurorack/plaits/dsp/engine/engine.h ****       float* out,
  87:eurorack/plaits/dsp/engine/engine.h ****       float* aux,
  88:eurorack/plaits/dsp/engine/engine.h ****       size_t size,
  89:eurorack/plaits/dsp/engine/engine.h ****       bool* already_enveloped) = 0;
  90:eurorack/plaits/dsp/engine/engine.h ****   PostProcessingSettings post_processing_settings;
  91:eurorack/plaits/dsp/engine/engine.h **** };
  92:eurorack/plaits/dsp/engine/engine.h **** 
  93:eurorack/plaits/dsp/engine/engine.h **** template<int max_size>
  94:eurorack/plaits/dsp/engine/engine.h **** class EngineRegistry {
  95:eurorack/plaits/dsp/engine/engine.h ****  public:
  96:eurorack/plaits/dsp/engine/engine.h ****   EngineRegistry() { }
 979              		.loc 6 96 3 is_stmt 1 view .LVU275
 980              		.loc 6 96 3 is_stmt 0 view .LVU276
 981              	.LBE1637:
 982              	.LBE1643:
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 983              		.loc 1 17 103 is_stmt 1 view .LVU277
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 984              		.loc 1 17 103 view .LVU278
 985 006a 03F58C53 		add	r3, r3, #4480
 986 006e 1433     		adds	r3, r3, #20
 987 0070 9342     		cmp	r3, r2
 988 0072 CBD1     		bne	.L20
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 989              		.loc 1 17 103 discriminator 2 view .LVU279
 990 0074 04F58F43 		add	r3, r4, #18304
 991 0078 04F59142 		add	r2, r4, #18560
 992 007c 1033     		adds	r3, r3, #16
 993 007e 2032     		adds	r2, r2, #32
 994              	.LVL35:
 995              	.L21:
 996              	.LBB1644:
 997              	.LBI1644:
  20:VoiceEnvelope.h ****         current_state(ENV_IDLE),
 998              		.loc 3 20 5 view .LVU280
 999              	.LBB1645:
  27:VoiceEnvelope.h ****     {}
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 75


 1000              		.loc 3 27 31 is_stmt 0 view .LVU281
 1001 0080 0121     		movs	r1, #1
 1002 0082 0025     		movs	r5, #0
 1003 0084 4FF07C50 		mov	r0, #1056964608
 1004              	.LBE1645:
 1005              	.LBE1644:
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 1006              		.loc 1 17 103 view .LVU282
 1007 0088 4433     		adds	r3, r3, #68
 1008              	.LVL36:
 1009              	.LBB1647:
 1010              	.LBB1646:
  27:VoiceEnvelope.h ****     {}
 1011              		.loc 3 27 31 view .LVU283
 1012 008a 03F8431C 		strb	r1, [r3, #-67]
 1013 008e 0021     		movs	r1, #0
 1014 0090 03F8445C 		strb	r5, [r3, #-68]
 1015 0094 43F8401C 		str	r1, [r3, #-64]	@ float
 1016 0098 43F83C0C 		str	r0, [r3, #-60]	@ float
 1017 009c 43F8380C 		str	r0, [r3, #-56]	@ float
 1018 00a0 43F8085C 		str	r5, [r3, #-8]
 1019 00a4 43F8041C 		str	r1, [r3, #-4]	@ float
 1020              	.LVL37:
  27:VoiceEnvelope.h ****     {}
 1021              		.loc 3 27 31 view .LVU284
 1022              	.LBE1646:
 1023              	.LBE1647:
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 1024              		.loc 1 17 103 is_stmt 1 view .LVU285
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 1025              		.loc 1 17 103 view .LVU286
 1026 00a8 9342     		cmp	r3, r2
 1027 00aa E9D1     		bne	.L21
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 1028              		.loc 1 17 103 is_stmt 0 discriminator 6 view .LVU287
 1029 00ac 04F58043 		add	r3, r4, #16384
  19:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
 1030              		.loc 1 19 11 discriminator 6 view .LVU288
 1031 00b0 04F59140 		add	r0, r4, #18560
 1032 00b4 2946     		mov	r1, r5
 1033 00b6 1022     		movs	r2, #16
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 1034              		.loc 1 17 103 discriminator 6 view .LVU289
 1035 00b8 C3F8B45B 		str	r5, [r3, #2996]
  19:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
 1036              		.loc 1 19 11 discriminator 6 view .LVU290
 1037 00bc 2430     		adds	r0, r0, #36
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 1038              		.loc 1 17 103 discriminator 6 view .LVU291
 1039 00be C3F8B85B 		str	r5, [r3, #3000]
 1040 00c2 83F8BC5B 		strb	r5, [r3, #3004]
 1041 00c6 A3F8BE5B 		strh	r5, [r3, #3006]	@ movhi
  18:Polyphony.cpp ****     memset(voice_note_, 0, sizeof(voice_note_));
 1042              		.loc 1 18 5 is_stmt 1 discriminator 6 view .LVU292
  18:Polyphony.cpp ****     memset(voice_note_, 0, sizeof(voice_note_));
 1043              		.loc 1 18 11 is_stmt 0 discriminator 6 view .LVU293
 1044 00ca 44F6A003 		movw	r3, #18592
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 76


 1045 00ce E550     		str	r5, [r4, r3]	@ unaligned
  19:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
 1046              		.loc 1 19 5 is_stmt 1 discriminator 6 view .LVU294
  19:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
 1047              		.loc 1 19 11 is_stmt 0 discriminator 6 view .LVU295
 1048 00d0 FFF7FEFF 		bl	memset
 1049              	.LVL38:
  20:Polyphony.cpp ****     memset(mix_buffer_aux_, 0, sizeof(mix_buffer_aux_));
 1050              		.loc 1 20 5 is_stmt 1 discriminator 6 view .LVU296
  20:Polyphony.cpp ****     memset(mix_buffer_aux_, 0, sizeof(mix_buffer_aux_));
 1051              		.loc 1 20 11 is_stmt 0 discriminator 6 view .LVU297
 1052 00d4 04F59540 		add	r0, r4, #19072
 1053 00d8 2946     		mov	r1, r5
 1054 00da 8022     		movs	r2, #128
 1055 00dc 3430     		adds	r0, r0, #52
 1056 00de FFF7FEFF 		bl	memset
 1057              	.LVL39:
  21:Polyphony.cpp **** }
 1058              		.loc 1 21 5 is_stmt 1 discriminator 6 view .LVU298
  21:Polyphony.cpp **** }
 1059              		.loc 1 21 11 is_stmt 0 discriminator 6 view .LVU299
 1060 00e2 04F59640 		add	r0, r4, #19200
 1061 00e6 8022     		movs	r2, #128
 1062 00e8 2946     		mov	r1, r5
 1063 00ea 3430     		adds	r0, r0, #52
 1064 00ec FFF7FEFF 		bl	memset
 1065              	.LVL40:
 1066              	.LBE1654:
  22:Polyphony.cpp **** 
 1067              		.loc 1 22 1 discriminator 6 view .LVU300
 1068 00f0 2046     		mov	r0, r4
 1069 00f2 38BD     		pop	{r3, r4, r5, pc}
 1070              	.LVL41:
 1071              	.L25:
  22:Polyphony.cpp **** 
 1072              		.loc 1 22 1 discriminator 6 view .LVU301
 1073              		.align	2
 1074              	.L24:
 1075 00f4 08000000 		.word	_ZTVN6plaits14AdditiveEngineE+8
 1076 00f8 08000000 		.word	_ZTVN6plaits14BassDrumEngineE+8
 1077 00fc 08000000 		.word	_ZTVN6plaits11ChordEngineE+8
 1078 0100 08000000 		.word	_ZTVN6plaits8FMEngineE+8
 1079 0104 08000000 		.word	_ZTVN6plaits11GrainEngineE+8
 1080 0108 08000000 		.word	_ZTVN6plaits11HiHatEngineE+8
 1081 010c 08000000 		.word	_ZTVN6plaits11ModalEngineE+8
 1082 0110 08000000 		.word	_ZTVN6plaits11NoiseEngineE+8
 1083 0114 08000000 		.word	_ZTVN6plaits14ParticleEngineE+8
 1084 0118 08000000 		.word	_ZTVN6plaits15SnareDrumEngineE+8
 1085 011c 08000000 		.word	_ZTVN6plaits12SpeechEngineE+8
 1086 0120 08000000 		.word	_ZTVN6plaits12StringEngineE+8
 1087 0124 08000000 		.word	_ZTVN6plaits11SwarmEngineE+8
 1088 0128 08000000 		.word	_ZTVN6plaits19VirtualAnalogEngineE+8
 1089 012c 08000000 		.word	_ZTVN6plaits17WaveshapingEngineE+8
 1090 0130 08000000 		.word	_ZTVN6plaits15WavetableEngineE+8
 1091              		.cfi_endproc
 1092              	.LFE6116:
 1094              		.global	_ZN15PolyphonyEngineC1Ev
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 77


 1095              		.thumb_set _ZN15PolyphonyEngineC1Ev,_ZN15PolyphonyEngineC2Ev
 1096              		.section	.text._ZN15PolyphonyEngine11ResetVoicesEv,"ax",%progbits
 1097              		.align	1
 1098              		.global	_ZN15PolyphonyEngine11ResetVoicesEv
 1099              		.syntax unified
 1100              		.thumb
 1101              		.thumb_func
 1103              	_ZN15PolyphonyEngine11ResetVoicesEv:
 1104              	.LVL42:
 1105              	.LFB6124:
  30:Polyphony.cpp **** 
  31:Polyphony.cpp **** void PolyphonyEngine::Init(daisy::DaisySeed* hw) {
  32:Polyphony.cpp ****     hw_ptr_ = hw;
  33:Polyphony.cpp ****     AllocateVoices(); 
  34:Polyphony.cpp ****     InitVoiceParameters(); 
  35:Polyphony.cpp **** }
  36:Polyphony.cpp **** 
  37:Polyphony.cpp **** void PolyphonyEngine::HandleTouchInput(uint16_t current_touch_state_param, uint16_t last_touch_stat
  38:Polyphony.cpp ****     bool percussive_engine = (engine_index > 7);
  39:Polyphony.cpp **** 
  40:Polyphony.cpp ****     for (int i = 0; i < 12; ++i) {
  41:Polyphony.cpp ****         bool pad_currently_pressed = (current_touch_state_param >> i) & 1;
  42:Polyphony.cpp ****         bool pad_was_pressed = (last_touch_state_param >> i) & 1; 
  43:Polyphony.cpp ****         float note_for_pad = PolyphonyEngine::kTouchMidiNotes_[i];
  44:Polyphony.cpp **** 
  45:Polyphony.cpp ****         if (pad_currently_pressed && !pad_was_pressed) { // Note ON
  46:Polyphony.cpp ****             if (poly_mode) {
  47:Polyphony.cpp ****                 int voice_idx = FindFreeVoice(effective_num_voices); 
  48:Polyphony.cpp ****                 if (voice_idx != -1) {
  49:Polyphony.cpp ****                     voice_note_[voice_idx] = note_for_pad;
  50:Polyphony.cpp ****                     voice_active_[voice_idx] = true;
  51:Polyphony.cpp ****                     modulations_[voice_idx].trigger = 1.0f; 
  52:Polyphony.cpp ****                     if (percussive_engine) {
  53:Polyphony.cpp ****                         modulations_[voice_idx].trigger_patched = true;
  54:Polyphony.cpp ****                     } else {
  55:Polyphony.cpp ****                         modulations_[voice_idx].trigger_patched = false;
  56:Polyphony.cpp ****                     }
  57:Polyphony.cpp ****                     voice_envelopes_[voice_idx].Trigger(); 
  58:Polyphony.cpp ****                 }
  59:Polyphony.cpp ****             } else { // Mono mode
  60:Polyphony.cpp ****                 AssignMonoNote(note_for_pad, percussive_engine);
  61:Polyphony.cpp ****             }
  62:Polyphony.cpp ****         } else if (!pad_currently_pressed && pad_was_pressed) { // Note OFF
  63:Polyphony.cpp ****             if (poly_mode) {
  64:Polyphony.cpp ****                  int voice_idx = FindVoiceForNote(note_for_pad, engine_index, poly_mode, effective_
  65:Polyphony.cpp ****                  if (voice_idx != -1) {
  66:Polyphony.cpp ****                      voice_active_[voice_idx] = false; 
  67:Polyphony.cpp ****                      voice_envelopes_[voice_idx].Release(); 
  68:Polyphony.cpp ****                      modulations_[voice_idx].trigger_patched = false; 
  69:Polyphony.cpp ****                  }
  70:Polyphony.cpp ****             } else { // Mono mode
  71:Polyphony.cpp ****                 if (voice_active_[0] && fabsf(voice_note_[0] - note_for_pad) < 0.1f) {
  72:Polyphony.cpp ****                     voice_active_[0] = false; 
  73:Polyphony.cpp ****                     voice_envelopes_[0].Release();
  74:Polyphony.cpp ****                     modulations_[0].trigger_patched = false;
  75:Polyphony.cpp ****                 }
  76:Polyphony.cpp ****             }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 78


  77:Polyphony.cpp ****         }
  78:Polyphony.cpp ****     }
  79:Polyphony.cpp **** }
  80:Polyphony.cpp **** 
  81:Polyphony.cpp **** void PolyphonyEngine::RenderBlock(const RenderParameters& params) {
  82:Polyphony.cpp ****     PrepVoiceParams(params);
  83:Polyphony.cpp ****     
  84:Polyphony.cpp ****     ProcessEnvelopes(params.poly_mode);
  85:Polyphony.cpp **** 
  86:Polyphony.cpp ****     if (params.arp_on) {
  87:Polyphony.cpp ****         modulations_[0].trigger = 0.0f;
  88:Polyphony.cpp ****         modulations_[0].trigger_patched = false; 
  89:Polyphony.cpp ****     }
  90:Polyphony.cpp **** }
  91:Polyphony.cpp **** 
  92:Polyphony.cpp **** void PolyphonyEngine::ResetVoices() {
 1106              		.loc 1 92 37 is_stmt 1 view -0
 1107              		.cfi_startproc
 1108              		@ args = 0, pretend = 0, frame = 0
 1109              		@ frame_needed = 0, uses_anonymous_args = 0
  93:Polyphony.cpp ****     for (int v = 0; v < NUM_VOICES; v++) {
 1110              		.loc 1 93 5 view .LVU303
 1111              	.LBB1655:
 1112              		.loc 1 93 23 view .LVU304
 1113              	.LBE1655:
  92:Polyphony.cpp ****     for (int v = 0; v < NUM_VOICES; v++) {
 1114              		.loc 1 92 37 is_stmt 0 view .LVU305
 1115 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1116              		.cfi_def_cfa_offset 24
 1117              		.cfi_offset 3, -24
 1118              		.cfi_offset 4, -20
 1119              		.cfi_offset 5, -16
 1120              		.cfi_offset 6, -12
 1121              		.cfi_offset 7, -8
 1122              		.cfi_offset 14, -4
 1123 0002 00F58F47 		add	r7, r0, #18304
 1124 0006 00F59146 		add	r6, r0, #18560
 1125 000a 00F58E45 		add	r5, r0, #18176
 1126 000e 00F59144 		add	r4, r0, #18560
 1127 0012 1037     		adds	r7, r7, #16
 1128 0014 2036     		adds	r6, r6, #32
 1129 0016 0835     		adds	r5, r5, #8
 1130 0018 2434     		adds	r4, r4, #36
 1131              	.LVL43:
 1132              	.L27:
 1133              	.LBB1656:
  94:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 1134              		.loc 1 94 9 is_stmt 1 discriminator 2 view .LVU306
 1135              		.loc 1 94 34 is_stmt 0 discriminator 2 view .LVU307
 1136 001a 3846     		mov	r0, r7
  93:Polyphony.cpp ****     for (int v = 0; v < NUM_VOICES; v++) {
 1137              		.loc 1 93 23 discriminator 2 view .LVU308
 1138 001c 2835     		adds	r5, r5, #40
 1139              		.loc 1 94 34 discriminator 2 view .LVU309
 1140 001e FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 1141              	.LVL44:
  95:Polyphony.cpp ****         voice_active_[v] = false;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 79


 1142              		.loc 1 95 9 is_stmt 1 discriminator 2 view .LVU310
 1143              		.loc 1 95 26 is_stmt 0 discriminator 2 view .LVU311
 1144 0022 0023     		movs	r3, #0
  96:Polyphony.cpp ****         modulations_[v].trigger = 0.0f;
 1145              		.loc 1 96 33 discriminator 2 view .LVU312
 1146 0024 0022     		movs	r2, #0
  93:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 1147              		.loc 1 93 23 discriminator 2 view .LVU313
 1148 0026 4437     		adds	r7, r7, #68
  95:Polyphony.cpp ****         voice_active_[v] = false;
 1149              		.loc 1 95 26 discriminator 2 view .LVU314
 1150 0028 06F8013B 		strb	r3, [r6], #1
 1151              	.LVL45:
 1152              		.loc 1 96 9 is_stmt 1 discriminator 2 view .LVU315
  93:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 1153              		.loc 1 93 23 is_stmt 0 discriminator 2 view .LVU316
 1154 002c A642     		cmp	r6, r4
 1155              		.loc 1 96 33 discriminator 2 view .LVU317
 1156 002e 45F8282C 		str	r2, [r5, #-40]	@ float
  97:Polyphony.cpp ****         modulations_[v].trigger_patched = false; 
 1157              		.loc 1 97 9 is_stmt 1 discriminator 2 view .LVU318
 1158              		.loc 1 97 41 is_stmt 0 discriminator 2 view .LVU319
 1159 0032 05F81D3C 		strb	r3, [r5, #-29]
  98:Polyphony.cpp ****         modulations_[v].level_patched = false;  
 1160              		.loc 1 98 9 is_stmt 1 discriminator 2 view .LVU320
 1161              		.loc 1 98 39 is_stmt 0 discriminator 2 view .LVU321
 1162 0036 05F81C3C 		strb	r3, [r5, #-28]
  93:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 1163              		.loc 1 93 5 is_stmt 1 discriminator 2 view .LVU322
 1164              	.LVL46:
  93:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 1165              		.loc 1 93 23 discriminator 2 view .LVU323
 1166 003a EED1     		bne	.L27
 1167              	.LBE1656:
  99:Polyphony.cpp ****     }
 100:Polyphony.cpp **** }
 1168              		.loc 1 100 1 is_stmt 0 view .LVU324
 1169 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1170              		.loc 1 100 1 view .LVU325
 1171              		.cfi_endproc
 1172              	.LFE6124:
 1174              		.section	.text._ZN15PolyphonyEngine14AllocateVoicesEv,"ax",%progbits
 1175              		.align	1
 1176              		.global	_ZN15PolyphonyEngine14AllocateVoicesEv
 1177              		.syntax unified
 1178              		.thumb
 1179              		.thumb_func
 1181              	_ZN15PolyphonyEngine14AllocateVoicesEv:
 1182              	.LVL47:
 1183              	.LFB6125:
 101:Polyphony.cpp **** 
 102:Polyphony.cpp **** void PolyphonyEngine::AllocateVoices() {
 1184              		.loc 1 102 40 is_stmt 1 view -0
 1185              		.cfi_startproc
 1186              		@ args = 0, pretend = 0, frame = 0
 1187              		@ frame_needed = 0, uses_anonymous_args = 0
 103:Polyphony.cpp ****     if (!allocator_) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 80


 1188              		.loc 1 103 5 view .LVU327
 102:Polyphony.cpp ****     if (!allocator_) {
 1189              		.loc 1 102 40 is_stmt 0 view .LVU328
 1190 0000 70B5     		push	{r4, r5, r6, lr}
 1191              		.cfi_def_cfa_offset 16
 1192              		.cfi_offset 4, -16
 1193              		.cfi_offset 5, -12
 1194              		.cfi_offset 6, -8
 1195              		.cfi_offset 14, -4
 1196              		.loc 1 103 10 view .LVU329
 1197 0002 00F58046 		add	r6, r0, #16384
 102:Polyphony.cpp ****     if (!allocator_) {
 1198              		.loc 1 102 40 view .LVU330
 1199 0006 0446     		mov	r4, r0
 1200              		.loc 1 103 5 view .LVU331
 1201 0008 D6F8B43B 		ldr	r3, [r6, #2996]
 1202 000c 5BB9     		cbnz	r3, .L30
 104:Polyphony.cpp ****         allocator_ = new stmlib::BufferAllocator(shared_buffer, sizeof(shared_buffer));
 1203              		.loc 1 104 9 is_stmt 1 view .LVU332
 1204              		.loc 1 104 86 is_stmt 0 view .LVU333
 1205 000e 1020     		movs	r0, #16
 1206              	.LVL48:
 1207              		.loc 1 104 86 view .LVU334
 1208 0010 FFF7FEFF 		bl	_Znwj
 1209              	.LVL49:
 1210              	.LBB1657:
 1211              	.LBI1657:
  40:eurorack/stmlib/utils/buffer_allocator.h ****   
  41:eurorack/stmlib/utils/buffer_allocator.h ****   BufferAllocator(void* buffer, size_t size) {
 1212              		.loc 2 41 3 is_stmt 1 view .LVU335
 1213              	.LBE1657:
  42:eurorack/stmlib/utils/buffer_allocator.h ****     Init(buffer, size);
 1214              		.loc 2 42 5 view .LVU336
 1215              	.LBB1664:
 1216              	.LBB1658:
 1217              	.LBI1658:
  43:eurorack/stmlib/utils/buffer_allocator.h ****   }
  44:eurorack/stmlib/utils/buffer_allocator.h ****   
  45:eurorack/stmlib/utils/buffer_allocator.h ****   inline void Init(void* buffer, size_t size) {
 1218              		.loc 2 45 15 view .LVU337
 1219              	.LBB1659:
  46:eurorack/stmlib/utils/buffer_allocator.h ****     buffer_ = static_cast<uint8_t*>(buffer);
 1220              		.loc 2 46 5 view .LVU338
 1221              		.loc 2 46 13 is_stmt 0 view .LVU339
 1222 0014 0B4A     		ldr	r2, .L33
  47:eurorack/stmlib/utils/buffer_allocator.h ****     size_ = size;
 1223              		.loc 2 47 11 view .LVU340
 1224 0016 4FF48023 		mov	r3, #262144
 1225              	.LBE1659:
 1226              	.LBE1658:
 1227              	.LBE1664:
 1228              		.loc 1 104 20 view .LVU341
 1229 001a C6F8B40B 		str	r0, [r6, #2996]
 1230              	.LBB1665:
 1231              	.LBB1663:
 1232              	.LBB1662:
  46:eurorack/stmlib/utils/buffer_allocator.h ****     buffer_ = static_cast<uint8_t*>(buffer);
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 81


 1233              		.loc 2 46 13 view .LVU342
 1234 001e 4260     		str	r2, [r0, #4]
 1235              		.loc 2 47 5 is_stmt 1 view .LVU343
 1236              		.loc 2 47 11 is_stmt 0 view .LVU344
 1237 0020 C360     		str	r3, [r0, #12]
  48:eurorack/stmlib/utils/buffer_allocator.h ****     Free();
 1238              		.loc 2 48 5 is_stmt 1 view .LVU345
 1239              	.LVL50:
 1240              	.LBB1660:
 1241              	.LBI1660:
  49:eurorack/stmlib/utils/buffer_allocator.h ****   }
  50:eurorack/stmlib/utils/buffer_allocator.h **** 
  51:eurorack/stmlib/utils/buffer_allocator.h ****   template<typename T>
  52:eurorack/stmlib/utils/buffer_allocator.h ****   inline T* Allocate() {
  53:eurorack/stmlib/utils/buffer_allocator.h ****     return Allocate<T>(1);
  54:eurorack/stmlib/utils/buffer_allocator.h ****   }
  55:eurorack/stmlib/utils/buffer_allocator.h ****   
  56:eurorack/stmlib/utils/buffer_allocator.h ****   template<typename T>
  57:eurorack/stmlib/utils/buffer_allocator.h ****   inline T* Allocate(size_t size) {
  58:eurorack/stmlib/utils/buffer_allocator.h ****     size_t size_bytes = sizeof(T) * size;
  59:eurorack/stmlib/utils/buffer_allocator.h ****     if (size_bytes <= free_) {
  60:eurorack/stmlib/utils/buffer_allocator.h ****       T* start = static_cast<T*>(static_cast<void*>(next_));
  61:eurorack/stmlib/utils/buffer_allocator.h ****       next_ += size_bytes;
  62:eurorack/stmlib/utils/buffer_allocator.h ****       free_ -= size_bytes;
  63:eurorack/stmlib/utils/buffer_allocator.h ****       return start;
  64:eurorack/stmlib/utils/buffer_allocator.h ****     } else {
  65:eurorack/stmlib/utils/buffer_allocator.h ****       return NULL;
  66:eurorack/stmlib/utils/buffer_allocator.h ****     }
  67:eurorack/stmlib/utils/buffer_allocator.h ****   }
  68:eurorack/stmlib/utils/buffer_allocator.h ****   
  69:eurorack/stmlib/utils/buffer_allocator.h ****   inline void Free() {
 1242              		.loc 2 69 15 view .LVU346
 1243              	.LBB1661:
  70:eurorack/stmlib/utils/buffer_allocator.h ****     next_ = buffer_;
 1244              		.loc 2 70 5 view .LVU347
 1245              		.loc 2 70 11 is_stmt 0 view .LVU348
 1246 0022 0260     		str	r2, [r0]
  71:eurorack/stmlib/utils/buffer_allocator.h ****     free_ = size_;
 1247              		.loc 2 71 5 is_stmt 1 view .LVU349
 1248              		.loc 2 71 11 is_stmt 0 view .LVU350
 1249 0024 8360     		str	r3, [r0, #8]
 1250              	.LVL51:
 1251              	.L30:
 1252              		.loc 2 71 11 view .LVU351
 1253 0026 04F58C45 		add	r5, r4, #17920
 1254 002a 5035     		adds	r5, r5, #80
 1255              	.LVL52:
 1256              	.L31:
 1257              		.loc 2 71 11 view .LVU352
 1258              	.LBE1661:
 1259              	.LBE1660:
 1260              	.LBE1662:
 1261              	.LBE1663:
 1262              	.LBE1665:
 1263              	.LBB1666:
 105:Polyphony.cpp ****     }
 106:Polyphony.cpp **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 82


 107:Polyphony.cpp ****     for (int i = 0; i < NUM_VOICES; ++i) {
 108:Polyphony.cpp ****         voices_[i].Init(allocator_);
 1264              		.loc 1 108 9 is_stmt 1 discriminator 2 view .LVU353
 1265              		.loc 1 108 24 is_stmt 0 discriminator 2 view .LVU354
 1266 002c 2046     		mov	r0, r4
 107:Polyphony.cpp ****         voices_[i].Init(allocator_);
 1267              		.loc 1 107 23 discriminator 2 view .LVU355
 1268 002e 04F58C54 		add	r4, r4, #4480
 1269              		.loc 1 108 24 discriminator 2 view .LVU356
 1270 0032 D6F8B41B 		ldr	r1, [r6, #2996]
 107:Polyphony.cpp ****         voices_[i].Init(allocator_);
 1271              		.loc 1 107 23 discriminator 2 view .LVU357
 1272 0036 1434     		adds	r4, r4, #20
 1273              		.loc 1 108 24 discriminator 2 view .LVU358
 1274 0038 FFF7FEFF 		bl	_ZN6plaits5Voice4InitEPN6stmlib15BufferAllocatorE
 1275              	.LVL53:
 107:Polyphony.cpp ****         voices_[i].Init(allocator_);
 1276              		.loc 1 107 5 is_stmt 1 discriminator 2 view .LVU359
 107:Polyphony.cpp ****         voices_[i].Init(allocator_);
 1277              		.loc 1 107 23 discriminator 2 view .LVU360
 1278 003c AC42     		cmp	r4, r5
 1279 003e F5D1     		bne	.L31
 1280              	.LBE1666:
 109:Polyphony.cpp ****     }
 110:Polyphony.cpp **** }
 1281              		.loc 1 110 1 is_stmt 0 view .LVU361
 1282 0040 70BD     		pop	{r4, r5, r6, pc}
 1283              	.LVL54:
 1284              	.L34:
 1285              		.loc 1 110 1 view .LVU362
 1286 0042 00BF     		.align	2
 1287              	.L33:
 1288 0044 00000000 		.word	shared_buffer
 1289              		.cfi_endproc
 1290              	.LFE6125:
 1292              		.section	.text._ZN15PolyphonyEngine19InitVoiceParametersEv,"ax",%progbits
 1293              		.align	1
 1294              		.global	_ZN15PolyphonyEngine19InitVoiceParametersEv
 1295              		.syntax unified
 1296              		.thumb
 1297              		.thumb_func
 1299              	_ZN15PolyphonyEngine19InitVoiceParametersEv:
 1300              	.LVL55:
 1301              	.LFB6126:
 111:Polyphony.cpp **** 
 112:Polyphony.cpp **** void PolyphonyEngine::InitVoiceParameters() {
 1302              		.loc 1 112 45 is_stmt 1 view -0
 1303              		.cfi_startproc
 1304              		@ args = 0, pretend = 0, frame = 0
 1305              		@ frame_needed = 0, uses_anonymous_args = 0
 113:Polyphony.cpp ****     float sample_rate_val = SAMPLE_RATE;
 1306              		.loc 1 113 5 view .LVU364
 1307              		.loc 1 113 11 is_stmt 0 view .LVU365
 1308 0000 4D4B     		ldr	r3, .L38
 112:Polyphony.cpp ****     float sample_rate_val = SAMPLE_RATE;
 1309              		.loc 1 112 45 view .LVU366
 1310 0002 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 83


 1311              		.cfi_def_cfa_offset 24
 1312              		.cfi_offset 4, -24
 1313              		.cfi_offset 5, -20
 1314              		.cfi_offset 6, -16
 1315              		.cfi_offset 7, -12
 1316              		.cfi_offset 8, -8
 1317              		.cfi_offset 14, -4
 1318 0006 2DED0C8B 		vpush.64	{d8, d9, d10, d11, d12, d13}
 1319              		.cfi_def_cfa_offset 72
 1320              		.cfi_offset 80, -72
 1321              		.cfi_offset 81, -68
 1322              		.cfi_offset 82, -64
 1323              		.cfi_offset 83, -60
 1324              		.cfi_offset 84, -56
 1325              		.cfi_offset 85, -52
 1326              		.cfi_offset 86, -48
 1327              		.cfi_offset 87, -44
 1328              		.cfi_offset 88, -40
 1329              		.cfi_offset 89, -36
 1330              		.cfi_offset 90, -32
 1331              		.cfi_offset 91, -28
 1332              	.LBB1684:
 1333              	.LBB1685:
 1334              	.LBB1686:
  31:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
 1335              		.loc 3 31 37 view .LVU367
 1336 000a B2EE00AA 		vmov.f32	s20, #8.0e+0
 1337              	.LBE1686:
 1338              	.LBE1685:
 1339              	.LBE1684:
 1340              		.loc 1 113 11 view .LVU368
 1341 000e D3ED007A 		vldr.32	s15, [r3]
 1342              	.LVL56:
 114:Polyphony.cpp **** 
 115:Polyphony.cpp ****     for (int i = 0; i < NUM_VOICES; ++i) {
 1343              		.loc 1 115 5 is_stmt 1 view .LVU369
 1344              	.LBB1737:
 1345              		.loc 1 115 23 view .LVU370
 1346              	.LBB1698:
 1347              	.LBB1699:
 1348              	.LBB1700:
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 1349              		.loc 3 56 61 is_stmt 0 view .LVU371
 1350 0012 DFED4A9A 		vldr.32	s19, .L38+4
  57:VoiceEnvelope.h ****             curve = 0.5f;
 1351              		.loc 3 57 60 view .LVU372
 1352 0016 B6EE088A 		vmov.f32	s16, #7.5e-1
 1353              	.LBE1700:
 1354              	.LBE1699:
 1355              	.LBE1698:
 1356              	.LBB1717:
 1357              	.LBB1691:
  32:VoiceEnvelope.h ****         min_decay_time_a = 0.4f * sample_rate;      // 400ms min decay A
 1358              		.loc 3 32 35 view .LVU373
 1359 001a 9FED49BA 		vldr.32	s22, .L38+8
 1360 001e 00F59147 		add	r7, r0, #18560
  31:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 84


 1361              		.loc 3 31 37 view .LVU374
 1362 0022 27EE8AAA 		vmul.f32	s20, s15, s20
  34:VoiceEnvelope.h ****         reset_time = 0.008f * sample_rate;          // 8ms reset time
 1363              		.loc 3 34 36 view .LVU375
 1364 0026 DFED47AA 		vldr.32	s21, .L38+12
  32:VoiceEnvelope.h ****         min_decay_time_a = 0.4f * sample_rate;      // 400ms min decay A
 1365              		.loc 3 32 35 view .LVU376
 1366 002a 27EE8BBA 		vmul.f32	s22, s15, s22
  33:VoiceEnvelope.h ****         min_decay_time_b = 0.0001f * sample_rate;    // 0.1ms min decay B (pulse-like release)
 1367              		.loc 3 33 33 view .LVU377
 1368 002e DFED46BA 		vldr.32	s23, .L38+16
  34:VoiceEnvelope.h ****         reset_time = 0.008f * sample_rate;          // 8ms reset time
 1369              		.loc 3 34 36 view .LVU378
 1370 0032 67EEAAAA 		vmul.f32	s21, s15, s21
  35:VoiceEnvelope.h ****         reset_coefficient = 1.0f / reset_time;
 1371              		.loc 3 35 29 view .LVU379
 1372 0036 9FED459A 		vldr.32	s18, .L38+20
 1373              	.LBE1691:
 1374              	.LBE1717:
 1375              	.LBB1718:
 1376              	.LBB1708:
 1377              	.LBB1701:
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 1378              		.loc 3 56 61 view .LVU380
 1379 003a 6AEE298A 		vmul.f32	s17, s20, s19
 1380 003e 00F58C45 		add	r5, r0, #17920
  57:VoiceEnvelope.h ****             curve = 0.5f;
 1381              		.loc 3 57 60 view .LVU381
 1382 0042 2AEE088A 		vmul.f32	s16, s20, s16
 1383 0046 00F59146 		add	r6, r0, #18560
 1384              	.LBE1701:
 1385              	.LBE1708:
 1386              	.LBE1718:
 1387              	.LBB1719:
 1388              	.LBB1692:
  35:VoiceEnvelope.h ****         reset_coefficient = 1.0f / reset_time;
 1389              		.loc 3 35 29 view .LVU382
 1390 004a 27EE899A 		vmul.f32	s18, s15, s18
 1391 004e 2437     		adds	r7, r7, #36
 1392              	.LBE1692:
 1393              	.LBE1719:
 1394              	.LBB1720:
 1395              	.LBB1709:
 1396              	.LBB1702:
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 1397              		.loc 3 56 72 view .LVU383
 1398 0050 68EEA98A 		vmul.f32	s17, s17, s19
 1399 0054 00F58F44 		add	r4, r0, #18304
  57:VoiceEnvelope.h ****             curve = 0.5f;
 1400              		.loc 3 57 26 view .LVU384
 1401 0058 BCEEC88A 		vcvt.u32.f32	s16, s16
 1402 005c 00F59143 		add	r3, r0, #18560
 1403              	.LBE1702:
 1404              	.LBE1709:
 1405              	.LBE1720:
 1406              	.LBB1721:
 1407              	.LBB1693:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 85


  33:VoiceEnvelope.h ****         min_decay_time_b = 0.0001f * sample_rate;    // 0.1ms min decay B (pulse-like release)
 1408              		.loc 3 33 33 view .LVU385
 1409 0060 67EEABBA 		vmul.f32	s23, s15, s23
 1410 0064 6C35     		adds	r5, r5, #108
 1411              	.LBE1693:
 1412              	.LBE1721:
 1413              	.LBB1722:
 1414              	.LBB1710:
 1415              	.LBB1703:
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 1416              		.loc 3 56 27 view .LVU386
 1417 0066 FCEEE88A 		vcvt.u32.f32	s17, s17
 1418 006a 2036     		adds	r6, r6, #32
  57:VoiceEnvelope.h ****             curve = 0.5f;
 1419              		.loc 3 57 86 view .LVU387
 1420 006c B8EE488A 		vcvt.f32.u32	s16, s16
 1421 0070 1134     		adds	r4, r4, #17
 1422              	.LBE1703:
 1423              	.LBE1710:
 1424              	.LBE1722:
 1425              	.LBB1723:
 1426              	.LBB1694:
  36:VoiceEnvelope.h ****         
 1427              		.loc 3 36 34 view .LVU388
 1428 0072 F7EE007A 		vmov.f32	s15, #1.0e+0
 1429              	.LVL57:
  36:VoiceEnvelope.h ****         
 1430              		.loc 3 36 34 view .LVU389
 1431 0076 3433     		adds	r3, r3, #52
 1432              	.LBE1694:
 1433              	.LBE1723:
 1434              	.LBB1724:
 1435              	.LBB1711:
 1436              	.LBB1704:
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 1437              		.loc 3 56 84 view .LVU390
 1438 0078 F8EE688A 		vcvt.f32.u32	s17, s17
 1439 007c B846     		mov	r8, r7
  57:VoiceEnvelope.h ****             curve = 0.5f;
 1440              		.loc 3 57 86 view .LVU391
 1441 007e 38EE2A8A 		vadd.f32	s16, s16, s21
 1442              	.LBE1704:
 1443              	.LBE1711:
 1444              	.LBE1724:
 1445              	.LBB1725:
 1446              	.LBB1695:
  36:VoiceEnvelope.h ****         
 1447              		.loc 3 36 34 view .LVU392
 1448 0082 87EE89DA 		vdiv.f32	s26, s15, s18
 1449              	.LBE1695:
 1450              	.LBE1725:
 1451              	.LBB1726:
 1452              	.LBB1712:
 1453              	.LBB1705:
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 1454              		.loc 3 56 84 view .LVU393
 1455 0086 78EE8B8A 		vadd.f32	s17, s17, s22
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 86


  57:VoiceEnvelope.h ****             curve = 0.5f;
 1456              		.loc 3 57 24 view .LVU394
 1457 008a BCEEC88A 		vcvt.u32.f32	s16, s16
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 1458              		.loc 3 56 25 view .LVU395
 1459 008e FCEEE88A 		vcvt.u32.f32	s17, s17
 1460              	.LBE1705:
  60:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
 1461              		.loc 3 60 35 view .LVU396
 1462 0092 B8EE687A 		vcvt.f32.u32	s14, s17
 1463 0096 C7EE87CA 		vdiv.f32	s25, s15, s14
  61:VoiceEnvelope.h ****         SetAttackCurve(curve);
 1464              		.loc 3 61 34 view .LVU397
 1465 009a B8EE487A 		vcvt.f32.u32	s14, s16
 1466 009e 87EE87CA 		vdiv.f32	s24, s15, s14
 1467              	.LVL58:
 1468              	.L36:
  61:VoiceEnvelope.h ****         SetAttackCurve(curve);
 1469              		.loc 3 61 34 view .LVU398
 1470              	.LBE1712:
 1471              	.LBE1726:
 116:Polyphony.cpp ****         patches_[i].engine = 0;      
 1472              		.loc 1 116 9 is_stmt 1 discriminator 2 view .LVU399
 1473              		.loc 1 116 28 is_stmt 0 discriminator 2 view .LVU400
 1474 00a2 0021     		movs	r1, #0
 1475              	.LBB1727:
 1476              	.LBB1696:
  31:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
 1477              		.loc 3 31 23 discriminator 2 view .LVU401
 1478 00a4 04F10F02 		add	r2, r4, #15
 1479              	.LBE1696:
 1480              	.LBE1727:
 117:Polyphony.cpp ****         modulations_[i].engine = 0; 
 1481              		.loc 1 117 32 discriminator 2 view .LVU402
 1482 00a8 C5ED219A 		vstr.32	s19, [r5, #132]
 118:Polyphony.cpp ****         modulations_[i].trigger = 0.0f;
 119:Polyphony.cpp ****         modulations_[i].level_patched = false;
 120:Polyphony.cpp ****         voice_active_[i] = false;
 121:Polyphony.cpp ****         voice_note_[i] = 0.0f;
 122:Polyphony.cpp ****         
 123:Polyphony.cpp ****         voice_envelopes_[i].Init(sample_rate_val); 
 124:Polyphony.cpp ****         voice_envelopes_[i].SetMode(VoiceEnvelope::MODE_AR);
 125:Polyphony.cpp ****         voice_envelopes_[i].SetShape(0.5f);
 126:Polyphony.cpp **** 
 127:Polyphony.cpp ****         memset(output_buffers_[i], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 1483              		.loc 1 127 15 discriminator 2 view .LVU403
 1484 00ac 1846     		mov	r0, r3
 116:Polyphony.cpp ****         modulations_[i].engine = 0; 
 1485              		.loc 1 116 28 discriminator 2 view .LVU404
 1486 00ae 2960     		str	r1, [r5]
 117:Polyphony.cpp ****         modulations_[i].engine = 0; 
 1487              		.loc 1 117 9 is_stmt 1 discriminator 2 view .LVU405
 118:Polyphony.cpp ****         modulations_[i].trigger = 0.0f;
 1488              		.loc 1 118 9 discriminator 2 view .LVU406
 115:Polyphony.cpp ****         patches_[i].engine = 0;      
 1489              		.loc 1 115 23 is_stmt 0 discriminator 2 view .LVU407
 1490 00b0 2835     		adds	r5, r5, #40
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 87


 118:Polyphony.cpp ****         modulations_[i].trigger = 0.0f;
 1491              		.loc 1 118 33 discriminator 2 view .LVU408
 1492 00b2 C5ED1D9A 		vstr.32	s19, [r5, #116]
 119:Polyphony.cpp ****         voice_active_[i] = false;
 1493              		.loc 1 119 9 is_stmt 1 discriminator 2 view .LVU409
 119:Polyphony.cpp ****         voice_active_[i] = false;
 1494              		.loc 1 119 39 is_stmt 0 discriminator 2 view .LVU410
 1495 00b6 85F88010 		strb	r1, [r5, #128]
 120:Polyphony.cpp ****         voice_note_[i] = 0.0f;
 1496              		.loc 1 120 9 is_stmt 1 discriminator 2 view .LVU411
 120:Polyphony.cpp ****         voice_note_[i] = 0.0f;
 1497              		.loc 1 120 26 is_stmt 0 discriminator 2 view .LVU412
 1498 00ba 06F8011B 		strb	r1, [r6], #1
 1499              	.LVL59:
 121:Polyphony.cpp ****         
 1500              		.loc 1 121 9 is_stmt 1 discriminator 2 view .LVU413
 121:Polyphony.cpp ****         
 1501              		.loc 1 121 24 is_stmt 0 discriminator 2 view .LVU414
 1502 00be E7EC019A 		vstmia.32	r7!, {s19}
 123:Polyphony.cpp ****         voice_envelopes_[i].SetMode(VoiceEnvelope::MODE_AR);
 1503              		.loc 1 123 9 is_stmt 1 discriminator 2 view .LVU415
 1504              	.LVL60:
 1505              	.LBB1728:
 1506              	.LBI1685:
  30:VoiceEnvelope.h ****         time_range_2x = 2.0f * 4.0f * sample_rate;  // 4s max time
 1507              		.loc 3 30 10 discriminator 2 view .LVU416
 1508              	.LBB1697:
  31:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
 1509              		.loc 3 31 9 discriminator 2 view .LVU417
  31:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
 1510              		.loc 3 31 23 is_stmt 0 discriminator 2 view .LVU418
 1511 00c2 82ED00AA 		vstr.32	s20, [r2]
  32:VoiceEnvelope.h ****         min_decay_time_a = 0.4f * sample_rate;      // 400ms min decay A
 1512              		.loc 3 32 9 is_stmt 1 discriminator 2 view .LVU419
  32:VoiceEnvelope.h ****         min_decay_time_a = 0.4f * sample_rate;      // 400ms min decay A
 1513              		.loc 3 32 25 is_stmt 0 discriminator 2 view .LVU420
 1514 00c6 04F11302 		add	r2, r4, #19
 1515 00ca 82ED00BA 		vstr.32	s22, [r2]
  33:VoiceEnvelope.h ****         min_decay_time_b = 0.0001f * sample_rate;    // 0.1ms min decay B (pulse-like release)
 1516              		.loc 3 33 9 is_stmt 1 discriminator 2 view .LVU421
  33:VoiceEnvelope.h ****         min_decay_time_b = 0.0001f * sample_rate;    // 0.1ms min decay B (pulse-like release)
 1517              		.loc 3 33 26 is_stmt 0 discriminator 2 view .LVU422
 1518 00ce 04F11702 		add	r2, r4, #23
 1519 00d2 C2ED00BA 		vstr.32	s23, [r2]
  34:VoiceEnvelope.h ****         reset_time = 0.008f * sample_rate;          // 8ms reset time
 1520              		.loc 3 34 9 is_stmt 1 discriminator 2 view .LVU423
  34:VoiceEnvelope.h ****         reset_time = 0.008f * sample_rate;          // 8ms reset time
 1521              		.loc 3 34 26 is_stmt 0 discriminator 2 view .LVU424
 1522 00d6 04F11B02 		add	r2, r4, #27
 1523 00da C2ED00AA 		vstr.32	s21, [r2]
  35:VoiceEnvelope.h ****         reset_coefficient = 1.0f / reset_time;
 1524              		.loc 3 35 9 is_stmt 1 discriminator 2 view .LVU425
  35:VoiceEnvelope.h ****         reset_coefficient = 1.0f / reset_time;
 1525              		.loc 3 35 20 is_stmt 0 discriminator 2 view .LVU426
 1526 00de 04F11F02 		add	r2, r4, #31
 1527 00e2 82ED009A 		vstr.32	s18, [r2]
  36:VoiceEnvelope.h ****         
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 88


 1528              		.loc 3 36 9 is_stmt 1 discriminator 2 view .LVU427
  36:VoiceEnvelope.h ****         
 1529              		.loc 3 36 27 is_stmt 0 discriminator 2 view .LVU428
 1530 00e6 04F12302 		add	r2, r4, #35
 1531 00ea 82ED00DA 		vstr.32	s26, [r2]
  39:VoiceEnvelope.h ****         SetReleaseCurve(0.5f);
 1532              		.loc 3 39 9 is_stmt 1 discriminator 2 view .LVU429
 1533              	.LVL61:
 1534              	.LBB1687:
 1535              	.LBI1687:
 109:VoiceEnvelope.h ****         float cu = value - 0.5f;
 1536              		.loc 3 109 10 discriminator 2 view .LVU430
 1537              	.LBB1688:
 110:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
 1538              		.loc 3 110 9 discriminator 2 view .LVU431
 111:VoiceEnvelope.h ****     }
 1539              		.loc 3 111 9 discriminator 2 view .LVU432
 111:VoiceEnvelope.h ****     }
 1540              		.loc 3 111 34 is_stmt 0 discriminator 2 view .LVU433
 1541 00ee E21D     		adds	r2, r4, #7
 1542 00f0 C2ED009A 		vstr.32	s19, [r2]
 1543              	.LVL62:
 111:VoiceEnvelope.h ****     }
 1544              		.loc 3 111 34 discriminator 2 view .LVU434
 1545              	.LBE1688:
 1546              	.LBE1687:
  40:VoiceEnvelope.h ****     }
 1547              		.loc 3 40 9 is_stmt 1 discriminator 2 view .LVU435
 1548              	.LBB1689:
 1549              	.LBI1689:
 114:VoiceEnvelope.h ****         float cu = value - 0.5f;
 1550              		.loc 3 114 10 discriminator 2 view .LVU436
 1551              	.LBB1690:
 115:VoiceEnvelope.h ****         release_curve_coefficient = 128.0f * cu * cu;
 1552              		.loc 3 115 9 discriminator 2 view .LVU437
 116:VoiceEnvelope.h ****     }
 1553              		.loc 3 116 9 discriminator 2 view .LVU438
 116:VoiceEnvelope.h ****     }
 1554              		.loc 3 116 35 is_stmt 0 discriminator 2 view .LVU439
 1555 00f4 04F10B02 		add	r2, r4, #11
 1556 00f8 C2ED009A 		vstr.32	s19, [r2]
 1557              	.LVL63:
 116:VoiceEnvelope.h ****     }
 1558              		.loc 3 116 35 discriminator 2 view .LVU440
 1559              	.LBE1690:
 1560              	.LBE1689:
 1561              	.LBE1697:
 1562              	.LBE1728:
 124:Polyphony.cpp ****         voice_envelopes_[i].SetShape(0.5f);
 1563              		.loc 1 124 9 is_stmt 1 discriminator 2 view .LVU441
 1564              	.LBB1729:
 1565              	.LBI1729:
  43:VoiceEnvelope.h ****         mode = new_mode;
 1566              		.loc 3 43 10 discriminator 2 view .LVU442
 1567              	.LBB1730:
  44:VoiceEnvelope.h ****     }
 1568              		.loc 3 44 9 discriminator 2 view .LVU443
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 89


 1569              	.LBE1730:
 1570              	.LBE1729:
 1571              	.LBB1732:
 1572              	.LBB1713:
 1573              	.LBB1706:
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 1574              		.loc 3 56 25 is_stmt 0 discriminator 2 view .LVU444
 1575 00fc 18EE902A 		vmov	r2, s17	@ int
 1576              	.LBE1706:
 1577              	.LBE1713:
 1578              	.LBE1732:
 1579              	.LBB1733:
 1580              	.LBB1731:
  44:VoiceEnvelope.h ****     }
 1581              		.loc 3 44 14 discriminator 2 view .LVU445
 1582 0100 2170     		strb	r1, [r4]
 1583              	.LVL64:
  44:VoiceEnvelope.h ****     }
 1584              		.loc 3 44 14 discriminator 2 view .LVU446
 1585              	.LBE1731:
 1586              	.LBE1733:
 125:Polyphony.cpp **** 
 1587              		.loc 1 125 9 is_stmt 1 discriminator 2 view .LVU447
 1588              	.LBB1734:
 1589              	.LBI1698:
  48:VoiceEnvelope.h ****         float curve;
 1590              		.loc 3 48 10 discriminator 2 view .LVU448
 1591              	.LBB1714:
  49:VoiceEnvelope.h ****         if (value < 0.5f) {
 1592              		.loc 3 49 9 discriminator 2 view .LVU449
  50:VoiceEnvelope.h ****             attack_time = min_attack_time;
 1593              		.loc 3 50 9 discriminator 2 view .LVU450
 1594              	.LBB1707:
  55:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(time_range_2x * norm_val * norm_val) + min_attack_tim
 1595              		.loc 3 55 13 discriminator 2 view .LVU451
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 1596              		.loc 3 56 13 discriminator 2 view .LVU452
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 1597              		.loc 3 56 25 is_stmt 0 discriminator 2 view .LVU453
 1598 0102 C4F83320 		str	r2, [r4, #51]
  57:VoiceEnvelope.h ****             curve = 0.5f;
 1599              		.loc 3 57 13 is_stmt 1 discriminator 2 view .LVU454
  57:VoiceEnvelope.h ****             curve = 0.5f;
 1600              		.loc 3 57 24 is_stmt 0 discriminator 2 view .LVU455
 1601 0106 18EE102A 		vmov	r2, s16	@ int
 1602 010a C4F83720 		str	r2, [r4, #55]
  58:VoiceEnvelope.h ****         }
 1603              		.loc 3 58 13 is_stmt 1 discriminator 2 view .LVU456
 1604              	.LVL65:
  58:VoiceEnvelope.h ****         }
 1605              		.loc 3 58 13 is_stmt 0 discriminator 2 view .LVU457
 1606              	.LBE1707:
  60:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
 1607              		.loc 3 60 9 is_stmt 1 discriminator 2 view .LVU458
  60:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
 1608              		.loc 3 60 28 is_stmt 0 discriminator 2 view .LVU459
 1609 010e 04F12B02 		add	r2, r4, #43
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 90


 1610 0112 C2ED00CA 		vstr.32	s25, [r2]
  61:VoiceEnvelope.h ****         SetAttackCurve(curve);
 1611              		.loc 3 61 9 is_stmt 1 discriminator 2 view .LVU460
  61:VoiceEnvelope.h ****         SetAttackCurve(curve);
 1612              		.loc 3 61 27 is_stmt 0 discriminator 2 view .LVU461
 1613 0116 04F12F02 		add	r2, r4, #47
 1614              	.LBE1714:
 1615              	.LBE1734:
 115:Polyphony.cpp ****         patches_[i].engine = 0;      
 1616              		.loc 1 115 23 discriminator 2 view .LVU462
 1617 011a 4434     		adds	r4, r4, #68
 1618              	.LBB1735:
 1619              	.LBB1715:
  61:VoiceEnvelope.h ****         SetAttackCurve(curve);
 1620              		.loc 3 61 27 discriminator 2 view .LVU463
 1621 011c 82ED00CA 		vstr.32	s24, [r2]
  62:VoiceEnvelope.h ****         SetReleaseCurve(curve);
 1622              		.loc 3 62 9 is_stmt 1 discriminator 2 view .LVU464
 1623              	.LVL66:
  62:VoiceEnvelope.h ****         SetReleaseCurve(curve);
 1624              		.loc 3 62 9 is_stmt 0 discriminator 2 view .LVU465
 1625              	.LBE1715:
 1626              	.LBE1735:
 1627              	.LBE1737:
 110:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
 1628              		.loc 3 110 9 is_stmt 1 discriminator 2 view .LVU466
 111:VoiceEnvelope.h ****     }
 1629              		.loc 3 111 9 discriminator 2 view .LVU467
 1630              	.LBB1738:
 1631              	.LBB1736:
 1632              	.LBB1716:
  63:VoiceEnvelope.h ****     }
 1633              		.loc 3 63 9 discriminator 2 view .LVU468
  63:VoiceEnvelope.h ****     }
 1634              		.loc 3 63 9 is_stmt 0 discriminator 2 view .LVU469
 1635              	.LBE1716:
 1636              	.LBE1736:
 1637              	.LBE1738:
 115:VoiceEnvelope.h ****         release_curve_coefficient = 128.0f * cu * cu;
 1638              		.loc 3 115 9 is_stmt 1 discriminator 2 view .LVU470
 116:VoiceEnvelope.h ****     }
 1639              		.loc 3 116 9 discriminator 2 view .LVU471
 1640              	.LBB1739:
 1641              		.loc 1 127 9 discriminator 2 view .LVU472
 1642              		.loc 1 127 15 is_stmt 0 discriminator 2 view .LVU473
 1643 0120 8022     		movs	r2, #128
 1644 0122 FFF7FEFF 		bl	memset
 1645              	.LVL67:
 115:Polyphony.cpp ****         patches_[i].engine = 0;      
 1646              		.loc 1 115 23 discriminator 2 view .LVU474
 1647 0126 4645     		cmp	r6, r8
 1648              		.loc 1 127 15 discriminator 2 view .LVU475
 1649 0128 0346     		mov	r3, r0
 115:Polyphony.cpp ****         patches_[i].engine = 0;      
 1650              		.loc 1 115 5 is_stmt 1 discriminator 2 view .LVU476
 1651              	.LVL68:
 115:Polyphony.cpp ****         patches_[i].engine = 0;      
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 91


 1652              		.loc 1 115 23 discriminator 2 view .LVU477
 1653 012a 03F18003 		add	r3, r3, #128
 1654 012e B8D1     		bne	.L36
 1655              	.LBE1739:
 128:Polyphony.cpp ****     }
 129:Polyphony.cpp **** }
 1656              		.loc 1 129 1 is_stmt 0 view .LVU478
 1657 0130 BDEC0C8B 		vldm	sp!, {d8-d13}
 1658              		.cfi_restore 90
 1659              		.cfi_restore 91
 1660              		.cfi_restore 88
 1661              		.cfi_restore 89
 1662              		.cfi_restore 86
 1663              		.cfi_restore 87
 1664              		.cfi_restore 84
 1665              		.cfi_restore 85
 1666              		.cfi_restore 82
 1667              		.cfi_restore 83
 1668              		.cfi_restore 80
 1669              		.cfi_restore 81
 1670              		.cfi_def_cfa_offset 24
 1671 0134 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1672              	.LVL69:
 1673              	.L39:
 1674              		.loc 1 129 1 view .LVU479
 1675              		.align	2
 1676              	.L38:
 1677 0138 00000000 		.word	sample_rate
 1678 013c 00000000 		.word	0
 1679 0140 17B75139 		.word	961656599
 1680 0144 17B7D138 		.word	953267991
 1681 0148 CDCCCC3E 		.word	1053609165
 1682 014c 6F12033C 		.word	1006834287
 1683              		.cfi_endproc
 1684              	.LFE6126:
 1686              		.section	.text._ZN15PolyphonyEngine4InitEPN5daisy9DaisySeedE,"ax",%progbits
 1687              		.align	1
 1688              		.global	_ZN15PolyphonyEngine4InitEPN5daisy9DaisySeedE
 1689              		.syntax unified
 1690              		.thumb
 1691              		.thumb_func
 1693              	_ZN15PolyphonyEngine4InitEPN5daisy9DaisySeedE:
 1694              	.LVL70:
 1695              	.LFB6121:
  31:Polyphony.cpp ****     hw_ptr_ = hw;
 1696              		.loc 1 31 50 is_stmt 1 view -0
 1697              		.cfi_startproc
 1698              		@ args = 0, pretend = 0, frame = 0
 1699              		@ frame_needed = 0, uses_anonymous_args = 0
  32:Polyphony.cpp ****     AllocateVoices(); 
 1700              		.loc 1 32 5 view .LVU481
  32:Polyphony.cpp ****     AllocateVoices(); 
 1701              		.loc 1 32 13 is_stmt 0 view .LVU482
 1702 0000 00F58043 		add	r3, r0, #16384
  31:Polyphony.cpp ****     hw_ptr_ = hw;
 1703              		.loc 1 31 50 view .LVU483
 1704 0004 10B5     		push	{r4, lr}
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 92


 1705              		.cfi_def_cfa_offset 8
 1706              		.cfi_offset 4, -8
 1707              		.cfi_offset 14, -4
  31:Polyphony.cpp ****     hw_ptr_ = hw;
 1708              		.loc 1 31 50 view .LVU484
 1709 0006 0446     		mov	r4, r0
  32:Polyphony.cpp ****     AllocateVoices(); 
 1710              		.loc 1 32 13 view .LVU485
 1711 0008 C3F8B81B 		str	r1, [r3, #3000]
  33:Polyphony.cpp ****     InitVoiceParameters(); 
 1712              		.loc 1 33 5 is_stmt 1 view .LVU486
  33:Polyphony.cpp ****     InitVoiceParameters(); 
 1713              		.loc 1 33 19 is_stmt 0 view .LVU487
 1714 000c FFF7FEFF 		bl	_ZN15PolyphonyEngine14AllocateVoicesEv
 1715              	.LVL71:
  34:Polyphony.cpp **** }
 1716              		.loc 1 34 5 is_stmt 1 view .LVU488
  34:Polyphony.cpp **** }
 1717              		.loc 1 34 24 is_stmt 0 view .LVU489
 1718 0010 2046     		mov	r0, r4
  35:Polyphony.cpp **** 
 1719              		.loc 1 35 1 view .LVU490
 1720 0012 BDE81040 		pop	{r4, lr}
 1721              		.cfi_restore 14
 1722              		.cfi_restore 4
 1723              		.cfi_def_cfa_offset 0
 1724              	.LVL72:
  34:Polyphony.cpp **** }
 1725              		.loc 1 34 24 view .LVU491
 1726 0016 FFF7FEBF 		b	_ZN15PolyphonyEngine19InitVoiceParametersEv
 1727              	.LVL73:
  34:Polyphony.cpp **** }
 1728              		.loc 1 34 24 view .LVU492
 1729              		.cfi_endproc
 1730              	.LFE6121:
 1732              		.section	.text._ZN15PolyphonyEngine16ProcessEnvelopesEb,"ax",%progbits
 1733              		.align	1
 1734              		.global	_ZN15PolyphonyEngine16ProcessEnvelopesEb
 1735              		.syntax unified
 1736              		.thumb
 1737              		.thumb_func
 1739              	_ZN15PolyphonyEngine16ProcessEnvelopesEb:
 1740              	.LVL74:
 1741              	.LFB6128:
 130:Polyphony.cpp **** 
 131:Polyphony.cpp **** void PolyphonyEngine::PrepVoiceParams(const RenderParameters& params) {
 132:Polyphony.cpp ****     bool percussive_engine = (params.engine_index > 7);
 133:Polyphony.cpp **** 
 134:Polyphony.cpp ****     float attack_value = 0.0f;
 135:Polyphony.cpp ****     float release_value = 0.0f;
 136:Polyphony.cpp ****     if (!percussive_engine) {
 137:Polyphony.cpp ****         float attack_raw = params.env_attack_val; 
 138:Polyphony.cpp ****         if (attack_raw < 0.2f) {
 139:Polyphony.cpp ****             attack_value = attack_raw * (attack_raw * 0.5f);
 140:Polyphony.cpp ****         } else {
 141:Polyphony.cpp ****             attack_value = attack_raw * attack_raw * attack_raw;
 142:Polyphony.cpp ****         }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 93


 143:Polyphony.cpp ****         release_value = params.env_release_val * params.env_release_val * params.env_release_val;
 144:Polyphony.cpp ****     }
 145:Polyphony.cpp **** 
 146:Polyphony.cpp ****     float global_pitch_offset = params.pitch_val * 24.f - 12.f;
 147:Polyphony.cpp ****     float current_global_harmonics = params.harm_knob_val;
 148:Polyphony.cpp ****     float current_global_morph = params.morph_knob_val;
 149:Polyphony.cpp ****     float current_global_timbre = params.timbre_knob_val;
 150:Polyphony.cpp **** 
 151:Polyphony.cpp ****     for (int v = 0; v <= params.effective_num_voices - 1; ++v) { 
 152:Polyphony.cpp ****         PatchParams patch_params;
 153:Polyphony.cpp ****         patch_params.engine_idx = params.engine_index;
 154:Polyphony.cpp ****         patch_params.note = voice_note_[v];
 155:Polyphony.cpp ****         patch_params.global_pitch_offset = global_pitch_offset;
 156:Polyphony.cpp ****         patch_params.harmonics = current_global_harmonics;
 157:Polyphony.cpp ****         patch_params.timbre = current_global_timbre;
 158:Polyphony.cpp ****         patch_params.morph = current_global_morph;
 159:Polyphony.cpp ****         patch_params.arp_on = params.arp_on;
 160:Polyphony.cpp ****         patch_params.decay = release_value;
 161:Polyphony.cpp ****         
 162:Polyphony.cpp ****         UpdatePatchParams(patches_[v], patch_params);
 163:Polyphony.cpp **** 
 164:Polyphony.cpp ****         UpdateModAndEnv(
 165:Polyphony.cpp ****             modulations_[v],
 166:Polyphony.cpp ****             voice_envelopes_[v],
 167:Polyphony.cpp ****             percussive_engine,
 168:Polyphony.cpp ****             attack_value,
 169:Polyphony.cpp ****             release_value
 170:Polyphony.cpp ****         );
 171:Polyphony.cpp **** 
 172:Polyphony.cpp ****         if (!params.poly_mode && !params.arp_on) {
 173:Polyphony.cpp ****             UpdateMonoTrigger(
 174:Polyphony.cpp ****                 modulations_[v],
 175:Polyphony.cpp ****                 voice_active_[v],
 176:Polyphony.cpp ****                 engine_changed_flag_
 177:Polyphony.cpp ****             );
 178:Polyphony.cpp ****         }
 179:Polyphony.cpp ****         
 180:Polyphony.cpp ****         voices_[v].Render(patches_[v], modulations_[v], output_buffers_[v], BLOCK_SIZE);
 181:Polyphony.cpp **** 
 182:Polyphony.cpp ****         if (!params.poly_mode && !params.arp_on && (patches_[v].engine > 7) && v == 0) {
 183:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 184:Polyphony.cpp ****         }
 185:Polyphony.cpp ****     }
 186:Polyphony.cpp ****     
 187:Polyphony.cpp ****     int effective_voices = params.effective_num_voices; 
 188:Polyphony.cpp ****     for (int v = effective_voices; v < NUM_VOICES; ++v) {
 189:Polyphony.cpp ****          SilenceVoice(v);
 190:Polyphony.cpp ****     }
 191:Polyphony.cpp **** 
 192:Polyphony.cpp ****     if(engine_changed_flag_) {
 193:Polyphony.cpp ****         for(int v = 0; v < effective_voices; ++v) {
 194:Polyphony.cpp ****             RetriggerVoice(v);
 195:Polyphony.cpp ****         }
 196:Polyphony.cpp ****         engine_changed_flag_ = false;
 197:Polyphony.cpp ****     }
 198:Polyphony.cpp **** }
 199:Polyphony.cpp **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 94


 200:Polyphony.cpp **** void PolyphonyEngine::ProcessEnvelopes(bool poly_mode) {
 1742              		.loc 1 200 56 is_stmt 1 view -0
 1743              		.cfi_startproc
 1744              		@ args = 0, pretend = 0, frame = 0
 1745              		@ frame_needed = 0, uses_anonymous_args = 0
 201:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
 1746              		.loc 1 201 5 view .LVU494
 200:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
 1747              		.loc 1 200 56 is_stmt 0 view .LVU495
 1748 0000 70B5     		push	{r4, r5, r6, lr}
 1749              		.cfi_def_cfa_offset 16
 1750              		.cfi_offset 4, -16
 1751              		.cfi_offset 5, -12
 1752              		.cfi_offset 6, -8
 1753              		.cfi_offset 14, -4
 1754              		.loc 1 201 11 view .LVU496
 1755 0002 00F59545 		add	r5, r0, #19072
 200:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
 1756              		.loc 1 200 56 view .LVU497
 1757 0006 0446     		mov	r4, r0
 1758 0008 0E46     		mov	r6, r1
 1759              		.loc 1 201 11 view .LVU498
 1760 000a 8022     		movs	r2, #128
 1761 000c 3435     		adds	r5, r5, #52
 1762 000e 0021     		movs	r1, #0
 1763              	.LVL75:
 1764              		.loc 1 201 11 view .LVU499
 1765 0010 2846     		mov	r0, r5
 1766              	.LVL76:
 1767              		.loc 1 201 11 view .LVU500
 1768 0012 FFF7FEFF 		bl	memset
 1769              	.LVL77:
 202:Polyphony.cpp ****     memset(mix_buffer_aux_, 0, sizeof(mix_buffer_aux_));
 1770              		.loc 1 202 5 is_stmt 1 view .LVU501
 1771              		.loc 1 202 11 is_stmt 0 view .LVU502
 1772 0016 04F59643 		add	r3, r4, #19200
 1773 001a 0021     		movs	r1, #0
 1774 001c 8022     		movs	r2, #128
 1775 001e 3433     		adds	r3, r3, #52
 1776 0020 1846     		mov	r0, r3
 1777 0022 FFF7FEFF 		bl	memset
 1778              	.LVL78:
 203:Polyphony.cpp **** 
 204:Polyphony.cpp ****     int voices_to_process = poly_mode ? NUM_VOICES : 1;
 1779              		.loc 1 204 39 view .LVU503
 1780 0026 002E     		cmp	r6, #0
 202:Polyphony.cpp ****     memset(mix_buffer_aux_, 0, sizeof(mix_buffer_aux_));
 1781              		.loc 1 202 11 view .LVU504
 1782 0028 0346     		mov	r3, r0
 1783              		.loc 1 204 5 is_stmt 1 view .LVU505
 1784              		.loc 1 204 39 is_stmt 0 view .LVU506
 1785 002a 1348     		ldr	r0, .L48
 1786 002c 14BF     		ite	ne
 1787 002e 0421     		movne	r1, #4
 1788 0030 0121     		moveq	r1, #1
 1789              	.LVL79:
 205:Polyphony.cpp ****     for (int v = 0; v < voices_to_process; ++v) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 95


 1790              		.loc 1 205 5 is_stmt 1 view .LVU507
 1791              	.LBB1740:
 1792              		.loc 1 205 23 view .LVU508
 1793 0032 C901     		lsls	r1, r1, #7
 1794              	.LVL80:
 1795              		.loc 1 205 23 is_stmt 0 view .LVU509
 1796 0034 A1F50171 		sub	r1, r1, #516
 1797              	.LVL81:
 1798              	.L44:
 1799              	.LBB1741:
 206:Polyphony.cpp ****         for (int i = 0; i < BLOCK_SIZE; ++i) {
 1800              		.loc 1 206 27 is_stmt 1 view .LVU510
 1801 0038 2A46     		mov	r2, r5
 1802              	.LVL82:
 1803              	.L43:
 207:Polyphony.cpp ****             mix_buffer_out_[i] += output_buffers_[v][i].out;
 1804              		.loc 1 207 13 discriminator 2 view .LVU511
 1805              		.loc 1 207 32 is_stmt 0 discriminator 2 view .LVU512
 1806 003a B2EC017A 		vldmia.32	r2!, {s14}
 1807 003e 145E     		ldrsh	r4, [r2, r0]
 206:Polyphony.cpp ****         for (int i = 0; i < BLOCK_SIZE; ++i) {
 1808              		.loc 1 206 27 discriminator 2 view .LVU513
 1809 0040 9A42     		cmp	r2, r3
 1810              		.loc 1 207 32 discriminator 2 view .LVU514
 1811 0042 07EE904A 		vmov	s15, r4	@ int
 208:Polyphony.cpp ****             mix_buffer_aux_[i] += output_buffers_[v][i].aux;
 1812              		.loc 1 208 57 discriminator 2 view .LVU515
 1813 0046 00F10204 		add	r4, r0, #2
 207:Polyphony.cpp ****             mix_buffer_out_[i] += output_buffers_[v][i].out;
 1814              		.loc 1 207 32 discriminator 2 view .LVU516
 1815 004a F8EEE77A 		vcvt.f32.s32	s15, s15
 1816              		.loc 1 208 32 discriminator 2 view .LVU517
 1817 004e 145F     		ldrsh	r4, [r2, r4]
 207:Polyphony.cpp ****             mix_buffer_out_[i] += output_buffers_[v][i].out;
 1818              		.loc 1 207 32 discriminator 2 view .LVU518
 1819 0050 77EE877A 		vadd.f32	s15, s15, s14
 1820 0054 42ED017A 		vstr.32	s15, [r2, #-4]
 1821              		.loc 1 208 13 is_stmt 1 discriminator 2 view .LVU519
 1822              		.loc 1 208 32 is_stmt 0 discriminator 2 view .LVU520
 1823 0058 07EE904A 		vmov	s15, r4	@ int
 1824 005c B8EEE77A 		vcvt.f32.s32	s14, s15
 1825 0060 D2ED1F7A 		vldr.32	s15, [r2, #124]
 1826 0064 77EE877A 		vadd.f32	s15, s15, s14
 1827 0068 C2ED1F7A 		vstr.32	s15, [r2, #124]
 206:Polyphony.cpp ****         for (int i = 0; i < BLOCK_SIZE; ++i) {
 1828              		.loc 1 206 9 is_stmt 1 discriminator 2 view .LVU521
 206:Polyphony.cpp ****         for (int i = 0; i < BLOCK_SIZE; ++i) {
 1829              		.loc 1 206 27 discriminator 2 view .LVU522
 1830 006c E5D1     		bne	.L43
 1831              	.LBE1741:
 205:Polyphony.cpp ****         for (int i = 0; i < BLOCK_SIZE; ++i) {
 1832              		.loc 1 205 5 discriminator 2 view .LVU523
 205:Polyphony.cpp ****         for (int i = 0; i < BLOCK_SIZE; ++i) {
 1833              		.loc 1 205 23 discriminator 2 view .LVU524
 1834 006e 8030     		adds	r0, r0, #128
 1835 0070 8842     		cmp	r0, r1
 1836 0072 E1D1     		bne	.L44
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 96


 1837              	.LBE1740:
 209:Polyphony.cpp ****         }
 210:Polyphony.cpp ****     }
 211:Polyphony.cpp **** }
 1838              		.loc 1 211 1 is_stmt 0 view .LVU525
 1839 0074 70BD     		pop	{r4, r5, r6, pc}
 1840              	.LVL83:
 1841              	.L49:
 1842              		.loc 1 211 1 view .LVU526
 1843 0076 00BF     		.align	2
 1844              	.L48:
 1845 0078 FCFDFFFF 		.word	-516
 1846              		.cfi_endproc
 1847              	.LFE6128:
 1849              		.section	.text._ZN15PolyphonyEngine17UpdatePatchParamsERN6plaits5PatchERK11PatchParams,"ax",%progb
 1850              		.align	1
 1851              		.global	_ZN15PolyphonyEngine17UpdatePatchParamsERN6plaits5PatchERK11PatchParams
 1852              		.syntax unified
 1853              		.thumb
 1854              		.thumb_func
 1856              	_ZN15PolyphonyEngine17UpdatePatchParamsERN6plaits5PatchERK11PatchParams:
 1857              	.LVL84:
 1858              	.LFB6129:
 212:Polyphony.cpp **** 
 213:Polyphony.cpp **** void PolyphonyEngine::UpdatePatchParams(plaits::Patch& patch, const PatchParams& params) {
 1859              		.loc 1 213 90 is_stmt 1 view -0
 1860              		.cfi_startproc
 1861              		@ args = 0, pretend = 0, frame = 0
 1862              		@ frame_needed = 0, uses_anonymous_args = 0
 1863              		@ link register save eliminated.
 214:Polyphony.cpp ****     patch.note = params.note + params.global_pitch_offset;
 1864              		.loc 1 214 5 view .LVU528
 215:Polyphony.cpp ****     patch.engine = params.engine_idx;
 1865              		.loc 1 215 18 is_stmt 0 view .LVU529
 1866 0000 1368     		ldr	r3, [r2]
 214:Polyphony.cpp ****     patch.note = params.note + params.global_pitch_offset;
 1867              		.loc 1 214 30 view .LVU530
 1868 0002 D2ED017A 		vldr.32	s15, [r2, #4]
 1869 0006 92ED027A 		vldr.32	s14, [r2, #8]
 1870              		.loc 1 215 18 view .LVU531
 1871 000a CB61     		str	r3, [r1, #28]
 216:Polyphony.cpp ****     patch.harmonics = params.harmonics;
 1872              		.loc 1 216 21 view .LVU532
 1873 000c D368     		ldr	r3, [r2, #12]	@ float
 214:Polyphony.cpp ****     patch.note = params.note + params.global_pitch_offset;
 1874              		.loc 1 214 30 view .LVU533
 1875 000e 77EE877A 		vadd.f32	s15, s15, s14
 1876              		.loc 1 216 21 view .LVU534
 1877 0012 4B60     		str	r3, [r1, #4]	@ float
 217:Polyphony.cpp ****     patch.timbre = params.timbre;
 1878              		.loc 1 217 18 view .LVU535
 1879 0014 1369     		ldr	r3, [r2, #16]	@ float
 214:Polyphony.cpp ****     patch.engine = params.engine_idx;
 1880              		.loc 1 214 16 view .LVU536
 1881 0016 C1ED007A 		vstr.32	s15, [r1]
 215:Polyphony.cpp ****     patch.harmonics = params.harmonics;
 1882              		.loc 1 215 5 is_stmt 1 view .LVU537
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 97


 216:Polyphony.cpp ****     patch.timbre = params.timbre;
 1883              		.loc 1 216 5 view .LVU538
 1884              		.loc 1 217 5 view .LVU539
 1885              		.loc 1 217 18 is_stmt 0 view .LVU540
 1886 001a 8B60     		str	r3, [r1, #8]	@ float
 218:Polyphony.cpp ****     patch.morph = params.morph;
 1887              		.loc 1 218 5 is_stmt 1 view .LVU541
 1888              		.loc 1 218 17 is_stmt 0 view .LVU542
 1889 001c 5369     		ldr	r3, [r2, #20]	@ float
 219:Polyphony.cpp ****     patch.lpg_colour = 0.0f;
 220:Polyphony.cpp ****     patch.decay = params.decay;
 1890              		.loc 1 220 17 view .LVU543
 1891 001e D269     		ldr	r2, [r2, #28]	@ float
 1892              	.LVL85:
 218:Polyphony.cpp ****     patch.morph = params.morph;
 1893              		.loc 1 218 17 view .LVU544
 1894 0020 CB60     		str	r3, [r1, #12]	@ float
 219:Polyphony.cpp ****     patch.lpg_colour = 0.0f;
 1895              		.loc 1 219 5 is_stmt 1 view .LVU545
 219:Polyphony.cpp ****     patch.lpg_colour = 0.0f;
 1896              		.loc 1 219 22 is_stmt 0 view .LVU546
 1897 0022 0023     		movs	r3, #0
 1898              		.loc 1 220 17 view .LVU547
 1899 0024 0A62     		str	r2, [r1, #32]	@ float
 219:Polyphony.cpp ****     patch.lpg_colour = 0.0f;
 1900              		.loc 1 219 22 view .LVU548
 1901 0026 4B62     		str	r3, [r1, #36]	@ float
 1902              		.loc 1 220 5 is_stmt 1 view .LVU549
 221:Polyphony.cpp ****     patch.frequency_modulation_amount = 0.f;
 1903              		.loc 1 221 5 view .LVU550
 1904              		.loc 1 221 39 is_stmt 0 view .LVU551
 1905 0028 0B61     		str	r3, [r1, #16]	@ float
 222:Polyphony.cpp ****     patch.timbre_modulation_amount = 0.f;
 1906              		.loc 1 222 5 is_stmt 1 view .LVU552
 1907              		.loc 1 222 36 is_stmt 0 view .LVU553
 1908 002a 4B61     		str	r3, [r1, #20]	@ float
 223:Polyphony.cpp ****     patch.morph_modulation_amount = 0.f;
 1909              		.loc 1 223 5 is_stmt 1 view .LVU554
 1910              		.loc 1 223 35 is_stmt 0 view .LVU555
 1911 002c 8B61     		str	r3, [r1, #24]	@ float
 224:Polyphony.cpp **** }
 1912              		.loc 1 224 1 view .LVU556
 1913 002e 7047     		bx	lr
 1914              		.cfi_endproc
 1915              	.LFE6129:
 1917              		.section	.text._ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff,"a
 1918              		.align	1
 1919              		.global	_ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff
 1920              		.syntax unified
 1921              		.thumb
 1922              		.thumb_func
 1924              	_ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff:
 1925              	.LVL86:
 1926              	.LFB6130:
 225:Polyphony.cpp **** 
 226:Polyphony.cpp **** void PolyphonyEngine::UpdateModAndEnv(plaits::Modulations& mod, VoiceEnvelope& env, bool percussive
 1927              		.loc 1 226 150 is_stmt 1 view -0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 98


 1928              		.cfi_startproc
 1929              		@ args = 0, pretend = 0, frame = 8
 1930              		@ frame_needed = 0, uses_anonymous_args = 0
 227:Polyphony.cpp ****     mod.engine = 0;
 1931              		.loc 1 227 5 view .LVU558
 1932              		.loc 1 227 16 is_stmt 0 view .LVU559
 1933 0000 DFED7E6A 		vldr.32	s13, .L85
 1934 0004 B7EE007A 		vmov.f32	s14, #1.0e+0
 226:Polyphony.cpp ****     mod.engine = 0;
 1935              		.loc 1 226 150 view .LVU560
 1936 0008 13B5     		push	{r0, r1, r4, lr}
 1937              		.cfi_def_cfa_offset 16
 1938              		.cfi_offset 4, -8
 1939              		.cfi_offset 14, -4
 1940              		.loc 1 227 16 view .LVU561
 1941 000a C1ED006A 		vstr.32	s13, [r1]
 228:Polyphony.cpp ****     mod.note = 0.0f; 
 1942              		.loc 1 228 5 is_stmt 1 view .LVU562
 1943              		.loc 1 228 14 is_stmt 0 view .LVU563
 1944 000e C1ED016A 		vstr.32	s13, [r1, #4]
 229:Polyphony.cpp ****     mod.frequency = 0.0f;
 1945              		.loc 1 229 5 is_stmt 1 view .LVU564
 1946              		.loc 1 229 19 is_stmt 0 view .LVU565
 1947 0012 C1ED026A 		vstr.32	s13, [r1, #8]
 230:Polyphony.cpp ****     mod.harmonics = 0.0f; 
 1948              		.loc 1 230 5 is_stmt 1 view .LVU566
 1949              		.loc 1 230 19 is_stmt 0 view .LVU567
 1950 0016 C1ED036A 		vstr.32	s13, [r1, #12]
 231:Polyphony.cpp ****     mod.timbre = 0.0f;
 1951              		.loc 1 231 5 is_stmt 1 view .LVU568
 1952              		.loc 1 231 16 is_stmt 0 view .LVU569
 1953 001a C1ED046A 		vstr.32	s13, [r1, #16]
 232:Polyphony.cpp ****     mod.morph = 0.0f; 
 1954              		.loc 1 232 5 is_stmt 1 view .LVU570
 1955              		.loc 1 232 15 is_stmt 0 view .LVU571
 1956 001e C1ED056A 		vstr.32	s13, [r1, #20]
 233:Polyphony.cpp **** 
 234:Polyphony.cpp ****     if (!percussive_engine) {
 1957              		.loc 1 234 5 is_stmt 1 view .LVU572
 1958              	.LBB1769:
 1959 0022 002B     		cmp	r3, #0
 1960 0024 40F0E180 		bne	.L52
 1961              	.LVL87:
 1962              		.loc 1 234 5 is_stmt 0 view .LVU573
 1963              	.LBE1769:
 1964              	.LBB1770:
 1965              	.LBI1770:
 226:Polyphony.cpp ****     mod.engine = 0;
 1966              		.loc 1 226 6 is_stmt 1 view .LVU574
 1967              	.LBB1771:
 1968              	.LBB1772:
 235:Polyphony.cpp ****         env.SetAttackTime(attack_value);
 1969              		.loc 1 235 9 view .LVU575
 1970              	.LBB1773:
 1971              	.LBI1773:
  67:VoiceEnvelope.h ****         // Map 0-1 value to attack time (exponential scaling)
 1972              		.loc 3 67 10 view .LVU576
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 99


 1973              	.LBB1774:
  70:VoiceEnvelope.h ****         
 1974              		.loc 3 70 9 view .LVU577
  73:VoiceEnvelope.h ****             // Extra fast attacks at the beginning of the range
 1975              		.loc 3 73 9 view .LVU578
 1976 0028 DFED754A 		vldr.32	s9, .L85+4
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 1977              		.loc 3 79 56 is_stmt 0 view .LVU579
 1978 002c 92ED045A 		vldr.32	s10, [r2, #16]
  73:VoiceEnvelope.h ****             // Extra fast attacks at the beginning of the range
 1979              		.loc 3 73 9 view .LVU580
 1980 0030 B4EEE40A 		vcmpe.f32	s0, s9
 1981 0034 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1982 0038 4CD5     		bpl	.L80
  75:VoiceEnvelope.h ****                                            (min_attack_time * 9.0f * value / 0.1f));
 1983              		.loc 3 75 13 is_stmt 1 view .LVU581
  76:VoiceEnvelope.h ****         } else {
 1984              		.loc 3 76 61 is_stmt 0 view .LVU582
 1985 003a B2EE026A 		vmov.f32	s12, #9.0e+0
  75:VoiceEnvelope.h ****                                            (min_attack_time * 9.0f * value / 0.1f));
 1986              		.loc 3 75 47 view .LVU583
 1987 003e D2ED055A 		vldr.32	s11, [r2, #20]
  76:VoiceEnvelope.h ****         } else {
 1988              		.loc 3 76 61 view .LVU584
 1989 0042 25EE866A 		vmul.f32	s12, s11, s12
  76:VoiceEnvelope.h ****         } else {
 1990              		.loc 3 76 68 view .LVU585
 1991 0046 26EE006A 		vmul.f32	s12, s12, s0
  76:VoiceEnvelope.h ****         } else {
 1992              		.loc 3 76 76 view .LVU586
 1993 004a C6EE247A 		vdiv.f32	s15, s12, s9
  75:VoiceEnvelope.h ****                                            (min_attack_time * 9.0f * value / 0.1f));
 1994              		.loc 3 75 63 view .LVU587
 1995 004e 77EEA57A 		vadd.f32	s15, s15, s11
 1996              	.L82:
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 1997              		.loc 3 79 27 view .LVU588
 1998 0052 FCEEE77A 		vcvt.u32.f32	s15, s15
  86:VoiceEnvelope.h ****             // More exponential curve for punchy attacks
 1999              		.loc 3 86 9 view .LVU589
 2000 0056 DFED6B5A 		vldr.32	s11, .L85+8
 2001 005a B4EEE50A 		vcmpe.f32	s0, s11
  83:VoiceEnvelope.h ****         
 2002              		.loc 3 83 35 view .LVU590
 2003 005e B8EE676A 		vcvt.f32.u32	s12, s15
 2004 0062 C2ED0D7A 		vstr.32	s15, [r2, #52]	@ int
  83:VoiceEnvelope.h ****         
 2005              		.loc 3 83 9 is_stmt 1 view .LVU591
  86:VoiceEnvelope.h ****             // More exponential curve for punchy attacks
 2006              		.loc 3 86 9 is_stmt 0 view .LVU592
 2007 0066 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  83:VoiceEnvelope.h ****         
 2008              		.loc 3 83 35 view .LVU593
 2009 006a 87EE064A 		vdiv.f32	s8, s14, s12
  83:VoiceEnvelope.h ****         
 2010              		.loc 3 83 28 view .LVU594
 2011 006e 82ED0B4A 		vstr.32	s8, [r2, #44]
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 100


  86:VoiceEnvelope.h ****             // More exponential curve for punchy attacks
 2012              		.loc 3 86 9 is_stmt 1 view .LVU595
 2013 0072 42D5     		bpl	.L81
 2014              	.LVL88:
 2015              	.LBB1775:
 2016              	.LBI1775:
  67:VoiceEnvelope.h ****         // Map 0-1 value to attack time (exponential scaling)
 2017              		.loc 3 67 10 view .LVU596
 2018              	.LBB1776:
  88:VoiceEnvelope.h ****         } else {
 2019              		.loc 3 88 13 view .LVU597
 2020              	.LBB1777:
 2021              	.LBI1777:
 109:VoiceEnvelope.h ****         float cu = value - 0.5f;
 2022              		.loc 3 109 10 view .LVU598
 2023              	.LBB1778:
 110:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
 2024              		.loc 3 110 9 view .LVU599
 2025              	.LBE1778:
 2026              	.LBE1777:
  88:VoiceEnvelope.h ****         } else {
 2027              		.loc 3 88 41 is_stmt 0 view .LVU600
 2028 0074 35EEC06A 		vsub.f32	s12, s11, s0
  88:VoiceEnvelope.h ****         } else {
 2029              		.loc 3 88 27 view .LVU601
 2030 0078 DFED635A 		vldr.32	s11, .L85+12
 2031 007c 36EE256A 		vadd.f32	s12, s12, s11
 2032              	.LVL89:
 2033              	.LBB1780:
 2034              	.LBB1779:
 110:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
 2035              		.loc 3 110 15 view .LVU602
 2036 0080 F6EE005A 		vmov.f32	s11, #5.0e-1
 2037 0084 36EE656A 		vsub.f32	s12, s12, s11
 2038              	.LVL90:
 111:VoiceEnvelope.h ****     }
 2039              		.loc 3 111 9 is_stmt 1 view .LVU603
 111:VoiceEnvelope.h ****     }
 2040              		.loc 3 111 43 is_stmt 0 view .LVU604
 2041 0088 DFED605A 		vldr.32	s11, .L85+16
 2042 008c 66EE255A 		vmul.f32	s11, s12, s11
 111:VoiceEnvelope.h ****     }
 2043              		.loc 3 111 48 view .LVU605
 2044 0090 25EE866A 		vmul.f32	s12, s11, s12
 2045              	.LVL91:
 2046              	.L56:
 111:VoiceEnvelope.h ****     }
 2047              		.loc 3 111 48 view .LVU606
 2048              	.LBE1779:
 2049              	.LBE1780:
 2050              	.LBE1776:
 2051              	.LBE1775:
 2052              	.LBE1774:
 2053              	.LBE1773:
 2054              	.LBB1784:
 2055              	.LBB1785:
  98:VoiceEnvelope.h ****         
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 101


 2056              		.loc 3 98 35 view .LVU607
 2057 0094 60EEA04A 		vmul.f32	s9, s1, s1
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 2058              		.loc 3 101 59 view .LVU608
 2059 0098 D2ED075A 		vldr.32	s11, [r2, #28]
 2060              	.LBE1785:
 2061              	.LBE1784:
 2062              	.LBB1791:
 2063              	.LBB1792:
 154:VoiceEnvelope.h ****             case ENV_IDLE:
 2064              		.loc 3 154 9 view .LVU609
 2065 009c 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 2066              	.LVL92:
 154:VoiceEnvelope.h ****             case ENV_IDLE:
 2067              		.loc 3 154 9 view .LVU610
 2068 009e 82ED026A 		vstr.32	s12, [r2, #8]
 2069              	.LVL93:
 154:VoiceEnvelope.h ****             case ENV_IDLE:
 2070              		.loc 3 154 9 view .LVU611
 2071              	.LBE1792:
 2072              	.LBE1791:
 236:Polyphony.cpp ****         env.SetReleaseTime(release_value);
 2073              		.loc 1 236 9 is_stmt 1 view .LVU612
 2074              	.LBB1810:
 2075              	.LBI1784:
  95:VoiceEnvelope.h ****         // Map 0-1 value to release time (exponential scaling)
 2076              		.loc 3 95 10 view .LVU613
 2077              	.LBB1790:
  98:VoiceEnvelope.h ****         
 2078              		.loc 3 98 9 view .LVU614
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 2079              		.loc 3 101 9 view .LVU615
  98:VoiceEnvelope.h ****         
 2080              		.loc 3 98 15 is_stmt 0 view .LVU616
 2081 00a2 64EEA00A 		vmul.f32	s1, s9, s1
 2082              	.LVL94:
 2083              	.LBB1786:
 2084              	.LBB1787:
 116:VoiceEnvelope.h ****     }
 2085              		.loc 3 116 35 view .LVU617
 2086 00a6 C2ED036A 		vstr.32	s13, [r2, #12]
 2087              	.LBE1787:
 2088              	.LBE1786:
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 2089              		.loc 3 101 59 view .LVU618
 2090 00aa E0EE855A 		vfma.f32	s11, s1, s10
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 2091              		.loc 3 101 22 view .LVU619
 2092 00ae FCEEE55A 		vcvt.u32.f32	s11, s11
 2093 00b2 15EE903A 		vmov	r3, s11	@ int
 2094              	.LVL95:
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 2095              		.loc 3 101 20 view .LVU620
 2096 00b6 C2ED0E5A 		vstr.32	s11, [r2, #56]	@ int
 103:VoiceEnvelope.h ****         
 2097              		.loc 3 103 9 is_stmt 1 view .LVU621
 103:VoiceEnvelope.h ****         
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 102


 2098              		.loc 3 103 34 is_stmt 0 view .LVU622
 2099 00ba F8EE655A 		vcvt.f32.u32	s11, s11
 2100 00be 87EE255A 		vdiv.f32	s10, s14, s11
 103:VoiceEnvelope.h ****         
 2101              		.loc 3 103 27 view .LVU623
 2102 00c2 82ED0C5A 		vstr.32	s10, [r2, #48]
 106:VoiceEnvelope.h ****     }
 2103              		.loc 3 106 9 is_stmt 1 view .LVU624
 2104              	.LVL96:
 2105              	.LBB1789:
 2106              	.LBI1786:
 114:VoiceEnvelope.h ****         float cu = value - 0.5f;
 2107              		.loc 3 114 10 view .LVU625
 2108              	.LBB1788:
 115:VoiceEnvelope.h ****         release_curve_coefficient = 128.0f * cu * cu;
 2109              		.loc 3 115 9 view .LVU626
 116:VoiceEnvelope.h ****     }
 2110              		.loc 3 116 9 view .LVU627
 116:VoiceEnvelope.h ****     }
 2111              		.loc 3 116 9 is_stmt 0 view .LVU628
 2112              	.LBE1788:
 2113              	.LBE1789:
 2114              	.LBE1790:
 2115              	.LBE1810:
 237:Polyphony.cpp ****         float env_value = env.Process();
 2116              		.loc 1 237 9 is_stmt 1 view .LVU629
 2117              	.LBB1811:
 2118              	.LBI1791:
 152:VoiceEnvelope.h ****         float ph;
 2119              		.loc 3 152 11 view .LVU630
 2120              	.LBB1807:
 153:VoiceEnvelope.h ****         switch (current_state) {
 2121              		.loc 3 153 9 view .LVU631
 154:VoiceEnvelope.h ****             case ENV_IDLE:
 2122              		.loc 3 154 9 view .LVU632
 2123 00c6 0428     		cmp	r0, #4
 2124 00c8 1CD8     		bhi	.L58
 2125 00ca DFE800F0 		tbb	[pc, r0]
 2126              	.L60:
 2127 00ce 19       		.byte	(.L64-.L60)/2
 2128 00cf 37       		.byte	(.L63-.L60)/2
 2129 00d0 55       		.byte	(.L62-.L60)/2
 2130 00d1 58       		.byte	(.L61-.L60)/2
 2131 00d2 78       		.byte	(.L59-.L60)/2
 2132              	.LVL97:
 2133 00d3 00       		.p2align 1
 2134              	.L80:
 154:VoiceEnvelope.h ****             case ENV_IDLE:
 2135              		.loc 3 154 9 is_stmt 0 view .LVU633
 2136              	.LBE1807:
 2137              	.LBE1811:
 2138              	.LBB1812:
 2139              	.LBB1783:
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 2140              		.loc 3 79 13 is_stmt 1 view .LVU634
  70:VoiceEnvelope.h ****         
 2141              		.loc 3 70 35 is_stmt 0 view .LVU635
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 103


 2142 00d4 60EE007A 		vmul.f32	s15, s0, s0
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 2143              		.loc 3 79 54 view .LVU636
 2144 00d8 9FED4D6A 		vldr.32	s12, .L85+20
  80:VoiceEnvelope.h ****         }
 2145              		.loc 3 80 59 view .LVU637
 2146 00dc F6EE005A 		vmov.f32	s11, #5.0e-1
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 2147              		.loc 3 79 54 view .LVU638
 2148 00e0 25EE066A 		vmul.f32	s12, s10, s12
  70:VoiceEnvelope.h ****         
 2149              		.loc 3 70 15 view .LVU639
 2150 00e4 67EE807A 		vmul.f32	s15, s15, s0
  80:VoiceEnvelope.h ****         }
 2151              		.loc 3 80 59 view .LVU640
 2152 00e8 65EE255A 		vmul.f32	s11, s10, s11
  80:VoiceEnvelope.h ****         }
 2153              		.loc 3 80 66 view .LVU641
 2154 00ec 67EEA57A 		vmul.f32	s15, s15, s11
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 2155              		.loc 3 79 75 view .LVU642
 2156 00f0 F4EE005A 		vmov.f32	s11, #1.25e-1
 2157 00f4 E6EE257A 		vfma.f32	s15, s12, s11
 2158 00f8 ABE7     		b	.L82
 2159              	.L81:
 2160              	.LBB1781:
 2161              	.LBB1782:
 111:VoiceEnvelope.h ****     }
 2162              		.loc 3 111 34 view .LVU643
 2163 00fa 9FED406A 		vldr.32	s12, .L85
 2164 00fe C9E7     		b	.L56
 2165              	.LVL98:
 2166              	.L64:
 111:VoiceEnvelope.h ****     }
 2167              		.loc 3 111 34 view .LVU644
 2168              	.LBE1782:
 2169              	.LBE1781:
 2170              	.LBE1783:
 2171              	.LBE1812:
 2172              	.LBB1813:
 2173              	.LBB1808:
 155:VoiceEnvelope.h ****                 current_value = 0.0f;
 2174              		.loc 3 155 13 is_stmt 1 view .LVU645
 156:VoiceEnvelope.h ****                 break;
 2175              		.loc 3 156 17 view .LVU646
 156:VoiceEnvelope.h ****                 break;
 2176              		.loc 3 156 31 is_stmt 0 view .LVU647
 2177 0100 C2ED016A 		vstr.32	s13, [r2, #4]
 157:VoiceEnvelope.h **** 
 2178              		.loc 3 157 17 is_stmt 1 view .LVU648
 2179              	.L58:
 202:VoiceEnvelope.h ****     }
 2180              		.loc 3 202 9 view .LVU649
 2181              	.LBB1793:
 2182              	.LBB1794:
 2183              		.file 48 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h"
   1:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 104


   2:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
   3:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** //
   5:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // any later version.
  10:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  11:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  16:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  20:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  25:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** /*
  26:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  27:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  30:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  38:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  39:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  42:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  */
  50:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  51:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  */
  55:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  56:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 105


  59:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  73:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** # include <type_traits>
  74:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  75:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus > 201703L
  76:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** # include <compare>
  77:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  78:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  79:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** {
  81:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  83:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /*
  84:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    * A constexpr wrapper for __builtin_memcmp.
  85:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    * @param __num The number of elements of type _Tp (not bytes).
  86:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    */
  87:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Up>
  88:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
  89:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline int
  90:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
  91:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
  92:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  93:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
  94:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  95:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
  96:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
  97:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
  98:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  for(; __num > 0; ++__first1, ++__first2, --__num)
  99:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    if (*__first1 != *__first2)
 100:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      return *__first1 < *__first2 ? -1 : 1;
 101:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return 0;
 102:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 103:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       else
 104:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 105:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 106:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 107:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 108:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 109:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
 110:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
 111:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
 112:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _BoolType>
 113:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap
 114:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 115:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 106


 116:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static void
 117:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 119:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    _ValueType1;
 121:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
 122:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  *__a = *__b;
 123:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  *__b = __tmp;
 124:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 125:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 126:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 127:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<>
 128:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap<true>
 129:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 130:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 131:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static void
 132:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 133:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 134:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  swap(*__a, *__b);
 135:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 136:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 137:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif // C++03
 138:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 139:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 140:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 141:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 142:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 143:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 144:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   Nothing.
 145:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 146:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 147:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  iterators themselves.
 148:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 149:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 150:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 151:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline void
 152:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 153:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 154:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 155:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 156:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 157:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 158:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 159:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 160:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 161:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 162:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType1;
 163:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 164:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType2;
 165:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 166:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 167:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType2>)
 168:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 169:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType1>)
 170:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 171:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 172:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType1;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 107


 173:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 174:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType2;
 175:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 176:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 177:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 178:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 179:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #else
 180:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 181:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // 187. iter_swap underspecified
 182:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       swap(*__a, *__b);
 183:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 184:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 185:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 186:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 187:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 188:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 189:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 190:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 191:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 192:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 193:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 194:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 195:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 196:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  The ranges must not overlap.
 197:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 198:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 199:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 200:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _ForwardIterator2
 201:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 202:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 203:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 204:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 205:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 206:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 207:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 208:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 209:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 210:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 211:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 212:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 213:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __first2;
 214:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 215:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 216:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 217:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 218:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 219:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 220:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 221:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 222:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 223:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 224:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 225:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 226:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 227:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 228:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 229:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 108


 230:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 231:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 232:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 233:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 234:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 235:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (__b < __a)
 236:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 237:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 238:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 239:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 240:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 241:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 242:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 243:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 244:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 245:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 246:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 247:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 248:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 249:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 250:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 251:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 252:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 253:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 254:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 255:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 256:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 257:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 258:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 259:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (__a < __b)
 2184              		.loc 48 259 7 is_stmt 0 view .LVU650
 2185 0104 D2ED017A 		vldr.32	s15, [r2, #4]
 2186              	.LBE1794:
 2187              	.LBE1793:
 202:VoiceEnvelope.h ****     }
 2188              		.loc 3 202 49 view .LVU651
 2189 0108 CDED016A 		vstr.32	s13, [sp, #4]
 2190              	.LVL99:
 2191              	.LBB1798:
 2192              	.LBI1793:
 254:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 2193              		.loc 48 254 5 is_stmt 1 view .LVU652
 2194              	.LBB1795:
 2195              		.loc 48 259 7 is_stmt 0 view .LVU653
 2196 010c F5EEC07A 		vcmpe.f32	s15, #0
 2197              	.LBE1795:
 2198              	.LBE1798:
 202:VoiceEnvelope.h ****     }
 2199              		.loc 3 202 56 view .LVU654
 2200 0110 8DED007A 		vstr.32	s14, [sp]
 2201              	.LBB1799:
 2202              	.LBB1796:
 2203              		.loc 48 259 7 view .LVU655
 2204 0114 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2205              	.LBE1796:
 2206              	.LBE1799:
 202:VoiceEnvelope.h ****     }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 109


 2207              		.loc 3 202 34 view .LVU656
 2208 0118 54BF     		ite	pl
 2209 011a 0432     		addpl	r2, r2, #4
 2210              	.LVL100:
 2211              	.LBB1800:
 2212              	.LBB1797:
 260:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 2213              		.loc 48 260 9 view .LVU657
 2214 011c 01AA     		addmi	r2, sp, #4
 2215              	.LVL101:
 2216              		.loc 48 260 9 view .LVU658
 2217              	.LBE1797:
 2218              	.LBE1800:
 2219              	.LBB1801:
 2220              	.LBI1801:
 230:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 2221              		.loc 48 230 5 is_stmt 1 view .LVU659
 2222              	.LBB1802:
 235:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 2223              		.loc 48 235 7 is_stmt 0 view .LVU660
 2224 011e D2ED007A 		vldr.32	s15, [r2]
 2225 0122 F4EEC77A 		vcmpe.f32	s15, s14
 2226 0126 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 236:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 2227              		.loc 48 236 9 view .LVU661
 2228 012a C8BF     		it	gt
 2229 012c 6A46     		movgt	r2, sp
 2230              	.LVL102:
 236:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 2231              		.loc 48 236 9 view .LVU662
 2232              	.LBE1802:
 2233              	.LBE1801:
 202:VoiceEnvelope.h ****     }
 2234              		.loc 3 202 60 view .LVU663
 2235 012e 1368     		ldr	r3, [r2]	@ float
 2236              	.LVL103:
 202:VoiceEnvelope.h ****     }
 2237              		.loc 3 202 60 view .LVU664
 2238              	.LBE1808:
 2239              	.LBE1813:
 238:Polyphony.cpp ****         mod.level = env_value;
 2240              		.loc 1 238 9 is_stmt 1 view .LVU665
 2241              		.loc 1 238 19 is_stmt 0 view .LVU666
 2242 0130 CB61     		str	r3, [r1, #28]	@ float
 239:Polyphony.cpp ****         mod.level_patched = true;
 2243              		.loc 1 239 9 is_stmt 1 view .LVU667
 2244              		.loc 1 239 27 is_stmt 0 view .LVU668
 2245 0132 0123     		movs	r3, #1
 2246              	.LVL104:
 2247              		.loc 1 239 27 view .LVU669
 2248 0134 81F82430 		strb	r3, [r1, #36]
 2249              	.LVL105:
 2250              	.L51:
 2251              		.loc 1 239 27 view .LVU670
 2252              	.LBE1772:
 2253              	.LBE1771:
 2254              	.LBE1770:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 110


 240:Polyphony.cpp ****     } else {
 241:Polyphony.cpp ****         mod.level = 1.0f;
 242:Polyphony.cpp ****         mod.level_patched = false;
 243:Polyphony.cpp ****         mod.trigger_patched = true;
 244:Polyphony.cpp ****     }
 245:Polyphony.cpp **** }
 2255              		.loc 1 245 1 view .LVU671
 2256 0138 02B0     		add	sp, sp, #8
 2257              		.cfi_remember_state
 2258              		.cfi_def_cfa_offset 8
 2259              		@ sp needed
 2260 013a 10BD     		pop	{r4, pc}
 2261              	.LVL106:
 2262              	.L63:
 2263              		.cfi_restore_state
 2264              	.LBB1817:
 2265              	.LBB1816:
 2266              	.LBB1815:
 2267              	.LBB1814:
 2268              	.LBB1809:
 159:VoiceEnvelope.h ****                 ph = static_cast<float>(phase) * attack_coefficient;
 2269              		.loc 3 159 13 is_stmt 1 view .LVU672
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 2270              		.loc 3 160 17 view .LVU673
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 2271              		.loc 3 160 41 is_stmt 0 view .LVU674
 2272 013c D36B     		ldr	r3, [r2, #60]
 2273              	.LBB1803:
 2274              	.LBB1804:
 218:VoiceEnvelope.h ****     }
 2275              		.loc 3 218 27 view .LVU675
 2276 013e B0EE475A 		vmov.f32	s10, s14
 2277              	.LBE1804:
 2278              	.LBE1803:
 162:VoiceEnvelope.h ****                     current_state = (mode == MODE_AR) ? ENV_DECAY : ENV_SUSTAIN;
 2279              		.loc 3 162 17 view .LVU676
 2280 0142 17EE900A 		vmov	r0, s15	@ int
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 2281              		.loc 3 160 22 view .LVU677
 2282 0146 05EE903A 		vmov	s11, r3	@ int
 162:VoiceEnvelope.h ****                     current_state = (mode == MODE_AR) ? ENV_DECAY : ENV_SUSTAIN;
 2283              		.loc 3 162 17 view .LVU678
 2284 014a 8342     		cmp	r3, r0
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 2285              		.loc 3 160 22 view .LVU679
 2286 014c F8EE655A 		vcvt.f32.u32	s11, s11
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 2287              		.loc 3 160 20 view .LVU680
 2288 0150 65EE845A 		vmul.f32	s11, s11, s8
 2289              	.LVL107:
 161:VoiceEnvelope.h ****                 if (phase >= attack_time) {
 2290              		.loc 3 161 17 is_stmt 1 view .LVU681
 2291              	.LBB1806:
 2292              	.LBI1803:
 217:VoiceEnvelope.h ****         return ph / (1.0f + attack_curve_coefficient * (1.0f - ph));
 2293              		.loc 3 217 11 view .LVU682
 2294              	.LBB1805:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 111


 218:VoiceEnvelope.h ****     }
 2295              		.loc 3 218 9 view .LVU683
 218:VoiceEnvelope.h ****     }
 2296              		.loc 3 218 62 is_stmt 0 view .LVU684
 2297 0154 77EE654A 		vsub.f32	s9, s14, s11
 218:VoiceEnvelope.h ****     }
 2298              		.loc 3 218 27 view .LVU685
 2299 0158 A6EE245A 		vfma.f32	s10, s12, s9
 2300              	.LVL108:
 218:VoiceEnvelope.h ****     }
 2301              		.loc 3 218 67 view .LVU686
 2302 015c 85EE856A 		vdiv.f32	s12, s11, s10
 2303              	.LBE1805:
 2304              	.LBE1806:
 161:VoiceEnvelope.h ****                 if (phase >= attack_time) {
 2305              		.loc 3 161 31 view .LVU687
 2306 0160 82ED016A 		vstr.32	s12, [r2, #4]
 162:VoiceEnvelope.h ****                     current_state = (mode == MODE_AR) ? ENV_DECAY : ENV_SUSTAIN;
 2307              		.loc 3 162 17 is_stmt 1 view .LVU688
 2308 0164 3FD3     		bcc	.L84
 163:VoiceEnvelope.h ****                     phase = 0;
 2309              		.loc 3 163 21 view .LVU689
 163:VoiceEnvelope.h ****                     phase = 0;
 2310              		.loc 3 163 55 is_stmt 0 view .LVU690
 2311 0166 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 2312 0168 002B     		cmp	r3, #0
 2313 016a 0CBF     		ite	eq
 2314 016c 0323     		moveq	r3, #3
 2315 016e 0223     		movne	r3, #2
 163:VoiceEnvelope.h ****                     phase = 0;
 2316              		.loc 3 163 35 view .LVU691
 2317 0170 1370     		strb	r3, [r2]
 164:VoiceEnvelope.h ****                 } else {
 2318              		.loc 3 164 21 is_stmt 1 view .LVU692
 164:VoiceEnvelope.h ****                 } else {
 2319              		.loc 3 164 27 is_stmt 0 view .LVU693
 2320 0172 0023     		movs	r3, #0
 2321              	.LVL109:
 2322              	.L83:
 198:VoiceEnvelope.h ****                 }
 2323              		.loc 3 198 26 view .LVU694
 2324 0174 D363     		str	r3, [r2, #60]
 2325 0176 C5E7     		b	.L58
 2326              	.L62:
 170:VoiceEnvelope.h ****                 current_value = 1.0f;
 2327              		.loc 3 170 13 is_stmt 1 view .LVU695
 171:VoiceEnvelope.h ****                 break;
 2328              		.loc 3 171 17 view .LVU696
 171:VoiceEnvelope.h ****                 break;
 2329              		.loc 3 171 31 is_stmt 0 view .LVU697
 2330 0178 82ED017A 		vstr.32	s14, [r2, #4]
 172:VoiceEnvelope.h **** 
 2331              		.loc 3 172 17 is_stmt 1 view .LVU698
 2332 017c C2E7     		b	.L58
 2333              	.L61:
 174:VoiceEnvelope.h ****                 // Use current_value as starting point for decay
 2334              		.loc 3 174 13 view .LVU699
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 112


 177:VoiceEnvelope.h ****                 if (phase == 0) {
 2335              		.loc 3 177 17 view .LVU700
 177:VoiceEnvelope.h ****                 if (phase == 0) {
 2336              		.loc 3 177 41 is_stmt 0 view .LVU701
 2337 017e D06B     		ldr	r0, [r2, #60]
 177:VoiceEnvelope.h ****                 if (phase == 0) {
 2338              		.loc 3 177 22 view .LVU702
 2339 0180 07EE900A 		vmov	s15, r0	@ int
 2340 0184 F8EE677A 		vcvt.f32.u32	s15, s15
 177:VoiceEnvelope.h ****                 if (phase == 0) {
 2341              		.loc 3 177 20 view .LVU703
 2342 0188 67EE857A 		vmul.f32	s15, s15, s10
 2343              	.LVL110:
 178:VoiceEnvelope.h ****                     // On first frame, use current value
 2344              		.loc 3 178 17 is_stmt 1 view .LVU704
 2345 018c 08B9     		cbnz	r0, .L67
 180:VoiceEnvelope.h ****                 }
 2346              		.loc 3 180 21 view .LVU705
 180:VoiceEnvelope.h ****                 }
 2347              		.loc 3 180 39 is_stmt 0 view .LVU706
 2348 018e 5468     		ldr	r4, [r2, #4]	@ float
 2349 0190 1464     		str	r4, [r2, #64]	@ float
 2350              	.L67:
 182:VoiceEnvelope.h ****                 
 2351              		.loc 3 182 17 is_stmt 1 view .LVU707
 182:VoiceEnvelope.h ****                 
 2352              		.loc 3 182 59 is_stmt 0 view .LVU708
 2353 0192 37EE676A 		vsub.f32	s12, s14, s15
 182:VoiceEnvelope.h ****                 
 2354              		.loc 3 182 51 view .LVU709
 2355 0196 D2ED105A 		vldr.32	s11, [r2, #64]
 184:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 2356              		.loc 3 184 17 view .LVU710
 2357 019a 9842     		cmp	r0, r3
 182:VoiceEnvelope.h ****                 
 2358              		.loc 3 182 51 view .LVU711
 2359 019c 26EE256A 		vmul.f32	s12, s12, s11
 182:VoiceEnvelope.h ****                 
 2360              		.loc 3 182 73 view .LVU712
 2361 01a0 F0EE475A 		vmov.f32	s11, s14
 2362 01a4 E7EEA65A 		vfma.f32	s11, s15, s13
 182:VoiceEnvelope.h ****                 
 2363              		.loc 3 182 65 view .LVU713
 2364 01a8 C6EE257A 		vdiv.f32	s15, s12, s11
 2365              	.LVL111:
 182:VoiceEnvelope.h ****                 
 2366              		.loc 3 182 31 view .LVU714
 2367 01ac C2ED017A 		vstr.32	s15, [r2, #4]
 184:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 2368              		.loc 3 184 17 is_stmt 1 view .LVU715
 2369 01b0 02D3     		bcc	.L68
 2370              	.LVL112:
 2371              	.L69:
 185:VoiceEnvelope.h ****                     phase = 0;
 2372              		.loc 3 185 21 view .LVU716
 185:VoiceEnvelope.h ****                     phase = 0;
 2373              		.loc 3 185 35 is_stmt 0 view .LVU717
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 113


 2374 01b2 0023     		movs	r3, #0
 2375 01b4 1370     		strb	r3, [r2]
 186:VoiceEnvelope.h ****                 } else {
 2376              		.loc 3 186 21 is_stmt 1 view .LVU718
 2377 01b6 DDE7     		b	.L83
 2378              	.LVL113:
 2379              	.L68:
 188:VoiceEnvelope.h ****                 }
 2380              		.loc 3 188 21 view .LVU719
 188:VoiceEnvelope.h ****                 }
 2381              		.loc 3 188 26 is_stmt 0 view .LVU720
 2382 01b8 0130     		adds	r0, r0, #1
 2383              	.LVL114:
 188:VoiceEnvelope.h ****                 }
 2384              		.loc 3 188 26 view .LVU721
 2385 01ba D063     		str	r0, [r2, #60]
 2386              	.LVL115:
 188:VoiceEnvelope.h ****                 }
 2387              		.loc 3 188 26 view .LVU722
 2388 01bc A2E7     		b	.L58
 2389              	.LVL116:
 2390              	.L59:
 192:VoiceEnvelope.h ****                 current_value = reset_target - static_cast<float>(phase) * reset_coefficient;
 2391              		.loc 3 192 13 is_stmt 1 view .LVU723
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 2392              		.loc 3 193 17 view .LVU724
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 2393              		.loc 3 193 67 is_stmt 0 view .LVU725
 2394 01be D36B     		ldr	r3, [r2, #60]
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 2395              		.loc 3 193 46 view .LVU726
 2396 01c0 D2ED095A 		vldr.32	s11, [r2, #36]
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 2397              		.loc 3 193 48 view .LVU727
 2398 01c4 07EE903A 		vmov	s15, r3	@ int
 2399 01c8 B8EE676A 		vcvt.f32.u32	s12, s15
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 2400              		.loc 3 193 46 view .LVU728
 2401 01cc D2ED0A7A 		vldr.32	s15, [r2, #40]
 2402 01d0 E6EE657A 		vfms.f32	s15, s12, s11
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 2403              		.loc 3 193 31 view .LVU729
 2404 01d4 C2ED017A 		vstr.32	s15, [r2, #4]
 194:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 2405              		.loc 3 194 17 is_stmt 1 view .LVU730
 2406 01d8 D2ED087A 		vldr.32	s15, [r2, #32]
 2407 01dc B4EEE76A 		vcmpe.f32	s12, s15
 2408 01e0 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2409 01e4 E5DA     		bge	.L69
 2410              	.L84:
 198:VoiceEnvelope.h ****                 }
 2411              		.loc 3 198 21 view .LVU731
 198:VoiceEnvelope.h ****                 }
 2412              		.loc 3 198 26 is_stmt 0 view .LVU732
 2413 01e6 0133     		adds	r3, r3, #1
 2414 01e8 C4E7     		b	.L83
 2415              	.LVL117:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 114


 2416              	.L52:
 198:VoiceEnvelope.h ****                 }
 2417              		.loc 3 198 26 view .LVU733
 2418              	.LBE1809:
 2419              	.LBE1814:
 2420              	.LBE1815:
 2421              	.LBE1816:
 2422              	.LBE1817:
 2423              	.LBB1818:
 241:Polyphony.cpp ****         mod.level_patched = false;
 2424              		.loc 1 241 9 is_stmt 1 view .LVU734
 242:Polyphony.cpp ****         mod.trigger_patched = true;
 2425              		.loc 1 242 27 is_stmt 0 view .LVU735
 2426 01ea 0023     		movs	r3, #0
 2427              	.LVL118:
 241:Polyphony.cpp ****         mod.level_patched = false;
 2428              		.loc 1 241 19 view .LVU736
 2429 01ec 81ED077A 		vstr.32	s14, [r1, #28]
 242:Polyphony.cpp ****         mod.trigger_patched = true;
 2430              		.loc 1 242 9 is_stmt 1 view .LVU737
 242:Polyphony.cpp ****         mod.trigger_patched = true;
 2431              		.loc 1 242 27 is_stmt 0 view .LVU738
 2432 01f0 81F82430 		strb	r3, [r1, #36]
 243:Polyphony.cpp ****     }
 2433              		.loc 1 243 9 is_stmt 1 view .LVU739
 243:Polyphony.cpp ****     }
 2434              		.loc 1 243 29 is_stmt 0 view .LVU740
 2435 01f4 0123     		movs	r3, #1
 2436 01f6 81F82330 		strb	r3, [r1, #35]
 2437              	.LBE1818:
 2438              		.loc 1 245 1 view .LVU741
 2439 01fa 9DE7     		b	.L51
 2440              	.L86:
 2441              		.align	2
 2442              	.L85:
 2443 01fc 00000000 		.word	0
 2444 0200 CDCCCC3D 		.word	1036831949
 2445 0204 9A99993E 		.word	1050253722
 2446 0208 3333333F 		.word	1060320051
 2447 020c 00000043 		.word	1124073472
 2448 0210 6F12033B 		.word	990057071
 2449              		.cfi_endproc
 2450              	.LFE6130:
 2452              		.section	.text._ZN15PolyphonyEngine17UpdateMonoTriggerERN6plaits11ModulationsERbb,"ax",%progbits
 2453              		.align	1
 2454              		.global	_ZN15PolyphonyEngine17UpdateMonoTriggerERN6plaits11ModulationsERbb
 2455              		.syntax unified
 2456              		.thumb
 2457              		.thumb_func
 2459              	_ZN15PolyphonyEngine17UpdateMonoTriggerERN6plaits11ModulationsERbb:
 2460              	.LVL119:
 2461              	.LFB6131:
 246:Polyphony.cpp **** 
 247:Polyphony.cpp **** void PolyphonyEngine::UpdateMonoTrigger(plaits::Modulations& mod, bool& active_flag, bool engine_ch
 2462              		.loc 1 247 118 is_stmt 1 view -0
 2463              		.cfi_startproc
 2464              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 115


 2465              		@ frame_needed = 0, uses_anonymous_args = 0
 2466              		@ link register save eliminated.
 248:Polyphony.cpp ****     if ((engine_changed_flag_param && active_flag) || !active_flag) {
 2467              		.loc 1 248 5 view .LVU743
 2468 0000 0BB9     		cbnz	r3, .L88
 2469              		.loc 1 248 52 is_stmt 0 discriminator 3 view .LVU744
 2470 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 2471              	.LVL120:
 2472              		.loc 1 248 52 discriminator 3 view .LVU745
 2473 0004 0BB9     		cbnz	r3, .L87
 2474              	.L88:
 249:Polyphony.cpp ****         mod.trigger = 0.0f; 
 2475              		.loc 1 249 9 is_stmt 1 view .LVU746
 2476              		.loc 1 249 21 is_stmt 0 view .LVU747
 2477 0006 0023     		movs	r3, #0
 2478 0008 8B61     		str	r3, [r1, #24]	@ float
 2479              	.L87:
 250:Polyphony.cpp ****     } 
 251:Polyphony.cpp **** }
 2480              		.loc 1 251 1 view .LVU748
 2481 000a 7047     		bx	lr
 2482              		.cfi_endproc
 2483              	.LFE6131:
 2485              		.section	.text._ZN15PolyphonyEngine12SilenceVoiceEi,"ax",%progbits
 2486              		.align	1
 2487              		.global	_ZN15PolyphonyEngine12SilenceVoiceEi
 2488              		.syntax unified
 2489              		.thumb
 2490              		.thumb_func
 2492              	_ZN15PolyphonyEngine12SilenceVoiceEi:
 2493              	.LVL121:
 2494              	.LFB6132:
 252:Polyphony.cpp **** 
 253:Polyphony.cpp **** void PolyphonyEngine::SilenceVoice(int voice_idx) {
 2495              		.loc 1 253 51 is_stmt 1 view -0
 2496              		.cfi_startproc
 2497              		@ args = 0, pretend = 0, frame = 0
 2498              		@ frame_needed = 0, uses_anonymous_args = 0
 2499              		@ link register save eliminated.
 254:Polyphony.cpp ****     if (voice_idx >= 0 && voice_idx < NUM_VOICES) {
 2500              		.loc 1 254 5 view .LVU750
 2501 0000 0329     		cmp	r1, #3
 2502 0002 08D8     		bhi	.L90
 255:Polyphony.cpp ****         memset(output_buffers_[voice_idx], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 2503              		.loc 1 255 9 view .LVU751
 2504              		.loc 1 255 41 is_stmt 0 view .LVU752
 2505 0004 00EBC110 		add	r0, r0, r1, lsl #7
 2506              	.LVL122:
 2507              		.loc 1 255 15 view .LVU753
 2508 0008 8022     		movs	r2, #128
 2509 000a 0021     		movs	r1, #0
 2510              	.LVL123:
 2511              		.loc 1 255 15 view .LVU754
 2512 000c 00F59140 		add	r0, r0, #18560
 2513 0010 3430     		adds	r0, r0, #52
 2514 0012 FFF7FEBF 		b	memset
 2515              	.LVL124:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 116


 2516              	.L90:
 256:Polyphony.cpp ****     }
 257:Polyphony.cpp **** }
 2517              		.loc 1 257 1 view .LVU755
 2518 0016 7047     		bx	lr
 2519              		.cfi_endproc
 2520              	.LFE6132:
 2522              		.section	.text._ZN15PolyphonyEngine14RetriggerVoiceEi,"ax",%progbits
 2523              		.align	1
 2524              		.global	_ZN15PolyphonyEngine14RetriggerVoiceEi
 2525              		.syntax unified
 2526              		.thumb
 2527              		.thumb_func
 2529              	_ZN15PolyphonyEngine14RetriggerVoiceEi:
 2530              	.LVL125:
 2531              	.LFB6133:
 258:Polyphony.cpp **** 
 259:Polyphony.cpp **** void PolyphonyEngine::RetriggerVoice(int voice_idx) {
 2532              		.loc 1 259 53 is_stmt 1 view -0
 2533              		.cfi_startproc
 2534              		@ args = 0, pretend = 0, frame = 0
 2535              		@ frame_needed = 0, uses_anonymous_args = 0
 260:Polyphony.cpp ****     if (voice_idx >= 0 && voice_idx < NUM_VOICES && voice_active_[voice_idx]) {
 2536              		.loc 1 260 5 view .LVU757
 2537              	.LBB1824:
 2538 0000 0329     		cmp	r1, #3
 2539              	.LBE1824:
 259:Polyphony.cpp ****     if (voice_idx >= 0 && voice_idx < NUM_VOICES && voice_active_[voice_idx]) {
 2540              		.loc 1 259 53 is_stmt 0 view .LVU758
 2541 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2542              		.cfi_def_cfa_offset 24
 2543              		.cfi_offset 3, -24
 2544              		.cfi_offset 4, -20
 2545              		.cfi_offset 5, -16
 2546              		.cfi_offset 6, -12
 2547              		.cfi_offset 7, -8
 2548              		.cfi_offset 14, -4
 259:Polyphony.cpp ****     if (voice_idx >= 0 && voice_idx < NUM_VOICES && voice_active_[voice_idx]) {
 2549              		.loc 1 259 53 view .LVU759
 2550 0004 0446     		mov	r4, r0
 2551 0006 0E46     		mov	r6, r1
 2552              	.LBB1825:
 2553              		.loc 1 260 5 view .LVU760
 2554 0008 28D8     		bhi	.L92
 2555              		.loc 1 260 76 discriminator 1 view .LVU761
 2556 000a 4218     		adds	r2, r0, r1
 2557 000c 44F6A003 		movw	r3, #18592
 2558              		.loc 1 260 50 discriminator 1 view .LVU762
 2559 0010 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2560 0012 1BB3     		cbz	r3, .L92
 2561              	.LVL126:
 2562              		.loc 1 260 50 discriminator 1 view .LVU763
 2563              	.LBE1825:
 2564              	.LBB1826:
 2565              	.LBI1826:
 259:Polyphony.cpp ****     if (voice_idx >= 0 && voice_idx < NUM_VOICES && voice_active_[voice_idx]) {
 2566              		.loc 1 259 6 is_stmt 1 view .LVU764
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 117


 2567              	.LBB1827:
 261:Polyphony.cpp ****         bool percussive_engine = (patches_[voice_idx].engine > 7);
 2568              		.loc 1 261 9 view .LVU765
 2569              		.loc 1 261 55 is_stmt 0 view .LVU766
 2570 0014 2823     		movs	r3, #40
 2571 0016 44F26C62 		movw	r2, #18028
 2572 001a 03FB0103 		mla	r3, r3, r1, r0
 2573 001e 9F58     		ldr	r7, [r3, r2]
 2574              	.LVL127:
 262:Polyphony.cpp ****         if (!percussive_engine) {
 2575              		.loc 1 262 9 is_stmt 1 view .LVU767
 2576 0020 072F     		cmp	r7, #7
 2577 0022 0BDC     		bgt	.L96
 263:Polyphony.cpp ****             voice_envelopes_[voice_idx].Reset();
 2578              		.loc 1 263 13 view .LVU768
 2579              		.loc 1 263 46 is_stmt 0 view .LVU769
 2580 0024 4425     		movs	r5, #68
 2581 0026 05FB0105 		mla	r5, r5, r1, r0
 2582 002a 05F58F45 		add	r5, r5, #18304
 2583 002e 1035     		adds	r5, r5, #16
 2584 0030 2846     		mov	r0, r5
 2585              	.LVL128:
 2586              		.loc 1 263 46 view .LVU770
 2587 0032 FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 2588              	.LVL129:
 264:Polyphony.cpp ****             voice_envelopes_[voice_idx].Trigger();
 2589              		.loc 1 264 13 is_stmt 1 view .LVU771
 2590              		.loc 1 264 48 is_stmt 0 view .LVU772
 2591 0036 2846     		mov	r0, r5
 2592 0038 FFF7FEFF 		bl	_ZN13VoiceEnvelope7TriggerEv
 2593              	.LVL130:
 2594              	.L96:
 265:Polyphony.cpp ****         }
 266:Polyphony.cpp **** 
 267:Polyphony.cpp ****         modulations_[voice_idx].trigger = 1.0f;
 2595              		.loc 1 267 9 is_stmt 1 view .LVU773
 2596              		.loc 1 267 41 is_stmt 0 view .LVU774
 2597 003c 2821     		movs	r1, #40
 2598 003e 4FF07E52 		mov	r2, #1065353216
 268:Polyphony.cpp ****         if(percussive_engine) {
 2599              		.loc 1 268 9 view .LVU775
 2600 0042 072F     		cmp	r7, #7
 267:Polyphony.cpp ****         if(percussive_engine) {
 2601              		.loc 1 267 41 view .LVU776
 2602 0044 01FB0644 		mla	r4, r1, r6, r4
 2603              	.LVL131:
 267:Polyphony.cpp ****         if(percussive_engine) {
 2604              		.loc 1 267 41 view .LVU777
 2605 0048 04F58E43 		add	r3, r4, #18176
 2606 004c 9A60     		str	r2, [r3, #8]	@ float
 2607 004e 03F10803 		add	r3, r3, #8
 2608              		.loc 1 268 9 is_stmt 1 view .LVU778
 269:Polyphony.cpp ****             modulations_[voice_idx].trigger_patched = true;
 2609              		.loc 1 269 13 view .LVU779
 2610              		.loc 1 269 53 is_stmt 0 view .LVU780
 2611 0052 C2BF     		ittt	gt
 2612 0054 0122     		movgt	r2, #1
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 118


 2613 0056 44F21373 		movwgt	r3, #18195
 2614 005a E254     		strbgt	r2, [r4, r3]
 2615              	.LVL132:
 2616              	.L92:
 2617              		.loc 1 269 53 view .LVU781
 2618              	.LBE1827:
 2619              	.LBE1826:
 270:Polyphony.cpp ****         }
 271:Polyphony.cpp ****     }
 272:Polyphony.cpp **** }
 2620              		.loc 1 272 1 view .LVU782
 2621 005c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2622              		.loc 1 272 1 view .LVU783
 2623              		.cfi_endproc
 2624              	.LFE6133:
 2626              		.section	.text._ZN15PolyphonyEngine15PrepVoiceParamsERKNS_16RenderParametersE,"ax",%progbits
 2627              		.align	1
 2628              		.global	_ZN15PolyphonyEngine15PrepVoiceParamsERKNS_16RenderParametersE
 2629              		.syntax unified
 2630              		.thumb
 2631              		.thumb_func
 2633              	_ZN15PolyphonyEngine15PrepVoiceParamsERKNS_16RenderParametersE:
 2634              	.LVL133:
 2635              	.LFB6127:
 131:Polyphony.cpp ****     bool percussive_engine = (params.engine_index > 7);
 2636              		.loc 1 131 71 is_stmt 1 view -0
 2637              		.cfi_startproc
 2638              		@ args = 0, pretend = 0, frame = 32
 2639              		@ frame_needed = 0, uses_anonymous_args = 0
 132:Polyphony.cpp **** 
 2640              		.loc 1 132 5 view .LVU785
 132:Polyphony.cpp **** 
 2641              		.loc 1 132 38 is_stmt 0 view .LVU786
 2642 0000 0B68     		ldr	r3, [r1]
 132:Polyphony.cpp **** 
 2643              		.loc 1 132 10 view .LVU787
 2644 0002 072B     		cmp	r3, #7
 2645 0004 CCBF     		ite	gt
 2646 0006 0123     		movgt	r3, #1
 2647 0008 0023     		movle	r3, #0
 131:Polyphony.cpp ****     bool percussive_engine = (params.engine_index > 7);
 2648              		.loc 1 131 71 view .LVU788
 2649 000a 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2650              		.cfi_def_cfa_offset 36
 2651              		.cfi_offset 4, -36
 2652              		.cfi_offset 5, -32
 2653              		.cfi_offset 6, -28
 2654              		.cfi_offset 7, -24
 2655              		.cfi_offset 8, -20
 2656              		.cfi_offset 9, -16
 2657              		.cfi_offset 10, -12
 2658              		.cfi_offset 11, -8
 2659              		.cfi_offset 14, -4
 2660 000e 0546     		mov	r5, r0
 2661 0010 0C46     		mov	r4, r1
 2662 0012 2DED088B 		vpush.64	{d8, d9, d10, d11}
 2663              		.cfi_def_cfa_offset 68
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 119


 2664              		.cfi_offset 80, -68
 2665              		.cfi_offset 81, -64
 2666              		.cfi_offset 82, -60
 2667              		.cfi_offset 83, -56
 2668              		.cfi_offset 84, -52
 2669              		.cfi_offset 85, -48
 2670              		.cfi_offset 86, -44
 2671              		.cfi_offset 87, -40
 132:Polyphony.cpp **** 
 2672              		.loc 1 132 10 view .LVU789
 2673 0016 0BEE103A 		vmov	s22, r3	@ int
 2674              	.LVL134:
 134:Polyphony.cpp ****     float release_value = 0.0f;
 2675              		.loc 1 134 5 is_stmt 1 view .LVU790
 135:Polyphony.cpp ****     if (!percussive_engine) {
 2676              		.loc 1 135 5 view .LVU791
 136:Polyphony.cpp ****         float attack_raw = params.env_attack_val; 
 2677              		.loc 1 136 5 view .LVU792
 131:Polyphony.cpp ****     bool percussive_engine = (params.engine_index > 7);
 2678              		.loc 1 131 71 is_stmt 0 view .LVU793
 2679 001a 8BB0     		sub	sp, sp, #44
 2680              		.cfi_def_cfa_offset 112
 2681              	.LBB1828:
 136:Polyphony.cpp ****         float attack_raw = params.env_attack_val; 
 2682              		.loc 1 136 5 view .LVU794
 2683 001c 00F38980 		bgt	.L113
 2684              	.LBB1829:
 137:Polyphony.cpp ****         if (attack_raw < 0.2f) {
 2685              		.loc 1 137 9 is_stmt 1 view .LVU795
 137:Polyphony.cpp ****         if (attack_raw < 0.2f) {
 2686              		.loc 1 137 15 is_stmt 0 view .LVU796
 2687 0020 91ED080A 		vldr.32	s0, [r1, #32]
 2688              	.LVL135:
 138:Polyphony.cpp ****             attack_value = attack_raw * (attack_raw * 0.5f);
 2689              		.loc 1 138 9 is_stmt 1 view .LVU797
 2690 0024 DFED557A 		vldr.32	s15, .L121
 2691 0028 B4EEE70A 		vcmpe.f32	s0, s15
 143:Polyphony.cpp ****     }
 2692              		.loc 1 143 32 is_stmt 0 view .LVU798
 2693 002c D1ED097A 		vldr.32	s15, [r1, #36]
 143:Polyphony.cpp ****     }
 2694              		.loc 1 143 48 view .LVU799
 2695 0030 67EEA78A 		vmul.f32	s17, s15, s15
 138:Polyphony.cpp ****             attack_value = attack_raw * (attack_raw * 0.5f);
 2696              		.loc 1 138 9 view .LVU800
 2697 0034 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 139:Polyphony.cpp ****         } else {
 2698              		.loc 1 139 13 is_stmt 1 view .LVU801
 143:Polyphony.cpp ****     }
 2699              		.loc 1 143 23 is_stmt 0 view .LVU802
 2700 0038 68EEA78A 		vmul.f32	s17, s17, s15
 139:Polyphony.cpp ****         } else {
 2701              		.loc 1 139 53 view .LVU803
 2702 003c 4ABF     		itet	mi
 2703 003e B6EE008A 		vmovmi.f32	s16, #5.0e-1
 141:Polyphony.cpp ****         }
 2704              		.loc 1 141 39 view .LVU804
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 120


 2705 0042 20EE008A 		vmulpl.f32	s16, s0, s0
 139:Polyphony.cpp ****         } else {
 2706              		.loc 1 139 53 view .LVU805
 2707 0046 20EE088A 		vmulmi.f32	s16, s0, s16
 141:Polyphony.cpp ****         }
 2708              		.loc 1 141 13 is_stmt 1 view .LVU806
 141:Polyphony.cpp ****         }
 2709              		.loc 1 141 26 is_stmt 0 view .LVU807
 2710 004a 28EE008A 		vmul.f32	s16, s16, s0
 2711              	.LVL136:
 143:Polyphony.cpp ****     }
 2712              		.loc 1 143 9 is_stmt 1 view .LVU808
 2713              	.L101:
 143:Polyphony.cpp ****     }
 2714              		.loc 1 143 9 is_stmt 0 view .LVU809
 2715              	.LBE1829:
 2716              	.LBE1828:
 146:Polyphony.cpp ****     float current_global_harmonics = params.harm_knob_val;
 2717              		.loc 1 146 5 is_stmt 1 view .LVU810
 146:Polyphony.cpp ****     float current_global_harmonics = params.harm_knob_val;
 2718              		.loc 1 146 11 is_stmt 0 view .LVU811
 2719 004e F3EE087A 		vmov.f32	s15, #2.4e+1
 2720 0052 94ED047A 		vldr.32	s14, [r4, #16]
 2721 0056 BAEE089A 		vmov.f32	s18, #-1.2e+1
 2722 005a 05F58C46 		add	r6, r5, #17920
 2723 005e 05F59149 		add	r9, r5, #18560
 2724 0062 05F5914A 		add	r10, r5, #18560
 2725 0066 05F58F48 		add	r8, r5, #18304
 147:Polyphony.cpp ****     float current_global_morph = params.morph_knob_val;
 2726              		.loc 1 147 11 view .LVU812
 2727 006a D4ED059A 		vldr.32	s19, [r4, #20]
 146:Polyphony.cpp ****     float current_global_harmonics = params.harm_knob_val;
 2728              		.loc 1 146 11 view .LVU813
 2729 006e A7EE279A 		vfma.f32	s18, s14, s15
 2730              	.LVL137:
 147:Polyphony.cpp ****     float current_global_morph = params.morph_knob_val;
 2731              		.loc 1 147 5 is_stmt 1 view .LVU814
 148:Polyphony.cpp ****     float current_global_timbre = params.timbre_knob_val;
 2732              		.loc 1 148 5 view .LVU815
 148:Polyphony.cpp ****     float current_global_timbre = params.timbre_knob_val;
 2733              		.loc 1 148 11 is_stmt 0 view .LVU816
 2734 0072 94ED06AA 		vldr.32	s20, [r4, #24]
 2735              	.LVL138:
 149:Polyphony.cpp **** 
 2736              		.loc 1 149 5 is_stmt 1 view .LVU817
 149:Polyphony.cpp **** 
 2737              		.loc 1 149 11 is_stmt 0 view .LVU818
 2738 0076 D4ED07AA 		vldr.32	s21, [r4, #28]
 2739              	.LVL139:
 151:Polyphony.cpp ****         PatchParams patch_params;
 2740              		.loc 1 151 5 is_stmt 1 view .LVU819
 151:Polyphony.cpp ****         PatchParams patch_params;
 2741              		.loc 1 151 5 is_stmt 0 view .LVU820
 2742 007a 5036     		adds	r6, r6, #80
 2743 007c 09F13409 		add	r9, r9, #52
 2744 0080 0AF1240A 		add	r10, r10, #36
 2745 0084 08F11008 		add	r8, r8, #16
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 121


 2746              	.LBB1830:
 151:Polyphony.cpp ****         PatchParams patch_params;
 2747              		.loc 1 151 14 view .LVU821
 2748 0088 0027     		movs	r7, #0
 2749              	.LVL140:
 2750              	.L108:
 151:Polyphony.cpp ****         PatchParams patch_params;
 2751              		.loc 1 151 23 is_stmt 1 discriminator 1 view .LVU822
 151:Polyphony.cpp ****         PatchParams patch_params;
 2752              		.loc 1 151 33 is_stmt 0 discriminator 1 view .LVU823
 2753 008a D4F808B0 		ldr	fp, [r4, #8]
 151:Polyphony.cpp ****         PatchParams patch_params;
 2754              		.loc 1 151 23 discriminator 1 view .LVU824
 2755 008e BB45     		cmp	fp, r7
 2756 0090 54DD     		ble	.L114
 2757              	.LBB1831:
 152:Polyphony.cpp ****         patch_params.engine_idx = params.engine_index;
 2758              		.loc 1 152 9 is_stmt 1 view .LVU825
 153:Polyphony.cpp ****         patch_params.note = voice_note_[v];
 2759              		.loc 1 153 9 view .LVU826
 153:Polyphony.cpp ****         patch_params.note = voice_note_[v];
 2760              		.loc 1 153 33 is_stmt 0 view .LVU827
 2761 0092 2368     		ldr	r3, [r4]
 2762 0094 06F1A00B 		add	fp, r6, #160
 162:Polyphony.cpp **** 
 2763              		.loc 1 162 26 view .LVU828
 2764 0098 02AA     		add	r2, sp, #8
 2765 009a 3146     		mov	r1, r6
 153:Polyphony.cpp ****         patch_params.note = voice_note_[v];
 2766              		.loc 1 153 33 view .LVU829
 2767 009c 0293     		str	r3, [sp, #8]
 154:Polyphony.cpp ****         patch_params.global_pitch_offset = global_pitch_offset;
 2768              		.loc 1 154 9 is_stmt 1 view .LVU830
 162:Polyphony.cpp **** 
 2769              		.loc 1 162 26 is_stmt 0 view .LVU831
 2770 009e 2846     		mov	r0, r5
 154:Polyphony.cpp ****         patch_params.global_pitch_offset = global_pitch_offset;
 2771              		.loc 1 154 42 view .LVU832
 2772 00a0 5AF8043B 		ldr	r3, [r10], #4	@ float
 164:Polyphony.cpp ****             modulations_[v],
 2773              		.loc 1 164 24 view .LVU833
 2774 00a4 F0EE680A 		vmov.f32	s1, s17
 2775 00a8 B0EE480A 		vmov.f32	s0, s16
 155:Polyphony.cpp ****         patch_params.harmonics = current_global_harmonics;
 2776              		.loc 1 155 42 view .LVU834
 2777 00ac 8DED049A 		vstr.32	s18, [sp, #16]
 154:Polyphony.cpp ****         patch_params.global_pitch_offset = global_pitch_offset;
 2778              		.loc 1 154 27 view .LVU835
 2779 00b0 0393     		str	r3, [sp, #12]	@ float
 155:Polyphony.cpp ****         patch_params.harmonics = current_global_harmonics;
 2780              		.loc 1 155 9 is_stmt 1 view .LVU836
 156:Polyphony.cpp ****         patch_params.timbre = current_global_timbre;
 2781              		.loc 1 156 9 view .LVU837
 159:Polyphony.cpp ****         patch_params.decay = release_value;
 2782              		.loc 1 159 29 is_stmt 0 view .LVU838
 2783 00b2 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 156:Polyphony.cpp ****         patch_params.timbre = current_global_timbre;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 122


 2784              		.loc 1 156 32 view .LVU839
 2785 00b4 CDED059A 		vstr.32	s19, [sp, #20]
 157:Polyphony.cpp ****         patch_params.morph = current_global_morph;
 2786              		.loc 1 157 9 is_stmt 1 view .LVU840
 159:Polyphony.cpp ****         patch_params.decay = release_value;
 2787              		.loc 1 159 29 is_stmt 0 view .LVU841
 2788 00b8 8DF82030 		strb	r3, [sp, #32]
 157:Polyphony.cpp ****         patch_params.morph = current_global_morph;
 2789              		.loc 1 157 29 view .LVU842
 2790 00bc CDED06AA 		vstr.32	s21, [sp, #24]
 158:Polyphony.cpp ****         patch_params.arp_on = params.arp_on;
 2791              		.loc 1 158 9 is_stmt 1 view .LVU843
 158:Polyphony.cpp ****         patch_params.arp_on = params.arp_on;
 2792              		.loc 1 158 28 is_stmt 0 view .LVU844
 2793 00c0 8DED07AA 		vstr.32	s20, [sp, #28]
 159:Polyphony.cpp ****         patch_params.decay = release_value;
 2794              		.loc 1 159 9 is_stmt 1 view .LVU845
 160:Polyphony.cpp ****         
 2795              		.loc 1 160 9 view .LVU846
 160:Polyphony.cpp ****         
 2796              		.loc 1 160 28 is_stmt 0 view .LVU847
 2797 00c4 CDED098A 		vstr.32	s17, [sp, #36]
 162:Polyphony.cpp **** 
 2798              		.loc 1 162 9 is_stmt 1 view .LVU848
 162:Polyphony.cpp **** 
 2799              		.loc 1 162 26 is_stmt 0 view .LVU849
 2800 00c8 FFF7FEFF 		bl	_ZN15PolyphonyEngine17UpdatePatchParamsERN6plaits5PatchERK11PatchParams
 2801              	.LVL141:
 164:Polyphony.cpp ****             modulations_[v],
 2802              		.loc 1 164 9 is_stmt 1 view .LVU850
 164:Polyphony.cpp ****             modulations_[v],
 2803              		.loc 1 164 24 is_stmt 0 view .LVU851
 2804 00cc 1BEE103A 		vmov	r3, s22	@ int
 2805 00d0 4246     		mov	r2, r8
 2806 00d2 5946     		mov	r1, fp
 2807 00d4 FFF7FEFF 		bl	_ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff
 2808              	.LVL142:
 172:Polyphony.cpp ****             UpdateMonoTrigger(
 2809              		.loc 1 172 9 is_stmt 1 view .LVU852
 2810 00d8 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2811 00da 63B9     		cbnz	r3, .L106
 2812              	.LVL143:
 172:Polyphony.cpp ****             UpdateMonoTrigger(
 2813              		.loc 1 172 31 is_stmt 0 discriminator 1 view .LVU853
 2814 00dc 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 2815 00de 53B9     		cbnz	r3, .L106
 173:Polyphony.cpp ****                 modulations_[v],
 2816              		.loc 1 173 13 is_stmt 1 view .LVU854
 173:Polyphony.cpp ****                 modulations_[v],
 2817              		.loc 1 173 30 is_stmt 0 view .LVU855
 2818 00e0 05F59142 		add	r2, r5, #18560
 2819 00e4 05F58043 		add	r3, r5, #16384
 2820 00e8 2846     		mov	r0, r5
 2821 00ea 2032     		adds	r2, r2, #32
 2822 00ec 93F8BC3B 		ldrb	r3, [r3, #3004]	@ zero_extendqisi2
 2823 00f0 3A44     		add	r2, r2, r7
 2824 00f2 FFF7FEFF 		bl	_ZN15PolyphonyEngine17UpdateMonoTriggerERN6plaits11ModulationsERbb
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 123


 2825              	.LVL144:
 2826              	.L106:
 180:Polyphony.cpp **** 
 2827              		.loc 1 180 9 is_stmt 1 view .LVU856
 180:Polyphony.cpp **** 
 2828              		.loc 1 180 26 is_stmt 0 view .LVU857
 2829 00f6 2023     		movs	r3, #32
 2830 00f8 41F29410 		movw	r0, #4500
 2831 00fc 5A46     		mov	r2, fp
 2832 00fe 3146     		mov	r1, r6
 2833 0100 0093     		str	r3, [sp]
 2834 0102 4B46     		mov	r3, r9
 2835 0104 00FB0750 		mla	r0, r0, r7, r5
 2836 0108 FFF7FEFF 		bl	_ZN6plaits5Voice6RenderERKNS_5PatchERKNS_11ModulationsEPNS0_5FrameEj
 2837              	.LVL145:
 182:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 2838              		.loc 1 182 9 is_stmt 1 view .LVU858
 2839 010c 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2840 010e 4BB9     		cbnz	r3, .L107
 182:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 2841              		.loc 1 182 31 is_stmt 0 discriminator 1 view .LVU859
 2842 0110 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 2843 0112 3BB9     		cbnz	r3, .L107
 182:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 2844              		.loc 1 182 49 discriminator 2 view .LVU860
 2845 0114 F369     		ldr	r3, [r6, #28]
 2846 0116 072B     		cmp	r3, #7
 2847 0118 04DD     		ble	.L107
 182:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 2848              		.loc 1 182 77 discriminator 3 view .LVU861
 2849 011a 1FB9     		cbnz	r7, .L107
 183:Polyphony.cpp ****         }
 2850              		.loc 1 183 13 is_stmt 1 view .LVU862
 183:Polyphony.cpp ****         }
 2851              		.loc 1 183 37 is_stmt 0 view .LVU863
 2852 011c 05F58E43 		add	r3, r5, #18176
 2853 0120 0022     		movs	r2, #0
 2854 0122 9A60     		str	r2, [r3, #8]	@ float
 2855              	.L107:
 2856              	.LBE1831:
 151:Polyphony.cpp ****         PatchParams patch_params;
 2857              		.loc 1 151 5 is_stmt 1 discriminator 2 view .LVU864
 2858 0124 0137     		adds	r7, r7, #1
 2859              	.LVL146:
 151:Polyphony.cpp ****         PatchParams patch_params;
 2860              		.loc 1 151 5 is_stmt 0 discriminator 2 view .LVU865
 2861 0126 2836     		adds	r6, r6, #40
 2862 0128 09F18009 		add	r9, r9, #128
 2863 012c 08F14408 		add	r8, r8, #68
 2864 0130 ABE7     		b	.L108
 2865              	.LVL147:
 2866              	.L113:
 151:Polyphony.cpp ****         PatchParams patch_params;
 2867              		.loc 1 151 5 discriminator 2 view .LVU866
 2868              	.LBE1830:
 135:Polyphony.cpp ****     if (!percussive_engine) {
 2869              		.loc 1 135 11 view .LVU867
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 124


 2870 0132 DFED138A 		vldr.32	s17, .L121+4
 134:Polyphony.cpp ****     float release_value = 0.0f;
 2871              		.loc 1 134 11 view .LVU868
 2872 0136 B0EE688A 		vmov.f32	s16, s17
 2873 013a 88E7     		b	.L101
 2874              	.LVL148:
 2875              	.L114:
 2876              	.LBB1832:
 151:Polyphony.cpp ****         PatchParams patch_params;
 2877              		.loc 1 151 33 view .LVU869
 2878 013c 5C46     		mov	r4, fp
 2879              	.LVL149:
 2880              	.L105:
 151:Polyphony.cpp ****         PatchParams patch_params;
 2881              		.loc 1 151 33 view .LVU870
 2882              	.LBE1832:
 2883              	.LBB1833:
 188:Polyphony.cpp ****          SilenceVoice(v);
 2884              		.loc 1 188 38 is_stmt 1 discriminator 3 view .LVU871
 2885 013e 032C     		cmp	r4, #3
 2886 0140 05DC     		bgt	.L109
 189:Polyphony.cpp ****     }
 2887              		.loc 1 189 10 discriminator 2 view .LVU872
 189:Polyphony.cpp ****     }
 2888              		.loc 1 189 22 is_stmt 0 discriminator 2 view .LVU873
 2889 0142 2146     		mov	r1, r4
 2890 0144 2846     		mov	r0, r5
 188:Polyphony.cpp ****          SilenceVoice(v);
 2891              		.loc 1 188 5 discriminator 2 view .LVU874
 2892 0146 0134     		adds	r4, r4, #1
 2893              	.LVL150:
 189:Polyphony.cpp ****     }
 2894              		.loc 1 189 22 discriminator 2 view .LVU875
 2895 0148 FFF7FEFF 		bl	_ZN15PolyphonyEngine12SilenceVoiceEi
 2896              	.LVL151:
 188:Polyphony.cpp ****          SilenceVoice(v);
 2897              		.loc 1 188 5 is_stmt 1 discriminator 2 view .LVU876
 188:Polyphony.cpp ****          SilenceVoice(v);
 2898              		.loc 1 188 5 is_stmt 0 discriminator 2 view .LVU877
 2899 014c F7E7     		b	.L105
 2900              	.L109:
 188:Polyphony.cpp ****          SilenceVoice(v);
 2901              		.loc 1 188 5 discriminator 2 view .LVU878
 2902              	.LBE1833:
 192:Polyphony.cpp ****         for(int v = 0; v < effective_voices; ++v) {
 2903              		.loc 1 192 5 is_stmt 1 view .LVU879
 2904              	.LBB1834:
 192:Polyphony.cpp ****         for(int v = 0; v < effective_voices; ++v) {
 2905              		.loc 1 192 8 is_stmt 0 view .LVU880
 2906 014e 05F58046 		add	r6, r5, #16384
 192:Polyphony.cpp ****         for(int v = 0; v < effective_voices; ++v) {
 2907              		.loc 1 192 5 view .LVU881
 2908 0152 96F8BC3B 		ldrb	r3, [r6, #3004]	@ zero_extendqisi2
 2909 0156 5BB1     		cbz	r3, .L100
 2910              	.LBB1835:
 2911              	.LBB1836:
 193:Polyphony.cpp ****             RetriggerVoice(v);
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 125


 2912              		.loc 1 193 17 view .LVU882
 2913 0158 0024     		movs	r4, #0
 2914              	.LVL152:
 2915              	.L112:
 193:Polyphony.cpp ****             RetriggerVoice(v);
 2916              		.loc 1 193 26 is_stmt 1 discriminator 3 view .LVU883
 2917 015a A345     		cmp	fp, r4
 2918 015c 05DD     		ble	.L111
 194:Polyphony.cpp ****         }
 2919              		.loc 1 194 13 discriminator 2 view .LVU884
 194:Polyphony.cpp ****         }
 2920              		.loc 1 194 27 is_stmt 0 discriminator 2 view .LVU885
 2921 015e 2146     		mov	r1, r4
 2922 0160 2846     		mov	r0, r5
 193:Polyphony.cpp ****             RetriggerVoice(v);
 2923              		.loc 1 193 9 discriminator 2 view .LVU886
 2924 0162 0134     		adds	r4, r4, #1
 2925              	.LVL153:
 194:Polyphony.cpp ****         }
 2926              		.loc 1 194 27 discriminator 2 view .LVU887
 2927 0164 FFF7FEFF 		bl	_ZN15PolyphonyEngine14RetriggerVoiceEi
 2928              	.LVL154:
 193:Polyphony.cpp ****             RetriggerVoice(v);
 2929              		.loc 1 193 9 is_stmt 1 discriminator 2 view .LVU888
 193:Polyphony.cpp ****             RetriggerVoice(v);
 2930              		.loc 1 193 9 is_stmt 0 discriminator 2 view .LVU889
 2931 0168 F7E7     		b	.L112
 2932              	.L111:
 193:Polyphony.cpp ****             RetriggerVoice(v);
 2933              		.loc 1 193 9 discriminator 2 view .LVU890
 2934              	.LBE1836:
 196:Polyphony.cpp ****     }
 2935              		.loc 1 196 9 is_stmt 1 view .LVU891
 196:Polyphony.cpp ****     }
 2936              		.loc 1 196 30 is_stmt 0 view .LVU892
 2937 016a 0023     		movs	r3, #0
 2938 016c 86F8BC3B 		strb	r3, [r6, #3004]
 2939              	.LVL155:
 2940              	.L100:
 196:Polyphony.cpp ****     }
 2941              		.loc 1 196 30 view .LVU893
 2942              	.LBE1835:
 2943              	.LBE1834:
 198:Polyphony.cpp **** 
 2944              		.loc 1 198 1 view .LVU894
 2945 0170 0BB0     		add	sp, sp, #44
 2946              		.cfi_def_cfa_offset 68
 2947              		@ sp needed
 2948 0172 BDEC088B 		vldm	sp!, {d8-d11}
 2949              		.cfi_restore 86
 2950              		.cfi_restore 87
 2951              		.cfi_restore 84
 2952              		.cfi_restore 85
 2953              		.cfi_restore 82
 2954              		.cfi_restore 83
 2955              		.cfi_restore 80
 2956              		.cfi_restore 81
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 126


 2957              		.cfi_def_cfa_offset 36
 2958              	.LVL156:
 198:Polyphony.cpp **** 
 2959              		.loc 1 198 1 view .LVU895
 2960 0176 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2961              	.LVL157:
 2962              	.L122:
 198:Polyphony.cpp **** 
 2963              		.loc 1 198 1 view .LVU896
 2964 017a 00BF     		.align	2
 2965              	.L121:
 2966 017c CDCC4C3E 		.word	1045220557
 2967 0180 00000000 		.word	0
 2968              		.cfi_endproc
 2969              	.LFE6127:
 2971              		.section	.text._ZN15PolyphonyEngine11RenderBlockERKNS_16RenderParametersE,"ax",%progbits
 2972              		.align	1
 2973              		.global	_ZN15PolyphonyEngine11RenderBlockERKNS_16RenderParametersE
 2974              		.syntax unified
 2975              		.thumb
 2976              		.thumb_func
 2978              	_ZN15PolyphonyEngine11RenderBlockERKNS_16RenderParametersE:
 2979              	.LVL158:
 2980              	.LFB6123:
  81:Polyphony.cpp ****     PrepVoiceParams(params);
 2981              		.loc 1 81 67 is_stmt 1 view -0
 2982              		.cfi_startproc
 2983              		@ args = 0, pretend = 0, frame = 0
 2984              		@ frame_needed = 0, uses_anonymous_args = 0
  82:Polyphony.cpp ****     
 2985              		.loc 1 82 5 view .LVU898
  81:Polyphony.cpp ****     PrepVoiceParams(params);
 2986              		.loc 1 81 67 is_stmt 0 view .LVU899
 2987 0000 38B5     		push	{r3, r4, r5, lr}
 2988              		.cfi_def_cfa_offset 16
 2989              		.cfi_offset 3, -16
 2990              		.cfi_offset 4, -12
 2991              		.cfi_offset 5, -8
 2992              		.cfi_offset 14, -4
  81:Polyphony.cpp ****     PrepVoiceParams(params);
 2993              		.loc 1 81 67 view .LVU900
 2994 0002 0D46     		mov	r5, r1
 2995 0004 0446     		mov	r4, r0
  82:Polyphony.cpp ****     
 2996              		.loc 1 82 20 view .LVU901
 2997 0006 FFF7FEFF 		bl	_ZN15PolyphonyEngine15PrepVoiceParamsERKNS_16RenderParametersE
 2998              	.LVL159:
  84:Polyphony.cpp **** 
 2999              		.loc 1 84 5 is_stmt 1 view .LVU902
  84:Polyphony.cpp **** 
 3000              		.loc 1 84 21 is_stmt 0 view .LVU903
 3001 000a 2979     		ldrb	r1, [r5, #4]	@ zero_extendqisi2
 3002 000c 2046     		mov	r0, r4
 3003 000e FFF7FEFF 		bl	_ZN15PolyphonyEngine16ProcessEnvelopesEb
 3004              	.LVL160:
  86:Polyphony.cpp ****         modulations_[0].trigger = 0.0f;
 3005              		.loc 1 86 5 is_stmt 1 view .LVU904
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 127


 3006 0012 2B7B     		ldrb	r3, [r5, #12]	@ zero_extendqisi2
 3007 0014 43B1     		cbz	r3, .L123
  87:Polyphony.cpp ****         modulations_[0].trigger_patched = false; 
 3008              		.loc 1 87 9 view .LVU905
  87:Polyphony.cpp ****         modulations_[0].trigger_patched = false; 
 3009              		.loc 1 87 33 is_stmt 0 view .LVU906
 3010 0016 04F58044 		add	r4, r4, #16384
 3011              	.LVL161:
  87:Polyphony.cpp ****         modulations_[0].trigger_patched = false; 
 3012              		.loc 1 87 33 view .LVU907
 3013 001a 0022     		movs	r2, #0
 3014 001c 04F5E163 		add	r3, r4, #1800
 3015 0020 1A60     		str	r2, [r3]	@ float
  88:Polyphony.cpp ****     }
 3016              		.loc 1 88 9 is_stmt 1 view .LVU908
  88:Polyphony.cpp ****     }
 3017              		.loc 1 88 41 is_stmt 0 view .LVU909
 3018 0022 0023     		movs	r3, #0
 3019 0024 84F81337 		strb	r3, [r4, #1811]
 3020              	.LVL162:
 3021              	.L123:
  90:Polyphony.cpp **** 
 3022              		.loc 1 90 1 view .LVU910
 3023 0028 38BD     		pop	{r3, r4, r5, pc}
  90:Polyphony.cpp **** 
 3024              		.loc 1 90 1 view .LVU911
 3025              		.cfi_endproc
 3026              	.LFE6123:
 3028              		.section	.text._ZN15PolyphonyEngine11ClearVoicesEv,"ax",%progbits
 3029              		.align	1
 3030              		.global	_ZN15PolyphonyEngine11ClearVoicesEv
 3031              		.syntax unified
 3032              		.thumb
 3033              		.thumb_func
 3035              	_ZN15PolyphonyEngine11ClearVoicesEv:
 3036              	.LVL163:
 3037              	.LFB6134:
 273:Polyphony.cpp **** 
 274:Polyphony.cpp **** void PolyphonyEngine::ClearVoices() {
 3038              		.loc 1 274 37 is_stmt 1 view -0
 3039              		.cfi_startproc
 3040              		@ args = 0, pretend = 0, frame = 0
 3041              		@ frame_needed = 0, uses_anonymous_args = 0
 275:Polyphony.cpp ****     for (int v = 0; v < NUM_VOICES; ++v) {
 3042              		.loc 1 275 5 view .LVU913
 3043              	.LBB1837:
 3044              		.loc 1 275 23 view .LVU914
 3045              	.LBE1837:
 274:Polyphony.cpp ****     for (int v = 0; v < NUM_VOICES; ++v) {
 3046              		.loc 1 274 37 is_stmt 0 view .LVU915
 3047 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3048              		.cfi_def_cfa_offset 24
 3049              		.cfi_offset 4, -24
 3050              		.cfi_offset 5, -20
 3051              		.cfi_offset 6, -16
 3052              		.cfi_offset 7, -12
 3053              		.cfi_offset 8, -8
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 128


 3054              		.cfi_offset 14, -4
 3055 0004 00F59147 		add	r7, r0, #18560
 3056 0008 00F58F46 		add	r6, r0, #18304
 3057 000c 00F58E45 		add	r5, r0, #18176
 3058 0010 00F59144 		add	r4, r0, #18560
 3059 0014 2037     		adds	r7, r7, #32
 3060 0016 1036     		adds	r6, r6, #16
 3061 0018 0835     		adds	r5, r5, #8
 3062 001a 3434     		adds	r4, r4, #52
 3063 001c B846     		mov	r8, r7
 3064              	.LVL164:
 3065              	.L129:
 3066              	.LBB1838:
 276:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 3067              		.loc 1 276 9 is_stmt 1 discriminator 2 view .LVU916
 3068              		.loc 1 276 34 is_stmt 0 discriminator 2 view .LVU917
 3069 001e 3046     		mov	r0, r6
 275:Polyphony.cpp ****     for (int v = 0; v < NUM_VOICES; ++v) {
 3070              		.loc 1 275 23 discriminator 2 view .LVU918
 3071 0020 4436     		adds	r6, r6, #68
 3072              		.loc 1 276 34 discriminator 2 view .LVU919
 3073 0022 FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 3074              	.LVL165:
 277:Polyphony.cpp ****         voice_active_[v] = false;
 3075              		.loc 1 277 9 is_stmt 1 discriminator 2 view .LVU920
 3076              		.loc 1 277 26 is_stmt 0 discriminator 2 view .LVU921
 3077 0026 0021     		movs	r1, #0
 278:Polyphony.cpp ****         modulations_[v].trigger = 0.0f;
 3078              		.loc 1 278 33 discriminator 2 view .LVU922
 3079 0028 0023     		movs	r3, #0
 279:Polyphony.cpp ****         modulations_[v].trigger_patched = false;
 280:Polyphony.cpp ****         modulations_[v].level_patched = false; 
 281:Polyphony.cpp ****         memset(output_buffers_[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 3080              		.loc 1 281 15 discriminator 2 view .LVU923
 3081 002a 2046     		mov	r0, r4
 277:Polyphony.cpp ****         modulations_[v].trigger = 0.0f;
 3082              		.loc 1 277 26 discriminator 2 view .LVU924
 3083 002c 07F8011B 		strb	r1, [r7], #1
 3084              	.LVL166:
 278:Polyphony.cpp ****         modulations_[v].trigger = 0.0f;
 3085              		.loc 1 278 9 is_stmt 1 discriminator 2 view .LVU925
 3086              		.loc 1 281 15 is_stmt 0 discriminator 2 view .LVU926
 3087 0030 8022     		movs	r2, #128
 278:Polyphony.cpp ****         modulations_[v].trigger = 0.0f;
 3088              		.loc 1 278 33 discriminator 2 view .LVU927
 3089 0032 2B60     		str	r3, [r5]	@ float
 279:Polyphony.cpp ****         modulations_[v].trigger_patched = false;
 3090              		.loc 1 279 9 is_stmt 1 discriminator 2 view .LVU928
 275:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 3091              		.loc 1 275 23 is_stmt 0 discriminator 2 view .LVU929
 3092 0034 8034     		adds	r4, r4, #128
 279:Polyphony.cpp ****         modulations_[v].trigger_patched = false;
 3093              		.loc 1 279 41 discriminator 2 view .LVU930
 3094 0036 E972     		strb	r1, [r5, #11]
 280:Polyphony.cpp ****         memset(output_buffers_[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 3095              		.loc 1 280 9 is_stmt 1 discriminator 2 view .LVU931
 275:Polyphony.cpp ****         voice_envelopes_[v].Reset();
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 129


 3096              		.loc 1 275 23 is_stmt 0 discriminator 2 view .LVU932
 3097 0038 2835     		adds	r5, r5, #40
 280:Polyphony.cpp ****         memset(output_buffers_[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 3098              		.loc 1 280 39 discriminator 2 view .LVU933
 3099 003a 05F81C1C 		strb	r1, [r5, #-28]
 3100              		.loc 1 281 9 is_stmt 1 discriminator 2 view .LVU934
 3101              		.loc 1 281 15 is_stmt 0 discriminator 2 view .LVU935
 3102 003e FFF7FEFF 		bl	memset
 3103              	.LVL167:
 275:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 3104              		.loc 1 275 5 is_stmt 1 discriminator 2 view .LVU936
 275:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 3105              		.loc 1 275 23 discriminator 2 view .LVU937
 3106 0042 4645     		cmp	r6, r8
 3107 0044 EBD1     		bne	.L129
 3108              	.LBE1838:
 282:Polyphony.cpp ****     }
 283:Polyphony.cpp **** }
 3109              		.loc 1 283 1 is_stmt 0 view .LVU938
 3110 0046 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3111              		.loc 1 283 1 view .LVU939
 3112              		.cfi_endproc
 3113              	.LFE6134:
 3115              		.section	.text._ZN15PolyphonyEngine10PolyToMonoEi,"ax",%progbits
 3116              		.align	1
 3117              		.global	_ZN15PolyphonyEngine10PolyToMonoEi
 3118              		.syntax unified
 3119              		.thumb
 3120              		.thumb_func
 3122              	_ZN15PolyphonyEngine10PolyToMonoEi:
 3123              	.LVL168:
 3124              	.LFB6135:
 284:Polyphony.cpp **** 
 285:Polyphony.cpp **** void PolyphonyEngine::PolyToMono(int source_voice_idx) {
 3125              		.loc 1 285 56 is_stmt 1 view -0
 3126              		.cfi_startproc
 3127              		@ args = 0, pretend = 0, frame = 0
 3128              		@ frame_needed = 0, uses_anonymous_args = 0
 286:Polyphony.cpp ****     if (source_voice_idx < 0 || source_voice_idx >= NUM_VOICES) return;
 3129              		.loc 1 286 5 view .LVU941
 3130 0000 0329     		cmp	r1, #3
 285:Polyphony.cpp ****     if (source_voice_idx < 0 || source_voice_idx >= NUM_VOICES) return;
 3131              		.loc 1 285 56 is_stmt 0 view .LVU942
 3132 0002 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3133              		.cfi_def_cfa_offset 40
 3134              		.cfi_offset 3, -40
 3135              		.cfi_offset 4, -36
 3136              		.cfi_offset 5, -32
 3137              		.cfi_offset 6, -28
 3138              		.cfi_offset 7, -24
 3139              		.cfi_offset 8, -20
 3140              		.cfi_offset 9, -16
 3141              		.cfi_offset 10, -12
 3142              		.cfi_offset 11, -8
 3143              		.cfi_offset 14, -4
 3144 0006 0446     		mov	r4, r0
 3145 0008 0E46     		mov	r6, r1
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 130


 3146 000a 2DED028B 		vpush.64	{d8}
 3147              		.cfi_def_cfa_offset 48
 3148              		.cfi_offset 80, -48
 3149              		.cfi_offset 81, -44
 3150              		.loc 1 286 5 view .LVU943
 3151 000e 67D8     		bhi	.L131
 3152 0010 00F58F47 		add	r7, r0, #18304
 3153 0014 00F58E45 		add	r5, r0, #18176
 3154              	.LBB1843:
 3155              	.LBB1844:
 3156              	.LBB1845:
 287:Polyphony.cpp **** 
 288:Polyphony.cpp ****     for (int v = 0; v < NUM_VOICES; ++v) {
 3157              		.loc 1 288 14 view .LVU944
 3158 0018 4FF00008 		mov	r8, #0
 3159 001c 1037     		adds	r7, r7, #16
 3160 001e 0835     		adds	r5, r5, #8
 3161 0020 BA46     		mov	r10, r7
 3162              	.LVL169:
 3163              	.L134:
 289:Polyphony.cpp ****         if (v != source_voice_idx) {
 3164              		.loc 1 289 9 is_stmt 1 view .LVU945
 3165 0022 4645     		cmp	r6, r8
 3166 0024 0DD0     		beq	.L133
 290:Polyphony.cpp ****             voice_active_[v] = false;
 3167              		.loc 1 290 13 view .LVU946
 3168              		.loc 1 290 30 is_stmt 0 view .LVU947
 3169 0026 04F59143 		add	r3, r4, #18560
 3170 002a 4FF00009 		mov	r9, #0
 291:Polyphony.cpp ****             voice_envelopes_[v].Reset();
 3171              		.loc 1 291 38 view .LVU948
 3172 002e 3846     		mov	r0, r7
 290:Polyphony.cpp ****             voice_active_[v] = false;
 3173              		.loc 1 290 30 view .LVU949
 3174 0030 2033     		adds	r3, r3, #32
 3175 0032 03F80890 		strb	r9, [r3, r8]
 3176              		.loc 1 291 13 is_stmt 1 view .LVU950
 3177              		.loc 1 291 38 is_stmt 0 view .LVU951
 3178 0036 FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 3179              	.LVL170:
 292:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 3180              		.loc 1 292 13 is_stmt 1 view .LVU952
 3181              		.loc 1 292 37 is_stmt 0 view .LVU953
 3182 003a 0023     		movs	r3, #0
 293:Polyphony.cpp ****             modulations_[v].trigger_patched = false;
 3183              		.loc 1 293 45 view .LVU954
 3184 003c 85F80B90 		strb	r9, [r5, #11]
 292:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 3185              		.loc 1 292 37 view .LVU955
 3186 0040 2B60     		str	r3, [r5]	@ float
 3187              		.loc 1 293 13 is_stmt 1 view .LVU956
 3188              	.L133:
 288:Polyphony.cpp ****         if (v != source_voice_idx) {
 3189              		.loc 1 288 5 view .LVU957
 3190 0042 08F10108 		add	r8, r8, #1
 3191              	.LVL171:
 288:Polyphony.cpp ****         if (v != source_voice_idx) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 131


 3192              		.loc 1 288 23 view .LVU958
 3193 0046 4437     		adds	r7, r7, #68
 3194 0048 2835     		adds	r5, r5, #40
 3195 004a B8F1040F 		cmp	r8, #4
 3196 004e E8D1     		bne	.L134
 3197              	.LBE1845:
 294:Polyphony.cpp ****         }
 295:Polyphony.cpp ****     }
 296:Polyphony.cpp **** 
 297:Polyphony.cpp ****     if (voice_active_[source_voice_idx]) {
 3198              		.loc 1 297 5 view .LVU959
 3199              		.loc 1 297 39 is_stmt 0 view .LVU960
 3200 0050 04EB0609 		add	r9, r4, r6
 3201 0054 44F6A008 		movw	r8, #18592
 3202              	.LVL172:
 3203              		.loc 1 297 39 view .LVU961
 3204 0058 9FED298A 		vldr.32	s16, .L137
 3205 005c 04F58045 		add	r5, r4, #16384
 3206              		.loc 1 297 5 view .LVU962
 3207 0060 19F80870 		ldrb	r7, [r9, r8]	@ zero_extendqisi2
 3208 0064 002F     		cmp	r7, #0
 3209 0066 3FD0     		beq	.L135
 298:Polyphony.cpp ****         voice_active_[0] = true;
 3210              		.loc 1 298 9 is_stmt 1 view .LVU963
 3211              		.loc 1 298 26 is_stmt 0 view .LVU964
 3212 0068 0123     		movs	r3, #1
 299:Polyphony.cpp ****         voice_note_[0] = voice_note_[source_voice_idx];
 300:Polyphony.cpp ****         
 301:Polyphony.cpp ****         voice_envelopes_[0] = voice_envelopes_[source_voice_idx];
 3213              		.loc 1 301 29 view .LVU965
 3214 006a 44F2907B 		movw	fp, #18320
 3215 006e 05F5F260 		add	r0, r5, #1936
 298:Polyphony.cpp ****         voice_active_[0] = true;
 3216              		.loc 1 298 26 view .LVU966
 3217 0072 85F8A038 		strb	r3, [r5, #2208]
 299:Polyphony.cpp ****         voice_note_[0] = voice_note_[source_voice_idx];
 3218              		.loc 1 299 9 is_stmt 1 view .LVU967
 299:Polyphony.cpp ****         voice_note_[0] = voice_note_[source_voice_idx];
 3219              		.loc 1 299 54 is_stmt 0 view .LVU968
 3220 0076 06F59153 		add	r3, r6, #4640
 3221 007a 0833     		adds	r3, r3, #8
 3222 007c 04EB8303 		add	r3, r4, r3, lsl #2
 3223 0080 5A68     		ldr	r2, [r3, #4]	@ float
 299:Polyphony.cpp ****         voice_note_[0] = voice_note_[source_voice_idx];
 3224              		.loc 1 299 24 view .LVU969
 3225 0082 05F6A403 		addw	r3, r5, #2212
 3226 0086 1A60     		str	r2, [r3]	@ float
 3227              		.loc 1 301 9 is_stmt 1 view .LVU970
 3228              		.loc 1 301 29 is_stmt 0 view .LVU971
 3229 0088 4422     		movs	r2, #68
 3230 008a 02FB06FA 		mul	r10, r2, r6
 3231 008e 04EB0A01 		add	r1, r4, r10
 3232 0092 5944     		add	r1, r1, fp
 3233 0094 FFF7FEFF 		bl	memcpy
 3234              	.LVL173:
 302:Polyphony.cpp **** 
 303:Polyphony.cpp ****         modulations_[0].trigger = modulations_[source_voice_idx].trigger; 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 132


 3235              		.loc 1 303 9 is_stmt 1 view .LVU972
 3236              		.loc 1 303 66 is_stmt 0 view .LVU973
 3237 0098 2821     		movs	r1, #40
 3238              		.loc 1 303 33 view .LVU974
 3239 009a 05F5E163 		add	r3, r5, #1800
 304:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
 305:Polyphony.cpp ****         modulations_[0].level = modulations_[source_voice_idx].level;
 306:Polyphony.cpp ****         modulations_[0].level_patched = modulations_[source_voice_idx].level_patched;
 307:Polyphony.cpp **** 
 308:Polyphony.cpp ****         voice_active_[source_voice_idx] = false;
 309:Polyphony.cpp ****         voice_envelopes_[source_voice_idx].Reset();
 3240              		.loc 1 309 49 view .LVU975
 3241 009e 0AEB0B00 		add	r0, r10, fp
 303:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
 3242              		.loc 1 303 66 view .LVU976
 3243 00a2 01FB0646 		mla	r6, r1, r6, r4
 3244              	.LVL174:
 3245              		.loc 1 309 49 view .LVU977
 3246 00a6 2044     		add	r0, r0, r4
 303:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
 3247              		.loc 1 303 66 view .LVU978
 3248 00a8 06F58E47 		add	r7, r6, #18176
 3249 00ac BA68     		ldr	r2, [r7, #8]	@ float
 305:Polyphony.cpp ****         modulations_[0].level_patched = modulations_[source_voice_idx].level_patched;
 3250              		.loc 1 305 64 view .LVU979
 3251 00ae F968     		ldr	r1, [r7, #12]	@ float
 303:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
 3252              		.loc 1 303 33 view .LVU980
 3253 00b0 1A60     		str	r2, [r3]	@ float
 304:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
 3254              		.loc 1 304 9 is_stmt 1 view .LVU981
 304:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
 3255              		.loc 1 304 74 is_stmt 0 view .LVU982
 3256 00b2 44F21372 		movw	r2, #18195
 3257 00b6 B35C     		ldrb	r3, [r6, r2]	@ zero_extendqisi2
 304:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
 3258              		.loc 1 304 41 view .LVU983
 3259 00b8 85F81337 		strb	r3, [r5, #1811]
 305:Polyphony.cpp ****         modulations_[0].level_patched = modulations_[source_voice_idx].level_patched;
 3260              		.loc 1 305 9 is_stmt 1 view .LVU984
 305:Polyphony.cpp ****         modulations_[0].level_patched = modulations_[source_voice_idx].level_patched;
 3261              		.loc 1 305 31 is_stmt 0 view .LVU985
 3262 00bc 05F20C73 		addw	r3, r5, #1804
 3263 00c0 1960     		str	r1, [r3]	@ float
 306:Polyphony.cpp **** 
 3264              		.loc 1 306 9 is_stmt 1 view .LVU986
 306:Polyphony.cpp **** 
 3265              		.loc 1 306 72 is_stmt 0 view .LVU987
 3266 00c2 44F21473 		movw	r3, #18196
 3267 00c6 F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 306:Polyphony.cpp **** 
 3268              		.loc 1 306 39 view .LVU988
 3269 00c8 85F81437 		strb	r3, [r5, #1812]
 308:Polyphony.cpp ****         voice_envelopes_[source_voice_idx].Reset();
 3270              		.loc 1 308 9 is_stmt 1 view .LVU989
 308:Polyphony.cpp ****         voice_envelopes_[source_voice_idx].Reset();
 3271              		.loc 1 308 41 is_stmt 0 view .LVU990
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 133


 3272 00cc 0025     		movs	r5, #0
 3273 00ce 09F80850 		strb	r5, [r9, r8]
 3274              		.loc 1 309 9 is_stmt 1 view .LVU991
 3275              		.loc 1 309 49 is_stmt 0 view .LVU992
 3276 00d2 FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 3277              	.LVL175:
 310:Polyphony.cpp ****         modulations_[source_voice_idx].trigger = 0.0f;
 3278              		.loc 1 310 9 is_stmt 1 view .LVU993
 311:Polyphony.cpp ****         modulations_[source_voice_idx].trigger_patched = false;
 3279              		.loc 1 311 56 is_stmt 0 view .LVU994
 3280 00d6 44F21372 		movw	r2, #18195
 310:Polyphony.cpp ****         modulations_[source_voice_idx].trigger = 0.0f;
 3281              		.loc 1 310 48 view .LVU995
 3282 00da 87ED028A 		vstr.32	s16, [r7, #8]
 3283              		.loc 1 311 9 is_stmt 1 view .LVU996
 3284              		.loc 1 311 56 is_stmt 0 view .LVU997
 3285 00de B554     		strb	r5, [r6, r2]
 3286              	.L131:
 3287              		.loc 1 311 56 view .LVU998
 3288              	.LBE1844:
 3289              	.LBE1843:
 312:Polyphony.cpp ****     } else {
 313:Polyphony.cpp ****         voice_active_[0] = false;
 314:Polyphony.cpp ****         voice_envelopes_[0].Reset();
 315:Polyphony.cpp ****         modulations_[0].trigger = 0.0f;
 316:Polyphony.cpp ****         modulations_[0].trigger_patched = false;
 317:Polyphony.cpp ****     }
 318:Polyphony.cpp **** }
 3290              		.loc 1 318 1 view .LVU999
 3291 00e0 BDEC028B 		vldm	sp!, {d8}
 3292              		.cfi_remember_state
 3293              		.cfi_restore 80
 3294              		.cfi_restore 81
 3295              		.cfi_def_cfa_offset 40
 3296 00e4 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3297              	.LVL176:
 3298              	.L135:
 3299              		.cfi_restore_state
 3300              	.LBB1847:
 3301              	.LBB1846:
 313:Polyphony.cpp ****         voice_envelopes_[0].Reset();
 3302              		.loc 1 313 9 is_stmt 1 view .LVU1000
 314:Polyphony.cpp ****         modulations_[0].trigger = 0.0f;
 3303              		.loc 1 314 34 is_stmt 0 view .LVU1001
 3304 00e8 5046     		mov	r0, r10
 313:Polyphony.cpp ****         voice_envelopes_[0].Reset();
 3305              		.loc 1 313 26 view .LVU1002
 3306 00ea 85F8A078 		strb	r7, [r5, #2208]
 314:Polyphony.cpp ****         modulations_[0].trigger = 0.0f;
 3307              		.loc 1 314 9 is_stmt 1 view .LVU1003
 314:Polyphony.cpp ****         modulations_[0].trigger = 0.0f;
 3308              		.loc 1 314 34 is_stmt 0 view .LVU1004
 3309 00ee FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 3310              	.LVL177:
 315:Polyphony.cpp ****         modulations_[0].trigger_patched = false;
 3311              		.loc 1 315 9 is_stmt 1 view .LVU1005
 315:Polyphony.cpp ****         modulations_[0].trigger_patched = false;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 134


 3312              		.loc 1 315 33 is_stmt 0 view .LVU1006
 3313 00f2 05F5E163 		add	r3, r5, #1800
 3314 00f6 83ED008A 		vstr.32	s16, [r3]
 316:Polyphony.cpp ****     }
 3315              		.loc 1 316 9 is_stmt 1 view .LVU1007
 316:Polyphony.cpp ****     }
 3316              		.loc 1 316 41 is_stmt 0 view .LVU1008
 3317 00fa 85F81377 		strb	r7, [r5, #1811]
 316:Polyphony.cpp ****     }
 3318              		.loc 1 316 41 view .LVU1009
 3319 00fe EFE7     		b	.L131
 3320              	.L138:
 3321              		.align	2
 3322              	.L137:
 3323 0100 00000000 		.word	0
 3324              	.LBE1846:
 3325              	.LBE1847:
 3326              		.cfi_endproc
 3327              	.LFE6135:
 3329              		.section	.text._ZN15PolyphonyEngine14OnEngineChangeEii,"ax",%progbits
 3330              		.align	1
 3331              		.global	_ZN15PolyphonyEngine14OnEngineChangeEii
 3332              		.syntax unified
 3333              		.thumb
 3334              		.thumb_func
 3336              	_ZN15PolyphonyEngine14OnEngineChangeEii:
 3337              	.LVL178:
 3338              	.LFB6136:
 319:Polyphony.cpp **** 
 320:Polyphony.cpp **** void PolyphonyEngine::OnEngineChange(int old_engine_idx, int new_engine_idx) {
 3339              		.loc 1 320 78 is_stmt 1 view -0
 3340              		.cfi_startproc
 3341              		@ args = 0, pretend = 0, frame = 0
 3342              		@ frame_needed = 0, uses_anonymous_args = 0
 3343              		@ link register save eliminated.
 321:Polyphony.cpp ****     bool prev_was_poly = (old_engine_idx <= 3);
 3344              		.loc 1 321 5 view .LVU1011
 3345              		.loc 1 321 10 is_stmt 0 view .LVU1012
 3346 0000 0329     		cmp	r1, #3
 320:Polyphony.cpp ****     bool prev_was_poly = (old_engine_idx <= 3);
 3347              		.loc 1 320 78 view .LVU1013
 3348 0002 70B4     		push	{r4, r5, r6}
 3349              		.cfi_def_cfa_offset 12
 3350              		.cfi_offset 4, -12
 3351              		.cfi_offset 5, -8
 3352              		.cfi_offset 6, -4
 3353              		.loc 1 321 10 view .LVU1014
 3354 0004 CCBF     		ite	gt
 3355 0006 0025     		movgt	r5, #0
 3356 0008 0125     		movle	r5, #1
 3357              	.LVL179:
 322:Polyphony.cpp ****     bool now_poly      = (new_engine_idx <= 3);
 3358              		.loc 1 322 5 is_stmt 1 view .LVU1015
 3359              		.loc 1 322 10 is_stmt 0 view .LVU1016
 3360 000a 032A     		cmp	r2, #3
 3361 000c CCBF     		ite	gt
 3362 000e 0024     		movgt	r4, #0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 135


 3363 0010 0124     		movle	r4, #1
 3364              	.LVL180:
 323:Polyphony.cpp **** 
 324:Polyphony.cpp ****     if(old_engine_idx == new_engine_idx) {
 3365              		.loc 1 324 5 is_stmt 1 view .LVU1017
 3366 0012 9142     		cmp	r1, r2
 3367 0014 1AD0     		beq	.L139
 325:Polyphony.cpp ****         return;
 326:Polyphony.cpp ****     }
 327:Polyphony.cpp **** 
 328:Polyphony.cpp ****     engine_changed_flag_ = true;
 3368              		.loc 1 328 5 view .LVU1018
 3369              		.loc 1 328 26 is_stmt 0 view .LVU1019
 3370 0016 00F58043 		add	r3, r0, #16384
 3371 001a 0126     		movs	r6, #1
 329:Polyphony.cpp **** 
 330:Polyphony.cpp ****     if(prev_was_poly == now_poly) {
 3372              		.loc 1 330 5 view .LVU1020
 3373 001c A542     		cmp	r5, r4
 328:Polyphony.cpp **** 
 3374              		.loc 1 328 26 view .LVU1021
 3375 001e 83F8BC6B 		strb	r6, [r3, #3004]
 3376              		.loc 1 330 5 is_stmt 1 view .LVU1022
 3377 0022 13D0     		beq	.L139
 331:Polyphony.cpp ****         return;
 332:Polyphony.cpp ****     }
 333:Polyphony.cpp **** 
 334:Polyphony.cpp ****     if(prev_was_poly && !now_poly) {
 3378              		.loc 1 334 5 view .LVU1023
 3379              	.LBB1848:
 3380 0024 0329     		cmp	r1, #3
 3381 0026 0BDC     		bgt	.L143
 3382              		.loc 1 334 22 is_stmt 0 discriminator 1 view .LVU1024
 3383 0028 032A     		cmp	r2, #3
 3384 002a 09DD     		ble	.L143
 3385 002c 00F59143 		add	r3, r0, #18560
 3386              	.LBB1849:
 3387              	.LBB1850:
 335:Polyphony.cpp ****         int source_voice = -1;
 336:Polyphony.cpp ****         for(int v = 0; v < NUM_VOICES; ++v) {
 3388              		.loc 1 336 17 view .LVU1025
 3389 0030 0021     		movs	r1, #0
 3390              	.LVL181:
 3391              		.loc 1 336 17 view .LVU1026
 3392 0032 2033     		adds	r3, r3, #32
 3393              	.LVL182:
 3394              	.L145:
 337:Polyphony.cpp ****             if(voice_active_[v]) { source_voice = v; break; }
 3395              		.loc 1 337 13 is_stmt 1 view .LVU1027
 3396              		.loc 1 337 31 is_stmt 0 view .LVU1028
 3397 0034 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 3398              		.loc 1 337 13 view .LVU1029
 3399 0038 2AB9     		cbnz	r2, .L144
 336:Polyphony.cpp ****             if(voice_active_[v]) { source_voice = v; break; }
 3400              		.loc 1 336 9 is_stmt 1 discriminator 2 view .LVU1030
 3401 003a 0131     		adds	r1, r1, #1
 3402              	.LVL183:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 136


 336:Polyphony.cpp ****             if(voice_active_[v]) { source_voice = v; break; }
 3403              		.loc 1 336 26 discriminator 2 view .LVU1031
 3404 003c 0429     		cmp	r1, #4
 3405 003e F9D1     		bne	.L145
 3406              	.LVL184:
 3407              	.L143:
 336:Polyphony.cpp ****             if(voice_active_[v]) { source_voice = v; break; }
 3408              		.loc 1 336 26 is_stmt 0 discriminator 2 view .LVU1032
 3409              	.LBE1850:
 3410              	.LBE1849:
 338:Polyphony.cpp ****         }
 339:Polyphony.cpp **** 
 340:Polyphony.cpp ****         if(source_voice != -1) {
 341:Polyphony.cpp ****             PolyToMono(source_voice);
 342:Polyphony.cpp ****         } else {
 343:Polyphony.cpp ****             ClearVoices();
 344:Polyphony.cpp ****         }
 345:Polyphony.cpp ****     }
 346:Polyphony.cpp ****     else {
 347:Polyphony.cpp ****         ClearVoices();
 3411              		.loc 1 347 9 is_stmt 1 view .LVU1033
 3412              	.LBE1848:
 348:Polyphony.cpp ****     }
 349:Polyphony.cpp **** }
 3413              		.loc 1 349 1 is_stmt 0 view .LVU1034
 3414 0040 70BC     		pop	{r4, r5, r6}
 3415              		.cfi_remember_state
 3416              		.cfi_restore 6
 3417              		.cfi_restore 5
 3418              		.cfi_restore 4
 3419              		.cfi_def_cfa_offset 0
 3420              	.LVL185:
 3421              	.LBB1853:
 347:Polyphony.cpp ****     }
 3422              		.loc 1 347 20 view .LVU1035
 3423 0042 FFF7FEBF 		b	_ZN15PolyphonyEngine11ClearVoicesEv
 3424              	.LVL186:
 3425              	.L144:
 3426              		.cfi_restore_state
 3427              	.LBB1851:
 340:Polyphony.cpp ****             PolyToMono(source_voice);
 3428              		.loc 1 340 9 is_stmt 1 view .LVU1036
 341:Polyphony.cpp ****         } else {
 3429              		.loc 1 341 13 view .LVU1037
 3430              	.LBE1851:
 3431              	.LBE1853:
 3432              		.loc 1 349 1 is_stmt 0 view .LVU1038
 3433 0046 70BC     		pop	{r4, r5, r6}
 3434              		.cfi_remember_state
 3435              		.cfi_restore 6
 3436              		.cfi_restore 5
 3437              		.cfi_restore 4
 3438              		.cfi_def_cfa_offset 0
 3439              	.LVL187:
 3440              	.LBB1854:
 3441              	.LBB1852:
 341:Polyphony.cpp ****         } else {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 137


 3442              		.loc 1 341 23 view .LVU1039
 3443 0048 FFF7FEBF 		b	_ZN15PolyphonyEngine10PolyToMonoEi
 3444              	.LVL188:
 3445              	.L139:
 3446              		.cfi_restore_state
 341:Polyphony.cpp ****         } else {
 3447              		.loc 1 341 23 view .LVU1040
 3448              	.LBE1852:
 3449              	.LBE1854:
 3450              		.loc 1 349 1 view .LVU1041
 3451 004c 70BC     		pop	{r4, r5, r6}
 3452              		.cfi_restore 6
 3453              		.cfi_restore 5
 3454              		.cfi_restore 4
 3455              		.cfi_def_cfa_offset 0
 3456              	.LVL189:
 3457              		.loc 1 349 1 view .LVU1042
 3458 004e 7047     		bx	lr
 3459              		.cfi_endproc
 3460              	.LFE6136:
 3462              		.section	.text._ZNK15PolyphonyEngine17GetLastTouchStateEv,"ax",%progbits
 3463              		.align	1
 3464              		.global	_ZNK15PolyphonyEngine17GetLastTouchStateEv
 3465              		.syntax unified
 3466              		.thumb
 3467              		.thumb_func
 3469              	_ZNK15PolyphonyEngine17GetLastTouchStateEv:
 3470              	.LVL190:
 3471              	.LFB6137:
 350:Polyphony.cpp **** 
 351:Polyphony.cpp **** uint16_t PolyphonyEngine::GetLastTouchState() const {
 3472              		.loc 1 351 53 is_stmt 1 view -0
 3473              		.cfi_startproc
 3474              		@ args = 0, pretend = 0, frame = 0
 3475              		@ frame_needed = 0, uses_anonymous_args = 0
 3476              		@ link register save eliminated.
 352:Polyphony.cpp ****     return last_touch_state_member_;
 3477              		.loc 1 352 5 view .LVU1044
 3478              		.loc 1 352 12 is_stmt 0 view .LVU1045
 3479 0000 00F58040 		add	r0, r0, #16384
 3480              	.LVL191:
 353:Polyphony.cpp **** }
 3481              		.loc 1 353 1 view .LVU1046
 3482 0004 B0F8BE0B 		ldrh	r0, [r0, #3006]
 3483              	.LVL192:
 3484              		.loc 1 353 1 view .LVU1047
 3485 0008 7047     		bx	lr
 3486              		.cfi_endproc
 3487              	.LFE6137:
 3489              		.section	.text._ZN15PolyphonyEngine20UpdateLastTouchStateEt,"ax",%progbits
 3490              		.align	1
 3491              		.global	_ZN15PolyphonyEngine20UpdateLastTouchStateEt
 3492              		.syntax unified
 3493              		.thumb
 3494              		.thumb_func
 3496              	_ZN15PolyphonyEngine20UpdateLastTouchStateEt:
 3497              	.LVL193:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 138


 3498              	.LFB6138:
 354:Polyphony.cpp **** 
 355:Polyphony.cpp **** void PolyphonyEngine::UpdateLastTouchState(uint16_t current_state) {
 3499              		.loc 1 355 68 is_stmt 1 view -0
 3500              		.cfi_startproc
 3501              		@ args = 0, pretend = 0, frame = 0
 3502              		@ frame_needed = 0, uses_anonymous_args = 0
 3503              		@ link register save eliminated.
 356:Polyphony.cpp ****     last_touch_state_member_ = current_state;
 3504              		.loc 1 356 5 view .LVU1049
 3505              		.loc 1 356 30 is_stmt 0 view .LVU1050
 3506 0000 00F58040 		add	r0, r0, #16384
 3507              	.LVL194:
 3508              		.loc 1 356 30 view .LVU1051
 3509 0004 A0F8BE1B 		strh	r1, [r0, #3006]	@ movhi
 357:Polyphony.cpp **** }
 3510              		.loc 1 357 1 view .LVU1052
 3511 0008 7047     		bx	lr
 3512              		.cfi_endproc
 3513              	.LFE6138:
 3515              		.section	.text._ZN15PolyphonyEngine13FindFreeVoiceEi,"ax",%progbits
 3516              		.align	1
 3517              		.global	_ZN15PolyphonyEngine13FindFreeVoiceEi
 3518              		.syntax unified
 3519              		.thumb
 3520              		.thumb_func
 3522              	_ZN15PolyphonyEngine13FindFreeVoiceEi:
 3523              	.LVL195:
 3524              	.LFB6139:
 358:Polyphony.cpp **** 
 359:Polyphony.cpp **** int PolyphonyEngine::FindFreeVoice(int max_voices) {
 3525              		.loc 1 359 52 is_stmt 1 view -0
 3526              		.cfi_startproc
 3527              		@ args = 0, pretend = 0, frame = 0
 3528              		@ frame_needed = 0, uses_anonymous_args = 0
 3529              		@ link register save eliminated.
 360:Polyphony.cpp ****     for (int i = 0; i < max_voices; ++i) {
 3530              		.loc 1 360 5 view .LVU1054
 3531              		.loc 1 360 5 is_stmt 0 view .LVU1055
 3532 0000 00F59143 		add	r3, r0, #18560
 3533              	.LBB1855:
 3534              		.loc 1 360 14 view .LVU1056
 3535 0004 0020     		movs	r0, #0
 3536              	.LVL196:
 3537              		.loc 1 360 14 view .LVU1057
 3538 0006 2033     		adds	r3, r3, #32
 3539              	.LVL197:
 3540              	.L151:
 3541              		.loc 1 360 23 is_stmt 1 discriminator 1 view .LVU1058
 3542 0008 8842     		cmp	r0, r1
 3543 000a 04DA     		bge	.L152
 361:Polyphony.cpp ****         if (!voice_active_[i]) {
 3544              		.loc 1 361 9 view .LVU1059
 3545              		.loc 1 361 29 is_stmt 0 view .LVU1060
 3546 000c 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 3547              		.loc 1 361 9 view .LVU1061
 3548 0010 1AB1     		cbz	r2, .L149
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 139


 360:Polyphony.cpp ****     for (int i = 0; i < max_voices; ++i) {
 3549              		.loc 1 360 5 is_stmt 1 discriminator 2 view .LVU1062
 3550 0012 0130     		adds	r0, r0, #1
 3551              	.LVL198:
 360:Polyphony.cpp ****     for (int i = 0; i < max_voices; ++i) {
 3552              		.loc 1 360 5 is_stmt 0 discriminator 2 view .LVU1063
 3553 0014 F8E7     		b	.L151
 3554              	.L152:
 360:Polyphony.cpp ****     for (int i = 0; i < max_voices; ++i) {
 3555              		.loc 1 360 5 discriminator 2 view .LVU1064
 3556              	.LBE1855:
 362:Polyphony.cpp ****             return i;
 363:Polyphony.cpp ****         }
 364:Polyphony.cpp ****     }
 365:Polyphony.cpp ****     
 366:Polyphony.cpp ****     return -1; 
 3557              		.loc 1 366 13 view .LVU1065
 3558 0016 4FF0FF30 		mov	r0, #-1
 3559              	.LVL199:
 3560              	.L149:
 367:Polyphony.cpp **** }
 3561              		.loc 1 367 1 view .LVU1066
 3562 001a 7047     		bx	lr
 3563              		.cfi_endproc
 3564              	.LFE6139:
 3566              		.section	.text._ZN15PolyphonyEngine14AssignMonoNoteEfb,"ax",%progbits
 3567              		.align	1
 3568              		.global	_ZN15PolyphonyEngine14AssignMonoNoteEfb
 3569              		.syntax unified
 3570              		.thumb
 3571              		.thumb_func
 3573              	_ZN15PolyphonyEngine14AssignMonoNoteEfb:
 3574              	.LVL200:
 3575              	.LFB6140:
 368:Polyphony.cpp **** 
 369:Polyphony.cpp **** void PolyphonyEngine::AssignMonoNote(float note, bool percussive_engine) {
 3576              		.loc 1 369 74 is_stmt 1 view -0
 3577              		.cfi_startproc
 3578              		@ args = 0, pretend = 0, frame = 0
 3579              		@ frame_needed = 0, uses_anonymous_args = 0
 370:Polyphony.cpp ****     voice_note_[0] = note;
 3580              		.loc 1 370 5 view .LVU1068
 369:Polyphony.cpp ****     voice_note_[0] = note;
 3581              		.loc 1 369 74 is_stmt 0 view .LVU1069
 3582 0000 38B5     		push	{r3, r4, r5, lr}
 3583              		.cfi_def_cfa_offset 16
 3584              		.cfi_offset 3, -16
 3585              		.cfi_offset 4, -12
 3586              		.cfi_offset 5, -8
 3587              		.cfi_offset 14, -4
 3588              		.loc 1 370 20 view .LVU1070
 3589 0002 00F58043 		add	r3, r0, #16384
 371:Polyphony.cpp ****     voice_active_[0] = true;
 372:Polyphony.cpp ****     modulations_[0].trigger = 1.0f;
 3590              		.loc 1 372 29 view .LVU1071
 3591 0006 4FF07E55 		mov	r5, #1065353216
 370:Polyphony.cpp ****     voice_active_[0] = true;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 140


 3592              		.loc 1 370 20 view .LVU1072
 3593 000a 03F6A402 		addw	r2, r3, #2212
 3594              		.loc 1 372 29 view .LVU1073
 3595 000e 03F5E164 		add	r4, r3, #1800
 370:Polyphony.cpp ****     voice_active_[0] = true;
 3596              		.loc 1 370 20 view .LVU1074
 3597 0012 82ED000A 		vstr.32	s0, [r2]
 371:Polyphony.cpp ****     voice_active_[0] = true;
 3598              		.loc 1 371 5 is_stmt 1 view .LVU1075
 371:Polyphony.cpp ****     voice_active_[0] = true;
 3599              		.loc 1 371 22 is_stmt 0 view .LVU1076
 3600 0016 0122     		movs	r2, #1
 3601 0018 83F8A028 		strb	r2, [r3, #2208]
 3602              		.loc 1 372 5 is_stmt 1 view .LVU1077
 3603              		.loc 1 372 29 is_stmt 0 view .LVU1078
 3604 001c 2560     		str	r5, [r4]	@ float
 373:Polyphony.cpp **** 
 374:Polyphony.cpp ****     if (percussive_engine) {
 3605              		.loc 1 374 5 is_stmt 1 view .LVU1079
 3606 001e 11B1     		cbz	r1, .L158
 375:Polyphony.cpp ****         modulations_[0].trigger_patched = true; 
 3607              		.loc 1 375 9 view .LVU1080
 3608              		.loc 1 375 41 is_stmt 0 view .LVU1081
 3609 0020 83F81327 		strb	r2, [r3, #1811]
 3610              	.LVL201:
 3611              	.L157:
 376:Polyphony.cpp ****     } else {
 377:Polyphony.cpp ****         modulations_[0].trigger_patched = false;
 378:Polyphony.cpp ****         voice_envelopes_[0].Trigger(); 
 379:Polyphony.cpp ****     }
 380:Polyphony.cpp **** }
 3612              		.loc 1 380 1 view .LVU1082
 3613 0024 38BD     		pop	{r3, r4, r5, pc}
 3614              	.LVL202:
 3615              	.L158:
 377:Polyphony.cpp ****         voice_envelopes_[0].Trigger(); 
 3616              		.loc 1 377 9 is_stmt 1 view .LVU1083
 378:Polyphony.cpp ****     }
 3617              		.loc 1 378 36 is_stmt 0 view .LVU1084
 3618 0026 00F58F40 		add	r0, r0, #18304
 3619              	.LVL203:
 377:Polyphony.cpp ****         voice_envelopes_[0].Trigger(); 
 3620              		.loc 1 377 41 view .LVU1085
 3621 002a 83F81317 		strb	r1, [r3, #1811]
 378:Polyphony.cpp ****     }
 3622              		.loc 1 378 9 is_stmt 1 view .LVU1086
 378:Polyphony.cpp ****     }
 3623              		.loc 1 378 36 is_stmt 0 view .LVU1087
 3624 002e 1030     		adds	r0, r0, #16
 3625              	.LVL204:
 378:Polyphony.cpp ****     }
 3626              		.loc 1 378 36 view .LVU1088
 3627 0030 FFF7FEFF 		bl	_ZN13VoiceEnvelope7TriggerEv
 3628              	.LVL205:
 3629              		.loc 1 380 1 view .LVU1089
 3630 0034 F6E7     		b	.L157
 3631              		.cfi_endproc
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 141


 3632              	.LFE6140:
 3634              		.section	.text._ZN15PolyphonyEngine16FindVoiceForNoteEfibi,"ax",%progbits
 3635              		.align	1
 3636              		.global	_ZN15PolyphonyEngine16FindVoiceForNoteEfibi
 3637              		.syntax unified
 3638              		.thumb
 3639              		.thumb_func
 3641              	_ZN15PolyphonyEngine16FindVoiceForNoteEfibi:
 3642              	.LVL206:
 3643              	.LFB6141:
 381:Polyphony.cpp **** 
 382:Polyphony.cpp **** int PolyphonyEngine::FindVoiceForNote(float note, int engine_index, bool poly_mode, int max_voices)
 3644              		.loc 1 382 101 is_stmt 1 view -0
 3645              		.cfi_startproc
 3646              		@ args = 0, pretend = 0, frame = 0
 3647              		@ frame_needed = 0, uses_anonymous_args = 0
 383:Polyphony.cpp ****     if (poly_mode) {
 3648              		.loc 1 383 5 view .LVU1091
 382:Polyphony.cpp ****     if (poly_mode) {
 3649              		.loc 1 382 101 is_stmt 0 view .LVU1092
 3650 0000 10B5     		push	{r4, lr}
 3651              		.cfi_def_cfa_offset 8
 3652              		.cfi_offset 4, -8
 3653              		.cfi_offset 14, -4
 3654              	.LBB1862:
 3655              		.loc 1 383 5 view .LVU1093
 3656 0002 DAB1     		cbz	r2, .L161
 3657 0004 00F59141 		add	r1, r0, #18560
 3658              	.LVL207:
 3659              		.loc 1 383 5 view .LVU1094
 3660 0008 00F59142 		add	r2, r0, #18560
 3661              	.LVL208:
 3662              	.LBB1863:
 384:Polyphony.cpp ****         for (int i = 0; i < max_voices; ++i) {
 3663              		.loc 1 384 18 view .LVU1095
 3664 000c 0020     		movs	r0, #0
 3665              	.LVL209:
 3666              		.loc 1 384 18 view .LVU1096
 3667 000e 2431     		adds	r1, r1, #36
 3668              	.LVL210:
 3669              		.loc 1 384 18 view .LVU1097
 3670 0010 2032     		adds	r2, r2, #32
 3671              	.LVL211:
 3672              	.L164:
 3673              		.loc 1 384 27 is_stmt 1 discriminator 1 view .LVU1098
 3674 0012 9842     		cmp	r0, r3
 3675 0014 2ADA     		bge	.L166
 385:Polyphony.cpp ****             if (voice_active_[i] && fabsf(voice_note_[i] - note) < 0.1f) {
 3676              		.loc 1 385 13 view .LVU1099
 3677              		.loc 1 385 32 is_stmt 0 view .LVU1100
 3678 0016 12F8014B 		ldrb	r4, [r2], #1	@ zero_extendqisi2
 3679              		.loc 1 385 13 view .LVU1101
 3680 001a 64B1     		cbz	r4, .L163
 3681              		.loc 1 385 58 discriminator 1 view .LVU1102
 3682 001c D1ED007A 		vldr.32	s15, [r1]
 3683              		.loc 1 385 34 discriminator 1 view .LVU1103
 3684 0020 9FED147A 		vldr.32	s14, .L171
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 142


 3685              		.loc 1 385 58 discriminator 1 view .LVU1104
 3686 0024 77EEC07A 		vsub.f32	s15, s15, s0
 3687              		.loc 1 385 42 discriminator 1 view .LVU1105
 3688 0028 F0EEE77A 		vabs.f32	s15, s15
 3689              		.loc 1 385 34 discriminator 1 view .LVU1106
 3690 002c F4EEC77A 		vcmpe.f32	s15, s14
 3691 0030 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3692 0034 19D4     		bmi	.L160
 3693              	.L163:
 384:Polyphony.cpp ****         for (int i = 0; i < max_voices; ++i) {
 3694              		.loc 1 384 9 is_stmt 1 discriminator 2 view .LVU1107
 3695 0036 0130     		adds	r0, r0, #1
 3696              	.LVL212:
 384:Polyphony.cpp ****         for (int i = 0; i < max_voices; ++i) {
 3697              		.loc 1 384 9 is_stmt 0 discriminator 2 view .LVU1108
 3698 0038 0431     		adds	r1, r1, #4
 3699 003a EAE7     		b	.L164
 3700              	.LVL213:
 3701              	.L161:
 384:Polyphony.cpp ****         for (int i = 0; i < max_voices; ++i) {
 3702              		.loc 1 384 9 discriminator 2 view .LVU1109
 3703              	.LBE1863:
 386:Polyphony.cpp ****                 return i;
 387:Polyphony.cpp ****             }
 388:Polyphony.cpp ****         }
 389:Polyphony.cpp ****     } else { 
 390:Polyphony.cpp ****         if (voice_active_[0] && fabsf(voice_note_[0] - note) < 0.1f) {
 3704              		.loc 1 390 9 is_stmt 1 view .LVU1110
 3705              		.loc 1 390 28 is_stmt 0 view .LVU1111
 3706 003c 00F58040 		add	r0, r0, #16384
 3707              	.LVL214:
 3708              		.loc 1 390 9 view .LVU1112
 3709 0040 90F8A038 		ldrb	r3, [r0, #2208]	@ zero_extendqisi2
 3710              	.LVL215:
 3711              		.loc 1 390 9 view .LVU1113
 3712 0044 93B1     		cbz	r3, .L166
 3713              	.LVL216:
 3714              		.loc 1 390 9 view .LVU1114
 3715              	.LBE1862:
 3716              	.LBB1864:
 3717              	.LBI1864:
 382:Polyphony.cpp ****     if (poly_mode) {
 3718              		.loc 1 382 5 is_stmt 1 discriminator 1 view .LVU1115
 3719              	.LBB1865:
 3720              	.LBB1866:
 3721              		.loc 1 390 54 is_stmt 0 discriminator 1 view .LVU1116
 3722 0046 00F6A400 		addw	r0, r0, #2212
 3723              	.LVL217:
 3724              		.loc 1 390 54 discriminator 1 view .LVU1117
 3725 004a D0ED007A 		vldr.32	s15, [r0]
 3726 004e 37EEC00A 		vsub.f32	s0, s15, s0
 3727              	.LVL218:
 3728              		.loc 1 390 30 discriminator 1 view .LVU1118
 3729 0052 DFED087A 		vldr.32	s15, .L171
 3730              		.loc 1 390 38 discriminator 1 view .LVU1119
 3731 0056 B0EEC00A 		vabs.f32	s0, s0
 3732              		.loc 1 390 30 discriminator 1 view .LVU1120
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 143


 3733 005a B4EEE70A 		vcmpe.f32	s0, s15
 3734 005e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3735 0062 54BF     		ite	pl
 3736 0064 4FF0FF30 		movpl	r0, #-1
 3737              	.LVL219:
 3738              		.loc 1 390 30 discriminator 1 view .LVU1121
 3739 0068 0020     		movmi	r0, #0
 3740              	.LVL220:
 3741              	.L160:
 3742              		.loc 1 390 30 discriminator 1 view .LVU1122
 3743              	.LBE1866:
 3744              	.LBE1865:
 3745              	.LBE1864:
 391:Polyphony.cpp ****             return 0;
 392:Polyphony.cpp ****         }
 393:Polyphony.cpp ****     }
 394:Polyphony.cpp ****     return -1;
 395:Polyphony.cpp **** }
 3746              		.loc 1 395 1 view .LVU1123
 3747 006a 10BD     		pop	{r4, pc}
 3748              	.LVL221:
 3749              	.L166:
 394:Polyphony.cpp **** }
 3750              		.loc 1 394 13 view .LVU1124
 3751 006c 4FF0FF30 		mov	r0, #-1
 3752 0070 FBE7     		b	.L160
 3753              	.L172:
 3754 0072 00BF     		.align	2
 3755              	.L171:
 3756 0074 CDCCCC3D 		.word	1036831949
 3757              		.cfi_endproc
 3758              	.LFE6141:
 3760              		.section	.text._ZN15PolyphonyEngine16HandleTouchInputEttibi,"ax",%progbits
 3761              		.align	1
 3762              		.global	_ZN15PolyphonyEngine16HandleTouchInputEttibi
 3763              		.syntax unified
 3764              		.thumb
 3765              		.thumb_func
 3767              	_ZN15PolyphonyEngine16HandleTouchInputEttibi:
 3768              	.LVL222:
 3769              	.LFB6122:
  37:Polyphony.cpp ****     bool percussive_engine = (engine_index > 7);
 3770              		.loc 1 37 169 is_stmt 1 view -0
 3771              		.cfi_startproc
 3772              		@ args = 8, pretend = 0, frame = 16
 3773              		@ frame_needed = 0, uses_anonymous_args = 0
  38:Polyphony.cpp **** 
 3774              		.loc 1 38 5 view .LVU1126
  37:Polyphony.cpp ****     bool percussive_engine = (engine_index > 7);
 3775              		.loc 1 37 169 is_stmt 0 view .LVU1127
 3776 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3777              		.cfi_def_cfa_offset 36
 3778              		.cfi_offset 4, -36
 3779              		.cfi_offset 5, -32
 3780              		.cfi_offset 6, -28
 3781              		.cfi_offset 7, -24
 3782              		.cfi_offset 8, -20
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 144


 3783              		.cfi_offset 9, -16
 3784              		.cfi_offset 10, -12
 3785              		.cfi_offset 11, -8
 3786              		.cfi_offset 14, -4
  38:Polyphony.cpp **** 
 3787              		.loc 1 38 10 view .LVU1128
 3788 0004 072B     		cmp	r3, #7
  37:Polyphony.cpp ****     bool percussive_engine = (engine_index > 7);
 3789              		.loc 1 37 169 view .LVU1129
 3790 0006 85B0     		sub	sp, sp, #20
 3791              		.cfi_def_cfa_offset 56
  37:Polyphony.cpp ****     bool percussive_engine = (engine_index > 7);
 3792              		.loc 1 37 169 view .LVU1130
 3793 0008 0446     		mov	r4, r0
 3794 000a 1F46     		mov	r7, r3
 3795 000c 9DF83880 		ldrb	r8, [sp, #56]	@ zero_extendqisi2
  38:Polyphony.cpp **** 
 3796              		.loc 1 38 10 view .LVU1131
 3797 0010 D8BF     		it	le
 3798 0012 4FF00009 		movle	r9, #0
  37:Polyphony.cpp ****     bool percussive_engine = (engine_index > 7);
 3799              		.loc 1 37 169 view .LVU1132
 3800 0016 DDF83CB0 		ldr	fp, [sp, #60]
  38:Polyphony.cpp **** 
 3801              		.loc 1 38 10 view .LVU1133
 3802 001a C8BF     		it	gt
 3803 001c 4FF00109 		movgt	r9, #1
 3804              	.LVL223:
  40:Polyphony.cpp ****         bool pad_currently_pressed = (current_touch_state_param >> i) & 1;
 3805              		.loc 1 40 5 is_stmt 1 view .LVU1134
 3806              	.LBB1867:
  40:Polyphony.cpp ****         bool pad_currently_pressed = (current_touch_state_param >> i) & 1;
 3807              		.loc 1 40 23 view .LVU1135
 3808 0020 DFF810A1 		ldr	r10, .L194+4
  40:Polyphony.cpp ****         bool pad_currently_pressed = (current_touch_state_param >> i) & 1;
 3809              		.loc 1 40 14 is_stmt 0 view .LVU1136
 3810 0024 0025     		movs	r5, #0
 3811              	.LBE1867:
  37:Polyphony.cpp ****     bool percussive_engine = (engine_index > 7);
 3812              		.loc 1 37 169 view .LVU1137
 3813 0026 CDE90112 		strd	r1, r2, [sp, #4]
 3814              	.LVL224:
 3815              	.L179:
 3816              	.LBB1886:
 3817              	.LBB1868:
  41:Polyphony.cpp ****         bool pad_was_pressed = (last_touch_state_param >> i) & 1; 
 3818              		.loc 1 41 9 is_stmt 1 view .LVU1138
  42:Polyphony.cpp ****         float note_for_pad = PolyphonyEngine::kTouchMidiNotes_[i];
 3819              		.loc 1 42 9 view .LVU1139
  41:Polyphony.cpp ****         bool pad_was_pressed = (last_touch_state_param >> i) & 1; 
 3820              		.loc 1 41 65 is_stmt 0 view .LVU1140
 3821 002a 019A     		ldr	r2, [sp, #4]
  42:Polyphony.cpp ****         float note_for_pad = PolyphonyEngine::kTouchMidiNotes_[i];
 3822              		.loc 1 42 56 view .LVU1141
 3823 002c 029B     		ldr	r3, [sp, #8]
  41:Polyphony.cpp ****         bool pad_was_pressed = (last_touch_state_param >> i) & 1; 
 3824              		.loc 1 41 65 view .LVU1142
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 145


 3825 002e 42FA05F6 		asr	r6, r2, r5
  43:Polyphony.cpp **** 
 3826              		.loc 1 43 15 view .LVU1143
 3827 0032 BAEC010A 		vldmia.32	r10!, {s0}
  42:Polyphony.cpp ****         float note_for_pad = PolyphonyEngine::kTouchMidiNotes_[i];
 3828              		.loc 1 42 56 view .LVU1144
 3829 0036 2B41     		asrs	r3, r3, r5
 3830              	.LBB1869:
  45:Polyphony.cpp ****             if (poly_mode) {
 3831              		.loc 1 45 9 view .LVU1145
 3832 0038 16F00106 		ands	r6, r6, #1
 3833              	.LBE1869:
  42:Polyphony.cpp ****         float note_for_pad = PolyphonyEngine::kTouchMidiNotes_[i];
 3834              		.loc 1 42 62 view .LVU1146
 3835 003c 03F00103 		and	r3, r3, #1
 3836              	.LVL225:
  43:Polyphony.cpp **** 
 3837              		.loc 1 43 9 is_stmt 1 view .LVU1147
  45:Polyphony.cpp ****             if (poly_mode) {
 3838              		.loc 1 45 9 view .LVU1148
 3839              	.LBB1877:
 3840 0040 34D0     		beq	.L174
  45:Polyphony.cpp ****             if (poly_mode) {
 3841              		.loc 1 45 35 is_stmt 0 discriminator 1 view .LVU1149
 3842 0042 43BB     		cbnz	r3, .L175
 3843              	.LBE1877:
 3844              	.LBE1868:
 3845              	.LBE1886:
  46:Polyphony.cpp ****                 int voice_idx = FindFreeVoice(effective_num_voices); 
 3846              		.loc 1 46 13 is_stmt 1 view .LVU1150
 3847              	.LBB1887:
 3848              	.LBB1882:
 3849              	.LBB1878:
 3850              	.LBB1870:
 3851 0044 B8F1000F 		cmp	r8, #0
 3852 0048 2BD0     		beq	.L176
 3853              	.LBB1871:
  47:Polyphony.cpp ****                 if (voice_idx != -1) {
 3854              		.loc 1 47 17 view .LVU1151
  47:Polyphony.cpp ****                 if (voice_idx != -1) {
 3855              		.loc 1 47 46 is_stmt 0 view .LVU1152
 3856 004a 5946     		mov	r1, fp
 3857 004c 2046     		mov	r0, r4
 3858 004e FFF7FEFF 		bl	_ZN15PolyphonyEngine13FindFreeVoiceEi
 3859              	.LVL226:
  48:Polyphony.cpp ****                     voice_note_[voice_idx] = note_for_pad;
 3860              		.loc 1 48 17 is_stmt 1 view .LVU1153
 3861 0052 411C     		adds	r1, r0, #1
 3862 0054 1FD0     		beq	.L175
  49:Polyphony.cpp ****                     voice_active_[voice_idx] = true;
 3863              		.loc 1 49 21 view .LVU1154
  49:Polyphony.cpp ****                     voice_active_[voice_idx] = true;
 3864              		.loc 1 49 44 is_stmt 0 view .LVU1155
 3865 0056 00F59153 		add	r3, r0, #4640
  50:Polyphony.cpp ****                     modulations_[voice_idx].trigger = 1.0f; 
 3866              		.loc 1 50 46 view .LVU1156
 3867 005a 2218     		adds	r2, r4, r0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 146


 3868 005c 0121     		movs	r1, #1
  49:Polyphony.cpp ****                     voice_active_[voice_idx] = true;
 3869              		.loc 1 49 44 view .LVU1157
 3870 005e 0833     		adds	r3, r3, #8
 3871 0060 04EB8303 		add	r3, r4, r3, lsl #2
 3872 0064 83ED010A 		vstr.32	s0, [r3, #4]
  50:Polyphony.cpp ****                     modulations_[voice_idx].trigger = 1.0f; 
 3873              		.loc 1 50 21 is_stmt 1 view .LVU1158
  50:Polyphony.cpp ****                     modulations_[voice_idx].trigger = 1.0f; 
 3874              		.loc 1 50 46 is_stmt 0 view .LVU1159
 3875 0068 44F6A003 		movw	r3, #18592
 3876 006c D154     		strb	r1, [r2, r3]
  51:Polyphony.cpp ****                     if (percussive_engine) {
 3877              		.loc 1 51 21 is_stmt 1 view .LVU1160
  51:Polyphony.cpp ****                     if (percussive_engine) {
 3878              		.loc 1 51 53 is_stmt 0 view .LVU1161
 3879 006e 2823     		movs	r3, #40
 3880 0070 4FF07E51 		mov	r1, #1065353216
 3881 0074 03FB0043 		mla	r3, r3, r0, r4
 3882 0078 03F58E42 		add	r2, r3, #18176
 3883 007c 9160     		str	r1, [r2, #8]	@ float
  52:Polyphony.cpp ****                         modulations_[voice_idx].trigger_patched = true;
 3884              		.loc 1 52 21 is_stmt 1 view .LVU1162
 3885 007e 44F21372 		movw	r2, #18195
 3886 0082 03F80290 		strb	r9, [r3, r2]
  57:Polyphony.cpp ****                 }
 3887              		.loc 1 57 21 view .LVU1163
  57:Polyphony.cpp ****                 }
 3888              		.loc 1 57 56 is_stmt 0 view .LVU1164
 3889 0086 4423     		movs	r3, #68
 3890 0088 03FB0040 		mla	r0, r3, r0, r4
 3891              	.LVL227:
  57:Polyphony.cpp ****                 }
 3892              		.loc 1 57 56 view .LVU1165
 3893 008c 00F58F40 		add	r0, r0, #18304
 3894 0090 1030     		adds	r0, r0, #16
 3895 0092 FFF7FEFF 		bl	_ZN13VoiceEnvelope7TriggerEv
 3896              	.LVL228:
 3897              	.L175:
  57:Polyphony.cpp ****                 }
 3898              		.loc 1 57 56 view .LVU1166
 3899              	.LBE1871:
 3900              	.LBE1870:
 3901              	.LBE1878:
 3902              	.LBE1882:
  40:Polyphony.cpp ****         bool pad_currently_pressed = (current_touch_state_param >> i) & 1;
 3903              		.loc 1 40 5 is_stmt 1 discriminator 2 view .LVU1167
 3904 0096 0135     		adds	r5, r5, #1
 3905              	.LVL229:
  40:Polyphony.cpp ****         bool pad_currently_pressed = (current_touch_state_param >> i) & 1;
 3906              		.loc 1 40 23 discriminator 2 view .LVU1168
 3907 0098 0C2D     		cmp	r5, #12
 3908 009a C6D1     		bne	.L179
 3909              	.LBE1887:
  79:Polyphony.cpp **** 
 3910              		.loc 1 79 1 is_stmt 0 view .LVU1169
 3911 009c 05B0     		add	sp, sp, #20
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 147


 3912              		.cfi_remember_state
 3913              		.cfi_def_cfa_offset 36
 3914              		@ sp needed
 3915 009e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3916              	.LVL230:
 3917              	.L176:
 3918              		.cfi_restore_state
 3919              	.LBB1888:
 3920              	.LBB1883:
 3921              	.LBB1879:
 3922              	.LBB1872:
  60:Polyphony.cpp ****             }
 3923              		.loc 1 60 17 is_stmt 1 view .LVU1170
  60:Polyphony.cpp ****             }
 3924              		.loc 1 60 31 is_stmt 0 view .LVU1171
 3925 00a2 4946     		mov	r1, r9
 3926 00a4 2046     		mov	r0, r4
 3927 00a6 FFF7FEFF 		bl	_ZN15PolyphonyEngine14AssignMonoNoteEfb
 3928              	.LVL231:
  60:Polyphony.cpp ****             }
 3929              		.loc 1 60 31 view .LVU1172
 3930 00aa F4E7     		b	.L175
 3931              	.LVL232:
 3932              	.L174:
  60:Polyphony.cpp ****             }
 3933              		.loc 1 60 31 view .LVU1173
 3934              	.LBE1872:
 3935              	.LBE1879:
 3936              	.LBE1883:
 3937              	.LBE1888:
  62:Polyphony.cpp ****             if (poly_mode) {
 3938              		.loc 1 62 16 is_stmt 1 discriminator 1 view .LVU1174
 3939              	.LBB1889:
 3940              	.LBB1884:
 3941              	.LBB1880:
 3942              	.LBB1873:
  62:Polyphony.cpp ****             if (poly_mode) {
 3943              		.loc 1 62 43 is_stmt 0 discriminator 1 view .LVU1175
 3944 00ac 002B     		cmp	r3, #0
 3945 00ae F2D0     		beq	.L175
 3946              	.LBE1873:
 3947              	.LBE1880:
 3948              	.LBE1884:
 3949              	.LBE1889:
  63:Polyphony.cpp ****                  int voice_idx = FindVoiceForNote(note_for_pad, engine_index, poly_mode, effective_
 3950              		.loc 1 63 13 is_stmt 1 view .LVU1176
 3951              	.LBB1890:
 3952              	.LBB1885:
 3953              	.LBB1881:
 3954              	.LBB1876:
 3955              	.LBB1874:
 3956 00b0 B8F1000F 		cmp	r8, #0
 3957 00b4 1DD0     		beq	.L177
 3958              	.LBB1875:
  64:Polyphony.cpp ****                  if (voice_idx != -1) {
 3959              		.loc 1 64 18 view .LVU1177
  64:Polyphony.cpp ****                  if (voice_idx != -1) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 148


 3960              		.loc 1 64 50 is_stmt 0 view .LVU1178
 3961 00b6 5B46     		mov	r3, fp
 3962              	.LVL233:
  64:Polyphony.cpp ****                  if (voice_idx != -1) {
 3963              		.loc 1 64 50 view .LVU1179
 3964 00b8 0122     		movs	r2, #1
 3965 00ba 3946     		mov	r1, r7
 3966 00bc 2046     		mov	r0, r4
 3967 00be FFF7FEFF 		bl	_ZN15PolyphonyEngine16FindVoiceForNoteEfibi
 3968              	.LVL234:
  65:Polyphony.cpp ****                      voice_active_[voice_idx] = false; 
 3969              		.loc 1 65 18 view .LVU1180
 3970 00c2 421C     		adds	r2, r0, #1
  64:Polyphony.cpp ****                  if (voice_idx != -1) {
 3971              		.loc 1 64 50 view .LVU1181
 3972 00c4 0346     		mov	r3, r0
 3973              	.LVL235:
  65:Polyphony.cpp ****                      voice_active_[voice_idx] = false; 
 3974              		.loc 1 65 18 is_stmt 1 view .LVU1182
 3975 00c6 E6D0     		beq	.L175
  66:Polyphony.cpp ****                      voice_envelopes_[voice_idx].Release(); 
 3976              		.loc 1 66 22 view .LVU1183
  66:Polyphony.cpp ****                      voice_envelopes_[voice_idx].Release(); 
 3977              		.loc 1 66 47 is_stmt 0 view .LVU1184
 3978 00c8 2118     		adds	r1, r4, r0
  67:Polyphony.cpp ****                      modulations_[voice_idx].trigger_patched = false; 
 3979              		.loc 1 67 57 view .LVU1185
 3980 00ca 4420     		movs	r0, #68
 3981              	.LVL236:
  66:Polyphony.cpp ****                      voice_envelopes_[voice_idx].Release(); 
 3982              		.loc 1 66 47 view .LVU1186
 3983 00cc 44F6A002 		movw	r2, #18592
  67:Polyphony.cpp ****                      modulations_[voice_idx].trigger_patched = false; 
 3984              		.loc 1 67 57 view .LVU1187
 3985 00d0 0393     		str	r3, [sp, #12]
 3986 00d2 00FB0340 		mla	r0, r0, r3, r4
  66:Polyphony.cpp ****                      voice_envelopes_[voice_idx].Release(); 
 3987              		.loc 1 66 47 view .LVU1188
 3988 00d6 8E54     		strb	r6, [r1, r2]
  67:Polyphony.cpp ****                      modulations_[voice_idx].trigger_patched = false; 
 3989              		.loc 1 67 22 is_stmt 1 view .LVU1189
  67:Polyphony.cpp ****                      modulations_[voice_idx].trigger_patched = false; 
 3990              		.loc 1 67 57 is_stmt 0 view .LVU1190
 3991 00d8 00F58F40 		add	r0, r0, #18304
 3992 00dc 1030     		adds	r0, r0, #16
 3993 00de FFF7FEFF 		bl	_ZN13VoiceEnvelope7ReleaseEv
 3994              	.LVL237:
  68:Polyphony.cpp ****                  }
 3995              		.loc 1 68 22 is_stmt 1 view .LVU1191
  68:Polyphony.cpp ****                  }
 3996              		.loc 1 68 62 is_stmt 0 view .LVU1192
 3997 00e2 2820     		movs	r0, #40
 3998 00e4 039B     		ldr	r3, [sp, #12]
 3999 00e6 44F21372 		movw	r2, #18195
 4000 00ea 00FB0343 		mla	r3, r0, r3, r4
 4001 00ee 9E54     		strb	r6, [r3, r2]
 4002 00f0 D1E7     		b	.L175
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 149


 4003              	.LVL238:
 4004              	.L177:
  68:Polyphony.cpp ****                  }
 4005              		.loc 1 68 62 view .LVU1193
 4006              	.LBE1875:
  71:Polyphony.cpp ****                     voice_active_[0] = false; 
 4007              		.loc 1 71 17 is_stmt 1 view .LVU1194
  71:Polyphony.cpp ****                     voice_active_[0] = false; 
 4008              		.loc 1 71 36 is_stmt 0 view .LVU1195
 4009 00f2 04F58046 		add	r6, r4, #16384
  71:Polyphony.cpp ****                     voice_active_[0] = false; 
 4010              		.loc 1 71 17 view .LVU1196
 4011 00f6 96F8A038 		ldrb	r3, [r6, #2208]	@ zero_extendqisi2
 4012              	.LVL239:
  71:Polyphony.cpp ****                     voice_active_[0] = false; 
 4013              		.loc 1 71 17 view .LVU1197
 4014 00fa 002B     		cmp	r3, #0
 4015 00fc CBD0     		beq	.L175
  71:Polyphony.cpp ****                     voice_active_[0] = false; 
 4016              		.loc 1 71 60 discriminator 1 view .LVU1198
 4017 00fe 06F6A403 		addw	r3, r6, #2212
  71:Polyphony.cpp ****                     voice_active_[0] = false; 
 4018              		.loc 1 71 38 discriminator 1 view .LVU1199
 4019 0102 9FED0B7A 		vldr.32	s14, .L194
  71:Polyphony.cpp ****                     voice_active_[0] = false; 
 4020              		.loc 1 71 62 discriminator 1 view .LVU1200
 4021 0106 D3ED007A 		vldr.32	s15, [r3]
 4022 010a 77EEC07A 		vsub.f32	s15, s15, s0
  71:Polyphony.cpp ****                     voice_active_[0] = false; 
 4023              		.loc 1 71 46 discriminator 1 view .LVU1201
 4024 010e F0EEE77A 		vabs.f32	s15, s15
  71:Polyphony.cpp ****                     voice_active_[0] = false; 
 4025              		.loc 1 71 38 discriminator 1 view .LVU1202
 4026 0112 F4EEC77A 		vcmpe.f32	s15, s14
 4027 0116 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 4028 011a BCD5     		bpl	.L175
  72:Polyphony.cpp ****                     voice_envelopes_[0].Release();
 4029              		.loc 1 72 21 is_stmt 1 view .LVU1203
  73:Polyphony.cpp ****                     modulations_[0].trigger_patched = false;
 4030              		.loc 1 73 48 is_stmt 0 view .LVU1204
 4031 011c 04F58F40 		add	r0, r4, #18304
  72:Polyphony.cpp ****                     voice_envelopes_[0].Release();
 4032              		.loc 1 72 38 view .LVU1205
 4033 0120 86F8A088 		strb	r8, [r6, #2208]
  73:Polyphony.cpp ****                     modulations_[0].trigger_patched = false;
 4034              		.loc 1 73 21 is_stmt 1 view .LVU1206
  73:Polyphony.cpp ****                     modulations_[0].trigger_patched = false;
 4035              		.loc 1 73 48 is_stmt 0 view .LVU1207
 4036 0124 1030     		adds	r0, r0, #16
 4037 0126 FFF7FEFF 		bl	_ZN13VoiceEnvelope7ReleaseEv
 4038              	.LVL240:
  74:Polyphony.cpp ****                 }
 4039              		.loc 1 74 21 is_stmt 1 view .LVU1208
  74:Polyphony.cpp ****                 }
 4040              		.loc 1 74 53 is_stmt 0 view .LVU1209
 4041 012a 86F81387 		strb	r8, [r6, #1811]
 4042 012e B2E7     		b	.L175
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 150


 4043              	.L195:
 4044              		.align	2
 4045              	.L194:
 4046 0130 CDCCCC3D 		.word	1036831949
 4047 0134 00000000 		.word	.LANCHOR0
 4048              	.LBE1874:
 4049              	.LBE1876:
 4050              	.LBE1881:
 4051              	.LBE1885:
 4052              	.LBE1890:
 4053              		.cfi_endproc
 4054              	.LFE6122:
 4056              		.section	.text._ZN15PolyphonyEngine15TriggerArpVoiceEii,"ax",%progbits
 4057              		.align	1
 4058              		.global	_ZN15PolyphonyEngine15TriggerArpVoiceEii
 4059              		.syntax unified
 4060              		.thumb
 4061              		.thumb_func
 4063              	_ZN15PolyphonyEngine15TriggerArpVoiceEii:
 4064              	.LVL241:
 4065              	.LFB6142:
 396:Polyphony.cpp **** 
 397:Polyphony.cpp **** void PolyphonyEngine::TriggerArpVoice(int pad_idx, int current_engine_index_val) {
 4066              		.loc 1 397 82 is_stmt 1 view -0
 4067              		.cfi_startproc
 4068              		@ args = 0, pretend = 0, frame = 32
 4069              		@ frame_needed = 0, uses_anonymous_args = 0
 398:Polyphony.cpp ****     if (pad_idx < 0 || pad_idx >= 12) return;
 4070              		.loc 1 398 5 view .LVU1211
 4071 0000 0B29     		cmp	r1, #11
 397:Polyphony.cpp ****     if (pad_idx < 0 || pad_idx >= 12) return;
 4072              		.loc 1 397 82 is_stmt 0 view .LVU1212
 4073 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 4074              		.cfi_def_cfa_offset 20
 4075              		.cfi_offset 4, -20
 4076              		.cfi_offset 5, -16
 4077              		.cfi_offset 6, -12
 4078              		.cfi_offset 7, -8
 4079              		.cfi_offset 14, -4
 4080 0004 1646     		mov	r6, r2
 4081 0006 89B0     		sub	sp, sp, #36
 4082              		.cfi_def_cfa_offset 56
 4083              		.loc 1 398 5 view .LVU1213
 4084 0008 30D8     		bhi	.L196
 399:Polyphony.cpp **** 
 400:Polyphony.cpp ****     float note_to_play = kTouchMidiNotes_[pad_idx];
 4085              		.loc 1 400 5 is_stmt 1 view .LVU1214
 4086              		.loc 1 400 11 is_stmt 0 view .LVU1215
 4087 000a 194B     		ldr	r3, .L199
 401:Polyphony.cpp ****     bool percussive = (current_engine_index_val > 7);
 402:Polyphony.cpp **** 
 403:Polyphony.cpp ****     voice_note_[0] = note_to_play;
 4088              		.loc 1 403 20 view .LVU1216
 4089 000c 00F58045 		add	r5, r0, #16384
 404:Polyphony.cpp ****     voice_active_[0] = true;
 4090              		.loc 1 404 22 view .LVU1217
 4091 0010 0127     		movs	r7, #1
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 151


 405:Polyphony.cpp **** 
 406:Polyphony.cpp ****     PatchParams patch_params;
 407:Polyphony.cpp ****     patch_params.engine_idx = current_engine_index_val;
 4092              		.loc 1 407 29 view .LVU1218
 4093 0012 0096     		str	r6, [sp]
 400:Polyphony.cpp ****     bool percussive = (current_engine_index_val > 7);
 4094              		.loc 1 400 11 view .LVU1219
 4095 0014 03EB8101 		add	r1, r3, r1, lsl #2
 4096              	.LVL242:
 403:Polyphony.cpp ****     voice_active_[0] = true;
 4097              		.loc 1 403 20 view .LVU1220
 4098 0018 05F6A402 		addw	r2, r5, #2212
 4099              	.LVL243:
 408:Polyphony.cpp ****     patch_params.note = note_to_play;
 409:Polyphony.cpp ****     patch_params.global_pitch_offset = 0.0f;
 410:Polyphony.cpp ****     patch_params.harmonics = 0.5f;  // Default values
 411:Polyphony.cpp ****     patch_params.timbre = 0.5f;
 412:Polyphony.cpp ****     patch_params.morph = 0.5f;
 413:Polyphony.cpp ****     patch_params.arp_on = true;
 4100              		.loc 1 413 25 view .LVU1221
 4101 001c 8DF81870 		strb	r7, [sp, #24]
 400:Polyphony.cpp ****     bool percussive = (current_engine_index_val > 7);
 4102              		.loc 1 400 11 view .LVU1222
 4103 0020 0B68     		ldr	r3, [r1]	@ float
 4104              	.LVL244:
 401:Polyphony.cpp **** 
 4105              		.loc 1 401 5 is_stmt 1 view .LVU1223
 403:Polyphony.cpp ****     voice_active_[0] = true;
 4106              		.loc 1 403 5 view .LVU1224
 414:Polyphony.cpp ****     patch_params.decay = env_release_val;  // wire knob to arp decay
 415:Polyphony.cpp ****     
 416:Polyphony.cpp ****     UpdatePatchParams(patches_[0], patch_params);
 4107              		.loc 1 416 22 is_stmt 0 view .LVU1225
 4108 0022 00F58C41 		add	r1, r0, #17920
 403:Polyphony.cpp ****     voice_active_[0] = true;
 4109              		.loc 1 403 20 view .LVU1226
 4110 0026 1360     		str	r3, [r2]	@ float
 404:Polyphony.cpp **** 
 4111              		.loc 1 404 5 is_stmt 1 view .LVU1227
 4112              		.loc 1 416 22 is_stmt 0 view .LVU1228
 4113 0028 5031     		adds	r1, r1, #80
 408:Polyphony.cpp ****     patch_params.global_pitch_offset = 0.0f;
 4114              		.loc 1 408 23 view .LVU1229
 4115 002a 0193     		str	r3, [sp, #4]	@ float
 409:Polyphony.cpp ****     patch_params.harmonics = 0.5f;  // Default values
 4116              		.loc 1 409 38 view .LVU1230
 4117 002c 0023     		movs	r3, #0
 4118              	.LVL245:
 4119              		.loc 1 416 22 view .LVU1231
 4120 002e 6A46     		mov	r2, sp
 4121              	.LVL246:
 404:Polyphony.cpp **** 
 4122              		.loc 1 404 22 view .LVU1232
 4123 0030 85F8A078 		strb	r7, [r5, #2208]
 406:Polyphony.cpp ****     patch_params.engine_idx = current_engine_index_val;
 4124              		.loc 1 406 5 is_stmt 1 view .LVU1233
 407:Polyphony.cpp ****     patch_params.note = note_to_play;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 152


 4125              		.loc 1 407 5 view .LVU1234
 408:Polyphony.cpp ****     patch_params.global_pitch_offset = 0.0f;
 4126              		.loc 1 408 5 view .LVU1235
 409:Polyphony.cpp ****     patch_params.harmonics = 0.5f;  // Default values
 4127              		.loc 1 409 5 view .LVU1236
 409:Polyphony.cpp ****     patch_params.harmonics = 0.5f;  // Default values
 4128              		.loc 1 409 38 is_stmt 0 view .LVU1237
 4129 0034 0293     		str	r3, [sp, #8]	@ float
 410:Polyphony.cpp ****     patch_params.timbre = 0.5f;
 4130              		.loc 1 410 5 is_stmt 1 view .LVU1238
 410:Polyphony.cpp ****     patch_params.timbre = 0.5f;
 4131              		.loc 1 410 28 is_stmt 0 view .LVU1239
 4132 0036 4FF07C53 		mov	r3, #1056964608
 4133 003a 0393     		str	r3, [sp, #12]	@ float
 411:Polyphony.cpp ****     patch_params.morph = 0.5f;
 4134              		.loc 1 411 5 is_stmt 1 view .LVU1240
 411:Polyphony.cpp ****     patch_params.morph = 0.5f;
 4135              		.loc 1 411 25 is_stmt 0 view .LVU1241
 4136 003c 0493     		str	r3, [sp, #16]	@ float
 412:Polyphony.cpp ****     patch_params.arp_on = true;
 4137              		.loc 1 412 5 is_stmt 1 view .LVU1242
 412:Polyphony.cpp ****     patch_params.arp_on = true;
 4138              		.loc 1 412 24 is_stmt 0 view .LVU1243
 4139 003e 0593     		str	r3, [sp, #20]	@ float
 413:Polyphony.cpp ****     patch_params.decay = env_release_val;  // wire knob to arp decay
 4140              		.loc 1 413 5 is_stmt 1 view .LVU1244
 414:Polyphony.cpp ****     
 4141              		.loc 1 414 5 view .LVU1245
 414:Polyphony.cpp ****     
 4142              		.loc 1 414 24 is_stmt 0 view .LVU1246
 4143 0040 0C4B     		ldr	r3, .L199+4
 4144 0042 1B68     		ldr	r3, [r3]	@ float
 4145 0044 0793     		str	r3, [sp, #28]	@ float
 4146              		.loc 1 416 5 is_stmt 1 view .LVU1247
 4147              		.loc 1 416 22 is_stmt 0 view .LVU1248
 4148 0046 FFF7FEFF 		bl	_ZN15PolyphonyEngine17UpdatePatchParamsERN6plaits5PatchERK11PatchParams
 4149              	.LVL247:
 417:Polyphony.cpp **** 
 418:Polyphony.cpp ****     modulations_[0].trigger = 1.0f;
 4150              		.loc 1 418 5 is_stmt 1 view .LVU1249
 4151              		.loc 1 418 29 is_stmt 0 view .LVU1250
 4152 004a 05F5E163 		add	r3, r5, #1800
 4153 004e 4FF07E52 		mov	r2, #1065353216
 419:Polyphony.cpp ****     modulations_[0].trigger_patched = true;
 420:Polyphony.cpp **** 
 421:Polyphony.cpp ****     if (!percussive) {
 4154              		.loc 1 421 5 view .LVU1251
 4155 0052 072E     		cmp	r6, #7
 418:Polyphony.cpp ****     modulations_[0].trigger_patched = true;
 4156              		.loc 1 418 29 view .LVU1252
 4157 0054 1A60     		str	r2, [r3]	@ float
 419:Polyphony.cpp ****     modulations_[0].trigger_patched = true;
 4158              		.loc 1 419 5 is_stmt 1 view .LVU1253
 419:Polyphony.cpp ****     modulations_[0].trigger_patched = true;
 4159              		.loc 1 419 37 is_stmt 0 view .LVU1254
 4160 0056 85F81377 		strb	r7, [r5, #1811]
 4161              		.loc 1 421 5 is_stmt 1 view .LVU1255
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 153


 4162 005a 07DC     		bgt	.L196
 422:Polyphony.cpp ****         voice_envelopes_[0].SetMode(VoiceEnvelope::MODE_AR);
 4163              		.loc 1 422 9 view .LVU1256
 4164              	.LVL248:
 4165              	.LBB1891:
 4166              	.LBI1891:
  43:VoiceEnvelope.h ****         mode = new_mode;
 4167              		.loc 3 43 10 view .LVU1257
 4168              	.LBB1892:
  44:VoiceEnvelope.h ****     }
 4169              		.loc 3 44 9 view .LVU1258
  44:VoiceEnvelope.h ****     }
 4170              		.loc 3 44 14 is_stmt 0 view .LVU1259
 4171 005c 0023     		movs	r3, #0
 4172              	.LBE1892:
 4173              	.LBE1891:
 423:Polyphony.cpp ****         voice_envelopes_[0].Trigger();
 4174              		.loc 1 423 36 view .LVU1260
 4175 005e 00F58F40 		add	r0, r0, #18304
 4176              	.LVL249:
 4177              	.LBB1894:
 4178              	.LBB1893:
  44:VoiceEnvelope.h ****     }
 4179              		.loc 3 44 14 view .LVU1261
 4180 0062 85F89137 		strb	r3, [r5, #1937]
 4181              	.LVL250:
  44:VoiceEnvelope.h ****     }
 4182              		.loc 3 44 14 view .LVU1262
 4183              	.LBE1893:
 4184              	.LBE1894:
 4185              		.loc 1 423 9 is_stmt 1 view .LVU1263
 4186              		.loc 1 423 36 is_stmt 0 view .LVU1264
 4187 0066 1030     		adds	r0, r0, #16
 4188              	.LVL251:
 4189              		.loc 1 423 36 view .LVU1265
 4190 0068 FFF7FEFF 		bl	_ZN13VoiceEnvelope7TriggerEv
 4191              	.LVL252:
 4192              	.L196:
 424:Polyphony.cpp ****     }
 425:Polyphony.cpp **** }
 4193              		.loc 1 425 1 view .LVU1266
 4194 006c 09B0     		add	sp, sp, #36
 4195              		.cfi_def_cfa_offset 20
 4196              		@ sp needed
 4197 006e F0BD     		pop	{r4, r5, r6, r7, pc}
 4198              	.LVL253:
 4199              	.L200:
 4200              		.loc 1 425 1 view .LVU1267
 4201              		.align	2
 4202              	.L199:
 4203 0070 00000000 		.word	.LANCHOR0
 4204 0074 00000000 		.word	env_release_val
 4205              		.cfi_endproc
 4206              	.LFE6142:
 4208              		.section	.text._ZNK15PolyphonyEngine16IsAnyVoiceActiveEv,"ax",%progbits
 4209              		.align	1
 4210              		.global	_ZNK15PolyphonyEngine16IsAnyVoiceActiveEv
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 154


 4211              		.syntax unified
 4212              		.thumb
 4213              		.thumb_func
 4215              	_ZNK15PolyphonyEngine16IsAnyVoiceActiveEv:
 4216              	.LVL254:
 4217              	.LFB6143:
 426:Polyphony.cpp **** 
 427:Polyphony.cpp **** bool PolyphonyEngine::IsAnyVoiceActive() const {
 4218              		.loc 1 427 48 is_stmt 1 view -0
 4219              		.cfi_startproc
 4220              		@ args = 0, pretend = 0, frame = 0
 4221              		@ frame_needed = 0, uses_anonymous_args = 0
 4222              		@ link register save eliminated.
 428:Polyphony.cpp ****     for (int i = 0; i < NUM_VOICES; ++i) {
 4223              		.loc 1 428 5 view .LVU1269
 4224              	.LBB1895:
 4225              		.loc 1 428 23 view .LVU1270
 4226 0000 00F59142 		add	r2, r0, #18560
 4227 0004 00F59143 		add	r3, r0, #18560
 4228 0008 2032     		adds	r2, r2, #32
 4229 000a 2433     		adds	r3, r3, #36
 4230              	.LVL255:
 4231              	.L203:
 429:Polyphony.cpp ****         if (voice_active_[i]) {
 4232              		.loc 1 429 9 view .LVU1271
 4233              		.loc 1 429 28 is_stmt 0 view .LVU1272
 4234 000c 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 4235              	.LVL256:
 4236              		.loc 1 429 9 view .LVU1273
 4237 0010 08B9     		cbnz	r0, .L202
 428:Polyphony.cpp ****     for (int i = 0; i < NUM_VOICES; ++i) {
 4238              		.loc 1 428 5 is_stmt 1 discriminator 2 view .LVU1274
 4239              	.LVL257:
 428:Polyphony.cpp ****     for (int i = 0; i < NUM_VOICES; ++i) {
 4240              		.loc 1 428 23 discriminator 2 view .LVU1275
 4241 0012 9A42     		cmp	r2, r3
 4242 0014 FAD1     		bne	.L203
 4243              	.LVL258:
 4244              	.L202:
 428:Polyphony.cpp ****     for (int i = 0; i < NUM_VOICES; ++i) {
 4245              		.loc 1 428 23 is_stmt 0 discriminator 2 view .LVU1276
 4246              	.LBE1895:
 430:Polyphony.cpp ****             return true;
 431:Polyphony.cpp ****         }
 432:Polyphony.cpp ****     }
 433:Polyphony.cpp ****     return false;
 434:Polyphony.cpp **** }
 4247              		.loc 1 434 1 view .LVU1277
 4248 0016 7047     		bx	lr
 4249              		.cfi_endproc
 4250              	.LFE6143:
 4252              		.section	.text.startup._GLOBAL__sub_I_shared_buffer,"ax",%progbits
 4253              		.align	1
 4254              		.syntax unified
 4255              		.thumb
 4256              		.thumb_func
 4258              	_GLOBAL__sub_I_shared_buffer:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 155


 4259              	.LFB7033:
 4260              		.loc 1 434 1 is_stmt 1 view -0
 4261              		.cfi_startproc
 4262              		@ args = 0, pretend = 0, frame = 0
 4263              		@ frame_needed = 0, uses_anonymous_args = 0
 4264              	.LBB1898:
 4265              	.LBI1898:
 4266              		.loc 1 434 1 view .LVU1279
 4267              	.LVL259:
 4268              		.loc 1 434 1 is_stmt 0 view .LVU1280
 4269              	.LBE1898:
 4270 0000 10B5     		push	{r4, lr}
 4271              		.cfi_def_cfa_offset 8
 4272              		.cfi_offset 4, -8
 4273              		.cfi_offset 14, -4
 4274              	.LBB1901:
 4275              	.LBB1899:
  10:Polyphony.cpp **** 
 4276              		.loc 1 10 17 view .LVU1281
 4277 0002 054C     		ldr	r4, .L206
 4278 0004 2046     		mov	r0, r4
 4279 0006 FFF7FEFF 		bl	_ZN15PolyphonyEngineC1Ev
 4280              	.LVL260:
 4281 000a 2046     		mov	r0, r4
 4282 000c 034A     		ldr	r2, .L206+4
 4283 000e 0449     		ldr	r1, .L206+8
 4284              	.LBE1899:
 4285              	.LBE1901:
 4286              		.loc 1 434 1 view .LVU1282
 4287 0010 BDE81040 		pop	{r4, lr}
 4288              		.cfi_restore 14
 4289              		.cfi_restore 4
 4290              		.cfi_def_cfa_offset 0
 4291              	.LBB1902:
 4292              	.LBB1900:
  10:Polyphony.cpp **** 
 4293              		.loc 1 10 17 view .LVU1283
 4294 0014 FFF7FEBF 		b	__aeabi_atexit
 4295              	.LVL261:
 4296              	.L207:
 4297              		.align	2
 4298              	.L206:
 4299 0018 00000000 		.word	poly_engine
 4300 001c 00000000 		.word	__dso_handle
 4301 0020 00000000 		.word	_ZN15PolyphonyEngineD1Ev
 4302              	.LBE1900:
 4303              	.LBE1902:
 4304              		.cfi_endproc
 4305              	.LFE7033:
 4307              		.section	.init_array,"aw",%init_array
 4308              		.align	2
 4309 0000 00000000 		.word	_GLOBAL__sub_I_shared_buffer(target1)
 4310              		.global	_ZN15PolyphonyEngine16kTouchMidiNotes_E
 4311              		.global	poly_engine
 4312              		.global	MAX_ENGINE_INDEX
 4313              		.global	shared_buffer
 4314              		.section	.bss.poly_engine,"aw",%nobits
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 156


 4315              		.align	2
 4318              	poly_engine:
 4319 0000 00000000 		.space	19392
 4319      00000000 
 4319      00000000 
 4319      00000000 
 4319      00000000 
 4320              		.section	.rodata.MAX_ENGINE_INDEX,"a"
 4321              		.align	2
 4324              	MAX_ENGINE_INDEX:
 4325 0000 0F000000 		.word	15
 4326              		.section	.rodata._ZN15PolyphonyEngine16kTouchMidiNotes_E,"a"
 4327              		.align	2
 4328              		.set	.LANCHOR0,. + 0
 4331              	_ZN15PolyphonyEngine16kTouchMidiNotes_E:
 4332 0000 00002042 		.word	1109393408
 4333 0004 00002442 		.word	1109655552
 4334 0008 00002C42 		.word	1110179840
 4335 000c 00003442 		.word	1110704128
 4336 0010 00003C42 		.word	1111228416
 4337 0014 00004042 		.word	1111490560
 4338 0018 00004842 		.word	1112014848
 4339 001c 00005042 		.word	1112539136
 4340 0020 00005442 		.word	1112801280
 4341 0024 00005C42 		.word	1113325568
 4342 0028 00006442 		.word	1113849856
 4343 002c 00006C42 		.word	1114374144
 4344              		.section	.sdram_bss,"aw"
 4347              	shared_buffer:
 4348 0000 00000000 		.space	262144
 4348      00000000 
 4348      00000000 
 4348      00000000 
 4348      00000000 
 4349              		.text
 4350              	.Letext0:
 4351              		.file 49 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/machine/_default_types.h"
 4352              		.file 50 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/_stdint.h"
 4353              		.file 51 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdint.h"
 4354              		.file 52 "/Library/DaisyToolchain/0.2.0/arm/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 4355              		.file 53 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cmath"
 4356              		.file 54 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h"
 4357              		.file 55 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdlib"
 4358              		.file 56 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdint"
 4359              		.file 57 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/type_traits"
 4360              		.file 58 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/debug/debug.h"
 4361              		.file 59 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/arm-none-eabi/thumb/v
 4362              		.file 60 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/algorithmfwd.h"
 4363              		.file 61 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h"
 4364              		.file 62 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/exception_ptr.h"
 4365              		.file 63 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdarg"
 4366              		.file 64 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdio"
 4367              		.file 65 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstring"
 4368              		.file 66 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cwchar"
 4369              		.file 67 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/clocale"
 4370              		.file 68 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/basic_string.h"
 4371              		.file 69 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_iterator.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 157


 4372              		.file 70 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/uses_allocator.h
 4373              		.file 71 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/tuple"
 4374              		.file 72 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/functional"
 4375              		.file 73 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/predefined_ops.h
 4376              		.file 74 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/_types.h"
 4377              		.file 75 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/reent.h"
 4378              		.file 76 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/lock.h"
 4379              		.file 77 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/math.h"
 4380              		.file 78 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdlib.h"
 4381              		.file 79 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/math.h"
 4382              		.file 80 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/stdlib.h"
 4383              		.file 81 "lib/libdaisy/src/daisy_core.h"
 4384              		.file 82 "lib/libdaisy/src/per/tim.h"
 4385              		.file 83 "lib/libdaisy/src/sys/system.h"
 4386              		.file 84 "lib/libdaisy/src/per/qspi.h"
 4387              		.file 85 "lib/libdaisy/src/per/dac.h"
 4388              		.file 86 "lib/libdaisy/src/per/gpio.h"
 4389              		.file 87 "lib/libdaisy/src/per/sai.h"
 4390              		.file 88 "lib/libdaisy/src/hid/audio.h"
 4391              		.file 89 "lib/libdaisy/src/per/adc.h"
 4392              		.file 90 "lib/libdaisy/src/hid/usb.h"
 4393              		.file 91 "lib/libdaisy/src/util/wav_format.h"
 4394              		.file 92 "lib/libdaisy/src/dev/sr_595.h"
 4395              		.file 93 "lib/libdaisy/src/dev/codec_ak4556.h"
 4396              		.file 94 "lib/libdaisy/src/dev/max11300.h"
 4397              		.file 95 "lib/libdaisy/src/daisy_seed.h"
 4398              		.file 96 "lib/libdaisy/src/dev/sdram.h"
 4399              		.file 97 "/Library/DaisyToolchain/0.2.0/arm/lib/gcc/arm-none-eabi/10.3.1/include/stdarg.h"
 4400              		.file 98 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdio.h"
 4401              		.file 99 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/string.h"
 4402              		.file 100 "lib/DaisySP/Source/Control/adenv.h"
 4403              		.file 101 "lib/DaisySP/Source/Utility/dsp.h"
 4404              		.file 102 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/wchar.h"
 4405              		.file 103 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/locale.h"
 4406              		.file 104 "eurorack/stmlib/stmlib.h"
 4407              		.file 105 "eurorack/stmlib/dsp/cosine_oscillator.h"
 4408              		.file 106 "eurorack/plaits/dsp/dsp.h"
 4409              		.file 107 "eurorack/plaits/dsp/oscillator/harmonic_oscillator.h"
 4410              		.file 108 "eurorack/plaits/dsp/oscillator/string_synth_oscillator.h"
 4411              		.file 109 "eurorack/plaits/dsp/oscillator/grainlet_oscillator.h"
 4412              		.file 110 "eurorack/plaits/dsp/noise/clocked_noise.h"
 4413              		.file 111 "eurorack/plaits/dsp/noise/particle.h"
 4414              		.file 112 "eurorack/plaits/dsp/physical_modelling/string.h"
 4415              		.file 113 "eurorack/plaits/dsp/physical_modelling/string_voice.h"
 4416              		.file 114 "mpr121_daisy.h"
 4417              		.file 115 "Effects/BiquadFilters.h"
 4418              		.file 116 "Arpeggiator.h"
 4419              		.file 117 "Polyphony.h"
 4420              		.file 118 "eurorack/clouds/dsp/correlator.h"
 4421              		.file 119 "eurorack/clouds/dsp/frame.h"
 4422              		.file 120 "eurorack/clouds/dsp/granular_sample_player.h"
 4423              		.file 121 "eurorack/clouds/dsp/looping_sample_player.h"
 4424              		.file 122 "eurorack/clouds/dsp/pvoc/stft.h"
 4425              		.file 123 "eurorack/clouds/dsp/pvoc/frame_transformation.h"
 4426              		.file 124 "eurorack/clouds/dsp/wsola_sample_player.h"
 4427              		.file 125 "eurorack/clouds/dsp/granular_processor.h"
 4428              		.file 126 "eurorack/clouds/dsp/audio_buffer.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 158


 4429              		.file 127 "Thaumazein.h"
 4430              		.file 128 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/new"
 4431              		.file 129 "<built-in>"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 159


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Polyphony.cpp
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:19     .text._ZN15PolyphonyEngineD2Ev:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:25     .text._ZN15PolyphonyEngineD2Ev:0000000000000000 _ZN15PolyphonyEngineD2Ev
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:25     .text._ZN15PolyphonyEngineD2Ev:0000000000000000 _ZN15PolyphonyEngineD1Ev
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:76     .text._ZN13VoiceEnvelope7TriggerEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:82     .text._ZN13VoiceEnvelope7TriggerEv:0000000000000000 _ZN13VoiceEnvelope7TriggerEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:181    .text._ZN13VoiceEnvelope7ReleaseEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:187    .text._ZN13VoiceEnvelope7ReleaseEv:0000000000000000 _ZN13VoiceEnvelope7ReleaseEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:266    .text._ZN13VoiceEnvelope5ResetEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:272    .text._ZN13VoiceEnvelope5ResetEv:0000000000000000 _ZN13VoiceEnvelope5ResetEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:311    .text._ZN15PolyphonyEngineC2Ev:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:317    .text._ZN15PolyphonyEngineC2Ev:0000000000000000 _ZN15PolyphonyEngineC2Ev
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:1075   .text._ZN15PolyphonyEngineC2Ev:00000000000000f4 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:317    .text._ZN15PolyphonyEngineC2Ev:0000000000000000 _ZN15PolyphonyEngineC1Ev
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:1097   .text._ZN15PolyphonyEngine11ResetVoicesEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:1103   .text._ZN15PolyphonyEngine11ResetVoicesEv:0000000000000000 _ZN15PolyphonyEngine11ResetVoicesEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:1175   .text._ZN15PolyphonyEngine14AllocateVoicesEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:1181   .text._ZN15PolyphonyEngine14AllocateVoicesEv:0000000000000000 _ZN15PolyphonyEngine14AllocateVoicesEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:1288   .text._ZN15PolyphonyEngine14AllocateVoicesEv:0000000000000044 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:4347   .sdram_bss:0000000000000000 shared_buffer
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:1293   .text._ZN15PolyphonyEngine19InitVoiceParametersEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:1299   .text._ZN15PolyphonyEngine19InitVoiceParametersEv:0000000000000000 _ZN15PolyphonyEngine19InitVoiceParametersEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:1677   .text._ZN15PolyphonyEngine19InitVoiceParametersEv:0000000000000138 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:1687   .text._ZN15PolyphonyEngine4InitEPN5daisy9DaisySeedE:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:1693   .text._ZN15PolyphonyEngine4InitEPN5daisy9DaisySeedE:0000000000000000 _ZN15PolyphonyEngine4InitEPN5daisy9DaisySeedE
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:1733   .text._ZN15PolyphonyEngine16ProcessEnvelopesEb:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:1739   .text._ZN15PolyphonyEngine16ProcessEnvelopesEb:0000000000000000 _ZN15PolyphonyEngine16ProcessEnvelopesEb
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:1845   .text._ZN15PolyphonyEngine16ProcessEnvelopesEb:0000000000000078 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:1850   .text._ZN15PolyphonyEngine17UpdatePatchParamsERN6plaits5PatchERK11PatchParams:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:1856   .text._ZN15PolyphonyEngine17UpdatePatchParamsERN6plaits5PatchERK11PatchParams:0000000000000000 _ZN15PolyphonyEngine17UpdatePatchParamsERN6plaits5PatchERK11PatchParams
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:1918   .text._ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:1924   .text._ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff:0000000000000000 _ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:2127   .text._ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff:00000000000000ce $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:2443   .text._ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff:00000000000001fc $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:2453   .text._ZN15PolyphonyEngine17UpdateMonoTriggerERN6plaits11ModulationsERbb:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:2459   .text._ZN15PolyphonyEngine17UpdateMonoTriggerERN6plaits11ModulationsERbb:0000000000000000 _ZN15PolyphonyEngine17UpdateMonoTriggerERN6plaits11ModulationsERbb
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:2486   .text._ZN15PolyphonyEngine12SilenceVoiceEi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:2492   .text._ZN15PolyphonyEngine12SilenceVoiceEi:0000000000000000 _ZN15PolyphonyEngine12SilenceVoiceEi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:2523   .text._ZN15PolyphonyEngine14RetriggerVoiceEi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:2529   .text._ZN15PolyphonyEngine14RetriggerVoiceEi:0000000000000000 _ZN15PolyphonyEngine14RetriggerVoiceEi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:2627   .text._ZN15PolyphonyEngine15PrepVoiceParamsERKNS_16RenderParametersE:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:2633   .text._ZN15PolyphonyEngine15PrepVoiceParamsERKNS_16RenderParametersE:0000000000000000 _ZN15PolyphonyEngine15PrepVoiceParamsERKNS_16RenderParametersE
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:2966   .text._ZN15PolyphonyEngine15PrepVoiceParamsERKNS_16RenderParametersE:000000000000017c $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:2972   .text._ZN15PolyphonyEngine11RenderBlockERKNS_16RenderParametersE:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:2978   .text._ZN15PolyphonyEngine11RenderBlockERKNS_16RenderParametersE:0000000000000000 _ZN15PolyphonyEngine11RenderBlockERKNS_16RenderParametersE
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:3029   .text._ZN15PolyphonyEngine11ClearVoicesEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:3035   .text._ZN15PolyphonyEngine11ClearVoicesEv:0000000000000000 _ZN15PolyphonyEngine11ClearVoicesEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:3116   .text._ZN15PolyphonyEngine10PolyToMonoEi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:3122   .text._ZN15PolyphonyEngine10PolyToMonoEi:0000000000000000 _ZN15PolyphonyEngine10PolyToMonoEi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:3323   .text._ZN15PolyphonyEngine10PolyToMonoEi:0000000000000100 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:3330   .text._ZN15PolyphonyEngine14OnEngineChangeEii:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:3336   .text._ZN15PolyphonyEngine14OnEngineChangeEii:0000000000000000 _ZN15PolyphonyEngine14OnEngineChangeEii
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:3463   .text._ZNK15PolyphonyEngine17GetLastTouchStateEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:3469   .text._ZNK15PolyphonyEngine17GetLastTouchStateEv:0000000000000000 _ZNK15PolyphonyEngine17GetLastTouchStateEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:3490   .text._ZN15PolyphonyEngine20UpdateLastTouchStateEt:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:3496   .text._ZN15PolyphonyEngine20UpdateLastTouchStateEt:0000000000000000 _ZN15PolyphonyEngine20UpdateLastTouchStateEt
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s 			page 160


/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:3516   .text._ZN15PolyphonyEngine13FindFreeVoiceEi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:3522   .text._ZN15PolyphonyEngine13FindFreeVoiceEi:0000000000000000 _ZN15PolyphonyEngine13FindFreeVoiceEi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:3567   .text._ZN15PolyphonyEngine14AssignMonoNoteEfb:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:3573   .text._ZN15PolyphonyEngine14AssignMonoNoteEfb:0000000000000000 _ZN15PolyphonyEngine14AssignMonoNoteEfb
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:3635   .text._ZN15PolyphonyEngine16FindVoiceForNoteEfibi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:3641   .text._ZN15PolyphonyEngine16FindVoiceForNoteEfibi:0000000000000000 _ZN15PolyphonyEngine16FindVoiceForNoteEfibi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:3756   .text._ZN15PolyphonyEngine16FindVoiceForNoteEfibi:0000000000000074 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:3761   .text._ZN15PolyphonyEngine16HandleTouchInputEttibi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:3767   .text._ZN15PolyphonyEngine16HandleTouchInputEttibi:0000000000000000 _ZN15PolyphonyEngine16HandleTouchInputEttibi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:4046   .text._ZN15PolyphonyEngine16HandleTouchInputEttibi:0000000000000130 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:4057   .text._ZN15PolyphonyEngine15TriggerArpVoiceEii:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:4063   .text._ZN15PolyphonyEngine15TriggerArpVoiceEii:0000000000000000 _ZN15PolyphonyEngine15TriggerArpVoiceEii
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:4203   .text._ZN15PolyphonyEngine15TriggerArpVoiceEii:0000000000000070 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:4209   .text._ZNK15PolyphonyEngine16IsAnyVoiceActiveEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:4215   .text._ZNK15PolyphonyEngine16IsAnyVoiceActiveEv:0000000000000000 _ZNK15PolyphonyEngine16IsAnyVoiceActiveEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:4253   .text.startup._GLOBAL__sub_I_shared_buffer:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:4258   .text.startup._GLOBAL__sub_I_shared_buffer:0000000000000000 _GLOBAL__sub_I_shared_buffer
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:4299   .text.startup._GLOBAL__sub_I_shared_buffer:0000000000000018 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:4318   .bss.poly_engine:0000000000000000 poly_engine
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:4308   .init_array:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:4331   .rodata._ZN15PolyphonyEngine16kTouchMidiNotes_E:0000000000000000 _ZN15PolyphonyEngine16kTouchMidiNotes_E
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:4324   .rodata.MAX_ENGINE_INDEX:0000000000000000 MAX_ENGINE_INDEX
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:4315   .bss.poly_engine:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:4321   .rodata.MAX_ENGINE_INDEX:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:4327   .rodata._ZN15PolyphonyEngine16kTouchMidiNotes_E:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:4348   .sdram_bss:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:2133   .text._ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff:00000000000000d3 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc3ChYCk.s:2133   .text._ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff:00000000000000d4 $t

UNDEFINED SYMBOLS
_ZdlPvj
memset
_ZTVN6plaits14AdditiveEngineE
_ZTVN6plaits14BassDrumEngineE
_ZTVN6plaits11ChordEngineE
_ZTVN6plaits8FMEngineE
_ZTVN6plaits11GrainEngineE
_ZTVN6plaits11HiHatEngineE
_ZTVN6plaits11ModalEngineE
_ZTVN6plaits11NoiseEngineE
_ZTVN6plaits14ParticleEngineE
_ZTVN6plaits15SnareDrumEngineE
_ZTVN6plaits12SpeechEngineE
_ZTVN6plaits12StringEngineE
_ZTVN6plaits11SwarmEngineE
_ZTVN6plaits19VirtualAnalogEngineE
_ZTVN6plaits17WaveshapingEngineE
_ZTVN6plaits15WavetableEngineE
_Znwj
_ZN6plaits5Voice4InitEPN6stmlib15BufferAllocatorE
sample_rate
_ZN6plaits5Voice6RenderERKNS_5PatchERKNS_11ModulationsEPNS0_5FrameEj
memcpy
env_release_val
__aeabi_atexit
__dso_handle
