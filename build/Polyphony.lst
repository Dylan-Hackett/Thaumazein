ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"Polyphony.cpp"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text._ZN15PolyphonyEngineD2Ev,"ax",%progbits
  19              		.align	1
  20              		.global	_ZN15PolyphonyEngineD2Ev
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	_ZN15PolyphonyEngineD2Ev:
  26              	.LVL0:
  27              	.LFB5349:
  28              		.file 1 "Polyphony.cpp"
   1:Polyphony.cpp **** #include "Thaumazein.h"
   2:Polyphony.cpp **** #include "Polyphony.h"
   3:Polyphony.cpp **** #include "stmlib/utils/buffer_allocator.h"
   4:Polyphony.cpp **** 
   5:Polyphony.cpp **** DSY_SDRAM_BSS char shared_buffer[262144];
   6:Polyphony.cpp **** 
   7:Polyphony.cpp **** const int MAX_ENGINE_INDEX = 12;
   8:Polyphony.cpp **** 
   9:Polyphony.cpp **** // --- PolyphonyEngine Class Implementation ---
  10:Polyphony.cpp **** 
  11:Polyphony.cpp **** // Global instance of the PolyphonyEngine
  12:Polyphony.cpp **** PolyphonyEngine poly_engine;
  13:Polyphony.cpp **** 
  14:Polyphony.cpp **** // Definition of the static member
  15:Polyphony.cpp **** const float PolyphonyEngine::kTouchMidiNotes_[12] = {
  16:Polyphony.cpp ****     40.0f, 41.0f, 43.0f, 45.0f, 47.0f, 48.0f, // E2, F2, G2, A2, B2, C3
  17:Polyphony.cpp ****     50.0f, 52.0f, 53.0f, 55.0f, 57.0f, 59.0f  // D3, E3, F3, G3, A3, B3
  18:Polyphony.cpp **** };
  19:Polyphony.cpp **** 
  20:Polyphony.cpp **** PolyphonyEngine::PolyphonyEngine() : allocator_(nullptr), hw_ptr_(nullptr), engine_changed_flag_(fa
  21:Polyphony.cpp ****     // Constructor: Initialize arrays to zero or default states if necessary.
  22:Polyphony.cpp ****     // Most of the detailed initialization will happen in Init().
  23:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
  24:Polyphony.cpp ****     memset(voice_note_, 0, sizeof(voice_note_));
  25:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
  26:Polyphony.cpp ****     memset(mix_buffer_aux_, 0, sizeof(mix_buffer_aux_));
  27:Polyphony.cpp ****     // output_buffers_ will be filled during rendering.
  28:Polyphony.cpp ****     // patches_ and modulations_ have default constructors or will be set in Init.
  29:Polyphony.cpp **** }
  30:Polyphony.cpp **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 2


  31:Polyphony.cpp **** PolyphonyEngine::~PolyphonyEngine() {
  29              		.loc 1 31 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LBB1071:
  32:Polyphony.cpp ****     // Destructor: Clean up resources if any were dynamically allocated by this class instance.
  33:Polyphony.cpp ****     if (allocator_) {
  34              		.loc 1 33 5 view .LVU1
  35              		.loc 1 33 9 is_stmt 0 view .LVU2
  36 0000 00F54053 		add	r3, r0, #12288
  37              	.LBE1071:
  31:Polyphony.cpp ****     // Destructor: Clean up resources if any were dynamically allocated by this class instance.
  38              		.loc 1 31 1 view .LVU3
  39 0004 10B5     		push	{r4, lr}
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 4, -8
  42              		.cfi_offset 14, -4
  31:Polyphony.cpp ****     // Destructor: Clean up resources if any were dynamically allocated by this class instance.
  43              		.loc 1 31 1 view .LVU4
  44 0006 0446     		mov	r4, r0
  45              	.LBB1073:
  46              		.loc 1 33 9 view .LVU5
  47 0008 D3F8A40A 		ldr	r0, [r3, #2724]
  48              	.LVL1:
  49              		.loc 1 33 5 view .LVU6
  50 000c 10B1     		cbz	r0, .L2
  34:Polyphony.cpp ****         delete allocator_;
  51              		.loc 1 34 9 is_stmt 1 view .LVU7
  52              	.LVL2:
  53              	.LBB1072:
  54              	.LBI1072:
  55              		.file 2 "eurorack/stmlib/utils/buffer_allocator.h"
   1:eurorack/stmlib/utils/buffer_allocator.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/stmlib/utils/buffer_allocator.h **** //
   3:eurorack/stmlib/utils/buffer_allocator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/utils/buffer_allocator.h **** //
   5:eurorack/stmlib/utils/buffer_allocator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/utils/buffer_allocator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/utils/buffer_allocator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/utils/buffer_allocator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/utils/buffer_allocator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/utils/buffer_allocator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/utils/buffer_allocator.h **** // 
  12:eurorack/stmlib/utils/buffer_allocator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/utils/buffer_allocator.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/utils/buffer_allocator.h **** // 
  15:eurorack/stmlib/utils/buffer_allocator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/utils/buffer_allocator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/utils/buffer_allocator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/utils/buffer_allocator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/utils/buffer_allocator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/utils/buffer_allocator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/utils/buffer_allocator.h **** // THE SOFTWARE.
  22:eurorack/stmlib/utils/buffer_allocator.h **** // 
  23:eurorack/stmlib/utils/buffer_allocator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/utils/buffer_allocator.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 3


  25:eurorack/stmlib/utils/buffer_allocator.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/utils/buffer_allocator.h **** //
  27:eurorack/stmlib/utils/buffer_allocator.h **** // Stream buffer for serialization.
  28:eurorack/stmlib/utils/buffer_allocator.h **** 
  29:eurorack/stmlib/utils/buffer_allocator.h **** #ifndef STMLIB_UTILS_BUFFER_ALLOCATOR_H_
  30:eurorack/stmlib/utils/buffer_allocator.h **** #define STMLIB_UTILS_BUFFER_ALLOCATOR_H_
  31:eurorack/stmlib/utils/buffer_allocator.h **** 
  32:eurorack/stmlib/utils/buffer_allocator.h **** #include "stmlib/stmlib.h"
  33:eurorack/stmlib/utils/buffer_allocator.h **** 
  34:eurorack/stmlib/utils/buffer_allocator.h **** namespace stmlib {
  35:eurorack/stmlib/utils/buffer_allocator.h **** 
  36:eurorack/stmlib/utils/buffer_allocator.h **** class BufferAllocator {
  37:eurorack/stmlib/utils/buffer_allocator.h ****  public:
  38:eurorack/stmlib/utils/buffer_allocator.h ****   BufferAllocator() { }
  39:eurorack/stmlib/utils/buffer_allocator.h ****   ~BufferAllocator() { }
  56              		.loc 2 39 3 view .LVU8
  57              		.loc 2 39 3 is_stmt 0 view .LVU9
  58              	.LBE1072:
  59              		.loc 1 34 16 view .LVU10
  60 000e 1021     		movs	r1, #16
  61 0010 FFF7FEFF 		bl	_ZdlPvj
  62              	.LVL3:
  35:Polyphony.cpp ****         allocator_ = nullptr;
  63              		.loc 1 35 9 is_stmt 1 view .LVU11
  64              	.L2:
  65              	.LBE1073:
  36:Polyphony.cpp ****     }
  37:Polyphony.cpp **** }
  66              		.loc 1 37 1 is_stmt 0 view .LVU12
  67 0014 2046     		mov	r0, r4
  68 0016 10BD     		pop	{r4, pc}
  69              		.loc 1 37 1 view .LVU13
  70              		.cfi_endproc
  71              	.LFE5349:
  73              		.global	_ZN15PolyphonyEngineD1Ev
  74              		.thumb_set _ZN15PolyphonyEngineD1Ev,_ZN15PolyphonyEngineD2Ev
  75              		.section	.text._ZN13VoiceEnvelope7TriggerEv,"axG",%progbits,_ZN13VoiceEnvelope7TriggerEv,comdat
  76              		.align	1
  77              		.weak	_ZN13VoiceEnvelope7TriggerEv
  78              		.syntax unified
  79              		.thumb
  80              		.thumb_func
  82              	_ZN13VoiceEnvelope7TriggerEv:
  83              	.LVL4:
  84              	.LFB5040:
  85              		.file 3 "VoiceEnvelope.h"
   1:VoiceEnvelope.h **** #pragma once
   2:VoiceEnvelope.h **** #include <algorithm>
   3:VoiceEnvelope.h **** 
   4:VoiceEnvelope.h **** // Simple envelope for each polyphonic voice
   5:VoiceEnvelope.h **** class VoiceEnvelope {
   6:VoiceEnvelope.h **** public:
   7:VoiceEnvelope.h ****     enum EnvState {
   8:VoiceEnvelope.h ****         ENV_IDLE,
   9:VoiceEnvelope.h ****         ENV_ATTACK,
  10:VoiceEnvelope.h ****         ENV_SUSTAIN,
  11:VoiceEnvelope.h ****         ENV_DECAY,
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 4


  12:VoiceEnvelope.h ****         ENV_RESET
  13:VoiceEnvelope.h ****     };
  14:VoiceEnvelope.h **** 
  15:VoiceEnvelope.h ****     enum EnvMode {
  16:VoiceEnvelope.h ****         MODE_AR,   // Attack-Release
  17:VoiceEnvelope.h ****         MODE_ASR   // Attack-Sustain-Release
  18:VoiceEnvelope.h ****     };
  19:VoiceEnvelope.h **** 
  20:VoiceEnvelope.h ****     VoiceEnvelope() :
  21:VoiceEnvelope.h ****         current_state(ENV_IDLE),
  22:VoiceEnvelope.h ****         mode(MODE_ASR),
  23:VoiceEnvelope.h ****         current_value(0.0f),
  24:VoiceEnvelope.h ****         attack_curve_coefficient(0.5f),
  25:VoiceEnvelope.h ****         release_curve_coefficient(0.5f),
  26:VoiceEnvelope.h ****         phase(0),
  27:VoiceEnvelope.h ****         decay_start_level(0.0f)
  28:VoiceEnvelope.h ****     {}
  29:VoiceEnvelope.h **** 
  30:VoiceEnvelope.h ****     void Init(float sample_rate) {
  31:VoiceEnvelope.h ****         time_range_2x = 2.0f * 4.0f * sample_rate;  // 4s max time
  32:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
  33:VoiceEnvelope.h ****         min_decay_time_a = 0.4f * sample_rate;      // 400ms min decay A
  34:VoiceEnvelope.h ****         min_decay_time_b = 0.0001f * sample_rate;    // 0.1ms min decay B (pulse-like release)
  35:VoiceEnvelope.h ****         reset_time = 0.008f * sample_rate;          // 8ms reset time
  36:VoiceEnvelope.h ****         reset_coefficient = 1.0f / reset_time;
  37:VoiceEnvelope.h ****         
  38:VoiceEnvelope.h ****         // Default curves
  39:VoiceEnvelope.h ****         SetAttackCurve(0.5f);
  40:VoiceEnvelope.h ****         SetReleaseCurve(0.5f);
  41:VoiceEnvelope.h ****     }
  42:VoiceEnvelope.h **** 
  43:VoiceEnvelope.h ****     void SetMode(EnvMode new_mode) {
  44:VoiceEnvelope.h ****         mode = new_mode;
  45:VoiceEnvelope.h ****     }
  46:VoiceEnvelope.h **** 
  47:VoiceEnvelope.h ****     // Original combined shape method for backward compatibility
  48:VoiceEnvelope.h ****     void SetShape(float value) {
  49:VoiceEnvelope.h ****         float curve;
  50:VoiceEnvelope.h ****         if (value < 0.5f) {
  51:VoiceEnvelope.h ****             attack_time = min_attack_time;
  52:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * value * value) + min_decay_time_a;
  53:VoiceEnvelope.h ****             curve = value * 0.15f;
  54:VoiceEnvelope.h ****         } else {
  55:VoiceEnvelope.h ****             float norm_val = 2.0f * value - 1.0f;
  56:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(time_range_2x * norm_val * norm_val) + min_attack_tim
  57:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
  58:VoiceEnvelope.h ****             curve = 0.5f;
  59:VoiceEnvelope.h ****         }
  60:VoiceEnvelope.h ****         attack_coefficient = 1.0f / attack_time;
  61:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
  62:VoiceEnvelope.h ****         SetAttackCurve(curve);
  63:VoiceEnvelope.h ****         SetReleaseCurve(curve);
  64:VoiceEnvelope.h ****     }
  65:VoiceEnvelope.h ****     
  66:VoiceEnvelope.h ****     // New methods for separate attack and release control
  67:VoiceEnvelope.h ****     void SetAttackTime(float value) {
  68:VoiceEnvelope.h ****         // Map 0-1 value to attack time (exponential scaling)
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 5


  69:VoiceEnvelope.h ****         // value³ for finer control at shorter settings
  70:VoiceEnvelope.h ****         float value_cubed = value * value * value;
  71:VoiceEnvelope.h ****         
  72:VoiceEnvelope.h ****         // Special handling for super punchy attacks at low values
  73:VoiceEnvelope.h ****         if (value < 0.1f) {
  74:VoiceEnvelope.h ****             // Extra fast attacks at the beginning of the range
  75:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(min_attack_time + 
  76:VoiceEnvelope.h ****                                            (min_attack_time * 9.0f * value / 0.1f));
  77:VoiceEnvelope.h ****         } else {
  78:VoiceEnvelope.h ****             // Normal range from 2ms to 4 seconds
  79:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(0.002f * time_range_2x/8.0f + 
  80:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
  81:VoiceEnvelope.h ****         }
  82:VoiceEnvelope.h ****         
  83:VoiceEnvelope.h ****         attack_coefficient = 1.0f / attack_time;
  84:VoiceEnvelope.h ****         
  85:VoiceEnvelope.h ****         // Make curve more exponential for faster attacks
  86:VoiceEnvelope.h ****         if (value < 0.3f) {
  87:VoiceEnvelope.h ****             // More exponential curve for punchy attacks
  88:VoiceEnvelope.h ****             SetAttackCurve(0.7f + (0.3f - value)); // 0.7 to 1.0 range for punchier curve
  89:VoiceEnvelope.h ****         } else {
  90:VoiceEnvelope.h ****             // Normal curve
  91:VoiceEnvelope.h ****             SetAttackCurve(0.5f);
  92:VoiceEnvelope.h ****         }
  93:VoiceEnvelope.h ****     }
  94:VoiceEnvelope.h ****     
  95:VoiceEnvelope.h ****     void SetReleaseTime(float value) {
  96:VoiceEnvelope.h ****         // Map 0-1 value to release time (exponential scaling)
  97:VoiceEnvelope.h ****         // value³ for finer control at shorter settings
  98:VoiceEnvelope.h ****         float value_cubed = value * value * value;
  99:VoiceEnvelope.h ****         
 100:VoiceEnvelope.h ****         // Release time ranges from min_decay_time_b to 8 seconds
 101:VoiceEnvelope.h ****         decay_time = static_cast<size_t>(min_decay_time_b + 
 102:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 103:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
 104:VoiceEnvelope.h ****         
 105:VoiceEnvelope.h ****         // Use consistent release curve regardless of release time
 106:VoiceEnvelope.h ****         SetReleaseCurve(0.5f);
 107:VoiceEnvelope.h ****     }
 108:VoiceEnvelope.h ****     
 109:VoiceEnvelope.h ****     void SetAttackCurve(float value) {
 110:VoiceEnvelope.h ****         float cu = value - 0.5f;
 111:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
 112:VoiceEnvelope.h ****     }
 113:VoiceEnvelope.h ****     
 114:VoiceEnvelope.h ****     void SetReleaseCurve(float value) {
 115:VoiceEnvelope.h ****         float cu = value - 0.5f;
 116:VoiceEnvelope.h ****         release_curve_coefficient = 128.0f * cu * cu;
 117:VoiceEnvelope.h ****     }
 118:VoiceEnvelope.h **** 
 119:VoiceEnvelope.h ****     void Trigger() {
  86              		.loc 3 119 10 is_stmt 1 view -0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              		@ link register save eliminated.
 120:VoiceEnvelope.h ****         switch (current_state) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 6


  91              		.loc 3 120 9 view .LVU15
  92              		.loc 3 120 17 is_stmt 0 view .LVU16
  93 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
  94              		.loc 3 120 9 view .LVU17
  95 0002 13B1     		cbz	r3, .L7
  96 0004 032B     		cmp	r3, #3
  97 0006 04D0     		beq	.L8
  98 0008 7047     		bx	lr
  99              	.L7:
 121:VoiceEnvelope.h ****             case ENV_IDLE:
 100              		.loc 3 121 13 is_stmt 1 view .LVU18
 122:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 101              		.loc 3 122 17 view .LVU19
 102              		.loc 3 122 31 is_stmt 0 view .LVU20
 103 000a 0122     		movs	r2, #1
 123:VoiceEnvelope.h ****                 phase = 0;
 104              		.loc 3 123 23 view .LVU21
 105 000c C363     		str	r3, [r0, #60]
 122:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 106              		.loc 3 122 31 view .LVU22
 107 000e 0270     		strb	r2, [r0]
 108              		.loc 3 123 17 is_stmt 1 view .LVU23
 124:VoiceEnvelope.h ****                 break;
 109              		.loc 3 124 17 view .LVU24
 110 0010 7047     		bx	lr
 111              	.L8:
 112              	.LVL5:
 113              	.LBB1078:
 114              	.LBI1078:
 119:VoiceEnvelope.h ****         switch (current_state) {
 115              		.loc 3 119 10 view .LVU25
 116              	.LBB1079:
 125:VoiceEnvelope.h ****             case ENV_DECAY:
 117              		.loc 3 125 13 view .LVU26
 126:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 118              		.loc 3 126 17 view .LVU27
 119              	.LBB1080:
 120              	.LBB1081:
 127:VoiceEnvelope.h ****                 phase = CalculateAttackPhase(current_value);
 128:VoiceEnvelope.h ****                 break;
 129:VoiceEnvelope.h ****             default:
 130:VoiceEnvelope.h ****                 break;
 131:VoiceEnvelope.h ****         }
 132:VoiceEnvelope.h ****     }
 133:VoiceEnvelope.h **** 
 134:VoiceEnvelope.h ****     void Release() {
 135:VoiceEnvelope.h ****         switch (current_state) {
 136:VoiceEnvelope.h ****             case ENV_ATTACK:
 137:VoiceEnvelope.h ****                 // Preserve the attack curve character when transitioning to release
 138:VoiceEnvelope.h ****                 // This decouples release time from affecting attack punchiness
 139:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(static_cast<float>(phase) * attack_coeffic
 140:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 141:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 142:VoiceEnvelope.h ****                 break;
 143:VoiceEnvelope.h ****             case ENV_SUSTAIN:
 144:VoiceEnvelope.h ****                 phase = 0;
 145:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 7


 146:VoiceEnvelope.h ****                 break;
 147:VoiceEnvelope.h ****             default:
 148:VoiceEnvelope.h ****                 break;
 149:VoiceEnvelope.h ****         }
 150:VoiceEnvelope.h ****     }
 151:VoiceEnvelope.h **** 
 152:VoiceEnvelope.h ****     float Process() {
 153:VoiceEnvelope.h ****         float ph;
 154:VoiceEnvelope.h ****         switch (current_state) {
 155:VoiceEnvelope.h ****             case ENV_IDLE:
 156:VoiceEnvelope.h ****                 current_value = 0.0f;
 157:VoiceEnvelope.h ****                 break;
 158:VoiceEnvelope.h **** 
 159:VoiceEnvelope.h ****             case ENV_ATTACK:
 160:VoiceEnvelope.h ****                 ph = static_cast<float>(phase) * attack_coefficient;
 161:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 162:VoiceEnvelope.h ****                 if (phase >= attack_time) {
 163:VoiceEnvelope.h ****                     current_state = (mode == MODE_AR) ? ENV_DECAY : ENV_SUSTAIN;
 164:VoiceEnvelope.h ****                     phase = 0;
 165:VoiceEnvelope.h ****                 } else {
 166:VoiceEnvelope.h ****                     phase++;
 167:VoiceEnvelope.h ****                 }
 168:VoiceEnvelope.h ****                 break;
 169:VoiceEnvelope.h **** 
 170:VoiceEnvelope.h ****             case ENV_SUSTAIN:
 171:VoiceEnvelope.h ****                 current_value = 1.0f;
 172:VoiceEnvelope.h ****                 break;
 173:VoiceEnvelope.h **** 
 174:VoiceEnvelope.h ****             case ENV_DECAY:
 175:VoiceEnvelope.h ****                 // Use current_value as starting point for decay
 176:VoiceEnvelope.h ****                 // This preserves the correct level from attack phase
 177:VoiceEnvelope.h ****                 ph = static_cast<float>(phase) * decay_coefficient;
 178:VoiceEnvelope.h ****                 if (phase == 0) {
 179:VoiceEnvelope.h ****                     // On first frame, use current value
 180:VoiceEnvelope.h ****                     decay_start_level = current_value;
 181:VoiceEnvelope.h ****                 }
 182:VoiceEnvelope.h ****                 current_value = decay_start_level * (1.0f - ph) / (1.0f + release_curve_coefficient
 183:VoiceEnvelope.h ****                 
 184:VoiceEnvelope.h ****                 if (phase >= decay_time) {
 185:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 186:VoiceEnvelope.h ****                     phase = 0;
 187:VoiceEnvelope.h ****                 } else {
 188:VoiceEnvelope.h ****                     phase++;
 189:VoiceEnvelope.h ****                 }
 190:VoiceEnvelope.h ****                 break;
 191:VoiceEnvelope.h **** 
 192:VoiceEnvelope.h ****             case ENV_RESET:
 193:VoiceEnvelope.h ****                 current_value = reset_target - static_cast<float>(phase) * reset_coefficient;
 194:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 195:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 196:VoiceEnvelope.h ****                     phase = 0;
 197:VoiceEnvelope.h ****                 } else {
 198:VoiceEnvelope.h ****                     phase++;
 199:VoiceEnvelope.h ****                 }
 200:VoiceEnvelope.h ****                 break;
 201:VoiceEnvelope.h ****         }
 202:VoiceEnvelope.h ****         return std::min(std::max(current_value, 0.0f), 1.0f);
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 8


 203:VoiceEnvelope.h ****     }
 204:VoiceEnvelope.h **** 
 205:VoiceEnvelope.h ****     void Reset() {
 206:VoiceEnvelope.h ****         if (current_state == ENV_IDLE) return;
 207:VoiceEnvelope.h ****         current_state = ENV_RESET;
 208:VoiceEnvelope.h ****         reset_target = current_value;
 209:VoiceEnvelope.h ****         phase = 0;
 210:VoiceEnvelope.h ****     }
 211:VoiceEnvelope.h **** 
 212:VoiceEnvelope.h ****     bool IsActive() const {
 213:VoiceEnvelope.h ****         return current_state != ENV_IDLE;
 214:VoiceEnvelope.h ****     }
 215:VoiceEnvelope.h **** 
 216:VoiceEnvelope.h **** private:
 217:VoiceEnvelope.h ****     float CalculateAttackAmplitude(float ph) {
 218:VoiceEnvelope.h ****         return ph / (1.0f + attack_curve_coefficient * (1.0f - ph));
 219:VoiceEnvelope.h ****     }
 220:VoiceEnvelope.h **** 
 221:VoiceEnvelope.h ****     float CalculateDecayAmplitude(float ph) {
 222:VoiceEnvelope.h ****         return (1.0f - ph) / (1.0f + release_curve_coefficient * ph);
 223:VoiceEnvelope.h ****     }
 224:VoiceEnvelope.h **** 
 225:VoiceEnvelope.h ****     size_t CalculateAttackPhase(float amp) {
 226:VoiceEnvelope.h ****         return static_cast<size_t>(roundf(attack_time * amp * (1.0f + attack_curve_coefficient) / (
 121              		.loc 3 226 69 is_stmt 0 view .LVU28
 122 0012 B7EE007A 		vmov.f32	s14, #1.0e+0
 123              	.LBE1081:
 124              	.LBE1080:
 127:VoiceEnvelope.h ****                 phase = CalculateAttackPhase(current_value);
 125              		.loc 3 127 45 view .LVU29
 126 0016 D0ED015A 		vldr.32	s11, [r0, #4]
 127              	.LBB1085:
 128              	.LBB1082:
 129              		.loc 3 226 71 view .LVU30
 130 001a 90ED026A 		vldr.32	s12, [r0, #8]
 131              	.LBE1082:
 132              	.LBE1085:
 126:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 133              		.loc 3 126 31 view .LVU31
 134 001e 0123     		movs	r3, #1
 135              	.LBB1086:
 136              	.LBB1083:
 137              		.loc 3 226 55 view .LVU32
 138 0020 D0ED0D7A 		vldr.32	s15, [r0, #52]	@ int
 139              		.loc 3 226 69 view .LVU33
 140 0024 76EE076A 		vadd.f32	s13, s12, s14
 141              	.LBE1083:
 142              	.LBE1086:
 126:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 143              		.loc 3 126 31 view .LVU34
 144 0028 0370     		strb	r3, [r0]
 127:VoiceEnvelope.h ****                 phase = CalculateAttackPhase(current_value);
 145              		.loc 3 127 17 is_stmt 1 view .LVU35
 146              	.LVL6:
 147              	.LBB1087:
 148              	.LBI1080:
 225:VoiceEnvelope.h ****         return static_cast<size_t>(roundf(attack_time * amp * (1.0f + attack_curve_coefficient) / (
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 9


 149              		.loc 3 225 12 view .LVU36
 150              	.LBB1084:
 151              		.loc 3 226 9 view .LVU37
 152              		.loc 3 226 105 is_stmt 0 view .LVU38
 153 002a A5EE867A 		vfma.f32	s14, s11, s12
 154              		.loc 3 226 55 view .LVU39
 155 002e F8EE677A 		vcvt.f32.u32	s15, s15
 156 0032 67EEA57A 		vmul.f32	s15, s15, s11
 157              		.loc 3 226 61 view .LVU40
 158 0036 67EEA67A 		vmul.f32	s15, s15, s13
 159              		.loc 3 226 105 view .LVU41
 160 003a F0EE476A 		vmov.f32	s13, s14
 161              		.loc 3 226 42 view .LVU42
 162 003e 87EEA67A 		vdiv.f32	s14, s15, s13
 163 0042 F8FE477A 		vrinta.f32	s15, s14
 164              	.LVL7:
 165              		.loc 3 226 139 view .LVU43
 166 0046 FCEEE77A 		vcvt.u32.f32	s15, s15
 167 004a C0ED0F7A 		vstr.32	s15, [r0, #60]	@ int
 168              	.LBE1084:
 169              	.LBE1087:
 128:VoiceEnvelope.h ****             default:
 170              		.loc 3 128 17 is_stmt 1 view .LVU44
 171              	.LVL8:
 128:VoiceEnvelope.h ****             default:
 172              		.loc 3 128 17 is_stmt 0 view .LVU45
 173              	.LBE1079:
 174              	.LBE1078:
 132:VoiceEnvelope.h **** 
 175              		.loc 3 132 5 view .LVU46
 176 004e 7047     		bx	lr
 177              		.cfi_endproc
 178              	.LFE5040:
 180              		.section	.text._ZN13VoiceEnvelope7ReleaseEv,"axG",%progbits,_ZN13VoiceEnvelope7ReleaseEv,comdat
 181              		.align	1
 182              		.weak	_ZN13VoiceEnvelope7ReleaseEv
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 187              	_ZN13VoiceEnvelope7ReleaseEv:
 188              	.LVL9:
 189              	.LFB5041:
 134:VoiceEnvelope.h ****         switch (current_state) {
 190              		.loc 3 134 10 is_stmt 1 view -0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              		@ link register save eliminated.
 135:VoiceEnvelope.h ****             case ENV_ATTACK:
 195              		.loc 3 135 9 view .LVU48
 135:VoiceEnvelope.h ****             case ENV_ATTACK:
 196              		.loc 3 135 17 is_stmt 0 view .LVU49
 197 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 135:VoiceEnvelope.h ****             case ENV_ATTACK:
 198              		.loc 3 135 9 view .LVU50
 199 0002 012B     		cmp	r3, #1
 200 0004 02D0     		beq	.L11
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 10


 201 0006 022B     		cmp	r3, #2
 202 0008 14D0     		beq	.L12
 203 000a 7047     		bx	lr
 204              	.L11:
 205              	.LVL10:
 206              	.LBB1092:
 207              	.LBI1092:
 134:VoiceEnvelope.h ****         switch (current_state) {
 208              		.loc 3 134 10 is_stmt 1 view .LVU51
 209              	.LBB1093:
 136:VoiceEnvelope.h ****                 // Preserve the attack curve character when transitioning to release
 210              		.loc 3 136 13 view .LVU52
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 211              		.loc 3 139 17 view .LVU53
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 212              		.loc 3 139 58 is_stmt 0 view .LVU54
 213 000c D0ED0F7A 		vldr.32	s15, [r0, #60]	@ int
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 214              		.loc 3 139 57 view .LVU55
 215 0010 90ED0B7A 		vldr.32	s14, [r0, #44]
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 216              		.loc 3 139 58 view .LVU56
 217 0014 F8EE677A 		vcvt.f32.u32	s15, s15
 218              	.LBB1094:
 219              	.LBB1095:
 218:VoiceEnvelope.h ****     }
 220              		.loc 3 218 27 view .LVU57
 221 0018 90ED026A 		vldr.32	s12, [r0, #8]
 222              	.LBE1095:
 223              	.LBE1094:
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 224              		.loc 3 139 57 view .LVU58
 225 001c 67EE877A 		vmul.f32	s15, s15, s14
 226              	.LVL11:
 227              	.LBB1097:
 228              	.LBI1094:
 217:VoiceEnvelope.h ****         return ph / (1.0f + attack_curve_coefficient * (1.0f - ph));
 229              		.loc 3 217 11 is_stmt 1 view .LVU59
 230              	.LBB1096:
 218:VoiceEnvelope.h ****     }
 231              		.loc 3 218 9 view .LVU60
 218:VoiceEnvelope.h ****     }
 232              		.loc 3 218 62 is_stmt 0 view .LVU61
 233 0020 B7EE007A 		vmov.f32	s14, #1.0e+0
 234 0024 77EE676A 		vsub.f32	s13, s14, s15
 218:VoiceEnvelope.h ****     }
 235              		.loc 3 218 27 view .LVU62
 236 0028 A6EE267A 		vfma.f32	s14, s12, s13
 237              	.LVL12:
 218:VoiceEnvelope.h ****     }
 238              		.loc 3 218 67 view .LVU63
 239 002c C7EE876A 		vdiv.f32	s13, s15, s14
 240              	.LBE1096:
 241              	.LBE1097:
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 242              		.loc 3 139 31 view .LVU64
 243 0030 C0ED016A 		vstr.32	s13, [r0, #4]
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 11


 140:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 244              		.loc 3 140 17 is_stmt 1 view .LVU65
 245              	.LVL13:
 246              	.L12:
 140:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 247              		.loc 3 140 17 is_stmt 0 view .LVU66
 248              	.LBE1093:
 249              	.LBE1092:
 143:VoiceEnvelope.h ****                 phase = 0;
 250              		.loc 3 143 13 is_stmt 1 view .LVU67
 144:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 251              		.loc 3 144 17 view .LVU68
 144:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 252              		.loc 3 144 23 is_stmt 0 view .LVU69
 253 0034 0023     		movs	r3, #0
 254 0036 C363     		str	r3, [r0, #60]
 145:VoiceEnvelope.h ****                 break;
 255              		.loc 3 145 17 is_stmt 1 view .LVU70
 145:VoiceEnvelope.h ****                 break;
 256              		.loc 3 145 31 is_stmt 0 view .LVU71
 257 0038 0323     		movs	r3, #3
 258 003a 0370     		strb	r3, [r0]
 146:VoiceEnvelope.h ****             default:
 259              		.loc 3 146 17 is_stmt 1 view .LVU72
 150:VoiceEnvelope.h **** 
 260              		.loc 3 150 5 is_stmt 0 view .LVU73
 261 003c 7047     		bx	lr
 262              		.cfi_endproc
 263              	.LFE5041:
 265              		.section	.text._ZN13VoiceEnvelope5ResetEv,"axG",%progbits,_ZN13VoiceEnvelope5ResetEv,comdat
 266              		.align	1
 267              		.weak	_ZN13VoiceEnvelope5ResetEv
 268              		.syntax unified
 269              		.thumb
 270              		.thumb_func
 272              	_ZN13VoiceEnvelope5ResetEv:
 273              	.LVL14:
 274              	.LFB5043:
 205:VoiceEnvelope.h ****         if (current_state == ENV_IDLE) return;
 275              		.loc 3 205 10 is_stmt 1 view -0
 276              		.cfi_startproc
 277              		@ args = 0, pretend = 0, frame = 0
 278              		@ frame_needed = 0, uses_anonymous_args = 0
 279              		@ link register save eliminated.
 206:VoiceEnvelope.h ****         current_state = ENV_RESET;
 280              		.loc 3 206 9 view .LVU75
 281 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 282 0002 2BB1     		cbz	r3, .L14
 283              	.LVL15:
 284              	.LBB1100:
 285              	.LBI1100:
 205:VoiceEnvelope.h ****         if (current_state == ENV_IDLE) return;
 286              		.loc 3 205 10 view .LVU76
 287              	.LBB1101:
 207:VoiceEnvelope.h ****         reset_target = current_value;
 288              		.loc 3 207 9 view .LVU77
 207:VoiceEnvelope.h ****         reset_target = current_value;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 12


 289              		.loc 3 207 23 is_stmt 0 view .LVU78
 290 0004 0423     		movs	r3, #4
 291 0006 0370     		strb	r3, [r0]
 208:VoiceEnvelope.h ****         phase = 0;
 292              		.loc 3 208 9 is_stmt 1 view .LVU79
 208:VoiceEnvelope.h ****         phase = 0;
 293              		.loc 3 208 22 is_stmt 0 view .LVU80
 294 0008 4368     		ldr	r3, [r0, #4]	@ float
 295 000a 8362     		str	r3, [r0, #40]	@ float
 209:VoiceEnvelope.h ****     }
 296              		.loc 3 209 9 is_stmt 1 view .LVU81
 209:VoiceEnvelope.h ****     }
 297              		.loc 3 209 15 is_stmt 0 view .LVU82
 298 000c 0023     		movs	r3, #0
 299 000e C363     		str	r3, [r0, #60]
 300              	.LVL16:
 301              	.L14:
 209:VoiceEnvelope.h ****     }
 302              		.loc 3 209 15 view .LVU83
 303              	.LBE1101:
 304              	.LBE1100:
 210:VoiceEnvelope.h **** 
 305              		.loc 3 210 5 view .LVU84
 306 0010 7047     		bx	lr
 307              		.cfi_endproc
 308              	.LFE5043:
 310              		.section	.text._ZN15PolyphonyEngineC2Ev,"ax",%progbits
 311              		.align	1
 312              		.global	_ZN15PolyphonyEngineC2Ev
 313              		.syntax unified
 314              		.thumb
 315              		.thumb_func
 317              	_ZN15PolyphonyEngineC2Ev:
 318              	.LVL17:
 319              	.LFB5346:
  20:Polyphony.cpp ****     // Constructor: Initialize arrays to zero or default states if necessary.
 320              		.loc 1 20 1 is_stmt 1 view -0
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 0
 323              		@ frame_needed = 0, uses_anonymous_args = 0
 324              	.LBB1296:
  20:Polyphony.cpp ****     // Constructor: Initialize arrays to zero or default states if necessary.
 325              		.loc 1 20 103 view .LVU86
 326              	.LBE1296:
  20:Polyphony.cpp ****     // Constructor: Initialize arrays to zero or default states if necessary.
 327              		.loc 1 20 1 is_stmt 0 view .LVU87
 328 0000 38B5     		push	{r3, r4, r5, lr}
 329              		.cfi_def_cfa_offset 16
 330              		.cfi_offset 3, -16
 331              		.cfi_offset 4, -12
 332              		.cfi_offset 5, -8
 333              		.cfi_offset 14, -4
 334 0002 00F55B52 		add	r2, r0, #14016
  20:Polyphony.cpp ****     // Constructor: Initialize arrays to zero or default states if necessary.
 335              		.loc 1 20 1 view .LVU88
 336 0006 0446     		mov	r4, r0
 337 0008 0346     		mov	r3, r0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 13


 338              	.L20:
 339              	.LVL18:
 340              	.LBB1406:
 341              	.LBB1297:
 342              	.LBI1297:
 343              		.file 4 "eurorack/plaits/dsp/voice.h"
   1:eurorack/plaits/dsp/voice.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/voice.h **** //
   3:eurorack/plaits/dsp/voice.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/voice.h **** //
   5:eurorack/plaits/dsp/voice.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/voice.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/voice.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/voice.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/voice.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/voice.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/voice.h **** // 
  12:eurorack/plaits/dsp/voice.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/voice.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/voice.h **** // 
  15:eurorack/plaits/dsp/voice.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/voice.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/voice.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/voice.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/voice.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/voice.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/voice.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/voice.h **** // 
  23:eurorack/plaits/dsp/voice.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/voice.h **** //
  25:eurorack/plaits/dsp/voice.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/voice.h **** //
  27:eurorack/plaits/dsp/voice.h **** // Main synthesis voice.
  28:eurorack/plaits/dsp/voice.h **** 
  29:eurorack/plaits/dsp/voice.h **** #ifndef PLAITS_DSP_VOICE_H_
  30:eurorack/plaits/dsp/voice.h **** #define PLAITS_DSP_VOICE_H_
  31:eurorack/plaits/dsp/voice.h **** 
  32:eurorack/plaits/dsp/voice.h **** #include "stmlib/stmlib.h"
  33:eurorack/plaits/dsp/voice.h **** 
  34:eurorack/plaits/dsp/voice.h **** #include "stmlib/dsp/filter.h"
  35:eurorack/plaits/dsp/voice.h **** #include "stmlib/dsp/limiter.h"
  36:eurorack/plaits/dsp/voice.h **** #include "stmlib/utils/buffer_allocator.h"
  37:eurorack/plaits/dsp/voice.h **** 
  38:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/additive_engine.h"
  39:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/bass_drum_engine.h"
  40:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/chord_engine.h"
  41:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/engine.h"
  42:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/fm_engine.h"
  43:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/grain_engine.h"
  44:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/hi_hat_engine.h"
  45:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/modal_engine.h"
  46:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/noise_engine.h"
  47:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/particle_engine.h"
  48:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/snare_drum_engine.h"
  49:eurorack/plaits/dsp/voice.h **** // #include "plaits/dsp/engine/speech_engine.h"
  50:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/string_engine.h"
  51:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/swarm_engine.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 14


  52:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/virtual_analog_engine.h"
  53:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/waveshaping_engine.h"
  54:eurorack/plaits/dsp/voice.h **** // #include "plaits/dsp/engine/wavetable_engine.h"
  55:eurorack/plaits/dsp/voice.h **** 
  56:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/envelope.h"
  57:eurorack/plaits/dsp/voice.h **** 
  58:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/fx/low_pass_gate.h"
  59:eurorack/plaits/dsp/voice.h **** 
  60:eurorack/plaits/dsp/voice.h **** namespace plaits {
  61:eurorack/plaits/dsp/voice.h **** 
  62:eurorack/plaits/dsp/voice.h **** const int kMaxEngines = 16;
  63:eurorack/plaits/dsp/voice.h **** const int kMaxTriggerDelay = 8;
  64:eurorack/plaits/dsp/voice.h **** const int kTriggerDelay = 5;
  65:eurorack/plaits/dsp/voice.h **** 
  66:eurorack/plaits/dsp/voice.h **** class ChannelPostProcessor {
  67:eurorack/plaits/dsp/voice.h ****  public:
  68:eurorack/plaits/dsp/voice.h ****   ChannelPostProcessor() { }
  69:eurorack/plaits/dsp/voice.h ****   ~ChannelPostProcessor() { }
  70:eurorack/plaits/dsp/voice.h ****   
  71:eurorack/plaits/dsp/voice.h ****   void Init() {
  72:eurorack/plaits/dsp/voice.h ****     lpg_.Init();
  73:eurorack/plaits/dsp/voice.h ****     Reset();
  74:eurorack/plaits/dsp/voice.h ****   }
  75:eurorack/plaits/dsp/voice.h ****   
  76:eurorack/plaits/dsp/voice.h ****   void Reset() {
  77:eurorack/plaits/dsp/voice.h ****     limiter_.Init();
  78:eurorack/plaits/dsp/voice.h ****   }
  79:eurorack/plaits/dsp/voice.h ****   
  80:eurorack/plaits/dsp/voice.h ****   void Process(
  81:eurorack/plaits/dsp/voice.h ****       float gain,
  82:eurorack/plaits/dsp/voice.h ****       bool bypass_lpg,
  83:eurorack/plaits/dsp/voice.h ****       float low_pass_gate_gain,
  84:eurorack/plaits/dsp/voice.h ****       float low_pass_gate_frequency,
  85:eurorack/plaits/dsp/voice.h ****       float low_pass_gate_hf_bleed,
  86:eurorack/plaits/dsp/voice.h ****       float* in,
  87:eurorack/plaits/dsp/voice.h ****       short* out,
  88:eurorack/plaits/dsp/voice.h ****       size_t size,
  89:eurorack/plaits/dsp/voice.h ****       size_t stride) {
  90:eurorack/plaits/dsp/voice.h ****     if (gain < 0.0f) {
  91:eurorack/plaits/dsp/voice.h ****       limiter_.Process(-gain, in, size);
  92:eurorack/plaits/dsp/voice.h ****     }
  93:eurorack/plaits/dsp/voice.h ****     const float post_gain = (gain < 0.0f ? 1.0f : gain) * -32767.0f;
  94:eurorack/plaits/dsp/voice.h ****     if (!bypass_lpg) {
  95:eurorack/plaits/dsp/voice.h ****       lpg_.Process(
  96:eurorack/plaits/dsp/voice.h ****           post_gain * low_pass_gate_gain,
  97:eurorack/plaits/dsp/voice.h ****           low_pass_gate_frequency,
  98:eurorack/plaits/dsp/voice.h ****           low_pass_gate_hf_bleed,
  99:eurorack/plaits/dsp/voice.h ****           in,
 100:eurorack/plaits/dsp/voice.h ****           out,
 101:eurorack/plaits/dsp/voice.h ****           size,
 102:eurorack/plaits/dsp/voice.h ****           stride);
 103:eurorack/plaits/dsp/voice.h ****     } else {
 104:eurorack/plaits/dsp/voice.h ****       while (size--) {
 105:eurorack/plaits/dsp/voice.h ****         *out = stmlib::Clip16(1 + static_cast<int32_t>(*in++ * post_gain));
 106:eurorack/plaits/dsp/voice.h ****         out += stride;
 107:eurorack/plaits/dsp/voice.h ****       }
 108:eurorack/plaits/dsp/voice.h ****     }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 15


 109:eurorack/plaits/dsp/voice.h ****   }
 110:eurorack/plaits/dsp/voice.h ****   
 111:eurorack/plaits/dsp/voice.h ****  private:
 112:eurorack/plaits/dsp/voice.h ****   stmlib::Limiter limiter_;
 113:eurorack/plaits/dsp/voice.h ****   LowPassGate lpg_;
 114:eurorack/plaits/dsp/voice.h ****   
 115:eurorack/plaits/dsp/voice.h ****   DISALLOW_COPY_AND_ASSIGN(ChannelPostProcessor);
 116:eurorack/plaits/dsp/voice.h **** };
 117:eurorack/plaits/dsp/voice.h **** 
 118:eurorack/plaits/dsp/voice.h **** struct Patch {
 119:eurorack/plaits/dsp/voice.h ****   float note;
 120:eurorack/plaits/dsp/voice.h ****   float harmonics;
 121:eurorack/plaits/dsp/voice.h ****   float timbre;
 122:eurorack/plaits/dsp/voice.h ****   float morph;
 123:eurorack/plaits/dsp/voice.h ****   float frequency_modulation_amount;
 124:eurorack/plaits/dsp/voice.h ****   float timbre_modulation_amount;
 125:eurorack/plaits/dsp/voice.h ****   float morph_modulation_amount;
 126:eurorack/plaits/dsp/voice.h **** 
 127:eurorack/plaits/dsp/voice.h ****   int engine;
 128:eurorack/plaits/dsp/voice.h ****   float decay;
 129:eurorack/plaits/dsp/voice.h ****   float lpg_colour;
 130:eurorack/plaits/dsp/voice.h **** };
 131:eurorack/plaits/dsp/voice.h **** 
 132:eurorack/plaits/dsp/voice.h **** struct Modulations {
 133:eurorack/plaits/dsp/voice.h ****   float engine;
 134:eurorack/plaits/dsp/voice.h ****   float note;
 135:eurorack/plaits/dsp/voice.h ****   float frequency;
 136:eurorack/plaits/dsp/voice.h ****   float harmonics;
 137:eurorack/plaits/dsp/voice.h ****   float timbre;
 138:eurorack/plaits/dsp/voice.h ****   float morph;
 139:eurorack/plaits/dsp/voice.h ****   float trigger;
 140:eurorack/plaits/dsp/voice.h ****   float level;
 141:eurorack/plaits/dsp/voice.h **** 
 142:eurorack/plaits/dsp/voice.h ****   bool frequency_patched;
 143:eurorack/plaits/dsp/voice.h ****   bool timbre_patched;
 144:eurorack/plaits/dsp/voice.h ****   bool morph_patched;
 145:eurorack/plaits/dsp/voice.h ****   bool trigger_patched;
 146:eurorack/plaits/dsp/voice.h ****   bool level_patched;
 147:eurorack/plaits/dsp/voice.h **** };
 148:eurorack/plaits/dsp/voice.h **** 
 149:eurorack/plaits/dsp/voice.h **** class Voice {
 150:eurorack/plaits/dsp/voice.h ****  public:
 151:eurorack/plaits/dsp/voice.h ****   Voice() { }
 344              		.loc 4 151 3 is_stmt 1 view .LVU89
 345              	.LBB1298:
 346              	.LBI1298:
 347              		.file 5 "eurorack/plaits/dsp/engine/additive_engine.h"
   1:eurorack/plaits/dsp/engine/additive_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/additive_engine.h **** //
   3:eurorack/plaits/dsp/engine/additive_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/additive_engine.h **** //
   5:eurorack/plaits/dsp/engine/additive_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/additive_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/additive_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/additive_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/additive_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/additive_engine.h **** // furnished to do so, subject to the following conditions:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 16


  11:eurorack/plaits/dsp/engine/additive_engine.h **** // 
  12:eurorack/plaits/dsp/engine/additive_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/additive_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/additive_engine.h **** // 
  15:eurorack/plaits/dsp/engine/additive_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/additive_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/additive_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/additive_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/additive_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/additive_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/additive_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/additive_engine.h **** // 
  23:eurorack/plaits/dsp/engine/additive_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/additive_engine.h **** //
  25:eurorack/plaits/dsp/engine/additive_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/additive_engine.h **** //
  27:eurorack/plaits/dsp/engine/additive_engine.h **** // Additive synthesis with 24+8 partials.
  28:eurorack/plaits/dsp/engine/additive_engine.h **** 
  29:eurorack/plaits/dsp/engine/additive_engine.h **** #ifndef PLAITS_DSP_ENGINE_ADDITIVE_ENGINE_H_
  30:eurorack/plaits/dsp/engine/additive_engine.h **** #define PLAITS_DSP_ENGINE_ADDITIVE_ENGINE_H_
  31:eurorack/plaits/dsp/engine/additive_engine.h **** 
  32:eurorack/plaits/dsp/engine/additive_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/additive_engine.h **** #include "plaits/dsp/oscillator/harmonic_oscillator.h"
  34:eurorack/plaits/dsp/engine/additive_engine.h **** 
  35:eurorack/plaits/dsp/engine/additive_engine.h **** namespace plaits {
  36:eurorack/plaits/dsp/engine/additive_engine.h ****   
  37:eurorack/plaits/dsp/engine/additive_engine.h **** const int kHarmonicBatchSize = 12;
  38:eurorack/plaits/dsp/engine/additive_engine.h **** const int kNumHarmonics = 36;
  39:eurorack/plaits/dsp/engine/additive_engine.h **** const int kNumHarmonicOscillators = kNumHarmonics / kHarmonicBatchSize;
  40:eurorack/plaits/dsp/engine/additive_engine.h **** 
  41:eurorack/plaits/dsp/engine/additive_engine.h **** class AdditiveEngine : public Engine {
  42:eurorack/plaits/dsp/engine/additive_engine.h ****  public:
  43:eurorack/plaits/dsp/engine/additive_engine.h ****   AdditiveEngine() { }
 348              		.loc 5 43 3 view .LVU90
 349              	.LBB1299:
 350              	.LBB1300:
 351              	.LBI1300:
 352              		.file 6 "eurorack/plaits/dsp/engine/engine.h"
   1:eurorack/plaits/dsp/engine/engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/engine.h **** //
   3:eurorack/plaits/dsp/engine/engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/engine.h **** //
   5:eurorack/plaits/dsp/engine/engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/engine.h **** // 
  12:eurorack/plaits/dsp/engine/engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/engine.h **** // 
  15:eurorack/plaits/dsp/engine/engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 17


  20:eurorack/plaits/dsp/engine/engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/engine.h **** // 
  23:eurorack/plaits/dsp/engine/engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/engine.h **** //
  25:eurorack/plaits/dsp/engine/engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/engine.h **** //
  27:eurorack/plaits/dsp/engine/engine.h **** // Base class for all engines.
  28:eurorack/plaits/dsp/engine/engine.h **** 
  29:eurorack/plaits/dsp/engine/engine.h **** #ifndef PLAITS_DSP_ENGINE_ENGINE_H_
  30:eurorack/plaits/dsp/engine/engine.h **** #define PLAITS_DSP_ENGINE_ENGINE_H_
  31:eurorack/plaits/dsp/engine/engine.h **** 
  32:eurorack/plaits/dsp/engine/engine.h **** #include "plaits/dsp/dsp.h"
  33:eurorack/plaits/dsp/engine/engine.h **** 
  34:eurorack/plaits/dsp/engine/engine.h **** #include "stmlib/dsp/units.h"
  35:eurorack/plaits/dsp/engine/engine.h **** #include "stmlib/utils/buffer_allocator.h"
  36:eurorack/plaits/dsp/engine/engine.h **** 
  37:eurorack/plaits/dsp/engine/engine.h **** namespace plaits {
  38:eurorack/plaits/dsp/engine/engine.h **** 
  39:eurorack/plaits/dsp/engine/engine.h **** inline float NoteToFrequency(float midi_note) {
  40:eurorack/plaits/dsp/engine/engine.h ****   midi_note -= 9.0f;
  41:eurorack/plaits/dsp/engine/engine.h ****   CONSTRAIN(midi_note, -128.0f, 127.0f);
  42:eurorack/plaits/dsp/engine/engine.h ****   return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
  43:eurorack/plaits/dsp/engine/engine.h **** }
  44:eurorack/plaits/dsp/engine/engine.h **** 
  45:eurorack/plaits/dsp/engine/engine.h **** enum TriggerState {
  46:eurorack/plaits/dsp/engine/engine.h ****   TRIGGER_LOW = 0,
  47:eurorack/plaits/dsp/engine/engine.h ****   TRIGGER_RISING_EDGE = 1,
  48:eurorack/plaits/dsp/engine/engine.h ****   TRIGGER_UNPATCHED = 2,
  49:eurorack/plaits/dsp/engine/engine.h ****   TRIGGER_UNPATCHED_AUTOTRIGGED = 3,
  50:eurorack/plaits/dsp/engine/engine.h **** };
  51:eurorack/plaits/dsp/engine/engine.h **** 
  52:eurorack/plaits/dsp/engine/engine.h **** struct EngineParameters {
  53:eurorack/plaits/dsp/engine/engine.h ****   TriggerState trigger;
  54:eurorack/plaits/dsp/engine/engine.h ****   float note;
  55:eurorack/plaits/dsp/engine/engine.h ****   float timbre;
  56:eurorack/plaits/dsp/engine/engine.h ****   float morph;
  57:eurorack/plaits/dsp/engine/engine.h ****   float harmonics;
  58:eurorack/plaits/dsp/engine/engine.h ****   float accent;
  59:eurorack/plaits/dsp/engine/engine.h **** };
  60:eurorack/plaits/dsp/engine/engine.h **** 
  61:eurorack/plaits/dsp/engine/engine.h **** struct PostProcessingSettings {
  62:eurorack/plaits/dsp/engine/engine.h ****   // A negative value indicates that a limiter must be used.
  63:eurorack/plaits/dsp/engine/engine.h ****   float out_gain;
  64:eurorack/plaits/dsp/engine/engine.h ****   float aux_gain;
  65:eurorack/plaits/dsp/engine/engine.h ****   
  66:eurorack/plaits/dsp/engine/engine.h ****   // When this flag is set to true, the engine declares that it will 
  67:eurorack/plaits/dsp/engine/engine.h ****   // render a signal that already has an envelope (eg: modal drum, 808 kick).
  68:eurorack/plaits/dsp/engine/engine.h ****   // By reporting this information, the synthesis voice upstream will
  69:eurorack/plaits/dsp/engine/engine.h ****   // bypass the internal envelope/LPG.
  70:eurorack/plaits/dsp/engine/engine.h ****   //
  71:eurorack/plaits/dsp/engine/engine.h ****   // This parameter can be changed on a per-call basis when calling Render()
  72:eurorack/plaits/dsp/engine/engine.h ****   // This is used by the speech synthesis engine, which renders either
  73:eurorack/plaits/dsp/engine/engine.h ****   // a continuous vowel sound (which needs to be enveloped by the LPG)
  74:eurorack/plaits/dsp/engine/engine.h ****   // or a word/sentence (which is already enveloped).
  75:eurorack/plaits/dsp/engine/engine.h ****   bool already_enveloped;
  76:eurorack/plaits/dsp/engine/engine.h **** };
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 18


  77:eurorack/plaits/dsp/engine/engine.h **** 
  78:eurorack/plaits/dsp/engine/engine.h **** class Engine {
  79:eurorack/plaits/dsp/engine/engine.h ****  public:
  80:eurorack/plaits/dsp/engine/engine.h ****   Engine() { }
 353              		.loc 6 80 3 view .LVU91
 354              		.loc 6 80 3 is_stmt 0 view .LVU92
 355              	.LBE1300:
 356              		.loc 5 43 20 view .LVU93
 357 000a 3449     		ldr	r1, .L24
 358 000c 1960     		str	r1, [r3]
 359              		.loc 5 43 20 is_stmt 1 view .LVU94
 360              	.LVL19:
 361              		.loc 5 43 20 is_stmt 0 view .LVU95
 362              	.LBE1299:
 363              	.LBE1298:
 364              	.LBB1301:
 365              	.LBI1301:
 366              		.file 7 "eurorack/plaits/dsp/engine/bass_drum_engine.h"
   1:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/bass_drum_engine.h **** //
   3:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/bass_drum_engine.h **** //
   5:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // 
  12:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // 
  15:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // 
  23:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/bass_drum_engine.h **** //
  25:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/bass_drum_engine.h **** //
  27:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // 808 and synthetic bass drum generators.
  28:eurorack/plaits/dsp/engine/bass_drum_engine.h **** 
  29:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #ifndef PLAITS_DSP_ENGINE_BASS_DRUM_ENGINE_H_
  30:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #define PLAITS_DSP_ENGINE_BASS_DRUM_ENGINE_H_
  31:eurorack/plaits/dsp/engine/bass_drum_engine.h **** 
  32:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/drums/analog_bass_drum.h"
  33:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/drums/synthetic_bass_drum.h"
  34:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/fx/overdrive.h"
  36:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/fx/sample_rate_reducer.h"
  37:eurorack/plaits/dsp/engine/bass_drum_engine.h **** 
  38:eurorack/plaits/dsp/engine/bass_drum_engine.h **** namespace plaits {
  39:eurorack/plaits/dsp/engine/bass_drum_engine.h ****   
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 19


  40:eurorack/plaits/dsp/engine/bass_drum_engine.h **** class BassDrumEngine : public Engine {
  41:eurorack/plaits/dsp/engine/bass_drum_engine.h ****  public:
  42:eurorack/plaits/dsp/engine/bass_drum_engine.h ****   BassDrumEngine() { }
 367              		.loc 7 42 3 is_stmt 1 view .LVU96
 368              	.LBB1302:
 369              	.LBB1303:
 370              	.LBI1303:
 371              		.loc 6 80 3 view .LVU97
 372              		.loc 6 80 3 is_stmt 0 view .LVU98
 373              	.LBE1303:
 374              		.loc 7 42 20 view .LVU99
 375 000e 3449     		ldr	r1, .L24+4
 376 0010 C3F84811 		str	r1, [r3, #328]
 377              	.LVL20:
 378              	.LBB1304:
 379              	.LBI1304:
 380              		.file 8 "eurorack/plaits/dsp/drums/analog_bass_drum.h"
   1:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/analog_bass_drum.h **** //
   3:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/analog_bass_drum.h **** //
   5:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // 
  12:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // 
  15:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // 
  23:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/analog_bass_drum.h **** //
  25:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/analog_bass_drum.h **** //
  27:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // 808 bass drum model, revisited.
  28:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  29:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #ifndef PLAITS_DSP_DRUMS_ANALOG_BASS_DRUM_H_
  30:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #define PLAITS_DSP_DRUMS_ANALOG_BASS_DRUM_H_
  31:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  32:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include <algorithm>
  33:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  34:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "stmlib/dsp/filter.h"
  36:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "stmlib/dsp/parameter_interpolator.h"
  37:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "stmlib/dsp/units.h"
  38:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  39:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "plaits/dsp/dsp.h"
  40:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "plaits/dsp/oscillator/sine_oscillator.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 20


  41:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  42:eurorack/plaits/dsp/drums/analog_bass_drum.h **** namespace plaits {
  43:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  44:eurorack/plaits/dsp/drums/analog_bass_drum.h **** class AnalogBassDrum {
  45:eurorack/plaits/dsp/drums/analog_bass_drum.h ****  public:
  46:eurorack/plaits/dsp/drums/analog_bass_drum.h ****   AnalogBassDrum() { }
 381              		.loc 8 46 3 is_stmt 1 view .LVU100
 382              	.LBB1305:
 383              	.LBI1305:
 384              		.file 9 "eurorack/stmlib/dsp/filter.h"
   1:eurorack/stmlib/dsp/filter.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/stmlib/dsp/filter.h **** //
   3:eurorack/stmlib/dsp/filter.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/dsp/filter.h **** //
   5:eurorack/stmlib/dsp/filter.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/dsp/filter.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/dsp/filter.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/dsp/filter.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/dsp/filter.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/dsp/filter.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/dsp/filter.h **** // 
  12:eurorack/stmlib/dsp/filter.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/dsp/filter.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/dsp/filter.h **** // 
  15:eurorack/stmlib/dsp/filter.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/dsp/filter.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/dsp/filter.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/dsp/filter.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/dsp/filter.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/dsp/filter.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/dsp/filter.h **** // THE SOFTWARE.
  22:eurorack/stmlib/dsp/filter.h **** // 
  23:eurorack/stmlib/dsp/filter.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/dsp/filter.h **** //
  25:eurorack/stmlib/dsp/filter.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/dsp/filter.h **** //
  27:eurorack/stmlib/dsp/filter.h **** // Zero-delay-feedback filters (one pole and SVF).
  28:eurorack/stmlib/dsp/filter.h **** // Naive SVF.
  29:eurorack/stmlib/dsp/filter.h **** 
  30:eurorack/stmlib/dsp/filter.h **** #ifndef STMLIB_DSP_FILTER_H_
  31:eurorack/stmlib/dsp/filter.h **** #define STMLIB_DSP_FILTER_H_
  32:eurorack/stmlib/dsp/filter.h **** 
  33:eurorack/stmlib/dsp/filter.h **** #include "stmlib/stmlib.h"
  34:eurorack/stmlib/dsp/filter.h **** 
  35:eurorack/stmlib/dsp/filter.h **** #include <cmath>
  36:eurorack/stmlib/dsp/filter.h **** #include <algorithm>
  37:eurorack/stmlib/dsp/filter.h **** 
  38:eurorack/stmlib/dsp/filter.h **** namespace stmlib {
  39:eurorack/stmlib/dsp/filter.h **** 
  40:eurorack/stmlib/dsp/filter.h **** enum FilterMode {
  41:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_LOW_PASS,
  42:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_BAND_PASS,
  43:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_BAND_PASS_NORMALIZED,
  44:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_HIGH_PASS
  45:eurorack/stmlib/dsp/filter.h **** };
  46:eurorack/stmlib/dsp/filter.h **** 
  47:eurorack/stmlib/dsp/filter.h **** enum FrequencyApproximation {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 21


  48:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_EXACT,
  49:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_ACCURATE,
  50:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_FAST,
  51:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_DIRTY
  52:eurorack/stmlib/dsp/filter.h **** };
  53:eurorack/stmlib/dsp/filter.h **** 
  54:eurorack/stmlib/dsp/filter.h **** #define M_PI_F float(M_PI)
  55:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_2 M_PI * M_PI
  56:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_3 M_PI_POW_2 * M_PI
  57:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_5 M_PI_POW_3 * M_PI_POW_2
  58:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_7 M_PI_POW_5 * M_PI_POW_2
  59:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_9 M_PI_POW_7 * M_PI_POW_2
  60:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_11 M_PI_POW_9 * M_PI_POW_2
  61:eurorack/stmlib/dsp/filter.h **** 
  62:eurorack/stmlib/dsp/filter.h **** class DCBlocker {
  63:eurorack/stmlib/dsp/filter.h ****  public:
  64:eurorack/stmlib/dsp/filter.h ****   DCBlocker() { }
  65:eurorack/stmlib/dsp/filter.h ****   ~DCBlocker() { }
  66:eurorack/stmlib/dsp/filter.h ****   
  67:eurorack/stmlib/dsp/filter.h ****   void Init(float pole) {
  68:eurorack/stmlib/dsp/filter.h ****     x_ = 0.0f;
  69:eurorack/stmlib/dsp/filter.h ****     y_ = 0.0f;
  70:eurorack/stmlib/dsp/filter.h ****     pole_ = pole;
  71:eurorack/stmlib/dsp/filter.h ****   }
  72:eurorack/stmlib/dsp/filter.h ****   
  73:eurorack/stmlib/dsp/filter.h ****   inline void Process(float* in_out, size_t size) {
  74:eurorack/stmlib/dsp/filter.h ****     float x = x_;
  75:eurorack/stmlib/dsp/filter.h ****     float y = y_;
  76:eurorack/stmlib/dsp/filter.h ****     const float pole = pole_;
  77:eurorack/stmlib/dsp/filter.h ****     while (size--) {
  78:eurorack/stmlib/dsp/filter.h ****       float old_x = x;
  79:eurorack/stmlib/dsp/filter.h ****       x = *in_out;
  80:eurorack/stmlib/dsp/filter.h ****       *in_out++ = y = y * pole + x - old_x;
  81:eurorack/stmlib/dsp/filter.h ****     }
  82:eurorack/stmlib/dsp/filter.h ****     x_ = x;
  83:eurorack/stmlib/dsp/filter.h ****     y_ = y;
  84:eurorack/stmlib/dsp/filter.h ****   }
  85:eurorack/stmlib/dsp/filter.h ****   
  86:eurorack/stmlib/dsp/filter.h ****  private:
  87:eurorack/stmlib/dsp/filter.h ****   float pole_;
  88:eurorack/stmlib/dsp/filter.h ****   float x_;
  89:eurorack/stmlib/dsp/filter.h ****   float y_;
  90:eurorack/stmlib/dsp/filter.h **** };
  91:eurorack/stmlib/dsp/filter.h **** 
  92:eurorack/stmlib/dsp/filter.h **** class OnePole {
  93:eurorack/stmlib/dsp/filter.h ****  public:
  94:eurorack/stmlib/dsp/filter.h ****   OnePole() { }
  95:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
  96:eurorack/stmlib/dsp/filter.h ****   
  97:eurorack/stmlib/dsp/filter.h ****   void Init() {
  98:eurorack/stmlib/dsp/filter.h ****     set_f<FREQUENCY_DIRTY>(0.01f);
  99:eurorack/stmlib/dsp/filter.h ****     Reset();
 100:eurorack/stmlib/dsp/filter.h ****   }
 101:eurorack/stmlib/dsp/filter.h ****   
 102:eurorack/stmlib/dsp/filter.h ****   void Reset() {
 103:eurorack/stmlib/dsp/filter.h ****     state_ = 0.0f;
 104:eurorack/stmlib/dsp/filter.h ****   }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 22


 105:eurorack/stmlib/dsp/filter.h ****   
 106:eurorack/stmlib/dsp/filter.h ****   template<FrequencyApproximation approximation>
 107:eurorack/stmlib/dsp/filter.h ****   static inline float tan(float f) {
 108:eurorack/stmlib/dsp/filter.h ****     if (approximation == FREQUENCY_EXACT) {
 109:eurorack/stmlib/dsp/filter.h ****       // Clip coefficient to about 100.
 110:eurorack/stmlib/dsp/filter.h ****       f = f < 0.497f ? f : 0.497f;
 111:eurorack/stmlib/dsp/filter.h ****       return tanf(M_PI_F * f);
 112:eurorack/stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_DIRTY) {
 113:eurorack/stmlib/dsp/filter.h ****       // Optimized for frequencies below 8kHz.
 114:eurorack/stmlib/dsp/filter.h ****       const float a = 3.736e-01f * M_PI_POW_3;
 115:eurorack/stmlib/dsp/filter.h ****       return f * (M_PI_F + a * f * f);
 116:eurorack/stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_FAST) {
 117:eurorack/stmlib/dsp/filter.h ****       // The usual tangent approximation uses 3.1755e-01 and 2.033e-01, but
 118:eurorack/stmlib/dsp/filter.h ****       // the coefficients used here are optimized to minimize error for the
 119:eurorack/stmlib/dsp/filter.h ****       // 16Hz to 16kHz range, with a sample rate of 48kHz.
 120:eurorack/stmlib/dsp/filter.h ****       const float a = 3.260e-01f * M_PI_POW_3;
 121:eurorack/stmlib/dsp/filter.h ****       const float b = 1.823e-01f * M_PI_POW_5;
 122:eurorack/stmlib/dsp/filter.h ****       float f2 = f * f;
 123:eurorack/stmlib/dsp/filter.h ****       return f * (M_PI_F + f2 * (a + b * f2));
 124:eurorack/stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_ACCURATE) {
 125:eurorack/stmlib/dsp/filter.h ****       // These coefficients don't need to be tweaked for the audio range.
 126:eurorack/stmlib/dsp/filter.h ****       const float a = 3.333314036e-01f * M_PI_POW_3;
 127:eurorack/stmlib/dsp/filter.h ****       const float b = 1.333923995e-01f * M_PI_POW_5;
 128:eurorack/stmlib/dsp/filter.h ****       const float c = 5.33740603e-02f * M_PI_POW_7;
 129:eurorack/stmlib/dsp/filter.h ****       const float d = 2.900525e-03f * M_PI_POW_9;
 130:eurorack/stmlib/dsp/filter.h ****       const float e = 9.5168091e-03f * M_PI_POW_11;
 131:eurorack/stmlib/dsp/filter.h ****       float f2 = f * f;
 132:eurorack/stmlib/dsp/filter.h ****       return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
 133:eurorack/stmlib/dsp/filter.h ****     }
 134:eurorack/stmlib/dsp/filter.h ****   }
 135:eurorack/stmlib/dsp/filter.h ****   
 136:eurorack/stmlib/dsp/filter.h ****   // Set frequency and resonance from true units. Various approximations
 137:eurorack/stmlib/dsp/filter.h ****   // are available to avoid the cost of tanf.
 138:eurorack/stmlib/dsp/filter.h ****   template<FrequencyApproximation approximation>
 139:eurorack/stmlib/dsp/filter.h ****   inline void set_f(float f) {
 140:eurorack/stmlib/dsp/filter.h ****     g_ = tan<approximation>(f);
 141:eurorack/stmlib/dsp/filter.h ****     gi_ = 1.0f / (1.0f + g_);
 142:eurorack/stmlib/dsp/filter.h ****   }
 143:eurorack/stmlib/dsp/filter.h ****   
 144:eurorack/stmlib/dsp/filter.h ****   template<FilterMode mode>
 145:eurorack/stmlib/dsp/filter.h ****   inline float Process(float in) {
 146:eurorack/stmlib/dsp/filter.h ****     float lp;
 147:eurorack/stmlib/dsp/filter.h ****     lp = (g_ * in + state_) * gi_;
 148:eurorack/stmlib/dsp/filter.h ****     state_ = g_ * (in - lp) + lp;
 149:eurorack/stmlib/dsp/filter.h **** 
 150:eurorack/stmlib/dsp/filter.h ****     if (mode == FILTER_MODE_LOW_PASS) {
 151:eurorack/stmlib/dsp/filter.h ****       return lp;
 152:eurorack/stmlib/dsp/filter.h ****     } else if (mode == FILTER_MODE_HIGH_PASS) {
 153:eurorack/stmlib/dsp/filter.h ****       return in - lp;
 154:eurorack/stmlib/dsp/filter.h ****     } else {
 155:eurorack/stmlib/dsp/filter.h ****       return 0.0f;
 156:eurorack/stmlib/dsp/filter.h ****     }
 157:eurorack/stmlib/dsp/filter.h ****   }
 158:eurorack/stmlib/dsp/filter.h ****   
 159:eurorack/stmlib/dsp/filter.h ****   template<FilterMode mode>
 160:eurorack/stmlib/dsp/filter.h ****   inline void Process(float* in_out, size_t size) {
 161:eurorack/stmlib/dsp/filter.h ****     while (size--) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 23


 162:eurorack/stmlib/dsp/filter.h ****       *in_out = Process<mode>(*in_out);
 163:eurorack/stmlib/dsp/filter.h ****       ++in_out;
 164:eurorack/stmlib/dsp/filter.h ****     }
 165:eurorack/stmlib/dsp/filter.h ****   }
 166:eurorack/stmlib/dsp/filter.h ****   
 167:eurorack/stmlib/dsp/filter.h ****  private:
 168:eurorack/stmlib/dsp/filter.h ****   float g_;
 169:eurorack/stmlib/dsp/filter.h ****   float gi_;
 170:eurorack/stmlib/dsp/filter.h ****   float state_;
 171:eurorack/stmlib/dsp/filter.h ****   
 172:eurorack/stmlib/dsp/filter.h ****   DISALLOW_COPY_AND_ASSIGN(OnePole);
 173:eurorack/stmlib/dsp/filter.h **** };
 174:eurorack/stmlib/dsp/filter.h **** 
 175:eurorack/stmlib/dsp/filter.h **** 
 176:eurorack/stmlib/dsp/filter.h **** 
 177:eurorack/stmlib/dsp/filter.h **** class Svf {
 178:eurorack/stmlib/dsp/filter.h ****  public:
 179:eurorack/stmlib/dsp/filter.h ****   Svf() { }
 385              		.loc 9 179 3 view .LVU101
 386              		.loc 9 179 3 is_stmt 0 view .LVU102
 387              	.LBE1305:
 388              	.LBB1306:
 389              	.LBI1306:
 390              		.file 10 "eurorack/plaits/dsp/oscillator/sine_oscillator.h"
   1:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // Simple sine oscillator (wavetable) + fast sine oscillator (magic circle).
  28:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
  29:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // The fast implementation might glitch a bit under heavy modulations of the
  30:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // frequency.
  31:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  32:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_SINE_OSCILLATOR_H_
  33:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #define PLAITS_DSP_OSCILLATOR_SINE_OSCILLATOR_H_
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 24


  34:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  35:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #include "stmlib/dsp/dsp.h"
  36:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  37:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #include "stmlib/dsp/rsqrt.h"
  38:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  39:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #include "plaits/resources.h"
  40:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  41:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** namespace plaits {
  42:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  43:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** class SineOscillator {
  44:eurorack/plaits/dsp/oscillator/sine_oscillator.h ****  public:
  45:eurorack/plaits/dsp/oscillator/sine_oscillator.h ****   SineOscillator() { }
 391              		.loc 10 45 3 is_stmt 1 view .LVU103
 392              		.loc 10 45 3 is_stmt 0 view .LVU104
 393              	.LBE1306:
 394              	.LBE1304:
 395              	.LBB1307:
 396              	.LBI1307:
 397              		.file 11 "eurorack/plaits/dsp/drums/synthetic_bass_drum.h"
   1:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** //
   3:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** //
   5:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // 
  12:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // 
  15:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // 
  23:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** //
  25:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** //
  27:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Naive bass drum model (modulated oscillator with FM + envelope).
  28:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Inadvertently 909-ish.
  29:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  30:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #ifndef PLAITS_DSP_DRUMS_SYNTHETIC_BASS_DRUM_H_
  31:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #define PLAITS_DSP_DRUMS_SYNTHETIC_BASS_DRUM_H_
  32:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  33:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "stmlib/dsp/dsp.h"
  34:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "stmlib/dsp/units.h"
  35:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "stmlib/utils/random.h"
  36:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  37:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "plaits/dsp/dsp.h"
  38:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "plaits/resources.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 25


  39:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  40:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** namespace plaits {
  41:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  42:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** class SyntheticBassDrumClick {
  43:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  public:
  44:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   SyntheticBassDrumClick() { }
  45:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumClick() { }
  46:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  47:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   void Init() {
  48:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     lp_ = 0.0f;
  49:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     hp_ = 0.0f;
  50:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     filter_.Init();
  51:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  52:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   }
  53:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  54:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float Process(float in) {
  55:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     SLOPE(lp_, in, 0.5f, 0.1f);
  56:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     ONE_POLE(hp_, lp_, 0.04f);
  57:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     return filter_.Process<stmlib::FILTER_MODE_LOW_PASS>(lp_ - hp_);
  58:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   }
  59:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  60:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  private:
  61:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float lp_;
  62:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float hp_;
  63:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   stmlib::Svf filter_;
  64:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  65:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   DISALLOW_COPY_AND_ASSIGN(SyntheticBassDrumClick);
  66:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** };
  67:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  68:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** class SyntheticBassDrumAttackNoise {
  69:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  public:
  70:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   SyntheticBassDrumAttackNoise() { }
  71:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumAttackNoise() { }
  72:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  73:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   void Init() {
  74:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     lp_ = 0.0f;
  75:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     hp_ = 0.0f;
  76:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   }
  77:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  78:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float Render() {
  79:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     float sample = stmlib::Random::GetFloat();
  80:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     ONE_POLE(lp_, sample, 0.05f);
  81:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     ONE_POLE(hp_, lp_, 0.005f);
  82:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     return lp_ - hp_;
  83:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   }
  84:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  85:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  private:
  86:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float lp_;
  87:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float hp_;
  88:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  89:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   DISALLOW_COPY_AND_ASSIGN(SyntheticBassDrumAttackNoise);
  90:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** };
  91:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  92:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** class SyntheticBassDrum {
  93:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  public:
  94:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   SyntheticBassDrum() { }
 398              		.loc 11 94 3 is_stmt 1 view .LVU105
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 26


 399              	.LBB1308:
 400              	.LBI1308:
  44:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumClick() { }
 401              		.loc 11 44 3 view .LVU106
 402              	.LBB1309:
 403              	.LBI1309:
 404              		.loc 9 179 3 view .LVU107
 405              		.loc 9 179 3 is_stmt 0 view .LVU108
 406              	.LBE1309:
 407              	.LBE1308:
 408              	.LBB1310:
 409              	.LBI1310:
  70:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumAttackNoise() { }
 410              		.loc 11 70 3 is_stmt 1 view .LVU109
  70:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumAttackNoise() { }
 411              		.loc 11 70 3 is_stmt 0 view .LVU110
 412              	.LBE1310:
 413              	.LBE1307:
 414              	.LBB1311:
 415              	.LBI1311:
 416              		.file 12 "eurorack/plaits/dsp/fx/overdrive.h"
   1:eurorack/plaits/dsp/fx/overdrive.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/plaits/dsp/fx/overdrive.h **** //
   3:eurorack/plaits/dsp/fx/overdrive.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/fx/overdrive.h **** //
   5:eurorack/plaits/dsp/fx/overdrive.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/fx/overdrive.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/fx/overdrive.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/fx/overdrive.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/fx/overdrive.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/fx/overdrive.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/fx/overdrive.h **** // 
  12:eurorack/plaits/dsp/fx/overdrive.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/fx/overdrive.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/fx/overdrive.h **** // 
  15:eurorack/plaits/dsp/fx/overdrive.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/fx/overdrive.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/fx/overdrive.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/fx/overdrive.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/fx/overdrive.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/fx/overdrive.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/fx/overdrive.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/fx/overdrive.h **** // 
  23:eurorack/plaits/dsp/fx/overdrive.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/fx/overdrive.h **** //
  25:eurorack/plaits/dsp/fx/overdrive.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/fx/overdrive.h **** //
  27:eurorack/plaits/dsp/fx/overdrive.h **** // Distortion/overdrive.
  28:eurorack/plaits/dsp/fx/overdrive.h **** 
  29:eurorack/plaits/dsp/fx/overdrive.h **** #ifndef PLAITS_DSP_FX_OVERDRIVE_H_
  30:eurorack/plaits/dsp/fx/overdrive.h **** #define PLAITS_DSP_FX_OVERDRIVE_H_
  31:eurorack/plaits/dsp/fx/overdrive.h **** 
  32:eurorack/plaits/dsp/fx/overdrive.h **** #include <algorithm>
  33:eurorack/plaits/dsp/fx/overdrive.h **** 
  34:eurorack/plaits/dsp/fx/overdrive.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/fx/overdrive.h **** #include "stmlib/dsp/parameter_interpolator.h"
  36:eurorack/plaits/dsp/fx/overdrive.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 27


  37:eurorack/plaits/dsp/fx/overdrive.h **** namespace plaits {
  38:eurorack/plaits/dsp/fx/overdrive.h ****   
  39:eurorack/plaits/dsp/fx/overdrive.h **** class Overdrive {
  40:eurorack/plaits/dsp/fx/overdrive.h ****  public:
  41:eurorack/plaits/dsp/fx/overdrive.h ****   Overdrive() { }
 417              		.loc 12 41 3 is_stmt 1 view .LVU111
 418              		.loc 12 41 3 is_stmt 0 view .LVU112
 419              	.LBE1311:
 420              	.LBE1302:
 421              	.LBE1301:
 422              	.LBB1312:
 423              	.LBI1312:
 424              		.file 13 "eurorack/plaits/dsp/engine/fm_engine.h"
   1:eurorack/plaits/dsp/engine/fm_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/fm_engine.h **** //
   3:eurorack/plaits/dsp/engine/fm_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/fm_engine.h **** //
   5:eurorack/plaits/dsp/engine/fm_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/fm_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/fm_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/fm_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/fm_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/fm_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/fm_engine.h **** // 
  12:eurorack/plaits/dsp/engine/fm_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/fm_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/fm_engine.h **** // 
  15:eurorack/plaits/dsp/engine/fm_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/fm_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/fm_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/fm_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/fm_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/fm_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/fm_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/fm_engine.h **** // 
  23:eurorack/plaits/dsp/engine/fm_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/fm_engine.h **** //
  25:eurorack/plaits/dsp/engine/fm_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/fm_engine.h **** //
  27:eurorack/plaits/dsp/engine/fm_engine.h **** // Classic 2-op FM, as found in Braids, Rings and Elements.
  28:eurorack/plaits/dsp/engine/fm_engine.h **** 
  29:eurorack/plaits/dsp/engine/fm_engine.h **** #ifndef PLAITS_DSP_ENGINE_FM_ENGINE_H_
  30:eurorack/plaits/dsp/engine/fm_engine.h **** #define PLAITS_DSP_ENGINE_FM_ENGINE_H_
  31:eurorack/plaits/dsp/engine/fm_engine.h **** 
  32:eurorack/plaits/dsp/engine/fm_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/fm_engine.h **** 
  34:eurorack/plaits/dsp/engine/fm_engine.h **** namespace plaits {
  35:eurorack/plaits/dsp/engine/fm_engine.h ****   
  36:eurorack/plaits/dsp/engine/fm_engine.h **** class FMEngine : public Engine {
  37:eurorack/plaits/dsp/engine/fm_engine.h ****  public:
  38:eurorack/plaits/dsp/engine/fm_engine.h ****   FMEngine() { }
 425              		.loc 13 38 3 is_stmt 1 view .LVU113
 426              	.LBB1313:
 427              	.LBB1314:
 428              	.LBI1314:
 429              		.loc 6 80 3 view .LVU114
 430              		.loc 6 80 3 is_stmt 0 view .LVU115
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 28


 431              	.LBE1314:
 432              		.loc 13 38 14 view .LVU116
 433 0014 3349     		ldr	r1, .L24+8
 434 0016 C3F80012 		str	r1, [r3, #512]
 435              	.LVL21:
 436              		.loc 13 38 14 view .LVU117
 437              	.LBE1313:
 438              	.LBE1312:
 439              	.LBB1315:
 440              	.LBI1315:
 441              		.file 14 "eurorack/plaits/dsp/engine/grain_engine.h"
   1:eurorack/plaits/dsp/engine/grain_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/grain_engine.h **** //
   3:eurorack/plaits/dsp/engine/grain_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/grain_engine.h **** //
   5:eurorack/plaits/dsp/engine/grain_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/grain_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/grain_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/grain_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/grain_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/grain_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/grain_engine.h **** // 
  12:eurorack/plaits/dsp/engine/grain_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/grain_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/grain_engine.h **** // 
  15:eurorack/plaits/dsp/engine/grain_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/grain_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/grain_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/grain_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/grain_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/grain_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/grain_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/grain_engine.h **** // 
  23:eurorack/plaits/dsp/engine/grain_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/grain_engine.h **** //
  25:eurorack/plaits/dsp/engine/grain_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/grain_engine.h **** //
  27:eurorack/plaits/dsp/engine/grain_engine.h **** // Windowed sine segments.
  28:eurorack/plaits/dsp/engine/grain_engine.h **** 
  29:eurorack/plaits/dsp/engine/grain_engine.h **** #ifndef PLAITS_DSP_ENGINE_GRAIN_ENGINE_H_
  30:eurorack/plaits/dsp/engine/grain_engine.h **** #define PLAITS_DSP_ENGINE_GRAIN_ENGINE_H_
  31:eurorack/plaits/dsp/engine/grain_engine.h **** 
  32:eurorack/plaits/dsp/engine/grain_engine.h **** #include "stmlib/dsp/filter.h"
  33:eurorack/plaits/dsp/engine/grain_engine.h **** 
  34:eurorack/plaits/dsp/engine/grain_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/grain_engine.h **** #include "plaits/dsp/oscillator/grainlet_oscillator.h"
  36:eurorack/plaits/dsp/engine/grain_engine.h **** #include "plaits/dsp/oscillator/vosim_oscillator.h"
  37:eurorack/plaits/dsp/engine/grain_engine.h **** #include "plaits/dsp/oscillator/z_oscillator.h"
  38:eurorack/plaits/dsp/engine/grain_engine.h **** 
  39:eurorack/plaits/dsp/engine/grain_engine.h **** namespace plaits {
  40:eurorack/plaits/dsp/engine/grain_engine.h ****   
  41:eurorack/plaits/dsp/engine/grain_engine.h **** class GrainEngine : public Engine {
  42:eurorack/plaits/dsp/engine/grain_engine.h ****  public:
  43:eurorack/plaits/dsp/engine/grain_engine.h ****   GrainEngine() { }
 442              		.loc 14 43 3 is_stmt 1 view .LVU118
 443              	.LBB1316:
 444              	.LBB1317:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 29


 445              	.LBI1317:
 446              		.loc 6 80 3 view .LVU119
 447              		.loc 6 80 3 is_stmt 0 view .LVU120
 448              	.LBE1317:
 449              		.loc 14 43 17 view .LVU121
 450 001a 3349     		ldr	r1, .L24+12
 451 001c C3F83812 		str	r1, [r3, #568]
 452              		.loc 14 43 17 is_stmt 1 view .LVU122
 453              	.LVL22:
 454              	.LBB1318:
 455              	.LBI1318:
 456              		.file 15 "eurorack/plaits/dsp/oscillator/z_oscillator.h"
   1:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/z_oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/z_oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/z_oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/z_oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // Sinewave multiplied by and sync'ed to a carrier.
  28:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  29:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_Z_OSCILLATOR_H_
  30:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #define PLAITS_DSP_OSCILLATOR_Z_OSCILLATOR_H_
  31:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  32:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include <algorithm>
  33:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  34:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  36:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include "stmlib/dsp/polyblep.h"
  37:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  38:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include "plaits/resources.h"
  39:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  40:eurorack/plaits/dsp/oscillator/z_oscillator.h **** namespace plaits {
  41:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  42:eurorack/plaits/dsp/oscillator/z_oscillator.h **** class ZOscillator {
  43:eurorack/plaits/dsp/oscillator/z_oscillator.h ****  public:
  44:eurorack/plaits/dsp/oscillator/z_oscillator.h ****   ZOscillator() { }
 457              		.loc 15 44 3 view .LVU123
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 30


 458              		.loc 15 44 3 is_stmt 0 view .LVU124
 459              	.LBE1318:
 460              		.loc 14 43 17 is_stmt 1 view .LVU125
 461              		.loc 14 43 17 is_stmt 0 view .LVU126
 462              	.LBE1316:
 463              	.LBE1315:
 464              	.LBB1319:
 465              	.LBI1319:
 466              		.file 16 "eurorack/plaits/dsp/engine/hi_hat_engine.h"
   1:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/hi_hat_engine.h **** //
   3:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/hi_hat_engine.h **** //
   5:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // 
  12:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // 
  15:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // 
  23:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/hi_hat_engine.h **** //
  25:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/hi_hat_engine.h **** //
  27:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // 808-style HH with two noise sources - one faithful to the original, the other
  28:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // more metallic.
  29:eurorack/plaits/dsp/engine/hi_hat_engine.h **** 
  30:eurorack/plaits/dsp/engine/hi_hat_engine.h **** #ifndef PLAITS_DSP_ENGINE_HI_HAT_ENGINE_H_
  31:eurorack/plaits/dsp/engine/hi_hat_engine.h **** #define PLAITS_DSP_ENGINE_HI_HAT_ENGINE_H_
  32:eurorack/plaits/dsp/engine/hi_hat_engine.h **** 
  33:eurorack/plaits/dsp/engine/hi_hat_engine.h **** #include "plaits/dsp/drums/hi_hat.h"
  34:eurorack/plaits/dsp/engine/hi_hat_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/hi_hat_engine.h **** 
  36:eurorack/plaits/dsp/engine/hi_hat_engine.h **** namespace plaits {
  37:eurorack/plaits/dsp/engine/hi_hat_engine.h ****   
  38:eurorack/plaits/dsp/engine/hi_hat_engine.h **** class HiHatEngine : public Engine {
  39:eurorack/plaits/dsp/engine/hi_hat_engine.h ****  public:
  40:eurorack/plaits/dsp/engine/hi_hat_engine.h ****   HiHatEngine() { }
 467              		.loc 16 40 3 is_stmt 1 view .LVU127
 468              	.LBB1320:
 469              	.LBB1321:
 470              	.LBI1321:
 471              		.loc 6 80 3 view .LVU128
 472              		.loc 6 80 3 is_stmt 0 view .LVU129
 473              	.LBE1321:
 474              		.loc 16 40 17 view .LVU130
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 31


 475 0020 3249     		ldr	r1, .L24+16
 476 0022 C3F8BC12 		str	r1, [r3, #700]
 477              	.LVL23:
 478              	.LBB1322:
 479              	.LBI1322:
 480              		.file 17 "eurorack/plaits/dsp/drums/hi_hat.h"
   1:eurorack/plaits/dsp/drums/hi_hat.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/hi_hat.h **** //
   3:eurorack/plaits/dsp/drums/hi_hat.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/hi_hat.h **** //
   5:eurorack/plaits/dsp/drums/hi_hat.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/hi_hat.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/hi_hat.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/hi_hat.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/hi_hat.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/hi_hat.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/hi_hat.h **** // 
  12:eurorack/plaits/dsp/drums/hi_hat.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/hi_hat.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/hi_hat.h **** // 
  15:eurorack/plaits/dsp/drums/hi_hat.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/hi_hat.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/hi_hat.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/hi_hat.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/hi_hat.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/hi_hat.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/hi_hat.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/hi_hat.h **** // 
  23:eurorack/plaits/dsp/drums/hi_hat.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/hi_hat.h **** //
  25:eurorack/plaits/dsp/drums/hi_hat.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/hi_hat.h **** //
  27:eurorack/plaits/dsp/drums/hi_hat.h **** // 808 HH, with a few extra parameters to push things to the CY territory...
  28:eurorack/plaits/dsp/drums/hi_hat.h **** // The template parameter MetallicNoiseSource allows another kind of "metallic
  29:eurorack/plaits/dsp/drums/hi_hat.h **** // noise" to be used, for results which are more similar to KR-55 or FM hi-hats.
  30:eurorack/plaits/dsp/drums/hi_hat.h **** 
  31:eurorack/plaits/dsp/drums/hi_hat.h **** #ifndef PLAITS_DSP_DRUMS_HI_HAT_H_
  32:eurorack/plaits/dsp/drums/hi_hat.h **** #define PLAITS_DSP_DRUMS_HI_HAT_H_
  33:eurorack/plaits/dsp/drums/hi_hat.h **** 
  34:eurorack/plaits/dsp/drums/hi_hat.h **** #include <algorithm>
  35:eurorack/plaits/dsp/drums/hi_hat.h **** 
  36:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/dsp/dsp.h"
  37:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/dsp/filter.h"
  38:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/dsp/parameter_interpolator.h"
  39:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/dsp/units.h"
  40:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/utils/random.h"
  41:eurorack/plaits/dsp/drums/hi_hat.h **** 
  42:eurorack/plaits/dsp/drums/hi_hat.h **** #include "plaits/dsp/dsp.h"
  43:eurorack/plaits/dsp/drums/hi_hat.h **** #include "plaits/dsp/oscillator/oscillator.h"
  44:eurorack/plaits/dsp/drums/hi_hat.h **** 
  45:eurorack/plaits/dsp/drums/hi_hat.h **** namespace plaits {
  46:eurorack/plaits/dsp/drums/hi_hat.h **** 
  47:eurorack/plaits/dsp/drums/hi_hat.h **** // 808 style "metallic noise" with 6 square oscillators.
  48:eurorack/plaits/dsp/drums/hi_hat.h **** class SquareNoise {
  49:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
  50:eurorack/plaits/dsp/drums/hi_hat.h ****   SquareNoise() { }
  51:eurorack/plaits/dsp/drums/hi_hat.h ****   ~SquareNoise() { }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 32


  52:eurorack/plaits/dsp/drums/hi_hat.h **** 
  53:eurorack/plaits/dsp/drums/hi_hat.h ****   void Init() {
  54:eurorack/plaits/dsp/drums/hi_hat.h ****     std::fill(&phase_[0], &phase_[6], 0);
  55:eurorack/plaits/dsp/drums/hi_hat.h ****   }
  56:eurorack/plaits/dsp/drums/hi_hat.h ****     
  57:eurorack/plaits/dsp/drums/hi_hat.h ****   void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
  58:eurorack/plaits/dsp/drums/hi_hat.h ****     const float ratios[6] = {
  59:eurorack/plaits/dsp/drums/hi_hat.h ****         // Nominal f0: 414 Hz
  60:eurorack/plaits/dsp/drums/hi_hat.h ****         1.0f, 1.304f, 1.466f, 1.787f, 1.932f, 2.536f
  61:eurorack/plaits/dsp/drums/hi_hat.h ****     };
  62:eurorack/plaits/dsp/drums/hi_hat.h ****   
  63:eurorack/plaits/dsp/drums/hi_hat.h ****     uint32_t increment[6];
  64:eurorack/plaits/dsp/drums/hi_hat.h ****     uint32_t phase[6];
  65:eurorack/plaits/dsp/drums/hi_hat.h ****     for (int i = 0; i < 6; ++i) {
  66:eurorack/plaits/dsp/drums/hi_hat.h ****       float f = f0 * ratios[i];
  67:eurorack/plaits/dsp/drums/hi_hat.h ****       if (f >= 0.499f) f = 0.499f;
  68:eurorack/plaits/dsp/drums/hi_hat.h ****       increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
  69:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[i] = phase_[i];
  70:eurorack/plaits/dsp/drums/hi_hat.h ****     }
  71:eurorack/plaits/dsp/drums/hi_hat.h **** 
  72:eurorack/plaits/dsp/drums/hi_hat.h ****     while (size--) {
  73:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[0] += increment[0];
  74:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[1] += increment[1];
  75:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[2] += increment[2];
  76:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[3] += increment[3];
  77:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[4] += increment[4];
  78:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[5] += increment[5];
  79:eurorack/plaits/dsp/drums/hi_hat.h ****       uint32_t noise = 0;
  80:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[0] >> 31);
  81:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[1] >> 31);
  82:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[2] >> 31);
  83:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[3] >> 31);
  84:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[4] >> 31);
  85:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[5] >> 31);
  86:eurorack/plaits/dsp/drums/hi_hat.h ****       *out++ = 0.33f * static_cast<float>(noise) - 1.0f;
  87:eurorack/plaits/dsp/drums/hi_hat.h ****     }
  88:eurorack/plaits/dsp/drums/hi_hat.h ****   
  89:eurorack/plaits/dsp/drums/hi_hat.h ****     for (int i = 0; i < 6; ++i) {
  90:eurorack/plaits/dsp/drums/hi_hat.h ****       phase_[i] = phase[i];
  91:eurorack/plaits/dsp/drums/hi_hat.h ****     }
  92:eurorack/plaits/dsp/drums/hi_hat.h ****   }
  93:eurorack/plaits/dsp/drums/hi_hat.h **** 
  94:eurorack/plaits/dsp/drums/hi_hat.h ****  private:
  95:eurorack/plaits/dsp/drums/hi_hat.h ****   uint32_t phase_[6];
  96:eurorack/plaits/dsp/drums/hi_hat.h **** 
  97:eurorack/plaits/dsp/drums/hi_hat.h ****   DISALLOW_COPY_AND_ASSIGN(SquareNoise);
  98:eurorack/plaits/dsp/drums/hi_hat.h **** };
  99:eurorack/plaits/dsp/drums/hi_hat.h **** 
 100:eurorack/plaits/dsp/drums/hi_hat.h **** class RingModNoise {
 101:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
 102:eurorack/plaits/dsp/drums/hi_hat.h ****   RingModNoise() { }
 103:eurorack/plaits/dsp/drums/hi_hat.h ****   ~RingModNoise() { }
 104:eurorack/plaits/dsp/drums/hi_hat.h **** 
 105:eurorack/plaits/dsp/drums/hi_hat.h ****   void Init() {
 106:eurorack/plaits/dsp/drums/hi_hat.h ****     for (int i = 0; i < 6; ++i) {
 107:eurorack/plaits/dsp/drums/hi_hat.h ****       oscillator_[i].Init();
 108:eurorack/plaits/dsp/drums/hi_hat.h ****     }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 33


 109:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 110:eurorack/plaits/dsp/drums/hi_hat.h ****   
 111:eurorack/plaits/dsp/drums/hi_hat.h ****   void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
 112:eurorack/plaits/dsp/drums/hi_hat.h ****     const float ratio = f0 / (0.01f + f0);
 113:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f1a = 200.0f / kSampleRate * ratio;
 114:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f1b = 7530.0f / kSampleRate * ratio;
 115:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f2a = 510.0f / kSampleRate * ratio;
 116:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f2b = 8075.0f / kSampleRate * ratio;
 117:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f3a = 730.0f / kSampleRate * ratio;
 118:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f3b = 10500.0f / kSampleRate * ratio;
 119:eurorack/plaits/dsp/drums/hi_hat.h ****     
 120:eurorack/plaits/dsp/drums/hi_hat.h ****     std::fill(&out[0], &out[size], 0.0f);
 121:eurorack/plaits/dsp/drums/hi_hat.h ****     
 122:eurorack/plaits/dsp/drums/hi_hat.h ****     RenderPair(&oscillator_[0], f1a, f1b, temp_1, temp_2, out, size);
 123:eurorack/plaits/dsp/drums/hi_hat.h ****     RenderPair(&oscillator_[2], f2a, f2b, temp_1, temp_2, out, size);
 124:eurorack/plaits/dsp/drums/hi_hat.h ****     RenderPair(&oscillator_[4], f3a, f3b, temp_1, temp_2, out, size);
 125:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 126:eurorack/plaits/dsp/drums/hi_hat.h **** 
 127:eurorack/plaits/dsp/drums/hi_hat.h ****  private:
 128:eurorack/plaits/dsp/drums/hi_hat.h ****   void RenderPair(
 129:eurorack/plaits/dsp/drums/hi_hat.h ****       Oscillator* osc,
 130:eurorack/plaits/dsp/drums/hi_hat.h ****       float f1,
 131:eurorack/plaits/dsp/drums/hi_hat.h ****       float f2,
 132:eurorack/plaits/dsp/drums/hi_hat.h ****       float* temp_1,
 133:eurorack/plaits/dsp/drums/hi_hat.h ****       float* temp_2,
 134:eurorack/plaits/dsp/drums/hi_hat.h ****       float* out,
 135:eurorack/plaits/dsp/drums/hi_hat.h ****       size_t size) {
 136:eurorack/plaits/dsp/drums/hi_hat.h ****     osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
 137:eurorack/plaits/dsp/drums/hi_hat.h ****     osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
 138:eurorack/plaits/dsp/drums/hi_hat.h ****     while (size--) {
 139:eurorack/plaits/dsp/drums/hi_hat.h ****       *out++ += *temp_1++ * *temp_2++;
 140:eurorack/plaits/dsp/drums/hi_hat.h ****     }
 141:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 142:eurorack/plaits/dsp/drums/hi_hat.h ****   Oscillator oscillator_[6];
 143:eurorack/plaits/dsp/drums/hi_hat.h ****   
 144:eurorack/plaits/dsp/drums/hi_hat.h ****   DISALLOW_COPY_AND_ASSIGN(RingModNoise);
 145:eurorack/plaits/dsp/drums/hi_hat.h **** };
 146:eurorack/plaits/dsp/drums/hi_hat.h **** 
 147:eurorack/plaits/dsp/drums/hi_hat.h **** class SwingVCA {
 148:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
 149:eurorack/plaits/dsp/drums/hi_hat.h ****   float operator()(float s, float gain) {
 150:eurorack/plaits/dsp/drums/hi_hat.h ****    s *= s > 0.0f ? 10.0f : 0.1f;
 151:eurorack/plaits/dsp/drums/hi_hat.h ****    s = s / (1.0f + fabsf(s));
 152:eurorack/plaits/dsp/drums/hi_hat.h ****    return (s + 1.0f) * gain;
 153:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 154:eurorack/plaits/dsp/drums/hi_hat.h **** };
 155:eurorack/plaits/dsp/drums/hi_hat.h **** 
 156:eurorack/plaits/dsp/drums/hi_hat.h **** class LinearVCA {
 157:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
 158:eurorack/plaits/dsp/drums/hi_hat.h ****   float operator()(float s, float gain) {
 159:eurorack/plaits/dsp/drums/hi_hat.h ****    return s * gain;
 160:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 161:eurorack/plaits/dsp/drums/hi_hat.h **** };
 162:eurorack/plaits/dsp/drums/hi_hat.h **** 
 163:eurorack/plaits/dsp/drums/hi_hat.h **** template<typename MetallicNoiseSource, typename VCA, bool resonance>
 164:eurorack/plaits/dsp/drums/hi_hat.h **** class HiHat {
 165:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 34


 166:eurorack/plaits/dsp/drums/hi_hat.h ****   HiHat() { }
 481              		.loc 17 166 3 is_stmt 1 view .LVU131
 482              	.LBB1323:
 483              	.LBI1323:
  50:eurorack/plaits/dsp/drums/hi_hat.h ****   ~SquareNoise() { }
 484              		.loc 17 50 3 view .LVU132
  50:eurorack/plaits/dsp/drums/hi_hat.h ****   ~SquareNoise() { }
 485              		.loc 17 50 3 is_stmt 0 view .LVU133
 486              	.LBE1323:
 487              	.LBB1324:
 488              	.LBI1324:
 489              		.loc 9 179 3 is_stmt 1 view .LVU134
 490              		.loc 9 179 3 is_stmt 0 view .LVU135
 491              	.LBE1324:
 492              	.LBB1325:
 493              	.LBI1325:
 494              		.loc 9 179 3 is_stmt 1 view .LVU136
 495              		.loc 9 179 3 is_stmt 0 view .LVU137
 496              	.LBE1325:
 497              	.LBE1322:
 498              	.LBB1326:
 499              	.LBI1326:
 500              		.loc 17 166 3 is_stmt 1 view .LVU138
 501              	.LBB1327:
 502              	.LBI1327:
 102:eurorack/plaits/dsp/drums/hi_hat.h ****   ~RingModNoise() { }
 503              		.loc 17 102 3 view .LVU139
 504              	.LBE1327:
 505              	.LBE1326:
 506              	.LBE1320:
 507              	.LBE1319:
 508              	.LBE1297:
 509              	.LBE1406:
 102:eurorack/plaits/dsp/drums/hi_hat.h ****   ~RingModNoise() { }
 510              		.loc 17 102 18 view .LVU140
 511              	.LBB1407:
 512              	.LBB1397:
 513              	.LBB1332:
 514              	.LBB1331:
 515              	.LBB1330:
 516              	.LBB1328:
 517              	.LBI1328:
 518              		.loc 9 179 3 view .LVU141
 519              		.loc 9 179 3 is_stmt 0 view .LVU142
 520              	.LBE1328:
 521              	.LBB1329:
 522              	.LBI1329:
 523              		.loc 9 179 3 is_stmt 1 view .LVU143
 524              		.loc 9 179 3 is_stmt 0 view .LVU144
 525              	.LBE1329:
 526              	.LBE1330:
 527              	.LBE1331:
 528              	.LBE1332:
 529              	.LBB1333:
 530              	.LBI1333:
 531              		.file 18 "eurorack/plaits/dsp/engine/modal_engine.h"
   1:eurorack/plaits/dsp/engine/modal_engine.h **** // Copyright 2016 Emilie Gillet.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 35


   2:eurorack/plaits/dsp/engine/modal_engine.h **** //
   3:eurorack/plaits/dsp/engine/modal_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/modal_engine.h **** //
   5:eurorack/plaits/dsp/engine/modal_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/modal_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/modal_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/modal_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/modal_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/modal_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/modal_engine.h **** // 
  12:eurorack/plaits/dsp/engine/modal_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/modal_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/modal_engine.h **** // 
  15:eurorack/plaits/dsp/engine/modal_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/modal_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/modal_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/modal_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/modal_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/modal_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/modal_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/modal_engine.h **** // 
  23:eurorack/plaits/dsp/engine/modal_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/modal_engine.h **** //
  25:eurorack/plaits/dsp/engine/modal_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/modal_engine.h **** //
  27:eurorack/plaits/dsp/engine/modal_engine.h **** // One voice of modal synthesis.
  28:eurorack/plaits/dsp/engine/modal_engine.h **** 
  29:eurorack/plaits/dsp/engine/modal_engine.h **** #ifndef PLAITS_DSP_ENGINE_MODAL_ENGINE_H_
  30:eurorack/plaits/dsp/engine/modal_engine.h **** #define PLAITS_DSP_ENGINE_MODAL_ENGINE_H_
  31:eurorack/plaits/dsp/engine/modal_engine.h **** 
  32:eurorack/plaits/dsp/engine/modal_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/modal_engine.h **** #include "plaits/dsp/physical_modelling/modal_voice.h"
  34:eurorack/plaits/dsp/engine/modal_engine.h **** 
  35:eurorack/plaits/dsp/engine/modal_engine.h **** namespace plaits {
  36:eurorack/plaits/dsp/engine/modal_engine.h **** 
  37:eurorack/plaits/dsp/engine/modal_engine.h **** class ModalEngine : public Engine {
  38:eurorack/plaits/dsp/engine/modal_engine.h ****  public:
  39:eurorack/plaits/dsp/engine/modal_engine.h ****   ModalEngine() { }
 532              		.loc 18 39 3 is_stmt 1 view .LVU145
 533              	.LBB1334:
 534              	.LBB1335:
 535              	.LBI1335:
 536              		.loc 6 80 3 view .LVU146
 537              		.loc 6 80 3 is_stmt 0 view .LVU147
 538              	.LBE1335:
 539              		.loc 18 39 17 view .LVU148
 540 0026 3249     		ldr	r1, .L24+20
 541 0028 C3F80414 		str	r1, [r3, #1028]
 542              	.LVL24:
 543              	.LBB1336:
 544              	.LBI1336:
 545              		.file 19 "eurorack/plaits/dsp/physical_modelling/modal_voice.h"
   1:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** //
   3:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** //
   5:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 36


   6:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // 
  12:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // 
  15:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // 
  23:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** //
  25:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** //
  27:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // Simple modal synthesis voice with a mallet exciter:
  28:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // click -> LPF -> resonator.
  29:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // 
  30:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // The click is replaced by continuous white noise when the trigger input
  31:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // of the module is not patched.
  32:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** 
  33:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** #ifndef PLAITS_DSP_PHYSICAL_MODELLING_MODAL_VOICE_H_
  34:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** #define PLAITS_DSP_PHYSICAL_MODELLING_MODAL_VOICE_H_
  35:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** 
  36:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** #include "plaits/dsp/physical_modelling/resonator.h"
  37:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** 
  38:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** namespace plaits {
  39:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** 
  40:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** class ModalVoice {
  41:eurorack/plaits/dsp/physical_modelling/modal_voice.h ****  public:
  42:eurorack/plaits/dsp/physical_modelling/modal_voice.h ****   ModalVoice() { }
 546              		.loc 19 42 3 is_stmt 1 view .LVU149
 547              	.LBB1337:
 548              	.LBI1337:
 549              		.file 20 "eurorack/plaits/dsp/physical_modelling/resonator.h"
   1:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
   3:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
   5:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/physical_modelling/resonator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/physical_modelling/resonator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/physical_modelling/resonator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/physical_modelling/resonator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/physical_modelling/resonator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/physical_modelling/resonator.h **** // 
  12:eurorack/plaits/dsp/physical_modelling/resonator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/physical_modelling/resonator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/physical_modelling/resonator.h **** // 
  15:eurorack/plaits/dsp/physical_modelling/resonator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/physical_modelling/resonator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 37


  17:eurorack/plaits/dsp/physical_modelling/resonator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/physical_modelling/resonator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/physical_modelling/resonator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/physical_modelling/resonator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/physical_modelling/resonator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/physical_modelling/resonator.h **** // 
  23:eurorack/plaits/dsp/physical_modelling/resonator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
  25:eurorack/plaits/dsp/physical_modelling/resonator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
  27:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Resonator, taken from Rings' code but with fixed position.
  28:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  29:eurorack/plaits/dsp/physical_modelling/resonator.h **** #ifndef PLAITS_DSP_PHYSICAL_MODELLING_RESONATOR_H_
  30:eurorack/plaits/dsp/physical_modelling/resonator.h **** #define PLAITS_DSP_PHYSICAL_MODELLING_RESONATOR_H_
  31:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  32:eurorack/plaits/dsp/physical_modelling/resonator.h **** #include "stmlib/dsp/filter.h"
  33:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  34:eurorack/plaits/dsp/physical_modelling/resonator.h **** namespace plaits {
  35:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  36:eurorack/plaits/dsp/physical_modelling/resonator.h **** const int kMaxNumModes = 24;
  37:eurorack/plaits/dsp/physical_modelling/resonator.h **** const int kModeBatchSize = 4;
  38:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  39:eurorack/plaits/dsp/physical_modelling/resonator.h **** // We render 4 modes simultaneously since there are enough registers to hold
  40:eurorack/plaits/dsp/physical_modelling/resonator.h **** // all state variables.
  41:eurorack/plaits/dsp/physical_modelling/resonator.h **** template<int batch_size>
  42:eurorack/plaits/dsp/physical_modelling/resonator.h **** class ResonatorSvf {
  43:eurorack/plaits/dsp/physical_modelling/resonator.h ****  public:
  44:eurorack/plaits/dsp/physical_modelling/resonator.h ****   ResonatorSvf() { }
 550              		.loc 20 44 3 view .LVU150
 551              		.loc 20 44 3 is_stmt 0 view .LVU151
 552              	.LBE1337:
 553              	.LBB1338:
 554              	.LBI1338:
  45:eurorack/plaits/dsp/physical_modelling/resonator.h ****   ~ResonatorSvf() { }
  46:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
  47:eurorack/plaits/dsp/physical_modelling/resonator.h ****   void Init() {
  48:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
  49:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1_[i] = state_2_[i] = 0.0f;
  50:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  51:eurorack/plaits/dsp/physical_modelling/resonator.h ****   }
  52:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
  53:eurorack/plaits/dsp/physical_modelling/resonator.h ****   template<stmlib::FilterMode mode, bool add>
  54:eurorack/plaits/dsp/physical_modelling/resonator.h ****   void Process(
  55:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* f,
  56:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* q,
  57:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* gain,
  58:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* in,
  59:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float* out,
  60:eurorack/plaits/dsp/physical_modelling/resonator.h ****       size_t size) {
  61:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float g[batch_size];
  62:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float r[batch_size];
  63:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float r_plus_g[batch_size];
  64:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float h[batch_size];
  65:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float state_1[batch_size];
  66:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float state_2[batch_size];
  67:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float gains[batch_size];
  68:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 38


  69:eurorack/plaits/dsp/physical_modelling/resonator.h ****       g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
  70:eurorack/plaits/dsp/physical_modelling/resonator.h ****       r[i] = 1.0f / q[i];
  71:eurorack/plaits/dsp/physical_modelling/resonator.h ****       h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
  72:eurorack/plaits/dsp/physical_modelling/resonator.h ****       r_plus_g[i] = r[i] + g[i];
  73:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1[i] = state_1_[i];
  74:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_2[i] = state_2_[i];
  75:eurorack/plaits/dsp/physical_modelling/resonator.h ****       gains[i] = gain[i];
  76:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  77:eurorack/plaits/dsp/physical_modelling/resonator.h ****     
  78:eurorack/plaits/dsp/physical_modelling/resonator.h ****     while (size--) {
  79:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float s_in = *in++;
  80:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float s_out = 0.0f;
  81:eurorack/plaits/dsp/physical_modelling/resonator.h ****       for (int i = 0; i < batch_size; ++i) {
  82:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
  83:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float bp = g[i] * hp + state_1[i];
  84:eurorack/plaits/dsp/physical_modelling/resonator.h ****         state_1[i] = g[i] * hp + bp;
  85:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float lp = g[i] * bp + state_2[i];
  86:eurorack/plaits/dsp/physical_modelling/resonator.h ****         state_2[i] = g[i] * bp + lp;
  87:eurorack/plaits/dsp/physical_modelling/resonator.h ****         s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
  88:eurorack/plaits/dsp/physical_modelling/resonator.h ****       }
  89:eurorack/plaits/dsp/physical_modelling/resonator.h ****       if (add) {
  90:eurorack/plaits/dsp/physical_modelling/resonator.h ****         *out++ += s_out;
  91:eurorack/plaits/dsp/physical_modelling/resonator.h ****       } else {
  92:eurorack/plaits/dsp/physical_modelling/resonator.h ****         *out++ = s_out;
  93:eurorack/plaits/dsp/physical_modelling/resonator.h ****       }
  94:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  95:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
  96:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1_[i] = state_1[i];
  97:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_2_[i] = state_2[i];
  98:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  99:eurorack/plaits/dsp/physical_modelling/resonator.h ****   }
 100:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
 101:eurorack/plaits/dsp/physical_modelling/resonator.h ****  private:
 102:eurorack/plaits/dsp/physical_modelling/resonator.h ****   float state_1_[batch_size];
 103:eurorack/plaits/dsp/physical_modelling/resonator.h ****   float state_2_[batch_size];
 104:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
 105:eurorack/plaits/dsp/physical_modelling/resonator.h ****   DISALLOW_COPY_AND_ASSIGN(ResonatorSvf);
 106:eurorack/plaits/dsp/physical_modelling/resonator.h **** };
 107:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
 108:eurorack/plaits/dsp/physical_modelling/resonator.h **** class Resonator {
 109:eurorack/plaits/dsp/physical_modelling/resonator.h ****  public:
 110:eurorack/plaits/dsp/physical_modelling/resonator.h ****   Resonator() { }
 555              		.loc 20 110 3 is_stmt 1 view .LVU152
 556              	.LBE1338:
 557              	.LBE1336:
 558              	.LBE1334:
 559              	.LBE1333:
 560              	.LBE1397:
 561              	.LBE1407:
 562              		.loc 20 110 15 view .LVU153
 563              	.LBB1408:
 564              	.LBB1398:
 565              	.LBB1339:
 566              	.LBI1339:
 567              		.file 21 "eurorack/plaits/dsp/engine/noise_engine.h"
   1:eurorack/plaits/dsp/engine/noise_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/noise_engine.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 39


   3:eurorack/plaits/dsp/engine/noise_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/noise_engine.h **** //
   5:eurorack/plaits/dsp/engine/noise_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/noise_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/noise_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/noise_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/noise_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/noise_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/noise_engine.h **** // 
  12:eurorack/plaits/dsp/engine/noise_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/noise_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/noise_engine.h **** // 
  15:eurorack/plaits/dsp/engine/noise_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/noise_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/noise_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/noise_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/noise_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/noise_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/noise_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/noise_engine.h **** // 
  23:eurorack/plaits/dsp/engine/noise_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/noise_engine.h **** //
  25:eurorack/plaits/dsp/engine/noise_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/noise_engine.h **** //
  27:eurorack/plaits/dsp/engine/noise_engine.h **** // Clocked noise processed by a multimode filter.
  28:eurorack/plaits/dsp/engine/noise_engine.h **** 
  29:eurorack/plaits/dsp/engine/noise_engine.h **** #ifndef PLAITS_DSP_ENGINE_NOISE_ENGINE_H_
  30:eurorack/plaits/dsp/engine/noise_engine.h **** #define PLAITS_DSP_ENGINE_NOISE_ENGINE_H_
  31:eurorack/plaits/dsp/engine/noise_engine.h **** 
  32:eurorack/plaits/dsp/engine/noise_engine.h **** #include "stmlib/dsp/filter.h"
  33:eurorack/plaits/dsp/engine/noise_engine.h **** 
  34:eurorack/plaits/dsp/engine/noise_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/noise_engine.h **** #include "plaits/dsp/noise/clocked_noise.h"
  36:eurorack/plaits/dsp/engine/noise_engine.h **** 
  37:eurorack/plaits/dsp/engine/noise_engine.h **** namespace plaits {
  38:eurorack/plaits/dsp/engine/noise_engine.h **** 
  39:eurorack/plaits/dsp/engine/noise_engine.h **** class NoiseEngine : public Engine {
  40:eurorack/plaits/dsp/engine/noise_engine.h ****  public:
  41:eurorack/plaits/dsp/engine/noise_engine.h ****   NoiseEngine() { }
 568              		.loc 21 41 3 view .LVU154
 569              	.LBB1340:
 570              	.LBB1341:
 571              	.LBI1341:
 572              		.loc 6 80 3 view .LVU155
 573              		.loc 6 80 3 is_stmt 0 view .LVU156
 574              	.LBE1341:
 575              		.loc 21 41 17 view .LVU157
 576 002c 3149     		ldr	r1, .L24+24
 577 002e C3F84815 		str	r1, [r3, #1352]
 578              		.loc 21 41 17 is_stmt 1 view .LVU158
 579              	.LVL25:
 580              	.LBB1342:
 581              	.LBI1342:
 582              		.loc 9 179 3 view .LVU159
 583              		.loc 9 179 3 is_stmt 0 view .LVU160
 584              	.LBE1342:
 585              		.loc 21 41 17 is_stmt 1 view .LVU161
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 40


 586              		.loc 21 41 17 is_stmt 0 view .LVU162
 587              	.LBE1340:
 588              	.LBE1339:
 589              	.LBB1343:
 590              	.LBI1343:
 591              		.file 22 "eurorack/plaits/dsp/engine/particle_engine.h"
   1:eurorack/plaits/dsp/engine/particle_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/particle_engine.h **** //
   3:eurorack/plaits/dsp/engine/particle_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/particle_engine.h **** //
   5:eurorack/plaits/dsp/engine/particle_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/particle_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/particle_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/particle_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/particle_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/particle_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/particle_engine.h **** // 
  12:eurorack/plaits/dsp/engine/particle_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/particle_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/particle_engine.h **** // 
  15:eurorack/plaits/dsp/engine/particle_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/particle_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/particle_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/particle_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/particle_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/particle_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/particle_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/particle_engine.h **** // 
  23:eurorack/plaits/dsp/engine/particle_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/particle_engine.h **** //
  25:eurorack/plaits/dsp/engine/particle_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/particle_engine.h **** //
  27:eurorack/plaits/dsp/engine/particle_engine.h **** // Filtered random pulses.
  28:eurorack/plaits/dsp/engine/particle_engine.h **** 
  29:eurorack/plaits/dsp/engine/particle_engine.h **** #ifndef PLAITS_DSP_ENGINE_PARTICLE_ENGINE_H_
  30:eurorack/plaits/dsp/engine/particle_engine.h **** #define PLAITS_DSP_ENGINE_PARTICLE_ENGINE_H_
  31:eurorack/plaits/dsp/engine/particle_engine.h **** 
  32:eurorack/plaits/dsp/engine/particle_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/particle_engine.h **** #include "plaits/dsp/fx/diffuser.h"
  34:eurorack/plaits/dsp/engine/particle_engine.h **** #include "plaits/dsp/noise/particle.h"
  35:eurorack/plaits/dsp/engine/particle_engine.h **** 
  36:eurorack/plaits/dsp/engine/particle_engine.h **** namespace plaits {
  37:eurorack/plaits/dsp/engine/particle_engine.h **** 
  38:eurorack/plaits/dsp/engine/particle_engine.h **** const int kNumParticles = 6;
  39:eurorack/plaits/dsp/engine/particle_engine.h **** 
  40:eurorack/plaits/dsp/engine/particle_engine.h **** class ParticleEngine : public Engine {
  41:eurorack/plaits/dsp/engine/particle_engine.h ****  public:
  42:eurorack/plaits/dsp/engine/particle_engine.h ****   ParticleEngine() { }
 592              		.loc 22 42 3 is_stmt 1 view .LVU163
 593              	.LBB1344:
 594              	.LBB1345:
 595              	.LBI1345:
 596              		.loc 6 80 3 view .LVU164
 597              		.loc 6 80 3 is_stmt 0 view .LVU165
 598              	.LBE1345:
 599              		.loc 22 42 20 view .LVU166
 600 0032 3149     		ldr	r1, .L24+28
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 41


 601 0034 C3F8C815 		str	r1, [r3, #1480]
 602              		.loc 22 42 20 is_stmt 1 view .LVU167
 603              	.LVL26:
 604              	.LBB1346:
 605              	.LBI1346:
 606              		.file 23 "eurorack/plaits/dsp/fx/diffuser.h"
   1:eurorack/plaits/dsp/fx/diffuser.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/fx/diffuser.h **** //
   3:eurorack/plaits/dsp/fx/diffuser.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/fx/diffuser.h **** //
   5:eurorack/plaits/dsp/fx/diffuser.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/fx/diffuser.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/fx/diffuser.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/fx/diffuser.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/fx/diffuser.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/fx/diffuser.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/fx/diffuser.h **** // 
  12:eurorack/plaits/dsp/fx/diffuser.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/fx/diffuser.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/fx/diffuser.h **** // 
  15:eurorack/plaits/dsp/fx/diffuser.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/fx/diffuser.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/fx/diffuser.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/fx/diffuser.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/fx/diffuser.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/fx/diffuser.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/fx/diffuser.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/fx/diffuser.h **** // 
  23:eurorack/plaits/dsp/fx/diffuser.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/fx/diffuser.h **** //
  25:eurorack/plaits/dsp/fx/diffuser.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/fx/diffuser.h **** //
  27:eurorack/plaits/dsp/fx/diffuser.h **** // Granular diffuser.
  28:eurorack/plaits/dsp/fx/diffuser.h **** 
  29:eurorack/plaits/dsp/fx/diffuser.h **** #ifndef PLAITS_DSP_FX_DIFFUSER_H_
  30:eurorack/plaits/dsp/fx/diffuser.h **** #define PLAITS_DSP_FX_DIFFUSER_H_
  31:eurorack/plaits/dsp/fx/diffuser.h **** 
  32:eurorack/plaits/dsp/fx/diffuser.h **** #include "stmlib/stmlib.h"
  33:eurorack/plaits/dsp/fx/diffuser.h **** 
  34:eurorack/plaits/dsp/fx/diffuser.h **** #include "plaits/dsp/fx/fx_engine.h"
  35:eurorack/plaits/dsp/fx/diffuser.h **** 
  36:eurorack/plaits/dsp/fx/diffuser.h **** namespace plaits {
  37:eurorack/plaits/dsp/fx/diffuser.h **** 
  38:eurorack/plaits/dsp/fx/diffuser.h **** class Diffuser {
  39:eurorack/plaits/dsp/fx/diffuser.h ****  public:
  40:eurorack/plaits/dsp/fx/diffuser.h ****   Diffuser() { }
 607              		.loc 23 40 3 view .LVU168
 608              	.LBB1347:
 609              	.LBI1347:
 610              		.file 24 "eurorack/plaits/dsp/fx/fx_engine.h"
   1:eurorack/plaits/dsp/fx/fx_engine.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/plaits/dsp/fx/fx_engine.h **** //
   3:eurorack/plaits/dsp/fx/fx_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/fx/fx_engine.h **** //
   5:eurorack/plaits/dsp/fx/fx_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/fx/fx_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/fx/fx_engine.h **** // in the Software without restriction, including without limitation the rights
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 42


   8:eurorack/plaits/dsp/fx/fx_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/fx/fx_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/fx/fx_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/fx/fx_engine.h **** // 
  12:eurorack/plaits/dsp/fx/fx_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/fx/fx_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/fx/fx_engine.h **** // 
  15:eurorack/plaits/dsp/fx/fx_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/fx/fx_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/fx/fx_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/fx/fx_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/fx/fx_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/fx/fx_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/fx/fx_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/fx/fx_engine.h **** // 
  23:eurorack/plaits/dsp/fx/fx_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/fx/fx_engine.h **** //
  25:eurorack/plaits/dsp/fx/fx_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/fx/fx_engine.h **** //
  27:eurorack/plaits/dsp/fx/fx_engine.h **** // Base class for building reverbs.
  28:eurorack/plaits/dsp/fx/fx_engine.h **** 
  29:eurorack/plaits/dsp/fx/fx_engine.h **** #ifndef PLAITS_DSP_FX_FX_ENGINE_H_
  30:eurorack/plaits/dsp/fx/fx_engine.h **** #define PLAITS_DSP_FX_FX_ENGINE_H_
  31:eurorack/plaits/dsp/fx/fx_engine.h **** 
  32:eurorack/plaits/dsp/fx/fx_engine.h **** #include <algorithm>
  33:eurorack/plaits/dsp/fx/fx_engine.h **** 
  34:eurorack/plaits/dsp/fx/fx_engine.h **** #include "stmlib/stmlib.h"
  35:eurorack/plaits/dsp/fx/fx_engine.h **** 
  36:eurorack/plaits/dsp/fx/fx_engine.h **** #include "stmlib/dsp/dsp.h"
  37:eurorack/plaits/dsp/fx/fx_engine.h **** #include "stmlib/dsp/cosine_oscillator.h"
  38:eurorack/plaits/dsp/fx/fx_engine.h **** 
  39:eurorack/plaits/dsp/fx/fx_engine.h **** namespace plaits {
  40:eurorack/plaits/dsp/fx/fx_engine.h **** 
  41:eurorack/plaits/dsp/fx/fx_engine.h **** #define TAIL , -1
  42:eurorack/plaits/dsp/fx/fx_engine.h **** 
  43:eurorack/plaits/dsp/fx/fx_engine.h **** enum Format {
  44:eurorack/plaits/dsp/fx/fx_engine.h ****   FORMAT_12_BIT,
  45:eurorack/plaits/dsp/fx/fx_engine.h ****   FORMAT_16_BIT,
  46:eurorack/plaits/dsp/fx/fx_engine.h ****   FORMAT_32_BIT
  47:eurorack/plaits/dsp/fx/fx_engine.h **** };
  48:eurorack/plaits/dsp/fx/fx_engine.h **** 
  49:eurorack/plaits/dsp/fx/fx_engine.h **** enum LFOIndex {
  50:eurorack/plaits/dsp/fx/fx_engine.h ****   LFO_1,
  51:eurorack/plaits/dsp/fx/fx_engine.h ****   LFO_2
  52:eurorack/plaits/dsp/fx/fx_engine.h **** };
  53:eurorack/plaits/dsp/fx/fx_engine.h **** 
  54:eurorack/plaits/dsp/fx/fx_engine.h **** template<Format format>
  55:eurorack/plaits/dsp/fx/fx_engine.h **** struct DataType { };
  56:eurorack/plaits/dsp/fx/fx_engine.h **** 
  57:eurorack/plaits/dsp/fx/fx_engine.h **** template<>
  58:eurorack/plaits/dsp/fx/fx_engine.h **** struct DataType<FORMAT_12_BIT> {
  59:eurorack/plaits/dsp/fx/fx_engine.h ****   typedef uint16_t T;
  60:eurorack/plaits/dsp/fx/fx_engine.h ****   
  61:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline float Decompress(T value) {
  62:eurorack/plaits/dsp/fx/fx_engine.h ****     return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
  63:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  64:eurorack/plaits/dsp/fx/fx_engine.h ****   
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 43


  65:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline T Compress(float value) {
  66:eurorack/plaits/dsp/fx/fx_engine.h ****     return static_cast<uint16_t>(
  67:eurorack/plaits/dsp/fx/fx_engine.h ****         stmlib::Clip16(static_cast<int32_t>(value * 4096.0f)));
  68:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  69:eurorack/plaits/dsp/fx/fx_engine.h **** };
  70:eurorack/plaits/dsp/fx/fx_engine.h **** 
  71:eurorack/plaits/dsp/fx/fx_engine.h **** template<>
  72:eurorack/plaits/dsp/fx/fx_engine.h **** struct DataType<FORMAT_16_BIT> {
  73:eurorack/plaits/dsp/fx/fx_engine.h ****   typedef uint16_t T;
  74:eurorack/plaits/dsp/fx/fx_engine.h ****   
  75:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline float Decompress(T value) {
  76:eurorack/plaits/dsp/fx/fx_engine.h ****     return static_cast<float>(static_cast<int16_t>(value)) / 32768.0f;
  77:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  78:eurorack/plaits/dsp/fx/fx_engine.h ****   
  79:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline T Compress(float value) {
  80:eurorack/plaits/dsp/fx/fx_engine.h ****     return static_cast<uint16_t>(
  81:eurorack/plaits/dsp/fx/fx_engine.h ****         stmlib::Clip16(static_cast<int32_t>(value * 32768.0f)));
  82:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  83:eurorack/plaits/dsp/fx/fx_engine.h **** };
  84:eurorack/plaits/dsp/fx/fx_engine.h **** 
  85:eurorack/plaits/dsp/fx/fx_engine.h **** template<>
  86:eurorack/plaits/dsp/fx/fx_engine.h **** struct DataType<FORMAT_32_BIT> {
  87:eurorack/plaits/dsp/fx/fx_engine.h ****   typedef float T;
  88:eurorack/plaits/dsp/fx/fx_engine.h ****   
  89:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline float Decompress(T value) {
  90:eurorack/plaits/dsp/fx/fx_engine.h ****     return value;;
  91:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  92:eurorack/plaits/dsp/fx/fx_engine.h ****   
  93:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline T Compress(float value) {
  94:eurorack/plaits/dsp/fx/fx_engine.h ****     return value;
  95:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  96:eurorack/plaits/dsp/fx/fx_engine.h **** };
  97:eurorack/plaits/dsp/fx/fx_engine.h **** 
  98:eurorack/plaits/dsp/fx/fx_engine.h **** template<
  99:eurorack/plaits/dsp/fx/fx_engine.h ****     size_t size,
 100:eurorack/plaits/dsp/fx/fx_engine.h ****     Format format = FORMAT_12_BIT>
 101:eurorack/plaits/dsp/fx/fx_engine.h **** class FxEngine {
 102:eurorack/plaits/dsp/fx/fx_engine.h ****  public:
 103:eurorack/plaits/dsp/fx/fx_engine.h ****   typedef typename DataType<format>::T T;
 104:eurorack/plaits/dsp/fx/fx_engine.h ****   FxEngine() { }
 611              		.loc 24 104 3 view .LVU169
 612              	.LBE1347:
 613              	.LBE1346:
 614              	.LBE1344:
 615              	.LBE1343:
 616              	.LBE1398:
 617              	.LBE1408:
 618              		.loc 24 104 14 view .LVU170
 619              	.LBB1409:
 620              	.LBB1399:
 621              	.LBB1350:
 622              	.LBB1349:
 623              	.LBB1348:
 624              	.LBI1348:
 625              		.loc 9 179 3 view .LVU171
 626              		.loc 9 179 3 is_stmt 0 view .LVU172
 627              	.LBE1348:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 44


 628              	.LBE1349:
 629              	.LBE1350:
 630              	.LBB1351:
 631              	.LBI1351:
 632              		.file 25 "eurorack/plaits/dsp/engine/snare_drum_engine.h"
   1:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/snare_drum_engine.h **** //
   3:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/snare_drum_engine.h **** //
   5:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // 
  12:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // 
  15:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // 
  23:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/snare_drum_engine.h **** //
  25:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/snare_drum_engine.h **** //
  27:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // 808 and synthetic snare drum generators.
  28:eurorack/plaits/dsp/engine/snare_drum_engine.h **** 
  29:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #ifndef PLAITS_DSP_ENGINE_SNARE_DRUM_ENGINE_H_
  30:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #define PLAITS_DSP_ENGINE_SNARE_DRUM_ENGINE_H_
  31:eurorack/plaits/dsp/engine/snare_drum_engine.h **** 
  32:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #include "plaits/dsp/drums/analog_snare_drum.h"
  33:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #include "plaits/dsp/drums/synthetic_snare_drum.h"
  34:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/snare_drum_engine.h **** 
  36:eurorack/plaits/dsp/engine/snare_drum_engine.h **** namespace plaits {
  37:eurorack/plaits/dsp/engine/snare_drum_engine.h ****   
  38:eurorack/plaits/dsp/engine/snare_drum_engine.h **** class SnareDrumEngine : public Engine {
  39:eurorack/plaits/dsp/engine/snare_drum_engine.h ****  public:
  40:eurorack/plaits/dsp/engine/snare_drum_engine.h ****   SnareDrumEngine() { }
 633              		.loc 25 40 3 is_stmt 1 view .LVU173
 634              	.LBB1352:
 635              	.LBB1353:
 636              	.LBI1353:
 637              		.loc 6 80 3 view .LVU174
 638              		.loc 6 80 3 is_stmt 0 view .LVU175
 639              	.LBE1353:
 640              		.loc 25 40 21 view .LVU176
 641 0038 3049     		ldr	r1, .L24+32
 642 003a C3F8A816 		str	r1, [r3, #1704]
 643              	.LVL27:
 644              	.LBB1354:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 45


 645              	.LBI1354:
 646              		.file 26 "eurorack/plaits/dsp/drums/analog_snare_drum.h"
   1:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/analog_snare_drum.h **** //
   3:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/analog_snare_drum.h **** //
   5:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // 
  12:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // 
  15:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // 
  23:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/analog_snare_drum.h **** //
  25:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/analog_snare_drum.h **** //
  27:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // 808 snare drum model, revisited.
  28:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  29:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #ifndef PLAITS_DSP_DRUMS_ANALOG_SNARE_DRUM_H_
  30:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #define PLAITS_DSP_DRUMS_ANALOG_SNARE_DRUM_H_
  31:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  32:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include <algorithm>
  33:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  34:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/dsp/filter.h"
  36:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/dsp/parameter_interpolator.h"
  37:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/dsp/units.h"
  38:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/utils/random.h"
  39:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  40:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "plaits/dsp/dsp.h"
  41:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "plaits/dsp/oscillator/sine_oscillator.h"
  42:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  43:eurorack/plaits/dsp/drums/analog_snare_drum.h **** namespace plaits {
  44:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  45:eurorack/plaits/dsp/drums/analog_snare_drum.h **** class AnalogSnareDrum {
  46:eurorack/plaits/dsp/drums/analog_snare_drum.h ****  public:
  47:eurorack/plaits/dsp/drums/analog_snare_drum.h ****   AnalogSnareDrum() { }
 647              		.loc 26 47 3 is_stmt 1 view .LVU177
 648              	.LBE1354:
 649              	.LBE1352:
 650              	.LBE1351:
 651              	.LBE1399:
 652              	.LBE1409:
 653              		.loc 26 47 21 view .LVU178
 654              	.LBB1410:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 46


 655              	.LBB1400:
 656              	.LBB1363:
 657              	.LBB1361:
 658              	.LBB1356:
 659              	.LBB1355:
 660              	.LBI1355:
 661              		.loc 9 179 3 view .LVU179
 662              		.loc 9 179 3 is_stmt 0 view .LVU180
 663              	.LBE1355:
 664              	.LBE1356:
 665              	.LBE1361:
 666              	.LBE1363:
 667              	.LBE1400:
 668              	.LBE1410:
 669              		.loc 26 47 21 is_stmt 1 view .LVU181
 670              	.LBB1411:
 671              	.LBB1401:
 672              	.LBB1364:
 673              	.LBB1362:
 674              	.LBB1357:
 675              	.LBI1357:
 676              		.file 27 "eurorack/plaits/dsp/drums/synthetic_snare_drum.h"
   1:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** //
   3:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** //
   5:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // 
  12:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // 
  15:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // 
  23:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** //
  25:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** //
  27:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Naive snare drum model (two modulated oscillators + filtered noise).
  28:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Uses a few magic numbers taken from the 909 schematics:
  29:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // - Ratio between the two modes of the drum set to 1.47.
  30:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // - Funky coupling between the two modes.
  31:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // - Noise coloration filters and envelope shapes for the snare.
  32:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  33:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #ifndef PLAITS_DSP_DRUMS_SYNTHETIC_SNARE_DRUM_H_
  34:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #define PLAITS_DSP_DRUMS_SYNTHETIC_SNARE_DRUM_H_
  35:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 47


  36:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include <algorithm>
  37:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  38:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include "stmlib/dsp/dsp.h"
  39:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include "stmlib/dsp/parameter_interpolator.h"
  40:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include "stmlib/dsp/units.h"
  41:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  42:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include "plaits/dsp/dsp.h"
  43:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  44:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** namespace plaits {
  45:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  46:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** class SyntheticSnareDrum {
  47:eurorack/plaits/dsp/drums/synthetic_snare_drum.h ****  public:
  48:eurorack/plaits/dsp/drums/synthetic_snare_drum.h ****   SyntheticSnareDrum() { }
 677              		.loc 27 48 3 view .LVU182
 678              	.LBB1358:
 679              	.LBI1358:
  94:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
 680              		.loc 9 94 3 view .LVU183
  94:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
 681              		.loc 9 94 3 is_stmt 0 view .LVU184
 682              	.LBE1358:
 683              	.LBB1359:
 684              	.LBI1359:
  94:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
 685              		.loc 9 94 3 is_stmt 1 view .LVU185
  94:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
 686              		.loc 9 94 3 is_stmt 0 view .LVU186
 687              	.LBE1359:
 688              	.LBB1360:
 689              	.LBI1360:
 690              		.loc 9 179 3 is_stmt 1 view .LVU187
 691              		.loc 9 179 3 is_stmt 0 view .LVU188
 692              	.LBE1360:
 693              	.LBE1357:
 694              	.LBE1362:
 695              	.LBE1364:
 696              	.LBB1365:
 697              	.LBI1365:
 698              		.file 28 "eurorack/plaits/dsp/engine/string_engine.h"
   1:eurorack/plaits/dsp/engine/string_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/string_engine.h **** //
   3:eurorack/plaits/dsp/engine/string_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/string_engine.h **** //
   5:eurorack/plaits/dsp/engine/string_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/string_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/string_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/string_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/string_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/string_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/string_engine.h **** // 
  12:eurorack/plaits/dsp/engine/string_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/string_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/string_engine.h **** // 
  15:eurorack/plaits/dsp/engine/string_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/string_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/string_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/string_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 48


  19:eurorack/plaits/dsp/engine/string_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/string_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/string_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/string_engine.h **** // 
  23:eurorack/plaits/dsp/engine/string_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/string_engine.h **** //
  25:eurorack/plaits/dsp/engine/string_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/string_engine.h **** //
  27:eurorack/plaits/dsp/engine/string_engine.h **** // Three voices of string synthesis.
  28:eurorack/plaits/dsp/engine/string_engine.h **** 
  29:eurorack/plaits/dsp/engine/string_engine.h **** #ifndef PLAITS_DSP_ENGINE_STRING_ENGINE_H_
  30:eurorack/plaits/dsp/engine/string_engine.h **** #define PLAITS_DSP_ENGINE_STRING_ENGINE_H_
  31:eurorack/plaits/dsp/engine/string_engine.h **** 
  32:eurorack/plaits/dsp/engine/string_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/string_engine.h **** #include "plaits/dsp/physical_modelling/string_voice.h"
  34:eurorack/plaits/dsp/engine/string_engine.h **** 
  35:eurorack/plaits/dsp/engine/string_engine.h **** namespace plaits {
  36:eurorack/plaits/dsp/engine/string_engine.h **** 
  37:eurorack/plaits/dsp/engine/string_engine.h **** const int kNumStrings = 3;
  38:eurorack/plaits/dsp/engine/string_engine.h **** 
  39:eurorack/plaits/dsp/engine/string_engine.h **** class StringEngine : public Engine {
  40:eurorack/plaits/dsp/engine/string_engine.h ****  public:
  41:eurorack/plaits/dsp/engine/string_engine.h ****   StringEngine() { }
 699              		.loc 28 41 3 is_stmt 1 view .LVU189
 700              	.LBB1366:
 701              	.LBB1367:
 702              	.LBI1367:
 703              		.loc 6 80 3 view .LVU190
 704              		.loc 6 80 3 is_stmt 0 view .LVU191
 705              	.LBE1367:
 706              		.loc 28 41 18 view .LVU192
 707 003e 3049     		ldr	r1, .L24+36
 708 0040 C3F8CC17 		str	r1, [r3, #1996]
 709              		.loc 28 41 18 is_stmt 1 view .LVU193
 710              	.LVL28:
 711              	.LBB1368:
 712              	.LBI1368:
 713              		.file 29 "eurorack/plaits/dsp/physical_modelling/delay_line.h"
   1:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/plaits/dsp/physical_modelling/delay_line.h **** //
   3:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/physical_modelling/delay_line.h **** //
   5:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // 
  12:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // 
  15:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 49


  20:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // 
  23:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/physical_modelling/delay_line.h **** //
  25:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/physical_modelling/delay_line.h **** //
  27:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // Delay line (same implementation as from stmlib, but does not own its buffer).
  28:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  29:eurorack/plaits/dsp/physical_modelling/delay_line.h **** #ifndef PLAITS_DSP_PHYSICAL_MODELLING_DELAY_LINE_H_
  30:eurorack/plaits/dsp/physical_modelling/delay_line.h **** #define PLAITS_DSP_PHYSICAL_MODELLING_DELAY_LINE_H_
  31:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  32:eurorack/plaits/dsp/physical_modelling/delay_line.h **** #include <algorithm>
  33:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  34:eurorack/plaits/dsp/physical_modelling/delay_line.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  36:eurorack/plaits/dsp/physical_modelling/delay_line.h **** namespace plaits {
  37:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  38:eurorack/plaits/dsp/physical_modelling/delay_line.h **** template<typename T, size_t max_delay>
  39:eurorack/plaits/dsp/physical_modelling/delay_line.h **** class DelayLine {
  40:eurorack/plaits/dsp/physical_modelling/delay_line.h ****  public:
  41:eurorack/plaits/dsp/physical_modelling/delay_line.h ****   DelayLine() { }
 714              		.loc 29 41 3 view .LVU194
 715              		.loc 29 41 3 is_stmt 0 view .LVU195
 716              	.LBE1368:
 717              	.LBE1366:
 718              	.LBE1365:
 719              	.LBB1369:
 720              	.LBI1369:
 721              		.file 30 "eurorack/plaits/dsp/engine/swarm_engine.h"
   1:eurorack/plaits/dsp/engine/swarm_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/swarm_engine.h **** //
   3:eurorack/plaits/dsp/engine/swarm_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/swarm_engine.h **** //
   5:eurorack/plaits/dsp/engine/swarm_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/swarm_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/swarm_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/swarm_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/swarm_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/swarm_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/swarm_engine.h **** // 
  12:eurorack/plaits/dsp/engine/swarm_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/swarm_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/swarm_engine.h **** // 
  15:eurorack/plaits/dsp/engine/swarm_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/swarm_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/swarm_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/swarm_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/swarm_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/swarm_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/swarm_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/swarm_engine.h **** // 
  23:eurorack/plaits/dsp/engine/swarm_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/swarm_engine.h **** //
  25:eurorack/plaits/dsp/engine/swarm_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/swarm_engine.h **** //
  27:eurorack/plaits/dsp/engine/swarm_engine.h **** // Swarm of sawtooths and sines.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 50


  28:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  29:eurorack/plaits/dsp/engine/swarm_engine.h **** #ifndef PLAITS_DSP_ENGINE_SWARM_ENGINE_H_
  30:eurorack/plaits/dsp/engine/swarm_engine.h **** #define PLAITS_DSP_ENGINE_SWARM_ENGINE_H_
  31:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  32:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "stmlib/dsp/polyblep.h"
  33:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "stmlib/dsp/units.h"
  34:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "stmlib/utils/random.h"
  35:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  36:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/dsp/engine/engine.h"
  37:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/dsp/oscillator/oscillator.h"
  38:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/dsp/oscillator/string_synth_oscillator.h"
  39:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/dsp/oscillator/sine_oscillator.h"
  40:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/resources.h"
  41:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  42:eurorack/plaits/dsp/engine/swarm_engine.h **** namespace plaits {
  43:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  44:eurorack/plaits/dsp/engine/swarm_engine.h **** const int kNumSwarmVoices = 8;
  45:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  46:eurorack/plaits/dsp/engine/swarm_engine.h **** class GrainEnvelope {
  47:eurorack/plaits/dsp/engine/swarm_engine.h ****  public:
  48:eurorack/plaits/dsp/engine/swarm_engine.h ****   GrainEnvelope() { }
  49:eurorack/plaits/dsp/engine/swarm_engine.h ****   ~GrainEnvelope() { }
  50:eurorack/plaits/dsp/engine/swarm_engine.h ****   
  51:eurorack/plaits/dsp/engine/swarm_engine.h ****   void Init() {
  52:eurorack/plaits/dsp/engine/swarm_engine.h ****     from_ = 0.0f;
  53:eurorack/plaits/dsp/engine/swarm_engine.h ****     interval_ = 1.0f;
  54:eurorack/plaits/dsp/engine/swarm_engine.h ****     phase_ = 1.0f;
  55:eurorack/plaits/dsp/engine/swarm_engine.h ****     fm_ = 0.0f;
  56:eurorack/plaits/dsp/engine/swarm_engine.h ****     amplitude_ = 0.5f;
  57:eurorack/plaits/dsp/engine/swarm_engine.h ****     previous_size_ratio_ = 0.0f;
  58:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
  59:eurorack/plaits/dsp/engine/swarm_engine.h ****   
  60:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline void Step(float rate, bool burst_mode, bool start_burst) {
  61:eurorack/plaits/dsp/engine/swarm_engine.h ****     bool randomize = false;
  62:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (start_burst) {
  63:eurorack/plaits/dsp/engine/swarm_engine.h ****       phase_ = 0.5f;
  64:eurorack/plaits/dsp/engine/swarm_engine.h ****       fm_ = 16.0f;
  65:eurorack/plaits/dsp/engine/swarm_engine.h ****       randomize = true;
  66:eurorack/plaits/dsp/engine/swarm_engine.h ****     } else {
  67:eurorack/plaits/dsp/engine/swarm_engine.h ****       phase_ += rate * fm_;
  68:eurorack/plaits/dsp/engine/swarm_engine.h ****       if (phase_ >= 1.0f) {
  69:eurorack/plaits/dsp/engine/swarm_engine.h ****         phase_ -= static_cast<float>(static_cast<int>(phase_));
  70:eurorack/plaits/dsp/engine/swarm_engine.h ****         randomize = true;
  71:eurorack/plaits/dsp/engine/swarm_engine.h ****       }
  72:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
  73:eurorack/plaits/dsp/engine/swarm_engine.h ****     
  74:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (randomize) {
  75:eurorack/plaits/dsp/engine/swarm_engine.h ****       from_ += interval_;
  76:eurorack/plaits/dsp/engine/swarm_engine.h ****       interval_ = stmlib::Random::GetFloat() - from_;
  77:eurorack/plaits/dsp/engine/swarm_engine.h ****       // Randomize the duration of the grain.
  78:eurorack/plaits/dsp/engine/swarm_engine.h ****       if (burst_mode) {
  79:eurorack/plaits/dsp/engine/swarm_engine.h ****         fm_ *= 0.8f + 0.2f * stmlib::Random::GetFloat();
  80:eurorack/plaits/dsp/engine/swarm_engine.h ****       } else {
  81:eurorack/plaits/dsp/engine/swarm_engine.h ****         fm_ = 0.5f + 1.5f * stmlib::Random::GetFloat();
  82:eurorack/plaits/dsp/engine/swarm_engine.h ****       }
  83:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
  84:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 51


  85:eurorack/plaits/dsp/engine/swarm_engine.h ****   
  86:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline float frequency(float size_ratio) const {
  87:eurorack/plaits/dsp/engine/swarm_engine.h ****     // We approximate two overlapping grains of frequencies f1 and f2
  88:eurorack/plaits/dsp/engine/swarm_engine.h ****     // By a continuous tone ramping from f1 to f2. This allows a continuous
  89:eurorack/plaits/dsp/engine/swarm_engine.h ****     // transition between the "grain cloud" and "swarm of glissandi" textures.
  90:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (size_ratio < 1.0f) {
  91:eurorack/plaits/dsp/engine/swarm_engine.h ****       return 2.0f * (from_ + interval_ * phase_) - 1.0f;
  92:eurorack/plaits/dsp/engine/swarm_engine.h ****     } else {
  93:eurorack/plaits/dsp/engine/swarm_engine.h ****       return from_;
  94:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
  95:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
  96:eurorack/plaits/dsp/engine/swarm_engine.h ****   
  97:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline float amplitude(float size_ratio) {
  98:eurorack/plaits/dsp/engine/swarm_engine.h ****     float target_amplitude = 1.0f;
  99:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (size_ratio >= 1.0f) {
 100:eurorack/plaits/dsp/engine/swarm_engine.h ****       float phase = (phase_ - 0.5f) * size_ratio;
 101:eurorack/plaits/dsp/engine/swarm_engine.h ****       CONSTRAIN(phase, -1.0f, 1.0f);
 102:eurorack/plaits/dsp/engine/swarm_engine.h ****       float e = stmlib::InterpolateWrap(
 103:eurorack/plaits/dsp/engine/swarm_engine.h ****           lut_sine, 0.5f * phase + 1.25f, 1024.0f);
 104:eurorack/plaits/dsp/engine/swarm_engine.h ****       target_amplitude = 0.5f * (e + 1.0f);
 105:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
 106:eurorack/plaits/dsp/engine/swarm_engine.h ****     
 107:eurorack/plaits/dsp/engine/swarm_engine.h ****     if ((size_ratio >= 1.0f) ^ (previous_size_ratio_ >= 1.0f)) {
 108:eurorack/plaits/dsp/engine/swarm_engine.h ****       filter_coefficient_ = 0.5f;
 109:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
 110:eurorack/plaits/dsp/engine/swarm_engine.h ****     filter_coefficient_ *= 0.95f;
 111:eurorack/plaits/dsp/engine/swarm_engine.h ****     
 112:eurorack/plaits/dsp/engine/swarm_engine.h ****     previous_size_ratio_ = size_ratio;
 113:eurorack/plaits/dsp/engine/swarm_engine.h ****     ONE_POLE(amplitude_, target_amplitude, 0.5f - filter_coefficient_);
 114:eurorack/plaits/dsp/engine/swarm_engine.h ****     return amplitude_;
 115:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
 116:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 117:eurorack/plaits/dsp/engine/swarm_engine.h ****  private:
 118:eurorack/plaits/dsp/engine/swarm_engine.h ****   float from_;
 119:eurorack/plaits/dsp/engine/swarm_engine.h ****   float interval_;
 120:eurorack/plaits/dsp/engine/swarm_engine.h ****   float phase_;
 121:eurorack/plaits/dsp/engine/swarm_engine.h ****   float fm_;
 122:eurorack/plaits/dsp/engine/swarm_engine.h ****   float amplitude_;
 123:eurorack/plaits/dsp/engine/swarm_engine.h ****   float previous_size_ratio_;
 124:eurorack/plaits/dsp/engine/swarm_engine.h ****   float filter_coefficient_;
 125:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 126:eurorack/plaits/dsp/engine/swarm_engine.h ****   DISALLOW_COPY_AND_ASSIGN(GrainEnvelope);
 127:eurorack/plaits/dsp/engine/swarm_engine.h **** };
 128:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 129:eurorack/plaits/dsp/engine/swarm_engine.h **** class AdditiveSawOscillator {
 130:eurorack/plaits/dsp/engine/swarm_engine.h ****  public:
 131:eurorack/plaits/dsp/engine/swarm_engine.h ****   AdditiveSawOscillator() { }
 132:eurorack/plaits/dsp/engine/swarm_engine.h ****   ~AdditiveSawOscillator() { }
 133:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 134:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline void Init() {
 135:eurorack/plaits/dsp/engine/swarm_engine.h ****     phase_ = 0.0f;
 136:eurorack/plaits/dsp/engine/swarm_engine.h ****     next_sample_ = 0.0f;
 137:eurorack/plaits/dsp/engine/swarm_engine.h ****     frequency_ = 0.01f;
 138:eurorack/plaits/dsp/engine/swarm_engine.h ****     gain_ = 0.0f;
 139:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
 140:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 141:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline void Render(
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 52


 142:eurorack/plaits/dsp/engine/swarm_engine.h ****       float frequency,
 143:eurorack/plaits/dsp/engine/swarm_engine.h ****       float level,
 144:eurorack/plaits/dsp/engine/swarm_engine.h ****       float* out,
 145:eurorack/plaits/dsp/engine/swarm_engine.h ****       size_t size) {
 146:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (frequency >= kMaxFrequency) {
 147:eurorack/plaits/dsp/engine/swarm_engine.h ****       frequency = kMaxFrequency;
 148:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
 149:eurorack/plaits/dsp/engine/swarm_engine.h ****     stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
 150:eurorack/plaits/dsp/engine/swarm_engine.h ****     stmlib::ParameterInterpolator gain(&gain_, level, size);
 151:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 152:eurorack/plaits/dsp/engine/swarm_engine.h ****     float next_sample = next_sample_;
 153:eurorack/plaits/dsp/engine/swarm_engine.h ****     float phase = phase_;
 154:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 155:eurorack/plaits/dsp/engine/swarm_engine.h ****     while (size--) {
 156:eurorack/plaits/dsp/engine/swarm_engine.h ****       float this_sample = next_sample;
 157:eurorack/plaits/dsp/engine/swarm_engine.h ****       next_sample = 0.0f;
 158:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 159:eurorack/plaits/dsp/engine/swarm_engine.h ****       const float frequency = fm.Next();
 160:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 161:eurorack/plaits/dsp/engine/swarm_engine.h ****       phase += frequency;
 162:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 163:eurorack/plaits/dsp/engine/swarm_engine.h ****       if (phase >= 1.0f) {
 164:eurorack/plaits/dsp/engine/swarm_engine.h ****         phase -= 1.0f;
 165:eurorack/plaits/dsp/engine/swarm_engine.h ****         float t = phase / frequency;
 166:eurorack/plaits/dsp/engine/swarm_engine.h ****         this_sample -= stmlib::ThisBlepSample(t);
 167:eurorack/plaits/dsp/engine/swarm_engine.h ****         next_sample -= stmlib::NextBlepSample(t);
 168:eurorack/plaits/dsp/engine/swarm_engine.h ****       }
 169:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 170:eurorack/plaits/dsp/engine/swarm_engine.h ****       next_sample += phase;
 171:eurorack/plaits/dsp/engine/swarm_engine.h ****       *out++ += (2.0f * this_sample - 1.0f) * gain.Next();
 172:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
 173:eurorack/plaits/dsp/engine/swarm_engine.h ****     phase_ = phase;
 174:eurorack/plaits/dsp/engine/swarm_engine.h ****     next_sample_ = next_sample;
 175:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
 176:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 177:eurorack/plaits/dsp/engine/swarm_engine.h ****  private:
 178:eurorack/plaits/dsp/engine/swarm_engine.h ****   // Oscillator state.
 179:eurorack/plaits/dsp/engine/swarm_engine.h ****   float phase_;
 180:eurorack/plaits/dsp/engine/swarm_engine.h ****   float next_sample_;
 181:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 182:eurorack/plaits/dsp/engine/swarm_engine.h ****   // For interpolation of parameters.
 183:eurorack/plaits/dsp/engine/swarm_engine.h ****   float frequency_;
 184:eurorack/plaits/dsp/engine/swarm_engine.h ****   float gain_;
 185:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 186:eurorack/plaits/dsp/engine/swarm_engine.h ****   DISALLOW_COPY_AND_ASSIGN(AdditiveSawOscillator);
 187:eurorack/plaits/dsp/engine/swarm_engine.h **** };
 188:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 189:eurorack/plaits/dsp/engine/swarm_engine.h **** class SwarmVoice {
 190:eurorack/plaits/dsp/engine/swarm_engine.h ****  public:
 191:eurorack/plaits/dsp/engine/swarm_engine.h ****   SwarmVoice() { }
 192:eurorack/plaits/dsp/engine/swarm_engine.h ****   ~SwarmVoice() { }
 193:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 194:eurorack/plaits/dsp/engine/swarm_engine.h ****   void Init(float rank) {
 195:eurorack/plaits/dsp/engine/swarm_engine.h ****     rank_ = rank;
 196:eurorack/plaits/dsp/engine/swarm_engine.h ****     envelope_.Init();
 197:eurorack/plaits/dsp/engine/swarm_engine.h ****     saw_.Init();
 198:eurorack/plaits/dsp/engine/swarm_engine.h ****     sine_.Init();
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 53


 199:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
 200:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 201:eurorack/plaits/dsp/engine/swarm_engine.h ****   void Render(
 202:eurorack/plaits/dsp/engine/swarm_engine.h ****       float f0,
 203:eurorack/plaits/dsp/engine/swarm_engine.h ****       float density,
 204:eurorack/plaits/dsp/engine/swarm_engine.h ****       bool burst_mode,
 205:eurorack/plaits/dsp/engine/swarm_engine.h ****       bool start_burst,
 206:eurorack/plaits/dsp/engine/swarm_engine.h ****       float spread,
 207:eurorack/plaits/dsp/engine/swarm_engine.h ****       float size_ratio,
 208:eurorack/plaits/dsp/engine/swarm_engine.h ****       float* saw,
 209:eurorack/plaits/dsp/engine/swarm_engine.h ****       float* sine,
 210:eurorack/plaits/dsp/engine/swarm_engine.h ****       size_t size) {
 211:eurorack/plaits/dsp/engine/swarm_engine.h ****     envelope_.Step(density, burst_mode, start_burst);
 212:eurorack/plaits/dsp/engine/swarm_engine.h ****     
 213:eurorack/plaits/dsp/engine/swarm_engine.h ****     const float scale = 1.0f / kNumSwarmVoices;
 214:eurorack/plaits/dsp/engine/swarm_engine.h ****     const float amplitude = envelope_.amplitude(size_ratio) * scale;
 215:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 216:eurorack/plaits/dsp/engine/swarm_engine.h ****     const float expo_amount = envelope_.frequency(size_ratio);
 217:eurorack/plaits/dsp/engine/swarm_engine.h ****     f0 *= stmlib::SemitonesToRatio(48.0f * expo_amount * spread * rank_);
 218:eurorack/plaits/dsp/engine/swarm_engine.h ****     
 219:eurorack/plaits/dsp/engine/swarm_engine.h ****     const float linear_amount = rank_ * (rank_ + 0.01f) * spread * 0.25f;
 220:eurorack/plaits/dsp/engine/swarm_engine.h ****     f0 *= 1.0f + linear_amount;
 221:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 222:eurorack/plaits/dsp/engine/swarm_engine.h ****     saw_.Render(f0, amplitude, saw, size);
 223:eurorack/plaits/dsp/engine/swarm_engine.h ****     sine_.Render(f0, amplitude, sine, size);
 224:eurorack/plaits/dsp/engine/swarm_engine.h ****   };
 225:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 226:eurorack/plaits/dsp/engine/swarm_engine.h ****  private:
 227:eurorack/plaits/dsp/engine/swarm_engine.h ****   float rank_;
 228:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 229:eurorack/plaits/dsp/engine/swarm_engine.h ****   GrainEnvelope envelope_;
 230:eurorack/plaits/dsp/engine/swarm_engine.h ****   AdditiveSawOscillator saw_;
 231:eurorack/plaits/dsp/engine/swarm_engine.h ****   FastSineOscillator sine_;
 232:eurorack/plaits/dsp/engine/swarm_engine.h **** };
 233:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 234:eurorack/plaits/dsp/engine/swarm_engine.h **** class SwarmEngine : public Engine {
 235:eurorack/plaits/dsp/engine/swarm_engine.h ****  public:
 236:eurorack/plaits/dsp/engine/swarm_engine.h ****   SwarmEngine() { }
 722              		.loc 30 236 3 is_stmt 1 view .LVU196
 723              	.LBB1370:
 724              	.LBB1371:
 725              	.LBI1371:
 726              		.loc 6 80 3 view .LVU197
 727              		.loc 6 80 3 is_stmt 0 view .LVU198
 728              	.LBE1371:
 729              		.loc 30 236 17 view .LVU199
 730 0044 2F49     		ldr	r1, .L24+40
 731 0046 C3F81819 		str	r1, [r3, #2328]
 732              		.loc 30 236 17 is_stmt 1 view .LVU200
 733              	.LVL29:
 734              		.loc 30 236 17 is_stmt 0 view .LVU201
 735              	.LBE1370:
 736              	.LBE1369:
 737              	.LBB1372:
 738              	.LBI1372:
 739              		.file 31 "eurorack/plaits/dsp/engine/virtual_analog_engine.h"
   1:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // Copyright 2016 Emilie Gillet.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 54


   2:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** //
   3:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** //
   5:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // 
  12:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // 
  15:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // 
  23:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** //
  25:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** //
  27:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // 2 variable shape oscillators with sync and crossfading.
  28:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** 
  29:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #ifndef PLAITS_DSP_ENGINE_VIRTUAL_ANALOG_ENGINE_H_
  30:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #define PLAITS_DSP_ENGINE_VIRTUAL_ANALOG_ENGINE_H_
  31:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** 
  32:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #include "plaits/dsp/oscillator/variable_saw_oscillator.h"
  34:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #include "plaits/dsp/oscillator/variable_shape_oscillator.h"
  35:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** 
  36:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #define VA_VARIANT 2
  37:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** 
  38:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** namespace plaits {
  39:eurorack/plaits/dsp/engine/virtual_analog_engine.h ****   
  40:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** class VirtualAnalogEngine : public Engine {
  41:eurorack/plaits/dsp/engine/virtual_analog_engine.h ****  public:
  42:eurorack/plaits/dsp/engine/virtual_analog_engine.h ****   VirtualAnalogEngine() { }
 740              		.loc 31 42 3 is_stmt 1 view .LVU202
 741              	.LBB1373:
 742              	.LBB1374:
 743              	.LBI1374:
 744              		.loc 6 80 3 view .LVU203
 745              		.loc 6 80 3 is_stmt 0 view .LVU204
 746              	.LBE1374:
 747              		.loc 31 42 25 view .LVU205
 748 004a 2F49     		ldr	r1, .L24+44
 749 004c C3F8281B 		str	r1, [r3, #2856]
 750              	.LVL30:
 751              	.LBB1375:
 752              	.LBI1375:
 753              		.file 32 "eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h"
   1:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 55


   3:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // Continuously variable waveform: triangle > saw > square. Both square and
  28:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // triangle have variable slope / pulse-width. Additionally, the phase resets
  29:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // can be locked to a master frequency.
  30:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  31:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_VARIABLE_SHAPE_OSCILLATOR_H_
  32:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #define PLAITS_DSP_OSCILLATOR_VARIABLE_SHAPE_OSCILLATOR_H_
  33:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  34:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  36:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #include "stmlib/dsp/polyblep.h"
  37:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  38:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #include <algorithm>
  39:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  40:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** namespace plaits {
  41:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  42:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** class VariableShapeOscillator {
  43:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h ****  public:
  44:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h ****   VariableShapeOscillator() { }
 754              		.loc 32 44 3 is_stmt 1 view .LVU206
 755              		.loc 32 44 3 is_stmt 0 view .LVU207
 756              	.LBE1375:
 757              	.LBB1376:
 758              	.LBI1376:
 759              		.loc 32 44 3 is_stmt 1 view .LVU208
 760              		.loc 32 44 3 is_stmt 0 view .LVU209
 761              	.LBE1376:
 762              	.LBB1377:
 763              	.LBI1377:
 764              		.loc 32 44 3 is_stmt 1 view .LVU210
 765              		.loc 32 44 3 is_stmt 0 view .LVU211
 766              	.LBE1377:
 767              	.LBB1378:
 768              	.LBI1378:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 56


 769              		.file 33 "eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h"
   1:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // Saw with variable slope or notch
  28:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  29:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_VARIABLE_SAW_OSCILLATOR_H_
  30:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #define PLAITS_DSP_OSCILLATOR_VARIABLE_SAW_OSCILLATOR_H_
  31:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  32:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include "stmlib/dsp/dsp.h"
  33:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  34:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include "stmlib/dsp/polyblep.h"
  35:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  36:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include <algorithm>
  37:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  38:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include "plaits/dsp/oscillator/oscillator.h"
  39:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  40:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** namespace plaits {
  41:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  42:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** const float kVariableSawNotchDepth = 0.2f;
  43:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  44:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** class VariableSawOscillator {
  45:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h ****  public:
  46:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h ****   VariableSawOscillator() { }
 770              		.loc 33 46 3 is_stmt 1 view .LVU212
 771              		.loc 33 46 3 is_stmt 0 view .LVU213
 772              	.LBE1378:
 773              	.LBE1373:
 774              	.LBE1372:
 775              	.LBB1379:
 776              	.LBI1379:
 777              		.file 34 "eurorack/plaits/dsp/engine/waveshaping_engine.h"
   1:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/waveshaping_engine.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 57


   3:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/waveshaping_engine.h **** //
   5:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // 
  12:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // 
  15:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // 
  23:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/waveshaping_engine.h **** //
  25:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/waveshaping_engine.h **** //
  27:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // Slope -> Waveshaper -> Wavefolder.
  28:eurorack/plaits/dsp/engine/waveshaping_engine.h **** 
  29:eurorack/plaits/dsp/engine/waveshaping_engine.h **** #ifndef PLAITS_DSP_ENGINE_WAVESHAPING_ENGINE_H_
  30:eurorack/plaits/dsp/engine/waveshaping_engine.h **** #define PLAITS_DSP_ENGINE_WAVESHAPING_ENGINE_H_
  31:eurorack/plaits/dsp/engine/waveshaping_engine.h **** 
  32:eurorack/plaits/dsp/engine/waveshaping_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/waveshaping_engine.h **** #include "plaits/dsp/oscillator/oscillator.h"
  34:eurorack/plaits/dsp/engine/waveshaping_engine.h **** 
  35:eurorack/plaits/dsp/engine/waveshaping_engine.h **** namespace plaits {
  36:eurorack/plaits/dsp/engine/waveshaping_engine.h ****   
  37:eurorack/plaits/dsp/engine/waveshaping_engine.h **** class WaveshapingEngine : public Engine {
  38:eurorack/plaits/dsp/engine/waveshaping_engine.h ****  public:
  39:eurorack/plaits/dsp/engine/waveshaping_engine.h ****   WaveshapingEngine() { }
 778              		.loc 34 39 3 is_stmt 1 view .LVU214
 779              	.LBB1380:
 780              	.LBB1381:
 781              	.LBI1381:
 782              		.loc 6 80 3 view .LVU215
 783              		.loc 6 80 3 is_stmt 0 view .LVU216
 784              	.LBE1381:
 785              		.loc 34 39 23 view .LVU217
 786 0050 2E49     		ldr	r1, .L24+48
 787 0052 C3F8CC1B 		str	r1, [r3, #3020]
 788              	.LVL31:
 789              	.LBB1382:
 790              	.LBI1382:
 791              		.file 35 "eurorack/plaits/dsp/oscillator/oscillator.h"
   1:eurorack/plaits/dsp/oscillator/oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 58


   7:eurorack/plaits/dsp/oscillator/oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/oscillator.h **** // Single waveform oscillator. Can optionally do audio-rate linear FM, with
  28:eurorack/plaits/dsp/oscillator/oscillator.h **** // through-zero capabilities (negative frequencies).
  29:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  30:eurorack/plaits/dsp/oscillator/oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_OSCILLATOR_H_
  31:eurorack/plaits/dsp/oscillator/oscillator.h **** #define PLAITS_DSP_OSCILLATOR_OSCILLATOR_H_
  32:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  33:eurorack/plaits/dsp/oscillator/oscillator.h **** #include "stmlib/dsp/dsp.h"
  34:eurorack/plaits/dsp/oscillator/oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  35:eurorack/plaits/dsp/oscillator/oscillator.h **** #include "stmlib/dsp/polyblep.h"
  36:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  37:eurorack/plaits/dsp/oscillator/oscillator.h **** namespace plaits {
  38:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  39:eurorack/plaits/dsp/oscillator/oscillator.h **** enum OscillatorShape {
  40:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_IMPULSE_TRAIN,
  41:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SAW,
  42:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_TRIANGLE,
  43:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SLOPE,
  44:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SQUARE,
  45:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SQUARE_BRIGHT,
  46:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SQUARE_DARK,
  47:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SQUARE_TRIANGLE
  48:eurorack/plaits/dsp/oscillator/oscillator.h **** };
  49:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  50:eurorack/plaits/dsp/oscillator/oscillator.h **** const float kMaxFrequency = 0.25f;
  51:eurorack/plaits/dsp/oscillator/oscillator.h **** const float kMinFrequency = 0.000001f;
  52:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  53:eurorack/plaits/dsp/oscillator/oscillator.h **** class Oscillator {
  54:eurorack/plaits/dsp/oscillator/oscillator.h ****  public:
  55:eurorack/plaits/dsp/oscillator/oscillator.h ****   Oscillator() { }
 792              		.loc 35 55 3 is_stmt 1 view .LVU218
 793              		.loc 35 55 3 is_stmt 0 view .LVU219
 794              	.LBE1382:
 795              	.LBB1383:
 796              	.LBI1383:
 797              		.loc 35 55 3 is_stmt 1 view .LVU220
 798              		.loc 35 55 3 is_stmt 0 view .LVU221
 799              	.LBE1383:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 59


 800              	.LBE1380:
 801              	.LBE1379:
 802              	.LBB1384:
 803              	.LBI1384:
 804              		.file 36 "eurorack/stmlib/dsp/hysteresis_quantizer.h"
   1:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // Copyright 2015 Emilie Gillet.
   2:eurorack/stmlib/dsp/hysteresis_quantizer.h **** //
   3:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/dsp/hysteresis_quantizer.h **** //
   5:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // 
  12:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // 
  15:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // THE SOFTWARE.
  22:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // 
  23:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/dsp/hysteresis_quantizer.h **** //
  25:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/dsp/hysteresis_quantizer.h **** //
  27:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // Quantize a float in [0, 1] to an integer in [0, num_steps[. Apply hysteresis
  28:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // to prevent jumps near the decision boundary.
  29:eurorack/stmlib/dsp/hysteresis_quantizer.h **** 
  30:eurorack/stmlib/dsp/hysteresis_quantizer.h **** #ifndef STMLIB_DSP_HYSTERESIS_QUANTIZER_H_
  31:eurorack/stmlib/dsp/hysteresis_quantizer.h **** #define STMLIB_DSP_HYSTERESIS_QUANTIZER_H_
  32:eurorack/stmlib/dsp/hysteresis_quantizer.h **** 
  33:eurorack/stmlib/dsp/hysteresis_quantizer.h **** #include "stmlib/stmlib.h"
  34:eurorack/stmlib/dsp/hysteresis_quantizer.h **** 
  35:eurorack/stmlib/dsp/hysteresis_quantizer.h **** namespace stmlib {
  36:eurorack/stmlib/dsp/hysteresis_quantizer.h **** 
  37:eurorack/stmlib/dsp/hysteresis_quantizer.h **** class HysteresisQuantizer {
  38:eurorack/stmlib/dsp/hysteresis_quantizer.h ****  public:
  39:eurorack/stmlib/dsp/hysteresis_quantizer.h ****   HysteresisQuantizer() { }
 805              		.loc 36 39 3 is_stmt 1 view .LVU222
 806              		.loc 36 39 3 is_stmt 0 view .LVU223
 807              	.LBE1384:
 808              	.LBB1385:
 809              	.LBI1385:
 810              		.file 37 "eurorack/plaits/dsp/envelope.h"
   1:eurorack/plaits/dsp/envelope.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/envelope.h **** //
   3:eurorack/plaits/dsp/envelope.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/envelope.h **** //
   5:eurorack/plaits/dsp/envelope.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/envelope.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/envelope.h **** // in the Software without restriction, including without limitation the rights
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 60


   8:eurorack/plaits/dsp/envelope.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/envelope.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/envelope.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/envelope.h **** // 
  12:eurorack/plaits/dsp/envelope.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/envelope.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/envelope.h **** // 
  15:eurorack/plaits/dsp/envelope.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/envelope.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/envelope.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/envelope.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/envelope.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/envelope.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/envelope.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/envelope.h **** // 
  23:eurorack/plaits/dsp/envelope.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/envelope.h **** //
  25:eurorack/plaits/dsp/envelope.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/envelope.h **** //
  27:eurorack/plaits/dsp/envelope.h **** // Envelope for the internal LPG.
  28:eurorack/plaits/dsp/envelope.h **** 
  29:eurorack/plaits/dsp/envelope.h **** #ifndef PLAITS_DSP_ENVELOPE_H_
  30:eurorack/plaits/dsp/envelope.h **** #define PLAITS_DSP_ENVELOPE_H_
  31:eurorack/plaits/dsp/envelope.h **** 
  32:eurorack/plaits/dsp/envelope.h **** #include "stmlib/stmlib.h"
  33:eurorack/plaits/dsp/envelope.h **** 
  34:eurorack/plaits/dsp/envelope.h **** namespace plaits {
  35:eurorack/plaits/dsp/envelope.h **** 
  36:eurorack/plaits/dsp/envelope.h **** class LPGEnvelope {
  37:eurorack/plaits/dsp/envelope.h ****  public:
  38:eurorack/plaits/dsp/envelope.h ****   LPGEnvelope() { }
  39:eurorack/plaits/dsp/envelope.h ****   ~LPGEnvelope() { }
  40:eurorack/plaits/dsp/envelope.h ****   
  41:eurorack/plaits/dsp/envelope.h ****   inline void Init() {
  42:eurorack/plaits/dsp/envelope.h ****     vactrol_state_ = 0.0f;
  43:eurorack/plaits/dsp/envelope.h ****     gain_ = 1.0f;
  44:eurorack/plaits/dsp/envelope.h ****     frequency_ = 0.5f;
  45:eurorack/plaits/dsp/envelope.h ****     hf_bleed_ = 0.0f;
  46:eurorack/plaits/dsp/envelope.h ****   }
  47:eurorack/plaits/dsp/envelope.h ****   
  48:eurorack/plaits/dsp/envelope.h ****   inline void Trigger() {
  49:eurorack/plaits/dsp/envelope.h ****     ramp_up_ = true;
  50:eurorack/plaits/dsp/envelope.h ****   }
  51:eurorack/plaits/dsp/envelope.h ****   
  52:eurorack/plaits/dsp/envelope.h ****   inline void ProcessPing(
  53:eurorack/plaits/dsp/envelope.h ****       float attack,
  54:eurorack/plaits/dsp/envelope.h ****       float short_decay,
  55:eurorack/plaits/dsp/envelope.h ****       float decay_tail,
  56:eurorack/plaits/dsp/envelope.h ****       float hf) {
  57:eurorack/plaits/dsp/envelope.h ****     if (ramp_up_) {
  58:eurorack/plaits/dsp/envelope.h ****       vactrol_state_ += attack;
  59:eurorack/plaits/dsp/envelope.h ****       if (vactrol_state_ >= 1.0f) {
  60:eurorack/plaits/dsp/envelope.h ****         vactrol_state_ = 1.0f;
  61:eurorack/plaits/dsp/envelope.h ****         ramp_up_ = false;
  62:eurorack/plaits/dsp/envelope.h ****       }
  63:eurorack/plaits/dsp/envelope.h ****     }
  64:eurorack/plaits/dsp/envelope.h ****     ProcessLP(ramp_up_ ? vactrol_state_ : 0.0f, short_decay, decay_tail, hf);
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 61


  65:eurorack/plaits/dsp/envelope.h ****   }
  66:eurorack/plaits/dsp/envelope.h ****   
  67:eurorack/plaits/dsp/envelope.h ****   inline void ProcessLP(
  68:eurorack/plaits/dsp/envelope.h ****       float level,
  69:eurorack/plaits/dsp/envelope.h ****       float short_decay,
  70:eurorack/plaits/dsp/envelope.h ****       float decay_tail,
  71:eurorack/plaits/dsp/envelope.h ****       float hf) {
  72:eurorack/plaits/dsp/envelope.h ****     float vactrol_input = level;
  73:eurorack/plaits/dsp/envelope.h ****     float vactrol_error = (vactrol_input - vactrol_state_);
  74:eurorack/plaits/dsp/envelope.h ****     float vactrol_state_2 = vactrol_state_ * vactrol_state_;
  75:eurorack/plaits/dsp/envelope.h ****     float vactrol_state_4 = vactrol_state_2 * vactrol_state_2;
  76:eurorack/plaits/dsp/envelope.h ****     float tail = 1.0f - vactrol_state_;
  77:eurorack/plaits/dsp/envelope.h ****     float tail_2 = tail * tail;
  78:eurorack/plaits/dsp/envelope.h ****     float vactrol_coefficient = (vactrol_error > 0.0f)
  79:eurorack/plaits/dsp/envelope.h ****         ? 0.6f
  80:eurorack/plaits/dsp/envelope.h ****         : short_decay + (1.0f - vactrol_state_4) * decay_tail;
  81:eurorack/plaits/dsp/envelope.h ****     vactrol_state_ += vactrol_coefficient * vactrol_error;
  82:eurorack/plaits/dsp/envelope.h ****     
  83:eurorack/plaits/dsp/envelope.h ****     gain_ = vactrol_state_;
  84:eurorack/plaits/dsp/envelope.h ****     frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
  85:eurorack/plaits/dsp/envelope.h ****     hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
  86:eurorack/plaits/dsp/envelope.h ****   }
  87:eurorack/plaits/dsp/envelope.h ****   
  88:eurorack/plaits/dsp/envelope.h ****   inline float gain() const { return gain_; }
  89:eurorack/plaits/dsp/envelope.h ****   inline float frequency() const { return frequency_; }
  90:eurorack/plaits/dsp/envelope.h ****   inline float hf_bleed() const { return hf_bleed_; }
  91:eurorack/plaits/dsp/envelope.h ****   
  92:eurorack/plaits/dsp/envelope.h ****  private:
  93:eurorack/plaits/dsp/envelope.h ****   float vactrol_state_;
  94:eurorack/plaits/dsp/envelope.h ****   float gain_;
  95:eurorack/plaits/dsp/envelope.h ****   float frequency_;
  96:eurorack/plaits/dsp/envelope.h ****   float hf_bleed_;
  97:eurorack/plaits/dsp/envelope.h ****   bool ramp_up_;
  98:eurorack/plaits/dsp/envelope.h ****   
  99:eurorack/plaits/dsp/envelope.h ****   DISALLOW_COPY_AND_ASSIGN(LPGEnvelope);
 100:eurorack/plaits/dsp/envelope.h **** };
 101:eurorack/plaits/dsp/envelope.h **** 
 102:eurorack/plaits/dsp/envelope.h **** class DecayEnvelope {
 103:eurorack/plaits/dsp/envelope.h ****  public:
 104:eurorack/plaits/dsp/envelope.h ****   DecayEnvelope() { }
 811              		.loc 37 104 3 is_stmt 1 view .LVU224
 812              		.loc 37 104 3 is_stmt 0 view .LVU225
 813              	.LBE1385:
 814              	.LBB1386:
 815              	.LBI1386:
  38:eurorack/plaits/dsp/envelope.h ****   ~LPGEnvelope() { }
 816              		.loc 37 38 3 is_stmt 1 view .LVU226
  38:eurorack/plaits/dsp/envelope.h ****   ~LPGEnvelope() { }
 817              		.loc 37 38 3 is_stmt 0 view .LVU227
 818              	.LBE1386:
 819              	.LBB1387:
 820              	.LBI1387:
 821              		.loc 29 41 3 is_stmt 1 view .LVU228
 822              		.loc 29 41 3 is_stmt 0 view .LVU229
 823              	.LBE1387:
 824              	.LBB1388:
 825              	.LBI1388:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 62


  68:eurorack/plaits/dsp/voice.h ****   ~ChannelPostProcessor() { }
 826              		.loc 4 68 3 is_stmt 1 view .LVU230
 827              	.LBB1389:
 828              	.LBI1389:
 829              		.file 38 "eurorack/stmlib/dsp/limiter.h"
   1:eurorack/stmlib/dsp/limiter.h **** // Copyright 2015 Emilie Gillet.
   2:eurorack/stmlib/dsp/limiter.h **** //
   3:eurorack/stmlib/dsp/limiter.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/dsp/limiter.h **** //
   5:eurorack/stmlib/dsp/limiter.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/dsp/limiter.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/dsp/limiter.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/dsp/limiter.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/dsp/limiter.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/dsp/limiter.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/dsp/limiter.h **** // 
  12:eurorack/stmlib/dsp/limiter.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/dsp/limiter.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/dsp/limiter.h **** // 
  15:eurorack/stmlib/dsp/limiter.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/dsp/limiter.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/dsp/limiter.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/dsp/limiter.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/dsp/limiter.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/dsp/limiter.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/dsp/limiter.h **** // THE SOFTWARE.
  22:eurorack/stmlib/dsp/limiter.h **** // 
  23:eurorack/stmlib/dsp/limiter.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/dsp/limiter.h **** //
  25:eurorack/stmlib/dsp/limiter.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/dsp/limiter.h **** //
  27:eurorack/stmlib/dsp/limiter.h **** // Limiter.
  28:eurorack/stmlib/dsp/limiter.h **** 
  29:eurorack/stmlib/dsp/limiter.h **** #ifndef STMLIB_DSP_LIMITER_H_
  30:eurorack/stmlib/dsp/limiter.h **** #define STMLIB_DSP_LIMITER_H_
  31:eurorack/stmlib/dsp/limiter.h **** 
  32:eurorack/stmlib/dsp/limiter.h **** #include "stmlib/stmlib.h"
  33:eurorack/stmlib/dsp/limiter.h **** 
  34:eurorack/stmlib/dsp/limiter.h **** #include <algorithm>
  35:eurorack/stmlib/dsp/limiter.h **** 
  36:eurorack/stmlib/dsp/limiter.h **** #include "stmlib/dsp/dsp.h"
  37:eurorack/stmlib/dsp/limiter.h **** #include "stmlib/dsp/filter.h"
  38:eurorack/stmlib/dsp/limiter.h **** 
  39:eurorack/stmlib/dsp/limiter.h **** namespace stmlib {
  40:eurorack/stmlib/dsp/limiter.h **** 
  41:eurorack/stmlib/dsp/limiter.h **** class Limiter {
  42:eurorack/stmlib/dsp/limiter.h ****  public:
  43:eurorack/stmlib/dsp/limiter.h ****   Limiter() { }
 830              		.loc 38 43 3 view .LVU231
 831              		.loc 38 43 3 is_stmt 0 view .LVU232
 832              	.LBE1389:
 833              	.LBB1390:
 834              	.LBI1390:
 835              		.file 39 "eurorack/plaits/dsp/fx/low_pass_gate.h"
   1:eurorack/plaits/dsp/fx/low_pass_gate.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/plaits/dsp/fx/low_pass_gate.h **** //
   3:eurorack/plaits/dsp/fx/low_pass_gate.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 63


   4:eurorack/plaits/dsp/fx/low_pass_gate.h **** //
   5:eurorack/plaits/dsp/fx/low_pass_gate.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/fx/low_pass_gate.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/fx/low_pass_gate.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/fx/low_pass_gate.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/fx/low_pass_gate.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/fx/low_pass_gate.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/fx/low_pass_gate.h **** // 
  12:eurorack/plaits/dsp/fx/low_pass_gate.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/fx/low_pass_gate.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/fx/low_pass_gate.h **** // 
  15:eurorack/plaits/dsp/fx/low_pass_gate.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/fx/low_pass_gate.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/fx/low_pass_gate.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/fx/low_pass_gate.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/fx/low_pass_gate.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/fx/low_pass_gate.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/fx/low_pass_gate.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/fx/low_pass_gate.h **** // 
  23:eurorack/plaits/dsp/fx/low_pass_gate.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/fx/low_pass_gate.h **** //
  25:eurorack/plaits/dsp/fx/low_pass_gate.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/fx/low_pass_gate.h **** //
  27:eurorack/plaits/dsp/fx/low_pass_gate.h **** // Approximative low pass gate.
  28:eurorack/plaits/dsp/fx/low_pass_gate.h **** 
  29:eurorack/plaits/dsp/fx/low_pass_gate.h **** #ifndef PLAITS_DSP_FX_LOW_PASS_GATE_H_
  30:eurorack/plaits/dsp/fx/low_pass_gate.h **** #define PLAITS_DSP_FX_LOW_PASS_GATE_H_
  31:eurorack/plaits/dsp/fx/low_pass_gate.h **** 
  32:eurorack/plaits/dsp/fx/low_pass_gate.h **** #include <algorithm>
  33:eurorack/plaits/dsp/fx/low_pass_gate.h **** 
  34:eurorack/plaits/dsp/fx/low_pass_gate.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/fx/low_pass_gate.h **** #include "stmlib/dsp/filter.h"
  36:eurorack/plaits/dsp/fx/low_pass_gate.h **** #include "stmlib/dsp/parameter_interpolator.h"
  37:eurorack/plaits/dsp/fx/low_pass_gate.h **** 
  38:eurorack/plaits/dsp/fx/low_pass_gate.h **** namespace plaits {
  39:eurorack/plaits/dsp/fx/low_pass_gate.h ****   
  40:eurorack/plaits/dsp/fx/low_pass_gate.h **** class LowPassGate {
  41:eurorack/plaits/dsp/fx/low_pass_gate.h ****  public:
  42:eurorack/plaits/dsp/fx/low_pass_gate.h ****   LowPassGate() { }
 836              		.loc 39 42 3 is_stmt 1 view .LVU233
 837              	.LBB1391:
 838              	.LBI1391:
 839              		.loc 9 179 3 view .LVU234
 840              		.loc 9 179 3 is_stmt 0 view .LVU235
 841              	.LBE1391:
 842              	.LBE1390:
 843              	.LBE1388:
 844              	.LBB1392:
 845              	.LBI1392:
  68:eurorack/plaits/dsp/voice.h ****   ~ChannelPostProcessor() { }
 846              		.loc 4 68 3 is_stmt 1 view .LVU236
 847              	.LBB1393:
 848              	.LBI1393:
 849              		.loc 38 43 3 view .LVU237
 850              		.loc 38 43 3 is_stmt 0 view .LVU238
 851              	.LBE1393:
 852              	.LBB1394:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 64


 853              	.LBI1394:
 854              		.loc 39 42 3 is_stmt 1 view .LVU239
 855              	.LBB1395:
 856              	.LBI1395:
 857              		.loc 9 179 3 view .LVU240
 858              		.loc 9 179 3 is_stmt 0 view .LVU241
 859              	.LBE1395:
 860              	.LBE1394:
 861              	.LBE1392:
 862              	.LBB1396:
 863              	.LBI1396:
  81:eurorack/plaits/dsp/engine/engine.h ****   ~Engine() { }
  82:eurorack/plaits/dsp/engine/engine.h ****   virtual void Init(stmlib::BufferAllocator* allocator) = 0;
  83:eurorack/plaits/dsp/engine/engine.h ****   virtual void Reset() = 0;
  84:eurorack/plaits/dsp/engine/engine.h ****   virtual void Render(
  85:eurorack/plaits/dsp/engine/engine.h ****       const EngineParameters& parameters,
  86:eurorack/plaits/dsp/engine/engine.h ****       float* out,
  87:eurorack/plaits/dsp/engine/engine.h ****       float* aux,
  88:eurorack/plaits/dsp/engine/engine.h ****       size_t size,
  89:eurorack/plaits/dsp/engine/engine.h ****       bool* already_enveloped) = 0;
  90:eurorack/plaits/dsp/engine/engine.h ****   PostProcessingSettings post_processing_settings;
  91:eurorack/plaits/dsp/engine/engine.h **** };
  92:eurorack/plaits/dsp/engine/engine.h **** 
  93:eurorack/plaits/dsp/engine/engine.h **** template<int max_size>
  94:eurorack/plaits/dsp/engine/engine.h **** class EngineRegistry {
  95:eurorack/plaits/dsp/engine/engine.h ****  public:
  96:eurorack/plaits/dsp/engine/engine.h ****   EngineRegistry() { }
 864              		.loc 6 96 3 is_stmt 1 view .LVU242
 865              		.loc 6 96 3 is_stmt 0 view .LVU243
 866              	.LBE1396:
 867              	.LBE1401:
  20:Polyphony.cpp ****     // Constructor: Initialize arrays to zero or default states if necessary.
 868              		.loc 1 20 103 is_stmt 1 view .LVU244
  20:Polyphony.cpp ****     // Constructor: Initialize arrays to zero or default states if necessary.
 869              		.loc 1 20 103 view .LVU245
 870 0056 03F55B63 		add	r3, r3, #3504
 871 005a 9342     		cmp	r3, r2
 872 005c D5D1     		bne	.L20
  20:Polyphony.cpp ****     // Constructor: Initialize arrays to zero or default states if necessary.
 873              		.loc 1 20 103 discriminator 2 view .LVU246
 874 005e 04F56452 		add	r2, r4, #14592
 875 0062 04F56053 		add	r3, r4, #14336
 876 0066 1032     		adds	r2, r2, #16
 877              	.LVL32:
 878              	.L21:
 879              	.LBB1402:
 880              	.LBI1402:
  20:VoiceEnvelope.h ****         current_state(ENV_IDLE),
 881              		.loc 3 20 5 view .LVU247
 882              	.LBB1403:
  27:VoiceEnvelope.h ****     {}
 883              		.loc 3 27 31 is_stmt 0 view .LVU248
 884 0068 0121     		movs	r1, #1
 885 006a 0025     		movs	r5, #0
 886 006c 4FF07C50 		mov	r0, #1056964608
 887              	.LBE1403:
 888              	.LBE1402:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 65


  20:Polyphony.cpp ****     // Constructor: Initialize arrays to zero or default states if necessary.
 889              		.loc 1 20 103 view .LVU249
 890 0070 4433     		adds	r3, r3, #68
 891              	.LVL33:
 892              	.LBB1405:
 893              	.LBB1404:
  27:VoiceEnvelope.h ****     {}
 894              		.loc 3 27 31 view .LVU250
 895 0072 03F8431C 		strb	r1, [r3, #-67]
 896 0076 0021     		movs	r1, #0
 897 0078 03F8445C 		strb	r5, [r3, #-68]
 898 007c 43F8401C 		str	r1, [r3, #-64]	@ float
 899 0080 43F83C0C 		str	r0, [r3, #-60]	@ float
 900 0084 43F8380C 		str	r0, [r3, #-56]	@ float
 901 0088 43F8085C 		str	r5, [r3, #-8]
 902 008c 43F8041C 		str	r1, [r3, #-4]	@ float
 903              	.LVL34:
  27:VoiceEnvelope.h ****     {}
 904              		.loc 3 27 31 view .LVU251
 905              	.LBE1404:
 906              	.LBE1405:
  20:Polyphony.cpp ****     // Constructor: Initialize arrays to zero or default states if necessary.
 907              		.loc 1 20 103 is_stmt 1 view .LVU252
  20:Polyphony.cpp ****     // Constructor: Initialize arrays to zero or default states if necessary.
 908              		.loc 1 20 103 view .LVU253
 909 0090 9342     		cmp	r3, r2
 910 0092 E9D1     		bne	.L21
  20:Polyphony.cpp ****     // Constructor: Initialize arrays to zero or default states if necessary.
 911              		.loc 1 20 103 is_stmt 0 discriminator 6 view .LVU254
 912 0094 04F54053 		add	r3, r4, #12288
  24:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
 913              		.loc 1 24 11 discriminator 6 view .LVU255
 914 0098 04F56450 		add	r0, r4, #14592
 915 009c 2946     		mov	r1, r5
 916 009e 1022     		movs	r2, #16
  20:Polyphony.cpp ****     // Constructor: Initialize arrays to zero or default states if necessary.
 917              		.loc 1 20 103 discriminator 6 view .LVU256
 918 00a0 C3F8A45A 		str	r5, [r3, #2724]
  24:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
 919              		.loc 1 24 11 discriminator 6 view .LVU257
 920 00a4 1430     		adds	r0, r0, #20
  20:Polyphony.cpp ****     // Constructor: Initialize arrays to zero or default states if necessary.
 921              		.loc 1 20 103 discriminator 6 view .LVU258
 922 00a6 C3F8A85A 		str	r5, [r3, #2728]
 923 00aa 83F8AC5A 		strb	r5, [r3, #2732]
 924 00ae A3F8AE5A 		strh	r5, [r3, #2734]	@ movhi
  23:Polyphony.cpp ****     memset(voice_note_, 0, sizeof(voice_note_));
 925              		.loc 1 23 5 is_stmt 1 discriminator 6 view .LVU259
  23:Polyphony.cpp ****     memset(voice_note_, 0, sizeof(voice_note_));
 926              		.loc 1 23 11 is_stmt 0 discriminator 6 view .LVU260
 927 00b2 43F61013 		movw	r3, #14608
 928 00b6 E550     		str	r5, [r4, r3]	@ unaligned
  24:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
 929              		.loc 1 24 5 is_stmt 1 discriminator 6 view .LVU261
  24:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
 930              		.loc 1 24 11 is_stmt 0 discriminator 6 view .LVU262
 931 00b8 FFF7FEFF 		bl	memset
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 66


 932              	.LVL35:
  25:Polyphony.cpp ****     memset(mix_buffer_aux_, 0, sizeof(mix_buffer_aux_));
 933              		.loc 1 25 5 is_stmt 1 discriminator 6 view .LVU263
  25:Polyphony.cpp ****     memset(mix_buffer_aux_, 0, sizeof(mix_buffer_aux_));
 934              		.loc 1 25 11 is_stmt 0 discriminator 6 view .LVU264
 935 00bc 04F56850 		add	r0, r4, #14848
 936 00c0 2946     		mov	r1, r5
 937 00c2 4022     		movs	r2, #64
 938 00c4 2430     		adds	r0, r0, #36
 939 00c6 FFF7FEFF 		bl	memset
 940              	.LVL36:
  26:Polyphony.cpp ****     // output_buffers_ will be filled during rendering.
 941              		.loc 1 26 5 is_stmt 1 discriminator 6 view .LVU265
  26:Polyphony.cpp ****     // output_buffers_ will be filled during rendering.
 942              		.loc 1 26 11 is_stmt 0 discriminator 6 view .LVU266
 943 00ca 04F56950 		add	r0, r4, #14912
 944 00ce 4022     		movs	r2, #64
 945 00d0 2946     		mov	r1, r5
 946 00d2 2430     		adds	r0, r0, #36
 947 00d4 FFF7FEFF 		bl	memset
 948              	.LVL37:
 949              	.LBE1411:
  29:Polyphony.cpp **** 
 950              		.loc 1 29 1 discriminator 6 view .LVU267
 951 00d8 2046     		mov	r0, r4
 952 00da 38BD     		pop	{r3, r4, r5, pc}
 953              	.LVL38:
 954              	.L25:
  29:Polyphony.cpp **** 
 955              		.loc 1 29 1 discriminator 6 view .LVU268
 956              		.align	2
 957              	.L24:
 958 00dc 08000000 		.word	_ZTVN6plaits14AdditiveEngineE+8
 959 00e0 08000000 		.word	_ZTVN6plaits14BassDrumEngineE+8
 960 00e4 08000000 		.word	_ZTVN6plaits8FMEngineE+8
 961 00e8 08000000 		.word	_ZTVN6plaits11GrainEngineE+8
 962 00ec 08000000 		.word	_ZTVN6plaits11HiHatEngineE+8
 963 00f0 08000000 		.word	_ZTVN6plaits11ModalEngineE+8
 964 00f4 08000000 		.word	_ZTVN6plaits11NoiseEngineE+8
 965 00f8 08000000 		.word	_ZTVN6plaits14ParticleEngineE+8
 966 00fc 08000000 		.word	_ZTVN6plaits15SnareDrumEngineE+8
 967 0100 08000000 		.word	_ZTVN6plaits12StringEngineE+8
 968 0104 08000000 		.word	_ZTVN6plaits11SwarmEngineE+8
 969 0108 08000000 		.word	_ZTVN6plaits19VirtualAnalogEngineE+8
 970 010c 08000000 		.word	_ZTVN6plaits17WaveshapingEngineE+8
 971              		.cfi_endproc
 972              	.LFE5346:
 974              		.global	_ZN15PolyphonyEngineC1Ev
 975              		.thumb_set _ZN15PolyphonyEngineC1Ev,_ZN15PolyphonyEngineC2Ev
 976              		.section	.text._ZN15PolyphonyEngine11ResetVoicesEv,"ax",%progbits
 977              		.align	1
 978              		.global	_ZN15PolyphonyEngine11ResetVoicesEv
 979              		.syntax unified
 980              		.thumb
 981              		.thumb_func
 983              	_ZN15PolyphonyEngine11ResetVoicesEv:
 984              	.LVL39:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 67


 985              	.LFB5354:
  38:Polyphony.cpp **** 
  39:Polyphony.cpp **** void PolyphonyEngine::Init(daisy::DaisySeed* hw) {
  40:Polyphony.cpp ****     hw_ptr_ = hw;
  41:Polyphony.cpp ****     AllocateVoices(); 
  42:Polyphony.cpp ****     InitVoiceParameters(); 
  43:Polyphony.cpp **** }
  44:Polyphony.cpp **** 
  45:Polyphony.cpp **** void PolyphonyEngine::HandleTouchInput(uint16_t current_touch_state_param, uint16_t last_touch_stat
  46:Polyphony.cpp ****     // Ported from global HandleTouchInput in Polyphony.cpp
  47:Polyphony.cpp ****     // Uses current_touch_state_param directly, and updates last_touch_state_member_ at the end.
  48:Polyphony.cpp ****     
  49:Polyphony.cpp ****     bool percussive_engine = (engine_index > 7);
  50:Polyphony.cpp **** 
  51:Polyphony.cpp ****     // kTouchMidiNotes is now PolyphonyEngine::kTouchMidiNotes_
  52:Polyphony.cpp **** 
  53:Polyphony.cpp ****     for (int i = 0; i < 12; ++i) {
  54:Polyphony.cpp ****         bool pad_currently_pressed = (current_touch_state_param >> i) & 1;
  55:Polyphony.cpp ****         // Use the passed last_touch_state_param for this iteration's comparison
  56:Polyphony.cpp ****         bool pad_was_pressed = (last_touch_state_param >> i) & 1; 
  57:Polyphony.cpp ****         float note_for_pad = PolyphonyEngine::kTouchMidiNotes_[i]; // Use static class member
  58:Polyphony.cpp **** 
  59:Polyphony.cpp ****         if (pad_currently_pressed && !pad_was_pressed) { // Note ON
  60:Polyphony.cpp ****             if (poly_mode) {
  61:Polyphony.cpp ****                 int voice_idx = FindAvailableVoiceInternal(effective_num_voices); 
  62:Polyphony.cpp ****                 if (voice_idx != -1) {
  63:Polyphony.cpp ****                     voice_note_[voice_idx] = note_for_pad;
  64:Polyphony.cpp ****                     voice_active_[voice_idx] = true;
  65:Polyphony.cpp ****                     modulations_[voice_idx].trigger = 1.0f; 
  66:Polyphony.cpp ****                     if (percussive_engine) {
  67:Polyphony.cpp ****                         modulations_[voice_idx].trigger_patched = true;
  68:Polyphony.cpp ****                     } else {
  69:Polyphony.cpp ****                         modulations_[voice_idx].trigger_patched = false;
  70:Polyphony.cpp ****                     }
  71:Polyphony.cpp ****                     voice_envelopes_[voice_idx].Trigger(); 
  72:Polyphony.cpp ****                 }
  73:Polyphony.cpp ****                 // TODO: Implement voice stealing if voice_idx == -1 (all voices busy)
  74:Polyphony.cpp ****                 // else { StealVoice(...) }
  75:Polyphony.cpp ****             } else { // Mono mode
  76:Polyphony.cpp ****                 AssignMonoNoteInternal(note_for_pad, engine_index, percussive_engine);
  77:Polyphony.cpp ****             }
  78:Polyphony.cpp ****         } else if (!pad_currently_pressed && pad_was_pressed) { // Note OFF
  79:Polyphony.cpp ****             if (poly_mode) {
  80:Polyphony.cpp ****                  int voice_idx = FindVoiceForNote(note_for_pad, engine_index, poly_mode, effective_
  81:Polyphony.cpp ****                  if (voice_idx != -1) {
  82:Polyphony.cpp ****                      voice_active_[voice_idx] = false; 
  83:Polyphony.cpp ****                      voice_envelopes_[voice_idx].Release(); 
  84:Polyphony.cpp ****                      // Ensure trigger_patched is false on note off for poly voices if it was set t
  85:Polyphony.cpp ****                      modulations_[voice_idx].trigger_patched = false; 
  86:Polyphony.cpp ****                  }
  87:Polyphony.cpp ****             } else { // Mono mode
  88:Polyphony.cpp ****                 if (voice_active_[0] && fabsf(voice_note_[0] - note_for_pad) < 0.1f) {
  89:Polyphony.cpp ****                     voice_active_[0] = false; 
  90:Polyphony.cpp ****                     voice_envelopes_[0].Release();
  91:Polyphony.cpp ****                     modulations_[0].trigger_patched = false; // Also for mono mode
  92:Polyphony.cpp ****                 }
  93:Polyphony.cpp ****             }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 68


  94:Polyphony.cpp ****         }
  95:Polyphony.cpp ****     }
  96:Polyphony.cpp ****     // The caller (AudioProcessor::UpdateArpState) will be responsible for updating poly_engine.las
  97:Polyphony.cpp ****     // For consistency, if this function needs the *previous* state, it should be passed in.
  98:Polyphony.cpp ****     // The parameter `last_touch_state_param` is used for this block's logic.
  99:Polyphony.cpp ****     // `last_touch_state_member_` can be updated by the caller after this function returns.
 100:Polyphony.cpp **** }
 101:Polyphony.cpp **** 
 102:Polyphony.cpp **** void PolyphonyEngine::RenderBlock(int engine_index, bool poly_mode, int effective_num_voices, bool 
 103:Polyphony.cpp ****                                  float pitch_val, float harm_knob_val, float morph_knob_val, 
 104:Polyphony.cpp ****                                  float timbre_knob_val, float env_attack_val, float env_release_val
 105:Polyphony.cpp ****                                  float delay_mix_val, float touch_cv_value) {
 106:Polyphony.cpp ****     // This function will orchestrate the voice rendering for a block.
 107:Polyphony.cpp ****     
 108:Polyphony.cpp ****     // 1. Prepare voice parameters (similar to the old PrepareVoiceParameters)
 109:Polyphony.cpp ****     PrepareVoiceParametersInternal(engine_index, poly_mode, effective_num_voices -1, arp_on, pitch_
 110:Polyphony.cpp **** 
 111:Polyphony.cpp ****     // 2. Process voice envelopes and mix audio (similar to the old ProcessVoiceEnvelopes)
 112:Polyphony.cpp ****     ProcessVoiceEnvelopesInternal(poly_mode);
 113:Polyphony.cpp **** 
 114:Polyphony.cpp ****     // After rendering the ARP pulse, clear triggers so next block can retrigger
 115:Polyphony.cpp ****     if (arp_on) {
 116:Polyphony.cpp ****         modulations_[0].trigger = 0.0f;
 117:Polyphony.cpp ****         modulations_[0].trigger_patched = false; 
 118:Polyphony.cpp ****     }
 119:Polyphony.cpp **** }
 120:Polyphony.cpp **** 
 121:Polyphony.cpp **** void PolyphonyEngine::ResetVoices() {
 986              		.loc 1 121 37 is_stmt 1 view -0
 987              		.cfi_startproc
 988              		@ args = 0, pretend = 0, frame = 0
 989              		@ frame_needed = 0, uses_anonymous_args = 0
 122:Polyphony.cpp ****     // Logic ported from global ResetVoiceStates() and enhanced.
 123:Polyphony.cpp ****     for (int v = 0; v < NUM_VOICES; v++) {
 990              		.loc 1 123 5 view .LVU270
 991              	.LBB1412:
 992              		.loc 1 123 23 view .LVU271
 993              	.LBE1412:
 121:Polyphony.cpp ****     // Logic ported from global ResetVoiceStates() and enhanced.
 994              		.loc 1 121 37 is_stmt 0 view .LVU272
 995 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 996              		.cfi_def_cfa_offset 24
 997              		.cfi_offset 3, -24
 998              		.cfi_offset 4, -20
 999              		.cfi_offset 5, -16
 1000              		.cfi_offset 6, -12
 1001              		.cfi_offset 7, -8
 1002              		.cfi_offset 14, -4
 1003 0002 00F56456 		add	r6, r0, #14592
 1004 0006 00F55D55 		add	r5, r0, #14144
 1005 000a 00F56454 		add	r4, r0, #14592
 1006 000e 00F56057 		add	r7, r0, #14336
 1007 0012 1036     		adds	r6, r6, #16
 1008 0014 3835     		adds	r5, r5, #56
 1009 0016 1434     		adds	r4, r4, #20
 1010              	.LVL40:
 1011              	.L27:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 69


 1012              	.LBB1413:
 124:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 1013              		.loc 1 124 9 is_stmt 1 discriminator 2 view .LVU273
 1014              		.loc 1 124 34 is_stmt 0 discriminator 2 view .LVU274
 1015 0018 3846     		mov	r0, r7
 123:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 1016              		.loc 1 123 23 discriminator 2 view .LVU275
 1017 001a 2835     		adds	r5, r5, #40
 1018              		.loc 1 124 34 discriminator 2 view .LVU276
 1019 001c FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 1020              	.LVL41:
 125:Polyphony.cpp ****         voice_active_[v] = false;
 1021              		.loc 1 125 9 is_stmt 1 discriminator 2 view .LVU277
 1022              		.loc 1 125 26 is_stmt 0 discriminator 2 view .LVU278
 1023 0020 0023     		movs	r3, #0
 126:Polyphony.cpp ****         modulations_[v].trigger = 0.0f;
 1024              		.loc 1 126 33 discriminator 2 view .LVU279
 1025 0022 0022     		movs	r2, #0
 123:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 1026              		.loc 1 123 23 discriminator 2 view .LVU280
 1027 0024 4437     		adds	r7, r7, #68
 125:Polyphony.cpp ****         voice_active_[v] = false;
 1028              		.loc 1 125 26 discriminator 2 view .LVU281
 1029 0026 06F8013B 		strb	r3, [r6], #1
 1030              	.LVL42:
 1031              		.loc 1 126 9 is_stmt 1 discriminator 2 view .LVU282
 123:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 1032              		.loc 1 123 23 is_stmt 0 discriminator 2 view .LVU283
 1033 002a A642     		cmp	r6, r4
 1034              		.loc 1 126 33 discriminator 2 view .LVU284
 1035 002c 45F8282C 		str	r2, [r5, #-40]	@ float
 127:Polyphony.cpp ****         modulations_[v].trigger_patched = false; // Ensure modulation triggers are reset
 1036              		.loc 1 127 9 is_stmt 1 discriminator 2 view .LVU285
 1037              		.loc 1 127 41 is_stmt 0 discriminator 2 view .LVU286
 1038 0030 05F81D3C 		strb	r3, [r5, #-29]
 128:Polyphony.cpp ****         modulations_[v].level_patched = false;   // Ensure level patching is reset
 1039              		.loc 1 128 9 is_stmt 1 discriminator 2 view .LVU287
 1040              		.loc 1 128 39 is_stmt 0 discriminator 2 view .LVU288
 1041 0034 05F81C3C 		strb	r3, [r5, #-28]
 123:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 1042              		.loc 1 123 5 is_stmt 1 discriminator 2 view .LVU289
 1043              	.LVL43:
 123:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 1044              		.loc 1 123 23 discriminator 2 view .LVU290
 1045 0038 EED1     		bne	.L27
 1046              	.LBE1413:
 129:Polyphony.cpp ****     }
 130:Polyphony.cpp **** }
 1047              		.loc 1 130 1 is_stmt 0 view .LVU291
 1048 003a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1049              		.loc 1 130 1 view .LVU292
 1050              		.cfi_endproc
 1051              	.LFE5354:
 1053              		.section	.text._ZN15PolyphonyEngine14TriggerArpNoteEiffib,"ax",%progbits
 1054              		.align	1
 1055              		.global	_ZN15PolyphonyEngine14TriggerArpNoteEiffib
 1056              		.syntax unified
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 70


 1057              		.thumb
 1058              		.thumb_func
 1060              	_ZN15PolyphonyEngine14TriggerArpNoteEiffib:
 1061              	.LVL44:
 1062              	.LFB5355:
 131:Polyphony.cpp **** 
 132:Polyphony.cpp **** void PolyphonyEngine::TriggerArpNote(int voice_index, float note, float strength, int engine_index,
 1063              		.loc 1 132 125 is_stmt 1 view -0
 1064              		.cfi_startproc
 1065              		@ args = 0, pretend = 0, frame = 0
 1066              		@ frame_needed = 0, uses_anonymous_args = 0
 133:Polyphony.cpp ****     if (voice_index < 0 || voice_index >= NUM_VOICES) return;
 1067              		.loc 1 133 5 view .LVU294
 1068 0000 0329     		cmp	r1, #3
 132:Polyphony.cpp ****     if (voice_index < 0 || voice_index >= NUM_VOICES) return;
 1069              		.loc 1 132 125 is_stmt 0 view .LVU295
 1070 0002 70B5     		push	{r4, r5, r6, lr}
 1071              		.cfi_def_cfa_offset 16
 1072              		.cfi_offset 4, -16
 1073              		.cfi_offset 5, -12
 1074              		.cfi_offset 6, -8
 1075              		.cfi_offset 14, -4
 1076              		.loc 1 133 5 view .LVU296
 1077 0004 23D8     		bhi	.L29
 134:Polyphony.cpp **** 
 135:Polyphony.cpp ****     voice_note_[voice_index] = note; // Store the note being triggered
 1078              		.loc 1 135 5 is_stmt 1 view .LVU297
 1079              		.loc 1 135 30 is_stmt 0 view .LVU298
 1080 0006 01F64464 		addw	r4, r1, #3652
 136:Polyphony.cpp ****     voice_active_[voice_index] = true; // Mark as active
 1081              		.loc 1 136 32 view .LVU299
 1082 000a 0125     		movs	r5, #1
 1083 000c 43F61016 		movw	r6, #14608
 135:Polyphony.cpp ****     voice_active_[voice_index] = true; // Mark as active
 1084              		.loc 1 135 30 view .LVU300
 1085 0010 00EB8404 		add	r4, r0, r4, lsl #2
 1086 0014 84ED010A 		vstr.32	s0, [r4, #4]
 1087              		.loc 1 136 5 is_stmt 1 view .LVU301
 1088              		.loc 1 136 32 is_stmt 0 view .LVU302
 1089 0018 4418     		adds	r4, r0, r1
 1090 001a A555     		strb	r5, [r4, r6]
 137:Polyphony.cpp **** 
 138:Polyphony.cpp ****     // Set up basic patch parameters for the ARP note
 139:Polyphony.cpp ****     // These might need to be more dynamic based on current global/knob settings
 140:Polyphony.cpp ****     patches_[voice_index].note = note; // Use the exact note from ARP
 1091              		.loc 1 140 5 is_stmt 1 view .LVU303
 1092              		.loc 1 140 32 is_stmt 0 view .LVU304
 1093 001c 2824     		movs	r4, #40
 1094 001e 04FB0104 		mla	r4, r4, r1, r0
 1095 0022 04F55B56 		add	r6, r4, #14016
 1096 0026 86ED000A 		vstr.32	s0, [r6]
 141:Polyphony.cpp ****     patches_[voice_index].engine = engine_index; 
 1097              		.loc 1 141 5 is_stmt 1 view .LVU305
 1098              		.loc 1 141 34 is_stmt 0 view .LVU306
 1099 002a 43F2DC66 		movw	r6, #14044
 1100 002e A251     		str	r2, [r4, r6]
 142:Polyphony.cpp ****     // Set other patch params (harmonics, timbre, morph) based on current settings if needed
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 71


 143:Polyphony.cpp ****     // For now, assume they are set by RenderBlock or a general update.
 144:Polyphony.cpp **** 
 145:Polyphony.cpp ****     modulations_[voice_index].trigger = strength; // Strength could be velocity (0.0 to 1.0)
 1101              		.loc 1 145 5 is_stmt 1 view .LVU307
 1102              		.loc 1 145 39 is_stmt 0 view .LVU308
 1103 0030 04F55D52 		add	r2, r4, #14144
 1104              	.LVL45:
 1105              		.loc 1 145 39 view .LVU309
 1106 0034 C2ED0E0A 		vstr.32	s1, [r2, #56]
 146:Polyphony.cpp ****     modulations_[voice_index].trigger_patched = true; // ARP directly controls the trigger
 1107              		.loc 1 146 5 is_stmt 1 view .LVU310
 1108              		.loc 1 146 47 is_stmt 0 view .LVU311
 1109 0038 43F28372 		movw	r2, #14211
 1110 003c A554     		strb	r5, [r4, r2]
 147:Polyphony.cpp **** 
 148:Polyphony.cpp ****     if (!percussive_engine) {
 1111              		.loc 1 148 5 is_stmt 1 view .LVU312
 1112 003e 33B9     		cbnz	r3, .L29
 149:Polyphony.cpp ****         voice_envelopes_[voice_index].Trigger(); // Trigger the ADSR/AR envelope
 1113              		.loc 1 149 9 view .LVU313
 1114              		.loc 1 149 46 is_stmt 0 view .LVU314
 1115 0040 4423     		movs	r3, #68
 1116              	.LVL46:
 1117              		.loc 1 149 46 view .LVU315
 1118 0042 03FB0100 		mla	r0, r3, r1, r0
 1119              	.LVL47:
 1120              		.loc 1 149 46 view .LVU316
 1121 0046 00F56050 		add	r0, r0, #14336
 1122 004a FFF7FEFF 		bl	_ZN13VoiceEnvelope7TriggerEv
 1123              	.LVL48:
 1124              	.L29:
 150:Polyphony.cpp ****     }
 151:Polyphony.cpp ****     // For percussive engines, the trigger_patched on modulations should be enough.
 152:Polyphony.cpp **** }
 1125              		.loc 1 152 1 view .LVU317
 1126 004e 70BD     		pop	{r4, r5, r6, pc}
 1127              		.cfi_endproc
 1128              	.LFE5355:
 1130              		.section	.text._ZN15PolyphonyEngine14AllocateVoicesEv,"ax",%progbits
 1131              		.align	1
 1132              		.global	_ZN15PolyphonyEngine14AllocateVoicesEv
 1133              		.syntax unified
 1134              		.thumb
 1135              		.thumb_func
 1137              	_ZN15PolyphonyEngine14AllocateVoicesEv:
 1138              	.LVL49:
 1139              	.LFB5356:
 153:Polyphony.cpp **** 
 154:Polyphony.cpp **** // --- Private Helper Implementations ---
 155:Polyphony.cpp **** 
 156:Polyphony.cpp **** void PolyphonyEngine::AllocateVoices() {
 1140              		.loc 1 156 40 is_stmt 1 view -0
 1141              		.cfi_startproc
 1142              		@ args = 0, pretend = 0, frame = 0
 1143              		@ frame_needed = 0, uses_anonymous_args = 0
 157:Polyphony.cpp ****     if (!allocator_) {
 1144              		.loc 1 157 5 view .LVU319
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 72


 156:Polyphony.cpp ****     if (!allocator_) {
 1145              		.loc 1 156 40 is_stmt 0 view .LVU320
 1146 0000 70B5     		push	{r4, r5, r6, lr}
 1147              		.cfi_def_cfa_offset 16
 1148              		.cfi_offset 4, -16
 1149              		.cfi_offset 5, -12
 1150              		.cfi_offset 6, -8
 1151              		.cfi_offset 14, -4
 1152              		.loc 1 157 10 view .LVU321
 1153 0002 00F54055 		add	r5, r0, #12288
 156:Polyphony.cpp ****     if (!allocator_) {
 1154              		.loc 1 156 40 view .LVU322
 1155 0006 0446     		mov	r4, r0
 1156              		.loc 1 157 5 view .LVU323
 1157 0008 D5F8A43A 		ldr	r3, [r5, #2724]
 1158 000c 5BB9     		cbnz	r3, .L34
 158:Polyphony.cpp ****         allocator_ = new stmlib::BufferAllocator(shared_buffer, sizeof(shared_buffer));
 1159              		.loc 1 158 9 is_stmt 1 view .LVU324
 1160              		.loc 1 158 86 is_stmt 0 view .LVU325
 1161 000e 1020     		movs	r0, #16
 1162              	.LVL50:
 1163              		.loc 1 158 86 view .LVU326
 1164 0010 FFF7FEFF 		bl	_Znwj
 1165              	.LVL51:
 1166              	.LBB1414:
 1167              	.LBI1414:
  40:eurorack/stmlib/utils/buffer_allocator.h ****   
  41:eurorack/stmlib/utils/buffer_allocator.h ****   BufferAllocator(void* buffer, size_t size) {
 1168              		.loc 2 41 3 is_stmt 1 view .LVU327
 1169              	.LBE1414:
  42:eurorack/stmlib/utils/buffer_allocator.h ****     Init(buffer, size);
 1170              		.loc 2 42 5 view .LVU328
 1171              	.LBB1421:
 1172              	.LBB1415:
 1173              	.LBI1415:
  43:eurorack/stmlib/utils/buffer_allocator.h ****   }
  44:eurorack/stmlib/utils/buffer_allocator.h ****   
  45:eurorack/stmlib/utils/buffer_allocator.h ****   inline void Init(void* buffer, size_t size) {
 1174              		.loc 2 45 15 view .LVU329
 1175              	.LBB1416:
  46:eurorack/stmlib/utils/buffer_allocator.h ****     buffer_ = static_cast<uint8_t*>(buffer);
 1176              		.loc 2 46 5 view .LVU330
 1177              		.loc 2 46 13 is_stmt 0 view .LVU331
 1178 0014 0A4A     		ldr	r2, .L37
  47:eurorack/stmlib/utils/buffer_allocator.h ****     size_ = size;
 1179              		.loc 2 47 11 view .LVU332
 1180 0016 4FF48023 		mov	r3, #262144
 1181              	.LBE1416:
 1182              	.LBE1415:
 1183              	.LBE1421:
 1184              		.loc 1 158 20 view .LVU333
 1185 001a C5F8A40A 		str	r0, [r5, #2724]
 1186              	.LBB1422:
 1187              	.LBB1420:
 1188              	.LBB1419:
  46:eurorack/stmlib/utils/buffer_allocator.h ****     buffer_ = static_cast<uint8_t*>(buffer);
 1189              		.loc 2 46 13 view .LVU334
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 73


 1190 001e 4260     		str	r2, [r0, #4]
 1191              		.loc 2 47 5 is_stmt 1 view .LVU335
 1192              		.loc 2 47 11 is_stmt 0 view .LVU336
 1193 0020 C360     		str	r3, [r0, #12]
  48:eurorack/stmlib/utils/buffer_allocator.h ****     Free();
 1194              		.loc 2 48 5 is_stmt 1 view .LVU337
 1195              	.LVL52:
 1196              	.LBB1417:
 1197              	.LBI1417:
  49:eurorack/stmlib/utils/buffer_allocator.h ****   }
  50:eurorack/stmlib/utils/buffer_allocator.h **** 
  51:eurorack/stmlib/utils/buffer_allocator.h ****   template<typename T>
  52:eurorack/stmlib/utils/buffer_allocator.h ****   inline T* Allocate() {
  53:eurorack/stmlib/utils/buffer_allocator.h ****     return Allocate<T>(1);
  54:eurorack/stmlib/utils/buffer_allocator.h ****   }
  55:eurorack/stmlib/utils/buffer_allocator.h ****   
  56:eurorack/stmlib/utils/buffer_allocator.h ****   template<typename T>
  57:eurorack/stmlib/utils/buffer_allocator.h ****   inline T* Allocate(size_t size) {
  58:eurorack/stmlib/utils/buffer_allocator.h ****     size_t size_bytes = sizeof(T) * size;
  59:eurorack/stmlib/utils/buffer_allocator.h ****     if (size_bytes <= free_) {
  60:eurorack/stmlib/utils/buffer_allocator.h ****       T* start = static_cast<T*>(static_cast<void*>(next_));
  61:eurorack/stmlib/utils/buffer_allocator.h ****       next_ += size_bytes;
  62:eurorack/stmlib/utils/buffer_allocator.h ****       free_ -= size_bytes;
  63:eurorack/stmlib/utils/buffer_allocator.h ****       return start;
  64:eurorack/stmlib/utils/buffer_allocator.h ****     } else {
  65:eurorack/stmlib/utils/buffer_allocator.h ****       return NULL;
  66:eurorack/stmlib/utils/buffer_allocator.h ****     }
  67:eurorack/stmlib/utils/buffer_allocator.h ****   }
  68:eurorack/stmlib/utils/buffer_allocator.h ****   
  69:eurorack/stmlib/utils/buffer_allocator.h ****   inline void Free() {
 1198              		.loc 2 69 15 view .LVU338
 1199              	.LBB1418:
  70:eurorack/stmlib/utils/buffer_allocator.h ****     next_ = buffer_;
 1200              		.loc 2 70 5 view .LVU339
 1201              		.loc 2 70 11 is_stmt 0 view .LVU340
 1202 0022 0260     		str	r2, [r0]
  71:eurorack/stmlib/utils/buffer_allocator.h ****     free_ = size_;
 1203              		.loc 2 71 5 is_stmt 1 view .LVU341
 1204              		.loc 2 71 11 is_stmt 0 view .LVU342
 1205 0024 8360     		str	r3, [r0, #8]
 1206              	.LVL53:
 1207              	.L34:
 1208              		.loc 2 71 11 view .LVU343
 1209 0026 04F55B56 		add	r6, r4, #14016
 1210              	.LVL54:
 1211              	.L35:
 1212              		.loc 2 71 11 view .LVU344
 1213              	.LBE1418:
 1214              	.LBE1417:
 1215              	.LBE1419:
 1216              	.LBE1420:
 1217              	.LBE1422:
 1218              	.LBB1423:
 159:Polyphony.cpp ****     }
 160:Polyphony.cpp **** 
 161:Polyphony.cpp ****     for (int i = 0; i < NUM_VOICES; ++i) {
 162:Polyphony.cpp ****         voices_[i].Init(allocator_);
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 74


 1219              		.loc 1 162 9 is_stmt 1 discriminator 2 view .LVU345
 1220              		.loc 1 162 24 is_stmt 0 discriminator 2 view .LVU346
 1221 002a 2046     		mov	r0, r4
 161:Polyphony.cpp ****         voices_[i].Init(allocator_);
 1222              		.loc 1 161 23 discriminator 2 view .LVU347
 1223 002c 04F55B64 		add	r4, r4, #3504
 1224              		.loc 1 162 24 discriminator 2 view .LVU348
 1225 0030 D5F8A41A 		ldr	r1, [r5, #2724]
 1226 0034 FFF7FEFF 		bl	_ZN6plaits5Voice4InitEPN6stmlib15BufferAllocatorE
 1227              	.LVL55:
 161:Polyphony.cpp ****         voices_[i].Init(allocator_);
 1228              		.loc 1 161 5 is_stmt 1 discriminator 2 view .LVU349
 161:Polyphony.cpp ****         voices_[i].Init(allocator_);
 1229              		.loc 1 161 23 discriminator 2 view .LVU350
 1230 0038 B442     		cmp	r4, r6
 1231 003a F6D1     		bne	.L35
 1232              	.LBE1423:
 163:Polyphony.cpp ****     }
 164:Polyphony.cpp **** }
 1233              		.loc 1 164 1 is_stmt 0 view .LVU351
 1234 003c 70BD     		pop	{r4, r5, r6, pc}
 1235              	.LVL56:
 1236              	.L38:
 1237              		.loc 1 164 1 view .LVU352
 1238 003e 00BF     		.align	2
 1239              	.L37:
 1240 0040 00000000 		.word	shared_buffer
 1241              		.cfi_endproc
 1242              	.LFE5356:
 1244              		.section	.text._ZN15PolyphonyEngine19InitVoiceParametersEv,"ax",%progbits
 1245              		.align	1
 1246              		.global	_ZN15PolyphonyEngine19InitVoiceParametersEv
 1247              		.syntax unified
 1248              		.thumb
 1249              		.thumb_func
 1251              	_ZN15PolyphonyEngine19InitVoiceParametersEv:
 1252              	.LVL57:
 1253              	.LFB5357:
 165:Polyphony.cpp **** 
 166:Polyphony.cpp **** void PolyphonyEngine::InitVoiceParameters() {
 1254              		.loc 1 166 45 is_stmt 1 view -0
 1255              		.cfi_startproc
 1256              		@ args = 0, pretend = 0, frame = 0
 1257              		@ frame_needed = 0, uses_anonymous_args = 0
 167:Polyphony.cpp ****     float sample_rate_val = SAMPLE_RATE;
 1258              		.loc 1 167 5 view .LVU354
 168:Polyphony.cpp ****     if (hw_ptr_) {
 1259              		.loc 1 168 5 view .LVU355
 169:Polyphony.cpp ****         // Consider hw_ptr_->AudioSampleRate()
 170:Polyphony.cpp ****     }
 171:Polyphony.cpp **** 
 172:Polyphony.cpp ****     for (int i = 0; i < NUM_VOICES; ++i) {
 1260              		.loc 1 172 5 view .LVU356
 1261              	.LBB1441:
 1262              		.loc 1 172 23 view .LVU357
 1263              	.LBE1441:
 166:Polyphony.cpp ****     float sample_rate_val = SAMPLE_RATE;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 75


 1264              		.loc 1 166 45 is_stmt 0 view .LVU358
 1265 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1266              		.cfi_def_cfa_offset 24
 1267              		.cfi_offset 4, -24
 1268              		.cfi_offset 5, -20
 1269              		.cfi_offset 6, -16
 1270              		.cfi_offset 7, -12
 1271              		.cfi_offset 8, -8
 1272              		.cfi_offset 14, -4
 1273 0004 00F56457 		add	r7, r0, #14592
 1274 0008 00F55B55 		add	r5, r0, #14016
 1275 000c 00F56456 		add	r6, r0, #14592
 1276 0010 00F56054 		add	r4, r0, #14336
 1277 0014 1437     		adds	r7, r7, #20
 1278 0016 00F56453 		add	r3, r0, #14592
 1279 001a 1C35     		adds	r5, r5, #28
 1280 001c 1036     		adds	r6, r6, #16
 1281 001e 0134     		adds	r4, r4, #1
 1282 0020 2433     		adds	r3, r3, #36
 1283 0022 B846     		mov	r8, r7
 1284              	.LVL58:
 1285              	.L40:
 1286              	.LBB1465:
 173:Polyphony.cpp ****         patches_[i].engine = 0;      
 1287              		.loc 1 173 9 is_stmt 1 discriminator 2 view .LVU359
 174:Polyphony.cpp ****         modulations_[i].engine = 0; 
 1288              		.loc 1 174 32 is_stmt 0 discriminator 2 view .LVU360
 1289 0024 0022     		movs	r2, #0
 173:Polyphony.cpp ****         patches_[i].engine = 0;      
 1290              		.loc 1 173 28 discriminator 2 view .LVU361
 1291 0026 0021     		movs	r1, #0
 1292              	.LBB1442:
 1293              	.LBB1443:
  31:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
 1294              		.loc 3 31 23 discriminator 2 view .LVU362
 1295 0028 04F10F00 		add	r0, r4, #15
 1296 002c DFF8A4C0 		ldr	ip, .L42+12
 1297              	.LBE1443:
 1298              	.LBE1442:
 1299              		.loc 1 174 32 discriminator 2 view .LVU363
 1300 0030 C5F88420 		str	r2, [r5, #132]	@ float
 172:Polyphony.cpp ****         patches_[i].engine = 0;      
 1301              		.loc 1 172 23 discriminator 2 view .LVU364
 1302 0034 2835     		adds	r5, r5, #40
 175:Polyphony.cpp ****         modulations_[i].trigger = 0.0f;
 1303              		.loc 1 175 33 discriminator 2 view .LVU365
 1304 0036 6A67     		str	r2, [r5, #116]	@ float
 173:Polyphony.cpp ****         modulations_[i].engine = 0; 
 1305              		.loc 1 173 28 discriminator 2 view .LVU366
 1306 0038 45F8281C 		str	r1, [r5, #-40]
 174:Polyphony.cpp ****         modulations_[i].trigger = 0.0f;
 1307              		.loc 1 174 9 is_stmt 1 discriminator 2 view .LVU367
 1308              		.loc 1 175 9 discriminator 2 view .LVU368
 176:Polyphony.cpp ****         modulations_[i].level_patched = false;
 1309              		.loc 1 176 9 discriminator 2 view .LVU369
 1310              		.loc 1 176 39 is_stmt 0 discriminator 2 view .LVU370
 1311 003c 85F88010 		strb	r1, [r5, #128]
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 76


 177:Polyphony.cpp ****         voice_active_[i] = false;
 1312              		.loc 1 177 9 is_stmt 1 discriminator 2 view .LVU371
 1313              		.loc 1 177 26 is_stmt 0 discriminator 2 view .LVU372
 1314 0040 06F8011B 		strb	r1, [r6], #1
 1315              	.LVL59:
 178:Polyphony.cpp ****         voice_note_[i] = 0.0f;
 1316              		.loc 1 178 9 is_stmt 1 discriminator 2 view .LVU373
 1317              		.loc 1 178 24 is_stmt 0 discriminator 2 view .LVU374
 1318 0044 47F8042B 		str	r2, [r7], #4	@ float
 179:Polyphony.cpp ****         
 180:Polyphony.cpp ****         voice_envelopes_[i].Init(sample_rate_val); 
 1319              		.loc 1 180 9 is_stmt 1 discriminator 2 view .LVU375
 1320              	.LVL60:
 1321              	.LBB1449:
 1322              	.LBI1442:
  30:VoiceEnvelope.h ****         time_range_2x = 2.0f * 4.0f * sample_rate;  // 4s max time
 1323              		.loc 3 30 10 discriminator 2 view .LVU376
 1324              	.LBB1448:
  31:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
 1325              		.loc 3 31 9 discriminator 2 view .LVU377
  31:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
 1326              		.loc 3 31 23 is_stmt 0 discriminator 2 view .LVU378
 1327 0048 C0F800C0 		str	ip, [r0]	@ float
  32:VoiceEnvelope.h ****         min_decay_time_a = 0.4f * sample_rate;      // 400ms min decay A
 1328              		.loc 3 32 9 is_stmt 1 discriminator 2 view .LVU379
  32:VoiceEnvelope.h ****         min_decay_time_a = 0.4f * sample_rate;      // 400ms min decay A
 1329              		.loc 3 32 25 is_stmt 0 discriminator 2 view .LVU380
 1330 004c 04F11300 		add	r0, r4, #19
 1331 0050 DFF884C0 		ldr	ip, .L42+16
 1332 0054 C0F800C0 		str	ip, [r0]	@ float
  33:VoiceEnvelope.h ****         min_decay_time_b = 0.0001f * sample_rate;    // 0.1ms min decay B (pulse-like release)
 1333              		.loc 3 33 9 is_stmt 1 discriminator 2 view .LVU381
  33:VoiceEnvelope.h ****         min_decay_time_b = 0.0001f * sample_rate;    // 0.1ms min decay B (pulse-like release)
 1334              		.loc 3 33 26 is_stmt 0 discriminator 2 view .LVU382
 1335 0058 04F11700 		add	r0, r4, #23
 1336 005c DFF87CC0 		ldr	ip, .L42+20
 1337 0060 C0F800C0 		str	ip, [r0]	@ float
  34:VoiceEnvelope.h ****         reset_time = 0.008f * sample_rate;          // 8ms reset time
 1338              		.loc 3 34 9 is_stmt 1 discriminator 2 view .LVU383
  34:VoiceEnvelope.h ****         reset_time = 0.008f * sample_rate;          // 8ms reset time
 1339              		.loc 3 34 26 is_stmt 0 discriminator 2 view .LVU384
 1340 0064 04F11B00 		add	r0, r4, #27
 1341 0068 DFF874C0 		ldr	ip, .L42+24
 1342 006c C0F800C0 		str	ip, [r0]	@ float
  35:VoiceEnvelope.h ****         reset_coefficient = 1.0f / reset_time;
 1343              		.loc 3 35 9 is_stmt 1 discriminator 2 view .LVU385
  35:VoiceEnvelope.h ****         reset_coefficient = 1.0f / reset_time;
 1344              		.loc 3 35 20 is_stmt 0 discriminator 2 view .LVU386
 1345 0070 04F11F00 		add	r0, r4, #31
 1346 0074 DFF86CC0 		ldr	ip, .L42+28
 1347 0078 C0F800C0 		str	ip, [r0]	@ float
  36:VoiceEnvelope.h ****         
 1348              		.loc 3 36 9 is_stmt 1 discriminator 2 view .LVU387
  36:VoiceEnvelope.h ****         
 1349              		.loc 3 36 27 is_stmt 0 discriminator 2 view .LVU388
 1350 007c 04F12300 		add	r0, r4, #35
 1351 0080 DFF864C0 		ldr	ip, .L42+32
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 77


 1352 0084 C0F800C0 		str	ip, [r0]	@ float
  39:VoiceEnvelope.h ****         SetReleaseCurve(0.5f);
 1353              		.loc 3 39 9 is_stmt 1 discriminator 2 view .LVU389
 1354              	.LVL61:
 1355              	.LBB1444:
 1356              	.LBI1444:
 109:VoiceEnvelope.h ****         float cu = value - 0.5f;
 1357              		.loc 3 109 10 discriminator 2 view .LVU390
 1358              	.LBB1445:
 110:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
 1359              		.loc 3 110 9 discriminator 2 view .LVU391
 111:VoiceEnvelope.h ****     }
 1360              		.loc 3 111 9 discriminator 2 view .LVU392
 111:VoiceEnvelope.h ****     }
 1361              		.loc 3 111 34 is_stmt 0 discriminator 2 view .LVU393
 1362 0088 E01D     		adds	r0, r4, #7
 1363 008a 0260     		str	r2, [r0]	@ float
 1364              	.LVL62:
 111:VoiceEnvelope.h ****     }
 1365              		.loc 3 111 34 discriminator 2 view .LVU394
 1366              	.LBE1445:
 1367              	.LBE1444:
  40:VoiceEnvelope.h ****     }
 1368              		.loc 3 40 9 is_stmt 1 discriminator 2 view .LVU395
 1369              	.LBB1446:
 1370              	.LBI1446:
 114:VoiceEnvelope.h ****         float cu = value - 0.5f;
 1371              		.loc 3 114 10 discriminator 2 view .LVU396
 1372              	.LBB1447:
 115:VoiceEnvelope.h ****         release_curve_coefficient = 128.0f * cu * cu;
 1373              		.loc 3 115 9 discriminator 2 view .LVU397
 116:VoiceEnvelope.h ****     }
 1374              		.loc 3 116 9 discriminator 2 view .LVU398
 116:VoiceEnvelope.h ****     }
 1375              		.loc 3 116 35 is_stmt 0 discriminator 2 view .LVU399
 1376 008c 04F10B00 		add	r0, r4, #11
 1377 0090 0260     		str	r2, [r0]	@ float
 1378              	.LVL63:
 116:VoiceEnvelope.h ****     }
 1379              		.loc 3 116 35 discriminator 2 view .LVU400
 1380              	.LBE1447:
 1381              	.LBE1446:
 1382              	.LBE1448:
 1383              	.LBE1449:
 181:Polyphony.cpp ****         voice_envelopes_[i].SetMode(VoiceEnvelope::MODE_AR);
 1384              		.loc 1 181 9 is_stmt 1 discriminator 2 view .LVU401
 1385              	.LBB1450:
 1386              	.LBI1450:
  43:VoiceEnvelope.h ****         mode = new_mode;
 1387              		.loc 3 43 10 discriminator 2 view .LVU402
 1388              	.LBB1451:
  44:VoiceEnvelope.h ****     }
 1389              		.loc 3 44 9 discriminator 2 view .LVU403
 1390              	.LBE1451:
 1391              	.LBE1450:
 1392              	.LBB1453:
 1393              	.LBB1454:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 78


 1394              	.LBB1455:
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 1395              		.loc 3 56 25 is_stmt 0 discriminator 2 view .LVU404
 1396 0092 0922     		movs	r2, #9
 1397              	.LBE1455:
  60:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
 1398              		.loc 3 60 28 discriminator 2 view .LVU405
 1399 0094 0C48     		ldr	r0, .L42
 1400              	.LBB1456:
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 1401              		.loc 3 56 25 discriminator 2 view .LVU406
 1402 0096 C4F83320 		str	r2, [r4, #51]
  57:VoiceEnvelope.h ****             curve = 0.5f;
 1403              		.loc 3 57 24 discriminator 2 view .LVU407
 1404 009a 0C4A     		ldr	r2, .L42+4
 1405              	.LBE1456:
 1406              	.LBE1454:
 1407              	.LBE1453:
 1408              	.LBB1461:
 1409              	.LBB1452:
  44:VoiceEnvelope.h ****     }
 1410              		.loc 3 44 14 discriminator 2 view .LVU408
 1411 009c 2170     		strb	r1, [r4]
 1412              	.LVL64:
  44:VoiceEnvelope.h ****     }
 1413              		.loc 3 44 14 discriminator 2 view .LVU409
 1414              	.LBE1452:
 1415              	.LBE1461:
 182:Polyphony.cpp ****         voice_envelopes_[i].SetShape(0.5f);
 1416              		.loc 1 182 9 is_stmt 1 discriminator 2 view .LVU410
 1417              	.LBB1462:
 1418              	.LBI1453:
  48:VoiceEnvelope.h ****         float curve;
 1419              		.loc 3 48 10 discriminator 2 view .LVU411
 1420              	.LBB1458:
  49:VoiceEnvelope.h ****         if (value < 0.5f) {
 1421              		.loc 3 49 9 discriminator 2 view .LVU412
  50:VoiceEnvelope.h ****             attack_time = min_attack_time;
 1422              		.loc 3 50 9 discriminator 2 view .LVU413
 1423              	.LBB1457:
  55:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(time_range_2x * norm_val * norm_val) + min_attack_tim
 1424              		.loc 3 55 13 discriminator 2 view .LVU414
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 1425              		.loc 3 56 13 discriminator 2 view .LVU415
  57:VoiceEnvelope.h ****             curve = 0.5f;
 1426              		.loc 3 57 13 discriminator 2 view .LVU416
  57:VoiceEnvelope.h ****             curve = 0.5f;
 1427              		.loc 3 57 24 is_stmt 0 discriminator 2 view .LVU417
 1428 009e C4F83720 		str	r2, [r4, #55]
  58:VoiceEnvelope.h ****         }
 1429              		.loc 3 58 13 is_stmt 1 discriminator 2 view .LVU418
 1430              	.LVL65:
  58:VoiceEnvelope.h ****         }
 1431              		.loc 3 58 13 is_stmt 0 discriminator 2 view .LVU419
 1432              	.LBE1457:
  60:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
 1433              		.loc 3 60 9 is_stmt 1 discriminator 2 view .LVU420
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 79


  60:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
 1434              		.loc 3 60 28 is_stmt 0 discriminator 2 view .LVU421
 1435 00a2 04F12B02 		add	r2, r4, #43
 1436 00a6 1060     		str	r0, [r2]	@ float
  61:VoiceEnvelope.h ****         SetAttackCurve(curve);
 1437              		.loc 3 61 9 is_stmt 1 discriminator 2 view .LVU422
  61:VoiceEnvelope.h ****         SetAttackCurve(curve);
 1438              		.loc 3 61 27 is_stmt 0 discriminator 2 view .LVU423
 1439 00a8 04F12F02 		add	r2, r4, #47
 1440 00ac 0848     		ldr	r0, .L42+8
 1441              	.LBE1458:
 1442              	.LBE1462:
 172:Polyphony.cpp ****         patches_[i].engine = 0;      
 1443              		.loc 1 172 23 discriminator 2 view .LVU424
 1444 00ae 4434     		adds	r4, r4, #68
 1445              	.LBB1463:
 1446              	.LBB1459:
  61:VoiceEnvelope.h ****         SetAttackCurve(curve);
 1447              		.loc 3 61 27 discriminator 2 view .LVU425
 1448 00b0 1060     		str	r0, [r2]	@ float
  62:VoiceEnvelope.h ****         SetReleaseCurve(curve);
 1449              		.loc 3 62 9 is_stmt 1 discriminator 2 view .LVU426
 1450              	.LVL66:
  62:VoiceEnvelope.h ****         SetReleaseCurve(curve);
 1451              		.loc 3 62 9 is_stmt 0 discriminator 2 view .LVU427
 1452              	.LBE1459:
 1453              	.LBE1463:
 1454              	.LBE1465:
 110:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
 1455              		.loc 3 110 9 is_stmt 1 discriminator 2 view .LVU428
 111:VoiceEnvelope.h ****     }
 1456              		.loc 3 111 9 discriminator 2 view .LVU429
 1457              	.LBB1466:
 1458              	.LBB1464:
 1459              	.LBB1460:
  63:VoiceEnvelope.h ****     }
 1460              		.loc 3 63 9 discriminator 2 view .LVU430
  63:VoiceEnvelope.h ****     }
 1461              		.loc 3 63 9 is_stmt 0 discriminator 2 view .LVU431
 1462              	.LBE1460:
 1463              	.LBE1464:
 1464              	.LBE1466:
 115:VoiceEnvelope.h ****         release_curve_coefficient = 128.0f * cu * cu;
 1465              		.loc 3 115 9 is_stmt 1 discriminator 2 view .LVU432
 116:VoiceEnvelope.h ****     }
 1466              		.loc 3 116 9 discriminator 2 view .LVU433
 1467              	.LBB1467:
 183:Polyphony.cpp **** 
 184:Polyphony.cpp ****         memset(output_buffers_[i], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 1468              		.loc 1 184 9 discriminator 2 view .LVU434
 1469              		.loc 1 184 15 is_stmt 0 discriminator 2 view .LVU435
 1470 00b2 1846     		mov	r0, r3
 1471 00b4 4022     		movs	r2, #64
 1472 00b6 FFF7FEFF 		bl	memset
 1473              	.LVL67:
 172:Polyphony.cpp ****         patches_[i].engine = 0;      
 1474              		.loc 1 172 23 discriminator 2 view .LVU436
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 80


 1475 00ba 4645     		cmp	r6, r8
 1476              		.loc 1 184 15 discriminator 2 view .LVU437
 1477 00bc 0346     		mov	r3, r0
 172:Polyphony.cpp ****         patches_[i].engine = 0;      
 1478              		.loc 1 172 5 is_stmt 1 discriminator 2 view .LVU438
 1479              	.LVL68:
 172:Polyphony.cpp ****         patches_[i].engine = 0;      
 1480              		.loc 1 172 23 discriminator 2 view .LVU439
 1481 00be 03F14003 		add	r3, r3, #64
 1482 00c2 AFD1     		bne	.L40
 1483              	.LBE1467:
 185:Polyphony.cpp ****     }
 186:Polyphony.cpp **** }
 1484              		.loc 1 186 1 is_stmt 0 view .LVU440
 1485 00c4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1486              	.LVL69:
 1487              	.L43:
 1488              		.loc 1 186 1 view .LVU441
 1489              		.align	2
 1490              	.L42:
 1491 00c8 398EE33D 		.word	1038323257
 1492 00cc 04650400 		.word	288004
 1493 00d0 7F036936 		.word	912851839
 1494 00d4 0080BB48 		.word	1220247552
 1495 00d8 99991941 		.word	1092196761
 1496 00dc 00009646 		.word	1184235520
 1497 00e0 99999940 		.word	1083808153
 1498 00e4 0100C043 		.word	1136656385
 1499 00e8 AAAA2A3B 		.word	992651946
 1500              		.cfi_endproc
 1501              	.LFE5357:
 1503              		.section	.text._ZN15PolyphonyEngine4InitEPN5daisy9DaisySeedE,"ax",%progbits
 1504              		.align	1
 1505              		.global	_ZN15PolyphonyEngine4InitEPN5daisy9DaisySeedE
 1506              		.syntax unified
 1507              		.thumb
 1508              		.thumb_func
 1510              	_ZN15PolyphonyEngine4InitEPN5daisy9DaisySeedE:
 1511              	.LVL70:
 1512              	.LFB5351:
  39:Polyphony.cpp ****     hw_ptr_ = hw;
 1513              		.loc 1 39 50 is_stmt 1 view -0
 1514              		.cfi_startproc
 1515              		@ args = 0, pretend = 0, frame = 0
 1516              		@ frame_needed = 0, uses_anonymous_args = 0
  40:Polyphony.cpp ****     AllocateVoices(); 
 1517              		.loc 1 40 5 view .LVU443
  40:Polyphony.cpp ****     AllocateVoices(); 
 1518              		.loc 1 40 13 is_stmt 0 view .LVU444
 1519 0000 00F54053 		add	r3, r0, #12288
  39:Polyphony.cpp ****     hw_ptr_ = hw;
 1520              		.loc 1 39 50 view .LVU445
 1521 0004 10B5     		push	{r4, lr}
 1522              		.cfi_def_cfa_offset 8
 1523              		.cfi_offset 4, -8
 1524              		.cfi_offset 14, -4
  39:Polyphony.cpp ****     hw_ptr_ = hw;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 81


 1525              		.loc 1 39 50 view .LVU446
 1526 0006 0446     		mov	r4, r0
  40:Polyphony.cpp ****     AllocateVoices(); 
 1527              		.loc 1 40 13 view .LVU447
 1528 0008 C3F8A81A 		str	r1, [r3, #2728]
  41:Polyphony.cpp ****     InitVoiceParameters(); 
 1529              		.loc 1 41 5 is_stmt 1 view .LVU448
  41:Polyphony.cpp ****     InitVoiceParameters(); 
 1530              		.loc 1 41 19 is_stmt 0 view .LVU449
 1531 000c FFF7FEFF 		bl	_ZN15PolyphonyEngine14AllocateVoicesEv
 1532              	.LVL71:
  42:Polyphony.cpp **** }
 1533              		.loc 1 42 5 is_stmt 1 view .LVU450
  42:Polyphony.cpp **** }
 1534              		.loc 1 42 24 is_stmt 0 view .LVU451
 1535 0010 2046     		mov	r0, r4
  43:Polyphony.cpp **** 
 1536              		.loc 1 43 1 view .LVU452
 1537 0012 BDE81040 		pop	{r4, lr}
 1538              		.cfi_restore 14
 1539              		.cfi_restore 4
 1540              		.cfi_def_cfa_offset 0
 1541              	.LVL72:
  42:Polyphony.cpp **** }
 1542              		.loc 1 42 24 view .LVU453
 1543 0016 FFF7FEBF 		b	_ZN15PolyphonyEngine19InitVoiceParametersEv
 1544              	.LVL73:
  42:Polyphony.cpp **** }
 1545              		.loc 1 42 24 view .LVU454
 1546              		.cfi_endproc
 1547              	.LFE5351:
 1549              		.section	.text._ZN15PolyphonyEngine29ProcessVoiceEnvelopesInternalEb,"ax",%progbits
 1550              		.align	1
 1551              		.global	_ZN15PolyphonyEngine29ProcessVoiceEnvelopesInternalEb
 1552              		.syntax unified
 1553              		.thumb
 1554              		.thumb_func
 1556              	_ZN15PolyphonyEngine29ProcessVoiceEnvelopesInternalEb:
 1557              	.LVL74:
 1558              	.LFB5359:
 187:Polyphony.cpp **** 
 188:Polyphony.cpp **** void PolyphonyEngine::PrepareVoiceParametersInternal(int engine_index, bool poly_mode, int max_voic
 189:Polyphony.cpp ****                                                    float pitch_val, float harm_knob_val, float morp
 190:Polyphony.cpp ****                                                    float timbre_knob_val, float env_attack_val, flo
 191:Polyphony.cpp ****     // TODO: Adapt logic from AudioProcessor.cpp's PrepareVoiceParameters function.
 192:Polyphony.cpp **** 
 193:Polyphony.cpp ****     bool percussive_engine = (engine_index > 7);
 194:Polyphony.cpp **** 
 195:Polyphony.cpp ****     float attack_value = 0.0f;
 196:Polyphony.cpp ****     float release_value = 0.0f;
 197:Polyphony.cpp ****     if (!percussive_engine) {
 198:Polyphony.cpp ****         float attack_raw = env_attack_val; 
 199:Polyphony.cpp ****         if (attack_raw < 0.2f) {
 200:Polyphony.cpp ****             attack_value = attack_raw * (attack_raw * 0.5f);
 201:Polyphony.cpp ****         } else {
 202:Polyphony.cpp ****             attack_value = attack_raw * attack_raw * attack_raw;
 203:Polyphony.cpp ****         }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 82


 204:Polyphony.cpp ****         release_value = env_release_val * env_release_val * env_release_val;
 205:Polyphony.cpp ****     }
 206:Polyphony.cpp **** 
 207:Polyphony.cpp ****     float global_pitch_offset = pitch_val * 24.f - 12.f;
 208:Polyphony.cpp ****     float current_global_harmonics = harm_knob_val;
 209:Polyphony.cpp ****     float current_global_morph = morph_knob_val;
 210:Polyphony.cpp ****     float current_global_timbre = timbre_knob_val;
 211:Polyphony.cpp **** 
 212:Polyphony.cpp **** 
 213:Polyphony.cpp ****     if (arp_on && percussive_engine) {
 214:Polyphony.cpp ****         RenderAndProcessPercussiveArpVoiceInternal(
 215:Polyphony.cpp ****             0, 
 216:Polyphony.cpp ****             engine_index,
 217:Polyphony.cpp ****             global_pitch_offset,
 218:Polyphony.cpp ****             current_global_harmonics,
 219:Polyphony.cpp ****             current_global_morph,
 220:Polyphony.cpp ****             current_global_timbre, 
 221:Polyphony.cpp ****             env_release_val
 222:Polyphony.cpp ****         );
 223:Polyphony.cpp ****         return; 
 224:Polyphony.cpp ****     }
 225:Polyphony.cpp **** 
 226:Polyphony.cpp ****     for (int v = 0; v <= max_voice_idx; ++v) { 
 227:Polyphony.cpp ****         UpdateVoicePatchParamsInternal(
 228:Polyphony.cpp ****             patches_[v],
 229:Polyphony.cpp ****             engine_index,
 230:Polyphony.cpp ****             voice_note_[v],
 231:Polyphony.cpp ****             global_pitch_offset,
 232:Polyphony.cpp ****             current_global_harmonics,
 233:Polyphony.cpp ****             current_global_timbre, 
 234:Polyphony.cpp ****             current_global_morph,
 235:Polyphony.cpp ****             arp_on,
 236:Polyphony.cpp ****             env_release_val
 237:Polyphony.cpp ****         );
 238:Polyphony.cpp **** 
 239:Polyphony.cpp ****         UpdateVoiceModulationAndEnvelopeInternal(
 240:Polyphony.cpp ****             modulations_[v],
 241:Polyphony.cpp ****             voice_envelopes_[v],
 242:Polyphony.cpp ****             percussive_engine,
 243:Polyphony.cpp ****             attack_value,
 244:Polyphony.cpp ****             release_value
 245:Polyphony.cpp ****         );
 246:Polyphony.cpp **** 
 247:Polyphony.cpp ****         if (!poly_mode && !arp_on) {
 248:Polyphony.cpp ****             UpdateMonoNonArpVoiceTriggerInternal(
 249:Polyphony.cpp ****                 modulations_[v],
 250:Polyphony.cpp ****                 voice_active_[v],
 251:Polyphony.cpp ****                 engine_changed_flag_
 252:Polyphony.cpp ****             );
 253:Polyphony.cpp ****         }
 254:Polyphony.cpp ****         
 255:Polyphony.cpp ****         voices_[v].Render(patches_[v], modulations_[v], output_buffers_[v], BLOCK_SIZE);
 256:Polyphony.cpp **** 
 257:Polyphony.cpp ****         if (!poly_mode && !arp_on && (patches_[v].engine > 7) && v == 0) {
 258:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 259:Polyphony.cpp ****         }
 260:Polyphony.cpp ****     }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 83


 261:Polyphony.cpp ****     
 262:Polyphony.cpp ****     int effective_voices = max_voice_idx + 1; 
 263:Polyphony.cpp ****     for (int v = effective_voices; v < NUM_VOICES; ++v) {
 264:Polyphony.cpp ****          SilenceVoiceOutputInternal(v);
 265:Polyphony.cpp ****     }
 266:Polyphony.cpp **** 
 267:Polyphony.cpp ****     if(engine_changed_flag_) {
 268:Polyphony.cpp ****         for(int v = 0; v <= max_voice_idx; ++v) {
 269:Polyphony.cpp ****             RetriggerActiveVoiceEnvelopeInternal(v);
 270:Polyphony.cpp ****         }
 271:Polyphony.cpp ****         engine_changed_flag_ = false;
 272:Polyphony.cpp ****     }
 273:Polyphony.cpp **** }
 274:Polyphony.cpp **** 
 275:Polyphony.cpp **** void PolyphonyEngine::ProcessVoiceEnvelopesInternal(bool poly_mode) {
 1559              		.loc 1 275 69 is_stmt 1 view -0
 1560              		.cfi_startproc
 1561              		@ args = 0, pretend = 0, frame = 0
 1562              		@ frame_needed = 0, uses_anonymous_args = 0
 276:Polyphony.cpp ****     // TODO: Adapt logic from AudioProcessor.cpp's ProcessVoiceEnvelopes function.
 277:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
 1563              		.loc 1 277 5 view .LVU456
 275:Polyphony.cpp ****     // TODO: Adapt logic from AudioProcessor.cpp's ProcessVoiceEnvelopes function.
 1564              		.loc 1 275 69 is_stmt 0 view .LVU457
 1565 0000 70B5     		push	{r4, r5, r6, lr}
 1566              		.cfi_def_cfa_offset 16
 1567              		.cfi_offset 4, -16
 1568              		.cfi_offset 5, -12
 1569              		.cfi_offset 6, -8
 1570              		.cfi_offset 14, -4
 1571              		.loc 1 277 11 view .LVU458
 1572 0002 00F56855 		add	r5, r0, #14848
 275:Polyphony.cpp ****     // TODO: Adapt logic from AudioProcessor.cpp's ProcessVoiceEnvelopes function.
 1573              		.loc 1 275 69 view .LVU459
 1574 0006 0446     		mov	r4, r0
 1575 0008 0E46     		mov	r6, r1
 1576              		.loc 1 277 11 view .LVU460
 1577 000a 4022     		movs	r2, #64
 1578 000c 2435     		adds	r5, r5, #36
 1579 000e 0021     		movs	r1, #0
 1580              	.LVL75:
 1581              		.loc 1 277 11 view .LVU461
 1582 0010 2846     		mov	r0, r5
 1583              	.LVL76:
 1584              		.loc 1 277 11 view .LVU462
 1585 0012 FFF7FEFF 		bl	memset
 1586              	.LVL77:
 278:Polyphony.cpp ****     memset(mix_buffer_aux_, 0, sizeof(mix_buffer_aux_));
 1587              		.loc 1 278 5 is_stmt 1 view .LVU463
 1588              		.loc 1 278 11 is_stmt 0 view .LVU464
 1589 0016 04F56953 		add	r3, r4, #14912
 1590 001a 0021     		movs	r1, #0
 1591 001c 4022     		movs	r2, #64
 1592 001e 2433     		adds	r3, r3, #36
 1593 0020 1846     		mov	r0, r3
 1594 0022 FFF7FEFF 		bl	memset
 1595              	.LVL78:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 84


 279:Polyphony.cpp **** 
 280:Polyphony.cpp ****     int voices_to_process = poly_mode ? NUM_VOICES : 1;
 1596              		.loc 1 280 39 view .LVU465
 1597 0026 002E     		cmp	r6, #0
 278:Polyphony.cpp ****     memset(mix_buffer_aux_, 0, sizeof(mix_buffer_aux_));
 1598              		.loc 1 278 11 view .LVU466
 1599 0028 0346     		mov	r3, r0
 1600              		.loc 1 280 5 is_stmt 1 view .LVU467
 1601              		.loc 1 280 39 is_stmt 0 view .LVU468
 1602 002a 1348     		ldr	r0, .L52
 1603 002c 14BF     		ite	ne
 1604 002e 0421     		movne	r1, #4
 1605 0030 0121     		moveq	r1, #1
 1606              	.LVL79:
 281:Polyphony.cpp ****     for (int v = 0; v < voices_to_process; ++v) {
 1607              		.loc 1 281 5 is_stmt 1 view .LVU469
 1608              	.LBB1468:
 1609              		.loc 1 281 23 view .LVU470
 1610 0032 8901     		lsls	r1, r1, #6
 1611              	.LVL80:
 1612              		.loc 1 281 23 is_stmt 0 view .LVU471
 1613 0034 A1F58271 		sub	r1, r1, #260
 1614              	.LVL81:
 1615              	.L48:
 1616              	.LBB1469:
 282:Polyphony.cpp ****         for (int i = 0; i < BLOCK_SIZE; ++i) {
 1617              		.loc 1 282 27 is_stmt 1 view .LVU472
 1618 0038 2A46     		mov	r2, r5
 1619              	.LVL82:
 1620              	.L47:
 283:Polyphony.cpp ****             mix_buffer_out_[i] += output_buffers_[v][i].out;
 1621              		.loc 1 283 13 discriminator 2 view .LVU473
 1622              		.loc 1 283 32 is_stmt 0 discriminator 2 view .LVU474
 1623 003a B2EC017A 		vldmia.32	r2!, {s14}
 1624 003e 145E     		ldrsh	r4, [r2, r0]
 282:Polyphony.cpp ****         for (int i = 0; i < BLOCK_SIZE; ++i) {
 1625              		.loc 1 282 27 discriminator 2 view .LVU475
 1626 0040 9A42     		cmp	r2, r3
 1627              		.loc 1 283 32 discriminator 2 view .LVU476
 1628 0042 07EE904A 		vmov	s15, r4	@ int
 284:Polyphony.cpp ****             mix_buffer_aux_[i] += output_buffers_[v][i].aux;
 1629              		.loc 1 284 57 discriminator 2 view .LVU477
 1630 0046 00F10204 		add	r4, r0, #2
 283:Polyphony.cpp ****             mix_buffer_out_[i] += output_buffers_[v][i].out;
 1631              		.loc 1 283 32 discriminator 2 view .LVU478
 1632 004a F8EEE77A 		vcvt.f32.s32	s15, s15
 1633              		.loc 1 284 32 discriminator 2 view .LVU479
 1634 004e 145F     		ldrsh	r4, [r2, r4]
 283:Polyphony.cpp ****             mix_buffer_out_[i] += output_buffers_[v][i].out;
 1635              		.loc 1 283 32 discriminator 2 view .LVU480
 1636 0050 77EE877A 		vadd.f32	s15, s15, s14
 1637 0054 42ED017A 		vstr.32	s15, [r2, #-4]
 1638              		.loc 1 284 13 is_stmt 1 discriminator 2 view .LVU481
 1639              		.loc 1 284 32 is_stmt 0 discriminator 2 view .LVU482
 1640 0058 07EE904A 		vmov	s15, r4	@ int
 1641 005c B8EEE77A 		vcvt.f32.s32	s14, s15
 1642 0060 D2ED0F7A 		vldr.32	s15, [r2, #60]
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 85


 1643 0064 77EE877A 		vadd.f32	s15, s15, s14
 1644 0068 C2ED0F7A 		vstr.32	s15, [r2, #60]
 282:Polyphony.cpp ****         for (int i = 0; i < BLOCK_SIZE; ++i) {
 1645              		.loc 1 282 9 is_stmt 1 discriminator 2 view .LVU483
 282:Polyphony.cpp ****         for (int i = 0; i < BLOCK_SIZE; ++i) {
 1646              		.loc 1 282 27 discriminator 2 view .LVU484
 1647 006c E5D1     		bne	.L47
 1648              	.LBE1469:
 281:Polyphony.cpp ****         for (int i = 0; i < BLOCK_SIZE; ++i) {
 1649              		.loc 1 281 5 discriminator 2 view .LVU485
 281:Polyphony.cpp ****         for (int i = 0; i < BLOCK_SIZE; ++i) {
 1650              		.loc 1 281 23 discriminator 2 view .LVU486
 1651 006e 4030     		adds	r0, r0, #64
 1652 0070 8842     		cmp	r0, r1
 1653 0072 E1D1     		bne	.L48
 1654              	.LBE1468:
 285:Polyphony.cpp ****         }
 286:Polyphony.cpp ****     }
 287:Polyphony.cpp **** }
 1655              		.loc 1 287 1 is_stmt 0 view .LVU487
 1656 0074 70BD     		pop	{r4, r5, r6, pc}
 1657              	.LVL83:
 1658              	.L53:
 1659              		.loc 1 287 1 view .LVU488
 1660 0076 00BF     		.align	2
 1661              	.L52:
 1662 0078 FCFEFFFF 		.word	-260
 1663              		.cfi_endproc
 1664              	.LFE5359:
 1666              		.section	.text._ZN15PolyphonyEngine30UpdateVoicePatchParamsInternalERN6plaits5PatchEifffffbf,"ax",
 1667              		.align	1
 1668              		.global	_ZN15PolyphonyEngine30UpdateVoicePatchParamsInternalERN6plaits5PatchEifffffbf
 1669              		.syntax unified
 1670              		.thumb
 1671              		.thumb_func
 1673              	_ZN15PolyphonyEngine30UpdateVoicePatchParamsInternalERN6plaits5PatchEifffffbf:
 1674              	.LVL84:
 1675              	.LFB5360:
 288:Polyphony.cpp **** 
 289:Polyphony.cpp **** // --- Implementations for other private helpers ---
 290:Polyphony.cpp **** 
 291:Polyphony.cpp **** void PolyphonyEngine::UpdateVoicePatchParamsInternal(plaits::Patch& patch, int engine_idx, float no
 1676              		.loc 1 291 254 is_stmt 1 view -0
 1677              		.cfi_startproc
 1678              		@ args = 0, pretend = 0, frame = 0
 1679              		@ frame_needed = 0, uses_anonymous_args = 0
 1680              		@ link register save eliminated.
 292:Polyphony.cpp ****     // TODO: Move logic from global UpdateVoicePatchParams
 293:Polyphony.cpp ****     patch.note = note + global_pitch_offset;
 1681              		.loc 1 293 5 view .LVU490
 1682              		.loc 1 293 23 is_stmt 0 view .LVU491
 1683 0000 70EE200A 		vadd.f32	s1, s0, s1
 1684              	.LVL85:
 294:Polyphony.cpp ****     patch.engine = engine_idx;
 295:Polyphony.cpp ****     patch.harmonics = current_global_harmonics;
 296:Polyphony.cpp ****     patch.timbre = current_global_timbre;
 297:Polyphony.cpp ****     patch.morph = current_global_morph;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 86


 298:Polyphony.cpp ****     patch.lpg_colour = 0.0f;
 299:Polyphony.cpp ****     patch.decay = arp_on ? current_decay : 0.5f;
 1685              		.loc 1 299 26 view .LVU492
 1686 0004 002B     		cmp	r3, #0
 1687 0006 F6EE007A 		vmov.f32	s15, #5.0e-1
 294:Polyphony.cpp ****     patch.engine = engine_idx;
 1688              		.loc 1 294 18 view .LVU493
 1689 000a CA61     		str	r2, [r1, #28]
 298:Polyphony.cpp ****     patch.decay = arp_on ? current_decay : 0.5f;
 1690              		.loc 1 298 22 view .LVU494
 1691 000c 4FF00002 		mov	r2, #0
 1692              	.LVL86:
 295:Polyphony.cpp ****     patch.timbre = current_global_timbre;
 1693              		.loc 1 295 21 view .LVU495
 1694 0010 81ED011A 		vstr.32	s2, [r1, #4]
 293:Polyphony.cpp ****     patch.engine = engine_idx;
 1695              		.loc 1 293 16 view .LVU496
 1696 0014 C1ED000A 		vstr.32	s1, [r1]
 294:Polyphony.cpp ****     patch.harmonics = current_global_harmonics;
 1697              		.loc 1 294 5 is_stmt 1 view .LVU497
 295:Polyphony.cpp ****     patch.timbre = current_global_timbre;
 1698              		.loc 1 295 5 view .LVU498
 296:Polyphony.cpp ****     patch.morph = current_global_morph;
 1699              		.loc 1 296 5 view .LVU499
 1700              		.loc 1 299 26 is_stmt 0 view .LVU500
 1701 0018 47FEA22A 		vseleq.f32	s5, s15, s5
 1702              	.LVL87:
 296:Polyphony.cpp ****     patch.morph = current_global_morph;
 1703              		.loc 1 296 18 view .LVU501
 1704 001c C1ED021A 		vstr.32	s3, [r1, #8]
 297:Polyphony.cpp ****     patch.lpg_colour = 0.0f;
 1705              		.loc 1 297 5 is_stmt 1 view .LVU502
 297:Polyphony.cpp ****     patch.lpg_colour = 0.0f;
 1706              		.loc 1 297 17 is_stmt 0 view .LVU503
 1707 0020 81ED032A 		vstr.32	s4, [r1, #12]
 298:Polyphony.cpp ****     patch.decay = arp_on ? current_decay : 0.5f;
 1708              		.loc 1 298 5 is_stmt 1 view .LVU504
 298:Polyphony.cpp ****     patch.decay = arp_on ? current_decay : 0.5f;
 1709              		.loc 1 298 22 is_stmt 0 view .LVU505
 1710 0024 4A62     		str	r2, [r1, #36]	@ float
 1711              		.loc 1 299 5 is_stmt 1 view .LVU506
 1712              		.loc 1 299 17 is_stmt 0 view .LVU507
 1713 0026 C1ED082A 		vstr.32	s5, [r1, #32]
 300:Polyphony.cpp ****     patch.frequency_modulation_amount = 0.f;
 1714              		.loc 1 300 5 is_stmt 1 view .LVU508
 1715              		.loc 1 300 39 is_stmt 0 view .LVU509
 1716 002a 0A61     		str	r2, [r1, #16]	@ float
 301:Polyphony.cpp ****     patch.timbre_modulation_amount = 0.f;
 1717              		.loc 1 301 5 is_stmt 1 view .LVU510
 1718              		.loc 1 301 36 is_stmt 0 view .LVU511
 1719 002c 4A61     		str	r2, [r1, #20]	@ float
 302:Polyphony.cpp ****     patch.morph_modulation_amount = 0.f;
 1720              		.loc 1 302 5 is_stmt 1 view .LVU512
 1721              		.loc 1 302 35 is_stmt 0 view .LVU513
 1722 002e 8A61     		str	r2, [r1, #24]	@ float
 303:Polyphony.cpp **** }
 1723              		.loc 1 303 1 view .LVU514
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 87


 1724 0030 7047     		bx	lr
 1725              		.cfi_endproc
 1726              	.LFE5360:
 1728              		.section	.text._ZN15PolyphonyEngine40UpdateVoiceModulationAndEnvelopeInternalERN6plaits11Modulatio
 1729              		.align	1
 1730              		.global	_ZN15PolyphonyEngine40UpdateVoiceModulationAndEnvelopeInternalERN6plaits11ModulationsER13V
 1731              		.syntax unified
 1732              		.thumb
 1733              		.thumb_func
 1735              	_ZN15PolyphonyEngine40UpdateVoiceModulationAndEnvelopeInternalERN6plaits11ModulationsER13VoiceEnvel
 1736              	.LVL88:
 1737              	.LFB5361:
 304:Polyphony.cpp **** 
 305:Polyphony.cpp **** void PolyphonyEngine::UpdateVoiceModulationAndEnvelopeInternal(plaits::Modulations& mod, VoiceEnvel
 1738              		.loc 1 305 175 is_stmt 1 view -0
 1739              		.cfi_startproc
 1740              		@ args = 0, pretend = 0, frame = 8
 1741              		@ frame_needed = 0, uses_anonymous_args = 0
 306:Polyphony.cpp ****     // TODO: Move logic from global UpdateVoiceModulationAndEnvelope
 307:Polyphony.cpp ****     mod.engine = 0;
 1742              		.loc 1 307 5 view .LVU516
 1743              		.loc 1 307 16 is_stmt 0 view .LVU517
 1744 0000 DFED7E6A 		vldr.32	s13, .L90
 1745 0004 B7EE007A 		vmov.f32	s14, #1.0e+0
 305:Polyphony.cpp ****     // TODO: Move logic from global UpdateVoiceModulationAndEnvelope
 1746              		.loc 1 305 175 view .LVU518
 1747 0008 13B5     		push	{r0, r1, r4, lr}
 1748              		.cfi_def_cfa_offset 16
 1749              		.cfi_offset 4, -8
 1750              		.cfi_offset 14, -4
 1751              		.loc 1 307 16 view .LVU519
 1752 000a C1ED006A 		vstr.32	s13, [r1]
 308:Polyphony.cpp ****     mod.note = 0.0f; 
 1753              		.loc 1 308 5 is_stmt 1 view .LVU520
 1754              		.loc 1 308 14 is_stmt 0 view .LVU521
 1755 000e C1ED016A 		vstr.32	s13, [r1, #4]
 309:Polyphony.cpp ****     mod.frequency = 0.0f;
 1756              		.loc 1 309 5 is_stmt 1 view .LVU522
 1757              		.loc 1 309 19 is_stmt 0 view .LVU523
 1758 0012 C1ED026A 		vstr.32	s13, [r1, #8]
 310:Polyphony.cpp ****     mod.harmonics = 0.0f; 
 1759              		.loc 1 310 5 is_stmt 1 view .LVU524
 1760              		.loc 1 310 19 is_stmt 0 view .LVU525
 1761 0016 C1ED036A 		vstr.32	s13, [r1, #12]
 311:Polyphony.cpp ****     mod.timbre = 0.0f;
 1762              		.loc 1 311 5 is_stmt 1 view .LVU526
 1763              		.loc 1 311 16 is_stmt 0 view .LVU527
 1764 001a C1ED046A 		vstr.32	s13, [r1, #16]
 312:Polyphony.cpp ****     mod.morph = 0.0f; 
 1765              		.loc 1 312 5 is_stmt 1 view .LVU528
 1766              		.loc 1 312 15 is_stmt 0 view .LVU529
 1767 001e C1ED056A 		vstr.32	s13, [r1, #20]
 313:Polyphony.cpp **** 
 314:Polyphony.cpp ****     if (!percussive_engine) {
 1768              		.loc 1 314 5 is_stmt 1 view .LVU530
 1769              	.LBB1497:
 1770 0022 002B     		cmp	r3, #0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 88


 1771 0024 40F0E180 		bne	.L57
 1772              	.LVL89:
 1773              		.loc 1 314 5 is_stmt 0 view .LVU531
 1774              	.LBE1497:
 1775              	.LBB1498:
 1776              	.LBI1498:
 305:Polyphony.cpp ****     // TODO: Move logic from global UpdateVoiceModulationAndEnvelope
 1777              		.loc 1 305 6 is_stmt 1 view .LVU532
 1778              	.LBB1499:
 1779              	.LBB1500:
 315:Polyphony.cpp ****         env.SetAttackTime(attack_value);
 1780              		.loc 1 315 9 view .LVU533
 1781              	.LBB1501:
 1782              	.LBI1501:
  67:VoiceEnvelope.h ****         // Map 0-1 value to attack time (exponential scaling)
 1783              		.loc 3 67 10 view .LVU534
 1784              	.LBB1502:
  70:VoiceEnvelope.h ****         
 1785              		.loc 3 70 9 view .LVU535
  73:VoiceEnvelope.h ****             // Extra fast attacks at the beginning of the range
 1786              		.loc 3 73 9 view .LVU536
 1787 0028 DFED754A 		vldr.32	s9, .L90+4
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 1788              		.loc 3 79 56 is_stmt 0 view .LVU537
 1789 002c 92ED045A 		vldr.32	s10, [r2, #16]
  73:VoiceEnvelope.h ****             // Extra fast attacks at the beginning of the range
 1790              		.loc 3 73 9 view .LVU538
 1791 0030 B4EEE40A 		vcmpe.f32	s0, s9
 1792 0034 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1793 0038 4CD5     		bpl	.L85
  75:VoiceEnvelope.h ****                                            (min_attack_time * 9.0f * value / 0.1f));
 1794              		.loc 3 75 13 is_stmt 1 view .LVU539
  76:VoiceEnvelope.h ****         } else {
 1795              		.loc 3 76 61 is_stmt 0 view .LVU540
 1796 003a B2EE026A 		vmov.f32	s12, #9.0e+0
  75:VoiceEnvelope.h ****                                            (min_attack_time * 9.0f * value / 0.1f));
 1797              		.loc 3 75 47 view .LVU541
 1798 003e D2ED055A 		vldr.32	s11, [r2, #20]
  76:VoiceEnvelope.h ****         } else {
 1799              		.loc 3 76 61 view .LVU542
 1800 0042 25EE866A 		vmul.f32	s12, s11, s12
  76:VoiceEnvelope.h ****         } else {
 1801              		.loc 3 76 68 view .LVU543
 1802 0046 26EE006A 		vmul.f32	s12, s12, s0
  76:VoiceEnvelope.h ****         } else {
 1803              		.loc 3 76 76 view .LVU544
 1804 004a C6EE247A 		vdiv.f32	s15, s12, s9
  75:VoiceEnvelope.h ****                                            (min_attack_time * 9.0f * value / 0.1f));
 1805              		.loc 3 75 63 view .LVU545
 1806 004e 77EEA57A 		vadd.f32	s15, s15, s11
 1807              	.L87:
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 1808              		.loc 3 79 27 view .LVU546
 1809 0052 FCEEE77A 		vcvt.u32.f32	s15, s15
  86:VoiceEnvelope.h ****             // More exponential curve for punchy attacks
 1810              		.loc 3 86 9 view .LVU547
 1811 0056 DFED6B5A 		vldr.32	s11, .L90+8
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 89


 1812 005a B4EEE50A 		vcmpe.f32	s0, s11
  83:VoiceEnvelope.h ****         
 1813              		.loc 3 83 35 view .LVU548
 1814 005e B8EE676A 		vcvt.f32.u32	s12, s15
 1815 0062 C2ED0D7A 		vstr.32	s15, [r2, #52]	@ int
  83:VoiceEnvelope.h ****         
 1816              		.loc 3 83 9 is_stmt 1 view .LVU549
  86:VoiceEnvelope.h ****             // More exponential curve for punchy attacks
 1817              		.loc 3 86 9 is_stmt 0 view .LVU550
 1818 0066 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  83:VoiceEnvelope.h ****         
 1819              		.loc 3 83 35 view .LVU551
 1820 006a 87EE064A 		vdiv.f32	s8, s14, s12
  83:VoiceEnvelope.h ****         
 1821              		.loc 3 83 28 view .LVU552
 1822 006e 82ED0B4A 		vstr.32	s8, [r2, #44]
  86:VoiceEnvelope.h ****             // More exponential curve for punchy attacks
 1823              		.loc 3 86 9 is_stmt 1 view .LVU553
 1824 0072 42D5     		bpl	.L86
 1825              	.LVL90:
 1826              	.LBB1503:
 1827              	.LBI1503:
  67:VoiceEnvelope.h ****         // Map 0-1 value to attack time (exponential scaling)
 1828              		.loc 3 67 10 view .LVU554
 1829              	.LBB1504:
  88:VoiceEnvelope.h ****         } else {
 1830              		.loc 3 88 13 view .LVU555
 1831              	.LBB1505:
 1832              	.LBI1505:
 109:VoiceEnvelope.h ****         float cu = value - 0.5f;
 1833              		.loc 3 109 10 view .LVU556
 1834              	.LBB1506:
 110:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
 1835              		.loc 3 110 9 view .LVU557
 1836              	.LBE1506:
 1837              	.LBE1505:
  88:VoiceEnvelope.h ****         } else {
 1838              		.loc 3 88 41 is_stmt 0 view .LVU558
 1839 0074 35EEC06A 		vsub.f32	s12, s11, s0
  88:VoiceEnvelope.h ****         } else {
 1840              		.loc 3 88 27 view .LVU559
 1841 0078 DFED635A 		vldr.32	s11, .L90+12
 1842 007c 36EE256A 		vadd.f32	s12, s12, s11
 1843              	.LVL91:
 1844              	.LBB1508:
 1845              	.LBB1507:
 110:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
 1846              		.loc 3 110 15 view .LVU560
 1847 0080 F6EE005A 		vmov.f32	s11, #5.0e-1
 1848 0084 36EE656A 		vsub.f32	s12, s12, s11
 1849              	.LVL92:
 111:VoiceEnvelope.h ****     }
 1850              		.loc 3 111 9 is_stmt 1 view .LVU561
 111:VoiceEnvelope.h ****     }
 1851              		.loc 3 111 43 is_stmt 0 view .LVU562
 1852 0088 DFED605A 		vldr.32	s11, .L90+16
 1853 008c 66EE255A 		vmul.f32	s11, s12, s11
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 90


 111:VoiceEnvelope.h ****     }
 1854              		.loc 3 111 48 view .LVU563
 1855 0090 25EE866A 		vmul.f32	s12, s11, s12
 1856              	.LVL93:
 1857              	.L61:
 111:VoiceEnvelope.h ****     }
 1858              		.loc 3 111 48 view .LVU564
 1859              	.LBE1507:
 1860              	.LBE1508:
 1861              	.LBE1504:
 1862              	.LBE1503:
 1863              	.LBE1502:
 1864              	.LBE1501:
 1865              	.LBB1512:
 1866              	.LBB1513:
  98:VoiceEnvelope.h ****         
 1867              		.loc 3 98 35 view .LVU565
 1868 0094 60EEA04A 		vmul.f32	s9, s1, s1
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 1869              		.loc 3 101 59 view .LVU566
 1870 0098 D2ED075A 		vldr.32	s11, [r2, #28]
 1871              	.LBE1513:
 1872              	.LBE1512:
 1873              	.LBB1519:
 1874              	.LBB1520:
 154:VoiceEnvelope.h ****             case ENV_IDLE:
 1875              		.loc 3 154 9 view .LVU567
 1876 009c 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 1877              	.LVL94:
 154:VoiceEnvelope.h ****             case ENV_IDLE:
 1878              		.loc 3 154 9 view .LVU568
 1879 009e 82ED026A 		vstr.32	s12, [r2, #8]
 1880              	.LVL95:
 154:VoiceEnvelope.h ****             case ENV_IDLE:
 1881              		.loc 3 154 9 view .LVU569
 1882              	.LBE1520:
 1883              	.LBE1519:
 316:Polyphony.cpp ****         env.SetReleaseTime(release_value);
 1884              		.loc 1 316 9 is_stmt 1 view .LVU570
 1885              	.LBB1538:
 1886              	.LBI1512:
  95:VoiceEnvelope.h ****         // Map 0-1 value to release time (exponential scaling)
 1887              		.loc 3 95 10 view .LVU571
 1888              	.LBB1518:
  98:VoiceEnvelope.h ****         
 1889              		.loc 3 98 9 view .LVU572
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 1890              		.loc 3 101 9 view .LVU573
  98:VoiceEnvelope.h ****         
 1891              		.loc 3 98 15 is_stmt 0 view .LVU574
 1892 00a2 64EEA00A 		vmul.f32	s1, s9, s1
 1893              	.LVL96:
 1894              	.LBB1514:
 1895              	.LBB1515:
 116:VoiceEnvelope.h ****     }
 1896              		.loc 3 116 35 view .LVU575
 1897 00a6 C2ED036A 		vstr.32	s13, [r2, #12]
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 91


 1898              	.LBE1515:
 1899              	.LBE1514:
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 1900              		.loc 3 101 59 view .LVU576
 1901 00aa E0EE855A 		vfma.f32	s11, s1, s10
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 1902              		.loc 3 101 22 view .LVU577
 1903 00ae FCEEE55A 		vcvt.u32.f32	s11, s11
 1904 00b2 15EE903A 		vmov	r3, s11	@ int
 1905              	.LVL97:
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 1906              		.loc 3 101 20 view .LVU578
 1907 00b6 C2ED0E5A 		vstr.32	s11, [r2, #56]	@ int
 103:VoiceEnvelope.h ****         
 1908              		.loc 3 103 9 is_stmt 1 view .LVU579
 103:VoiceEnvelope.h ****         
 1909              		.loc 3 103 34 is_stmt 0 view .LVU580
 1910 00ba F8EE655A 		vcvt.f32.u32	s11, s11
 1911 00be 87EE255A 		vdiv.f32	s10, s14, s11
 103:VoiceEnvelope.h ****         
 1912              		.loc 3 103 27 view .LVU581
 1913 00c2 82ED0C5A 		vstr.32	s10, [r2, #48]
 106:VoiceEnvelope.h ****     }
 1914              		.loc 3 106 9 is_stmt 1 view .LVU582
 1915              	.LVL98:
 1916              	.LBB1517:
 1917              	.LBI1514:
 114:VoiceEnvelope.h ****         float cu = value - 0.5f;
 1918              		.loc 3 114 10 view .LVU583
 1919              	.LBB1516:
 115:VoiceEnvelope.h ****         release_curve_coefficient = 128.0f * cu * cu;
 1920              		.loc 3 115 9 view .LVU584
 116:VoiceEnvelope.h ****     }
 1921              		.loc 3 116 9 view .LVU585
 116:VoiceEnvelope.h ****     }
 1922              		.loc 3 116 9 is_stmt 0 view .LVU586
 1923              	.LBE1516:
 1924              	.LBE1517:
 1925              	.LBE1518:
 1926              	.LBE1538:
 317:Polyphony.cpp ****         float env_value = env.Process();
 1927              		.loc 1 317 9 is_stmt 1 view .LVU587
 1928              	.LBB1539:
 1929              	.LBI1519:
 152:VoiceEnvelope.h ****         float ph;
 1930              		.loc 3 152 11 view .LVU588
 1931              	.LBB1535:
 153:VoiceEnvelope.h ****         switch (current_state) {
 1932              		.loc 3 153 9 view .LVU589
 154:VoiceEnvelope.h ****             case ENV_IDLE:
 1933              		.loc 3 154 9 view .LVU590
 1934 00c6 0428     		cmp	r0, #4
 1935 00c8 1CD8     		bhi	.L63
 1936 00ca DFE800F0 		tbb	[pc, r0]
 1937              	.L65:
 1938 00ce 19       		.byte	(.L69-.L65)/2
 1939 00cf 37       		.byte	(.L68-.L65)/2
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 92


 1940 00d0 55       		.byte	(.L67-.L65)/2
 1941 00d1 58       		.byte	(.L66-.L65)/2
 1942 00d2 78       		.byte	(.L64-.L65)/2
 1943              	.LVL99:
 1944 00d3 00       		.p2align 1
 1945              	.L85:
 154:VoiceEnvelope.h ****             case ENV_IDLE:
 1946              		.loc 3 154 9 is_stmt 0 view .LVU591
 1947              	.LBE1535:
 1948              	.LBE1539:
 1949              	.LBB1540:
 1950              	.LBB1511:
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 1951              		.loc 3 79 13 is_stmt 1 view .LVU592
  70:VoiceEnvelope.h ****         
 1952              		.loc 3 70 35 is_stmt 0 view .LVU593
 1953 00d4 60EE007A 		vmul.f32	s15, s0, s0
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 1954              		.loc 3 79 54 view .LVU594
 1955 00d8 9FED4D6A 		vldr.32	s12, .L90+20
  80:VoiceEnvelope.h ****         }
 1956              		.loc 3 80 59 view .LVU595
 1957 00dc F6EE005A 		vmov.f32	s11, #5.0e-1
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 1958              		.loc 3 79 54 view .LVU596
 1959 00e0 25EE066A 		vmul.f32	s12, s10, s12
  70:VoiceEnvelope.h ****         
 1960              		.loc 3 70 15 view .LVU597
 1961 00e4 67EE807A 		vmul.f32	s15, s15, s0
  80:VoiceEnvelope.h ****         }
 1962              		.loc 3 80 59 view .LVU598
 1963 00e8 65EE255A 		vmul.f32	s11, s10, s11
  80:VoiceEnvelope.h ****         }
 1964              		.loc 3 80 66 view .LVU599
 1965 00ec 67EEA57A 		vmul.f32	s15, s15, s11
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 1966              		.loc 3 79 75 view .LVU600
 1967 00f0 F4EE005A 		vmov.f32	s11, #1.25e-1
 1968 00f4 E6EE257A 		vfma.f32	s15, s12, s11
 1969 00f8 ABE7     		b	.L87
 1970              	.L86:
 1971              	.LBB1509:
 1972              	.LBB1510:
 111:VoiceEnvelope.h ****     }
 1973              		.loc 3 111 34 view .LVU601
 1974 00fa 9FED406A 		vldr.32	s12, .L90
 1975 00fe C9E7     		b	.L61
 1976              	.LVL100:
 1977              	.L69:
 111:VoiceEnvelope.h ****     }
 1978              		.loc 3 111 34 view .LVU602
 1979              	.LBE1510:
 1980              	.LBE1509:
 1981              	.LBE1511:
 1982              	.LBE1540:
 1983              	.LBB1541:
 1984              	.LBB1536:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 93


 155:VoiceEnvelope.h ****                 current_value = 0.0f;
 1985              		.loc 3 155 13 is_stmt 1 view .LVU603
 156:VoiceEnvelope.h ****                 break;
 1986              		.loc 3 156 17 view .LVU604
 156:VoiceEnvelope.h ****                 break;
 1987              		.loc 3 156 31 is_stmt 0 view .LVU605
 1988 0100 C2ED016A 		vstr.32	s13, [r2, #4]
 157:VoiceEnvelope.h **** 
 1989              		.loc 3 157 17 is_stmt 1 view .LVU606
 1990              	.L63:
 202:VoiceEnvelope.h ****     }
 1991              		.loc 3 202 9 view .LVU607
 1992              	.LBB1521:
 1993              	.LBB1522:
 1994              		.file 40 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h"
   1:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
   3:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** //
   5:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // any later version.
  10:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  11:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  16:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  20:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  25:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** /*
  26:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  27:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  30:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  38:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  39:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  42:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 94


  43:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  */
  50:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  51:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  */
  55:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  56:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  59:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  73:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** # include <type_traits>
  74:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  75:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus > 201703L
  76:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** # include <compare>
  77:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  78:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  79:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** {
  81:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  83:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /*
  84:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    * A constexpr wrapper for __builtin_memcmp.
  85:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    * @param __num The number of elements of type _Tp (not bytes).
  86:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    */
  87:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Up>
  88:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
  89:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline int
  90:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
  91:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
  92:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  93:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
  94:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  95:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
  96:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
  97:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
  98:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  for(; __num > 0; ++__first1, ++__first2, --__num)
  99:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    if (*__first1 != *__first2)
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 95


 100:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      return *__first1 < *__first2 ? -1 : 1;
 101:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return 0;
 102:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 103:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       else
 104:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 105:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 106:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 107:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 108:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 109:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
 110:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
 111:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
 112:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _BoolType>
 113:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap
 114:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 115:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 116:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static void
 117:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 119:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    _ValueType1;
 121:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
 122:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  *__a = *__b;
 123:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  *__b = __tmp;
 124:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 125:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 126:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 127:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<>
 128:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap<true>
 129:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 130:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 131:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static void
 132:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 133:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 134:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  swap(*__a, *__b);
 135:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 136:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 137:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif // C++03
 138:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 139:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 140:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 141:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 142:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 143:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 144:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   Nothing.
 145:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 146:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 147:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  iterators themselves.
 148:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 149:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 150:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 151:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline void
 152:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 153:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 154:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 155:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 156:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 96


 157:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 158:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 159:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 160:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 161:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 162:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType1;
 163:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 164:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType2;
 165:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 166:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 167:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType2>)
 168:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 169:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType1>)
 170:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 171:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 172:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType1;
 173:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 174:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType2;
 175:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 176:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 177:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 178:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 179:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #else
 180:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 181:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // 187. iter_swap underspecified
 182:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       swap(*__a, *__b);
 183:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 184:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 185:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 186:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 187:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 188:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 189:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 190:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 191:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 192:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 193:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 194:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 195:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 196:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  The ranges must not overlap.
 197:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 198:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 199:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 200:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _ForwardIterator2
 201:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 202:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 203:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 204:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 205:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 206:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 207:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 208:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 209:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 210:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 211:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 212:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 213:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __first2;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 97


 214:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 215:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 216:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 217:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 218:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 219:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 220:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 221:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 222:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 223:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 224:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 225:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 226:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 227:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 228:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 229:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 230:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 231:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 232:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 233:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 234:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 235:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (__b < __a)
 236:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 237:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 238:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 239:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 240:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 241:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 242:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 243:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 244:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 245:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 246:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 247:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 248:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 249:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 250:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 251:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 252:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 253:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 254:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 255:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 256:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 257:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 258:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 259:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (__a < __b)
 1995              		.loc 40 259 7 is_stmt 0 view .LVU608
 1996 0104 D2ED017A 		vldr.32	s15, [r2, #4]
 1997              	.LBE1522:
 1998              	.LBE1521:
 202:VoiceEnvelope.h ****     }
 1999              		.loc 3 202 49 view .LVU609
 2000 0108 CDED016A 		vstr.32	s13, [sp, #4]
 2001              	.LVL101:
 2002              	.LBB1526:
 2003              	.LBI1521:
 254:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 98


 2004              		.loc 40 254 5 is_stmt 1 view .LVU610
 2005              	.LBB1523:
 2006              		.loc 40 259 7 is_stmt 0 view .LVU611
 2007 010c F5EEC07A 		vcmpe.f32	s15, #0
 2008              	.LBE1523:
 2009              	.LBE1526:
 202:VoiceEnvelope.h ****     }
 2010              		.loc 3 202 56 view .LVU612
 2011 0110 8DED007A 		vstr.32	s14, [sp]
 2012              	.LBB1527:
 2013              	.LBB1524:
 2014              		.loc 40 259 7 view .LVU613
 2015 0114 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2016              	.LBE1524:
 2017              	.LBE1527:
 202:VoiceEnvelope.h ****     }
 2018              		.loc 3 202 34 view .LVU614
 2019 0118 54BF     		ite	pl
 2020 011a 0432     		addpl	r2, r2, #4
 2021              	.LVL102:
 2022              	.LBB1528:
 2023              	.LBB1525:
 260:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 2024              		.loc 40 260 9 view .LVU615
 2025 011c 01AA     		addmi	r2, sp, #4
 2026              	.LVL103:
 2027              		.loc 40 260 9 view .LVU616
 2028              	.LBE1525:
 2029              	.LBE1528:
 2030              	.LBB1529:
 2031              	.LBI1529:
 230:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 2032              		.loc 40 230 5 is_stmt 1 view .LVU617
 2033              	.LBB1530:
 235:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 2034              		.loc 40 235 7 is_stmt 0 view .LVU618
 2035 011e D2ED007A 		vldr.32	s15, [r2]
 2036 0122 F4EEC77A 		vcmpe.f32	s15, s14
 2037 0126 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 236:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 2038              		.loc 40 236 9 view .LVU619
 2039 012a C8BF     		it	gt
 2040 012c 6A46     		movgt	r2, sp
 2041              	.LVL104:
 236:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 2042              		.loc 40 236 9 view .LVU620
 2043              	.LBE1530:
 2044              	.LBE1529:
 202:VoiceEnvelope.h ****     }
 2045              		.loc 3 202 60 view .LVU621
 2046 012e 1368     		ldr	r3, [r2]	@ float
 2047              	.LVL105:
 202:VoiceEnvelope.h ****     }
 2048              		.loc 3 202 60 view .LVU622
 2049              	.LBE1536:
 2050              	.LBE1541:
 318:Polyphony.cpp ****         mod.level = env_value;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 99


 2051              		.loc 1 318 9 is_stmt 1 view .LVU623
 2052              		.loc 1 318 19 is_stmt 0 view .LVU624
 2053 0130 CB61     		str	r3, [r1, #28]	@ float
 319:Polyphony.cpp ****         mod.level_patched = true;
 2054              		.loc 1 319 9 is_stmt 1 view .LVU625
 2055              		.loc 1 319 27 is_stmt 0 view .LVU626
 2056 0132 0123     		movs	r3, #1
 2057              	.LVL106:
 2058              		.loc 1 319 27 view .LVU627
 2059 0134 81F82430 		strb	r3, [r1, #36]
 2060              	.LVL107:
 2061              	.L56:
 2062              		.loc 1 319 27 view .LVU628
 2063              	.LBE1500:
 2064              	.LBE1499:
 2065              	.LBE1498:
 320:Polyphony.cpp ****     } else {
 321:Polyphony.cpp ****         mod.level = 1.0f;
 322:Polyphony.cpp ****         mod.level_patched = false;
 323:Polyphony.cpp ****         mod.trigger_patched = true;
 324:Polyphony.cpp ****     }
 325:Polyphony.cpp **** }
 2066              		.loc 1 325 1 view .LVU629
 2067 0138 02B0     		add	sp, sp, #8
 2068              		.cfi_remember_state
 2069              		.cfi_def_cfa_offset 8
 2070              		@ sp needed
 2071 013a 10BD     		pop	{r4, pc}
 2072              	.LVL108:
 2073              	.L68:
 2074              		.cfi_restore_state
 2075              	.LBB1545:
 2076              	.LBB1544:
 2077              	.LBB1543:
 2078              	.LBB1542:
 2079              	.LBB1537:
 159:VoiceEnvelope.h ****                 ph = static_cast<float>(phase) * attack_coefficient;
 2080              		.loc 3 159 13 is_stmt 1 view .LVU630
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 2081              		.loc 3 160 17 view .LVU631
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 2082              		.loc 3 160 41 is_stmt 0 view .LVU632
 2083 013c D36B     		ldr	r3, [r2, #60]
 2084              	.LBB1531:
 2085              	.LBB1532:
 218:VoiceEnvelope.h ****     }
 2086              		.loc 3 218 27 view .LVU633
 2087 013e B0EE475A 		vmov.f32	s10, s14
 2088              	.LBE1532:
 2089              	.LBE1531:
 162:VoiceEnvelope.h ****                     current_state = (mode == MODE_AR) ? ENV_DECAY : ENV_SUSTAIN;
 2090              		.loc 3 162 17 view .LVU634
 2091 0142 17EE900A 		vmov	r0, s15	@ int
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 2092              		.loc 3 160 22 view .LVU635
 2093 0146 05EE903A 		vmov	s11, r3	@ int
 162:VoiceEnvelope.h ****                     current_state = (mode == MODE_AR) ? ENV_DECAY : ENV_SUSTAIN;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 100


 2094              		.loc 3 162 17 view .LVU636
 2095 014a 8342     		cmp	r3, r0
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 2096              		.loc 3 160 22 view .LVU637
 2097 014c F8EE655A 		vcvt.f32.u32	s11, s11
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 2098              		.loc 3 160 20 view .LVU638
 2099 0150 65EE845A 		vmul.f32	s11, s11, s8
 2100              	.LVL109:
 161:VoiceEnvelope.h ****                 if (phase >= attack_time) {
 2101              		.loc 3 161 17 is_stmt 1 view .LVU639
 2102              	.LBB1534:
 2103              	.LBI1531:
 217:VoiceEnvelope.h ****         return ph / (1.0f + attack_curve_coefficient * (1.0f - ph));
 2104              		.loc 3 217 11 view .LVU640
 2105              	.LBB1533:
 218:VoiceEnvelope.h ****     }
 2106              		.loc 3 218 9 view .LVU641
 218:VoiceEnvelope.h ****     }
 2107              		.loc 3 218 62 is_stmt 0 view .LVU642
 2108 0154 77EE654A 		vsub.f32	s9, s14, s11
 218:VoiceEnvelope.h ****     }
 2109              		.loc 3 218 27 view .LVU643
 2110 0158 A6EE245A 		vfma.f32	s10, s12, s9
 2111              	.LVL110:
 218:VoiceEnvelope.h ****     }
 2112              		.loc 3 218 67 view .LVU644
 2113 015c 85EE856A 		vdiv.f32	s12, s11, s10
 2114              	.LBE1533:
 2115              	.LBE1534:
 161:VoiceEnvelope.h ****                 if (phase >= attack_time) {
 2116              		.loc 3 161 31 view .LVU645
 2117 0160 82ED016A 		vstr.32	s12, [r2, #4]
 162:VoiceEnvelope.h ****                     current_state = (mode == MODE_AR) ? ENV_DECAY : ENV_SUSTAIN;
 2118              		.loc 3 162 17 is_stmt 1 view .LVU646
 2119 0164 3FD3     		bcc	.L89
 163:VoiceEnvelope.h ****                     phase = 0;
 2120              		.loc 3 163 21 view .LVU647
 163:VoiceEnvelope.h ****                     phase = 0;
 2121              		.loc 3 163 55 is_stmt 0 view .LVU648
 2122 0166 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 2123 0168 002B     		cmp	r3, #0
 2124 016a 0CBF     		ite	eq
 2125 016c 0323     		moveq	r3, #3
 2126 016e 0223     		movne	r3, #2
 163:VoiceEnvelope.h ****                     phase = 0;
 2127              		.loc 3 163 35 view .LVU649
 2128 0170 1370     		strb	r3, [r2]
 164:VoiceEnvelope.h ****                 } else {
 2129              		.loc 3 164 21 is_stmt 1 view .LVU650
 164:VoiceEnvelope.h ****                 } else {
 2130              		.loc 3 164 27 is_stmt 0 view .LVU651
 2131 0172 0023     		movs	r3, #0
 2132              	.LVL111:
 2133              	.L88:
 198:VoiceEnvelope.h ****                 }
 2134              		.loc 3 198 26 view .LVU652
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 101


 2135 0174 D363     		str	r3, [r2, #60]
 2136 0176 C5E7     		b	.L63
 2137              	.L67:
 170:VoiceEnvelope.h ****                 current_value = 1.0f;
 2138              		.loc 3 170 13 is_stmt 1 view .LVU653
 171:VoiceEnvelope.h ****                 break;
 2139              		.loc 3 171 17 view .LVU654
 171:VoiceEnvelope.h ****                 break;
 2140              		.loc 3 171 31 is_stmt 0 view .LVU655
 2141 0178 82ED017A 		vstr.32	s14, [r2, #4]
 172:VoiceEnvelope.h **** 
 2142              		.loc 3 172 17 is_stmt 1 view .LVU656
 2143 017c C2E7     		b	.L63
 2144              	.L66:
 174:VoiceEnvelope.h ****                 // Use current_value as starting point for decay
 2145              		.loc 3 174 13 view .LVU657
 177:VoiceEnvelope.h ****                 if (phase == 0) {
 2146              		.loc 3 177 17 view .LVU658
 177:VoiceEnvelope.h ****                 if (phase == 0) {
 2147              		.loc 3 177 41 is_stmt 0 view .LVU659
 2148 017e D06B     		ldr	r0, [r2, #60]
 177:VoiceEnvelope.h ****                 if (phase == 0) {
 2149              		.loc 3 177 22 view .LVU660
 2150 0180 07EE900A 		vmov	s15, r0	@ int
 2151 0184 F8EE677A 		vcvt.f32.u32	s15, s15
 177:VoiceEnvelope.h ****                 if (phase == 0) {
 2152              		.loc 3 177 20 view .LVU661
 2153 0188 67EE857A 		vmul.f32	s15, s15, s10
 2154              	.LVL112:
 178:VoiceEnvelope.h ****                     // On first frame, use current value
 2155              		.loc 3 178 17 is_stmt 1 view .LVU662
 2156 018c 08B9     		cbnz	r0, .L72
 180:VoiceEnvelope.h ****                 }
 2157              		.loc 3 180 21 view .LVU663
 180:VoiceEnvelope.h ****                 }
 2158              		.loc 3 180 39 is_stmt 0 view .LVU664
 2159 018e 5468     		ldr	r4, [r2, #4]	@ float
 2160 0190 1464     		str	r4, [r2, #64]	@ float
 2161              	.L72:
 182:VoiceEnvelope.h ****                 
 2162              		.loc 3 182 17 is_stmt 1 view .LVU665
 182:VoiceEnvelope.h ****                 
 2163              		.loc 3 182 59 is_stmt 0 view .LVU666
 2164 0192 37EE676A 		vsub.f32	s12, s14, s15
 182:VoiceEnvelope.h ****                 
 2165              		.loc 3 182 51 view .LVU667
 2166 0196 D2ED105A 		vldr.32	s11, [r2, #64]
 184:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 2167              		.loc 3 184 17 view .LVU668
 2168 019a 9842     		cmp	r0, r3
 182:VoiceEnvelope.h ****                 
 2169              		.loc 3 182 51 view .LVU669
 2170 019c 26EE256A 		vmul.f32	s12, s12, s11
 182:VoiceEnvelope.h ****                 
 2171              		.loc 3 182 73 view .LVU670
 2172 01a0 F0EE475A 		vmov.f32	s11, s14
 2173 01a4 E7EEA65A 		vfma.f32	s11, s15, s13
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 102


 182:VoiceEnvelope.h ****                 
 2174              		.loc 3 182 65 view .LVU671
 2175 01a8 C6EE257A 		vdiv.f32	s15, s12, s11
 2176              	.LVL113:
 182:VoiceEnvelope.h ****                 
 2177              		.loc 3 182 31 view .LVU672
 2178 01ac C2ED017A 		vstr.32	s15, [r2, #4]
 184:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 2179              		.loc 3 184 17 is_stmt 1 view .LVU673
 2180 01b0 02D3     		bcc	.L73
 2181              	.LVL114:
 2182              	.L74:
 185:VoiceEnvelope.h ****                     phase = 0;
 2183              		.loc 3 185 21 view .LVU674
 185:VoiceEnvelope.h ****                     phase = 0;
 2184              		.loc 3 185 35 is_stmt 0 view .LVU675
 2185 01b2 0023     		movs	r3, #0
 2186 01b4 1370     		strb	r3, [r2]
 186:VoiceEnvelope.h ****                 } else {
 2187              		.loc 3 186 21 is_stmt 1 view .LVU676
 2188 01b6 DDE7     		b	.L88
 2189              	.LVL115:
 2190              	.L73:
 188:VoiceEnvelope.h ****                 }
 2191              		.loc 3 188 21 view .LVU677
 188:VoiceEnvelope.h ****                 }
 2192              		.loc 3 188 26 is_stmt 0 view .LVU678
 2193 01b8 0130     		adds	r0, r0, #1
 2194              	.LVL116:
 188:VoiceEnvelope.h ****                 }
 2195              		.loc 3 188 26 view .LVU679
 2196 01ba D063     		str	r0, [r2, #60]
 2197              	.LVL117:
 188:VoiceEnvelope.h ****                 }
 2198              		.loc 3 188 26 view .LVU680
 2199 01bc A2E7     		b	.L63
 2200              	.LVL118:
 2201              	.L64:
 192:VoiceEnvelope.h ****                 current_value = reset_target - static_cast<float>(phase) * reset_coefficient;
 2202              		.loc 3 192 13 is_stmt 1 view .LVU681
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 2203              		.loc 3 193 17 view .LVU682
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 2204              		.loc 3 193 67 is_stmt 0 view .LVU683
 2205 01be D36B     		ldr	r3, [r2, #60]
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 2206              		.loc 3 193 46 view .LVU684
 2207 01c0 D2ED095A 		vldr.32	s11, [r2, #36]
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 2208              		.loc 3 193 48 view .LVU685
 2209 01c4 07EE903A 		vmov	s15, r3	@ int
 2210 01c8 B8EE676A 		vcvt.f32.u32	s12, s15
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 2211              		.loc 3 193 46 view .LVU686
 2212 01cc D2ED0A7A 		vldr.32	s15, [r2, #40]
 2213 01d0 E6EE657A 		vfms.f32	s15, s12, s11
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 103


 2214              		.loc 3 193 31 view .LVU687
 2215 01d4 C2ED017A 		vstr.32	s15, [r2, #4]
 194:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 2216              		.loc 3 194 17 is_stmt 1 view .LVU688
 2217 01d8 D2ED087A 		vldr.32	s15, [r2, #32]
 2218 01dc B4EEE76A 		vcmpe.f32	s12, s15
 2219 01e0 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2220 01e4 E5DA     		bge	.L74
 2221              	.L89:
 198:VoiceEnvelope.h ****                 }
 2222              		.loc 3 198 21 view .LVU689
 198:VoiceEnvelope.h ****                 }
 2223              		.loc 3 198 26 is_stmt 0 view .LVU690
 2224 01e6 0133     		adds	r3, r3, #1
 2225 01e8 C4E7     		b	.L88
 2226              	.LVL119:
 2227              	.L57:
 198:VoiceEnvelope.h ****                 }
 2228              		.loc 3 198 26 view .LVU691
 2229              	.LBE1537:
 2230              	.LBE1542:
 2231              	.LBE1543:
 2232              	.LBE1544:
 2233              	.LBE1545:
 2234              	.LBB1546:
 321:Polyphony.cpp ****         mod.level_patched = false;
 2235              		.loc 1 321 9 is_stmt 1 view .LVU692
 322:Polyphony.cpp ****         mod.trigger_patched = true;
 2236              		.loc 1 322 27 is_stmt 0 view .LVU693
 2237 01ea 0023     		movs	r3, #0
 2238              	.LVL120:
 321:Polyphony.cpp ****         mod.level_patched = false;
 2239              		.loc 1 321 19 view .LVU694
 2240 01ec 81ED077A 		vstr.32	s14, [r1, #28]
 322:Polyphony.cpp ****         mod.trigger_patched = true;
 2241              		.loc 1 322 9 is_stmt 1 view .LVU695
 322:Polyphony.cpp ****         mod.trigger_patched = true;
 2242              		.loc 1 322 27 is_stmt 0 view .LVU696
 2243 01f0 81F82430 		strb	r3, [r1, #36]
 323:Polyphony.cpp ****     }
 2244              		.loc 1 323 9 is_stmt 1 view .LVU697
 323:Polyphony.cpp ****     }
 2245              		.loc 1 323 29 is_stmt 0 view .LVU698
 2246 01f4 0123     		movs	r3, #1
 2247 01f6 81F82330 		strb	r3, [r1, #35]
 2248              	.LBE1546:
 2249              		.loc 1 325 1 view .LVU699
 2250 01fa 9DE7     		b	.L56
 2251              	.L91:
 2252              		.align	2
 2253              	.L90:
 2254 01fc 00000000 		.word	0
 2255 0200 CDCCCC3D 		.word	1036831949
 2256 0204 9A99993E 		.word	1050253722
 2257 0208 3333333F 		.word	1060320051
 2258 020c 00000043 		.word	1124073472
 2259 0210 6F12033B 		.word	990057071
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 104


 2260              		.cfi_endproc
 2261              	.LFE5361:
 2263              		.section	.text._ZN15PolyphonyEngine36UpdateMonoNonArpVoiceTriggerInternalERN6plaits11ModulationsER
 2264              		.align	1
 2265              		.global	_ZN15PolyphonyEngine36UpdateMonoNonArpVoiceTriggerInternalERN6plaits11ModulationsERbb
 2266              		.syntax unified
 2267              		.thumb
 2268              		.thumb_func
 2270              	_ZN15PolyphonyEngine36UpdateMonoNonArpVoiceTriggerInternalERN6plaits11ModulationsERbb:
 2271              	.LVL121:
 2272              	.LFB5362:
 326:Polyphony.cpp **** 
 327:Polyphony.cpp **** void PolyphonyEngine::UpdateMonoNonArpVoiceTriggerInternal(plaits::Modulations& mod, bool& active_f
 2273              		.loc 1 327 137 is_stmt 1 view -0
 2274              		.cfi_startproc
 2275              		@ args = 0, pretend = 0, frame = 0
 2276              		@ frame_needed = 0, uses_anonymous_args = 0
 2277              		@ link register save eliminated.
 328:Polyphony.cpp ****     if ((engine_changed_flag_param && active_flag) || !active_flag) {
 2278              		.loc 1 328 5 view .LVU701
 2279 0000 0BB9     		cbnz	r3, .L93
 2280              		.loc 1 328 52 is_stmt 0 discriminator 3 view .LVU702
 2281 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 2282              	.LVL122:
 2283              		.loc 1 328 52 discriminator 3 view .LVU703
 2284 0004 0BB9     		cbnz	r3, .L92
 2285              	.L93:
 329:Polyphony.cpp ****         mod.trigger = 0.0f; 
 2286              		.loc 1 329 9 is_stmt 1 view .LVU704
 2287              		.loc 1 329 21 is_stmt 0 view .LVU705
 2288 0006 0023     		movs	r3, #0
 2289 0008 8B61     		str	r3, [r1, #24]	@ float
 2290              	.L92:
 330:Polyphony.cpp ****     } 
 331:Polyphony.cpp **** }
 2291              		.loc 1 331 1 view .LVU706
 2292 000a 7047     		bx	lr
 2293              		.cfi_endproc
 2294              	.LFE5362:
 2296              		.section	.text._ZN15PolyphonyEngine26SilenceVoiceOutputInternalEi,"ax",%progbits
 2297              		.align	1
 2298              		.global	_ZN15PolyphonyEngine26SilenceVoiceOutputInternalEi
 2299              		.syntax unified
 2300              		.thumb
 2301              		.thumb_func
 2303              	_ZN15PolyphonyEngine26SilenceVoiceOutputInternalEi:
 2304              	.LVL123:
 2305              	.LFB5364:
 332:Polyphony.cpp **** 
 333:Polyphony.cpp **** void PolyphonyEngine::RenderAndProcessPercussiveArpVoiceInternal(int voice_idx, int engine_idx, flo
 334:Polyphony.cpp ****     // Ported from global RenderAndProcessPercussiveArpVoice
 335:Polyphony.cpp ****     if (voice_idx < 0 || voice_idx >= NUM_VOICES) return;
 336:Polyphony.cpp **** 
 337:Polyphony.cpp ****     UpdateVoicePatchParamsInternal(
 338:Polyphony.cpp ****         patches_[voice_idx],
 339:Polyphony.cpp ****         engine_idx,
 340:Polyphony.cpp ****         voice_note_[voice_idx], 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 105


 341:Polyphony.cpp ****         global_pitch_offset,
 342:Polyphony.cpp ****         current_global_harmonics,
 343:Polyphony.cpp ****         current_global_timbre,
 344:Polyphony.cpp ****         current_global_morph,
 345:Polyphony.cpp ****         true, // arp_on is true here
 346:Polyphony.cpp ****         current_env_release_val_param
 347:Polyphony.cpp ****     );
 348:Polyphony.cpp ****     
 349:Polyphony.cpp **** 
 350:Polyphony.cpp **** 
 351:Polyphony.cpp ****     voices_[voice_idx].Render(patches_[voice_idx], modulations_[voice_idx], output_buffers_[voice_i
 352:Polyphony.cpp ****     
 353:Polyphony.cpp ****     // Clear trigger after rendering for one-shot behavior if plaits engine expects it
 354:Polyphony.cpp **** 
 355:Polyphony.cpp **** 
 356:Polyphony.cpp ****     // Silence other voices if this is the primary voice (voice 0) in a mono-like ARP setup
 357:Polyphony.cpp ****     if (voice_idx == 0) { 
 358:Polyphony.cpp ****         for (int v = 1; v < NUM_VOICES; ++v) {
 359:Polyphony.cpp ****             SilenceVoiceOutputInternal(v);
 360:Polyphony.cpp ****         }
 361:Polyphony.cpp ****     }
 362:Polyphony.cpp **** }
 363:Polyphony.cpp **** 
 364:Polyphony.cpp **** void PolyphonyEngine::SilenceVoiceOutputInternal(int voice_idx) {
 2306              		.loc 1 364 65 is_stmt 1 view -0
 2307              		.cfi_startproc
 2308              		@ args = 0, pretend = 0, frame = 0
 2309              		@ frame_needed = 0, uses_anonymous_args = 0
 2310              		@ link register save eliminated.
 365:Polyphony.cpp ****     // TODO: Move logic from global SilenceVoiceOutput
 366:Polyphony.cpp ****     if (voice_idx >= 0 && voice_idx < NUM_VOICES) {
 2311              		.loc 1 366 5 view .LVU708
 2312 0000 0329     		cmp	r1, #3
 2313 0002 08D8     		bhi	.L95
 367:Polyphony.cpp ****         memset(output_buffers_[voice_idx], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 2314              		.loc 1 367 9 view .LVU709
 2315              		.loc 1 367 41 is_stmt 0 view .LVU710
 2316 0004 00EB8110 		add	r0, r0, r1, lsl #6
 2317              	.LVL124:
 2318              		.loc 1 367 15 view .LVU711
 2319 0008 4022     		movs	r2, #64
 2320 000a 0021     		movs	r1, #0
 2321              	.LVL125:
 2322              		.loc 1 367 15 view .LVU712
 2323 000c 00F56450 		add	r0, r0, #14592
 2324 0010 2430     		adds	r0, r0, #36
 2325 0012 FFF7FEBF 		b	memset
 2326              	.LVL126:
 2327              	.L95:
 368:Polyphony.cpp ****     }
 369:Polyphony.cpp **** }
 2328              		.loc 1 369 1 view .LVU713
 2329 0016 7047     		bx	lr
 2330              		.cfi_endproc
 2331              	.LFE5364:
 2333              		.section	.text._ZN15PolyphonyEngine42RenderAndProcessPercussiveArpVoiceInternalEiifffff,"ax",%prog
 2334              		.align	1
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 106


 2335              		.global	_ZN15PolyphonyEngine42RenderAndProcessPercussiveArpVoiceInternalEiifffff
 2336              		.syntax unified
 2337              		.thumb
 2338              		.thumb_func
 2340              	_ZN15PolyphonyEngine42RenderAndProcessPercussiveArpVoiceInternalEiifffff:
 2341              	.LVL127:
 2342              	.LFB5363:
 333:Polyphony.cpp ****     // Ported from global RenderAndProcessPercussiveArpVoice
 2343              		.loc 1 333 250 is_stmt 1 view -0
 2344              		.cfi_startproc
 2345              		@ args = 0, pretend = 0, frame = 0
 2346              		@ frame_needed = 0, uses_anonymous_args = 0
 335:Polyphony.cpp **** 
 2347              		.loc 1 335 5 view .LVU715
 2348 0000 0329     		cmp	r1, #3
 333:Polyphony.cpp ****     // Ported from global RenderAndProcessPercussiveArpVoice
 2349              		.loc 1 333 250 is_stmt 0 view .LVU716
 2350 0002 73B5     		push	{r0, r1, r4, r5, r6, lr}
 2351              		.cfi_def_cfa_offset 24
 2352              		.cfi_offset 4, -16
 2353              		.cfi_offset 5, -12
 2354              		.cfi_offset 6, -8
 2355              		.cfi_offset 14, -4
 333:Polyphony.cpp ****     // Ported from global RenderAndProcessPercussiveArpVoice
 2356              		.loc 1 333 250 view .LVU717
 2357 0004 0446     		mov	r4, r0
 2358 0006 0D46     		mov	r5, r1
 335:Polyphony.cpp **** 
 2359              		.loc 1 335 5 view .LVU718
 2360 0008 42D8     		bhi	.L97
 2361              	.LVL128:
 2362              	.LBB1553:
 2363              	.LBI1553:
 333:Polyphony.cpp ****     // Ported from global RenderAndProcessPercussiveArpVoice
 2364              		.loc 1 333 6 is_stmt 1 view .LVU719
 2365              	.LBB1554:
 337:Polyphony.cpp ****         patches_[voice_idx],
 2366              		.loc 1 337 5 view .LVU720
 2367 000a 2821     		movs	r1, #40
 2368              	.LVL129:
 337:Polyphony.cpp ****         patches_[voice_idx],
 2369              		.loc 1 337 5 is_stmt 0 view .LVU721
 2370 000c 6943     		muls	r1, r5, r1
 2371              	.LVL130:
 2372              	.LBB1555:
 2373              	.LBI1555:
 291:Polyphony.cpp ****     // TODO: Move logic from global UpdateVoicePatchParams
 2374              		.loc 1 291 6 is_stmt 1 view .LVU722
 2375              	.LBB1556:
 293:Polyphony.cpp ****     patch.engine = engine_idx;
 2376              		.loc 1 293 5 view .LVU723
 293:Polyphony.cpp ****     patch.engine = engine_idx;
 2377              		.loc 1 293 16 is_stmt 0 view .LVU724
 2378 000e 4318     		adds	r3, r0, r1
 2379              	.LBE1556:
 2380              	.LBE1555:
 337:Polyphony.cpp ****         patches_[voice_idx],
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 107


 2381              		.loc 1 337 35 view .LVU725
 2382 0010 05F64460 		addw	r0, r5, #3652
 2383              	.LVL131:
 337:Polyphony.cpp ****         patches_[voice_idx],
 2384              		.loc 1 337 35 view .LVU726
 2385 0014 04EB8000 		add	r0, r4, r0, lsl #2
 2386              	.LVL132:
 2387              	.LBB1563:
 2388              	.LBB1557:
 293:Polyphony.cpp ****     patch.engine = engine_idx;
 2389              		.loc 1 293 16 view .LVU727
 2390 0018 03F55B56 		add	r6, r3, #14016
 2391              	.LVL133:
 293:Polyphony.cpp ****     patch.engine = engine_idx;
 2392              		.loc 1 293 23 view .LVU728
 2393 001c D0ED017A 		vldr.32	s15, [r0, #4]
 294:Polyphony.cpp ****     patch.harmonics = current_global_harmonics;
 2394              		.loc 1 294 18 view .LVU729
 2395 0020 43F2DC60 		movw	r0, #14044
 293:Polyphony.cpp ****     patch.engine = engine_idx;
 2396              		.loc 1 293 23 view .LVU730
 2397 0024 37EE800A 		vadd.f32	s0, s15, s0
 2398              	.LVL134:
 293:Polyphony.cpp ****     patch.engine = engine_idx;
 2399              		.loc 1 293 16 view .LVU731
 2400 0028 86ED000A 		vstr.32	s0, [r6]
 2401              	.LVL135:
 294:Polyphony.cpp ****     patch.harmonics = current_global_harmonics;
 2402              		.loc 1 294 5 is_stmt 1 view .LVU732
 294:Polyphony.cpp ****     patch.harmonics = current_global_harmonics;
 2403              		.loc 1 294 18 is_stmt 0 view .LVU733
 2404 002c 1A50     		str	r2, [r3, r0]
 295:Polyphony.cpp ****     patch.timbre = current_global_timbre;
 2405              		.loc 1 295 5 is_stmt 1 view .LVU734
 298:Polyphony.cpp ****     patch.decay = arp_on ? current_decay : 0.5f;
 2406              		.loc 1 298 22 is_stmt 0 view .LVU735
 2407 002e 0022     		movs	r2, #0
 2408              	.LVL136:
 298:Polyphony.cpp ****     patch.decay = arp_on ? current_decay : 0.5f;
 2409              		.loc 1 298 22 view .LVU736
 2410              	.LBE1557:
 2411              	.LBE1563:
 351:Polyphony.cpp ****     
 2412              		.loc 1 351 30 view .LVU737
 2413 0030 1020     		movs	r0, #16
 2414              	.LVL137:
 351:Polyphony.cpp ****     
 2415              		.loc 1 351 102 view .LVU738
 2416 0032 04EB8513 		add	r3, r4, r5, lsl #6
 2417              	.LVL138:
 2418              	.LBB1564:
 2419              	.LBB1558:
 298:Polyphony.cpp ****     patch.decay = arp_on ? current_decay : 0.5f;
 2420              		.loc 1 298 22 view .LVU739
 2421 0036 7262     		str	r2, [r6, #36]	@ float
 2422              	.LVL139:
 300:Polyphony.cpp ****     patch.timbre_modulation_amount = 0.f;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 108


 2423              		.loc 1 300 39 view .LVU740
 2424 0038 3261     		str	r2, [r6, #16]	@ float
 2425              	.LBE1558:
 2426              	.LBE1564:
 351:Polyphony.cpp ****     
 2427              		.loc 1 351 30 view .LVU741
 2428 003a 03F56453 		add	r3, r3, #14592
 2429              	.LBB1565:
 2430              	.LBB1559:
 301:Polyphony.cpp ****     patch.morph_modulation_amount = 0.f;
 2431              		.loc 1 301 36 view .LVU742
 2432 003e 7261     		str	r2, [r6, #20]	@ float
 302:Polyphony.cpp **** }
 2433              		.loc 1 302 35 view .LVU743
 2434 0040 B261     		str	r2, [r6, #24]	@ float
 2435              	.LBE1559:
 2436              	.LBE1565:
 351:Polyphony.cpp ****     
 2437              		.loc 1 351 74 view .LVU744
 2438 0042 01F55D52 		add	r2, r1, #14144
 2439              	.LBB1566:
 2440              	.LBB1560:
 295:Polyphony.cpp ****     patch.timbre = current_global_timbre;
 2441              		.loc 1 295 21 view .LVU745
 2442 0046 C6ED010A 		vstr.32	s1, [r6, #4]
 296:Polyphony.cpp ****     patch.morph = current_global_morph;
 2443              		.loc 1 296 5 is_stmt 1 view .LVU746
 2444              	.LBE1560:
 2445              	.LBE1566:
 338:Polyphony.cpp ****         engine_idx,
 2446              		.loc 1 338 27 is_stmt 0 view .LVU747
 2447 004a 01F55B51 		add	r1, r1, #14016
 351:Polyphony.cpp ****     
 2448              		.loc 1 351 74 view .LVU748
 2449 004e 2032     		adds	r2, r2, #32
 2450              	.LBB1567:
 2451              	.LBB1561:
 296:Polyphony.cpp ****     patch.morph = current_global_morph;
 2452              		.loc 1 296 18 view .LVU749
 2453 0050 C6ED021A 		vstr.32	s3, [r6, #8]
 297:Polyphony.cpp ****     patch.lpg_colour = 0.0f;
 2454              		.loc 1 297 5 is_stmt 1 view .LVU750
 297:Polyphony.cpp ****     patch.lpg_colour = 0.0f;
 2455              		.loc 1 297 17 is_stmt 0 view .LVU751
 2456 0054 86ED031A 		vstr.32	s2, [r6, #12]
 298:Polyphony.cpp ****     patch.decay = arp_on ? current_decay : 0.5f;
 2457              		.loc 1 298 5 is_stmt 1 view .LVU752
 299:Polyphony.cpp ****     patch.frequency_modulation_amount = 0.f;
 2458              		.loc 1 299 5 view .LVU753
 2459              	.LBE1561:
 2460              	.LBE1567:
 351:Polyphony.cpp ****     
 2461              		.loc 1 351 30 is_stmt 0 view .LVU754
 2462 0058 2433     		adds	r3, r3, #36
 2463              	.LBB1568:
 2464              	.LBB1562:
 299:Polyphony.cpp ****     patch.frequency_modulation_amount = 0.f;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 109


 2465              		.loc 1 299 17 view .LVU755
 2466 005a 86ED082A 		vstr.32	s4, [r6, #32]
 300:Polyphony.cpp ****     patch.timbre_modulation_amount = 0.f;
 2467              		.loc 1 300 5 is_stmt 1 view .LVU756
 301:Polyphony.cpp ****     patch.morph_modulation_amount = 0.f;
 2468              		.loc 1 301 5 view .LVU757
 302:Polyphony.cpp **** }
 2469              		.loc 1 302 5 view .LVU758
 2470              	.LVL140:
 302:Polyphony.cpp **** }
 2471              		.loc 1 302 5 is_stmt 0 view .LVU759
 2472              	.LBE1562:
 2473              	.LBE1568:
 351:Polyphony.cpp ****     
 2474              		.loc 1 351 5 is_stmt 1 view .LVU760
 351:Polyphony.cpp ****     
 2475              		.loc 1 351 30 is_stmt 0 view .LVU761
 2476 005e 2244     		add	r2, r2, r4
 2477 0060 0090     		str	r0, [sp]
 2478 0062 4FF45B60 		mov	r0, #3504
 2479 0066 2144     		add	r1, r1, r4
 2480 0068 00FB0540 		mla	r0, r0, r5, r4
 2481 006c FFF7FEFF 		bl	_ZN6plaits5Voice6RenderERKNS_5PatchERKNS_11ModulationsEPNS0_5FrameEj
 2482              	.LVL141:
 357:Polyphony.cpp ****         for (int v = 1; v < NUM_VOICES; ++v) {
 2483              		.loc 1 357 5 is_stmt 1 view .LVU762
 2484              	.LBB1569:
 2485 0070 75B9     		cbnz	r5, .L97
 2486              	.LVL142:
 2487              	.LBB1570:
 358:Polyphony.cpp ****             SilenceVoiceOutputInternal(v);
 2488              		.loc 1 358 27 view .LVU763
 359:Polyphony.cpp ****         }
 2489              		.loc 1 359 13 view .LVU764
 359:Polyphony.cpp ****         }
 2490              		.loc 1 359 39 is_stmt 0 view .LVU765
 2491 0072 2046     		mov	r0, r4
 2492 0074 0121     		movs	r1, #1
 2493 0076 FFF7FEFF 		bl	_ZN15PolyphonyEngine26SilenceVoiceOutputInternalEi
 2494              	.LVL143:
 358:Polyphony.cpp ****             SilenceVoiceOutputInternal(v);
 2495              		.loc 1 358 9 is_stmt 1 view .LVU766
 358:Polyphony.cpp ****             SilenceVoiceOutputInternal(v);
 2496              		.loc 1 358 27 view .LVU767
 359:Polyphony.cpp ****         }
 2497              		.loc 1 359 13 view .LVU768
 359:Polyphony.cpp ****         }
 2498              		.loc 1 359 39 is_stmt 0 view .LVU769
 2499 007a 2046     		mov	r0, r4
 2500 007c 0221     		movs	r1, #2
 2501 007e FFF7FEFF 		bl	_ZN15PolyphonyEngine26SilenceVoiceOutputInternalEi
 2502              	.LVL144:
 358:Polyphony.cpp ****             SilenceVoiceOutputInternal(v);
 2503              		.loc 1 358 9 is_stmt 1 view .LVU770
 358:Polyphony.cpp ****             SilenceVoiceOutputInternal(v);
 2504              		.loc 1 358 27 view .LVU771
 359:Polyphony.cpp ****         }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 110


 2505              		.loc 1 359 13 view .LVU772
 359:Polyphony.cpp ****         }
 2506              		.loc 1 359 39 is_stmt 0 view .LVU773
 2507 0082 0321     		movs	r1, #3
 2508 0084 2046     		mov	r0, r4
 2509              	.LBE1570:
 2510              	.LBE1569:
 2511              	.LBE1554:
 2512              	.LBE1553:
 362:Polyphony.cpp **** 
 2513              		.loc 1 362 1 view .LVU774
 2514 0086 02B0     		add	sp, sp, #8
 2515              		.cfi_remember_state
 2516              		.cfi_def_cfa_offset 16
 2517              		@ sp needed
 2518 0088 BDE87040 		pop	{r4, r5, r6, lr}
 2519              		.cfi_restore 14
 2520              		.cfi_restore 6
 2521              		.cfi_restore 5
 2522              		.cfi_restore 4
 2523              		.cfi_def_cfa_offset 0
 2524              	.LVL145:
 2525              	.LBB1574:
 2526              	.LBB1573:
 2527              	.LBB1572:
 2528              	.LBB1571:
 359:Polyphony.cpp ****         }
 2529              		.loc 1 359 39 view .LVU775
 2530 008c FFF7FEBF 		b	_ZN15PolyphonyEngine26SilenceVoiceOutputInternalEi
 2531              	.LVL146:
 2532              	.L97:
 2533              		.cfi_restore_state
 359:Polyphony.cpp ****         }
 2534              		.loc 1 359 39 view .LVU776
 2535              	.LBE1571:
 2536              	.LBE1572:
 2537              	.LBE1573:
 2538              	.LBE1574:
 362:Polyphony.cpp **** 
 2539              		.loc 1 362 1 view .LVU777
 2540 0090 02B0     		add	sp, sp, #8
 2541              		.cfi_def_cfa_offset 16
 2542              		@ sp needed
 2543 0092 70BD     		pop	{r4, r5, r6, pc}
 362:Polyphony.cpp **** 
 2544              		.loc 1 362 1 view .LVU778
 2545              		.cfi_endproc
 2546              	.LFE5363:
 2548              		.section	.text._ZN15PolyphonyEngine36RetriggerActiveVoiceEnvelopeInternalEi,"ax",%progbits
 2549              		.align	1
 2550              		.global	_ZN15PolyphonyEngine36RetriggerActiveVoiceEnvelopeInternalEi
 2551              		.syntax unified
 2552              		.thumb
 2553              		.thumb_func
 2555              	_ZN15PolyphonyEngine36RetriggerActiveVoiceEnvelopeInternalEi:
 2556              	.LVL147:
 2557              	.LFB5365:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 111


 370:Polyphony.cpp **** 
 371:Polyphony.cpp **** void PolyphonyEngine::RetriggerActiveVoiceEnvelopeInternal(int voice_idx) {
 2558              		.loc 1 371 75 is_stmt 1 view -0
 2559              		.cfi_startproc
 2560              		@ args = 0, pretend = 0, frame = 8
 2561              		@ frame_needed = 0, uses_anonymous_args = 0
 372:Polyphony.cpp ****     
 373:Polyphony.cpp ****     if (voice_idx >= 0 && voice_idx < NUM_VOICES && voice_active_[voice_idx]) {
 2562              		.loc 1 373 5 view .LVU780
 2563              	.LBB1580:
 2564 0000 0329     		cmp	r1, #3
 2565              	.LBE1580:
 371:Polyphony.cpp ****     
 2566              		.loc 1 371 75 is_stmt 0 view .LVU781
 2567 0002 73B5     		push	{r0, r1, r4, r5, r6, lr}
 2568              		.cfi_def_cfa_offset 24
 2569              		.cfi_offset 4, -16
 2570              		.cfi_offset 5, -12
 2571              		.cfi_offset 6, -8
 2572              		.cfi_offset 14, -4
 371:Polyphony.cpp ****     
 2573              		.loc 1 371 75 view .LVU782
 2574 0004 0446     		mov	r4, r0
 2575 0006 0D46     		mov	r5, r1
 2576              	.LBB1581:
 2577              		.loc 1 373 5 view .LVU783
 2578 0008 27D8     		bhi	.L101
 2579              		.loc 1 373 76 discriminator 1 view .LVU784
 2580 000a 4218     		adds	r2, r0, r1
 2581 000c 43F61013 		movw	r3, #14608
 2582              		.loc 1 373 50 discriminator 1 view .LVU785
 2583 0010 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2584 0012 13B3     		cbz	r3, .L101
 2585              	.LVL148:
 2586              		.loc 1 373 50 discriminator 1 view .LVU786
 2587              	.LBE1581:
 2588              	.LBB1582:
 2589              	.LBI1582:
 371:Polyphony.cpp ****     
 2590              		.loc 1 371 6 is_stmt 1 view .LVU787
 2591              	.LBB1583:
 374:Polyphony.cpp ****         // For non-percussive engines, re-trigger the envelope
 375:Polyphony.cpp ****         bool percussive_engine = (patches_[voice_idx].engine > 7); // Get engine from patch
 2592              		.loc 1 375 9 view .LVU788
 2593              		.loc 1 375 55 is_stmt 0 view .LVU789
 2594 0014 2823     		movs	r3, #40
 2595 0016 43F2DC62 		movw	r2, #14044
 2596 001a 03FB0103 		mla	r3, r3, r1, r0
 2597 001e 9E58     		ldr	r6, [r3, r2]
 2598              	.LVL149:
 376:Polyphony.cpp ****         if (!percussive_engine) {
 2599              		.loc 1 376 9 is_stmt 1 view .LVU790
 2600 0020 072E     		cmp	r6, #7
 2601 0022 0ADC     		bgt	.L105
 377:Polyphony.cpp ****             voice_envelopes_[voice_idx].Reset();
 2602              		.loc 1 377 13 view .LVU791
 2603              		.loc 1 377 46 is_stmt 0 view .LVU792
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 112


 2604 0024 4420     		movs	r0, #68
 2605              	.LVL150:
 2606              		.loc 1 377 46 view .LVU793
 2607 0026 00FB0140 		mla	r0, r0, r1, r4
 2608 002a 00F56050 		add	r0, r0, #14336
 2609 002e 0190     		str	r0, [sp, #4]
 2610 0030 FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 2611              	.LVL151:
 378:Polyphony.cpp ****             voice_envelopes_[voice_idx].Trigger();
 2612              		.loc 1 378 13 is_stmt 1 view .LVU794
 2613              		.loc 1 378 48 is_stmt 0 view .LVU795
 2614 0034 0198     		ldr	r0, [sp, #4]
 2615 0036 FFF7FEFF 		bl	_ZN13VoiceEnvelope7TriggerEv
 2616              	.LVL152:
 2617              	.L105:
 379:Polyphony.cpp ****         }
 380:Polyphony.cpp **** 
 381:Polyphony.cpp ****         modulations_[voice_idx].trigger = 1.0f; // Send a new trigger
 2618              		.loc 1 381 9 is_stmt 1 view .LVU796
 2619              		.loc 1 381 41 is_stmt 0 view .LVU797
 2620 003a 2821     		movs	r1, #40
 2621 003c 4FF07E52 		mov	r2, #1065353216
 382:Polyphony.cpp ****         if(percussive_engine) {
 2622              		.loc 1 382 9 view .LVU798
 2623 0040 072E     		cmp	r6, #7
 381:Polyphony.cpp ****         if(percussive_engine) {
 2624              		.loc 1 381 41 view .LVU799
 2625 0042 01FB0544 		mla	r4, r1, r5, r4
 2626              	.LVL153:
 381:Polyphony.cpp ****         if(percussive_engine) {
 2627              		.loc 1 381 41 view .LVU800
 2628 0046 04F55D53 		add	r3, r4, #14144
 2629 004a 9A63     		str	r2, [r3, #56]	@ float
 2630 004c 03F13803 		add	r3, r3, #56
 2631              		.loc 1 382 9 is_stmt 1 view .LVU801
 383:Polyphony.cpp ****             modulations_[voice_idx].trigger_patched = true;
 2632              		.loc 1 383 13 view .LVU802
 2633              		.loc 1 383 53 is_stmt 0 view .LVU803
 2634 0050 C2BF     		ittt	gt
 2635 0052 0122     		movgt	r2, #1
 2636 0054 43F28373 		movwgt	r3, #14211
 2637 0058 E254     		strbgt	r2, [r4, r3]
 2638              	.LVL154:
 2639              	.L101:
 2640              		.loc 1 383 53 view .LVU804
 2641              	.LBE1583:
 2642              	.LBE1582:
 384:Polyphony.cpp ****         }
 385:Polyphony.cpp ****         
 386:Polyphony.cpp ****     }
 387:Polyphony.cpp **** }
 2643              		.loc 1 387 1 view .LVU805
 2644 005a 02B0     		add	sp, sp, #8
 2645              		.cfi_def_cfa_offset 16
 2646              		@ sp needed
 2647 005c 70BD     		pop	{r4, r5, r6, pc}
 2648              		.loc 1 387 1 view .LVU806
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 113


 2649              		.cfi_endproc
 2650              	.LFE5365:
 2652              		.section	.text._ZN15PolyphonyEngine30PrepareVoiceParametersInternalEibibffffff,"ax",%progbits
 2653              		.align	1
 2654              		.global	_ZN15PolyphonyEngine30PrepareVoiceParametersInternalEibibffffff
 2655              		.syntax unified
 2656              		.thumb
 2657              		.thumb_func
 2659              	_ZN15PolyphonyEngine30PrepareVoiceParametersInternalEibibffffff:
 2660              	.LVL155:
 2661              	.LFB5358:
 190:Polyphony.cpp ****     // TODO: Adapt logic from AudioProcessor.cpp's PrepareVoiceParameters function.
 2662              		.loc 1 190 120 is_stmt 1 view -0
 2663              		.cfi_startproc
 2664              		@ args = 4, pretend = 0, frame = 8
 2665              		@ frame_needed = 0, uses_anonymous_args = 0
 190:Polyphony.cpp ****     // TODO: Adapt logic from AudioProcessor.cpp's PrepareVoiceParameters function.
 2666              		.loc 1 190 120 is_stmt 0 view .LVU808
 2667 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2668              		.cfi_def_cfa_offset 36
 2669              		.cfi_offset 4, -36
 2670              		.cfi_offset 5, -32
 2671              		.cfi_offset 6, -28
 2672              		.cfi_offset 7, -24
 2673              		.cfi_offset 8, -20
 2674              		.cfi_offset 9, -16
 2675              		.cfi_offset 10, -12
 2676              		.cfi_offset 11, -8
 2677              		.cfi_offset 14, -4
 193:Polyphony.cpp **** 
 2678              		.loc 1 193 10 view .LVU809
 2679 0004 0729     		cmp	r1, #7
 190:Polyphony.cpp ****     // TODO: Adapt logic from AudioProcessor.cpp's PrepareVoiceParameters function.
 2680              		.loc 1 190 120 view .LVU810
 2681 0006 0446     		mov	r4, r0
 2682 0008 8846     		mov	r8, r1
 2683 000a 2DED088B 		vpush.64	{d8, d9, d10, d11}
 2684              		.cfi_def_cfa_offset 68
 2685              		.cfi_offset 80, -68
 2686              		.cfi_offset 81, -64
 2687              		.cfi_offset 82, -60
 2688              		.cfi_offset 83, -56
 2689              		.cfi_offset 84, -52
 2690              		.cfi_offset 85, -48
 2691              		.cfi_offset 86, -44
 2692              		.cfi_offset 87, -40
 2693 000e 85B0     		sub	sp, sp, #20
 2694              		.cfi_def_cfa_offset 88
 190:Polyphony.cpp ****     // TODO: Adapt logic from AudioProcessor.cpp's PrepareVoiceParameters function.
 2695              		.loc 1 190 120 view .LVU811
 2696 0010 B0EE60AA 		vmov.f32	s20, s1
 2697 0014 F0EE41AA 		vmov.f32	s21, s2
 2698 0018 B0EE61BA 		vmov.f32	s22, s3
 193:Polyphony.cpp **** 
 2699              		.loc 1 193 5 is_stmt 1 view .LVU812
 190:Polyphony.cpp ****     // TODO: Adapt logic from AudioProcessor.cpp's PrepareVoiceParameters function.
 2700              		.loc 1 190 120 is_stmt 0 view .LVU813
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 114


 2701 001c 9DF858A0 		ldrb	r10, [sp, #88]	@ zero_extendqisi2
 2702 0020 CDE90232 		strd	r3, r2, [sp, #8]
 193:Polyphony.cpp **** 
 2703              		.loc 1 193 10 view .LVU814
 2704 0024 CCBF     		ite	gt
 2705 0026 0123     		movgt	r3, #1
 2706              	.LVL156:
 193:Polyphony.cpp **** 
 2707              		.loc 1 193 10 view .LVU815
 2708 0028 0023     		movle	r3, #0
 2709 002a 0BEE903A 		vmov	s23, r3	@ int
 2710              	.LVL157:
 195:Polyphony.cpp ****     float release_value = 0.0f;
 2711              		.loc 1 195 5 is_stmt 1 view .LVU816
 196:Polyphony.cpp ****     if (!percussive_engine) {
 2712              		.loc 1 196 5 view .LVU817
 197:Polyphony.cpp ****         float attack_raw = env_attack_val; 
 2713              		.loc 1 197 5 view .LVU818
 2714              	.LBB1601:
 2715 002e 00F38E80 		bgt	.L125
 2716              	.LBB1602:
 198:Polyphony.cpp ****         if (attack_raw < 0.2f) {
 2717              		.loc 1 198 9 view .LVU819
 2718              	.LVL158:
 199:Polyphony.cpp ****             attack_value = attack_raw * (attack_raw * 0.5f);
 2719              		.loc 1 199 9 view .LVU820
 2720 0032 DFED7C7A 		vldr.32	s15, .L132
 204:Polyphony.cpp ****     }
 2721              		.loc 1 204 41 is_stmt 0 view .LVU821
 2722 0036 22EEA29A 		vmul.f32	s18, s5, s5
 199:Polyphony.cpp ****             attack_value = attack_raw * (attack_raw * 0.5f);
 2723              		.loc 1 199 9 view .LVU822
 2724 003a B4EEE72A 		vcmpe.f32	s4, s15
 204:Polyphony.cpp ****     }
 2725              		.loc 1 204 23 view .LVU823
 2726 003e 29EE229A 		vmul.f32	s18, s18, s5
 199:Polyphony.cpp ****             attack_value = attack_raw * (attack_raw * 0.5f);
 2727              		.loc 1 199 9 view .LVU824
 2728 0042 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 200:Polyphony.cpp ****         } else {
 2729              		.loc 1 200 13 is_stmt 1 view .LVU825
 200:Polyphony.cpp ****         } else {
 2730              		.loc 1 200 53 is_stmt 0 view .LVU826
 2731 0046 4ABF     		itet	mi
 2732 0048 F6EE008A 		vmovmi.f32	s17, #5.0e-1
 202:Polyphony.cpp ****         }
 2733              		.loc 1 202 39 view .LVU827
 2734 004c 62EE028A 		vmulpl.f32	s17, s4, s4
 200:Polyphony.cpp ****         } else {
 2735              		.loc 1 200 53 view .LVU828
 2736 0050 62EE288A 		vmulmi.f32	s17, s4, s17
 202:Polyphony.cpp ****         }
 2737              		.loc 1 202 13 is_stmt 1 view .LVU829
 202:Polyphony.cpp ****         }
 2738              		.loc 1 202 26 is_stmt 0 view .LVU830
 2739 0054 68EE828A 		vmul.f32	s17, s17, s4
 2740              	.LVL159:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 115


 204:Polyphony.cpp ****     }
 2741              		.loc 1 204 9 is_stmt 1 view .LVU831
 2742              	.L110:
 204:Polyphony.cpp ****     }
 2743              		.loc 1 204 9 is_stmt 0 view .LVU832
 2744              	.LBE1602:
 2745              	.LBE1601:
 207:Polyphony.cpp ****     float current_global_harmonics = harm_knob_val;
 2746              		.loc 1 207 5 is_stmt 1 view .LVU833
 207:Polyphony.cpp ****     float current_global_harmonics = harm_knob_val;
 2747              		.loc 1 207 11 is_stmt 0 view .LVU834
 2748 0058 F3EE087A 		vmov.f32	s15, #2.4e+1
 2749 005c 04F55D52 		add	r2, r4, #14144
 2750              	.LVL160:
 207:Polyphony.cpp ****     float current_global_harmonics = harm_knob_val;
 2751              		.loc 1 207 11 view .LVU835
 2752 0060 FAEE089A 		vmov.f32	s19, #-1.2e+1
 2753 0064 04F56453 		add	r3, r4, #14592
 2754              	.LVL161:
 207:Polyphony.cpp ****     float current_global_harmonics = harm_knob_val;
 2755              		.loc 1 207 11 view .LVU836
 2756 0068 2032     		adds	r2, r2, #32
 2757 006a 2433     		adds	r3, r3, #36
 2758 006c E0EE279A 		vfma.f32	s19, s0, s15
 2759              	.LVL162:
 208:Polyphony.cpp ****     float current_global_morph = morph_knob_val;
 2760              		.loc 1 208 5 is_stmt 1 view .LVU837
 209:Polyphony.cpp ****     float current_global_timbre = timbre_knob_val;
 2761              		.loc 1 209 5 view .LVU838
 210:Polyphony.cpp **** 
 2762              		.loc 1 210 5 view .LVU839
 213:Polyphony.cpp ****         RenderAndProcessPercussiveArpVoiceInternal(
 2763              		.loc 1 213 5 view .LVU840
 2764 0070 BAF1000F 		cmp	r10, #0
 2765 0074 70D1     		bne	.L114
 2766              	.L116:
 213:Polyphony.cpp ****         RenderAndProcessPercussiveArpVoiceInternal(
 2767              		.loc 1 213 5 is_stmt 0 view .LVU841
 2768 0076 04F56459 		add	r9, r4, #14592
 2769 007a B6EE008A 		vmov.f32	s16, #5.0e-1
 2770 007e BAF1000F 		cmp	r10, #0
 2771 0082 1546     		mov	r5, r2
 2772 0084 1E46     		mov	r6, r3
 2773 0086 09F11409 		add	r9, r9, #20
 2774 008a 04F5605B 		add	fp, r4, #14336
 195:Polyphony.cpp ****     float release_value = 0.0f;
 2775              		.loc 1 195 11 discriminator 1 view .LVU842
 2776 008e 4FF00007 		mov	r7, #0
 2777 0092 08FE228A 		vseleq.f32	s16, s16, s5
 2778              	.LVL163:
 2779              	.L115:
 2780              	.LBB1603:
 226:Polyphony.cpp ****         UpdateVoicePatchParamsInternal(
 2781              		.loc 1 226 23 is_stmt 1 discriminator 1 view .LVU843
 2782 0096 029B     		ldr	r3, [sp, #8]
 2783 0098 9F42     		cmp	r7, r3
 2784 009a 00F3A180 		bgt	.L117
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 116


 227:Polyphony.cpp ****             patches_[v],
 2785              		.loc 1 227 9 view .LVU844
 227:Polyphony.cpp ****             patches_[v],
 2786              		.loc 1 227 39 is_stmt 0 view .LVU845
 2787 009e F9EC017A 		vldmia.32	r9!, {s15}
 2788              	.LVL164:
 227:Polyphony.cpp ****             patches_[v],
 2789              		.loc 1 227 39 view .LVU846
 2790 00a2 A5F1A003 		sub	r3, r5, #160
 239:Polyphony.cpp ****             modulations_[v],
 2791              		.loc 1 239 49 view .LVU847
 2792 00a6 F0EE490A 		vmov.f32	s1, s18
 2793 00aa 5A46     		mov	r2, fp
 2794              	.LBB1604:
 2795              	.LBB1605:
 293:Polyphony.cpp ****     patch.engine = engine_idx;
 2796              		.loc 1 293 23 view .LVU848
 2797 00ac 77EEA97A 		vadd.f32	s15, s15, s19
 2798 00b0 03EE903A 		vmov	s7, r3	@ int
 2799              	.LVL165:
 293:Polyphony.cpp ****     patch.engine = engine_idx;
 2800              		.loc 1 293 23 view .LVU849
 2801              	.LBE1605:
 2802              	.LBI1604:
 291:Polyphony.cpp ****     // TODO: Move logic from global UpdateVoicePatchParams
 2803              		.loc 1 291 6 is_stmt 1 view .LVU850
 2804              	.LBB1606:
 293:Polyphony.cpp ****     patch.engine = engine_idx;
 2805              		.loc 1 293 5 view .LVU851
 298:Polyphony.cpp ****     patch.decay = arp_on ? current_decay : 0.5f;
 2806              		.loc 1 298 22 is_stmt 0 view .LVU852
 2807 00b4 0023     		movs	r3, #0
 2808              	.LVL166:
 298:Polyphony.cpp ****     patch.decay = arp_on ? current_decay : 0.5f;
 2809              		.loc 1 298 22 view .LVU853
 2810              	.LBE1606:
 2811              	.LBE1604:
 239:Polyphony.cpp ****             modulations_[v],
 2812              		.loc 1 239 49 view .LVU854
 2813 00b6 B0EE680A 		vmov.f32	s0, s17
 2814 00ba 2946     		mov	r1, r5
 2815 00bc 2046     		mov	r0, r4
 2816              	.LBB1609:
 2817              	.LBB1607:
 298:Polyphony.cpp ****     patch.decay = arp_on ? current_decay : 0.5f;
 2818              		.loc 1 298 22 view .LVU855
 2819 00be 45F87C3C 		str	r3, [r5, #-124]	@ float
 300:Polyphony.cpp ****     patch.timbre_modulation_amount = 0.f;
 2820              		.loc 1 300 39 view .LVU856
 2821 00c2 45F8903C 		str	r3, [r5, #-144]	@ float
 301:Polyphony.cpp ****     patch.morph_modulation_amount = 0.f;
 2822              		.loc 1 301 36 view .LVU857
 2823 00c6 45F88C3C 		str	r3, [r5, #-140]	@ float
 302:Polyphony.cpp **** }
 2824              		.loc 1 302 35 view .LVU858
 2825 00ca 45F8883C 		str	r3, [r5, #-136]	@ float
 2826              	.LBE1607:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 117


 2827              	.LBE1609:
 239:Polyphony.cpp ****             modulations_[v],
 2828              		.loc 1 239 49 view .LVU859
 2829 00ce 1BEE903A 		vmov	r3, s23	@ int
 2830              	.LBB1610:
 2831              	.LBB1608:
 293:Polyphony.cpp ****     patch.engine = engine_idx;
 2832              		.loc 1 293 16 view .LVU860
 2833 00d2 45ED287A 		vstr.32	s15, [r5, #-160]
 294:Polyphony.cpp ****     patch.harmonics = current_global_harmonics;
 2834              		.loc 1 294 5 is_stmt 1 view .LVU861
 294:Polyphony.cpp ****     patch.harmonics = current_global_harmonics;
 2835              		.loc 1 294 18 is_stmt 0 view .LVU862
 2836 00d6 45F8848C 		str	r8, [r5, #-132]
 295:Polyphony.cpp ****     patch.timbre = current_global_timbre;
 2837              		.loc 1 295 5 is_stmt 1 view .LVU863
 295:Polyphony.cpp ****     patch.timbre = current_global_timbre;
 2838              		.loc 1 295 21 is_stmt 0 view .LVU864
 2839 00da 05ED27AA 		vstr.32	s20, [r5, #-156]
 296:Polyphony.cpp ****     patch.morph = current_global_morph;
 2840              		.loc 1 296 5 is_stmt 1 view .LVU865
 296:Polyphony.cpp ****     patch.morph = current_global_morph;
 2841              		.loc 1 296 18 is_stmt 0 view .LVU866
 2842 00de 05ED26BA 		vstr.32	s22, [r5, #-152]
 297:Polyphony.cpp ****     patch.lpg_colour = 0.0f;
 2843              		.loc 1 297 5 is_stmt 1 view .LVU867
 297:Polyphony.cpp ****     patch.lpg_colour = 0.0f;
 2844              		.loc 1 297 17 is_stmt 0 view .LVU868
 2845 00e2 45ED25AA 		vstr.32	s21, [r5, #-148]
 298:Polyphony.cpp ****     patch.decay = arp_on ? current_decay : 0.5f;
 2846              		.loc 1 298 5 is_stmt 1 view .LVU869
 299:Polyphony.cpp ****     patch.frequency_modulation_amount = 0.f;
 2847              		.loc 1 299 5 view .LVU870
 299:Polyphony.cpp ****     patch.frequency_modulation_amount = 0.f;
 2848              		.loc 1 299 17 is_stmt 0 view .LVU871
 2849 00e6 05ED208A 		vstr.32	s16, [r5, #-128]
 300:Polyphony.cpp ****     patch.timbre_modulation_amount = 0.f;
 2850              		.loc 1 300 5 is_stmt 1 view .LVU872
 301:Polyphony.cpp ****     patch.morph_modulation_amount = 0.f;
 2851              		.loc 1 301 5 view .LVU873
 302:Polyphony.cpp **** }
 2852              		.loc 1 302 5 view .LVU874
 2853              	.LVL167:
 302:Polyphony.cpp **** }
 2854              		.loc 1 302 5 is_stmt 0 view .LVU875
 2855              	.LBE1608:
 2856              	.LBE1610:
 239:Polyphony.cpp ****             modulations_[v],
 2857              		.loc 1 239 9 is_stmt 1 view .LVU876
 239:Polyphony.cpp ****             modulations_[v],
 2858              		.loc 1 239 49 is_stmt 0 view .LVU877
 2859 00ea FFF7FEFF 		bl	_ZN15PolyphonyEngine40UpdateVoiceModulationAndEnvelopeInternalERN6plaits11ModulationsER13VoiceE
 2860              	.LVL168:
 247:Polyphony.cpp ****             UpdateMonoNonArpVoiceTriggerInternal(
 2861              		.loc 1 247 9 is_stmt 1 view .LVU878
 2862 00ee 039B     		ldr	r3, [sp, #12]
 2863 00f0 6BB9     		cbnz	r3, .L118
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 118


 2864              	.LVL169:
 247:Polyphony.cpp ****             UpdateMonoNonArpVoiceTriggerInternal(
 2865              		.loc 1 247 24 is_stmt 0 discriminator 1 view .LVU879
 2866 00f2 BAF1000F 		cmp	r10, #0
 2867 00f6 0AD1     		bne	.L118
 248:Polyphony.cpp ****                 modulations_[v],
 2868              		.loc 1 248 13 is_stmt 1 view .LVU880
 248:Polyphony.cpp ****                 modulations_[v],
 2869              		.loc 1 248 49 is_stmt 0 view .LVU881
 2870 00f8 04F56452 		add	r2, r4, #14592
 2871 00fc 04F54053 		add	r3, r4, #12288
 2872 0100 2046     		mov	r0, r4
 2873 0102 1032     		adds	r2, r2, #16
 2874 0104 93F8AC3A 		ldrb	r3, [r3, #2732]	@ zero_extendqisi2
 2875 0108 3A44     		add	r2, r2, r7
 2876 010a FFF7FEFF 		bl	_ZN15PolyphonyEngine36UpdateMonoNonArpVoiceTriggerInternalERN6plaits11ModulationsERbb
 2877              	.LVL170:
 2878              	.L118:
 255:Polyphony.cpp **** 
 2879              		.loc 1 255 9 is_stmt 1 view .LVU882
 255:Polyphony.cpp **** 
 2880              		.loc 1 255 26 is_stmt 0 view .LVU883
 2881 010e 1023     		movs	r3, #16
 2882 0110 4FF45B60 		mov	r0, #3504
 2883 0114 2A46     		mov	r2, r5
 2884 0116 13EE901A 		vmov	r1, s7	@ int
 2885 011a 0093     		str	r3, [sp]
 2886 011c 3346     		mov	r3, r6
 2887 011e 00FB0740 		mla	r0, r0, r7, r4
 2888 0122 FFF7FEFF 		bl	_ZN6plaits5Voice6RenderERKNS_5PatchERKNS_11ModulationsEPNS0_5FrameEj
 2889              	.LVL171:
 257:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 2890              		.loc 1 257 9 is_stmt 1 view .LVU884
 2891 0126 039B     		ldr	r3, [sp, #12]
 2892 0128 5BB9     		cbnz	r3, .L119
 257:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 2893              		.loc 1 257 24 is_stmt 0 discriminator 1 view .LVU885
 2894 012a BAF1000F 		cmp	r10, #0
 2895 012e 08D1     		bne	.L119
 257:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 2896              		.loc 1 257 35 discriminator 2 view .LVU886
 2897 0130 55F8843C 		ldr	r3, [r5, #-132]
 2898 0134 072B     		cmp	r3, #7
 2899 0136 04DD     		ble	.L119
 257:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 2900              		.loc 1 257 63 discriminator 3 view .LVU887
 2901 0138 1FB9     		cbnz	r7, .L119
 258:Polyphony.cpp ****         }
 2902              		.loc 1 258 13 is_stmt 1 view .LVU888
 258:Polyphony.cpp ****         }
 2903              		.loc 1 258 37 is_stmt 0 view .LVU889
 2904 013a 04F55D53 		add	r3, r4, #14144
 2905 013e 0022     		movs	r2, #0
 2906 0140 9A63     		str	r2, [r3, #56]	@ float
 2907              	.L119:
 226:Polyphony.cpp ****         UpdateVoicePatchParamsInternal(
 2908              		.loc 1 226 5 is_stmt 1 discriminator 2 view .LVU890
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 119


 2909 0142 0137     		adds	r7, r7, #1
 2910              	.LVL172:
 226:Polyphony.cpp ****         UpdateVoicePatchParamsInternal(
 2911              		.loc 1 226 5 is_stmt 0 discriminator 2 view .LVU891
 2912 0144 2835     		adds	r5, r5, #40
 2913 0146 4036     		adds	r6, r6, #64
 2914 0148 0BF1440B 		add	fp, fp, #68
 2915 014c A3E7     		b	.L115
 2916              	.LVL173:
 2917              	.L125:
 226:Polyphony.cpp ****         UpdateVoicePatchParamsInternal(
 2918              		.loc 1 226 5 discriminator 2 view .LVU892
 2919              	.LBE1603:
 196:Polyphony.cpp ****     if (!percussive_engine) {
 2920              		.loc 1 196 11 view .LVU893
 2921 014e 9FED369A 		vldr.32	s18, .L132+4
 195:Polyphony.cpp ****     float release_value = 0.0f;
 2922              		.loc 1 195 11 view .LVU894
 2923 0152 F0EE498A 		vmov.f32	s17, s18
 2924 0156 7FE7     		b	.L110
 2925              	.LVL174:
 2926              	.L114:
 213:Polyphony.cpp ****         RenderAndProcessPercussiveArpVoiceInternal(
 2927              		.loc 1 213 16 discriminator 1 view .LVU895
 2928 0158 B8F1070F 		cmp	r8, #7
 2929 015c 8BDD     		ble	.L116
 214:Polyphony.cpp ****             0, 
 2930              		.loc 1 214 9 is_stmt 1 view .LVU896
 2931              	.LVL175:
 2932              	.LBB1611:
 2933              	.LBI1611:
 333:Polyphony.cpp ****     // Ported from global RenderAndProcessPercussiveArpVoice
 2934              		.loc 1 333 6 view .LVU897
 2935              	.LBE1611:
 335:Polyphony.cpp **** 
 2936              		.loc 1 335 5 view .LVU898
 2937              	.LBB1622:
 2938              	.LBB1612:
 2939              	.LBI1612:
 333:Polyphony.cpp ****     // Ported from global RenderAndProcessPercussiveArpVoice
 2940              		.loc 1 333 6 view .LVU899
 2941              	.LBB1613:
 337:Polyphony.cpp ****         patches_[voice_idx],
 2942              		.loc 1 337 5 view .LVU900
 2943              	.LBB1614:
 2944              	.LBI1614:
 291:Polyphony.cpp ****     // TODO: Move logic from global UpdateVoicePatchParams
 2945              		.loc 1 291 6 view .LVU901
 2946              	.LBB1615:
 293:Polyphony.cpp ****     patch.engine = engine_idx;
 2947              		.loc 1 293 5 view .LVU902
 293:Polyphony.cpp ****     patch.engine = engine_idx;
 2948              		.loc 1 293 16 is_stmt 0 view .LVU903
 2949 015e 04F54050 		add	r0, r4, #12288
 2950              	.LVL176:
 293:Polyphony.cpp ****     patch.engine = engine_idx;
 2951              		.loc 1 293 16 view .LVU904
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 120


 2952 0162 04F55B51 		add	r1, r4, #14016
 2953              	.LVL177:
 293:Polyphony.cpp ****     patch.engine = engine_idx;
 2954              		.loc 1 293 16 view .LVU905
 2955              	.LBE1615:
 2956              	.LBE1614:
 337:Polyphony.cpp ****         patches_[voice_idx],
 2957              		.loc 1 337 35 view .LVU906
 2958 0166 00F61415 		addw	r5, r0, #2324
 2959              	.LBB1617:
 2960              	.LBB1616:
 298:Polyphony.cpp ****     patch.decay = arp_on ? current_decay : 0.5f;
 2961              		.loc 1 298 22 view .LVU907
 2962 016a 00F2E466 		addw	r6, r0, #1764
 293:Polyphony.cpp ****     patch.engine = engine_idx;
 2963              		.loc 1 293 23 view .LVU908
 2964 016e D5ED007A 		vldr.32	s15, [r5]
 295:Polyphony.cpp ****     patch.timbre = current_global_timbre;
 2965              		.loc 1 295 21 view .LVU909
 2966 0172 00F2C465 		addw	r5, r0, #1732
 293:Polyphony.cpp ****     patch.engine = engine_idx;
 2967              		.loc 1 293 23 view .LVU910
 2968 0176 77EEA99A 		vadd.f32	s19, s15, s19
 2969              	.LVL178:
 293:Polyphony.cpp ****     patch.engine = engine_idx;
 2970              		.loc 1 293 16 view .LVU911
 2971 017a C1ED009A 		vstr.32	s19, [r1]
 294:Polyphony.cpp ****     patch.harmonics = current_global_harmonics;
 2972              		.loc 1 294 5 is_stmt 1 view .LVU912
 294:Polyphony.cpp ****     patch.harmonics = current_global_harmonics;
 2973              		.loc 1 294 18 is_stmt 0 view .LVU913
 2974 017e C0F8DC86 		str	r8, [r0, #1756]
 295:Polyphony.cpp ****     patch.timbre = current_global_timbre;
 2975              		.loc 1 295 5 is_stmt 1 view .LVU914
 295:Polyphony.cpp ****     patch.timbre = current_global_timbre;
 2976              		.loc 1 295 21 is_stmt 0 view .LVU915
 2977 0182 85ED00AA 		vstr.32	s20, [r5]
 296:Polyphony.cpp ****     patch.morph = current_global_morph;
 2978              		.loc 1 296 5 is_stmt 1 view .LVU916
 296:Polyphony.cpp ****     patch.morph = current_global_morph;
 2979              		.loc 1 296 18 is_stmt 0 view .LVU917
 2980 0186 00F5D965 		add	r5, r0, #1736
 2981 018a 85ED00BA 		vstr.32	s22, [r5]
 297:Polyphony.cpp ****     patch.lpg_colour = 0.0f;
 2982              		.loc 1 297 5 is_stmt 1 view .LVU918
 297:Polyphony.cpp ****     patch.lpg_colour = 0.0f;
 2983              		.loc 1 297 17 is_stmt 0 view .LVU919
 2984 018e 00F2CC65 		addw	r5, r0, #1740
 2985 0192 C5ED00AA 		vstr.32	s21, [r5]
 298:Polyphony.cpp ****     patch.decay = arp_on ? current_decay : 0.5f;
 2986              		.loc 1 298 5 is_stmt 1 view .LVU920
 298:Polyphony.cpp ****     patch.decay = arp_on ? current_decay : 0.5f;
 2987              		.loc 1 298 22 is_stmt 0 view .LVU921
 2988 0196 0025     		movs	r5, #0
 2989 0198 3560     		str	r5, [r6]	@ float
 299:Polyphony.cpp ****     patch.frequency_modulation_amount = 0.f;
 2990              		.loc 1 299 5 is_stmt 1 view .LVU922
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 121


 299:Polyphony.cpp ****     patch.frequency_modulation_amount = 0.f;
 2991              		.loc 1 299 17 is_stmt 0 view .LVU923
 2992 019a 00F5DC66 		add	r6, r0, #1760
 2993 019e C6ED002A 		vstr.32	s5, [r6]
 300:Polyphony.cpp ****     patch.timbre_modulation_amount = 0.f;
 2994              		.loc 1 300 5 is_stmt 1 view .LVU924
 300:Polyphony.cpp ****     patch.timbre_modulation_amount = 0.f;
 2995              		.loc 1 300 39 is_stmt 0 view .LVU925
 2996 01a2 00F5DA66 		add	r6, r0, #1744
 2997 01a6 3560     		str	r5, [r6]	@ float
 301:Polyphony.cpp ****     patch.morph_modulation_amount = 0.f;
 2998              		.loc 1 301 5 is_stmt 1 view .LVU926
 301:Polyphony.cpp ****     patch.morph_modulation_amount = 0.f;
 2999              		.loc 1 301 36 is_stmt 0 view .LVU927
 3000 01a8 00F2D466 		addw	r6, r0, #1748
 302:Polyphony.cpp **** }
 3001              		.loc 1 302 35 view .LVU928
 3002 01ac 00F5DB60 		add	r0, r0, #1752
 301:Polyphony.cpp ****     patch.morph_modulation_amount = 0.f;
 3003              		.loc 1 301 36 view .LVU929
 3004 01b0 3560     		str	r5, [r6]	@ float
 302:Polyphony.cpp **** }
 3005              		.loc 1 302 5 is_stmt 1 view .LVU930
 302:Polyphony.cpp **** }
 3006              		.loc 1 302 35 is_stmt 0 view .LVU931
 3007 01b2 0560     		str	r5, [r0]	@ float
 3008              	.LVL179:
 302:Polyphony.cpp **** }
 3009              		.loc 1 302 35 view .LVU932
 3010              	.LBE1616:
 3011              	.LBE1617:
 351:Polyphony.cpp ****     
 3012              		.loc 1 351 5 is_stmt 1 view .LVU933
 351:Polyphony.cpp ****     
 3013              		.loc 1 351 30 is_stmt 0 view .LVU934
 3014 01b4 1020     		movs	r0, #16
 3015 01b6 0090     		str	r0, [sp]
 3016 01b8 2046     		mov	r0, r4
 3017 01ba FFF7FEFF 		bl	_ZN6plaits5Voice6RenderERKNS_5PatchERKNS_11ModulationsEPNS0_5FrameEj
 3018              	.LVL180:
 357:Polyphony.cpp ****         for (int v = 1; v < NUM_VOICES; ++v) {
 3019              		.loc 1 357 5 is_stmt 1 view .LVU935
 3020              	.LBB1618:
 358:Polyphony.cpp ****             SilenceVoiceOutputInternal(v);
 3021              		.loc 1 358 27 view .LVU936
 359:Polyphony.cpp ****         }
 3022              		.loc 1 359 13 view .LVU937
 359:Polyphony.cpp ****         }
 3023              		.loc 1 359 39 is_stmt 0 view .LVU938
 3024 01be 2046     		mov	r0, r4
 3025 01c0 0121     		movs	r1, #1
 3026 01c2 FFF7FEFF 		bl	_ZN15PolyphonyEngine26SilenceVoiceOutputInternalEi
 3027              	.LVL181:
 358:Polyphony.cpp ****             SilenceVoiceOutputInternal(v);
 3028              		.loc 1 358 9 is_stmt 1 view .LVU939
 358:Polyphony.cpp ****             SilenceVoiceOutputInternal(v);
 3029              		.loc 1 358 27 view .LVU940
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 122


 359:Polyphony.cpp ****         }
 3030              		.loc 1 359 13 view .LVU941
 359:Polyphony.cpp ****         }
 3031              		.loc 1 359 39 is_stmt 0 view .LVU942
 3032 01c6 2046     		mov	r0, r4
 3033 01c8 0221     		movs	r1, #2
 3034 01ca FFF7FEFF 		bl	_ZN15PolyphonyEngine26SilenceVoiceOutputInternalEi
 3035              	.LVL182:
 358:Polyphony.cpp ****             SilenceVoiceOutputInternal(v);
 3036              		.loc 1 358 9 is_stmt 1 view .LVU943
 358:Polyphony.cpp ****             SilenceVoiceOutputInternal(v);
 3037              		.loc 1 358 27 view .LVU944
 359:Polyphony.cpp ****         }
 3038              		.loc 1 359 13 view .LVU945
 359:Polyphony.cpp ****         }
 3039              		.loc 1 359 39 is_stmt 0 view .LVU946
 3040 01ce 0321     		movs	r1, #3
 3041 01d0 2046     		mov	r0, r4
 3042              	.LBE1618:
 3043              	.LBE1613:
 3044              	.LBE1612:
 3045              	.LBE1622:
 273:Polyphony.cpp **** 
 3046              		.loc 1 273 1 view .LVU947
 3047 01d2 05B0     		add	sp, sp, #20
 3048              		.cfi_remember_state
 3049              		.cfi_def_cfa_offset 68
 3050              		@ sp needed
 3051 01d4 BDEC088B 		vldm	sp!, {d8-d11}
 3052              		.cfi_restore 86
 3053              		.cfi_restore 87
 3054              		.cfi_restore 84
 3055              		.cfi_restore 85
 3056              		.cfi_restore 82
 3057              		.cfi_restore 83
 3058              		.cfi_restore 80
 3059              		.cfi_restore 81
 3060              		.cfi_def_cfa_offset 36
 3061              	.LVL183:
 273:Polyphony.cpp **** 
 3062              		.loc 1 273 1 view .LVU948
 3063 01d8 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3064              		.cfi_restore 14
 3065              		.cfi_restore 11
 3066              		.cfi_restore 10
 3067              		.cfi_restore 9
 3068              		.cfi_restore 8
 3069              		.cfi_restore 7
 3070              		.cfi_restore 6
 3071              		.cfi_restore 5
 3072              		.cfi_restore 4
 3073              		.cfi_def_cfa_offset 0
 3074              	.LVL184:
 3075              	.LBB1623:
 3076              	.LBB1621:
 3077              	.LBB1620:
 3078              	.LBB1619:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 123


 359:Polyphony.cpp ****         }
 3079              		.loc 1 359 39 view .LVU949
 3080 01dc FFF7FEBF 		b	_ZN15PolyphonyEngine26SilenceVoiceOutputInternalEi
 3081              	.LVL185:
 3082              	.L117:
 3083              		.cfi_restore_state
 359:Polyphony.cpp ****         }
 3084              		.loc 1 359 39 view .LVU950
 3085              	.LBE1619:
 3086              	.LBE1620:
 3087              	.LBE1621:
 3088              	.LBE1623:
 262:Polyphony.cpp ****     for (int v = effective_voices; v < NUM_VOICES; ++v) {
 3089              		.loc 1 262 5 is_stmt 1 view .LVU951
 262:Polyphony.cpp ****     for (int v = effective_voices; v < NUM_VOICES; ++v) {
 3090              		.loc 1 262 9 is_stmt 0 view .LVU952
 3091 01e0 029B     		ldr	r3, [sp, #8]
 3092 01e2 5D1C     		adds	r5, r3, #1
 3093              	.LVL186:
 263:Polyphony.cpp ****          SilenceVoiceOutputInternal(v);
 3094              		.loc 1 263 5 is_stmt 1 view .LVU953
 3095              	.L121:
 3096              	.LBB1624:
 263:Polyphony.cpp ****          SilenceVoiceOutputInternal(v);
 3097              		.loc 1 263 38 discriminator 3 view .LVU954
 3098 01e4 042D     		cmp	r5, #4
 3099 01e6 05D0     		beq	.L120
 264:Polyphony.cpp ****     }
 3100              		.loc 1 264 10 discriminator 2 view .LVU955
 264:Polyphony.cpp ****     }
 3101              		.loc 1 264 36 is_stmt 0 discriminator 2 view .LVU956
 3102 01e8 2946     		mov	r1, r5
 3103 01ea 2046     		mov	r0, r4
 263:Polyphony.cpp ****          SilenceVoiceOutputInternal(v);
 3104              		.loc 1 263 5 discriminator 2 view .LVU957
 3105 01ec 0135     		adds	r5, r5, #1
 3106              	.LVL187:
 264:Polyphony.cpp ****     }
 3107              		.loc 1 264 36 discriminator 2 view .LVU958
 3108 01ee FFF7FEFF 		bl	_ZN15PolyphonyEngine26SilenceVoiceOutputInternalEi
 3109              	.LVL188:
 263:Polyphony.cpp ****          SilenceVoiceOutputInternal(v);
 3110              		.loc 1 263 5 is_stmt 1 discriminator 2 view .LVU959
 263:Polyphony.cpp ****          SilenceVoiceOutputInternal(v);
 3111              		.loc 1 263 5 is_stmt 0 discriminator 2 view .LVU960
 3112 01f2 F7E7     		b	.L121
 3113              	.L120:
 263:Polyphony.cpp ****          SilenceVoiceOutputInternal(v);
 3114              		.loc 1 263 5 discriminator 2 view .LVU961
 3115              	.LBE1624:
 267:Polyphony.cpp ****         for(int v = 0; v <= max_voice_idx; ++v) {
 3116              		.loc 1 267 5 is_stmt 1 view .LVU962
 3117              	.LBB1625:
 267:Polyphony.cpp ****         for(int v = 0; v <= max_voice_idx; ++v) {
 3118              		.loc 1 267 8 is_stmt 0 view .LVU963
 3119 01f4 04F54056 		add	r6, r4, #12288
 267:Polyphony.cpp ****         for(int v = 0; v <= max_voice_idx; ++v) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 124


 3120              		.loc 1 267 5 view .LVU964
 3121 01f8 96F8AC3A 		ldrb	r3, [r6, #2732]	@ zero_extendqisi2
 3122 01fc 63B1     		cbz	r3, .L109
 3123              	.LBB1626:
 3124              	.LBB1627:
 268:Polyphony.cpp ****             RetriggerActiveVoiceEnvelopeInternal(v);
 3125              		.loc 1 268 17 view .LVU965
 3126 01fe 0025     		movs	r5, #0
 3127              	.LVL189:
 3128              	.L124:
 268:Polyphony.cpp ****             RetriggerActiveVoiceEnvelopeInternal(v);
 3129              		.loc 1 268 26 is_stmt 1 discriminator 3 view .LVU966
 3130 0200 029B     		ldr	r3, [sp, #8]
 3131 0202 9D42     		cmp	r5, r3
 3132 0204 05DC     		bgt	.L123
 269:Polyphony.cpp ****         }
 3133              		.loc 1 269 13 discriminator 2 view .LVU967
 269:Polyphony.cpp ****         }
 3134              		.loc 1 269 49 is_stmt 0 discriminator 2 view .LVU968
 3135 0206 2946     		mov	r1, r5
 3136 0208 2046     		mov	r0, r4
 268:Polyphony.cpp ****             RetriggerActiveVoiceEnvelopeInternal(v);
 3137              		.loc 1 268 9 discriminator 2 view .LVU969
 3138 020a 0135     		adds	r5, r5, #1
 3139              	.LVL190:
 269:Polyphony.cpp ****         }
 3140              		.loc 1 269 49 discriminator 2 view .LVU970
 3141 020c FFF7FEFF 		bl	_ZN15PolyphonyEngine36RetriggerActiveVoiceEnvelopeInternalEi
 3142              	.LVL191:
 268:Polyphony.cpp ****             RetriggerActiveVoiceEnvelopeInternal(v);
 3143              		.loc 1 268 9 is_stmt 1 discriminator 2 view .LVU971
 268:Polyphony.cpp ****             RetriggerActiveVoiceEnvelopeInternal(v);
 3144              		.loc 1 268 9 is_stmt 0 discriminator 2 view .LVU972
 3145 0210 F6E7     		b	.L124
 3146              	.L123:
 268:Polyphony.cpp ****             RetriggerActiveVoiceEnvelopeInternal(v);
 3147              		.loc 1 268 9 discriminator 2 view .LVU973
 3148              	.LBE1627:
 271:Polyphony.cpp ****     }
 3149              		.loc 1 271 9 is_stmt 1 view .LVU974
 271:Polyphony.cpp ****     }
 3150              		.loc 1 271 30 is_stmt 0 view .LVU975
 3151 0212 0023     		movs	r3, #0
 3152 0214 86F8AC3A 		strb	r3, [r6, #2732]
 3153              	.LVL192:
 3154              	.L109:
 271:Polyphony.cpp ****     }
 3155              		.loc 1 271 30 view .LVU976
 3156              	.LBE1626:
 3157              	.LBE1625:
 273:Polyphony.cpp **** 
 3158              		.loc 1 273 1 view .LVU977
 3159 0218 05B0     		add	sp, sp, #20
 3160              		.cfi_def_cfa_offset 68
 3161              		@ sp needed
 3162 021a BDEC088B 		vldm	sp!, {d8-d11}
 3163              		.cfi_restore 86
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 125


 3164              		.cfi_restore 87
 3165              		.cfi_restore 84
 3166              		.cfi_restore 85
 3167              		.cfi_restore 82
 3168              		.cfi_restore 83
 3169              		.cfi_restore 80
 3170              		.cfi_restore 81
 3171              		.cfi_def_cfa_offset 36
 3172              	.LVL193:
 273:Polyphony.cpp **** 
 3173              		.loc 1 273 1 view .LVU978
 3174 021e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3175              	.LVL194:
 3176              	.L133:
 273:Polyphony.cpp **** 
 3177              		.loc 1 273 1 view .LVU979
 3178 0222 00BF     		.align	2
 3179              	.L132:
 3180 0224 CDCC4C3E 		.word	1045220557
 3181 0228 00000000 		.word	0
 3182              		.cfi_endproc
 3183              	.LFE5358:
 3185              		.section	.text._ZN15PolyphonyEngine11RenderBlockEibibffffffff,"ax",%progbits
 3186              		.align	1
 3187              		.global	_ZN15PolyphonyEngine11RenderBlockEibibffffffff
 3188              		.syntax unified
 3189              		.thumb
 3190              		.thumb_func
 3192              	_ZN15PolyphonyEngine11RenderBlockEibibffffffff:
 3193              	.LVL195:
 3194              	.LFB5353:
 105:Polyphony.cpp ****     // This function will orchestrate the voice rendering for a block.
 3195              		.loc 1 105 77 is_stmt 1 view -0
 3196              		.cfi_startproc
 3197              		@ args = 4, pretend = 0, frame = 0
 3198              		@ frame_needed = 0, uses_anonymous_args = 0
 109:Polyphony.cpp **** 
 3199              		.loc 1 109 5 view .LVU981
 105:Polyphony.cpp ****     // This function will orchestrate the voice rendering for a block.
 3200              		.loc 1 105 77 is_stmt 0 view .LVU982
 3201 0000 73B5     		push	{r0, r1, r4, r5, r6, lr}
 3202              		.cfi_def_cfa_offset 24
 3203              		.cfi_offset 4, -16
 3204              		.cfi_offset 5, -12
 3205              		.cfi_offset 6, -8
 3206              		.cfi_offset 14, -4
 105:Polyphony.cpp ****     // This function will orchestrate the voice rendering for a block.
 3207              		.loc 1 105 77 view .LVU983
 3208 0002 9DF81860 		ldrb	r6, [sp, #24]	@ zero_extendqisi2
 3209 0006 0446     		mov	r4, r0
 3210 0008 1546     		mov	r5, r2
 109:Polyphony.cpp **** 
 3211              		.loc 1 109 35 view .LVU984
 3212 000a 013B     		subs	r3, r3, #1
 3213              	.LVL196:
 109:Polyphony.cpp **** 
 3214              		.loc 1 109 35 view .LVU985
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 126


 3215 000c 0096     		str	r6, [sp]
 3216 000e FFF7FEFF 		bl	_ZN15PolyphonyEngine30PrepareVoiceParametersInternalEibibffffff
 3217              	.LVL197:
 112:Polyphony.cpp **** 
 3218              		.loc 1 112 5 is_stmt 1 view .LVU986
 112:Polyphony.cpp **** 
 3219              		.loc 1 112 34 is_stmt 0 view .LVU987
 3220 0012 2946     		mov	r1, r5
 3221 0014 2046     		mov	r0, r4
 3222 0016 FFF7FEFF 		bl	_ZN15PolyphonyEngine29ProcessVoiceEnvelopesInternalEb
 3223              	.LVL198:
 115:Polyphony.cpp ****         modulations_[0].trigger = 0.0f;
 3224              		.loc 1 115 5 is_stmt 1 view .LVU988
 3225 001a 46B1     		cbz	r6, .L134
 116:Polyphony.cpp ****         modulations_[0].trigger_patched = false; 
 3226              		.loc 1 116 9 view .LVU989
 116:Polyphony.cpp ****         modulations_[0].trigger_patched = false; 
 3227              		.loc 1 116 33 is_stmt 0 view .LVU990
 3228 001c 04F54054 		add	r4, r4, #12288
 3229              	.LVL199:
 116:Polyphony.cpp ****         modulations_[0].trigger_patched = false; 
 3230              		.loc 1 116 33 view .LVU991
 3231 0020 0022     		movs	r2, #0
 3232 0022 04F5EF63 		add	r3, r4, #1912
 3233 0026 1A60     		str	r2, [r3]	@ float
 117:Polyphony.cpp ****     }
 3234              		.loc 1 117 9 is_stmt 1 view .LVU992
 117:Polyphony.cpp ****     }
 3235              		.loc 1 117 41 is_stmt 0 view .LVU993
 3236 0028 0023     		movs	r3, #0
 3237 002a 84F88337 		strb	r3, [r4, #1923]
 3238              	.LVL200:
 3239              	.L134:
 119:Polyphony.cpp **** 
 3240              		.loc 1 119 1 view .LVU994
 3241 002e 02B0     		add	sp, sp, #8
 3242              		.cfi_def_cfa_offset 16
 3243              		@ sp needed
 3244 0030 70BD     		pop	{r4, r5, r6, pc}
 119:Polyphony.cpp **** 
 3245              		.loc 1 119 1 view .LVU995
 3246              		.cfi_endproc
 3247              	.LFE5353:
 3249              		.section	.text._ZN15PolyphonyEngine29ClearAllVoicesForEngineSwitchEv,"ax",%progbits
 3250              		.align	1
 3251              		.global	_ZN15PolyphonyEngine29ClearAllVoicesForEngineSwitchEv
 3252              		.syntax unified
 3253              		.thumb
 3254              		.thumb_func
 3256              	_ZN15PolyphonyEngine29ClearAllVoicesForEngineSwitchEv:
 3257              	.LVL201:
 3258              	.LFB5366:
 388:Polyphony.cpp **** 
 389:Polyphony.cpp **** void PolyphonyEngine::ClearAllVoicesForEngineSwitch() {
 3259              		.loc 1 389 55 is_stmt 1 view -0
 3260              		.cfi_startproc
 3261              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 127


 3262              		@ frame_needed = 0, uses_anonymous_args = 0
 390:Polyphony.cpp ****     for (int v = 0; v < NUM_VOICES; ++v) {
 3263              		.loc 1 390 5 view .LVU997
 3264              	.LBB1628:
 3265              		.loc 1 390 23 view .LVU998
 3266              	.LBE1628:
 389:Polyphony.cpp ****     for (int v = 0; v < NUM_VOICES; ++v) {
 3267              		.loc 1 389 55 is_stmt 0 view .LVU999
 3268 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3269              		.cfi_def_cfa_offset 24
 3270              		.cfi_offset 4, -24
 3271              		.cfi_offset 5, -20
 3272              		.cfi_offset 6, -16
 3273              		.cfi_offset 7, -12
 3274              		.cfi_offset 8, -8
 3275              		.cfi_offset 14, -4
 3276 0004 00F56456 		add	r6, r0, #14592
 3277 0008 00F55D55 		add	r5, r0, #14144
 3278 000c 00F56454 		add	r4, r0, #14592
 3279 0010 00F56057 		add	r7, r0, #14336
 3280 0014 1036     		adds	r6, r6, #16
 3281 0016 3835     		adds	r5, r5, #56
 3282 0018 2434     		adds	r4, r4, #36
 3283 001a B046     		mov	r8, r6
 3284              	.LVL202:
 3285              	.L140:
 3286              	.LBB1629:
 391:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 3287              		.loc 1 391 9 is_stmt 1 discriminator 2 view .LVU1000
 3288              		.loc 1 391 34 is_stmt 0 discriminator 2 view .LVU1001
 3289 001c 3846     		mov	r0, r7
 390:Polyphony.cpp ****     for (int v = 0; v < NUM_VOICES; ++v) {
 3290              		.loc 1 390 23 discriminator 2 view .LVU1002
 3291 001e 4437     		adds	r7, r7, #68
 3292              		.loc 1 391 34 discriminator 2 view .LVU1003
 3293 0020 FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 3294              	.LVL203:
 392:Polyphony.cpp ****         voice_active_[v] = false;
 3295              		.loc 1 392 9 is_stmt 1 discriminator 2 view .LVU1004
 3296              		.loc 1 392 26 is_stmt 0 discriminator 2 view .LVU1005
 3297 0024 0021     		movs	r1, #0
 393:Polyphony.cpp ****         modulations_[v].trigger = 0.0f;
 3298              		.loc 1 393 33 discriminator 2 view .LVU1006
 3299 0026 0023     		movs	r3, #0
 394:Polyphony.cpp ****         modulations_[v].trigger_patched = false;
 395:Polyphony.cpp ****         modulations_[v].level_patched = false; 
 396:Polyphony.cpp ****         memset(output_buffers_[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 3300              		.loc 1 396 15 discriminator 2 view .LVU1007
 3301 0028 2046     		mov	r0, r4
 392:Polyphony.cpp ****         modulations_[v].trigger = 0.0f;
 3302              		.loc 1 392 26 discriminator 2 view .LVU1008
 3303 002a 06F8011B 		strb	r1, [r6], #1
 3304              	.LVL204:
 393:Polyphony.cpp ****         modulations_[v].trigger = 0.0f;
 3305              		.loc 1 393 9 is_stmt 1 discriminator 2 view .LVU1009
 3306              		.loc 1 396 15 is_stmt 0 discriminator 2 view .LVU1010
 3307 002e 4022     		movs	r2, #64
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 128


 393:Polyphony.cpp ****         modulations_[v].trigger = 0.0f;
 3308              		.loc 1 393 33 discriminator 2 view .LVU1011
 3309 0030 2B60     		str	r3, [r5]	@ float
 394:Polyphony.cpp ****         modulations_[v].trigger_patched = false;
 3310              		.loc 1 394 9 is_stmt 1 discriminator 2 view .LVU1012
 390:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 3311              		.loc 1 390 23 is_stmt 0 discriminator 2 view .LVU1013
 3312 0032 4034     		adds	r4, r4, #64
 394:Polyphony.cpp ****         modulations_[v].trigger_patched = false;
 3313              		.loc 1 394 41 discriminator 2 view .LVU1014
 3314 0034 E972     		strb	r1, [r5, #11]
 395:Polyphony.cpp ****         memset(output_buffers_[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 3315              		.loc 1 395 9 is_stmt 1 discriminator 2 view .LVU1015
 390:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 3316              		.loc 1 390 23 is_stmt 0 discriminator 2 view .LVU1016
 3317 0036 2835     		adds	r5, r5, #40
 395:Polyphony.cpp ****         memset(output_buffers_[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 3318              		.loc 1 395 39 discriminator 2 view .LVU1017
 3319 0038 05F81C1C 		strb	r1, [r5, #-28]
 3320              		.loc 1 396 9 is_stmt 1 discriminator 2 view .LVU1018
 3321              		.loc 1 396 15 is_stmt 0 discriminator 2 view .LVU1019
 3322 003c FFF7FEFF 		bl	memset
 3323              	.LVL205:
 390:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 3324              		.loc 1 390 5 is_stmt 1 discriminator 2 view .LVU1020
 390:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 3325              		.loc 1 390 23 discriminator 2 view .LVU1021
 3326 0040 4745     		cmp	r7, r8
 3327 0042 EBD1     		bne	.L140
 3328              	.LBE1629:
 397:Polyphony.cpp ****     }
 398:Polyphony.cpp **** }
 3329              		.loc 1 398 1 is_stmt 0 view .LVU1022
 3330 0044 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3331              		.loc 1 398 1 view .LVU1023
 3332              		.cfi_endproc
 3333              	.LFE5366:
 3335              		.section	.text._ZN15PolyphonyEngine23TransferPolyToMonoVoiceEi,"ax",%progbits
 3336              		.align	1
 3337              		.global	_ZN15PolyphonyEngine23TransferPolyToMonoVoiceEi
 3338              		.syntax unified
 3339              		.thumb
 3340              		.thumb_func
 3342              	_ZN15PolyphonyEngine23TransferPolyToMonoVoiceEi:
 3343              	.LVL206:
 3344              	.LFB5367:
 399:Polyphony.cpp **** 
 400:Polyphony.cpp **** void PolyphonyEngine::TransferPolyToMonoVoice(int source_voice_idx) {
 3345              		.loc 1 400 69 is_stmt 1 view -0
 3346              		.cfi_startproc
 3347              		@ args = 0, pretend = 0, frame = 0
 3348              		@ frame_needed = 0, uses_anonymous_args = 0
 401:Polyphony.cpp ****     if (source_voice_idx < 0 || source_voice_idx >= NUM_VOICES) return;
 3349              		.loc 1 401 5 view .LVU1025
 3350 0000 0329     		cmp	r1, #3
 400:Polyphony.cpp ****     if (source_voice_idx < 0 || source_voice_idx >= NUM_VOICES) return;
 3351              		.loc 1 400 69 is_stmt 0 view .LVU1026
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 129


 3352 0002 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3353              		.cfi_def_cfa_offset 40
 3354              		.cfi_offset 3, -40
 3355              		.cfi_offset 4, -36
 3356              		.cfi_offset 5, -32
 3357              		.cfi_offset 6, -28
 3358              		.cfi_offset 7, -24
 3359              		.cfi_offset 8, -20
 3360              		.cfi_offset 9, -16
 3361              		.cfi_offset 10, -12
 3362              		.cfi_offset 11, -8
 3363              		.cfi_offset 14, -4
 3364 0006 0446     		mov	r4, r0
 3365 0008 0E46     		mov	r6, r1
 3366 000a 2DED028B 		vpush.64	{d8}
 3367              		.cfi_def_cfa_offset 48
 3368              		.cfi_offset 80, -48
 3369              		.cfi_offset 81, -44
 3370              		.loc 1 401 5 view .LVU1027
 3371 000e 61D8     		bhi	.L142
 3372 0010 00F56058 		add	r8, r0, #14336
 3373 0014 00F55D55 		add	r5, r0, #14144
 3374              	.LBB1634:
 3375              	.LBB1635:
 3376              	.LBB1636:
 402:Polyphony.cpp **** 
 403:Polyphony.cpp ****     for (int v = 0; v < NUM_VOICES; ++v) {
 3377              		.loc 1 403 14 view .LVU1028
 3378 0018 0027     		movs	r7, #0
 3379 001a 3835     		adds	r5, r5, #56
 3380 001c C146     		mov	r9, r8
 3381              	.LVL207:
 3382              	.L145:
 404:Polyphony.cpp ****         if (v != source_voice_idx) {
 3383              		.loc 1 404 9 is_stmt 1 view .LVU1029
 3384 001e BE42     		cmp	r6, r7
 3385 0020 0DD0     		beq	.L144
 405:Polyphony.cpp ****             voice_active_[v] = false;
 3386              		.loc 1 405 13 view .LVU1030
 3387              		.loc 1 405 30 is_stmt 0 view .LVU1031
 3388 0022 04F56453 		add	r3, r4, #14592
 3389 0026 4FF0000A 		mov	r10, #0
 406:Polyphony.cpp ****             voice_envelopes_[v].Reset();
 3390              		.loc 1 406 38 view .LVU1032
 3391 002a 4046     		mov	r0, r8
 405:Polyphony.cpp ****             voice_active_[v] = false;
 3392              		.loc 1 405 30 view .LVU1033
 3393 002c 1033     		adds	r3, r3, #16
 3394 002e 03F807A0 		strb	r10, [r3, r7]
 3395              		.loc 1 406 13 is_stmt 1 view .LVU1034
 3396              		.loc 1 406 38 is_stmt 0 view .LVU1035
 3397 0032 FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 3398              	.LVL208:
 407:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 3399              		.loc 1 407 13 is_stmt 1 view .LVU1036
 3400              		.loc 1 407 37 is_stmt 0 view .LVU1037
 3401 0036 0023     		movs	r3, #0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 130


 408:Polyphony.cpp ****             modulations_[v].trigger_patched = false;
 3402              		.loc 1 408 45 view .LVU1038
 3403 0038 85F80BA0 		strb	r10, [r5, #11]
 407:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 3404              		.loc 1 407 37 view .LVU1039
 3405 003c 2B60     		str	r3, [r5]	@ float
 3406              		.loc 1 408 13 is_stmt 1 view .LVU1040
 3407              	.L144:
 403:Polyphony.cpp ****         if (v != source_voice_idx) {
 3408              		.loc 1 403 5 view .LVU1041
 3409 003e 0137     		adds	r7, r7, #1
 3410              	.LVL209:
 403:Polyphony.cpp ****         if (v != source_voice_idx) {
 3411              		.loc 1 403 23 view .LVU1042
 3412 0040 08F14408 		add	r8, r8, #68
 3413 0044 2835     		adds	r5, r5, #40
 3414 0046 042F     		cmp	r7, #4
 3415 0048 E9D1     		bne	.L145
 3416              	.LBE1636:
 409:Polyphony.cpp ****         }
 410:Polyphony.cpp ****     }
 411:Polyphony.cpp **** 
 412:Polyphony.cpp ****     if (voice_active_[source_voice_idx]) {
 3417              		.loc 1 412 5 view .LVU1043
 3418              		.loc 1 412 39 is_stmt 0 view .LVU1044
 3419 004a 04EB060B 		add	fp, r4, r6
 3420 004e 43F6101A 		movw	r10, #14608
 3421 0052 9FED288A 		vldr.32	s16, .L148
 3422 0056 04F54055 		add	r5, r4, #12288
 3423              		.loc 1 412 5 view .LVU1045
 3424 005a 1BF80A70 		ldrb	r7, [fp, r10]	@ zero_extendqisi2
 3425              	.LVL210:
 3426              		.loc 1 412 5 view .LVU1046
 3427 005e 002F     		cmp	r7, #0
 3428 0060 3CD0     		beq	.L146
 413:Polyphony.cpp ****         voice_active_[0] = true;
 3429              		.loc 1 413 9 is_stmt 1 view .LVU1047
 3430              		.loc 1 413 26 is_stmt 0 view .LVU1048
 3431 0062 0123     		movs	r3, #1
 414:Polyphony.cpp ****         voice_note_[0] = voice_note_[source_voice_idx];
 415:Polyphony.cpp ****         
 416:Polyphony.cpp ****         voice_envelopes_[0] = voice_envelopes_[source_voice_idx]; // This needs VoiceEnvelope to be
 3432              		.loc 1 416 29 view .LVU1049
 3433 0064 4846     		mov	r0, r9
 417:Polyphony.cpp **** 
 418:Polyphony.cpp ****         modulations_[0].trigger = modulations_[source_voice_idx].trigger; 
 419:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
 3434              		.loc 1 419 74 view .LVU1050
 3435 0066 43F28379 		movw	r9, #14211
 413:Polyphony.cpp ****         voice_note_[0] = voice_note_[source_voice_idx];
 3436              		.loc 1 413 26 view .LVU1051
 3437 006a 85F81039 		strb	r3, [r5, #2320]
 414:Polyphony.cpp ****         voice_note_[0] = voice_note_[source_voice_idx];
 3438              		.loc 1 414 9 is_stmt 1 view .LVU1052
 414:Polyphony.cpp ****         voice_note_[0] = voice_note_[source_voice_idx];
 3439              		.loc 1 414 54 is_stmt 0 view .LVU1053
 3440 006e 06F64463 		addw	r3, r6, #3652
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 131


 3441 0072 04EB8303 		add	r3, r4, r3, lsl #2
 3442 0076 5A68     		ldr	r2, [r3, #4]	@ float
 414:Polyphony.cpp ****         voice_note_[0] = voice_note_[source_voice_idx];
 3443              		.loc 1 414 24 view .LVU1054
 3444 0078 05F61413 		addw	r3, r5, #2324
 3445 007c 1A60     		str	r2, [r3]	@ float
 416:Polyphony.cpp **** 
 3446              		.loc 1 416 9 is_stmt 1 view .LVU1055
 416:Polyphony.cpp **** 
 3447              		.loc 1 416 29 is_stmt 0 view .LVU1056
 3448 007e 4422     		movs	r2, #68
 3449 0080 02FB06F8 		mul	r8, r2, r6
 3450 0084 04EB0801 		add	r1, r4, r8
 3451 0088 01F56051 		add	r1, r1, #14336
 3452 008c FFF7FEFF 		bl	memcpy
 3453              	.LVL211:
 418:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
 3454              		.loc 1 418 9 is_stmt 1 view .LVU1057
 418:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
 3455              		.loc 1 418 66 is_stmt 0 view .LVU1058
 3456 0090 2821     		movs	r1, #40
 418:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
 3457              		.loc 1 418 33 view .LVU1059
 3458 0092 05F5EF63 		add	r3, r5, #1912
 420:Polyphony.cpp ****         modulations_[0].level = modulations_[source_voice_idx].level;
 421:Polyphony.cpp ****         modulations_[0].level_patched = modulations_[source_voice_idx].level_patched;
 422:Polyphony.cpp **** 
 423:Polyphony.cpp ****         voice_active_[source_voice_idx] = false;
 424:Polyphony.cpp ****         voice_envelopes_[source_voice_idx].Reset();
 3459              		.loc 1 424 49 view .LVU1060
 3460 0096 08F56050 		add	r0, r8, #14336
 418:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
 3461              		.loc 1 418 66 view .LVU1061
 3462 009a 01FB0646 		mla	r6, r1, r6, r4
 3463              	.LVL212:
 3464              		.loc 1 424 49 view .LVU1062
 3465 009e 2044     		add	r0, r0, r4
 418:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
 3466              		.loc 1 418 66 view .LVU1063
 3467 00a0 06F55D57 		add	r7, r6, #14144
 3468 00a4 BA6B     		ldr	r2, [r7, #56]	@ float
 418:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
 3469              		.loc 1 418 33 view .LVU1064
 3470 00a6 1A60     		str	r2, [r3]	@ float
 419:Polyphony.cpp ****         modulations_[0].level = modulations_[source_voice_idx].level;
 3471              		.loc 1 419 9 is_stmt 1 view .LVU1065
 419:Polyphony.cpp ****         modulations_[0].level = modulations_[source_voice_idx].level;
 3472              		.loc 1 419 74 is_stmt 0 view .LVU1066
 3473 00a8 16F80930 		ldrb	r3, [r6, r9]	@ zero_extendqisi2
 420:Polyphony.cpp ****         modulations_[0].level = modulations_[source_voice_idx].level;
 3474              		.loc 1 420 64 view .LVU1067
 3475 00ac FA6B     		ldr	r2, [r7, #60]	@ float
 419:Polyphony.cpp ****         modulations_[0].level = modulations_[source_voice_idx].level;
 3476              		.loc 1 419 41 view .LVU1068
 3477 00ae 85F88337 		strb	r3, [r5, #1923]
 420:Polyphony.cpp ****         modulations_[0].level = modulations_[source_voice_idx].level;
 3478              		.loc 1 420 9 is_stmt 1 view .LVU1069
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 132


 420:Polyphony.cpp ****         modulations_[0].level = modulations_[source_voice_idx].level;
 3479              		.loc 1 420 31 is_stmt 0 view .LVU1070
 3480 00b2 05F27C73 		addw	r3, r5, #1916
 3481 00b6 1A60     		str	r2, [r3]	@ float
 421:Polyphony.cpp **** 
 3482              		.loc 1 421 9 is_stmt 1 view .LVU1071
 421:Polyphony.cpp **** 
 3483              		.loc 1 421 72 is_stmt 0 view .LVU1072
 3484 00b8 43F28473 		movw	r3, #14212
 3485 00bc F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 421:Polyphony.cpp **** 
 3486              		.loc 1 421 39 view .LVU1073
 3487 00be 85F88437 		strb	r3, [r5, #1924]
 423:Polyphony.cpp ****         voice_envelopes_[source_voice_idx].Reset();
 3488              		.loc 1 423 9 is_stmt 1 view .LVU1074
 423:Polyphony.cpp ****         voice_envelopes_[source_voice_idx].Reset();
 3489              		.loc 1 423 41 is_stmt 0 view .LVU1075
 3490 00c2 0025     		movs	r5, #0
 3491 00c4 0BF80A50 		strb	r5, [fp, r10]
 3492              		.loc 1 424 9 is_stmt 1 view .LVU1076
 3493              		.loc 1 424 49 is_stmt 0 view .LVU1077
 3494 00c8 FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 3495              	.LVL213:
 425:Polyphony.cpp ****         modulations_[source_voice_idx].trigger = 0.0f;
 3496              		.loc 1 425 9 is_stmt 1 view .LVU1078
 3497              		.loc 1 425 48 is_stmt 0 view .LVU1079
 3498 00cc 87ED0E8A 		vstr.32	s16, [r7, #56]
 426:Polyphony.cpp ****         modulations_[source_voice_idx].trigger_patched = false;
 3499              		.loc 1 426 9 is_stmt 1 view .LVU1080
 3500              		.loc 1 426 56 is_stmt 0 view .LVU1081
 3501 00d0 06F80950 		strb	r5, [r6, r9]
 3502              	.L142:
 3503              		.loc 1 426 56 view .LVU1082
 3504              	.LBE1635:
 3505              	.LBE1634:
 427:Polyphony.cpp ****     } else {
 428:Polyphony.cpp ****         voice_active_[0] = false;
 429:Polyphony.cpp ****         voice_envelopes_[0].Reset();
 430:Polyphony.cpp ****         modulations_[0].trigger = 0.0f;
 431:Polyphony.cpp ****         modulations_[0].trigger_patched = false;
 432:Polyphony.cpp ****     }
 433:Polyphony.cpp **** }
 3506              		.loc 1 433 1 view .LVU1083
 3507 00d4 BDEC028B 		vldm	sp!, {d8}
 3508              		.cfi_remember_state
 3509              		.cfi_restore 80
 3510              		.cfi_restore 81
 3511              		.cfi_def_cfa_offset 40
 3512 00d8 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3513              	.LVL214:
 3514              	.L146:
 3515              		.cfi_restore_state
 3516              	.LBB1638:
 3517              	.LBB1637:
 428:Polyphony.cpp ****         voice_envelopes_[0].Reset();
 3518              		.loc 1 428 9 is_stmt 1 view .LVU1084
 429:Polyphony.cpp ****         modulations_[0].trigger = 0.0f;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 133


 3519              		.loc 1 429 34 is_stmt 0 view .LVU1085
 3520 00dc 4846     		mov	r0, r9
 428:Polyphony.cpp ****         voice_envelopes_[0].Reset();
 3521              		.loc 1 428 26 view .LVU1086
 3522 00de 85F81079 		strb	r7, [r5, #2320]
 429:Polyphony.cpp ****         modulations_[0].trigger = 0.0f;
 3523              		.loc 1 429 9 is_stmt 1 view .LVU1087
 429:Polyphony.cpp ****         modulations_[0].trigger = 0.0f;
 3524              		.loc 1 429 34 is_stmt 0 view .LVU1088
 3525 00e2 FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 3526              	.LVL215:
 430:Polyphony.cpp ****         modulations_[0].trigger_patched = false;
 3527              		.loc 1 430 9 is_stmt 1 view .LVU1089
 430:Polyphony.cpp ****         modulations_[0].trigger_patched = false;
 3528              		.loc 1 430 33 is_stmt 0 view .LVU1090
 3529 00e6 05F5EF63 		add	r3, r5, #1912
 3530 00ea 83ED008A 		vstr.32	s16, [r3]
 431:Polyphony.cpp ****     }
 3531              		.loc 1 431 9 is_stmt 1 view .LVU1091
 431:Polyphony.cpp ****     }
 3532              		.loc 1 431 41 is_stmt 0 view .LVU1092
 3533 00ee 85F88377 		strb	r7, [r5, #1923]
 431:Polyphony.cpp ****     }
 3534              		.loc 1 431 41 view .LVU1093
 3535 00f2 EFE7     		b	.L142
 3536              	.L149:
 3537              		.align	2
 3538              	.L148:
 3539 00f4 00000000 		.word	0
 3540              	.LBE1637:
 3541              	.LBE1638:
 3542              		.cfi_endproc
 3543              	.LFE5367:
 3545              		.section	.text._ZN15PolyphonyEngine14OnEngineChangeEii,"ax",%progbits
 3546              		.align	1
 3547              		.global	_ZN15PolyphonyEngine14OnEngineChangeEii
 3548              		.syntax unified
 3549              		.thumb
 3550              		.thumb_func
 3552              	_ZN15PolyphonyEngine14OnEngineChangeEii:
 3553              	.LVL216:
 3554              	.LFB5368:
 434:Polyphony.cpp **** 
 435:Polyphony.cpp **** void PolyphonyEngine::OnEngineChange(int old_engine_idx, int new_engine_idx) {
 3555              		.loc 1 435 78 is_stmt 1 view -0
 3556              		.cfi_startproc
 3557              		@ args = 0, pretend = 0, frame = 0
 3558              		@ frame_needed = 0, uses_anonymous_args = 0
 3559              		@ link register save eliminated.
 436:Polyphony.cpp ****     bool prev_was_poly = (old_engine_idx <= 3);
 3560              		.loc 1 436 5 view .LVU1095
 3561              		.loc 1 436 10 is_stmt 0 view .LVU1096
 3562 0000 0329     		cmp	r1, #3
 435:Polyphony.cpp ****     bool prev_was_poly = (old_engine_idx <= 3);
 3563              		.loc 1 435 78 view .LVU1097
 3564 0002 70B4     		push	{r4, r5, r6}
 3565              		.cfi_def_cfa_offset 12
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 134


 3566              		.cfi_offset 4, -12
 3567              		.cfi_offset 5, -8
 3568              		.cfi_offset 6, -4
 3569              		.loc 1 436 10 view .LVU1098
 3570 0004 CCBF     		ite	gt
 3571 0006 0025     		movgt	r5, #0
 3572 0008 0125     		movle	r5, #1
 3573              	.LVL217:
 437:Polyphony.cpp ****     bool now_poly      = (new_engine_idx <= 3);
 3574              		.loc 1 437 5 is_stmt 1 view .LVU1099
 3575              		.loc 1 437 10 is_stmt 0 view .LVU1100
 3576 000a 032A     		cmp	r2, #3
 3577 000c CCBF     		ite	gt
 3578 000e 0024     		movgt	r4, #0
 3579 0010 0124     		movle	r4, #1
 3580              	.LVL218:
 438:Polyphony.cpp **** 
 439:Polyphony.cpp ****     if(old_engine_idx == new_engine_idx) {
 3581              		.loc 1 439 5 is_stmt 1 view .LVU1101
 3582 0012 9142     		cmp	r1, r2
 3583 0014 1AD0     		beq	.L150
 440:Polyphony.cpp ****         return;
 441:Polyphony.cpp ****     }
 442:Polyphony.cpp **** 
 443:Polyphony.cpp ****     engine_changed_flag_ = true;
 3584              		.loc 1 443 5 view .LVU1102
 3585              		.loc 1 443 26 is_stmt 0 view .LVU1103
 3586 0016 00F54053 		add	r3, r0, #12288
 3587 001a 0126     		movs	r6, #1
 444:Polyphony.cpp **** 
 445:Polyphony.cpp ****     if(prev_was_poly == now_poly) {
 3588              		.loc 1 445 5 view .LVU1104
 3589 001c A542     		cmp	r5, r4
 443:Polyphony.cpp **** 
 3590              		.loc 1 443 26 view .LVU1105
 3591 001e 83F8AC6A 		strb	r6, [r3, #2732]
 3592              		.loc 1 445 5 is_stmt 1 view .LVU1106
 3593 0022 13D0     		beq	.L150
 446:Polyphony.cpp ****         return;
 447:Polyphony.cpp ****     }
 448:Polyphony.cpp **** 
 449:Polyphony.cpp ****     if(prev_was_poly && !now_poly) {
 3594              		.loc 1 449 5 view .LVU1107
 3595              	.LBB1639:
 3596 0024 0329     		cmp	r1, #3
 3597 0026 0BDC     		bgt	.L154
 3598              		.loc 1 449 22 is_stmt 0 discriminator 1 view .LVU1108
 3599 0028 032A     		cmp	r2, #3
 3600 002a 09DD     		ble	.L154
 3601 002c 00F56453 		add	r3, r0, #14592
 3602              	.LBB1640:
 3603              	.LBB1641:
 450:Polyphony.cpp ****         int source_voice = -1;
 451:Polyphony.cpp ****         for(int v = 0; v < NUM_VOICES; ++v) {
 3604              		.loc 1 451 17 view .LVU1109
 3605 0030 0021     		movs	r1, #0
 3606              	.LVL219:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 135


 3607              		.loc 1 451 17 view .LVU1110
 3608 0032 1033     		adds	r3, r3, #16
 3609              	.LVL220:
 3610              	.L156:
 452:Polyphony.cpp ****             if(voice_active_[v]) { source_voice = v; break; }
 3611              		.loc 1 452 13 is_stmt 1 view .LVU1111
 3612              		.loc 1 452 31 is_stmt 0 view .LVU1112
 3613 0034 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 3614              		.loc 1 452 13 view .LVU1113
 3615 0038 2AB9     		cbnz	r2, .L155
 451:Polyphony.cpp ****             if(voice_active_[v]) { source_voice = v; break; }
 3616              		.loc 1 451 9 is_stmt 1 discriminator 2 view .LVU1114
 3617 003a 0131     		adds	r1, r1, #1
 3618              	.LVL221:
 451:Polyphony.cpp ****             if(voice_active_[v]) { source_voice = v; break; }
 3619              		.loc 1 451 26 discriminator 2 view .LVU1115
 3620 003c 0429     		cmp	r1, #4
 3621 003e F9D1     		bne	.L156
 3622              	.LVL222:
 3623              	.L154:
 451:Polyphony.cpp ****             if(voice_active_[v]) { source_voice = v; break; }
 3624              		.loc 1 451 26 is_stmt 0 discriminator 2 view .LVU1116
 3625              	.LBE1641:
 3626              	.LBE1640:
 453:Polyphony.cpp ****         }
 454:Polyphony.cpp **** 
 455:Polyphony.cpp ****         if(source_voice != -1) {
 456:Polyphony.cpp ****             TransferPolyToMonoVoice(source_voice);
 457:Polyphony.cpp ****         } else {
 458:Polyphony.cpp ****             ClearAllVoicesForEngineSwitch();
 459:Polyphony.cpp ****         }
 460:Polyphony.cpp ****     }
 461:Polyphony.cpp ****     else {
 462:Polyphony.cpp ****         ClearAllVoicesForEngineSwitch();
 3627              		.loc 1 462 9 is_stmt 1 view .LVU1117
 3628              	.LBE1639:
 463:Polyphony.cpp ****     }
 464:Polyphony.cpp **** }
 3629              		.loc 1 464 1 is_stmt 0 view .LVU1118
 3630 0040 70BC     		pop	{r4, r5, r6}
 3631              		.cfi_remember_state
 3632              		.cfi_restore 6
 3633              		.cfi_restore 5
 3634              		.cfi_restore 4
 3635              		.cfi_def_cfa_offset 0
 3636              	.LVL223:
 3637              	.LBB1644:
 462:Polyphony.cpp ****     }
 3638              		.loc 1 462 38 view .LVU1119
 3639 0042 FFF7FEBF 		b	_ZN15PolyphonyEngine29ClearAllVoicesForEngineSwitchEv
 3640              	.LVL224:
 3641              	.L155:
 3642              		.cfi_restore_state
 3643              	.LBB1642:
 455:Polyphony.cpp ****             TransferPolyToMonoVoice(source_voice);
 3644              		.loc 1 455 9 is_stmt 1 view .LVU1120
 456:Polyphony.cpp ****         } else {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 136


 3645              		.loc 1 456 13 view .LVU1121
 3646              	.LBE1642:
 3647              	.LBE1644:
 3648              		.loc 1 464 1 is_stmt 0 view .LVU1122
 3649 0046 70BC     		pop	{r4, r5, r6}
 3650              		.cfi_remember_state
 3651              		.cfi_restore 6
 3652              		.cfi_restore 5
 3653              		.cfi_restore 4
 3654              		.cfi_def_cfa_offset 0
 3655              	.LVL225:
 3656              	.LBB1645:
 3657              	.LBB1643:
 456:Polyphony.cpp ****         } else {
 3658              		.loc 1 456 36 view .LVU1123
 3659 0048 FFF7FEBF 		b	_ZN15PolyphonyEngine23TransferPolyToMonoVoiceEi
 3660              	.LVL226:
 3661              	.L150:
 3662              		.cfi_restore_state
 456:Polyphony.cpp ****         } else {
 3663              		.loc 1 456 36 view .LVU1124
 3664              	.LBE1643:
 3665              	.LBE1645:
 3666              		.loc 1 464 1 view .LVU1125
 3667 004c 70BC     		pop	{r4, r5, r6}
 3668              		.cfi_restore 6
 3669              		.cfi_restore 5
 3670              		.cfi_restore 4
 3671              		.cfi_def_cfa_offset 0
 3672              	.LVL227:
 3673              		.loc 1 464 1 view .LVU1126
 3674 004e 7047     		bx	lr
 3675              		.cfi_endproc
 3676              	.LFE5368:
 3678              		.section	.text._ZNK15PolyphonyEngine17GetLastTouchStateEv,"ax",%progbits
 3679              		.align	1
 3680              		.global	_ZNK15PolyphonyEngine17GetLastTouchStateEv
 3681              		.syntax unified
 3682              		.thumb
 3683              		.thumb_func
 3685              	_ZNK15PolyphonyEngine17GetLastTouchStateEv:
 3686              	.LVL228:
 3687              	.LFB5369:
 465:Polyphony.cpp **** 
 466:Polyphony.cpp **** uint16_t PolyphonyEngine::GetLastTouchState() const {
 3688              		.loc 1 466 53 is_stmt 1 view -0
 3689              		.cfi_startproc
 3690              		@ args = 0, pretend = 0, frame = 0
 3691              		@ frame_needed = 0, uses_anonymous_args = 0
 3692              		@ link register save eliminated.
 467:Polyphony.cpp ****     return last_touch_state_member_;
 3693              		.loc 1 467 5 view .LVU1128
 3694              		.loc 1 467 12 is_stmt 0 view .LVU1129
 3695 0000 00F54050 		add	r0, r0, #12288
 3696              	.LVL229:
 468:Polyphony.cpp **** }
 3697              		.loc 1 468 1 view .LVU1130
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 137


 3698 0004 B0F8AE0A 		ldrh	r0, [r0, #2734]
 3699              	.LVL230:
 3700              		.loc 1 468 1 view .LVU1131
 3701 0008 7047     		bx	lr
 3702              		.cfi_endproc
 3703              	.LFE5369:
 3705              		.section	.text._ZN15PolyphonyEngine20UpdateLastTouchStateEt,"ax",%progbits
 3706              		.align	1
 3707              		.global	_ZN15PolyphonyEngine20UpdateLastTouchStateEt
 3708              		.syntax unified
 3709              		.thumb
 3710              		.thumb_func
 3712              	_ZN15PolyphonyEngine20UpdateLastTouchStateEt:
 3713              	.LVL231:
 3714              	.LFB5370:
 469:Polyphony.cpp **** 
 470:Polyphony.cpp **** void PolyphonyEngine::UpdateLastTouchState(uint16_t current_state) {
 3715              		.loc 1 470 68 is_stmt 1 view -0
 3716              		.cfi_startproc
 3717              		@ args = 0, pretend = 0, frame = 0
 3718              		@ frame_needed = 0, uses_anonymous_args = 0
 3719              		@ link register save eliminated.
 471:Polyphony.cpp ****     last_touch_state_member_ = current_state;
 3720              		.loc 1 471 5 view .LVU1133
 3721              		.loc 1 471 30 is_stmt 0 view .LVU1134
 3722 0000 00F54050 		add	r0, r0, #12288
 3723              	.LVL232:
 3724              		.loc 1 471 30 view .LVU1135
 3725 0004 A0F8AE1A 		strh	r1, [r0, #2734]	@ movhi
 472:Polyphony.cpp **** }
 3726              		.loc 1 472 1 view .LVU1136
 3727 0008 7047     		bx	lr
 3728              		.cfi_endproc
 3729              	.LFE5370:
 3731              		.section	.text._ZN15PolyphonyEngine26FindAvailableVoiceInternalEi,"ax",%progbits
 3732              		.align	1
 3733              		.global	_ZN15PolyphonyEngine26FindAvailableVoiceInternalEi
 3734              		.syntax unified
 3735              		.thumb
 3736              		.thumb_func
 3738              	_ZN15PolyphonyEngine26FindAvailableVoiceInternalEi:
 3739              	.LVL233:
 3740              	.LFB5371:
 473:Polyphony.cpp **** 
 474:Polyphony.cpp **** 
 475:Polyphony.cpp **** // --- Definitions for Private Helper Methods for Touch Input ---
 476:Polyphony.cpp **** 
 477:Polyphony.cpp **** int PolyphonyEngine::FindAvailableVoiceInternal(int max_voices) {
 3741              		.loc 1 477 65 is_stmt 1 view -0
 3742              		.cfi_startproc
 3743              		@ args = 0, pretend = 0, frame = 0
 3744              		@ frame_needed = 0, uses_anonymous_args = 0
 3745              		@ link register save eliminated.
 478:Polyphony.cpp ****     for (int i = 0; i < max_voices; ++i) {
 3746              		.loc 1 478 5 view .LVU1138
 3747              		.loc 1 478 5 is_stmt 0 view .LVU1139
 3748 0000 00F56453 		add	r3, r0, #14592
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 138


 3749              	.LBB1646:
 3750              		.loc 1 478 14 view .LVU1140
 3751 0004 0020     		movs	r0, #0
 3752              	.LVL234:
 3753              		.loc 1 478 14 view .LVU1141
 3754 0006 1033     		adds	r3, r3, #16
 3755              	.LVL235:
 3756              	.L162:
 3757              		.loc 1 478 23 is_stmt 1 discriminator 1 view .LVU1142
 3758 0008 8842     		cmp	r0, r1
 3759 000a 04DA     		bge	.L163
 479:Polyphony.cpp ****         if (!voice_active_[i]) {
 3760              		.loc 1 479 9 view .LVU1143
 3761              		.loc 1 479 29 is_stmt 0 view .LVU1144
 3762 000c 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 3763              		.loc 1 479 9 view .LVU1145
 3764 0010 1AB1     		cbz	r2, .L160
 478:Polyphony.cpp ****     for (int i = 0; i < max_voices; ++i) {
 3765              		.loc 1 478 5 is_stmt 1 discriminator 2 view .LVU1146
 3766 0012 0130     		adds	r0, r0, #1
 3767              	.LVL236:
 478:Polyphony.cpp ****     for (int i = 0; i < max_voices; ++i) {
 3768              		.loc 1 478 5 is_stmt 0 discriminator 2 view .LVU1147
 3769 0014 F8E7     		b	.L162
 3770              	.L163:
 478:Polyphony.cpp ****     for (int i = 0; i < max_voices; ++i) {
 3771              		.loc 1 478 5 discriminator 2 view .LVU1148
 3772              	.LBE1646:
 480:Polyphony.cpp ****             return i;
 481:Polyphony.cpp ****         }
 482:Polyphony.cpp ****     }
 483:Polyphony.cpp ****     // TODO: Implement voice stealing (e.g. return FindOldestVoice(true, max_voices);)
 484:Polyphony.cpp ****     return -1; 
 3773              		.loc 1 484 13 view .LVU1149
 3774 0016 4FF0FF30 		mov	r0, #-1
 3775              	.LVL237:
 3776              	.L160:
 485:Polyphony.cpp **** }
 3777              		.loc 1 485 1 view .LVU1150
 3778 001a 7047     		bx	lr
 3779              		.cfi_endproc
 3780              	.LFE5371:
 3782              		.section	.text._ZN15PolyphonyEngine22AssignMonoNoteInternalEfib,"ax",%progbits
 3783              		.align	1
 3784              		.global	_ZN15PolyphonyEngine22AssignMonoNoteInternalEfib
 3785              		.syntax unified
 3786              		.thumb
 3787              		.thumb_func
 3789              	_ZN15PolyphonyEngine22AssignMonoNoteInternalEfib:
 3790              	.LVL238:
 3791              	.LFB5372:
 486:Polyphony.cpp **** 
 487:Polyphony.cpp **** void PolyphonyEngine::AssignMonoNoteInternal(float note, int engine_index, bool percussive_engine) 
 3792              		.loc 1 487 100 is_stmt 1 view -0
 3793              		.cfi_startproc
 3794              		@ args = 0, pretend = 0, frame = 0
 3795              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 139


 488:Polyphony.cpp ****     voice_note_[0] = note;
 3796              		.loc 1 488 5 view .LVU1152
 487:Polyphony.cpp ****     voice_note_[0] = note;
 3797              		.loc 1 487 100 is_stmt 0 view .LVU1153
 3798 0000 38B5     		push	{r3, r4, r5, lr}
 3799              		.cfi_def_cfa_offset 16
 3800              		.cfi_offset 3, -16
 3801              		.cfi_offset 4, -12
 3802              		.cfi_offset 5, -8
 3803              		.cfi_offset 14, -4
 3804              		.loc 1 488 20 view .LVU1154
 3805 0002 00F54053 		add	r3, r0, #12288
 489:Polyphony.cpp ****     voice_active_[0] = true;
 490:Polyphony.cpp ****     modulations_[0].trigger = 1.0f;
 3806              		.loc 1 490 29 view .LVU1155
 3807 0006 4FF07E55 		mov	r5, #1065353216
 488:Polyphony.cpp ****     voice_active_[0] = true;
 3808              		.loc 1 488 20 view .LVU1156
 3809 000a 03F61411 		addw	r1, r3, #2324
 3810              	.LVL239:
 3811              		.loc 1 490 29 view .LVU1157
 3812 000e 03F5EF64 		add	r4, r3, #1912
 488:Polyphony.cpp ****     voice_active_[0] = true;
 3813              		.loc 1 488 20 view .LVU1158
 3814 0012 81ED000A 		vstr.32	s0, [r1]
 489:Polyphony.cpp ****     voice_active_[0] = true;
 3815              		.loc 1 489 5 is_stmt 1 view .LVU1159
 489:Polyphony.cpp ****     voice_active_[0] = true;
 3816              		.loc 1 489 22 is_stmt 0 view .LVU1160
 3817 0016 0121     		movs	r1, #1
 3818 0018 83F81019 		strb	r1, [r3, #2320]
 3819              		.loc 1 490 5 is_stmt 1 view .LVU1161
 3820              		.loc 1 490 29 is_stmt 0 view .LVU1162
 3821 001c 2560     		str	r5, [r4]	@ float
 491:Polyphony.cpp **** 
 492:Polyphony.cpp ****     if (percussive_engine) {
 3822              		.loc 1 492 5 is_stmt 1 view .LVU1163
 3823 001e 12B1     		cbz	r2, .L169
 493:Polyphony.cpp ****         modulations_[0].trigger_patched = true; 
 3824              		.loc 1 493 9 view .LVU1164
 3825              		.loc 1 493 41 is_stmt 0 view .LVU1165
 3826 0020 83F88317 		strb	r1, [r3, #1923]
 3827              	.LVL240:
 3828              	.L168:
 494:Polyphony.cpp ****     } else {
 495:Polyphony.cpp ****         modulations_[0].trigger_patched = false;
 496:Polyphony.cpp ****         voice_envelopes_[0].Trigger(); 
 497:Polyphony.cpp ****     }
 498:Polyphony.cpp **** }
 3829              		.loc 1 498 1 view .LVU1166
 3830 0024 38BD     		pop	{r3, r4, r5, pc}
 3831              	.LVL241:
 3832              	.L169:
 495:Polyphony.cpp ****         voice_envelopes_[0].Trigger(); 
 3833              		.loc 1 495 9 is_stmt 1 view .LVU1167
 496:Polyphony.cpp ****     }
 3834              		.loc 1 496 36 is_stmt 0 view .LVU1168
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 140


 3835 0026 00F56050 		add	r0, r0, #14336
 3836              	.LVL242:
 495:Polyphony.cpp ****         voice_envelopes_[0].Trigger(); 
 3837              		.loc 1 495 41 view .LVU1169
 3838 002a 83F88327 		strb	r2, [r3, #1923]
 496:Polyphony.cpp ****     }
 3839              		.loc 1 496 9 is_stmt 1 view .LVU1170
 496:Polyphony.cpp ****     }
 3840              		.loc 1 496 36 is_stmt 0 view .LVU1171
 3841 002e FFF7FEFF 		bl	_ZN13VoiceEnvelope7TriggerEv
 3842              	.LVL243:
 3843              		.loc 1 498 1 view .LVU1172
 3844 0032 F7E7     		b	.L168
 3845              		.cfi_endproc
 3846              	.LFE5372:
 3848              		.section	.text._ZN15PolyphonyEngine16FindVoiceForNoteEfibi,"ax",%progbits
 3849              		.align	1
 3850              		.global	_ZN15PolyphonyEngine16FindVoiceForNoteEfibi
 3851              		.syntax unified
 3852              		.thumb
 3853              		.thumb_func
 3855              	_ZN15PolyphonyEngine16FindVoiceForNoteEfibi:
 3856              	.LVL244:
 3857              	.LFB5373:
 499:Polyphony.cpp **** 
 500:Polyphony.cpp **** int PolyphonyEngine::FindVoiceForNote(float note, int engine_index, bool poly_mode, int max_voices)
 3858              		.loc 1 500 101 is_stmt 1 view -0
 3859              		.cfi_startproc
 3860              		@ args = 0, pretend = 0, frame = 0
 3861              		@ frame_needed = 0, uses_anonymous_args = 0
 501:Polyphony.cpp ****     if (poly_mode) {
 3862              		.loc 1 501 5 view .LVU1174
 500:Polyphony.cpp ****     if (poly_mode) {
 3863              		.loc 1 500 101 is_stmt 0 view .LVU1175
 3864 0000 10B5     		push	{r4, lr}
 3865              		.cfi_def_cfa_offset 8
 3866              		.cfi_offset 4, -8
 3867              		.cfi_offset 14, -4
 3868              	.LBB1653:
 3869              		.loc 1 501 5 view .LVU1176
 3870 0002 DAB1     		cbz	r2, .L172
 3871 0004 00F56451 		add	r1, r0, #14592
 3872              	.LVL245:
 3873              		.loc 1 501 5 view .LVU1177
 3874 0008 00F56452 		add	r2, r0, #14592
 3875              	.LVL246:
 3876              	.LBB1654:
 502:Polyphony.cpp ****         for (int i = 0; i < max_voices; ++i) {
 3877              		.loc 1 502 18 view .LVU1178
 3878 000c 0020     		movs	r0, #0
 3879              	.LVL247:
 3880              		.loc 1 502 18 view .LVU1179
 3881 000e 1431     		adds	r1, r1, #20
 3882              	.LVL248:
 3883              		.loc 1 502 18 view .LVU1180
 3884 0010 1032     		adds	r2, r2, #16
 3885              	.LVL249:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 141


 3886              	.L175:
 3887              		.loc 1 502 27 is_stmt 1 discriminator 1 view .LVU1181
 3888 0012 9842     		cmp	r0, r3
 3889 0014 2ADA     		bge	.L177
 503:Polyphony.cpp ****             if (voice_active_[i] && fabsf(voice_note_[i] - note) < 0.1f) {
 3890              		.loc 1 503 13 view .LVU1182
 3891              		.loc 1 503 32 is_stmt 0 view .LVU1183
 3892 0016 12F8014B 		ldrb	r4, [r2], #1	@ zero_extendqisi2
 3893              		.loc 1 503 13 view .LVU1184
 3894 001a 64B1     		cbz	r4, .L174
 3895              		.loc 1 503 58 discriminator 1 view .LVU1185
 3896 001c D1ED007A 		vldr.32	s15, [r1]
 3897              		.loc 1 503 34 discriminator 1 view .LVU1186
 3898 0020 9FED147A 		vldr.32	s14, .L182
 3899              		.loc 1 503 58 discriminator 1 view .LVU1187
 3900 0024 77EEC07A 		vsub.f32	s15, s15, s0
 3901              		.loc 1 503 42 discriminator 1 view .LVU1188
 3902 0028 F0EEE77A 		vabs.f32	s15, s15
 3903              		.loc 1 503 34 discriminator 1 view .LVU1189
 3904 002c F4EEC77A 		vcmpe.f32	s15, s14
 3905 0030 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3906 0034 19D4     		bmi	.L171
 3907              	.L174:
 502:Polyphony.cpp ****         for (int i = 0; i < max_voices; ++i) {
 3908              		.loc 1 502 9 is_stmt 1 discriminator 2 view .LVU1190
 3909 0036 0130     		adds	r0, r0, #1
 3910              	.LVL250:
 502:Polyphony.cpp ****         for (int i = 0; i < max_voices; ++i) {
 3911              		.loc 1 502 9 is_stmt 0 discriminator 2 view .LVU1191
 3912 0038 0431     		adds	r1, r1, #4
 3913 003a EAE7     		b	.L175
 3914              	.LVL251:
 3915              	.L172:
 502:Polyphony.cpp ****         for (int i = 0; i < max_voices; ++i) {
 3916              		.loc 1 502 9 discriminator 2 view .LVU1192
 3917              	.LBE1654:
 504:Polyphony.cpp ****                 return i;
 505:Polyphony.cpp ****             }
 506:Polyphony.cpp ****         }
 507:Polyphony.cpp ****     } else { 
 508:Polyphony.cpp ****         if (voice_active_[0] && fabsf(voice_note_[0] - note) < 0.1f) {
 3918              		.loc 1 508 9 is_stmt 1 view .LVU1193
 3919              		.loc 1 508 28 is_stmt 0 view .LVU1194
 3920 003c 00F54050 		add	r0, r0, #12288
 3921              	.LVL252:
 3922              		.loc 1 508 9 view .LVU1195
 3923 0040 90F81039 		ldrb	r3, [r0, #2320]	@ zero_extendqisi2
 3924              	.LVL253:
 3925              		.loc 1 508 9 view .LVU1196
 3926 0044 93B1     		cbz	r3, .L177
 3927              	.LVL254:
 3928              		.loc 1 508 9 view .LVU1197
 3929              	.LBE1653:
 3930              	.LBB1655:
 3931              	.LBI1655:
 500:Polyphony.cpp ****     if (poly_mode) {
 3932              		.loc 1 500 5 is_stmt 1 discriminator 1 view .LVU1198
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 142


 3933              	.LBB1656:
 3934              	.LBB1657:
 3935              		.loc 1 508 54 is_stmt 0 discriminator 1 view .LVU1199
 3936 0046 00F61410 		addw	r0, r0, #2324
 3937              	.LVL255:
 3938              		.loc 1 508 54 discriminator 1 view .LVU1200
 3939 004a D0ED007A 		vldr.32	s15, [r0]
 3940 004e 37EEC00A 		vsub.f32	s0, s15, s0
 3941              	.LVL256:
 3942              		.loc 1 508 30 discriminator 1 view .LVU1201
 3943 0052 DFED087A 		vldr.32	s15, .L182
 3944              		.loc 1 508 38 discriminator 1 view .LVU1202
 3945 0056 B0EEC00A 		vabs.f32	s0, s0
 3946              		.loc 1 508 30 discriminator 1 view .LVU1203
 3947 005a B4EEE70A 		vcmpe.f32	s0, s15
 3948 005e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3949 0062 54BF     		ite	pl
 3950 0064 4FF0FF30 		movpl	r0, #-1
 3951              	.LVL257:
 3952              		.loc 1 508 30 discriminator 1 view .LVU1204
 3953 0068 0020     		movmi	r0, #0
 3954              	.LVL258:
 3955              	.L171:
 3956              		.loc 1 508 30 discriminator 1 view .LVU1205
 3957              	.LBE1657:
 3958              	.LBE1656:
 3959              	.LBE1655:
 509:Polyphony.cpp ****             return 0;
 510:Polyphony.cpp ****         }
 511:Polyphony.cpp ****     }
 512:Polyphony.cpp ****     return -1;
 513:Polyphony.cpp **** }
 3960              		.loc 1 513 1 view .LVU1206
 3961 006a 10BD     		pop	{r4, pc}
 3962              	.LVL259:
 3963              	.L177:
 512:Polyphony.cpp **** }
 3964              		.loc 1 512 13 view .LVU1207
 3965 006c 4FF0FF30 		mov	r0, #-1
 3966 0070 FBE7     		b	.L171
 3967              	.L183:
 3968 0072 00BF     		.align	2
 3969              	.L182:
 3970 0074 CDCCCC3D 		.word	1036831949
 3971              		.cfi_endproc
 3972              	.LFE5373:
 3974              		.section	.text._ZN15PolyphonyEngine16HandleTouchInputEttibi,"ax",%progbits
 3975              		.align	1
 3976              		.global	_ZN15PolyphonyEngine16HandleTouchInputEttibi
 3977              		.syntax unified
 3978              		.thumb
 3979              		.thumb_func
 3981              	_ZN15PolyphonyEngine16HandleTouchInputEttibi:
 3982              	.LVL260:
 3983              	.LFB5352:
  45:Polyphony.cpp ****     // Ported from global HandleTouchInput in Polyphony.cpp
 3984              		.loc 1 45 169 is_stmt 1 view -0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 143


 3985              		.cfi_startproc
 3986              		@ args = 8, pretend = 0, frame = 16
 3987              		@ frame_needed = 0, uses_anonymous_args = 0
  49:Polyphony.cpp **** 
 3988              		.loc 1 49 5 view .LVU1209
  45:Polyphony.cpp ****     // Ported from global HandleTouchInput in Polyphony.cpp
 3989              		.loc 1 45 169 is_stmt 0 view .LVU1210
 3990 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3991              		.cfi_def_cfa_offset 36
 3992              		.cfi_offset 4, -36
 3993              		.cfi_offset 5, -32
 3994              		.cfi_offset 6, -28
 3995              		.cfi_offset 7, -24
 3996              		.cfi_offset 8, -20
 3997              		.cfi_offset 9, -16
 3998              		.cfi_offset 10, -12
 3999              		.cfi_offset 11, -8
 4000              		.cfi_offset 14, -4
  49:Polyphony.cpp **** 
 4001              		.loc 1 49 10 view .LVU1211
 4002 0004 072B     		cmp	r3, #7
  45:Polyphony.cpp ****     // Ported from global HandleTouchInput in Polyphony.cpp
 4003              		.loc 1 45 169 view .LVU1212
 4004 0006 85B0     		sub	sp, sp, #20
 4005              		.cfi_def_cfa_offset 56
  45:Polyphony.cpp ****     // Ported from global HandleTouchInput in Polyphony.cpp
 4006              		.loc 1 45 169 view .LVU1213
 4007 0008 0446     		mov	r4, r0
 4008 000a 1E46     		mov	r6, r3
 4009 000c 9DF83880 		ldrb	r8, [sp, #56]	@ zero_extendqisi2
  49:Polyphony.cpp **** 
 4010              		.loc 1 49 10 view .LVU1214
 4011 0010 D8BF     		it	le
 4012 0012 4FF00009 		movle	r9, #0
  45:Polyphony.cpp ****     // Ported from global HandleTouchInput in Polyphony.cpp
 4013              		.loc 1 45 169 view .LVU1215
 4014 0016 DDF83CB0 		ldr	fp, [sp, #60]
  49:Polyphony.cpp **** 
 4015              		.loc 1 49 10 view .LVU1216
 4016 001a C8BF     		it	gt
 4017 001c 4FF00109 		movgt	r9, #1
 4018              	.LVL261:
  53:Polyphony.cpp ****         bool pad_currently_pressed = (current_touch_state_param >> i) & 1;
 4019              		.loc 1 53 5 is_stmt 1 view .LVU1217
 4020              	.LBB1658:
  53:Polyphony.cpp ****         bool pad_currently_pressed = (current_touch_state_param >> i) & 1;
 4021              		.loc 1 53 23 view .LVU1218
 4022 0020 DFF80CA1 		ldr	r10, .L205+4
  53:Polyphony.cpp ****         bool pad_currently_pressed = (current_touch_state_param >> i) & 1;
 4023              		.loc 1 53 14 is_stmt 0 view .LVU1219
 4024 0024 0025     		movs	r5, #0
 4025              	.LBE1658:
  45:Polyphony.cpp ****     // Ported from global HandleTouchInput in Polyphony.cpp
 4026              		.loc 1 45 169 view .LVU1220
 4027 0026 CDE90112 		strd	r1, r2, [sp, #4]
 4028              	.LVL262:
 4029              	.L190:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 144


 4030              	.LBB1677:
 4031              	.LBB1659:
  54:Polyphony.cpp ****         // Use the passed last_touch_state_param for this iteration's comparison
 4032              		.loc 1 54 9 is_stmt 1 view .LVU1221
  56:Polyphony.cpp ****         float note_for_pad = PolyphonyEngine::kTouchMidiNotes_[i]; // Use static class member
 4033              		.loc 1 56 9 view .LVU1222
  54:Polyphony.cpp ****         // Use the passed last_touch_state_param for this iteration's comparison
 4034              		.loc 1 54 65 is_stmt 0 view .LVU1223
 4035 002a 019A     		ldr	r2, [sp, #4]
  56:Polyphony.cpp ****         float note_for_pad = PolyphonyEngine::kTouchMidiNotes_[i]; // Use static class member
 4036              		.loc 1 56 56 view .LVU1224
 4037 002c 029B     		ldr	r3, [sp, #8]
  54:Polyphony.cpp ****         // Use the passed last_touch_state_param for this iteration's comparison
 4038              		.loc 1 54 65 view .LVU1225
 4039 002e 42FA05F7 		asr	r7, r2, r5
  57:Polyphony.cpp **** 
 4040              		.loc 1 57 15 view .LVU1226
 4041 0032 BAEC010A 		vldmia.32	r10!, {s0}
  56:Polyphony.cpp ****         float note_for_pad = PolyphonyEngine::kTouchMidiNotes_[i]; // Use static class member
 4042              		.loc 1 56 56 view .LVU1227
 4043 0036 2B41     		asrs	r3, r3, r5
 4044              	.LBB1660:
  59:Polyphony.cpp ****             if (poly_mode) {
 4045              		.loc 1 59 9 view .LVU1228
 4046 0038 17F00107 		ands	r7, r7, #1
 4047              	.LBE1660:
  56:Polyphony.cpp ****         float note_for_pad = PolyphonyEngine::kTouchMidiNotes_[i]; // Use static class member
 4048              		.loc 1 56 62 view .LVU1229
 4049 003c 03F00103 		and	r3, r3, #1
 4050              	.LVL263:
  57:Polyphony.cpp **** 
 4051              		.loc 1 57 9 is_stmt 1 view .LVU1230
  59:Polyphony.cpp ****             if (poly_mode) {
 4052              		.loc 1 59 9 view .LVU1231
 4053              	.LBB1668:
 4054 0040 33D0     		beq	.L185
  59:Polyphony.cpp ****             if (poly_mode) {
 4055              		.loc 1 59 35 is_stmt 0 discriminator 1 view .LVU1232
 4056 0042 33BB     		cbnz	r3, .L186
 4057              	.LBE1668:
 4058              	.LBE1659:
 4059              	.LBE1677:
  60:Polyphony.cpp ****                 int voice_idx = FindAvailableVoiceInternal(effective_num_voices); 
 4060              		.loc 1 60 13 is_stmt 1 view .LVU1233
 4061              	.LBB1678:
 4062              	.LBB1673:
 4063              	.LBB1669:
 4064              	.LBB1661:
 4065 0044 B8F1000F 		cmp	r8, #0
 4066 0048 29D0     		beq	.L187
 4067              	.LBB1662:
  61:Polyphony.cpp ****                 if (voice_idx != -1) {
 4068              		.loc 1 61 17 view .LVU1234
  61:Polyphony.cpp ****                 if (voice_idx != -1) {
 4069              		.loc 1 61 59 is_stmt 0 view .LVU1235
 4070 004a 5946     		mov	r1, fp
 4071 004c 2046     		mov	r0, r4
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 145


 4072 004e FFF7FEFF 		bl	_ZN15PolyphonyEngine26FindAvailableVoiceInternalEi
 4073              	.LVL264:
  62:Polyphony.cpp ****                     voice_note_[voice_idx] = note_for_pad;
 4074              		.loc 1 62 17 is_stmt 1 view .LVU1236
 4075 0052 411C     		adds	r1, r0, #1
 4076 0054 1DD0     		beq	.L186
  63:Polyphony.cpp ****                     voice_active_[voice_idx] = true;
 4077              		.loc 1 63 21 view .LVU1237
  63:Polyphony.cpp ****                     voice_active_[voice_idx] = true;
 4078              		.loc 1 63 44 is_stmt 0 view .LVU1238
 4079 0056 00F64463 		addw	r3, r0, #3652
  64:Polyphony.cpp ****                     modulations_[voice_idx].trigger = 1.0f; 
 4080              		.loc 1 64 46 view .LVU1239
 4081 005a 2218     		adds	r2, r4, r0
 4082 005c 0121     		movs	r1, #1
  63:Polyphony.cpp ****                     voice_active_[voice_idx] = true;
 4083              		.loc 1 63 44 view .LVU1240
 4084 005e 04EB8303 		add	r3, r4, r3, lsl #2
 4085 0062 83ED010A 		vstr.32	s0, [r3, #4]
  64:Polyphony.cpp ****                     modulations_[voice_idx].trigger = 1.0f; 
 4086              		.loc 1 64 21 is_stmt 1 view .LVU1241
  64:Polyphony.cpp ****                     modulations_[voice_idx].trigger = 1.0f; 
 4087              		.loc 1 64 46 is_stmt 0 view .LVU1242
 4088 0066 43F61013 		movw	r3, #14608
 4089 006a D154     		strb	r1, [r2, r3]
  65:Polyphony.cpp ****                     if (percussive_engine) {
 4090              		.loc 1 65 21 is_stmt 1 view .LVU1243
  65:Polyphony.cpp ****                     if (percussive_engine) {
 4091              		.loc 1 65 53 is_stmt 0 view .LVU1244
 4092 006c 2823     		movs	r3, #40
 4093 006e 4FF07E51 		mov	r1, #1065353216
 4094 0072 03FB0043 		mla	r3, r3, r0, r4
 4095 0076 03F55D52 		add	r2, r3, #14144
 4096 007a 9163     		str	r1, [r2, #56]	@ float
  66:Polyphony.cpp ****                         modulations_[voice_idx].trigger_patched = true;
 4097              		.loc 1 66 21 is_stmt 1 view .LVU1245
 4098 007c 43F28372 		movw	r2, #14211
 4099 0080 03F80290 		strb	r9, [r3, r2]
  71:Polyphony.cpp ****                 }
 4100              		.loc 1 71 21 view .LVU1246
  71:Polyphony.cpp ****                 }
 4101              		.loc 1 71 56 is_stmt 0 view .LVU1247
 4102 0084 4423     		movs	r3, #68
 4103 0086 03FB0040 		mla	r0, r3, r0, r4
 4104              	.LVL265:
  71:Polyphony.cpp ****                 }
 4105              		.loc 1 71 56 view .LVU1248
 4106 008a 00F56050 		add	r0, r0, #14336
 4107 008e FFF7FEFF 		bl	_ZN13VoiceEnvelope7TriggerEv
 4108              	.LVL266:
 4109              	.L186:
  71:Polyphony.cpp ****                 }
 4110              		.loc 1 71 56 view .LVU1249
 4111              	.LBE1662:
 4112              	.LBE1661:
 4113              	.LBE1669:
 4114              	.LBE1673:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 146


  53:Polyphony.cpp ****         bool pad_currently_pressed = (current_touch_state_param >> i) & 1;
 4115              		.loc 1 53 5 is_stmt 1 discriminator 2 view .LVU1250
 4116 0092 0135     		adds	r5, r5, #1
 4117              	.LVL267:
  53:Polyphony.cpp ****         bool pad_currently_pressed = (current_touch_state_param >> i) & 1;
 4118              		.loc 1 53 23 discriminator 2 view .LVU1251
 4119 0094 0C2D     		cmp	r5, #12
 4120 0096 C8D1     		bne	.L190
 4121              	.LBE1678:
 100:Polyphony.cpp **** 
 4122              		.loc 1 100 1 is_stmt 0 view .LVU1252
 4123 0098 05B0     		add	sp, sp, #20
 4124              		.cfi_remember_state
 4125              		.cfi_def_cfa_offset 36
 4126              		@ sp needed
 4127 009a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4128              	.LVL268:
 4129              	.L187:
 4130              		.cfi_restore_state
 4131              	.LBB1679:
 4132              	.LBB1674:
 4133              	.LBB1670:
 4134              	.LBB1663:
  76:Polyphony.cpp ****             }
 4135              		.loc 1 76 17 is_stmt 1 view .LVU1253
  76:Polyphony.cpp ****             }
 4136              		.loc 1 76 39 is_stmt 0 view .LVU1254
 4137 009e 4A46     		mov	r2, r9
 4138 00a0 3146     		mov	r1, r6
 4139 00a2 2046     		mov	r0, r4
 4140 00a4 FFF7FEFF 		bl	_ZN15PolyphonyEngine22AssignMonoNoteInternalEfib
 4141              	.LVL269:
  76:Polyphony.cpp ****             }
 4142              		.loc 1 76 39 view .LVU1255
 4143 00a8 F3E7     		b	.L186
 4144              	.LVL270:
 4145              	.L185:
  76:Polyphony.cpp ****             }
 4146              		.loc 1 76 39 view .LVU1256
 4147              	.LBE1663:
 4148              	.LBE1670:
 4149              	.LBE1674:
 4150              	.LBE1679:
  78:Polyphony.cpp ****             if (poly_mode) {
 4151              		.loc 1 78 16 is_stmt 1 discriminator 1 view .LVU1257
 4152              	.LBB1680:
 4153              	.LBB1675:
 4154              	.LBB1671:
 4155              	.LBB1664:
  78:Polyphony.cpp ****             if (poly_mode) {
 4156              		.loc 1 78 43 is_stmt 0 discriminator 1 view .LVU1258
 4157 00aa 002B     		cmp	r3, #0
 4158 00ac F1D0     		beq	.L186
 4159              	.LBE1664:
 4160              	.LBE1671:
 4161              	.LBE1675:
 4162              	.LBE1680:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 147


  79:Polyphony.cpp ****                  int voice_idx = FindVoiceForNote(note_for_pad, engine_index, poly_mode, effective_
 4163              		.loc 1 79 13 is_stmt 1 view .LVU1259
 4164              	.LBB1681:
 4165              	.LBB1676:
 4166              	.LBB1672:
 4167              	.LBB1667:
 4168              	.LBB1665:
 4169 00ae B8F1000F 		cmp	r8, #0
 4170 00b2 1CD0     		beq	.L188
 4171              	.LBB1666:
  80:Polyphony.cpp ****                  if (voice_idx != -1) {
 4172              		.loc 1 80 18 view .LVU1260
  80:Polyphony.cpp ****                  if (voice_idx != -1) {
 4173              		.loc 1 80 50 is_stmt 0 view .LVU1261
 4174 00b4 5B46     		mov	r3, fp
 4175              	.LVL271:
  80:Polyphony.cpp ****                  if (voice_idx != -1) {
 4176              		.loc 1 80 50 view .LVU1262
 4177 00b6 0122     		movs	r2, #1
 4178 00b8 3146     		mov	r1, r6
 4179 00ba 2046     		mov	r0, r4
 4180 00bc FFF7FEFF 		bl	_ZN15PolyphonyEngine16FindVoiceForNoteEfibi
 4181              	.LVL272:
  81:Polyphony.cpp ****                      voice_active_[voice_idx] = false; 
 4182              		.loc 1 81 18 view .LVU1263
 4183 00c0 421C     		adds	r2, r0, #1
  80:Polyphony.cpp ****                  if (voice_idx != -1) {
 4184              		.loc 1 80 50 view .LVU1264
 4185 00c2 0346     		mov	r3, r0
 4186              	.LVL273:
  81:Polyphony.cpp ****                      voice_active_[voice_idx] = false; 
 4187              		.loc 1 81 18 is_stmt 1 view .LVU1265
 4188 00c4 E5D0     		beq	.L186
  82:Polyphony.cpp ****                      voice_envelopes_[voice_idx].Release(); 
 4189              		.loc 1 82 22 view .LVU1266
  82:Polyphony.cpp ****                      voice_envelopes_[voice_idx].Release(); 
 4190              		.loc 1 82 47 is_stmt 0 view .LVU1267
 4191 00c6 2118     		adds	r1, r4, r0
  83:Polyphony.cpp ****                      // Ensure trigger_patched is false on note off for poly voices if it was set t
 4192              		.loc 1 83 57 view .LVU1268
 4193 00c8 4420     		movs	r0, #68
 4194              	.LVL274:
  82:Polyphony.cpp ****                      voice_envelopes_[voice_idx].Release(); 
 4195              		.loc 1 82 47 view .LVU1269
 4196 00ca 43F61012 		movw	r2, #14608
  83:Polyphony.cpp ****                      // Ensure trigger_patched is false on note off for poly voices if it was set t
 4197              		.loc 1 83 57 view .LVU1270
 4198 00ce 0393     		str	r3, [sp, #12]
 4199 00d0 00FB0340 		mla	r0, r0, r3, r4
  82:Polyphony.cpp ****                      voice_envelopes_[voice_idx].Release(); 
 4200              		.loc 1 82 47 view .LVU1271
 4201 00d4 8F54     		strb	r7, [r1, r2]
  83:Polyphony.cpp ****                      // Ensure trigger_patched is false on note off for poly voices if it was set t
 4202              		.loc 1 83 22 is_stmt 1 view .LVU1272
  83:Polyphony.cpp ****                      // Ensure trigger_patched is false on note off for poly voices if it was set t
 4203              		.loc 1 83 57 is_stmt 0 view .LVU1273
 4204 00d6 00F56050 		add	r0, r0, #14336
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 148


 4205 00da FFF7FEFF 		bl	_ZN13VoiceEnvelope7ReleaseEv
 4206              	.LVL275:
  85:Polyphony.cpp ****                  }
 4207              		.loc 1 85 22 is_stmt 1 view .LVU1274
  85:Polyphony.cpp ****                  }
 4208              		.loc 1 85 62 is_stmt 0 view .LVU1275
 4209 00de 2820     		movs	r0, #40
 4210 00e0 039B     		ldr	r3, [sp, #12]
 4211 00e2 43F28372 		movw	r2, #14211
 4212 00e6 00FB0343 		mla	r3, r0, r3, r4
 4213 00ea 9F54     		strb	r7, [r3, r2]
 4214 00ec D1E7     		b	.L186
 4215              	.LVL276:
 4216              	.L188:
  85:Polyphony.cpp ****                  }
 4217              		.loc 1 85 62 view .LVU1276
 4218              	.LBE1666:
  88:Polyphony.cpp ****                     voice_active_[0] = false; 
 4219              		.loc 1 88 17 is_stmt 1 view .LVU1277
  88:Polyphony.cpp ****                     voice_active_[0] = false; 
 4220              		.loc 1 88 36 is_stmt 0 view .LVU1278
 4221 00ee 04F54057 		add	r7, r4, #12288
  88:Polyphony.cpp ****                     voice_active_[0] = false; 
 4222              		.loc 1 88 17 view .LVU1279
 4223 00f2 97F81039 		ldrb	r3, [r7, #2320]	@ zero_extendqisi2
 4224              	.LVL277:
  88:Polyphony.cpp ****                     voice_active_[0] = false; 
 4225              		.loc 1 88 17 view .LVU1280
 4226 00f6 002B     		cmp	r3, #0
 4227 00f8 CBD0     		beq	.L186
  88:Polyphony.cpp ****                     voice_active_[0] = false; 
 4228              		.loc 1 88 60 discriminator 1 view .LVU1281
 4229 00fa 07F61413 		addw	r3, r7, #2324
  88:Polyphony.cpp ****                     voice_active_[0] = false; 
 4230              		.loc 1 88 38 discriminator 1 view .LVU1282
 4231 00fe 9FED0B7A 		vldr.32	s14, .L205
  88:Polyphony.cpp ****                     voice_active_[0] = false; 
 4232              		.loc 1 88 62 discriminator 1 view .LVU1283
 4233 0102 D3ED007A 		vldr.32	s15, [r3]
 4234 0106 77EEC07A 		vsub.f32	s15, s15, s0
  88:Polyphony.cpp ****                     voice_active_[0] = false; 
 4235              		.loc 1 88 46 discriminator 1 view .LVU1284
 4236 010a F0EEE77A 		vabs.f32	s15, s15
  88:Polyphony.cpp ****                     voice_active_[0] = false; 
 4237              		.loc 1 88 38 discriminator 1 view .LVU1285
 4238 010e F4EEC77A 		vcmpe.f32	s15, s14
 4239 0112 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 4240 0116 BCD5     		bpl	.L186
  89:Polyphony.cpp ****                     voice_envelopes_[0].Release();
 4241              		.loc 1 89 21 is_stmt 1 view .LVU1286
  90:Polyphony.cpp ****                     modulations_[0].trigger_patched = false; // Also for mono mode
 4242              		.loc 1 90 48 is_stmt 0 view .LVU1287
 4243 0118 04F56050 		add	r0, r4, #14336
  89:Polyphony.cpp ****                     voice_envelopes_[0].Release();
 4244              		.loc 1 89 38 view .LVU1288
 4245 011c 87F81089 		strb	r8, [r7, #2320]
  90:Polyphony.cpp ****                     modulations_[0].trigger_patched = false; // Also for mono mode
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 149


 4246              		.loc 1 90 21 is_stmt 1 view .LVU1289
  90:Polyphony.cpp ****                     modulations_[0].trigger_patched = false; // Also for mono mode
 4247              		.loc 1 90 48 is_stmt 0 view .LVU1290
 4248 0120 FFF7FEFF 		bl	_ZN13VoiceEnvelope7ReleaseEv
 4249              	.LVL278:
  91:Polyphony.cpp ****                 }
 4250              		.loc 1 91 21 is_stmt 1 view .LVU1291
  91:Polyphony.cpp ****                 }
 4251              		.loc 1 91 53 is_stmt 0 view .LVU1292
 4252 0124 87F88387 		strb	r8, [r7, #1923]
 4253 0128 B3E7     		b	.L186
 4254              	.L206:
 4255 012a 00BF     		.align	2
 4256              	.L205:
 4257 012c CDCCCC3D 		.word	1036831949
 4258 0130 00000000 		.word	.LANCHOR0
 4259              	.LBE1665:
 4260              	.LBE1667:
 4261              	.LBE1672:
 4262              	.LBE1676:
 4263              	.LBE1681:
 4264              		.cfi_endproc
 4265              	.LFE5352:
 4267              		.section	.text._ZN15PolyphonyEngine23TriggerArpCallbackVoiceEii,"ax",%progbits
 4268              		.align	1
 4269              		.global	_ZN15PolyphonyEngine23TriggerArpCallbackVoiceEii
 4270              		.syntax unified
 4271              		.thumb
 4272              		.thumb_func
 4274              	_ZN15PolyphonyEngine23TriggerArpCallbackVoiceEii:
 4275              	.LVL279:
 4276              	.LFB5374:
 514:Polyphony.cpp **** 
 515:Polyphony.cpp **** 
 516:Polyphony.cpp **** 
 517:Polyphony.cpp **** void PolyphonyEngine::TriggerArpCallbackVoice(int pad_idx, int current_engine_index_val) {
 4277              		.loc 1 517 90 is_stmt 1 view -0
 4278              		.cfi_startproc
 4279              		@ args = 0, pretend = 0, frame = 0
 4280              		@ frame_needed = 0, uses_anonymous_args = 0
 518:Polyphony.cpp ****     if (pad_idx < 0 || pad_idx >= 12) return;
 4281              		.loc 1 518 5 view .LVU1294
 4282 0000 0B29     		cmp	r1, #11
 517:Polyphony.cpp ****     if (pad_idx < 0 || pad_idx >= 12) return;
 4283              		.loc 1 517 90 is_stmt 0 view .LVU1295
 4284 0002 38B5     		push	{r3, r4, r5, lr}
 4285              		.cfi_def_cfa_offset 16
 4286              		.cfi_offset 3, -16
 4287              		.cfi_offset 4, -12
 4288              		.cfi_offset 5, -8
 4289              		.cfi_offset 14, -4
 4290              		.loc 1 518 5 view .LVU1296
 4291 0004 21D8     		bhi	.L207
 519:Polyphony.cpp **** 
 520:Polyphony.cpp ****     float note_to_play = kTouchMidiNotes_[pad_idx];
 4292              		.loc 1 520 5 is_stmt 1 view .LVU1297
 4293              		.loc 1 520 11 is_stmt 0 view .LVU1298
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 150


 4294 0006 114B     		ldr	r3, .L211
 521:Polyphony.cpp ****     bool percussive = (current_engine_index_val > 7);
 522:Polyphony.cpp **** 
 523:Polyphony.cpp ****     voice_note_[0] = note_to_play;
 524:Polyphony.cpp ****     voice_active_[0] = true;
 525:Polyphony.cpp **** 
 526:Polyphony.cpp ****     patches_[0].engine = current_engine_index_val;
 527:Polyphony.cpp ****     patches_[0].note = note_to_play; 
 4295              		.loc 1 527 22 view .LVU1299
 4296 0008 00F55B55 		add	r5, r0, #14016
 528:Polyphony.cpp **** 
 529:Polyphony.cpp ****     modulations_[0].trigger = 1.0f;
 530:Polyphony.cpp ****     modulations_[0].trigger_patched = true;
 531:Polyphony.cpp **** 
 532:Polyphony.cpp ****     if (!percussive) {
 4297              		.loc 1 532 5 view .LVU1300
 4298 000c 072A     		cmp	r2, #7
 520:Polyphony.cpp ****     bool percussive = (current_engine_index_val > 7);
 4299              		.loc 1 520 11 view .LVU1301
 4300 000e 03EB8101 		add	r1, r3, r1, lsl #2
 4301              	.LVL280:
 523:Polyphony.cpp ****     voice_active_[0] = true;
 4302              		.loc 1 523 20 view .LVU1302
 4303 0012 00F54053 		add	r3, r0, #12288
 520:Polyphony.cpp ****     bool percussive = (current_engine_index_val > 7);
 4304              		.loc 1 520 11 view .LVU1303
 4305 0016 0C68     		ldr	r4, [r1]	@ float
 4306              	.LVL281:
 521:Polyphony.cpp **** 
 4307              		.loc 1 521 5 is_stmt 1 view .LVU1304
 523:Polyphony.cpp ****     voice_active_[0] = true;
 4308              		.loc 1 523 5 view .LVU1305
 523:Polyphony.cpp ****     voice_active_[0] = true;
 4309              		.loc 1 523 20 is_stmt 0 view .LVU1306
 4310 0018 03F61411 		addw	r1, r3, #2324
 4311 001c 0C60     		str	r4, [r1]	@ float
 524:Polyphony.cpp **** 
 4312              		.loc 1 524 5 is_stmt 1 view .LVU1307
 524:Polyphony.cpp **** 
 4313              		.loc 1 524 22 is_stmt 0 view .LVU1308
 4314 001e 4FF00101 		mov	r1, #1
 526:Polyphony.cpp ****     patches_[0].note = note_to_play; 
 4315              		.loc 1 526 24 view .LVU1309
 4316 0022 C3F8DC26 		str	r2, [r3, #1756]
 524:Polyphony.cpp **** 
 4317              		.loc 1 524 22 view .LVU1310
 4318 0026 83F81019 		strb	r1, [r3, #2320]
 526:Polyphony.cpp ****     patches_[0].note = note_to_play; 
 4319              		.loc 1 526 5 is_stmt 1 view .LVU1311
 527:Polyphony.cpp **** 
 4320              		.loc 1 527 5 view .LVU1312
 527:Polyphony.cpp **** 
 4321              		.loc 1 527 22 is_stmt 0 view .LVU1313
 4322 002a 2C60     		str	r4, [r5]	@ float
 529:Polyphony.cpp ****     modulations_[0].trigger_patched = true;
 4323              		.loc 1 529 5 is_stmt 1 view .LVU1314
 529:Polyphony.cpp ****     modulations_[0].trigger_patched = true;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 151


 4324              		.loc 1 529 29 is_stmt 0 view .LVU1315
 4325 002c 03F5EF64 		add	r4, r3, #1912
 4326              	.LVL282:
 529:Polyphony.cpp ****     modulations_[0].trigger_patched = true;
 4327              		.loc 1 529 29 view .LVU1316
 4328 0030 4FF07E55 		mov	r5, #1065353216
 4329              	.LVL283:
 529:Polyphony.cpp ****     modulations_[0].trigger_patched = true;
 4330              		.loc 1 529 29 view .LVU1317
 4331 0034 2560     		str	r5, [r4]	@ float
 530:Polyphony.cpp **** 
 4332              		.loc 1 530 5 is_stmt 1 view .LVU1318
 530:Polyphony.cpp **** 
 4333              		.loc 1 530 37 is_stmt 0 view .LVU1319
 4334 0036 83F88317 		strb	r1, [r3, #1923]
 4335              		.loc 1 532 5 is_stmt 1 view .LVU1320
 4336 003a 06DC     		bgt	.L207
 533:Polyphony.cpp ****         voice_envelopes_[0].SetMode(VoiceEnvelope::MODE_AR);
 4337              		.loc 1 533 9 view .LVU1321
 4338              	.LVL284:
 4339              	.LBB1682:
 4340              	.LBI1682:
  43:VoiceEnvelope.h ****         mode = new_mode;
 4341              		.loc 3 43 10 view .LVU1322
 4342              	.LBB1683:
  44:VoiceEnvelope.h ****     }
 4343              		.loc 3 44 9 view .LVU1323
  44:VoiceEnvelope.h ****     }
 4344              		.loc 3 44 14 is_stmt 0 view .LVU1324
 4345 003c 0022     		movs	r2, #0
 4346              	.LVL285:
  44:VoiceEnvelope.h ****     }
 4347              		.loc 3 44 14 view .LVU1325
 4348              	.LBE1683:
 4349              	.LBE1682:
 534:Polyphony.cpp ****         voice_envelopes_[0].Trigger();
 4350              		.loc 1 534 36 view .LVU1326
 4351 003e 00F56050 		add	r0, r0, #14336
 4352              	.LVL286:
 4353              	.LBB1685:
 4354              	.LBB1684:
  44:VoiceEnvelope.h ****     }
 4355              		.loc 3 44 14 view .LVU1327
 4356 0042 83F80128 		strb	r2, [r3, #2049]
 4357              	.LVL287:
  44:VoiceEnvelope.h ****     }
 4358              		.loc 3 44 14 view .LVU1328
 4359              	.LBE1684:
 4360              	.LBE1685:
 4361              		.loc 1 534 9 is_stmt 1 view .LVU1329
 4362              		.loc 1 534 36 is_stmt 0 view .LVU1330
 4363 0046 FFF7FEFF 		bl	_ZN13VoiceEnvelope7TriggerEv
 4364              	.LVL288:
 4365              	.L207:
 535:Polyphony.cpp ****     }
 536:Polyphony.cpp **** }
 4366              		.loc 1 536 1 view .LVU1331
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 152


 4367 004a 38BD     		pop	{r3, r4, r5, pc}
 4368              	.L212:
 4369              		.align	2
 4370              	.L211:
 4371 004c 00000000 		.word	.LANCHOR0
 4372              		.cfi_endproc
 4373              	.LFE5374:
 4375              		.section	.text._ZNK15PolyphonyEngine16IsAnyVoiceActiveEv,"ax",%progbits
 4376              		.align	1
 4377              		.global	_ZNK15PolyphonyEngine16IsAnyVoiceActiveEv
 4378              		.syntax unified
 4379              		.thumb
 4380              		.thumb_func
 4382              	_ZNK15PolyphonyEngine16IsAnyVoiceActiveEv:
 4383              	.LVL289:
 4384              	.LFB5375:
 537:Polyphony.cpp **** 
 538:Polyphony.cpp **** bool PolyphonyEngine::IsAnyVoiceActive() const {
 4385              		.loc 1 538 48 is_stmt 1 view -0
 4386              		.cfi_startproc
 4387              		@ args = 0, pretend = 0, frame = 0
 4388              		@ frame_needed = 0, uses_anonymous_args = 0
 4389              		@ link register save eliminated.
 539:Polyphony.cpp ****     for (int i = 0; i < NUM_VOICES; ++i) {
 4390              		.loc 1 539 5 view .LVU1333
 4391              	.LBB1686:
 4392              		.loc 1 539 23 view .LVU1334
 4393 0000 00F56452 		add	r2, r0, #14592
 4394 0004 00F56453 		add	r3, r0, #14592
 4395 0008 1032     		adds	r2, r2, #16
 4396 000a 1433     		adds	r3, r3, #20
 4397              	.LVL290:
 4398              	.L215:
 540:Polyphony.cpp ****         if (voice_active_[i]) {
 4399              		.loc 1 540 9 view .LVU1335
 4400              		.loc 1 540 28 is_stmt 0 view .LVU1336
 4401 000c 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 4402              	.LVL291:
 4403              		.loc 1 540 9 view .LVU1337
 4404 0010 08B9     		cbnz	r0, .L214
 539:Polyphony.cpp ****     for (int i = 0; i < NUM_VOICES; ++i) {
 4405              		.loc 1 539 5 is_stmt 1 discriminator 2 view .LVU1338
 4406              	.LVL292:
 539:Polyphony.cpp ****     for (int i = 0; i < NUM_VOICES; ++i) {
 4407              		.loc 1 539 23 discriminator 2 view .LVU1339
 4408 0012 9A42     		cmp	r2, r3
 4409 0014 FAD1     		bne	.L215
 4410              	.LVL293:
 4411              	.L214:
 539:Polyphony.cpp ****     for (int i = 0; i < NUM_VOICES; ++i) {
 4412              		.loc 1 539 23 is_stmt 0 discriminator 2 view .LVU1340
 4413              	.LBE1686:
 541:Polyphony.cpp ****             return true;
 542:Polyphony.cpp ****         }
 543:Polyphony.cpp ****     }
 544:Polyphony.cpp ****     return false;
 545:Polyphony.cpp **** }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 153


 4414              		.loc 1 545 1 view .LVU1341
 4415 0016 7047     		bx	lr
 4416              		.cfi_endproc
 4417              	.LFE5375:
 4419              		.section	.text._ZNK15PolyphonyEngine13IsVoiceActiveEi,"ax",%progbits
 4420              		.align	1
 4421              		.global	_ZNK15PolyphonyEngine13IsVoiceActiveEi
 4422              		.syntax unified
 4423              		.thumb
 4424              		.thumb_func
 4426              	_ZNK15PolyphonyEngine13IsVoiceActiveEi:
 4427              	.LVL294:
 4428              	.LFB5376:
 546:Polyphony.cpp **** 
 547:Polyphony.cpp **** bool PolyphonyEngine::IsVoiceActive(int voice_index) const {
 4429              		.loc 1 547 60 is_stmt 1 view -0
 4430              		.cfi_startproc
 4431              		@ args = 0, pretend = 0, frame = 0
 4432              		@ frame_needed = 0, uses_anonymous_args = 0
 4433              		@ link register save eliminated.
 548:Polyphony.cpp ****     if (voice_index < 0 || voice_index >= NUM_VOICES) {
 4434              		.loc 1 548 5 view .LVU1343
 4435 0000 0329     		cmp	r1, #3
 549:Polyphony.cpp ****         return false;
 550:Polyphony.cpp ****     }
 551:Polyphony.cpp ****     return voice_active_[voice_index];
 4436              		.loc 1 551 5 view .LVU1344
 4437              		.loc 1 551 37 is_stmt 0 view .LVU1345
 4438 0002 9DBF     		ittte	ls
 4439 0004 4018     		addls	r0, r0, r1
 4440              	.LVL295:
 4441              		.loc 1 551 37 view .LVU1346
 4442 0006 43F61013 		movwls	r3, #14608
 4443 000a C05C     		ldrbls	r0, [r0, r3]	@ zero_extendqisi2
 549:Polyphony.cpp ****         return false;
 4444              		.loc 1 549 16 view .LVU1347
 4445 000c 0020     		movhi	r0, #0
 552:Polyphony.cpp **** }
 4446              		.loc 1 552 1 view .LVU1348
 4447 000e 7047     		bx	lr
 4448              		.cfi_endproc
 4449              	.LFE5376:
 4451              		.section	.text.startup._GLOBAL__sub_I_shared_buffer,"ax",%progbits
 4452              		.align	1
 4453              		.syntax unified
 4454              		.thumb
 4455              		.thumb_func
 4457              	_GLOBAL__sub_I_shared_buffer:
 4458              	.LFB6095:
 4459              		.loc 1 552 1 is_stmt 1 view -0
 4460              		.cfi_startproc
 4461              		@ args = 0, pretend = 0, frame = 0
 4462              		@ frame_needed = 0, uses_anonymous_args = 0
 4463              	.LBB1689:
 4464              	.LBI1689:
 4465              		.loc 1 552 1 view .LVU1350
 4466              	.LVL296:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 154


 4467              		.loc 1 552 1 is_stmt 0 view .LVU1351
 4468              	.LBE1689:
 4469 0000 10B5     		push	{r4, lr}
 4470              		.cfi_def_cfa_offset 8
 4471              		.cfi_offset 4, -8
 4472              		.cfi_offset 14, -4
 4473              	.LBB1692:
 4474              	.LBB1690:
  12:Polyphony.cpp **** 
 4475              		.loc 1 12 17 view .LVU1352
 4476 0002 054C     		ldr	r4, .L221
 4477 0004 2046     		mov	r0, r4
 4478 0006 FFF7FEFF 		bl	_ZN15PolyphonyEngineC1Ev
 4479              	.LVL297:
 4480 000a 2046     		mov	r0, r4
 4481 000c 034A     		ldr	r2, .L221+4
 4482 000e 0449     		ldr	r1, .L221+8
 4483              	.LBE1690:
 4484              	.LBE1692:
 4485              		.loc 1 552 1 view .LVU1353
 4486 0010 BDE81040 		pop	{r4, lr}
 4487              		.cfi_restore 14
 4488              		.cfi_restore 4
 4489              		.cfi_def_cfa_offset 0
 4490              	.LBB1693:
 4491              	.LBB1691:
  12:Polyphony.cpp **** 
 4492              		.loc 1 12 17 view .LVU1354
 4493 0014 FFF7FEBF 		b	__aeabi_atexit
 4494              	.LVL298:
 4495              	.L222:
 4496              		.align	2
 4497              	.L221:
 4498 0018 00000000 		.word	poly_engine
 4499 001c 00000000 		.word	__dso_handle
 4500 0020 00000000 		.word	_ZN15PolyphonyEngineD1Ev
 4501              	.LBE1691:
 4502              	.LBE1693:
 4503              		.cfi_endproc
 4504              	.LFE6095:
 4506              		.section	.init_array,"aw",%init_array
 4507              		.align	2
 4508 0000 00000000 		.word	_GLOBAL__sub_I_shared_buffer(target1)
 4509              		.global	_ZN15PolyphonyEngine16kTouchMidiNotes_E
 4510              		.global	poly_engine
 4511              		.global	MAX_ENGINE_INDEX
 4512              		.global	shared_buffer
 4513              		.section	.bss.poly_engine,"aw",%nobits
 4514              		.align	2
 4517              	poly_engine:
 4518 0000 00000000 		.space	15024
 4518      00000000 
 4518      00000000 
 4518      00000000 
 4518      00000000 
 4519              		.section	.rodata.MAX_ENGINE_INDEX,"a"
 4520              		.align	2
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 155


 4523              	MAX_ENGINE_INDEX:
 4524 0000 0C000000 		.word	12
 4525              		.section	.rodata._ZN15PolyphonyEngine16kTouchMidiNotes_E,"a"
 4526              		.align	2
 4527              		.set	.LANCHOR0,. + 0
 4530              	_ZN15PolyphonyEngine16kTouchMidiNotes_E:
 4531 0000 00002042 		.word	1109393408
 4532 0004 00002442 		.word	1109655552
 4533 0008 00002C42 		.word	1110179840
 4534 000c 00003442 		.word	1110704128
 4535 0010 00003C42 		.word	1111228416
 4536 0014 00004042 		.word	1111490560
 4537 0018 00004842 		.word	1112014848
 4538 001c 00005042 		.word	1112539136
 4539 0020 00005442 		.word	1112801280
 4540 0024 00005C42 		.word	1113325568
 4541 0028 00006442 		.word	1113849856
 4542 002c 00006C42 		.word	1114374144
 4543              		.section	.sdram_bss,"aw"
 4546              	shared_buffer:
 4547 0000 00000000 		.space	262144
 4547      00000000 
 4547      00000000 
 4547      00000000 
 4547      00000000 
 4548              		.text
 4549              	.Letext0:
 4550              		.file 41 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/machine/_default_types.h"
 4551              		.file 42 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/_stdint.h"
 4552              		.file 43 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdint.h"
 4553              		.file 44 "/Library/DaisyToolchain/0.2.0/arm/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 4554              		.file 45 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/cpp_type_traits.
 4555              		.file 46 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cmath"
 4556              		.file 47 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h"
 4557              		.file 48 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdlib"
 4558              		.file 49 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdint"
 4559              		.file 50 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/type_traits"
 4560              		.file 51 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h"
 4561              		.file 52 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/debug/debug.h"
 4562              		.file 53 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/arm-none-eabi/thumb/v
 4563              		.file 54 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/algorithmfwd.h"
 4564              		.file 55 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/exception_ptr.h"
 4565              		.file 56 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdarg"
 4566              		.file 57 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdio"
 4567              		.file 58 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstring"
 4568              		.file 59 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cwchar"
 4569              		.file 60 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/clocale"
 4570              		.file 61 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/basic_string.h"
 4571              		.file 62 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_iterator.h"
 4572              		.file 63 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/uses_allocator.h
 4573              		.file 64 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/tuple"
 4574              		.file 65 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/functional"
 4575              		.file 66 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/predefined_ops.h
 4576              		.file 67 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/_types.h"
 4577              		.file 68 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/reent.h"
 4578              		.file 69 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/lock.h"
 4579              		.file 70 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/math.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 156


 4580              		.file 71 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdlib.h"
 4581              		.file 72 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/math.h"
 4582              		.file 73 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/stdlib.h"
 4583              		.file 74 "lib/libdaisy/src/daisy_core.h"
 4584              		.file 75 "lib/libdaisy/src/per/tim.h"
 4585              		.file 76 "lib/libdaisy/src/sys/system.h"
 4586              		.file 77 "lib/libdaisy/src/per/qspi.h"
 4587              		.file 78 "lib/libdaisy/src/per/dac.h"
 4588              		.file 79 "lib/libdaisy/src/per/sai.h"
 4589              		.file 80 "lib/libdaisy/src/hid/audio.h"
 4590              		.file 81 "lib/libdaisy/src/per/adc.h"
 4591              		.file 82 "lib/libdaisy/src/hid/usb.h"
 4592              		.file 83 "lib/libdaisy/src/util/wav_format.h"
 4593              		.file 84 "lib/libdaisy/src/daisy_seed.h"
 4594              		.file 85 "lib/libdaisy/src/per/gpio.h"
 4595              		.file 86 "lib/libdaisy/src/dev/sdram.h"
 4596              		.file 87 "/Library/DaisyToolchain/0.2.0/arm/lib/gcc/arm-none-eabi/10.3.1/include/stdarg.h"
 4597              		.file 88 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdio.h"
 4598              		.file 89 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/string.h"
 4599              		.file 90 "lib/DaisySP/Source/Control/adenv.h"
 4600              		.file 91 "lib/DaisySP/Source/Utility/dsp.h"
 4601              		.file 92 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/wchar.h"
 4602              		.file 93 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/locale.h"
 4603              		.file 94 "eurorack/stmlib/stmlib.h"
 4604              		.file 95 "eurorack/stmlib/dsp/cosine_oscillator.h"
 4605              		.file 96 "eurorack/plaits/dsp/dsp.h"
 4606              		.file 97 "eurorack/plaits/dsp/oscillator/harmonic_oscillator.h"
 4607              		.file 98 "eurorack/plaits/dsp/engine/chord_engine.h"
 4608              		.file 99 "eurorack/plaits/dsp/oscillator/grainlet_oscillator.h"
 4609              		.file 100 "eurorack/plaits/dsp/noise/clocked_noise.h"
 4610              		.file 101 "eurorack/plaits/dsp/noise/particle.h"
 4611              		.file 102 "eurorack/plaits/dsp/physical_modelling/string.h"
 4612              		.file 103 "eurorack/plaits/dsp/physical_modelling/string_voice.h"
 4613              		.file 104 "mpr121_daisy.h"
 4614              		.file 105 "Effects/BiquadFilters.h"
 4615              		.file 106 "Arpeggiator.h"
 4616              		.file 107 "Thaumazein.h"
 4617              		.file 108 "lib/libdaisy/src/dev/sr_595.h"
 4618              		.file 109 "Polyphony.h"
 4619              		.file 110 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/new"
 4620              		.file 111 "<built-in>"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 157


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Polyphony.cpp
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:19     .text._ZN15PolyphonyEngineD2Ev:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:25     .text._ZN15PolyphonyEngineD2Ev:0000000000000000 _ZN15PolyphonyEngineD2Ev
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:25     .text._ZN15PolyphonyEngineD2Ev:0000000000000000 _ZN15PolyphonyEngineD1Ev
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:76     .text._ZN13VoiceEnvelope7TriggerEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:82     .text._ZN13VoiceEnvelope7TriggerEv:0000000000000000 _ZN13VoiceEnvelope7TriggerEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:181    .text._ZN13VoiceEnvelope7ReleaseEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:187    .text._ZN13VoiceEnvelope7ReleaseEv:0000000000000000 _ZN13VoiceEnvelope7ReleaseEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:266    .text._ZN13VoiceEnvelope5ResetEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:272    .text._ZN13VoiceEnvelope5ResetEv:0000000000000000 _ZN13VoiceEnvelope5ResetEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:311    .text._ZN15PolyphonyEngineC2Ev:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:317    .text._ZN15PolyphonyEngineC2Ev:0000000000000000 _ZN15PolyphonyEngineC2Ev
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:958    .text._ZN15PolyphonyEngineC2Ev:00000000000000dc $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:317    .text._ZN15PolyphonyEngineC2Ev:0000000000000000 _ZN15PolyphonyEngineC1Ev
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:977    .text._ZN15PolyphonyEngine11ResetVoicesEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:983    .text._ZN15PolyphonyEngine11ResetVoicesEv:0000000000000000 _ZN15PolyphonyEngine11ResetVoicesEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:1054   .text._ZN15PolyphonyEngine14TriggerArpNoteEiffib:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:1060   .text._ZN15PolyphonyEngine14TriggerArpNoteEiffib:0000000000000000 _ZN15PolyphonyEngine14TriggerArpNoteEiffib
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:1131   .text._ZN15PolyphonyEngine14AllocateVoicesEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:1137   .text._ZN15PolyphonyEngine14AllocateVoicesEv:0000000000000000 _ZN15PolyphonyEngine14AllocateVoicesEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:1240   .text._ZN15PolyphonyEngine14AllocateVoicesEv:0000000000000040 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:4546   .sdram_bss:0000000000000000 shared_buffer
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:1245   .text._ZN15PolyphonyEngine19InitVoiceParametersEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:1251   .text._ZN15PolyphonyEngine19InitVoiceParametersEv:0000000000000000 _ZN15PolyphonyEngine19InitVoiceParametersEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:1491   .text._ZN15PolyphonyEngine19InitVoiceParametersEv:00000000000000c8 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:1504   .text._ZN15PolyphonyEngine4InitEPN5daisy9DaisySeedE:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:1510   .text._ZN15PolyphonyEngine4InitEPN5daisy9DaisySeedE:0000000000000000 _ZN15PolyphonyEngine4InitEPN5daisy9DaisySeedE
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:1550   .text._ZN15PolyphonyEngine29ProcessVoiceEnvelopesInternalEb:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:1556   .text._ZN15PolyphonyEngine29ProcessVoiceEnvelopesInternalEb:0000000000000000 _ZN15PolyphonyEngine29ProcessVoiceEnvelopesInternalEb
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:1662   .text._ZN15PolyphonyEngine29ProcessVoiceEnvelopesInternalEb:0000000000000078 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:1667   .text._ZN15PolyphonyEngine30UpdateVoicePatchParamsInternalERN6plaits5PatchEifffffbf:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:1673   .text._ZN15PolyphonyEngine30UpdateVoicePatchParamsInternalERN6plaits5PatchEifffffbf:0000000000000000 _ZN15PolyphonyEngine30UpdateVoicePatchParamsInternalERN6plaits5PatchEifffffbf
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:1729   .text._ZN15PolyphonyEngine40UpdateVoiceModulationAndEnvelopeInternalERN6plaits11ModulationsER13VoiceEnvelopebff:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:1735   .text._ZN15PolyphonyEngine40UpdateVoiceModulationAndEnvelopeInternalERN6plaits11ModulationsER13VoiceEnvelopebff:0000000000000000 _ZN15PolyphonyEngine40UpdateVoiceModulationAndEnvelopeInternalERN6plaits11ModulationsER13VoiceEnvelopebff
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:1938   .text._ZN15PolyphonyEngine40UpdateVoiceModulationAndEnvelopeInternalERN6plaits11ModulationsER13VoiceEnvelopebff:00000000000000ce $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:2254   .text._ZN15PolyphonyEngine40UpdateVoiceModulationAndEnvelopeInternalERN6plaits11ModulationsER13VoiceEnvelopebff:00000000000001fc $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:2264   .text._ZN15PolyphonyEngine36UpdateMonoNonArpVoiceTriggerInternalERN6plaits11ModulationsERbb:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:2270   .text._ZN15PolyphonyEngine36UpdateMonoNonArpVoiceTriggerInternalERN6plaits11ModulationsERbb:0000000000000000 _ZN15PolyphonyEngine36UpdateMonoNonArpVoiceTriggerInternalERN6plaits11ModulationsERbb
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:2297   .text._ZN15PolyphonyEngine26SilenceVoiceOutputInternalEi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:2303   .text._ZN15PolyphonyEngine26SilenceVoiceOutputInternalEi:0000000000000000 _ZN15PolyphonyEngine26SilenceVoiceOutputInternalEi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:2334   .text._ZN15PolyphonyEngine42RenderAndProcessPercussiveArpVoiceInternalEiifffff:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:2340   .text._ZN15PolyphonyEngine42RenderAndProcessPercussiveArpVoiceInternalEiifffff:0000000000000000 _ZN15PolyphonyEngine42RenderAndProcessPercussiveArpVoiceInternalEiifffff
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:2549   .text._ZN15PolyphonyEngine36RetriggerActiveVoiceEnvelopeInternalEi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:2555   .text._ZN15PolyphonyEngine36RetriggerActiveVoiceEnvelopeInternalEi:0000000000000000 _ZN15PolyphonyEngine36RetriggerActiveVoiceEnvelopeInternalEi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:2653   .text._ZN15PolyphonyEngine30PrepareVoiceParametersInternalEibibffffff:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:2659   .text._ZN15PolyphonyEngine30PrepareVoiceParametersInternalEibibffffff:0000000000000000 _ZN15PolyphonyEngine30PrepareVoiceParametersInternalEibibffffff
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:3180   .text._ZN15PolyphonyEngine30PrepareVoiceParametersInternalEibibffffff:0000000000000224 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:3186   .text._ZN15PolyphonyEngine11RenderBlockEibibffffffff:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:3192   .text._ZN15PolyphonyEngine11RenderBlockEibibffffffff:0000000000000000 _ZN15PolyphonyEngine11RenderBlockEibibffffffff
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:3250   .text._ZN15PolyphonyEngine29ClearAllVoicesForEngineSwitchEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:3256   .text._ZN15PolyphonyEngine29ClearAllVoicesForEngineSwitchEv:0000000000000000 _ZN15PolyphonyEngine29ClearAllVoicesForEngineSwitchEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:3336   .text._ZN15PolyphonyEngine23TransferPolyToMonoVoiceEi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:3342   .text._ZN15PolyphonyEngine23TransferPolyToMonoVoiceEi:0000000000000000 _ZN15PolyphonyEngine23TransferPolyToMonoVoiceEi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:3539   .text._ZN15PolyphonyEngine23TransferPolyToMonoVoiceEi:00000000000000f4 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:3546   .text._ZN15PolyphonyEngine14OnEngineChangeEii:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:3552   .text._ZN15PolyphonyEngine14OnEngineChangeEii:0000000000000000 _ZN15PolyphonyEngine14OnEngineChangeEii
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 158


/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:3679   .text._ZNK15PolyphonyEngine17GetLastTouchStateEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:3685   .text._ZNK15PolyphonyEngine17GetLastTouchStateEv:0000000000000000 _ZNK15PolyphonyEngine17GetLastTouchStateEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:3706   .text._ZN15PolyphonyEngine20UpdateLastTouchStateEt:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:3712   .text._ZN15PolyphonyEngine20UpdateLastTouchStateEt:0000000000000000 _ZN15PolyphonyEngine20UpdateLastTouchStateEt
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:3732   .text._ZN15PolyphonyEngine26FindAvailableVoiceInternalEi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:3738   .text._ZN15PolyphonyEngine26FindAvailableVoiceInternalEi:0000000000000000 _ZN15PolyphonyEngine26FindAvailableVoiceInternalEi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:3783   .text._ZN15PolyphonyEngine22AssignMonoNoteInternalEfib:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:3789   .text._ZN15PolyphonyEngine22AssignMonoNoteInternalEfib:0000000000000000 _ZN15PolyphonyEngine22AssignMonoNoteInternalEfib
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:3849   .text._ZN15PolyphonyEngine16FindVoiceForNoteEfibi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:3855   .text._ZN15PolyphonyEngine16FindVoiceForNoteEfibi:0000000000000000 _ZN15PolyphonyEngine16FindVoiceForNoteEfibi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:3970   .text._ZN15PolyphonyEngine16FindVoiceForNoteEfibi:0000000000000074 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:3975   .text._ZN15PolyphonyEngine16HandleTouchInputEttibi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:3981   .text._ZN15PolyphonyEngine16HandleTouchInputEttibi:0000000000000000 _ZN15PolyphonyEngine16HandleTouchInputEttibi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:4257   .text._ZN15PolyphonyEngine16HandleTouchInputEttibi:000000000000012c $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:4268   .text._ZN15PolyphonyEngine23TriggerArpCallbackVoiceEii:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:4274   .text._ZN15PolyphonyEngine23TriggerArpCallbackVoiceEii:0000000000000000 _ZN15PolyphonyEngine23TriggerArpCallbackVoiceEii
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:4371   .text._ZN15PolyphonyEngine23TriggerArpCallbackVoiceEii:000000000000004c $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:4376   .text._ZNK15PolyphonyEngine16IsAnyVoiceActiveEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:4382   .text._ZNK15PolyphonyEngine16IsAnyVoiceActiveEv:0000000000000000 _ZNK15PolyphonyEngine16IsAnyVoiceActiveEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:4420   .text._ZNK15PolyphonyEngine13IsVoiceActiveEi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:4426   .text._ZNK15PolyphonyEngine13IsVoiceActiveEi:0000000000000000 _ZNK15PolyphonyEngine13IsVoiceActiveEi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:4452   .text.startup._GLOBAL__sub_I_shared_buffer:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:4457   .text.startup._GLOBAL__sub_I_shared_buffer:0000000000000000 _GLOBAL__sub_I_shared_buffer
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:4498   .text.startup._GLOBAL__sub_I_shared_buffer:0000000000000018 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:4517   .bss.poly_engine:0000000000000000 poly_engine
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:4507   .init_array:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:4530   .rodata._ZN15PolyphonyEngine16kTouchMidiNotes_E:0000000000000000 _ZN15PolyphonyEngine16kTouchMidiNotes_E
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:4523   .rodata.MAX_ENGINE_INDEX:0000000000000000 MAX_ENGINE_INDEX
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:4514   .bss.poly_engine:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:4520   .rodata.MAX_ENGINE_INDEX:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:4526   .rodata._ZN15PolyphonyEngine16kTouchMidiNotes_E:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:4547   .sdram_bss:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:1944   .text._ZN15PolyphonyEngine40UpdateVoiceModulationAndEnvelopeInternalERN6plaits11ModulationsER13VoiceEnvelopebff:00000000000000d3 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s:1944   .text._ZN15PolyphonyEngine40UpdateVoiceModulationAndEnvelopeInternalERN6plaits11ModulationsER13VoiceEnvelopebff:00000000000000d4 $t

UNDEFINED SYMBOLS
_ZdlPvj
memset
_ZTVN6plaits14AdditiveEngineE
_ZTVN6plaits14BassDrumEngineE
_ZTVN6plaits8FMEngineE
_ZTVN6plaits11GrainEngineE
_ZTVN6plaits11HiHatEngineE
_ZTVN6plaits11ModalEngineE
_ZTVN6plaits11NoiseEngineE
_ZTVN6plaits14ParticleEngineE
_ZTVN6plaits15SnareDrumEngineE
_ZTVN6plaits12StringEngineE
_ZTVN6plaits11SwarmEngineE
_ZTVN6plaits19VirtualAnalogEngineE
_ZTVN6plaits17WaveshapingEngineE
_Znwj
_ZN6plaits5Voice4InitEPN6stmlib15BufferAllocatorE
_ZN6plaits5Voice6RenderERKNS_5PatchERKNS_11ModulationsEPNS0_5FrameEj
memcpy
__aeabi_atexit
__dso_handle
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctH0woK.s 			page 159


