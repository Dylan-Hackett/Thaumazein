ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"Polyphony.cpp"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.__tcf_0,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	__tcf_0:
  25              	.LFB6065:
  26              		.file 1 "Polyphony.cpp"
   1:Polyphony.cpp **** #include "Thaumazein.h"
   2:Polyphony.cpp **** 
   3:Polyphony.cpp **** // --- Polyphony Setup ---
   4:Polyphony.cpp **** plaits::Voice voices[NUM_VOICES];
  27              		.loc 1 4 15 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              		.loc 1 4 15 is_stmt 0 view .LVU1
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE6065:
  37              		.section	.text._Z9FindVoicefi,"ax",%progbits
  38              		.align	1
  39              		.global	_Z9FindVoicefi
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  44              	_Z9FindVoicefi:
  45              	.LVL0:
  46              	.LFB5343:
   5:Polyphony.cpp **** plaits::Patch patches[NUM_VOICES];
   6:Polyphony.cpp **** plaits::Modulations modulations[NUM_VOICES];
   7:Polyphony.cpp **** 
   8:Polyphony.cpp **** // Place the shared buffer in SDRAM using the DSY_SDRAM_BSS attribute
   9:Polyphony.cpp **** // Increase buffer size for 4 voices (256KB)
  10:Polyphony.cpp **** DSY_SDRAM_BSS char shared_buffer[262144]; 
  11:Polyphony.cpp **** 
  12:Polyphony.cpp **** plaits::Voice::Frame output_buffers[NUM_VOICES][BLOCK_SIZE]; 
  13:Polyphony.cpp **** 
  14:Polyphony.cpp **** bool voice_active[NUM_VOICES] = {false};
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 2


  15:Polyphony.cpp **** float voice_note[NUM_VOICES] = {0.0f};
  16:Polyphony.cpp **** float voice_values[NUM_VOICES] = {0.0f}; // For envelope output values
  17:Polyphony.cpp **** uint16_t last_touch_state = 0;
  18:Polyphony.cpp **** VoiceEnvelope voice_envelopes[NUM_VOICES]; 
  19:Polyphony.cpp **** 
  20:Polyphony.cpp **** // Map touch pads (0-11) to MIDI notes (E Phrygian scale starting at E2)
  21:Polyphony.cpp **** const float kTouchMidiNotes[12] = {
  22:Polyphony.cpp ****     40.0f, 41.0f, 43.0f, 45.0f, 47.0f, 48.0f, // E2, F2, G2, A2, B2, C3
  23:Polyphony.cpp ****     50.0f, 52.0f, 53.0f, 55.0f, 57.0f, 59.0f  // D3, E3, F3, G3, A3, B3
  24:Polyphony.cpp **** };
  25:Polyphony.cpp **** 
  26:Polyphony.cpp **** // Engine configuration
  27:Polyphony.cpp **** // Allow all engines, polyphony determined dynamically
  28:Polyphony.cpp **** // Total registered engines in plaits::Voice (see Voice::Init)
  29:Polyphony.cpp **** const int MAX_ENGINE_INDEX = 12; // Valid indices: 0-12
  30:Polyphony.cpp **** 
  31:Polyphony.cpp **** // --- Voice management functions ---
  32:Polyphony.cpp **** int FindVoice(float note, int max_voices) {
  47              		.loc 1 32 43 is_stmt 1 view -0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  33:Polyphony.cpp ****     for (int v = 0; v < max_voices; ++v) {
  51              		.loc 1 33 5 view .LVU3
  32:Polyphony.cpp ****     for (int v = 0; v < max_voices; ++v) {
  52              		.loc 1 32 43 is_stmt 0 view .LVU4
  53 0000 0246     		mov	r2, r0
  54 0002 0E4B     		ldr	r3, .L11
  55 0004 0E49     		ldr	r1, .L11+4
  56              	.LBB1029:
  57              		.loc 1 33 14 view .LVU5
  58 0006 0020     		movs	r0, #0
  59              	.LVL1:
  60              		.loc 1 33 14 view .LVU6
  61              	.LBE1029:
  32:Polyphony.cpp ****     for (int v = 0; v < max_voices; ++v) {
  62              		.loc 1 32 43 view .LVU7
  63 0008 10B5     		push	{r4, lr}
  64              		.cfi_def_cfa_offset 8
  65              		.cfi_offset 4, -8
  66              		.cfi_offset 14, -4
  67              	.LVL2:
  68              	.L5:
  69              	.LBB1030:
  70              		.loc 1 33 23 is_stmt 1 discriminator 1 view .LVU8
  71 000a 9042     		cmp	r0, r2
  72 000c 12DA     		bge	.L6
  34:Polyphony.cpp ****         if (voice_active[v] && fabsf(voice_note[v] - note) < 0.1f) {
  73              		.loc 1 34 9 view .LVU9
  74              		.loc 1 34 27 is_stmt 0 view .LVU10
  75 000e 11F8014B 		ldrb	r4, [r1], #1	@ zero_extendqisi2
  76              		.loc 1 34 9 view .LVU11
  77 0012 64B1     		cbz	r4, .L4
  78              		.loc 1 34 52 discriminator 1 view .LVU12
  79 0014 D3ED007A 		vldr.32	s15, [r3]
  80              		.loc 1 34 29 discriminator 1 view .LVU13
  81 0018 9FED0A7A 		vldr.32	s14, .L11+8
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 3


  82              		.loc 1 34 52 discriminator 1 view .LVU14
  83 001c 77EEC07A 		vsub.f32	s15, s15, s0
  84              		.loc 1 34 37 discriminator 1 view .LVU15
  85 0020 F0EEE77A 		vabs.f32	s15, s15
  86              		.loc 1 34 29 discriminator 1 view .LVU16
  87 0024 F4EEC77A 		vcmpe.f32	s15, s14
  88 0028 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  89 002c 04D4     		bmi	.L2
  90              	.L4:
  33:Polyphony.cpp ****     for (int v = 0; v < max_voices; ++v) {
  91              		.loc 1 33 5 is_stmt 1 discriminator 2 view .LVU17
  92 002e 0130     		adds	r0, r0, #1
  93              	.LVL3:
  33:Polyphony.cpp ****     for (int v = 0; v < max_voices; ++v) {
  94              		.loc 1 33 5 is_stmt 0 discriminator 2 view .LVU18
  95 0030 0433     		adds	r3, r3, #4
  96 0032 EAE7     		b	.L5
  97              	.L6:
  33:Polyphony.cpp ****     for (int v = 0; v < max_voices; ++v) {
  98              		.loc 1 33 5 discriminator 2 view .LVU19
  99              	.LBE1030:
  35:Polyphony.cpp ****             return v;
  36:Polyphony.cpp ****         }
  37:Polyphony.cpp ****     }
  38:Polyphony.cpp ****     return -1; // Not found
 100              		.loc 1 38 13 view .LVU20
 101 0034 4FF0FF30 		mov	r0, #-1
 102              	.LVL4:
 103              	.L2:
  39:Polyphony.cpp **** }
 104              		.loc 1 39 1 view .LVU21
 105 0038 10BD     		pop	{r4, pc}
 106              	.L12:
 107 003a 00BF     		.align	2
 108              	.L11:
 109 003c 00000000 		.word	.LANCHOR0
 110 0040 00000000 		.word	.LANCHOR1
 111 0044 CDCCCC3D 		.word	1036831949
 112              		.cfi_endproc
 113              	.LFE5343:
 115              		.section	.text._Z18FindAvailableVoicei,"ax",%progbits
 116              		.align	1
 117              		.global	_Z18FindAvailableVoicei
 118              		.syntax unified
 119              		.thumb
 120              		.thumb_func
 122              	_Z18FindAvailableVoicei:
 123              	.LVL5:
 124              	.LFB5344:
  40:Polyphony.cpp **** 
  41:Polyphony.cpp **** int FindAvailableVoice(int max_voices) {
 125              		.loc 1 41 40 is_stmt 1 view -0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 129              		@ link register save eliminated.
  42:Polyphony.cpp ****     for (int v = 0; v < max_voices; ++v) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 4


 130              		.loc 1 42 5 view .LVU23
  41:Polyphony.cpp ****     for (int v = 0; v < max_voices; ++v) {
 131              		.loc 1 41 40 is_stmt 0 view .LVU24
 132 0000 0346     		mov	r3, r0
 133 0002 064A     		ldr	r2, .L21
 134              	.LBB1031:
 135              		.loc 1 42 14 view .LVU25
 136 0004 0020     		movs	r0, #0
 137              	.LVL6:
 138              	.L15:
 139              		.loc 1 42 23 is_stmt 1 discriminator 1 view .LVU26
 140 0006 9842     		cmp	r0, r3
 141 0008 04DA     		bge	.L16
  43:Polyphony.cpp ****         if (!voice_active[v]) {
 142              		.loc 1 43 9 view .LVU27
 143              		.loc 1 43 28 is_stmt 0 view .LVU28
 144 000a 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 145              		.loc 1 43 9 view .LVU29
 146 000e 19B1     		cbz	r1, .L13
  42:Polyphony.cpp ****     for (int v = 0; v < max_voices; ++v) {
 147              		.loc 1 42 5 is_stmt 1 discriminator 2 view .LVU30
 148 0010 0130     		adds	r0, r0, #1
 149              	.LVL7:
  42:Polyphony.cpp ****     for (int v = 0; v < max_voices; ++v) {
 150              		.loc 1 42 5 is_stmt 0 discriminator 2 view .LVU31
 151 0012 F8E7     		b	.L15
 152              	.L16:
  42:Polyphony.cpp ****     for (int v = 0; v < max_voices; ++v) {
 153              		.loc 1 42 5 discriminator 2 view .LVU32
 154              	.LBE1031:
  44:Polyphony.cpp ****             return v;
  45:Polyphony.cpp ****         }
  46:Polyphony.cpp ****     }
  47:Polyphony.cpp ****     return -1; // All allowed voices active
 155              		.loc 1 47 13 view .LVU33
 156 0014 4FF0FF30 		mov	r0, #-1
 157              	.LVL8:
 158              	.L13:
  48:Polyphony.cpp **** }
 159              		.loc 1 48 1 view .LVU34
 160 0018 7047     		bx	lr
 161              	.L22:
 162 001a 00BF     		.align	2
 163              	.L21:
 164 001c 00000000 		.word	.LANCHOR1
 165              		.cfi_endproc
 166              	.LFE5344:
 168              		.section	.text._Z14AssignMonoNotef,"ax",%progbits
 169              		.align	1
 170              		.global	_Z14AssignMonoNotef
 171              		.syntax unified
 172              		.thumb
 173              		.thumb_func
 175              	_Z14AssignMonoNotef:
 176              	.LVL9:
 177              	.LFB5345:
  49:Polyphony.cpp **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 5


  50:Polyphony.cpp **** void AssignMonoNote(float note) {
 178              		.loc 1 50 33 is_stmt 1 view -0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182              		@ link register save eliminated.
  51:Polyphony.cpp ****     if (voice_active[0] && fabsf(voice_note[0] - note) > 0.1f) {
 183              		.loc 1 51 5 view .LVU36
  52:Polyphony.cpp ****         voice_active[0] = false; // Mark old note for release
  53:Polyphony.cpp ****     }
  54:Polyphony.cpp ****     voice_note[0] = note;
 184              		.loc 1 54 5 view .LVU37
 185              		.loc 1 54 19 is_stmt 0 view .LVU38
 186 0000 054B     		ldr	r3, .L24
  55:Polyphony.cpp ****     voice_active[0] = true;
 187              		.loc 1 55 21 view .LVU39
 188 0002 0122     		movs	r2, #1
  54:Polyphony.cpp ****     voice_active[0] = true;
 189              		.loc 1 54 19 view .LVU40
 190 0004 83ED000A 		vstr.32	s0, [r3]
 191              		.loc 1 55 5 is_stmt 1 view .LVU41
 192              		.loc 1 55 21 is_stmt 0 view .LVU42
 193 0008 044B     		ldr	r3, .L24+4
 194 000a 1A70     		strb	r2, [r3]
  56:Polyphony.cpp ****     modulations[0].trigger = 1.0f; // Set trigger high for the new note
 195              		.loc 1 56 5 is_stmt 1 view .LVU43
 196              		.loc 1 56 28 is_stmt 0 view .LVU44
 197 000c 4FF07E52 		mov	r2, #1065353216
 198 0010 034B     		ldr	r3, .L24+8
 199 0012 9A61     		str	r2, [r3, #24]	@ float
  57:Polyphony.cpp **** }
 200              		.loc 1 57 1 view .LVU45
 201 0014 7047     		bx	lr
 202              	.L25:
 203 0016 00BF     		.align	2
 204              	.L24:
 205 0018 00000000 		.word	.LANCHOR0
 206 001c 00000000 		.word	.LANCHOR1
 207 0020 00000000 		.word	.LANCHOR2
 208              		.cfi_endproc
 209              	.LFE5345:
 211              		.section	.text._Z16InitializeVoicesv,"ax",%progbits
 212              		.align	1
 213              		.global	_Z16InitializeVoicesv
 214              		.syntax unified
 215              		.thumb
 216              		.thumb_func
 218              	_Z16InitializeVoicesv:
 219              	.LFB5346:
  58:Polyphony.cpp **** 
  59:Polyphony.cpp **** void InitializeVoices() {
 220              		.loc 1 59 25 is_stmt 1 view -0
 221              		.cfi_startproc
 222              		@ args = 0, pretend = 0, frame = 16
 223              		@ frame_needed = 0, uses_anonymous_args = 0
  60:Polyphony.cpp ****     // Initialize the allocator with the SDRAM buffer
  61:Polyphony.cpp ****     stmlib::BufferAllocator allocator(shared_buffer, sizeof(shared_buffer));
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 6


 224              		.loc 1 61 5 view .LVU47
  59:Polyphony.cpp ****     // Initialize the allocator with the SDRAM buffer
 225              		.loc 1 59 25 is_stmt 0 view .LVU48
 226 0000 2DE9FF47 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, lr}
 227              		.cfi_def_cfa_offset 48
 228              		.cfi_offset 4, -32
 229              		.cfi_offset 5, -28
 230              		.cfi_offset 6, -24
 231              		.cfi_offset 7, -20
 232              		.cfi_offset 8, -16
 233              		.cfi_offset 9, -12
 234              		.cfi_offset 10, -8
 235              		.cfi_offset 14, -4
 236              	.LVL10:
 237              	.LBB1057:
 238              	.LBI1057:
 239              		.file 2 "eurorack/stmlib/utils/buffer_allocator.h"
   1:eurorack/stmlib/utils/buffer_allocator.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/stmlib/utils/buffer_allocator.h **** //
   3:eurorack/stmlib/utils/buffer_allocator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/utils/buffer_allocator.h **** //
   5:eurorack/stmlib/utils/buffer_allocator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/utils/buffer_allocator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/utils/buffer_allocator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/utils/buffer_allocator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/utils/buffer_allocator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/utils/buffer_allocator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/utils/buffer_allocator.h **** // 
  12:eurorack/stmlib/utils/buffer_allocator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/utils/buffer_allocator.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/utils/buffer_allocator.h **** // 
  15:eurorack/stmlib/utils/buffer_allocator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/utils/buffer_allocator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/utils/buffer_allocator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/utils/buffer_allocator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/utils/buffer_allocator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/utils/buffer_allocator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/utils/buffer_allocator.h **** // THE SOFTWARE.
  22:eurorack/stmlib/utils/buffer_allocator.h **** // 
  23:eurorack/stmlib/utils/buffer_allocator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/utils/buffer_allocator.h **** //
  25:eurorack/stmlib/utils/buffer_allocator.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/utils/buffer_allocator.h **** //
  27:eurorack/stmlib/utils/buffer_allocator.h **** // Stream buffer for serialization.
  28:eurorack/stmlib/utils/buffer_allocator.h **** 
  29:eurorack/stmlib/utils/buffer_allocator.h **** #ifndef STMLIB_UTILS_BUFFER_ALLOCATOR_H_
  30:eurorack/stmlib/utils/buffer_allocator.h **** #define STMLIB_UTILS_BUFFER_ALLOCATOR_H_
  31:eurorack/stmlib/utils/buffer_allocator.h **** 
  32:eurorack/stmlib/utils/buffer_allocator.h **** #include "stmlib/stmlib.h"
  33:eurorack/stmlib/utils/buffer_allocator.h **** 
  34:eurorack/stmlib/utils/buffer_allocator.h **** namespace stmlib {
  35:eurorack/stmlib/utils/buffer_allocator.h **** 
  36:eurorack/stmlib/utils/buffer_allocator.h **** class BufferAllocator {
  37:eurorack/stmlib/utils/buffer_allocator.h ****  public:
  38:eurorack/stmlib/utils/buffer_allocator.h ****   BufferAllocator() { }
  39:eurorack/stmlib/utils/buffer_allocator.h ****   ~BufferAllocator() { }
  40:eurorack/stmlib/utils/buffer_allocator.h ****   
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 7


  41:eurorack/stmlib/utils/buffer_allocator.h ****   BufferAllocator(void* buffer, size_t size) {
 240              		.loc 2 41 3 is_stmt 1 view .LVU49
 241              	.LBE1057:
  42:eurorack/stmlib/utils/buffer_allocator.h ****     Init(buffer, size);
 242              		.loc 2 42 5 view .LVU50
 243              	.LBB1066:
 244              	.LBB1058:
 245              	.LBB1059:
 246              	.LBI1059:
  43:eurorack/stmlib/utils/buffer_allocator.h ****   }
  44:eurorack/stmlib/utils/buffer_allocator.h ****   
  45:eurorack/stmlib/utils/buffer_allocator.h ****   inline void Init(void* buffer, size_t size) {
 247              		.loc 2 45 15 view .LVU51
 248              	.LBB1060:
  46:eurorack/stmlib/utils/buffer_allocator.h ****     buffer_ = static_cast<uint8_t*>(buffer);
 249              		.loc 2 46 5 view .LVU52
 250              		.loc 2 46 13 is_stmt 0 view .LVU53
 251 0004 264A     		ldr	r2, .L29
  47:eurorack/stmlib/utils/buffer_allocator.h ****     size_ = size;
 252              		.loc 2 47 11 view .LVU54
 253 0006 4FF48023 		mov	r3, #262144
 254 000a 264F     		ldr	r7, .L29+4
 255              	.LBE1060:
 256              	.LBE1059:
 257              	.LBE1058:
 258              	.LBE1066:
 259              	.LBB1067:
  62:Polyphony.cpp **** 
  63:Polyphony.cpp ****     // Initialize Plaits Voices 
  64:Polyphony.cpp ****     for (int i = 0; i < NUM_VOICES; ++i) { // Initialize all 4 voices
 260              		.loc 1 64 14 view .LVU55
 261 000c 0026     		movs	r6, #0
 262 000e 264D     		ldr	r5, .L29+8
 263 0010 DFF8C4A0 		ldr	r10, .L29+56
 264 0014 DFF8C490 		ldr	r9, .L29+60
 265 0018 244C     		ldr	r4, .L29+12
 266 001a DFF8C480 		ldr	r8, .L29+64
 267              	.LBE1067:
 268              	.LBB1116:
 269              	.LBB1065:
 270              	.LBB1064:
 271              	.LBB1063:
  46:eurorack/stmlib/utils/buffer_allocator.h ****     size_ = size;
 272              		.loc 2 46 13 view .LVU56
 273 001e 0192     		str	r2, [sp, #4]
 274              		.loc 2 47 5 is_stmt 1 view .LVU57
 275              		.loc 2 47 11 is_stmt 0 view .LVU58
 276 0020 0393     		str	r3, [sp, #12]
  48:eurorack/stmlib/utils/buffer_allocator.h ****     Free();
 277              		.loc 2 48 5 is_stmt 1 view .LVU59
 278              	.LVL11:
 279              	.LBB1061:
 280              	.LBI1061:
  49:eurorack/stmlib/utils/buffer_allocator.h ****   }
  50:eurorack/stmlib/utils/buffer_allocator.h **** 
  51:eurorack/stmlib/utils/buffer_allocator.h ****   template<typename T>
  52:eurorack/stmlib/utils/buffer_allocator.h ****   inline T* Allocate() {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 8


  53:eurorack/stmlib/utils/buffer_allocator.h ****     return Allocate<T>(1);
  54:eurorack/stmlib/utils/buffer_allocator.h ****   }
  55:eurorack/stmlib/utils/buffer_allocator.h ****   
  56:eurorack/stmlib/utils/buffer_allocator.h ****   template<typename T>
  57:eurorack/stmlib/utils/buffer_allocator.h ****   inline T* Allocate(size_t size) {
  58:eurorack/stmlib/utils/buffer_allocator.h ****     size_t size_bytes = sizeof(T) * size;
  59:eurorack/stmlib/utils/buffer_allocator.h ****     if (size_bytes <= free_) {
  60:eurorack/stmlib/utils/buffer_allocator.h ****       T* start = static_cast<T*>(static_cast<void*>(next_));
  61:eurorack/stmlib/utils/buffer_allocator.h ****       next_ += size_bytes;
  62:eurorack/stmlib/utils/buffer_allocator.h ****       free_ -= size_bytes;
  63:eurorack/stmlib/utils/buffer_allocator.h ****       return start;
  64:eurorack/stmlib/utils/buffer_allocator.h ****     } else {
  65:eurorack/stmlib/utils/buffer_allocator.h ****       return NULL;
  66:eurorack/stmlib/utils/buffer_allocator.h ****     }
  67:eurorack/stmlib/utils/buffer_allocator.h ****   }
  68:eurorack/stmlib/utils/buffer_allocator.h ****   
  69:eurorack/stmlib/utils/buffer_allocator.h ****   inline void Free() {
 281              		.loc 2 69 15 view .LVU60
 282              	.LBB1062:
  70:eurorack/stmlib/utils/buffer_allocator.h ****     next_ = buffer_;
 283              		.loc 2 70 5 view .LVU61
 284              		.loc 2 70 11 is_stmt 0 view .LVU62
 285 0022 0092     		str	r2, [sp]
  71:eurorack/stmlib/utils/buffer_allocator.h ****     free_ = size_;
 286              		.loc 2 71 5 is_stmt 1 view .LVU63
 287              		.loc 2 71 11 is_stmt 0 view .LVU64
 288 0024 0293     		str	r3, [sp, #8]
 289              	.LVL12:
 290              		.loc 2 71 11 view .LVU65
 291              	.LBE1062:
 292              	.LBE1061:
 293              	.LBE1063:
 294              	.LBE1064:
 295              	.LBE1065:
 296              	.LBE1116:
 297              		.loc 1 64 5 is_stmt 1 view .LVU66
 298              	.LBB1117:
 299              		.loc 1 64 23 view .LVU67
 300              	.L27:
  65:Polyphony.cpp ****         voices[i].Init(&allocator);
 301              		.loc 1 65 9 discriminator 2 view .LVU68
 302              		.loc 1 65 23 is_stmt 0 discriminator 2 view .LVU69
 303 0026 224B     		ldr	r3, .L29+16
 304 0028 4FF45B60 		mov	r0, #3504
 305 002c 6946     		mov	r1, sp
  64:Polyphony.cpp ****         voices[i].Init(&allocator);
 306              		.loc 1 64 23 discriminator 2 view .LVU70
 307 002e 2837     		adds	r7, r7, #40
 308              		.loc 1 65 23 discriminator 2 view .LVU71
 309 0030 00FB0630 		mla	r0, r0, r6, r3
  64:Polyphony.cpp ****         voices[i].Init(&allocator);
 310              		.loc 1 64 5 discriminator 2 view .LVU72
 311 0034 0136     		adds	r6, r6, #1
 312              	.LVL13:
 313              		.loc 1 65 23 discriminator 2 view .LVU73
 314 0036 FFF7FEFF 		bl	_ZN6plaits5Voice4InitEPN6stmlib15BufferAllocatorE
 315              	.LVL14:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 9


  66:Polyphony.cpp ****         patches[i].engine = 0;      
 316              		.loc 1 66 9 is_stmt 1 discriminator 2 view .LVU74
 317              	.LBB1068:
 318              	.LBB1069:
 319              		.file 3 "VoiceEnvelope.h"
   1:VoiceEnvelope.h **** #pragma once
   2:VoiceEnvelope.h **** #include <algorithm>
   3:VoiceEnvelope.h **** 
   4:VoiceEnvelope.h **** // Simple envelope for each polyphonic voice
   5:VoiceEnvelope.h **** class VoiceEnvelope {
   6:VoiceEnvelope.h **** public:
   7:VoiceEnvelope.h ****     enum EnvState {
   8:VoiceEnvelope.h ****         ENV_IDLE,
   9:VoiceEnvelope.h ****         ENV_ATTACK,
  10:VoiceEnvelope.h ****         ENV_SUSTAIN,
  11:VoiceEnvelope.h ****         ENV_DECAY,
  12:VoiceEnvelope.h ****         ENV_RESET
  13:VoiceEnvelope.h ****     };
  14:VoiceEnvelope.h **** 
  15:VoiceEnvelope.h ****     enum EnvMode {
  16:VoiceEnvelope.h ****         MODE_AR,   // Attack-Release
  17:VoiceEnvelope.h ****         MODE_ASR   // Attack-Sustain-Release
  18:VoiceEnvelope.h ****     };
  19:VoiceEnvelope.h **** 
  20:VoiceEnvelope.h ****     VoiceEnvelope() :
  21:VoiceEnvelope.h ****         current_state(ENV_IDLE),
  22:VoiceEnvelope.h ****         current_value(0.0f),
  23:VoiceEnvelope.h ****         mode(MODE_ASR),
  24:VoiceEnvelope.h ****         attack_curve_coefficient(0.5f),
  25:VoiceEnvelope.h ****         release_curve_coefficient(0.5f),
  26:VoiceEnvelope.h ****         phase(0),
  27:VoiceEnvelope.h ****         decay_start_level(0.0f)
  28:VoiceEnvelope.h ****     {}
  29:VoiceEnvelope.h **** 
  30:VoiceEnvelope.h ****     void Init(float sample_rate) {
  31:VoiceEnvelope.h ****         time_range_2x = 2.0f * 4.0f * sample_rate;  // 4s max time
 320              		.loc 3 31 23 is_stmt 0 discriminator 2 view .LVU75
 321 003a 1E49     		ldr	r1, .L29+20
 322              	.LBE1069:
 323              	.LBE1068:
 324              		.loc 1 66 27 discriminator 2 view .LVU76
 325 003c 0022     		movs	r2, #0
  67:Polyphony.cpp ****         modulations[i].engine = 0; 
 326              		.loc 1 67 31 discriminator 2 view .LVU77
 327 003e 0023     		movs	r3, #0
 328              	.LBB1087:
 329              	.LBB1078:
 330              		.loc 3 31 23 discriminator 2 view .LVU78
 331 0040 2161     		str	r1, [r4, #16]	@ float
 332              	.LBE1078:
 333              	.LBE1087:
  64:Polyphony.cpp ****         voices[i].Init(&allocator);
 334              		.loc 1 64 23 discriminator 2 view .LVU79
 335 0042 042E     		cmp	r6, #4
 336              	.LBB1088:
 337              	.LBB1079:
  32:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 10


 338              		.loc 3 32 25 discriminator 2 view .LVU80
 339 0044 1C49     		ldr	r1, .L29+24
 340              	.LBE1079:
 341              	.LBE1088:
  64:Polyphony.cpp ****         voices[i].Init(&allocator);
 342              		.loc 1 64 23 discriminator 2 view .LVU81
 343 0046 05F12805 		add	r5, r5, #40
 344              	.LBB1089:
 345              	.LBB1090:
  33:VoiceEnvelope.h ****         min_decay_time_a = 0.4f * sample_rate;      // 400ms min decay A
  34:VoiceEnvelope.h ****         min_decay_time_b = 0.0001f * sample_rate;    // 0.1ms min decay B (pulse-like release)
  35:VoiceEnvelope.h ****         reset_time = 0.008f * sample_rate;          // 8ms reset time
  36:VoiceEnvelope.h ****         reset_coefficient = 1.0f / reset_time;
  37:VoiceEnvelope.h ****         
  38:VoiceEnvelope.h ****         // Default curves
  39:VoiceEnvelope.h ****         SetAttackCurve(0.5f);
  40:VoiceEnvelope.h ****         SetReleaseCurve(0.5f);
  41:VoiceEnvelope.h ****     }
  42:VoiceEnvelope.h **** 
  43:VoiceEnvelope.h ****     void SetMode(EnvMode new_mode) {
  44:VoiceEnvelope.h ****         mode = new_mode;
 346              		.loc 3 44 14 discriminator 2 view .LVU82
 347 004a 6270     		strb	r2, [r4, #1]
 348              	.LBE1090:
 349              	.LBE1089:
 350              	.LBB1092:
 351              	.LBB1080:
  32:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
 352              		.loc 3 32 25 discriminator 2 view .LVU83
 353 004c 6161     		str	r1, [r4, #20]	@ float
  33:VoiceEnvelope.h ****         min_decay_time_a = 0.4f * sample_rate;      // 400ms min decay A
 354              		.loc 3 33 26 discriminator 2 view .LVU84
 355 004e 1B49     		ldr	r1, .L29+28
 356              	.LBE1080:
 357              	.LBE1092:
  66:Polyphony.cpp ****         modulations[i].engine = 0; 
 358              		.loc 1 66 27 discriminator 2 view .LVU85
 359 0050 47F80C2C 		str	r2, [r7, #-12]
 360              		.loc 1 67 9 is_stmt 1 discriminator 2 view .LVU86
 361              	.LBB1093:
 362              	.LBB1081:
  33:VoiceEnvelope.h ****         min_decay_time_a = 0.4f * sample_rate;      // 400ms min decay A
 363              		.loc 3 33 26 is_stmt 0 discriminator 2 view .LVU87
 364 0054 A161     		str	r1, [r4, #24]	@ float
  34:VoiceEnvelope.h ****         reset_time = 0.008f * sample_rate;          // 8ms reset time
 365              		.loc 3 34 26 discriminator 2 view .LVU88
 366 0056 1A49     		ldr	r1, .L29+32
 367              	.LBE1081:
 368              	.LBE1093:
  68:Polyphony.cpp ****         modulations[i].trigger = 0.0f;
  69:Polyphony.cpp ****         modulations[i].level_patched = false; // Initialize level patched flag
 369              		.loc 1 69 38 discriminator 2 view .LVU89
 370 0058 05F8042C 		strb	r2, [r5, #-4]
 371              	.LBB1094:
 372              	.LBB1082:
  34:VoiceEnvelope.h ****         reset_time = 0.008f * sample_rate;          // 8ms reset time
 373              		.loc 3 34 26 discriminator 2 view .LVU90
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 11


 374 005c E161     		str	r1, [r4, #28]	@ float
  35:VoiceEnvelope.h ****         reset_coefficient = 1.0f / reset_time;
 375              		.loc 3 35 20 discriminator 2 view .LVU91
 376 005e 1949     		ldr	r1, .L29+36
 377              	.LBE1082:
 378              	.LBE1094:
  70:Polyphony.cpp ****         voice_active[i] = false;
 379              		.loc 1 70 25 discriminator 2 view .LVU92
 380 0060 0AF8012B 		strb	r2, [r10], #1
 381              	.LBB1095:
 382              	.LBB1083:
  35:VoiceEnvelope.h ****         reset_coefficient = 1.0f / reset_time;
 383              		.loc 3 35 20 discriminator 2 view .LVU93
 384 0064 2162     		str	r1, [r4, #32]	@ float
  36:VoiceEnvelope.h ****         
 385              		.loc 3 36 27 discriminator 2 view .LVU94
 386 0066 1849     		ldr	r1, .L29+40
 387              	.LBE1083:
 388              	.LBE1095:
 389              	.LBB1096:
 390              	.LBB1097:
 391              	.LBB1098:
  45:VoiceEnvelope.h ****     }
  46:VoiceEnvelope.h **** 
  47:VoiceEnvelope.h ****     // Original combined shape method for backward compatibility
  48:VoiceEnvelope.h ****     void SetShape(float value) {
  49:VoiceEnvelope.h ****         float curve;
  50:VoiceEnvelope.h ****         if (value < 0.5f) {
  51:VoiceEnvelope.h ****             attack_time = min_attack_time;
  52:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * value * value) + min_decay_time_a;
  53:VoiceEnvelope.h ****             curve = value * 0.15f;
  54:VoiceEnvelope.h ****         } else {
  55:VoiceEnvelope.h ****             float norm_val = 2.0f * value - 1.0f;
  56:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(time_range_2x * norm_val * norm_val) + min_attack_tim
  57:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 392              		.loc 3 57 24 discriminator 2 view .LVU95
 393 0068 184A     		ldr	r2, .L29+44
 394              	.LBE1098:
 395              	.LBE1097:
 396              	.LBE1096:
 397              	.LBB1107:
 398              	.LBB1084:
  36:VoiceEnvelope.h ****         
 399              		.loc 3 36 27 discriminator 2 view .LVU96
 400 006a 6162     		str	r1, [r4, #36]	@ float
 401              	.LBE1084:
 402              	.LBE1107:
 403              	.LBB1108:
 404              	.LBB1102:
 405              	.LBB1099:
 406              		.loc 3 57 24 discriminator 2 view .LVU97
 407 006c 4FF00901 		mov	r1, #9
 408              	.LBE1099:
 409              	.LBE1102:
 410              	.LBE1108:
 411              	.LBB1109:
 412              	.LBB1085:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 12


 413              	.LBB1070:
 414              	.LBB1071:
  58:VoiceEnvelope.h ****             curve = 0.5f;
  59:VoiceEnvelope.h ****         }
  60:VoiceEnvelope.h ****         attack_coefficient = 1.0f / attack_time;
  61:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
  62:VoiceEnvelope.h ****         SetAttackCurve(curve);
  63:VoiceEnvelope.h ****         SetReleaseCurve(curve);
  64:VoiceEnvelope.h ****     }
  65:VoiceEnvelope.h ****     
  66:VoiceEnvelope.h ****     // New methods for separate attack and release control
  67:VoiceEnvelope.h ****     void SetAttackTime(float value) {
  68:VoiceEnvelope.h ****         // Map 0-1 value to attack time (exponential scaling)
  69:VoiceEnvelope.h ****         // value³ for finer control at shorter settings
  70:VoiceEnvelope.h ****         float value_cubed = value * value * value;
  71:VoiceEnvelope.h ****         
  72:VoiceEnvelope.h ****         // Special handling for super punchy attacks at low values
  73:VoiceEnvelope.h ****         if (value < 0.1f) {
  74:VoiceEnvelope.h ****             // Extra fast attacks at the beginning of the range
  75:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(min_attack_time + 
  76:VoiceEnvelope.h ****                                            (min_attack_time * 9.0f * value / 0.1f));
  77:VoiceEnvelope.h ****         } else {
  78:VoiceEnvelope.h ****             // Normal range from 2ms to 4 seconds
  79:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(0.002f * time_range_2x/8.0f + 
  80:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
  81:VoiceEnvelope.h ****         }
  82:VoiceEnvelope.h ****         
  83:VoiceEnvelope.h ****         attack_coefficient = 1.0f / attack_time;
  84:VoiceEnvelope.h ****         
  85:VoiceEnvelope.h ****         // Make curve more exponential for faster attacks
  86:VoiceEnvelope.h ****         if (value < 0.3f) {
  87:VoiceEnvelope.h ****             // More exponential curve for punchy attacks
  88:VoiceEnvelope.h ****             SetAttackCurve(0.7f + (0.3f - value)); // 0.7 to 1.0 range for punchier curve
  89:VoiceEnvelope.h ****         } else {
  90:VoiceEnvelope.h ****             // Normal curve
  91:VoiceEnvelope.h ****             SetAttackCurve(0.5f);
  92:VoiceEnvelope.h ****         }
  93:VoiceEnvelope.h ****     }
  94:VoiceEnvelope.h ****     
  95:VoiceEnvelope.h ****     void SetReleaseTime(float value) {
  96:VoiceEnvelope.h ****         // Map 0-1 value to release time (exponential scaling)
  97:VoiceEnvelope.h ****         // value³ for finer control at shorter settings
  98:VoiceEnvelope.h ****         float value_cubed = value * value * value;
  99:VoiceEnvelope.h ****         
 100:VoiceEnvelope.h ****         // Release time ranges from min_decay_time_b to 8 seconds
 101:VoiceEnvelope.h ****         decay_time = static_cast<size_t>(min_decay_time_b + 
 102:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 103:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
 104:VoiceEnvelope.h ****         
 105:VoiceEnvelope.h ****         // Use consistent release curve regardless of release time
 106:VoiceEnvelope.h ****         SetReleaseCurve(0.5f);
 107:VoiceEnvelope.h ****     }
 108:VoiceEnvelope.h ****     
 109:VoiceEnvelope.h ****     void SetAttackCurve(float value) {
 110:VoiceEnvelope.h ****         float cu = value - 0.5f;
 111:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
 415              		.loc 3 111 34 discriminator 2 view .LVU98
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 13


 416 0070 A360     		str	r3, [r4, #8]	@ float
 417              	.LBE1071:
 418              	.LBE1070:
 419              	.LBB1073:
 420              	.LBB1074:
 112:VoiceEnvelope.h ****     }
 113:VoiceEnvelope.h ****     
 114:VoiceEnvelope.h ****     void SetReleaseCurve(float value) {
 115:VoiceEnvelope.h ****         float cu = value - 0.5f;
 116:VoiceEnvelope.h ****         release_curve_coefficient = 128.0f * cu * cu;
 421              		.loc 3 116 35 discriminator 2 view .LVU99
 422 0072 E360     		str	r3, [r4, #12]	@ float
 423              	.LBE1074:
 424              	.LBE1073:
 425              	.LBE1085:
 426              	.LBE1109:
  67:Polyphony.cpp ****         modulations[i].trigger = 0.0f;
 427              		.loc 1 67 31 discriminator 2 view .LVU100
 428 0074 45F8283C 		str	r3, [r5, #-40]	@ float
  68:Polyphony.cpp ****         modulations[i].level_patched = false; // Initialize level patched flag
 429              		.loc 1 68 9 is_stmt 1 discriminator 2 view .LVU101
  68:Polyphony.cpp ****         modulations[i].level_patched = false; // Initialize level patched flag
 430              		.loc 1 68 32 is_stmt 0 discriminator 2 view .LVU102
 431 0078 45F8103C 		str	r3, [r5, #-16]	@ float
  69:Polyphony.cpp ****         voice_active[i] = false;
 432              		.loc 1 69 9 is_stmt 1 discriminator 2 view .LVU103
 433              		.loc 1 70 9 discriminator 2 view .LVU104
  71:Polyphony.cpp ****         voice_note[i] = 0.0f;
 434              		.loc 1 71 9 discriminator 2 view .LVU105
 435              		.loc 1 71 23 is_stmt 0 discriminator 2 view .LVU106
 436 007c 49F8043B 		str	r3, [r9], #4	@ float
  72:Polyphony.cpp ****         
  73:Polyphony.cpp ****         // Initialize envelopes with proper settings
  74:Polyphony.cpp ****         voice_envelopes[i].Init(SAMPLE_RATE);
 437              		.loc 1 74 9 is_stmt 1 discriminator 2 view .LVU107
 438              	.LVL15:
 439              	.LBB1110:
 440              	.LBI1068:
  30:VoiceEnvelope.h ****         time_range_2x = 2.0f * 4.0f * sample_rate;  // 4s max time
 441              		.loc 3 30 10 discriminator 2 view .LVU108
 442              	.LBB1086:
  31:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
 443              		.loc 3 31 9 discriminator 2 view .LVU109
  32:VoiceEnvelope.h ****         min_decay_time_a = 0.4f * sample_rate;      // 400ms min decay A
 444              		.loc 3 32 9 discriminator 2 view .LVU110
  33:VoiceEnvelope.h ****         min_decay_time_b = 0.0001f * sample_rate;    // 0.1ms min decay B (pulse-like release)
 445              		.loc 3 33 9 discriminator 2 view .LVU111
  34:VoiceEnvelope.h ****         reset_time = 0.008f * sample_rate;          // 8ms reset time
 446              		.loc 3 34 9 discriminator 2 view .LVU112
  35:VoiceEnvelope.h ****         reset_coefficient = 1.0f / reset_time;
 447              		.loc 3 35 9 discriminator 2 view .LVU113
  36:VoiceEnvelope.h ****         
 448              		.loc 3 36 9 discriminator 2 view .LVU114
  39:VoiceEnvelope.h ****         SetReleaseCurve(0.5f);
 449              		.loc 3 39 9 discriminator 2 view .LVU115
 450              	.LBB1076:
 451              	.LBI1070:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 14


 109:VoiceEnvelope.h ****         float cu = value - 0.5f;
 452              		.loc 3 109 10 discriminator 2 view .LVU116
 453              	.LBB1072:
 110:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
 454              		.loc 3 110 9 discriminator 2 view .LVU117
 111:VoiceEnvelope.h ****     }
 455              		.loc 3 111 9 discriminator 2 view .LVU118
 111:VoiceEnvelope.h ****     }
 456              		.loc 3 111 9 is_stmt 0 discriminator 2 view .LVU119
 457              	.LBE1072:
 458              	.LBE1076:
  40:VoiceEnvelope.h ****     }
 459              		.loc 3 40 9 is_stmt 1 discriminator 2 view .LVU120
 460              	.LBB1077:
 461              	.LBI1073:
 114:VoiceEnvelope.h ****         float cu = value - 0.5f;
 462              		.loc 3 114 10 discriminator 2 view .LVU121
 463              	.LBB1075:
 115:VoiceEnvelope.h ****         release_curve_coefficient = 128.0f * cu * cu;
 464              		.loc 3 115 9 discriminator 2 view .LVU122
 465              		.loc 3 116 9 discriminator 2 view .LVU123
 466              		.loc 3 116 9 is_stmt 0 discriminator 2 view .LVU124
 467              	.LBE1075:
 468              	.LBE1077:
 469              	.LBE1086:
 470              	.LBE1110:
  75:Polyphony.cpp ****         voice_envelopes[i].SetMode(VoiceEnvelope::MODE_AR);  // Use AR mode (no sustain) for snappi
 471              		.loc 1 75 9 is_stmt 1 discriminator 2 view .LVU125
 472              	.LBB1111:
 473              	.LBI1089:
  43:VoiceEnvelope.h ****         mode = new_mode;
 474              		.loc 3 43 10 discriminator 2 view .LVU126
 475              	.LBB1091:
  44:VoiceEnvelope.h ****     }
 476              		.loc 3 44 9 discriminator 2 view .LVU127
  44:VoiceEnvelope.h ****     }
 477              		.loc 3 44 9 is_stmt 0 discriminator 2 view .LVU128
 478              	.LBE1091:
 479              	.LBE1111:
  76:Polyphony.cpp ****         voice_envelopes[i].SetShape(0.5f); // Start with middle curve
 480              		.loc 1 76 9 is_stmt 1 discriminator 2 view .LVU129
 481              	.LBB1112:
 482              	.LBI1096:
  48:VoiceEnvelope.h ****         float curve;
 483              		.loc 3 48 10 discriminator 2 view .LVU130
 484              	.LBB1103:
  49:VoiceEnvelope.h ****         if (value < 0.5f) {
 485              		.loc 3 49 9 discriminator 2 view .LVU131
  50:VoiceEnvelope.h ****             attack_time = min_attack_time;
 486              		.loc 3 50 9 discriminator 2 view .LVU132
 487              	.LBB1100:
  55:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(time_range_2x * norm_val * norm_val) + min_attack_tim
 488              		.loc 3 55 13 discriminator 2 view .LVU133
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 489              		.loc 3 56 13 discriminator 2 view .LVU134
 490              	.LBE1100:
 491              	.LBE1103:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 15


 492              	.LBE1112:
  77:Polyphony.cpp ****         voice_values[i] = 0.0f;
 493              		.loc 1 77 25 is_stmt 0 discriminator 2 view .LVU135
 494 0080 48F8043B 		str	r3, [r8], #4	@ float
 495              	.LBB1113:
 496              	.LBB1104:
 497              	.LBB1101:
  57:VoiceEnvelope.h ****             curve = 0.5f;
 498              		.loc 3 57 24 discriminator 2 view .LVU136
 499 0084 C4E90D12 		strd	r1, r2, [r4, #52]
  58:VoiceEnvelope.h ****         }
 500              		.loc 3 58 13 is_stmt 1 discriminator 2 view .LVU137
 501              	.LVL16:
  58:VoiceEnvelope.h ****         }
 502              		.loc 3 58 13 is_stmt 0 discriminator 2 view .LVU138
 503              	.LBE1101:
  60:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
 504              		.loc 3 60 9 is_stmt 1 discriminator 2 view .LVU139
  60:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
 505              		.loc 3 60 28 is_stmt 0 discriminator 2 view .LVU140
 506 0088 114A     		ldr	r2, .L29+48
 507              	.LBE1104:
 508              	.LBE1113:
  64:Polyphony.cpp ****         voices[i].Init(&allocator);
 509              		.loc 1 64 23 discriminator 2 view .LVU141
 510 008a 04F14404 		add	r4, r4, #68
 511              	.LBB1114:
 512              	.LBB1105:
  60:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
 513              		.loc 3 60 28 discriminator 2 view .LVU142
 514 008e 44F8182C 		str	r2, [r4, #-24]	@ float
  61:VoiceEnvelope.h ****         SetAttackCurve(curve);
 515              		.loc 3 61 9 is_stmt 1 discriminator 2 view .LVU143
  61:VoiceEnvelope.h ****         SetAttackCurve(curve);
 516              		.loc 3 61 27 is_stmt 0 discriminator 2 view .LVU144
 517 0092 104A     		ldr	r2, .L29+52
 518 0094 44F8142C 		str	r2, [r4, #-20]	@ float
  62:VoiceEnvelope.h ****         SetReleaseCurve(curve);
 519              		.loc 3 62 9 is_stmt 1 discriminator 2 view .LVU145
 520              	.LVL17:
  62:VoiceEnvelope.h ****         SetReleaseCurve(curve);
 521              		.loc 3 62 9 is_stmt 0 discriminator 2 view .LVU146
 522              	.LBE1105:
 523              	.LBE1114:
 524              	.LBE1117:
 110:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
 525              		.loc 3 110 9 is_stmt 1 discriminator 2 view .LVU147
 111:VoiceEnvelope.h ****     }
 526              		.loc 3 111 9 discriminator 2 view .LVU148
 527              	.LBB1118:
 528              	.LBB1115:
 529              	.LBB1106:
  63:VoiceEnvelope.h ****     }
 530              		.loc 3 63 9 discriminator 2 view .LVU149
  63:VoiceEnvelope.h ****     }
 531              		.loc 3 63 9 is_stmt 0 discriminator 2 view .LVU150
 532              	.LBE1106:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 16


 533              	.LBE1115:
 534              	.LBE1118:
 115:VoiceEnvelope.h ****         release_curve_coefficient = 128.0f * cu * cu;
 535              		.loc 3 115 9 is_stmt 1 discriminator 2 view .LVU151
 536              		.loc 3 116 9 discriminator 2 view .LVU152
 537              	.LBB1119:
 538              		.loc 1 77 9 discriminator 2 view .LVU153
  64:Polyphony.cpp ****         voices[i].Init(&allocator);
 539              		.loc 1 64 5 discriminator 2 view .LVU154
  64:Polyphony.cpp ****         voices[i].Init(&allocator);
 540              		.loc 1 64 23 discriminator 2 view .LVU155
 541 0098 C5D1     		bne	.L27
 542              	.LBE1119:
  78:Polyphony.cpp ****     }
  79:Polyphony.cpp **** } ...
 543              		.loc 1 79 1 is_stmt 0 view .LVU156
 544 009a 04B0     		add	sp, sp, #16
 545              		.cfi_def_cfa_offset 32
 546              		@ sp needed
 547 009c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 548              	.LVL18:
 549              	.L30:
 550              		.loc 1 79 1 view .LVU157
 551              		.align	2
 552              	.L29:
 553 00a0 00000000 		.word	shared_buffer
 554 00a4 00000000 		.word	.LANCHOR3
 555 00a8 00000000 		.word	.LANCHOR2
 556 00ac 00000000 		.word	.LANCHOR4
 557 00b0 00000000 		.word	voices
 558 00b4 0080BB48 		.word	1220247552
 559 00b8 99991941 		.word	1092196761
 560 00bc 00009646 		.word	1184235520
 561 00c0 99999940 		.word	1083808153
 562 00c4 0100C043 		.word	1136656385
 563 00c8 AAAA2A3B 		.word	992651946
 564 00cc 04650400 		.word	288004
 565 00d0 398EE33D 		.word	1038323257
 566 00d4 7F036936 		.word	912851839
 567 00d8 00000000 		.word	.LANCHOR1
 568 00dc 00000000 		.word	.LANCHOR0
 569 00e0 00000000 		.word	.LANCHOR5
 570              		.cfi_endproc
 571              	.LFE5346:
 573              		.section	.text.startup._GLOBAL__sub_I_voices,"ax",%progbits
 574              		.align	1
 575              		.syntax unified
 576              		.thumb
 577              		.thumb_func
 579              	_GLOBAL__sub_I_voices:
 580              	.LFB6066:
 581              		.loc 1 79 1 is_stmt 1 view -0
 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 0
 584              		@ frame_needed = 0, uses_anonymous_args = 0
 585              	.LBB1315:
 586              	.LBI1315:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 17


 587              		.loc 1 79 1 view .LVU159
 588              	.LVL19:
 589              	.LBB1316:
   4:Polyphony.cpp **** plaits::Voice voices[NUM_VOICES];
 590              		.loc 1 4 32 view .LVU160
 591 0000 244B     		ldr	r3, .L36
 592              	.LBE1316:
 593              	.LBE1315:
 594              		.loc 1 79 1 is_stmt 0 view .LVU161
 595 0002 0420     		movs	r0, #4
 596 0004 10B5     		push	{r4, lr}
 597              		.cfi_def_cfa_offset 8
 598              		.cfi_offset 4, -8
 599              		.cfi_offset 14, -4
 600              	.L32:
 601              	.LVL20:
 602              	.LBB1437:
 603              	.LBB1431:
 604              	.LBB1317:
 605              	.LBI1317:
 606              		.file 4 "eurorack/plaits/dsp/voice.h"
   1:eurorack/plaits/dsp/voice.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/voice.h **** //
   3:eurorack/plaits/dsp/voice.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/voice.h **** //
   5:eurorack/plaits/dsp/voice.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/voice.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/voice.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/voice.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/voice.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/voice.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/voice.h **** // 
  12:eurorack/plaits/dsp/voice.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/voice.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/voice.h **** // 
  15:eurorack/plaits/dsp/voice.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/voice.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/voice.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/voice.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/voice.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/voice.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/voice.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/voice.h **** // 
  23:eurorack/plaits/dsp/voice.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/voice.h **** //
  25:eurorack/plaits/dsp/voice.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/voice.h **** //
  27:eurorack/plaits/dsp/voice.h **** // Main synthesis voice.
  28:eurorack/plaits/dsp/voice.h **** 
  29:eurorack/plaits/dsp/voice.h **** #ifndef PLAITS_DSP_VOICE_H_
  30:eurorack/plaits/dsp/voice.h **** #define PLAITS_DSP_VOICE_H_
  31:eurorack/plaits/dsp/voice.h **** 
  32:eurorack/plaits/dsp/voice.h **** #include "stmlib/stmlib.h"
  33:eurorack/plaits/dsp/voice.h **** 
  34:eurorack/plaits/dsp/voice.h **** #include "stmlib/dsp/filter.h"
  35:eurorack/plaits/dsp/voice.h **** #include "stmlib/dsp/limiter.h"
  36:eurorack/plaits/dsp/voice.h **** #include "stmlib/utils/buffer_allocator.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 18


  37:eurorack/plaits/dsp/voice.h **** 
  38:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/additive_engine.h"
  39:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/bass_drum_engine.h"
  40:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/chord_engine.h"
  41:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/engine.h"
  42:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/fm_engine.h"
  43:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/grain_engine.h"
  44:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/hi_hat_engine.h"
  45:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/modal_engine.h"
  46:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/noise_engine.h"
  47:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/particle_engine.h"
  48:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/snare_drum_engine.h"
  49:eurorack/plaits/dsp/voice.h **** // #include "plaits/dsp/engine/speech_engine.h"
  50:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/string_engine.h"
  51:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/swarm_engine.h"
  52:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/virtual_analog_engine.h"
  53:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/waveshaping_engine.h"
  54:eurorack/plaits/dsp/voice.h **** // #include "plaits/dsp/engine/wavetable_engine.h"
  55:eurorack/plaits/dsp/voice.h **** 
  56:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/envelope.h"
  57:eurorack/plaits/dsp/voice.h **** 
  58:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/fx/low_pass_gate.h"
  59:eurorack/plaits/dsp/voice.h **** 
  60:eurorack/plaits/dsp/voice.h **** namespace plaits {
  61:eurorack/plaits/dsp/voice.h **** 
  62:eurorack/plaits/dsp/voice.h **** const int kMaxEngines = 16;
  63:eurorack/plaits/dsp/voice.h **** const int kMaxTriggerDelay = 8;
  64:eurorack/plaits/dsp/voice.h **** const int kTriggerDelay = 5;
  65:eurorack/plaits/dsp/voice.h **** 
  66:eurorack/plaits/dsp/voice.h **** class ChannelPostProcessor {
  67:eurorack/plaits/dsp/voice.h ****  public:
  68:eurorack/plaits/dsp/voice.h ****   ChannelPostProcessor() { }
  69:eurorack/plaits/dsp/voice.h ****   ~ChannelPostProcessor() { }
  70:eurorack/plaits/dsp/voice.h ****   
  71:eurorack/plaits/dsp/voice.h ****   void Init() {
  72:eurorack/plaits/dsp/voice.h ****     lpg_.Init();
  73:eurorack/plaits/dsp/voice.h ****     Reset();
  74:eurorack/plaits/dsp/voice.h ****   }
  75:eurorack/plaits/dsp/voice.h ****   
  76:eurorack/plaits/dsp/voice.h ****   void Reset() {
  77:eurorack/plaits/dsp/voice.h ****     limiter_.Init();
  78:eurorack/plaits/dsp/voice.h ****   }
  79:eurorack/plaits/dsp/voice.h ****   
  80:eurorack/plaits/dsp/voice.h ****   void Process(
  81:eurorack/plaits/dsp/voice.h ****       float gain,
  82:eurorack/plaits/dsp/voice.h ****       bool bypass_lpg,
  83:eurorack/plaits/dsp/voice.h ****       float low_pass_gate_gain,
  84:eurorack/plaits/dsp/voice.h ****       float low_pass_gate_frequency,
  85:eurorack/plaits/dsp/voice.h ****       float low_pass_gate_hf_bleed,
  86:eurorack/plaits/dsp/voice.h ****       float* in,
  87:eurorack/plaits/dsp/voice.h ****       short* out,
  88:eurorack/plaits/dsp/voice.h ****       size_t size,
  89:eurorack/plaits/dsp/voice.h ****       size_t stride) {
  90:eurorack/plaits/dsp/voice.h ****     if (gain < 0.0f) {
  91:eurorack/plaits/dsp/voice.h ****       limiter_.Process(-gain, in, size);
  92:eurorack/plaits/dsp/voice.h ****     }
  93:eurorack/plaits/dsp/voice.h ****     const float post_gain = (gain < 0.0f ? 1.0f : gain) * -32767.0f;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 19


  94:eurorack/plaits/dsp/voice.h ****     if (!bypass_lpg) {
  95:eurorack/plaits/dsp/voice.h ****       lpg_.Process(
  96:eurorack/plaits/dsp/voice.h ****           post_gain * low_pass_gate_gain,
  97:eurorack/plaits/dsp/voice.h ****           low_pass_gate_frequency,
  98:eurorack/plaits/dsp/voice.h ****           low_pass_gate_hf_bleed,
  99:eurorack/plaits/dsp/voice.h ****           in,
 100:eurorack/plaits/dsp/voice.h ****           out,
 101:eurorack/plaits/dsp/voice.h ****           size,
 102:eurorack/plaits/dsp/voice.h ****           stride);
 103:eurorack/plaits/dsp/voice.h ****     } else {
 104:eurorack/plaits/dsp/voice.h ****       while (size--) {
 105:eurorack/plaits/dsp/voice.h ****         *out = stmlib::Clip16(1 + static_cast<int32_t>(*in++ * post_gain));
 106:eurorack/plaits/dsp/voice.h ****         out += stride;
 107:eurorack/plaits/dsp/voice.h ****       }
 108:eurorack/plaits/dsp/voice.h ****     }
 109:eurorack/plaits/dsp/voice.h ****   }
 110:eurorack/plaits/dsp/voice.h ****   
 111:eurorack/plaits/dsp/voice.h ****  private:
 112:eurorack/plaits/dsp/voice.h ****   stmlib::Limiter limiter_;
 113:eurorack/plaits/dsp/voice.h ****   LowPassGate lpg_;
 114:eurorack/plaits/dsp/voice.h ****   
 115:eurorack/plaits/dsp/voice.h ****   DISALLOW_COPY_AND_ASSIGN(ChannelPostProcessor);
 116:eurorack/plaits/dsp/voice.h **** };
 117:eurorack/plaits/dsp/voice.h **** 
 118:eurorack/plaits/dsp/voice.h **** struct Patch {
 119:eurorack/plaits/dsp/voice.h ****   float note;
 120:eurorack/plaits/dsp/voice.h ****   float harmonics;
 121:eurorack/plaits/dsp/voice.h ****   float timbre;
 122:eurorack/plaits/dsp/voice.h ****   float morph;
 123:eurorack/plaits/dsp/voice.h ****   float frequency_modulation_amount;
 124:eurorack/plaits/dsp/voice.h ****   float timbre_modulation_amount;
 125:eurorack/plaits/dsp/voice.h ****   float morph_modulation_amount;
 126:eurorack/plaits/dsp/voice.h **** 
 127:eurorack/plaits/dsp/voice.h ****   int engine;
 128:eurorack/plaits/dsp/voice.h ****   float decay;
 129:eurorack/plaits/dsp/voice.h ****   float lpg_colour;
 130:eurorack/plaits/dsp/voice.h **** };
 131:eurorack/plaits/dsp/voice.h **** 
 132:eurorack/plaits/dsp/voice.h **** struct Modulations {
 133:eurorack/plaits/dsp/voice.h ****   float engine;
 134:eurorack/plaits/dsp/voice.h ****   float note;
 135:eurorack/plaits/dsp/voice.h ****   float frequency;
 136:eurorack/plaits/dsp/voice.h ****   float harmonics;
 137:eurorack/plaits/dsp/voice.h ****   float timbre;
 138:eurorack/plaits/dsp/voice.h ****   float morph;
 139:eurorack/plaits/dsp/voice.h ****   float trigger;
 140:eurorack/plaits/dsp/voice.h ****   float level;
 141:eurorack/plaits/dsp/voice.h **** 
 142:eurorack/plaits/dsp/voice.h ****   bool frequency_patched;
 143:eurorack/plaits/dsp/voice.h ****   bool timbre_patched;
 144:eurorack/plaits/dsp/voice.h ****   bool morph_patched;
 145:eurorack/plaits/dsp/voice.h ****   bool trigger_patched;
 146:eurorack/plaits/dsp/voice.h ****   bool level_patched;
 147:eurorack/plaits/dsp/voice.h **** };
 148:eurorack/plaits/dsp/voice.h **** 
 149:eurorack/plaits/dsp/voice.h **** class Voice {
 150:eurorack/plaits/dsp/voice.h ****  public:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 20


 151:eurorack/plaits/dsp/voice.h ****   Voice() { }
 607              		.loc 4 151 3 is_stmt 1 view .LVU162
 608              	.LBB1318:
 609              	.LBI1318:
 610              		.file 5 "eurorack/plaits/dsp/engine/additive_engine.h"
   1:eurorack/plaits/dsp/engine/additive_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/additive_engine.h **** //
   3:eurorack/plaits/dsp/engine/additive_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/additive_engine.h **** //
   5:eurorack/plaits/dsp/engine/additive_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/additive_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/additive_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/additive_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/additive_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/additive_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/additive_engine.h **** // 
  12:eurorack/plaits/dsp/engine/additive_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/additive_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/additive_engine.h **** // 
  15:eurorack/plaits/dsp/engine/additive_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/additive_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/additive_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/additive_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/additive_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/additive_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/additive_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/additive_engine.h **** // 
  23:eurorack/plaits/dsp/engine/additive_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/additive_engine.h **** //
  25:eurorack/plaits/dsp/engine/additive_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/additive_engine.h **** //
  27:eurorack/plaits/dsp/engine/additive_engine.h **** // Additive synthesis with 24+8 partials.
  28:eurorack/plaits/dsp/engine/additive_engine.h **** 
  29:eurorack/plaits/dsp/engine/additive_engine.h **** #ifndef PLAITS_DSP_ENGINE_ADDITIVE_ENGINE_H_
  30:eurorack/plaits/dsp/engine/additive_engine.h **** #define PLAITS_DSP_ENGINE_ADDITIVE_ENGINE_H_
  31:eurorack/plaits/dsp/engine/additive_engine.h **** 
  32:eurorack/plaits/dsp/engine/additive_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/additive_engine.h **** #include "plaits/dsp/oscillator/harmonic_oscillator.h"
  34:eurorack/plaits/dsp/engine/additive_engine.h **** 
  35:eurorack/plaits/dsp/engine/additive_engine.h **** namespace plaits {
  36:eurorack/plaits/dsp/engine/additive_engine.h ****   
  37:eurorack/plaits/dsp/engine/additive_engine.h **** const int kHarmonicBatchSize = 12;
  38:eurorack/plaits/dsp/engine/additive_engine.h **** const int kNumHarmonics = 36;
  39:eurorack/plaits/dsp/engine/additive_engine.h **** const int kNumHarmonicOscillators = kNumHarmonics / kHarmonicBatchSize;
  40:eurorack/plaits/dsp/engine/additive_engine.h **** 
  41:eurorack/plaits/dsp/engine/additive_engine.h **** class AdditiveEngine : public Engine {
  42:eurorack/plaits/dsp/engine/additive_engine.h ****  public:
  43:eurorack/plaits/dsp/engine/additive_engine.h ****   AdditiveEngine() { }
 611              		.loc 5 43 3 view .LVU163
 612              	.LBB1319:
 613              	.LBB1320:
 614              	.LBI1320:
 615              		.file 6 "eurorack/plaits/dsp/engine/engine.h"
   1:eurorack/plaits/dsp/engine/engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/engine.h **** //
   3:eurorack/plaits/dsp/engine/engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/engine.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 21


   5:eurorack/plaits/dsp/engine/engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/engine.h **** // 
  12:eurorack/plaits/dsp/engine/engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/engine.h **** // 
  15:eurorack/plaits/dsp/engine/engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/engine.h **** // 
  23:eurorack/plaits/dsp/engine/engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/engine.h **** //
  25:eurorack/plaits/dsp/engine/engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/engine.h **** //
  27:eurorack/plaits/dsp/engine/engine.h **** // Base class for all engines.
  28:eurorack/plaits/dsp/engine/engine.h **** 
  29:eurorack/plaits/dsp/engine/engine.h **** #ifndef PLAITS_DSP_ENGINE_ENGINE_H_
  30:eurorack/plaits/dsp/engine/engine.h **** #define PLAITS_DSP_ENGINE_ENGINE_H_
  31:eurorack/plaits/dsp/engine/engine.h **** 
  32:eurorack/plaits/dsp/engine/engine.h **** #include "plaits/dsp/dsp.h"
  33:eurorack/plaits/dsp/engine/engine.h **** 
  34:eurorack/plaits/dsp/engine/engine.h **** #include "stmlib/dsp/units.h"
  35:eurorack/plaits/dsp/engine/engine.h **** #include "stmlib/utils/buffer_allocator.h"
  36:eurorack/plaits/dsp/engine/engine.h **** 
  37:eurorack/plaits/dsp/engine/engine.h **** namespace plaits {
  38:eurorack/plaits/dsp/engine/engine.h **** 
  39:eurorack/plaits/dsp/engine/engine.h **** inline float NoteToFrequency(float midi_note) {
  40:eurorack/plaits/dsp/engine/engine.h ****   midi_note -= 9.0f;
  41:eurorack/plaits/dsp/engine/engine.h ****   CONSTRAIN(midi_note, -128.0f, 127.0f);
  42:eurorack/plaits/dsp/engine/engine.h ****   return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
  43:eurorack/plaits/dsp/engine/engine.h **** }
  44:eurorack/plaits/dsp/engine/engine.h **** 
  45:eurorack/plaits/dsp/engine/engine.h **** enum TriggerState {
  46:eurorack/plaits/dsp/engine/engine.h ****   TRIGGER_LOW = 0,
  47:eurorack/plaits/dsp/engine/engine.h ****   TRIGGER_RISING_EDGE = 1,
  48:eurorack/plaits/dsp/engine/engine.h ****   TRIGGER_UNPATCHED = 2,
  49:eurorack/plaits/dsp/engine/engine.h ****   TRIGGER_UNPATCHED_AUTOTRIGGED = 3,
  50:eurorack/plaits/dsp/engine/engine.h **** };
  51:eurorack/plaits/dsp/engine/engine.h **** 
  52:eurorack/plaits/dsp/engine/engine.h **** struct EngineParameters {
  53:eurorack/plaits/dsp/engine/engine.h ****   TriggerState trigger;
  54:eurorack/plaits/dsp/engine/engine.h ****   float note;
  55:eurorack/plaits/dsp/engine/engine.h ****   float timbre;
  56:eurorack/plaits/dsp/engine/engine.h ****   float morph;
  57:eurorack/plaits/dsp/engine/engine.h ****   float harmonics;
  58:eurorack/plaits/dsp/engine/engine.h ****   float accent;
  59:eurorack/plaits/dsp/engine/engine.h **** };
  60:eurorack/plaits/dsp/engine/engine.h **** 
  61:eurorack/plaits/dsp/engine/engine.h **** struct PostProcessingSettings {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 22


  62:eurorack/plaits/dsp/engine/engine.h ****   // A negative value indicates that a limiter must be used.
  63:eurorack/plaits/dsp/engine/engine.h ****   float out_gain;
  64:eurorack/plaits/dsp/engine/engine.h ****   float aux_gain;
  65:eurorack/plaits/dsp/engine/engine.h ****   
  66:eurorack/plaits/dsp/engine/engine.h ****   // When this flag is set to true, the engine declares that it will 
  67:eurorack/plaits/dsp/engine/engine.h ****   // render a signal that already has an envelope (eg: modal drum, 808 kick).
  68:eurorack/plaits/dsp/engine/engine.h ****   // By reporting this information, the synthesis voice upstream will
  69:eurorack/plaits/dsp/engine/engine.h ****   // bypass the internal envelope/LPG.
  70:eurorack/plaits/dsp/engine/engine.h ****   //
  71:eurorack/plaits/dsp/engine/engine.h ****   // This parameter can be changed on a per-call basis when calling Render()
  72:eurorack/plaits/dsp/engine/engine.h ****   // This is used by the speech synthesis engine, which renders either
  73:eurorack/plaits/dsp/engine/engine.h ****   // a continuous vowel sound (which needs to be enveloped by the LPG)
  74:eurorack/plaits/dsp/engine/engine.h ****   // or a word/sentence (which is already enveloped).
  75:eurorack/plaits/dsp/engine/engine.h ****   bool already_enveloped;
  76:eurorack/plaits/dsp/engine/engine.h **** };
  77:eurorack/plaits/dsp/engine/engine.h **** 
  78:eurorack/plaits/dsp/engine/engine.h **** class Engine {
  79:eurorack/plaits/dsp/engine/engine.h ****  public:
  80:eurorack/plaits/dsp/engine/engine.h ****   Engine() { }
 616              		.loc 6 80 3 view .LVU164
 617              		.loc 6 80 3 is_stmt 0 view .LVU165
 618              	.LBE1320:
 619              		.loc 5 43 20 view .LVU166
 620 0006 244A     		ldr	r2, .L36+4
 621              	.LBE1319:
 622              	.LBE1318:
 623              	.LBE1317:
   4:Polyphony.cpp **** plaits::Voice voices[NUM_VOICES];
 624              		.loc 1 4 32 view .LVU167
 625 0008 0138     		subs	r0, r0, #1
 626              	.LBB1419:
 627              	.LBB1322:
 628              	.LBB1321:
 629              		.loc 5 43 20 view .LVU168
 630 000a 1A60     		str	r2, [r3]
 631              		.loc 5 43 20 is_stmt 1 view .LVU169
 632              	.LVL21:
 633              		.loc 5 43 20 is_stmt 0 view .LVU170
 634              	.LBE1321:
 635              	.LBE1322:
 636              	.LBB1323:
 637              	.LBI1323:
 638              		.file 7 "eurorack/plaits/dsp/engine/bass_drum_engine.h"
   1:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/bass_drum_engine.h **** //
   3:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/bass_drum_engine.h **** //
   5:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // 
  12:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 23


  15:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // 
  23:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/bass_drum_engine.h **** //
  25:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/bass_drum_engine.h **** //
  27:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // 808 and synthetic bass drum generators.
  28:eurorack/plaits/dsp/engine/bass_drum_engine.h **** 
  29:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #ifndef PLAITS_DSP_ENGINE_BASS_DRUM_ENGINE_H_
  30:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #define PLAITS_DSP_ENGINE_BASS_DRUM_ENGINE_H_
  31:eurorack/plaits/dsp/engine/bass_drum_engine.h **** 
  32:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/drums/analog_bass_drum.h"
  33:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/drums/synthetic_bass_drum.h"
  34:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/fx/overdrive.h"
  36:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/fx/sample_rate_reducer.h"
  37:eurorack/plaits/dsp/engine/bass_drum_engine.h **** 
  38:eurorack/plaits/dsp/engine/bass_drum_engine.h **** namespace plaits {
  39:eurorack/plaits/dsp/engine/bass_drum_engine.h ****   
  40:eurorack/plaits/dsp/engine/bass_drum_engine.h **** class BassDrumEngine : public Engine {
  41:eurorack/plaits/dsp/engine/bass_drum_engine.h ****  public:
  42:eurorack/plaits/dsp/engine/bass_drum_engine.h ****   BassDrumEngine() { }
 639              		.loc 7 42 3 is_stmt 1 view .LVU171
 640              	.LBB1324:
 641              	.LBB1325:
 642              	.LBI1325:
 643              		.loc 6 80 3 view .LVU172
 644              		.loc 6 80 3 is_stmt 0 view .LVU173
 645              	.LBE1325:
 646              		.loc 7 42 20 view .LVU174
 647 000c 234A     		ldr	r2, .L36+8
 648 000e C3F84821 		str	r2, [r3, #328]
 649              	.LVL22:
 650              	.LBB1326:
 651              	.LBI1326:
 652              		.file 8 "eurorack/plaits/dsp/drums/analog_bass_drum.h"
   1:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/analog_bass_drum.h **** //
   3:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/analog_bass_drum.h **** //
   5:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // 
  12:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // 
  15:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 24


  16:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // 
  23:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/analog_bass_drum.h **** //
  25:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/analog_bass_drum.h **** //
  27:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // 808 bass drum model, revisited.
  28:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  29:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #ifndef PLAITS_DSP_DRUMS_ANALOG_BASS_DRUM_H_
  30:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #define PLAITS_DSP_DRUMS_ANALOG_BASS_DRUM_H_
  31:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  32:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include <algorithm>
  33:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  34:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "stmlib/dsp/filter.h"
  36:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "stmlib/dsp/parameter_interpolator.h"
  37:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "stmlib/dsp/units.h"
  38:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  39:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "plaits/dsp/dsp.h"
  40:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "plaits/dsp/oscillator/sine_oscillator.h"
  41:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  42:eurorack/plaits/dsp/drums/analog_bass_drum.h **** namespace plaits {
  43:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  44:eurorack/plaits/dsp/drums/analog_bass_drum.h **** class AnalogBassDrum {
  45:eurorack/plaits/dsp/drums/analog_bass_drum.h ****  public:
  46:eurorack/plaits/dsp/drums/analog_bass_drum.h ****   AnalogBassDrum() { }
 653              		.loc 8 46 3 is_stmt 1 view .LVU175
 654              	.LBB1327:
 655              	.LBI1327:
 656              		.file 9 "eurorack/stmlib/dsp/filter.h"
   1:eurorack/stmlib/dsp/filter.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/stmlib/dsp/filter.h **** //
   3:eurorack/stmlib/dsp/filter.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/dsp/filter.h **** //
   5:eurorack/stmlib/dsp/filter.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/dsp/filter.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/dsp/filter.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/dsp/filter.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/dsp/filter.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/dsp/filter.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/dsp/filter.h **** // 
  12:eurorack/stmlib/dsp/filter.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/dsp/filter.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/dsp/filter.h **** // 
  15:eurorack/stmlib/dsp/filter.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/dsp/filter.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/dsp/filter.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/dsp/filter.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/dsp/filter.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/dsp/filter.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/dsp/filter.h **** // THE SOFTWARE.
  22:eurorack/stmlib/dsp/filter.h **** // 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 25


  23:eurorack/stmlib/dsp/filter.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/dsp/filter.h **** //
  25:eurorack/stmlib/dsp/filter.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/dsp/filter.h **** //
  27:eurorack/stmlib/dsp/filter.h **** // Zero-delay-feedback filters (one pole and SVF).
  28:eurorack/stmlib/dsp/filter.h **** // Naive SVF.
  29:eurorack/stmlib/dsp/filter.h **** 
  30:eurorack/stmlib/dsp/filter.h **** #ifndef STMLIB_DSP_FILTER_H_
  31:eurorack/stmlib/dsp/filter.h **** #define STMLIB_DSP_FILTER_H_
  32:eurorack/stmlib/dsp/filter.h **** 
  33:eurorack/stmlib/dsp/filter.h **** #include "stmlib/stmlib.h"
  34:eurorack/stmlib/dsp/filter.h **** 
  35:eurorack/stmlib/dsp/filter.h **** #include <cmath>
  36:eurorack/stmlib/dsp/filter.h **** #include <algorithm>
  37:eurorack/stmlib/dsp/filter.h **** 
  38:eurorack/stmlib/dsp/filter.h **** namespace stmlib {
  39:eurorack/stmlib/dsp/filter.h **** 
  40:eurorack/stmlib/dsp/filter.h **** enum FilterMode {
  41:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_LOW_PASS,
  42:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_BAND_PASS,
  43:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_BAND_PASS_NORMALIZED,
  44:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_HIGH_PASS
  45:eurorack/stmlib/dsp/filter.h **** };
  46:eurorack/stmlib/dsp/filter.h **** 
  47:eurorack/stmlib/dsp/filter.h **** enum FrequencyApproximation {
  48:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_EXACT,
  49:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_ACCURATE,
  50:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_FAST,
  51:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_DIRTY
  52:eurorack/stmlib/dsp/filter.h **** };
  53:eurorack/stmlib/dsp/filter.h **** 
  54:eurorack/stmlib/dsp/filter.h **** #define M_PI_F float(M_PI)
  55:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_2 M_PI * M_PI
  56:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_3 M_PI_POW_2 * M_PI
  57:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_5 M_PI_POW_3 * M_PI_POW_2
  58:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_7 M_PI_POW_5 * M_PI_POW_2
  59:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_9 M_PI_POW_7 * M_PI_POW_2
  60:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_11 M_PI_POW_9 * M_PI_POW_2
  61:eurorack/stmlib/dsp/filter.h **** 
  62:eurorack/stmlib/dsp/filter.h **** class DCBlocker {
  63:eurorack/stmlib/dsp/filter.h ****  public:
  64:eurorack/stmlib/dsp/filter.h ****   DCBlocker() { }
  65:eurorack/stmlib/dsp/filter.h ****   ~DCBlocker() { }
  66:eurorack/stmlib/dsp/filter.h ****   
  67:eurorack/stmlib/dsp/filter.h ****   void Init(float pole) {
  68:eurorack/stmlib/dsp/filter.h ****     x_ = 0.0f;
  69:eurorack/stmlib/dsp/filter.h ****     y_ = 0.0f;
  70:eurorack/stmlib/dsp/filter.h ****     pole_ = pole;
  71:eurorack/stmlib/dsp/filter.h ****   }
  72:eurorack/stmlib/dsp/filter.h ****   
  73:eurorack/stmlib/dsp/filter.h ****   inline void Process(float* in_out, size_t size) {
  74:eurorack/stmlib/dsp/filter.h ****     float x = x_;
  75:eurorack/stmlib/dsp/filter.h ****     float y = y_;
  76:eurorack/stmlib/dsp/filter.h ****     const float pole = pole_;
  77:eurorack/stmlib/dsp/filter.h ****     while (size--) {
  78:eurorack/stmlib/dsp/filter.h ****       float old_x = x;
  79:eurorack/stmlib/dsp/filter.h ****       x = *in_out;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 26


  80:eurorack/stmlib/dsp/filter.h ****       *in_out++ = y = y * pole + x - old_x;
  81:eurorack/stmlib/dsp/filter.h ****     }
  82:eurorack/stmlib/dsp/filter.h ****     x_ = x;
  83:eurorack/stmlib/dsp/filter.h ****     y_ = y;
  84:eurorack/stmlib/dsp/filter.h ****   }
  85:eurorack/stmlib/dsp/filter.h ****   
  86:eurorack/stmlib/dsp/filter.h ****  private:
  87:eurorack/stmlib/dsp/filter.h ****   float pole_;
  88:eurorack/stmlib/dsp/filter.h ****   float x_;
  89:eurorack/stmlib/dsp/filter.h ****   float y_;
  90:eurorack/stmlib/dsp/filter.h **** };
  91:eurorack/stmlib/dsp/filter.h **** 
  92:eurorack/stmlib/dsp/filter.h **** class OnePole {
  93:eurorack/stmlib/dsp/filter.h ****  public:
  94:eurorack/stmlib/dsp/filter.h ****   OnePole() { }
  95:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
  96:eurorack/stmlib/dsp/filter.h ****   
  97:eurorack/stmlib/dsp/filter.h ****   void Init() {
  98:eurorack/stmlib/dsp/filter.h ****     set_f<FREQUENCY_DIRTY>(0.01f);
  99:eurorack/stmlib/dsp/filter.h ****     Reset();
 100:eurorack/stmlib/dsp/filter.h ****   }
 101:eurorack/stmlib/dsp/filter.h ****   
 102:eurorack/stmlib/dsp/filter.h ****   void Reset() {
 103:eurorack/stmlib/dsp/filter.h ****     state_ = 0.0f;
 104:eurorack/stmlib/dsp/filter.h ****   }
 105:eurorack/stmlib/dsp/filter.h ****   
 106:eurorack/stmlib/dsp/filter.h ****   template<FrequencyApproximation approximation>
 107:eurorack/stmlib/dsp/filter.h ****   static inline float tan(float f) {
 108:eurorack/stmlib/dsp/filter.h ****     if (approximation == FREQUENCY_EXACT) {
 109:eurorack/stmlib/dsp/filter.h ****       // Clip coefficient to about 100.
 110:eurorack/stmlib/dsp/filter.h ****       f = f < 0.497f ? f : 0.497f;
 111:eurorack/stmlib/dsp/filter.h ****       return tanf(M_PI_F * f);
 112:eurorack/stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_DIRTY) {
 113:eurorack/stmlib/dsp/filter.h ****       // Optimized for frequencies below 8kHz.
 114:eurorack/stmlib/dsp/filter.h ****       const float a = 3.736e-01f * M_PI_POW_3;
 115:eurorack/stmlib/dsp/filter.h ****       return f * (M_PI_F + a * f * f);
 116:eurorack/stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_FAST) {
 117:eurorack/stmlib/dsp/filter.h ****       // The usual tangent approximation uses 3.1755e-01 and 2.033e-01, but
 118:eurorack/stmlib/dsp/filter.h ****       // the coefficients used here are optimized to minimize error for the
 119:eurorack/stmlib/dsp/filter.h ****       // 16Hz to 16kHz range, with a sample rate of 48kHz.
 120:eurorack/stmlib/dsp/filter.h ****       const float a = 3.260e-01f * M_PI_POW_3;
 121:eurorack/stmlib/dsp/filter.h ****       const float b = 1.823e-01f * M_PI_POW_5;
 122:eurorack/stmlib/dsp/filter.h ****       float f2 = f * f;
 123:eurorack/stmlib/dsp/filter.h ****       return f * (M_PI_F + f2 * (a + b * f2));
 124:eurorack/stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_ACCURATE) {
 125:eurorack/stmlib/dsp/filter.h ****       // These coefficients don't need to be tweaked for the audio range.
 126:eurorack/stmlib/dsp/filter.h ****       const float a = 3.333314036e-01f * M_PI_POW_3;
 127:eurorack/stmlib/dsp/filter.h ****       const float b = 1.333923995e-01f * M_PI_POW_5;
 128:eurorack/stmlib/dsp/filter.h ****       const float c = 5.33740603e-02f * M_PI_POW_7;
 129:eurorack/stmlib/dsp/filter.h ****       const float d = 2.900525e-03f * M_PI_POW_9;
 130:eurorack/stmlib/dsp/filter.h ****       const float e = 9.5168091e-03f * M_PI_POW_11;
 131:eurorack/stmlib/dsp/filter.h ****       float f2 = f * f;
 132:eurorack/stmlib/dsp/filter.h ****       return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
 133:eurorack/stmlib/dsp/filter.h ****     }
 134:eurorack/stmlib/dsp/filter.h ****   }
 135:eurorack/stmlib/dsp/filter.h ****   
 136:eurorack/stmlib/dsp/filter.h ****   // Set frequency and resonance from true units. Various approximations
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 27


 137:eurorack/stmlib/dsp/filter.h ****   // are available to avoid the cost of tanf.
 138:eurorack/stmlib/dsp/filter.h ****   template<FrequencyApproximation approximation>
 139:eurorack/stmlib/dsp/filter.h ****   inline void set_f(float f) {
 140:eurorack/stmlib/dsp/filter.h ****     g_ = tan<approximation>(f);
 141:eurorack/stmlib/dsp/filter.h ****     gi_ = 1.0f / (1.0f + g_);
 142:eurorack/stmlib/dsp/filter.h ****   }
 143:eurorack/stmlib/dsp/filter.h ****   
 144:eurorack/stmlib/dsp/filter.h ****   template<FilterMode mode>
 145:eurorack/stmlib/dsp/filter.h ****   inline float Process(float in) {
 146:eurorack/stmlib/dsp/filter.h ****     float lp;
 147:eurorack/stmlib/dsp/filter.h ****     lp = (g_ * in + state_) * gi_;
 148:eurorack/stmlib/dsp/filter.h ****     state_ = g_ * (in - lp) + lp;
 149:eurorack/stmlib/dsp/filter.h **** 
 150:eurorack/stmlib/dsp/filter.h ****     if (mode == FILTER_MODE_LOW_PASS) {
 151:eurorack/stmlib/dsp/filter.h ****       return lp;
 152:eurorack/stmlib/dsp/filter.h ****     } else if (mode == FILTER_MODE_HIGH_PASS) {
 153:eurorack/stmlib/dsp/filter.h ****       return in - lp;
 154:eurorack/stmlib/dsp/filter.h ****     } else {
 155:eurorack/stmlib/dsp/filter.h ****       return 0.0f;
 156:eurorack/stmlib/dsp/filter.h ****     }
 157:eurorack/stmlib/dsp/filter.h ****   }
 158:eurorack/stmlib/dsp/filter.h ****   
 159:eurorack/stmlib/dsp/filter.h ****   template<FilterMode mode>
 160:eurorack/stmlib/dsp/filter.h ****   inline void Process(float* in_out, size_t size) {
 161:eurorack/stmlib/dsp/filter.h ****     while (size--) {
 162:eurorack/stmlib/dsp/filter.h ****       *in_out = Process<mode>(*in_out);
 163:eurorack/stmlib/dsp/filter.h ****       ++in_out;
 164:eurorack/stmlib/dsp/filter.h ****     }
 165:eurorack/stmlib/dsp/filter.h ****   }
 166:eurorack/stmlib/dsp/filter.h ****   
 167:eurorack/stmlib/dsp/filter.h ****  private:
 168:eurorack/stmlib/dsp/filter.h ****   float g_;
 169:eurorack/stmlib/dsp/filter.h ****   float gi_;
 170:eurorack/stmlib/dsp/filter.h ****   float state_;
 171:eurorack/stmlib/dsp/filter.h ****   
 172:eurorack/stmlib/dsp/filter.h ****   DISALLOW_COPY_AND_ASSIGN(OnePole);
 173:eurorack/stmlib/dsp/filter.h **** };
 174:eurorack/stmlib/dsp/filter.h **** 
 175:eurorack/stmlib/dsp/filter.h **** 
 176:eurorack/stmlib/dsp/filter.h **** 
 177:eurorack/stmlib/dsp/filter.h **** class Svf {
 178:eurorack/stmlib/dsp/filter.h ****  public:
 179:eurorack/stmlib/dsp/filter.h ****   Svf() { }
 657              		.loc 9 179 3 view .LVU176
 658              		.loc 9 179 3 is_stmt 0 view .LVU177
 659              	.LBE1327:
 660              	.LBB1328:
 661              	.LBI1328:
 662              		.file 10 "eurorack/plaits/dsp/oscillator/sine_oscillator.h"
   1:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 28


   9:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // Simple sine oscillator (wavetable) + fast sine oscillator (magic circle).
  28:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
  29:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // The fast implementation might glitch a bit under heavy modulations of the
  30:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // frequency.
  31:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  32:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_SINE_OSCILLATOR_H_
  33:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #define PLAITS_DSP_OSCILLATOR_SINE_OSCILLATOR_H_
  34:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  35:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #include "stmlib/dsp/dsp.h"
  36:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  37:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #include "stmlib/dsp/rsqrt.h"
  38:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  39:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #include "plaits/resources.h"
  40:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  41:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** namespace plaits {
  42:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  43:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** class SineOscillator {
  44:eurorack/plaits/dsp/oscillator/sine_oscillator.h ****  public:
  45:eurorack/plaits/dsp/oscillator/sine_oscillator.h ****   SineOscillator() { }
 663              		.loc 10 45 3 is_stmt 1 view .LVU178
 664              		.loc 10 45 3 is_stmt 0 view .LVU179
 665              	.LBE1328:
 666              	.LBE1326:
 667              	.LBB1329:
 668              	.LBI1329:
 669              		.file 11 "eurorack/plaits/dsp/drums/synthetic_bass_drum.h"
   1:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** //
   3:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** //
   5:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // 
  12:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // all copies or substantial portions of the Software.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 29


  14:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // 
  15:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // 
  23:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** //
  25:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** //
  27:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Naive bass drum model (modulated oscillator with FM + envelope).
  28:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Inadvertently 909-ish.
  29:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  30:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #ifndef PLAITS_DSP_DRUMS_SYNTHETIC_BASS_DRUM_H_
  31:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #define PLAITS_DSP_DRUMS_SYNTHETIC_BASS_DRUM_H_
  32:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  33:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "stmlib/dsp/dsp.h"
  34:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "stmlib/dsp/units.h"
  35:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "stmlib/utils/random.h"
  36:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  37:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "plaits/dsp/dsp.h"
  38:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "plaits/resources.h"
  39:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  40:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** namespace plaits {
  41:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  42:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** class SyntheticBassDrumClick {
  43:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  public:
  44:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   SyntheticBassDrumClick() { }
  45:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumClick() { }
  46:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  47:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   void Init() {
  48:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     lp_ = 0.0f;
  49:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     hp_ = 0.0f;
  50:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     filter_.Init();
  51:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  52:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   }
  53:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  54:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float Process(float in) {
  55:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     SLOPE(lp_, in, 0.5f, 0.1f);
  56:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     ONE_POLE(hp_, lp_, 0.04f);
  57:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     return filter_.Process<stmlib::FILTER_MODE_LOW_PASS>(lp_ - hp_);
  58:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   }
  59:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  60:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  private:
  61:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float lp_;
  62:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float hp_;
  63:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   stmlib::Svf filter_;
  64:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  65:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   DISALLOW_COPY_AND_ASSIGN(SyntheticBassDrumClick);
  66:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** };
  67:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  68:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** class SyntheticBassDrumAttackNoise {
  69:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  public:
  70:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   SyntheticBassDrumAttackNoise() { }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 30


  71:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumAttackNoise() { }
  72:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  73:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   void Init() {
  74:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     lp_ = 0.0f;
  75:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     hp_ = 0.0f;
  76:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   }
  77:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  78:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float Render() {
  79:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     float sample = stmlib::Random::GetFloat();
  80:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     ONE_POLE(lp_, sample, 0.05f);
  81:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     ONE_POLE(hp_, lp_, 0.005f);
  82:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     return lp_ - hp_;
  83:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   }
  84:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  85:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  private:
  86:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float lp_;
  87:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float hp_;
  88:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  89:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   DISALLOW_COPY_AND_ASSIGN(SyntheticBassDrumAttackNoise);
  90:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** };
  91:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  92:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** class SyntheticBassDrum {
  93:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  public:
  94:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   SyntheticBassDrum() { }
 670              		.loc 11 94 3 is_stmt 1 view .LVU180
 671              	.LBB1330:
 672              	.LBI1330:
  44:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumClick() { }
 673              		.loc 11 44 3 view .LVU181
 674              	.LBB1331:
 675              	.LBI1331:
 676              		.loc 9 179 3 view .LVU182
 677              		.loc 9 179 3 is_stmt 0 view .LVU183
 678              	.LBE1331:
 679              	.LBE1330:
 680              	.LBB1332:
 681              	.LBI1332:
  70:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumAttackNoise() { }
 682              		.loc 11 70 3 is_stmt 1 view .LVU184
  70:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumAttackNoise() { }
 683              		.loc 11 70 3 is_stmt 0 view .LVU185
 684              	.LBE1332:
 685              	.LBE1329:
 686              	.LBB1333:
 687              	.LBI1333:
 688              		.file 12 "eurorack/plaits/dsp/fx/overdrive.h"
   1:eurorack/plaits/dsp/fx/overdrive.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/plaits/dsp/fx/overdrive.h **** //
   3:eurorack/plaits/dsp/fx/overdrive.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/fx/overdrive.h **** //
   5:eurorack/plaits/dsp/fx/overdrive.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/fx/overdrive.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/fx/overdrive.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/fx/overdrive.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/fx/overdrive.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/fx/overdrive.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/fx/overdrive.h **** // 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 31


  12:eurorack/plaits/dsp/fx/overdrive.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/fx/overdrive.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/fx/overdrive.h **** // 
  15:eurorack/plaits/dsp/fx/overdrive.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/fx/overdrive.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/fx/overdrive.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/fx/overdrive.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/fx/overdrive.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/fx/overdrive.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/fx/overdrive.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/fx/overdrive.h **** // 
  23:eurorack/plaits/dsp/fx/overdrive.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/fx/overdrive.h **** //
  25:eurorack/plaits/dsp/fx/overdrive.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/fx/overdrive.h **** //
  27:eurorack/plaits/dsp/fx/overdrive.h **** // Distortion/overdrive.
  28:eurorack/plaits/dsp/fx/overdrive.h **** 
  29:eurorack/plaits/dsp/fx/overdrive.h **** #ifndef PLAITS_DSP_FX_OVERDRIVE_H_
  30:eurorack/plaits/dsp/fx/overdrive.h **** #define PLAITS_DSP_FX_OVERDRIVE_H_
  31:eurorack/plaits/dsp/fx/overdrive.h **** 
  32:eurorack/plaits/dsp/fx/overdrive.h **** #include <algorithm>
  33:eurorack/plaits/dsp/fx/overdrive.h **** 
  34:eurorack/plaits/dsp/fx/overdrive.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/fx/overdrive.h **** #include "stmlib/dsp/parameter_interpolator.h"
  36:eurorack/plaits/dsp/fx/overdrive.h **** 
  37:eurorack/plaits/dsp/fx/overdrive.h **** namespace plaits {
  38:eurorack/plaits/dsp/fx/overdrive.h ****   
  39:eurorack/plaits/dsp/fx/overdrive.h **** class Overdrive {
  40:eurorack/plaits/dsp/fx/overdrive.h ****  public:
  41:eurorack/plaits/dsp/fx/overdrive.h ****   Overdrive() { }
 689              		.loc 12 41 3 is_stmt 1 view .LVU186
 690              		.loc 12 41 3 is_stmt 0 view .LVU187
 691              	.LBE1333:
 692              	.LBE1324:
 693              	.LBE1323:
 694              	.LBB1334:
 695              	.LBI1334:
 696              		.file 13 "eurorack/plaits/dsp/engine/fm_engine.h"
   1:eurorack/plaits/dsp/engine/fm_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/fm_engine.h **** //
   3:eurorack/plaits/dsp/engine/fm_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/fm_engine.h **** //
   5:eurorack/plaits/dsp/engine/fm_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/fm_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/fm_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/fm_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/fm_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/fm_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/fm_engine.h **** // 
  12:eurorack/plaits/dsp/engine/fm_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/fm_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/fm_engine.h **** // 
  15:eurorack/plaits/dsp/engine/fm_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/fm_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/fm_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/fm_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/fm_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 32


  20:eurorack/plaits/dsp/engine/fm_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/fm_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/fm_engine.h **** // 
  23:eurorack/plaits/dsp/engine/fm_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/fm_engine.h **** //
  25:eurorack/plaits/dsp/engine/fm_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/fm_engine.h **** //
  27:eurorack/plaits/dsp/engine/fm_engine.h **** // Classic 2-op FM, as found in Braids, Rings and Elements.
  28:eurorack/plaits/dsp/engine/fm_engine.h **** 
  29:eurorack/plaits/dsp/engine/fm_engine.h **** #ifndef PLAITS_DSP_ENGINE_FM_ENGINE_H_
  30:eurorack/plaits/dsp/engine/fm_engine.h **** #define PLAITS_DSP_ENGINE_FM_ENGINE_H_
  31:eurorack/plaits/dsp/engine/fm_engine.h **** 
  32:eurorack/plaits/dsp/engine/fm_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/fm_engine.h **** 
  34:eurorack/plaits/dsp/engine/fm_engine.h **** namespace plaits {
  35:eurorack/plaits/dsp/engine/fm_engine.h ****   
  36:eurorack/plaits/dsp/engine/fm_engine.h **** class FMEngine : public Engine {
  37:eurorack/plaits/dsp/engine/fm_engine.h ****  public:
  38:eurorack/plaits/dsp/engine/fm_engine.h ****   FMEngine() { }
 697              		.loc 13 38 3 is_stmt 1 view .LVU188
 698              	.LBB1335:
 699              	.LBB1336:
 700              	.LBI1336:
 701              		.loc 6 80 3 view .LVU189
 702              		.loc 6 80 3 is_stmt 0 view .LVU190
 703              	.LBE1336:
 704              		.loc 13 38 14 view .LVU191
 705 0012 234A     		ldr	r2, .L36+12
 706 0014 C3F80022 		str	r2, [r3, #512]
 707              	.LVL23:
 708              		.loc 13 38 14 view .LVU192
 709              	.LBE1335:
 710              	.LBE1334:
 711              	.LBB1337:
 712              	.LBI1337:
 713              		.file 14 "eurorack/plaits/dsp/engine/grain_engine.h"
   1:eurorack/plaits/dsp/engine/grain_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/grain_engine.h **** //
   3:eurorack/plaits/dsp/engine/grain_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/grain_engine.h **** //
   5:eurorack/plaits/dsp/engine/grain_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/grain_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/grain_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/grain_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/grain_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/grain_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/grain_engine.h **** // 
  12:eurorack/plaits/dsp/engine/grain_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/grain_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/grain_engine.h **** // 
  15:eurorack/plaits/dsp/engine/grain_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/grain_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/grain_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/grain_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/grain_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/grain_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/grain_engine.h **** // THE SOFTWARE.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 33


  22:eurorack/plaits/dsp/engine/grain_engine.h **** // 
  23:eurorack/plaits/dsp/engine/grain_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/grain_engine.h **** //
  25:eurorack/plaits/dsp/engine/grain_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/grain_engine.h **** //
  27:eurorack/plaits/dsp/engine/grain_engine.h **** // Windowed sine segments.
  28:eurorack/plaits/dsp/engine/grain_engine.h **** 
  29:eurorack/plaits/dsp/engine/grain_engine.h **** #ifndef PLAITS_DSP_ENGINE_GRAIN_ENGINE_H_
  30:eurorack/plaits/dsp/engine/grain_engine.h **** #define PLAITS_DSP_ENGINE_GRAIN_ENGINE_H_
  31:eurorack/plaits/dsp/engine/grain_engine.h **** 
  32:eurorack/plaits/dsp/engine/grain_engine.h **** #include "stmlib/dsp/filter.h"
  33:eurorack/plaits/dsp/engine/grain_engine.h **** 
  34:eurorack/plaits/dsp/engine/grain_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/grain_engine.h **** #include "plaits/dsp/oscillator/grainlet_oscillator.h"
  36:eurorack/plaits/dsp/engine/grain_engine.h **** #include "plaits/dsp/oscillator/vosim_oscillator.h"
  37:eurorack/plaits/dsp/engine/grain_engine.h **** #include "plaits/dsp/oscillator/z_oscillator.h"
  38:eurorack/plaits/dsp/engine/grain_engine.h **** 
  39:eurorack/plaits/dsp/engine/grain_engine.h **** namespace plaits {
  40:eurorack/plaits/dsp/engine/grain_engine.h ****   
  41:eurorack/plaits/dsp/engine/grain_engine.h **** class GrainEngine : public Engine {
  42:eurorack/plaits/dsp/engine/grain_engine.h ****  public:
  43:eurorack/plaits/dsp/engine/grain_engine.h ****   GrainEngine() { }
 714              		.loc 14 43 3 is_stmt 1 view .LVU193
 715              	.LBB1338:
 716              	.LBB1339:
 717              	.LBI1339:
 718              		.loc 6 80 3 view .LVU194
 719              		.loc 6 80 3 is_stmt 0 view .LVU195
 720              	.LBE1339:
 721              		.loc 14 43 17 view .LVU196
 722 0018 224A     		ldr	r2, .L36+16
 723 001a C3F83822 		str	r2, [r3, #568]
 724              		.loc 14 43 17 is_stmt 1 view .LVU197
 725              	.LVL24:
 726              	.LBB1340:
 727              	.LBI1340:
 728              		.file 15 "eurorack/plaits/dsp/oscillator/z_oscillator.h"
   1:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/z_oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/z_oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 34


  21:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/z_oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/z_oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // Sinewave multiplied by and sync'ed to a carrier.
  28:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  29:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_Z_OSCILLATOR_H_
  30:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #define PLAITS_DSP_OSCILLATOR_Z_OSCILLATOR_H_
  31:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  32:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include <algorithm>
  33:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  34:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  36:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include "stmlib/dsp/polyblep.h"
  37:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  38:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include "plaits/resources.h"
  39:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  40:eurorack/plaits/dsp/oscillator/z_oscillator.h **** namespace plaits {
  41:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  42:eurorack/plaits/dsp/oscillator/z_oscillator.h **** class ZOscillator {
  43:eurorack/plaits/dsp/oscillator/z_oscillator.h ****  public:
  44:eurorack/plaits/dsp/oscillator/z_oscillator.h ****   ZOscillator() { }
 729              		.loc 15 44 3 view .LVU198
 730              		.loc 15 44 3 is_stmt 0 view .LVU199
 731              	.LBE1340:
 732              		.loc 14 43 17 is_stmt 1 view .LVU200
 733              		.loc 14 43 17 is_stmt 0 view .LVU201
 734              	.LBE1338:
 735              	.LBE1337:
 736              	.LBB1341:
 737              	.LBI1341:
 738              		.file 16 "eurorack/plaits/dsp/engine/hi_hat_engine.h"
   1:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/hi_hat_engine.h **** //
   3:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/hi_hat_engine.h **** //
   5:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // 
  12:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // 
  15:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // 
  23:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 35


  24:eurorack/plaits/dsp/engine/hi_hat_engine.h **** //
  25:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/hi_hat_engine.h **** //
  27:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // 808-style HH with two noise sources - one faithful to the original, the other
  28:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // more metallic.
  29:eurorack/plaits/dsp/engine/hi_hat_engine.h **** 
  30:eurorack/plaits/dsp/engine/hi_hat_engine.h **** #ifndef PLAITS_DSP_ENGINE_HI_HAT_ENGINE_H_
  31:eurorack/plaits/dsp/engine/hi_hat_engine.h **** #define PLAITS_DSP_ENGINE_HI_HAT_ENGINE_H_
  32:eurorack/plaits/dsp/engine/hi_hat_engine.h **** 
  33:eurorack/plaits/dsp/engine/hi_hat_engine.h **** #include "plaits/dsp/drums/hi_hat.h"
  34:eurorack/plaits/dsp/engine/hi_hat_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/hi_hat_engine.h **** 
  36:eurorack/plaits/dsp/engine/hi_hat_engine.h **** namespace plaits {
  37:eurorack/plaits/dsp/engine/hi_hat_engine.h ****   
  38:eurorack/plaits/dsp/engine/hi_hat_engine.h **** class HiHatEngine : public Engine {
  39:eurorack/plaits/dsp/engine/hi_hat_engine.h ****  public:
  40:eurorack/plaits/dsp/engine/hi_hat_engine.h ****   HiHatEngine() { }
 739              		.loc 16 40 3 is_stmt 1 view .LVU202
 740              	.LBB1342:
 741              	.LBB1343:
 742              	.LBI1343:
 743              		.loc 6 80 3 view .LVU203
 744              		.loc 6 80 3 is_stmt 0 view .LVU204
 745              	.LBE1343:
 746              		.loc 16 40 17 view .LVU205
 747 001e 224A     		ldr	r2, .L36+20
 748 0020 C3F8BC22 		str	r2, [r3, #700]
 749              	.LVL25:
 750              	.LBB1344:
 751              	.LBI1344:
 752              		.file 17 "eurorack/plaits/dsp/drums/hi_hat.h"
   1:eurorack/plaits/dsp/drums/hi_hat.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/hi_hat.h **** //
   3:eurorack/plaits/dsp/drums/hi_hat.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/hi_hat.h **** //
   5:eurorack/plaits/dsp/drums/hi_hat.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/hi_hat.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/hi_hat.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/hi_hat.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/hi_hat.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/hi_hat.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/hi_hat.h **** // 
  12:eurorack/plaits/dsp/drums/hi_hat.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/hi_hat.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/hi_hat.h **** // 
  15:eurorack/plaits/dsp/drums/hi_hat.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/hi_hat.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/hi_hat.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/hi_hat.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/hi_hat.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/hi_hat.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/hi_hat.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/hi_hat.h **** // 
  23:eurorack/plaits/dsp/drums/hi_hat.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/hi_hat.h **** //
  25:eurorack/plaits/dsp/drums/hi_hat.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/hi_hat.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 36


  27:eurorack/plaits/dsp/drums/hi_hat.h **** // 808 HH, with a few extra parameters to push things to the CY territory...
  28:eurorack/plaits/dsp/drums/hi_hat.h **** // The template parameter MetallicNoiseSource allows another kind of "metallic
  29:eurorack/plaits/dsp/drums/hi_hat.h **** // noise" to be used, for results which are more similar to KR-55 or FM hi-hats.
  30:eurorack/plaits/dsp/drums/hi_hat.h **** 
  31:eurorack/plaits/dsp/drums/hi_hat.h **** #ifndef PLAITS_DSP_DRUMS_HI_HAT_H_
  32:eurorack/plaits/dsp/drums/hi_hat.h **** #define PLAITS_DSP_DRUMS_HI_HAT_H_
  33:eurorack/plaits/dsp/drums/hi_hat.h **** 
  34:eurorack/plaits/dsp/drums/hi_hat.h **** #include <algorithm>
  35:eurorack/plaits/dsp/drums/hi_hat.h **** 
  36:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/dsp/dsp.h"
  37:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/dsp/filter.h"
  38:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/dsp/parameter_interpolator.h"
  39:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/dsp/units.h"
  40:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/utils/random.h"
  41:eurorack/plaits/dsp/drums/hi_hat.h **** 
  42:eurorack/plaits/dsp/drums/hi_hat.h **** #include "plaits/dsp/dsp.h"
  43:eurorack/plaits/dsp/drums/hi_hat.h **** #include "plaits/dsp/oscillator/oscillator.h"
  44:eurorack/plaits/dsp/drums/hi_hat.h **** 
  45:eurorack/plaits/dsp/drums/hi_hat.h **** namespace plaits {
  46:eurorack/plaits/dsp/drums/hi_hat.h **** 
  47:eurorack/plaits/dsp/drums/hi_hat.h **** // 808 style "metallic noise" with 6 square oscillators.
  48:eurorack/plaits/dsp/drums/hi_hat.h **** class SquareNoise {
  49:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
  50:eurorack/plaits/dsp/drums/hi_hat.h ****   SquareNoise() { }
  51:eurorack/plaits/dsp/drums/hi_hat.h ****   ~SquareNoise() { }
  52:eurorack/plaits/dsp/drums/hi_hat.h **** 
  53:eurorack/plaits/dsp/drums/hi_hat.h ****   void Init() {
  54:eurorack/plaits/dsp/drums/hi_hat.h ****     std::fill(&phase_[0], &phase_[6], 0);
  55:eurorack/plaits/dsp/drums/hi_hat.h ****   }
  56:eurorack/plaits/dsp/drums/hi_hat.h ****     
  57:eurorack/plaits/dsp/drums/hi_hat.h ****   void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
  58:eurorack/plaits/dsp/drums/hi_hat.h ****     const float ratios[6] = {
  59:eurorack/plaits/dsp/drums/hi_hat.h ****         // Nominal f0: 414 Hz
  60:eurorack/plaits/dsp/drums/hi_hat.h ****         1.0f, 1.304f, 1.466f, 1.787f, 1.932f, 2.536f
  61:eurorack/plaits/dsp/drums/hi_hat.h ****     };
  62:eurorack/plaits/dsp/drums/hi_hat.h ****   
  63:eurorack/plaits/dsp/drums/hi_hat.h ****     uint32_t increment[6];
  64:eurorack/plaits/dsp/drums/hi_hat.h ****     uint32_t phase[6];
  65:eurorack/plaits/dsp/drums/hi_hat.h ****     for (int i = 0; i < 6; ++i) {
  66:eurorack/plaits/dsp/drums/hi_hat.h ****       float f = f0 * ratios[i];
  67:eurorack/plaits/dsp/drums/hi_hat.h ****       if (f >= 0.499f) f = 0.499f;
  68:eurorack/plaits/dsp/drums/hi_hat.h ****       increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
  69:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[i] = phase_[i];
  70:eurorack/plaits/dsp/drums/hi_hat.h ****     }
  71:eurorack/plaits/dsp/drums/hi_hat.h **** 
  72:eurorack/plaits/dsp/drums/hi_hat.h ****     while (size--) {
  73:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[0] += increment[0];
  74:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[1] += increment[1];
  75:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[2] += increment[2];
  76:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[3] += increment[3];
  77:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[4] += increment[4];
  78:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[5] += increment[5];
  79:eurorack/plaits/dsp/drums/hi_hat.h ****       uint32_t noise = 0;
  80:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[0] >> 31);
  81:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[1] >> 31);
  82:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[2] >> 31);
  83:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[3] >> 31);
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 37


  84:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[4] >> 31);
  85:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[5] >> 31);
  86:eurorack/plaits/dsp/drums/hi_hat.h ****       *out++ = 0.33f * static_cast<float>(noise) - 1.0f;
  87:eurorack/plaits/dsp/drums/hi_hat.h ****     }
  88:eurorack/plaits/dsp/drums/hi_hat.h ****   
  89:eurorack/plaits/dsp/drums/hi_hat.h ****     for (int i = 0; i < 6; ++i) {
  90:eurorack/plaits/dsp/drums/hi_hat.h ****       phase_[i] = phase[i];
  91:eurorack/plaits/dsp/drums/hi_hat.h ****     }
  92:eurorack/plaits/dsp/drums/hi_hat.h ****   }
  93:eurorack/plaits/dsp/drums/hi_hat.h **** 
  94:eurorack/plaits/dsp/drums/hi_hat.h ****  private:
  95:eurorack/plaits/dsp/drums/hi_hat.h ****   uint32_t phase_[6];
  96:eurorack/plaits/dsp/drums/hi_hat.h **** 
  97:eurorack/plaits/dsp/drums/hi_hat.h ****   DISALLOW_COPY_AND_ASSIGN(SquareNoise);
  98:eurorack/plaits/dsp/drums/hi_hat.h **** };
  99:eurorack/plaits/dsp/drums/hi_hat.h **** 
 100:eurorack/plaits/dsp/drums/hi_hat.h **** class RingModNoise {
 101:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
 102:eurorack/plaits/dsp/drums/hi_hat.h ****   RingModNoise() { }
 103:eurorack/plaits/dsp/drums/hi_hat.h ****   ~RingModNoise() { }
 104:eurorack/plaits/dsp/drums/hi_hat.h **** 
 105:eurorack/plaits/dsp/drums/hi_hat.h ****   void Init() {
 106:eurorack/plaits/dsp/drums/hi_hat.h ****     for (int i = 0; i < 6; ++i) {
 107:eurorack/plaits/dsp/drums/hi_hat.h ****       oscillator_[i].Init();
 108:eurorack/plaits/dsp/drums/hi_hat.h ****     }
 109:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 110:eurorack/plaits/dsp/drums/hi_hat.h ****   
 111:eurorack/plaits/dsp/drums/hi_hat.h ****   void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
 112:eurorack/plaits/dsp/drums/hi_hat.h ****     const float ratio = f0 / (0.01f + f0);
 113:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f1a = 200.0f / kSampleRate * ratio;
 114:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f1b = 7530.0f / kSampleRate * ratio;
 115:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f2a = 510.0f / kSampleRate * ratio;
 116:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f2b = 8075.0f / kSampleRate * ratio;
 117:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f3a = 730.0f / kSampleRate * ratio;
 118:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f3b = 10500.0f / kSampleRate * ratio;
 119:eurorack/plaits/dsp/drums/hi_hat.h ****     
 120:eurorack/plaits/dsp/drums/hi_hat.h ****     std::fill(&out[0], &out[size], 0.0f);
 121:eurorack/plaits/dsp/drums/hi_hat.h ****     
 122:eurorack/plaits/dsp/drums/hi_hat.h ****     RenderPair(&oscillator_[0], f1a, f1b, temp_1, temp_2, out, size);
 123:eurorack/plaits/dsp/drums/hi_hat.h ****     RenderPair(&oscillator_[2], f2a, f2b, temp_1, temp_2, out, size);
 124:eurorack/plaits/dsp/drums/hi_hat.h ****     RenderPair(&oscillator_[4], f3a, f3b, temp_1, temp_2, out, size);
 125:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 126:eurorack/plaits/dsp/drums/hi_hat.h **** 
 127:eurorack/plaits/dsp/drums/hi_hat.h ****  private:
 128:eurorack/plaits/dsp/drums/hi_hat.h ****   void RenderPair(
 129:eurorack/plaits/dsp/drums/hi_hat.h ****       Oscillator* osc,
 130:eurorack/plaits/dsp/drums/hi_hat.h ****       float f1,
 131:eurorack/plaits/dsp/drums/hi_hat.h ****       float f2,
 132:eurorack/plaits/dsp/drums/hi_hat.h ****       float* temp_1,
 133:eurorack/plaits/dsp/drums/hi_hat.h ****       float* temp_2,
 134:eurorack/plaits/dsp/drums/hi_hat.h ****       float* out,
 135:eurorack/plaits/dsp/drums/hi_hat.h ****       size_t size) {
 136:eurorack/plaits/dsp/drums/hi_hat.h ****     osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
 137:eurorack/plaits/dsp/drums/hi_hat.h ****     osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
 138:eurorack/plaits/dsp/drums/hi_hat.h ****     while (size--) {
 139:eurorack/plaits/dsp/drums/hi_hat.h ****       *out++ += *temp_1++ * *temp_2++;
 140:eurorack/plaits/dsp/drums/hi_hat.h ****     }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 38


 141:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 142:eurorack/plaits/dsp/drums/hi_hat.h ****   Oscillator oscillator_[6];
 143:eurorack/plaits/dsp/drums/hi_hat.h ****   
 144:eurorack/plaits/dsp/drums/hi_hat.h ****   DISALLOW_COPY_AND_ASSIGN(RingModNoise);
 145:eurorack/plaits/dsp/drums/hi_hat.h **** };
 146:eurorack/plaits/dsp/drums/hi_hat.h **** 
 147:eurorack/plaits/dsp/drums/hi_hat.h **** class SwingVCA {
 148:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
 149:eurorack/plaits/dsp/drums/hi_hat.h ****   float operator()(float s, float gain) {
 150:eurorack/plaits/dsp/drums/hi_hat.h ****    s *= s > 0.0f ? 10.0f : 0.1f;
 151:eurorack/plaits/dsp/drums/hi_hat.h ****    s = s / (1.0f + fabsf(s));
 152:eurorack/plaits/dsp/drums/hi_hat.h ****    return (s + 1.0f) * gain;
 153:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 154:eurorack/plaits/dsp/drums/hi_hat.h **** };
 155:eurorack/plaits/dsp/drums/hi_hat.h **** 
 156:eurorack/plaits/dsp/drums/hi_hat.h **** class LinearVCA {
 157:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
 158:eurorack/plaits/dsp/drums/hi_hat.h ****   float operator()(float s, float gain) {
 159:eurorack/plaits/dsp/drums/hi_hat.h ****    return s * gain;
 160:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 161:eurorack/plaits/dsp/drums/hi_hat.h **** };
 162:eurorack/plaits/dsp/drums/hi_hat.h **** 
 163:eurorack/plaits/dsp/drums/hi_hat.h **** template<typename MetallicNoiseSource, typename VCA, bool resonance>
 164:eurorack/plaits/dsp/drums/hi_hat.h **** class HiHat {
 165:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
 166:eurorack/plaits/dsp/drums/hi_hat.h ****   HiHat() { }
 753              		.loc 17 166 3 is_stmt 1 view .LVU206
 754              	.LBB1345:
 755              	.LBI1345:
  50:eurorack/plaits/dsp/drums/hi_hat.h ****   ~SquareNoise() { }
 756              		.loc 17 50 3 view .LVU207
  50:eurorack/plaits/dsp/drums/hi_hat.h ****   ~SquareNoise() { }
 757              		.loc 17 50 3 is_stmt 0 view .LVU208
 758              	.LBE1345:
 759              	.LBB1346:
 760              	.LBI1346:
 761              		.loc 9 179 3 is_stmt 1 view .LVU209
 762              		.loc 9 179 3 is_stmt 0 view .LVU210
 763              	.LBE1346:
 764              	.LBB1347:
 765              	.LBI1347:
 766              		.loc 9 179 3 is_stmt 1 view .LVU211
 767              		.loc 9 179 3 is_stmt 0 view .LVU212
 768              	.LBE1347:
 769              	.LBE1344:
 770              	.LBB1348:
 771              	.LBI1348:
 772              		.loc 17 166 3 is_stmt 1 view .LVU213
 773              	.LBB1349:
 774              	.LBI1349:
 102:eurorack/plaits/dsp/drums/hi_hat.h ****   ~RingModNoise() { }
 775              		.loc 17 102 3 view .LVU214
 776              	.LBE1349:
 777              	.LBE1348:
 778              	.LBE1342:
 779              	.LBE1341:
 780              	.LBE1419:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 39


 781              	.LBE1431:
 782              	.LBE1437:
 102:eurorack/plaits/dsp/drums/hi_hat.h ****   ~RingModNoise() { }
 783              		.loc 17 102 18 view .LVU215
 784              	.LBB1438:
 785              	.LBB1432:
 786              	.LBB1420:
 787              	.LBB1354:
 788              	.LBB1353:
 789              	.LBB1352:
 790              	.LBB1350:
 791              	.LBI1350:
 792              		.loc 9 179 3 view .LVU216
 793              		.loc 9 179 3 is_stmt 0 view .LVU217
 794              	.LBE1350:
 795              	.LBB1351:
 796              	.LBI1351:
 797              		.loc 9 179 3 is_stmt 1 view .LVU218
 798              		.loc 9 179 3 is_stmt 0 view .LVU219
 799              	.LBE1351:
 800              	.LBE1352:
 801              	.LBE1353:
 802              	.LBE1354:
 803              	.LBB1355:
 804              	.LBI1355:
 805              		.file 18 "eurorack/plaits/dsp/engine/modal_engine.h"
   1:eurorack/plaits/dsp/engine/modal_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/modal_engine.h **** //
   3:eurorack/plaits/dsp/engine/modal_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/modal_engine.h **** //
   5:eurorack/plaits/dsp/engine/modal_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/modal_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/modal_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/modal_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/modal_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/modal_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/modal_engine.h **** // 
  12:eurorack/plaits/dsp/engine/modal_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/modal_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/modal_engine.h **** // 
  15:eurorack/plaits/dsp/engine/modal_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/modal_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/modal_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/modal_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/modal_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/modal_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/modal_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/modal_engine.h **** // 
  23:eurorack/plaits/dsp/engine/modal_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/modal_engine.h **** //
  25:eurorack/plaits/dsp/engine/modal_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/modal_engine.h **** //
  27:eurorack/plaits/dsp/engine/modal_engine.h **** // One voice of modal synthesis.
  28:eurorack/plaits/dsp/engine/modal_engine.h **** 
  29:eurorack/plaits/dsp/engine/modal_engine.h **** #ifndef PLAITS_DSP_ENGINE_MODAL_ENGINE_H_
  30:eurorack/plaits/dsp/engine/modal_engine.h **** #define PLAITS_DSP_ENGINE_MODAL_ENGINE_H_
  31:eurorack/plaits/dsp/engine/modal_engine.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 40


  32:eurorack/plaits/dsp/engine/modal_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/modal_engine.h **** #include "plaits/dsp/physical_modelling/modal_voice.h"
  34:eurorack/plaits/dsp/engine/modal_engine.h **** 
  35:eurorack/plaits/dsp/engine/modal_engine.h **** namespace plaits {
  36:eurorack/plaits/dsp/engine/modal_engine.h **** 
  37:eurorack/plaits/dsp/engine/modal_engine.h **** class ModalEngine : public Engine {
  38:eurorack/plaits/dsp/engine/modal_engine.h ****  public:
  39:eurorack/plaits/dsp/engine/modal_engine.h ****   ModalEngine() { }
 806              		.loc 18 39 3 is_stmt 1 view .LVU220
 807              	.LBB1356:
 808              	.LBB1357:
 809              	.LBI1357:
 810              		.loc 6 80 3 view .LVU221
 811              		.loc 6 80 3 is_stmt 0 view .LVU222
 812              	.LBE1357:
 813              		.loc 18 39 17 view .LVU223
 814 0024 214A     		ldr	r2, .L36+24
 815 0026 C3F80424 		str	r2, [r3, #1028]
 816              	.LVL26:
 817              	.LBB1358:
 818              	.LBI1358:
 819              		.file 19 "eurorack/plaits/dsp/physical_modelling/modal_voice.h"
   1:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** //
   3:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** //
   5:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // 
  12:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // 
  15:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // 
  23:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** //
  25:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** //
  27:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // Simple modal synthesis voice with a mallet exciter:
  28:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // click -> LPF -> resonator.
  29:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // 
  30:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // The click is replaced by continuous white noise when the trigger input
  31:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // of the module is not patched.
  32:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** 
  33:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** #ifndef PLAITS_DSP_PHYSICAL_MODELLING_MODAL_VOICE_H_
  34:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** #define PLAITS_DSP_PHYSICAL_MODELLING_MODAL_VOICE_H_
  35:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 41


  36:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** #include "plaits/dsp/physical_modelling/resonator.h"
  37:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** 
  38:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** namespace plaits {
  39:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** 
  40:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** class ModalVoice {
  41:eurorack/plaits/dsp/physical_modelling/modal_voice.h ****  public:
  42:eurorack/plaits/dsp/physical_modelling/modal_voice.h ****   ModalVoice() { }
 820              		.loc 19 42 3 is_stmt 1 view .LVU224
 821              	.LBB1359:
 822              	.LBI1359:
 823              		.file 20 "eurorack/plaits/dsp/physical_modelling/resonator.h"
   1:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
   3:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
   5:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/physical_modelling/resonator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/physical_modelling/resonator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/physical_modelling/resonator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/physical_modelling/resonator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/physical_modelling/resonator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/physical_modelling/resonator.h **** // 
  12:eurorack/plaits/dsp/physical_modelling/resonator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/physical_modelling/resonator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/physical_modelling/resonator.h **** // 
  15:eurorack/plaits/dsp/physical_modelling/resonator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/physical_modelling/resonator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/physical_modelling/resonator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/physical_modelling/resonator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/physical_modelling/resonator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/physical_modelling/resonator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/physical_modelling/resonator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/physical_modelling/resonator.h **** // 
  23:eurorack/plaits/dsp/physical_modelling/resonator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
  25:eurorack/plaits/dsp/physical_modelling/resonator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
  27:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Resonator, taken from Rings' code but with fixed position.
  28:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  29:eurorack/plaits/dsp/physical_modelling/resonator.h **** #ifndef PLAITS_DSP_PHYSICAL_MODELLING_RESONATOR_H_
  30:eurorack/plaits/dsp/physical_modelling/resonator.h **** #define PLAITS_DSP_PHYSICAL_MODELLING_RESONATOR_H_
  31:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  32:eurorack/plaits/dsp/physical_modelling/resonator.h **** #include "stmlib/dsp/filter.h"
  33:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  34:eurorack/plaits/dsp/physical_modelling/resonator.h **** namespace plaits {
  35:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  36:eurorack/plaits/dsp/physical_modelling/resonator.h **** const int kMaxNumModes = 24;
  37:eurorack/plaits/dsp/physical_modelling/resonator.h **** const int kModeBatchSize = 4;
  38:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  39:eurorack/plaits/dsp/physical_modelling/resonator.h **** // We render 4 modes simultaneously since there are enough registers to hold
  40:eurorack/plaits/dsp/physical_modelling/resonator.h **** // all state variables.
  41:eurorack/plaits/dsp/physical_modelling/resonator.h **** template<int batch_size>
  42:eurorack/plaits/dsp/physical_modelling/resonator.h **** class ResonatorSvf {
  43:eurorack/plaits/dsp/physical_modelling/resonator.h ****  public:
  44:eurorack/plaits/dsp/physical_modelling/resonator.h ****   ResonatorSvf() { }
 824              		.loc 20 44 3 view .LVU225
 825              		.loc 20 44 3 is_stmt 0 view .LVU226
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 42


 826              	.LBE1359:
 827              	.LBB1360:
 828              	.LBI1360:
  45:eurorack/plaits/dsp/physical_modelling/resonator.h ****   ~ResonatorSvf() { }
  46:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
  47:eurorack/plaits/dsp/physical_modelling/resonator.h ****   void Init() {
  48:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
  49:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1_[i] = state_2_[i] = 0.0f;
  50:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  51:eurorack/plaits/dsp/physical_modelling/resonator.h ****   }
  52:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
  53:eurorack/plaits/dsp/physical_modelling/resonator.h ****   template<stmlib::FilterMode mode, bool add>
  54:eurorack/plaits/dsp/physical_modelling/resonator.h ****   void Process(
  55:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* f,
  56:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* q,
  57:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* gain,
  58:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* in,
  59:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float* out,
  60:eurorack/plaits/dsp/physical_modelling/resonator.h ****       size_t size) {
  61:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float g[batch_size];
  62:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float r[batch_size];
  63:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float r_plus_g[batch_size];
  64:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float h[batch_size];
  65:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float state_1[batch_size];
  66:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float state_2[batch_size];
  67:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float gains[batch_size];
  68:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
  69:eurorack/plaits/dsp/physical_modelling/resonator.h ****       g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
  70:eurorack/plaits/dsp/physical_modelling/resonator.h ****       r[i] = 1.0f / q[i];
  71:eurorack/plaits/dsp/physical_modelling/resonator.h ****       h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
  72:eurorack/plaits/dsp/physical_modelling/resonator.h ****       r_plus_g[i] = r[i] + g[i];
  73:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1[i] = state_1_[i];
  74:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_2[i] = state_2_[i];
  75:eurorack/plaits/dsp/physical_modelling/resonator.h ****       gains[i] = gain[i];
  76:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  77:eurorack/plaits/dsp/physical_modelling/resonator.h ****     
  78:eurorack/plaits/dsp/physical_modelling/resonator.h ****     while (size--) {
  79:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float s_in = *in++;
  80:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float s_out = 0.0f;
  81:eurorack/plaits/dsp/physical_modelling/resonator.h ****       for (int i = 0; i < batch_size; ++i) {
  82:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
  83:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float bp = g[i] * hp + state_1[i];
  84:eurorack/plaits/dsp/physical_modelling/resonator.h ****         state_1[i] = g[i] * hp + bp;
  85:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float lp = g[i] * bp + state_2[i];
  86:eurorack/plaits/dsp/physical_modelling/resonator.h ****         state_2[i] = g[i] * bp + lp;
  87:eurorack/plaits/dsp/physical_modelling/resonator.h ****         s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
  88:eurorack/plaits/dsp/physical_modelling/resonator.h ****       }
  89:eurorack/plaits/dsp/physical_modelling/resonator.h ****       if (add) {
  90:eurorack/plaits/dsp/physical_modelling/resonator.h ****         *out++ += s_out;
  91:eurorack/plaits/dsp/physical_modelling/resonator.h ****       } else {
  92:eurorack/plaits/dsp/physical_modelling/resonator.h ****         *out++ = s_out;
  93:eurorack/plaits/dsp/physical_modelling/resonator.h ****       }
  94:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  95:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
  96:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1_[i] = state_1[i];
  97:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_2_[i] = state_2[i];
  98:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 43


  99:eurorack/plaits/dsp/physical_modelling/resonator.h ****   }
 100:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
 101:eurorack/plaits/dsp/physical_modelling/resonator.h ****  private:
 102:eurorack/plaits/dsp/physical_modelling/resonator.h ****   float state_1_[batch_size];
 103:eurorack/plaits/dsp/physical_modelling/resonator.h ****   float state_2_[batch_size];
 104:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
 105:eurorack/plaits/dsp/physical_modelling/resonator.h ****   DISALLOW_COPY_AND_ASSIGN(ResonatorSvf);
 106:eurorack/plaits/dsp/physical_modelling/resonator.h **** };
 107:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
 108:eurorack/plaits/dsp/physical_modelling/resonator.h **** class Resonator {
 109:eurorack/plaits/dsp/physical_modelling/resonator.h ****  public:
 110:eurorack/plaits/dsp/physical_modelling/resonator.h ****   Resonator() { }
 829              		.loc 20 110 3 is_stmt 1 view .LVU227
 830              	.LBE1360:
 831              	.LBE1358:
 832              	.LBE1356:
 833              	.LBE1355:
 834              	.LBE1420:
 835              	.LBE1432:
 836              	.LBE1438:
 837              		.loc 20 110 15 view .LVU228
 838              	.LBB1439:
 839              	.LBB1433:
 840              	.LBB1421:
 841              	.LBB1361:
 842              	.LBI1361:
 843              		.file 21 "eurorack/plaits/dsp/engine/noise_engine.h"
   1:eurorack/plaits/dsp/engine/noise_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/noise_engine.h **** //
   3:eurorack/plaits/dsp/engine/noise_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/noise_engine.h **** //
   5:eurorack/plaits/dsp/engine/noise_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/noise_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/noise_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/noise_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/noise_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/noise_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/noise_engine.h **** // 
  12:eurorack/plaits/dsp/engine/noise_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/noise_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/noise_engine.h **** // 
  15:eurorack/plaits/dsp/engine/noise_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/noise_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/noise_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/noise_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/noise_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/noise_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/noise_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/noise_engine.h **** // 
  23:eurorack/plaits/dsp/engine/noise_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/noise_engine.h **** //
  25:eurorack/plaits/dsp/engine/noise_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/noise_engine.h **** //
  27:eurorack/plaits/dsp/engine/noise_engine.h **** // Clocked noise processed by a multimode filter.
  28:eurorack/plaits/dsp/engine/noise_engine.h **** 
  29:eurorack/plaits/dsp/engine/noise_engine.h **** #ifndef PLAITS_DSP_ENGINE_NOISE_ENGINE_H_
  30:eurorack/plaits/dsp/engine/noise_engine.h **** #define PLAITS_DSP_ENGINE_NOISE_ENGINE_H_
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 44


  31:eurorack/plaits/dsp/engine/noise_engine.h **** 
  32:eurorack/plaits/dsp/engine/noise_engine.h **** #include "stmlib/dsp/filter.h"
  33:eurorack/plaits/dsp/engine/noise_engine.h **** 
  34:eurorack/plaits/dsp/engine/noise_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/noise_engine.h **** #include "plaits/dsp/noise/clocked_noise.h"
  36:eurorack/plaits/dsp/engine/noise_engine.h **** 
  37:eurorack/plaits/dsp/engine/noise_engine.h **** namespace plaits {
  38:eurorack/plaits/dsp/engine/noise_engine.h **** 
  39:eurorack/plaits/dsp/engine/noise_engine.h **** class NoiseEngine : public Engine {
  40:eurorack/plaits/dsp/engine/noise_engine.h ****  public:
  41:eurorack/plaits/dsp/engine/noise_engine.h ****   NoiseEngine() { }
 844              		.loc 21 41 3 view .LVU229
 845              	.LBB1362:
 846              	.LBB1363:
 847              	.LBI1363:
 848              		.loc 6 80 3 view .LVU230
 849              		.loc 6 80 3 is_stmt 0 view .LVU231
 850              	.LBE1363:
 851              		.loc 21 41 17 view .LVU232
 852 002a 214A     		ldr	r2, .L36+28
 853 002c C3F84825 		str	r2, [r3, #1352]
 854              		.loc 21 41 17 is_stmt 1 view .LVU233
 855              	.LVL27:
 856              	.LBB1364:
 857              	.LBI1364:
 858              		.loc 9 179 3 view .LVU234
 859              		.loc 9 179 3 is_stmt 0 view .LVU235
 860              	.LBE1364:
 861              		.loc 21 41 17 is_stmt 1 view .LVU236
 862              		.loc 21 41 17 is_stmt 0 view .LVU237
 863              	.LBE1362:
 864              	.LBE1361:
 865              	.LBB1365:
 866              	.LBI1365:
 867              		.file 22 "eurorack/plaits/dsp/engine/particle_engine.h"
   1:eurorack/plaits/dsp/engine/particle_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/particle_engine.h **** //
   3:eurorack/plaits/dsp/engine/particle_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/particle_engine.h **** //
   5:eurorack/plaits/dsp/engine/particle_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/particle_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/particle_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/particle_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/particle_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/particle_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/particle_engine.h **** // 
  12:eurorack/plaits/dsp/engine/particle_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/particle_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/particle_engine.h **** // 
  15:eurorack/plaits/dsp/engine/particle_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/particle_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/particle_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/particle_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/particle_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/particle_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/particle_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/particle_engine.h **** // 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 45


  23:eurorack/plaits/dsp/engine/particle_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/particle_engine.h **** //
  25:eurorack/plaits/dsp/engine/particle_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/particle_engine.h **** //
  27:eurorack/plaits/dsp/engine/particle_engine.h **** // Filtered random pulses.
  28:eurorack/plaits/dsp/engine/particle_engine.h **** 
  29:eurorack/plaits/dsp/engine/particle_engine.h **** #ifndef PLAITS_DSP_ENGINE_PARTICLE_ENGINE_H_
  30:eurorack/plaits/dsp/engine/particle_engine.h **** #define PLAITS_DSP_ENGINE_PARTICLE_ENGINE_H_
  31:eurorack/plaits/dsp/engine/particle_engine.h **** 
  32:eurorack/plaits/dsp/engine/particle_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/particle_engine.h **** #include "plaits/dsp/fx/diffuser.h"
  34:eurorack/plaits/dsp/engine/particle_engine.h **** #include "plaits/dsp/noise/particle.h"
  35:eurorack/plaits/dsp/engine/particle_engine.h **** 
  36:eurorack/plaits/dsp/engine/particle_engine.h **** namespace plaits {
  37:eurorack/plaits/dsp/engine/particle_engine.h **** 
  38:eurorack/plaits/dsp/engine/particle_engine.h **** const int kNumParticles = 6;
  39:eurorack/plaits/dsp/engine/particle_engine.h **** 
  40:eurorack/plaits/dsp/engine/particle_engine.h **** class ParticleEngine : public Engine {
  41:eurorack/plaits/dsp/engine/particle_engine.h ****  public:
  42:eurorack/plaits/dsp/engine/particle_engine.h ****   ParticleEngine() { }
 868              		.loc 22 42 3 is_stmt 1 view .LVU238
 869              	.LBB1366:
 870              	.LBB1367:
 871              	.LBI1367:
 872              		.loc 6 80 3 view .LVU239
 873              		.loc 6 80 3 is_stmt 0 view .LVU240
 874              	.LBE1367:
 875              		.loc 22 42 20 view .LVU241
 876 0030 204A     		ldr	r2, .L36+32
 877 0032 C3F8C825 		str	r2, [r3, #1480]
 878              		.loc 22 42 20 is_stmt 1 view .LVU242
 879              	.LVL28:
 880              	.LBB1368:
 881              	.LBI1368:
 882              		.file 23 "eurorack/plaits/dsp/fx/diffuser.h"
   1:eurorack/plaits/dsp/fx/diffuser.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/fx/diffuser.h **** //
   3:eurorack/plaits/dsp/fx/diffuser.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/fx/diffuser.h **** //
   5:eurorack/plaits/dsp/fx/diffuser.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/fx/diffuser.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/fx/diffuser.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/fx/diffuser.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/fx/diffuser.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/fx/diffuser.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/fx/diffuser.h **** // 
  12:eurorack/plaits/dsp/fx/diffuser.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/fx/diffuser.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/fx/diffuser.h **** // 
  15:eurorack/plaits/dsp/fx/diffuser.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/fx/diffuser.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/fx/diffuser.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/fx/diffuser.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/fx/diffuser.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/fx/diffuser.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/fx/diffuser.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/fx/diffuser.h **** // 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 46


  23:eurorack/plaits/dsp/fx/diffuser.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/fx/diffuser.h **** //
  25:eurorack/plaits/dsp/fx/diffuser.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/fx/diffuser.h **** //
  27:eurorack/plaits/dsp/fx/diffuser.h **** // Granular diffuser.
  28:eurorack/plaits/dsp/fx/diffuser.h **** 
  29:eurorack/plaits/dsp/fx/diffuser.h **** #ifndef PLAITS_DSP_FX_DIFFUSER_H_
  30:eurorack/plaits/dsp/fx/diffuser.h **** #define PLAITS_DSP_FX_DIFFUSER_H_
  31:eurorack/plaits/dsp/fx/diffuser.h **** 
  32:eurorack/plaits/dsp/fx/diffuser.h **** #include "stmlib/stmlib.h"
  33:eurorack/plaits/dsp/fx/diffuser.h **** 
  34:eurorack/plaits/dsp/fx/diffuser.h **** #include "plaits/dsp/fx/fx_engine.h"
  35:eurorack/plaits/dsp/fx/diffuser.h **** 
  36:eurorack/plaits/dsp/fx/diffuser.h **** namespace plaits {
  37:eurorack/plaits/dsp/fx/diffuser.h **** 
  38:eurorack/plaits/dsp/fx/diffuser.h **** class Diffuser {
  39:eurorack/plaits/dsp/fx/diffuser.h ****  public:
  40:eurorack/plaits/dsp/fx/diffuser.h ****   Diffuser() { }
 883              		.loc 23 40 3 view .LVU243
 884              	.LBB1369:
 885              	.LBI1369:
 886              		.file 24 "eurorack/plaits/dsp/fx/fx_engine.h"
   1:eurorack/plaits/dsp/fx/fx_engine.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/plaits/dsp/fx/fx_engine.h **** //
   3:eurorack/plaits/dsp/fx/fx_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/fx/fx_engine.h **** //
   5:eurorack/plaits/dsp/fx/fx_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/fx/fx_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/fx/fx_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/fx/fx_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/fx/fx_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/fx/fx_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/fx/fx_engine.h **** // 
  12:eurorack/plaits/dsp/fx/fx_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/fx/fx_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/fx/fx_engine.h **** // 
  15:eurorack/plaits/dsp/fx/fx_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/fx/fx_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/fx/fx_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/fx/fx_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/fx/fx_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/fx/fx_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/fx/fx_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/fx/fx_engine.h **** // 
  23:eurorack/plaits/dsp/fx/fx_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/fx/fx_engine.h **** //
  25:eurorack/plaits/dsp/fx/fx_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/fx/fx_engine.h **** //
  27:eurorack/plaits/dsp/fx/fx_engine.h **** // Base class for building reverbs.
  28:eurorack/plaits/dsp/fx/fx_engine.h **** 
  29:eurorack/plaits/dsp/fx/fx_engine.h **** #ifndef PLAITS_DSP_FX_FX_ENGINE_H_
  30:eurorack/plaits/dsp/fx/fx_engine.h **** #define PLAITS_DSP_FX_FX_ENGINE_H_
  31:eurorack/plaits/dsp/fx/fx_engine.h **** 
  32:eurorack/plaits/dsp/fx/fx_engine.h **** #include <algorithm>
  33:eurorack/plaits/dsp/fx/fx_engine.h **** 
  34:eurorack/plaits/dsp/fx/fx_engine.h **** #include "stmlib/stmlib.h"
  35:eurorack/plaits/dsp/fx/fx_engine.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 47


  36:eurorack/plaits/dsp/fx/fx_engine.h **** #include "stmlib/dsp/dsp.h"
  37:eurorack/plaits/dsp/fx/fx_engine.h **** #include "stmlib/dsp/cosine_oscillator.h"
  38:eurorack/plaits/dsp/fx/fx_engine.h **** 
  39:eurorack/plaits/dsp/fx/fx_engine.h **** namespace plaits {
  40:eurorack/plaits/dsp/fx/fx_engine.h **** 
  41:eurorack/plaits/dsp/fx/fx_engine.h **** #define TAIL , -1
  42:eurorack/plaits/dsp/fx/fx_engine.h **** 
  43:eurorack/plaits/dsp/fx/fx_engine.h **** enum Format {
  44:eurorack/plaits/dsp/fx/fx_engine.h ****   FORMAT_12_BIT,
  45:eurorack/plaits/dsp/fx/fx_engine.h ****   FORMAT_16_BIT,
  46:eurorack/plaits/dsp/fx/fx_engine.h ****   FORMAT_32_BIT
  47:eurorack/plaits/dsp/fx/fx_engine.h **** };
  48:eurorack/plaits/dsp/fx/fx_engine.h **** 
  49:eurorack/plaits/dsp/fx/fx_engine.h **** enum LFOIndex {
  50:eurorack/plaits/dsp/fx/fx_engine.h ****   LFO_1,
  51:eurorack/plaits/dsp/fx/fx_engine.h ****   LFO_2
  52:eurorack/plaits/dsp/fx/fx_engine.h **** };
  53:eurorack/plaits/dsp/fx/fx_engine.h **** 
  54:eurorack/plaits/dsp/fx/fx_engine.h **** template<Format format>
  55:eurorack/plaits/dsp/fx/fx_engine.h **** struct DataType { };
  56:eurorack/plaits/dsp/fx/fx_engine.h **** 
  57:eurorack/plaits/dsp/fx/fx_engine.h **** template<>
  58:eurorack/plaits/dsp/fx/fx_engine.h **** struct DataType<FORMAT_12_BIT> {
  59:eurorack/plaits/dsp/fx/fx_engine.h ****   typedef uint16_t T;
  60:eurorack/plaits/dsp/fx/fx_engine.h ****   
  61:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline float Decompress(T value) {
  62:eurorack/plaits/dsp/fx/fx_engine.h ****     return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
  63:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  64:eurorack/plaits/dsp/fx/fx_engine.h ****   
  65:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline T Compress(float value) {
  66:eurorack/plaits/dsp/fx/fx_engine.h ****     return static_cast<uint16_t>(
  67:eurorack/plaits/dsp/fx/fx_engine.h ****         stmlib::Clip16(static_cast<int32_t>(value * 4096.0f)));
  68:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  69:eurorack/plaits/dsp/fx/fx_engine.h **** };
  70:eurorack/plaits/dsp/fx/fx_engine.h **** 
  71:eurorack/plaits/dsp/fx/fx_engine.h **** template<>
  72:eurorack/plaits/dsp/fx/fx_engine.h **** struct DataType<FORMAT_16_BIT> {
  73:eurorack/plaits/dsp/fx/fx_engine.h ****   typedef uint16_t T;
  74:eurorack/plaits/dsp/fx/fx_engine.h ****   
  75:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline float Decompress(T value) {
  76:eurorack/plaits/dsp/fx/fx_engine.h ****     return static_cast<float>(static_cast<int16_t>(value)) / 32768.0f;
  77:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  78:eurorack/plaits/dsp/fx/fx_engine.h ****   
  79:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline T Compress(float value) {
  80:eurorack/plaits/dsp/fx/fx_engine.h ****     return static_cast<uint16_t>(
  81:eurorack/plaits/dsp/fx/fx_engine.h ****         stmlib::Clip16(static_cast<int32_t>(value * 32768.0f)));
  82:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  83:eurorack/plaits/dsp/fx/fx_engine.h **** };
  84:eurorack/plaits/dsp/fx/fx_engine.h **** 
  85:eurorack/plaits/dsp/fx/fx_engine.h **** template<>
  86:eurorack/plaits/dsp/fx/fx_engine.h **** struct DataType<FORMAT_32_BIT> {
  87:eurorack/plaits/dsp/fx/fx_engine.h ****   typedef float T;
  88:eurorack/plaits/dsp/fx/fx_engine.h ****   
  89:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline float Decompress(T value) {
  90:eurorack/plaits/dsp/fx/fx_engine.h ****     return value;;
  91:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  92:eurorack/plaits/dsp/fx/fx_engine.h ****   
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 48


  93:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline T Compress(float value) {
  94:eurorack/plaits/dsp/fx/fx_engine.h ****     return value;
  95:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  96:eurorack/plaits/dsp/fx/fx_engine.h **** };
  97:eurorack/plaits/dsp/fx/fx_engine.h **** 
  98:eurorack/plaits/dsp/fx/fx_engine.h **** template<
  99:eurorack/plaits/dsp/fx/fx_engine.h ****     size_t size,
 100:eurorack/plaits/dsp/fx/fx_engine.h ****     Format format = FORMAT_12_BIT>
 101:eurorack/plaits/dsp/fx/fx_engine.h **** class FxEngine {
 102:eurorack/plaits/dsp/fx/fx_engine.h ****  public:
 103:eurorack/plaits/dsp/fx/fx_engine.h ****   typedef typename DataType<format>::T T;
 104:eurorack/plaits/dsp/fx/fx_engine.h ****   FxEngine() { }
 887              		.loc 24 104 3 view .LVU244
 888              	.LBE1369:
 889              	.LBE1368:
 890              	.LBE1366:
 891              	.LBE1365:
 892              	.LBE1421:
 893              	.LBE1433:
 894              	.LBE1439:
 895              		.loc 24 104 14 view .LVU245
 896              	.LBB1440:
 897              	.LBB1434:
 898              	.LBB1422:
 899              	.LBB1372:
 900              	.LBB1371:
 901              	.LBB1370:
 902              	.LBI1370:
 903              		.loc 9 179 3 view .LVU246
 904              		.loc 9 179 3 is_stmt 0 view .LVU247
 905              	.LBE1370:
 906              	.LBE1371:
 907              	.LBE1372:
 908              	.LBB1373:
 909              	.LBI1373:
 910              		.file 25 "eurorack/plaits/dsp/engine/snare_drum_engine.h"
   1:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/snare_drum_engine.h **** //
   3:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/snare_drum_engine.h **** //
   5:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // 
  12:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // 
  15:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // THE SOFTWARE.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 49


  22:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // 
  23:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/snare_drum_engine.h **** //
  25:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/snare_drum_engine.h **** //
  27:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // 808 and synthetic snare drum generators.
  28:eurorack/plaits/dsp/engine/snare_drum_engine.h **** 
  29:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #ifndef PLAITS_DSP_ENGINE_SNARE_DRUM_ENGINE_H_
  30:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #define PLAITS_DSP_ENGINE_SNARE_DRUM_ENGINE_H_
  31:eurorack/plaits/dsp/engine/snare_drum_engine.h **** 
  32:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #include "plaits/dsp/drums/analog_snare_drum.h"
  33:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #include "plaits/dsp/drums/synthetic_snare_drum.h"
  34:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/snare_drum_engine.h **** 
  36:eurorack/plaits/dsp/engine/snare_drum_engine.h **** namespace plaits {
  37:eurorack/plaits/dsp/engine/snare_drum_engine.h ****   
  38:eurorack/plaits/dsp/engine/snare_drum_engine.h **** class SnareDrumEngine : public Engine {
  39:eurorack/plaits/dsp/engine/snare_drum_engine.h ****  public:
  40:eurorack/plaits/dsp/engine/snare_drum_engine.h ****   SnareDrumEngine() { }
 911              		.loc 25 40 3 is_stmt 1 view .LVU248
 912              	.LBB1374:
 913              	.LBB1375:
 914              	.LBI1375:
 915              		.loc 6 80 3 view .LVU249
 916              		.loc 6 80 3 is_stmt 0 view .LVU250
 917              	.LBE1375:
 918              		.loc 25 40 21 view .LVU251
 919 0036 204A     		ldr	r2, .L36+36
 920 0038 C3F8A826 		str	r2, [r3, #1704]
 921              	.LVL29:
 922              	.LBB1376:
 923              	.LBI1376:
 924              		.file 26 "eurorack/plaits/dsp/drums/analog_snare_drum.h"
   1:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/analog_snare_drum.h **** //
   3:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/analog_snare_drum.h **** //
   5:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // 
  12:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // 
  15:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // 
  23:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/analog_snare_drum.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 50


  25:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/analog_snare_drum.h **** //
  27:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // 808 snare drum model, revisited.
  28:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  29:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #ifndef PLAITS_DSP_DRUMS_ANALOG_SNARE_DRUM_H_
  30:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #define PLAITS_DSP_DRUMS_ANALOG_SNARE_DRUM_H_
  31:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  32:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include <algorithm>
  33:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  34:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/dsp/filter.h"
  36:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/dsp/parameter_interpolator.h"
  37:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/dsp/units.h"
  38:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/utils/random.h"
  39:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  40:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "plaits/dsp/dsp.h"
  41:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "plaits/dsp/oscillator/sine_oscillator.h"
  42:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  43:eurorack/plaits/dsp/drums/analog_snare_drum.h **** namespace plaits {
  44:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  45:eurorack/plaits/dsp/drums/analog_snare_drum.h **** class AnalogSnareDrum {
  46:eurorack/plaits/dsp/drums/analog_snare_drum.h ****  public:
  47:eurorack/plaits/dsp/drums/analog_snare_drum.h ****   AnalogSnareDrum() { }
 925              		.loc 26 47 3 is_stmt 1 view .LVU252
 926              	.LBE1376:
 927              	.LBE1374:
 928              	.LBE1373:
 929              	.LBE1422:
 930              	.LBE1434:
 931              	.LBE1440:
 932              		.loc 26 47 21 view .LVU253
 933              	.LBB1441:
 934              	.LBB1435:
 935              	.LBB1423:
 936              	.LBB1385:
 937              	.LBB1383:
 938              	.LBB1378:
 939              	.LBB1377:
 940              	.LBI1377:
 941              		.loc 9 179 3 view .LVU254
 942              		.loc 9 179 3 is_stmt 0 view .LVU255
 943              	.LBE1377:
 944              	.LBE1378:
 945              	.LBE1383:
 946              	.LBE1385:
 947              	.LBE1423:
 948              	.LBE1435:
 949              	.LBE1441:
 950              		.loc 26 47 21 is_stmt 1 view .LVU256
 951              	.LBB1442:
 952              	.LBB1436:
 953              	.LBB1424:
 954              	.LBB1386:
 955              	.LBB1384:
 956              	.LBB1379:
 957              	.LBI1379:
 958              		.file 27 "eurorack/plaits/dsp/drums/synthetic_snare_drum.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 51


   1:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** //
   3:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** //
   5:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // 
  12:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // 
  15:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // 
  23:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** //
  25:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** //
  27:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Naive snare drum model (two modulated oscillators + filtered noise).
  28:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Uses a few magic numbers taken from the 909 schematics:
  29:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // - Ratio between the two modes of the drum set to 1.47.
  30:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // - Funky coupling between the two modes.
  31:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // - Noise coloration filters and envelope shapes for the snare.
  32:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  33:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #ifndef PLAITS_DSP_DRUMS_SYNTHETIC_SNARE_DRUM_H_
  34:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #define PLAITS_DSP_DRUMS_SYNTHETIC_SNARE_DRUM_H_
  35:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  36:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include <algorithm>
  37:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  38:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include "stmlib/dsp/dsp.h"
  39:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include "stmlib/dsp/parameter_interpolator.h"
  40:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include "stmlib/dsp/units.h"
  41:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  42:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include "plaits/dsp/dsp.h"
  43:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  44:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** namespace plaits {
  45:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  46:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** class SyntheticSnareDrum {
  47:eurorack/plaits/dsp/drums/synthetic_snare_drum.h ****  public:
  48:eurorack/plaits/dsp/drums/synthetic_snare_drum.h ****   SyntheticSnareDrum() { }
 959              		.loc 27 48 3 view .LVU257
 960              	.LBB1380:
 961              	.LBI1380:
  94:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
 962              		.loc 9 94 3 view .LVU258
  94:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
 963              		.loc 9 94 3 is_stmt 0 view .LVU259
 964              	.LBE1380:
 965              	.LBB1381:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 52


 966              	.LBI1381:
  94:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
 967              		.loc 9 94 3 is_stmt 1 view .LVU260
  94:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
 968              		.loc 9 94 3 is_stmt 0 view .LVU261
 969              	.LBE1381:
 970              	.LBB1382:
 971              	.LBI1382:
 972              		.loc 9 179 3 is_stmt 1 view .LVU262
 973              		.loc 9 179 3 is_stmt 0 view .LVU263
 974              	.LBE1382:
 975              	.LBE1379:
 976              	.LBE1384:
 977              	.LBE1386:
 978              	.LBB1387:
 979              	.LBI1387:
 980              		.file 28 "eurorack/plaits/dsp/engine/string_engine.h"
   1:eurorack/plaits/dsp/engine/string_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/string_engine.h **** //
   3:eurorack/plaits/dsp/engine/string_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/string_engine.h **** //
   5:eurorack/plaits/dsp/engine/string_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/string_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/string_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/string_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/string_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/string_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/string_engine.h **** // 
  12:eurorack/plaits/dsp/engine/string_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/string_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/string_engine.h **** // 
  15:eurorack/plaits/dsp/engine/string_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/string_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/string_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/string_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/string_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/string_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/string_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/string_engine.h **** // 
  23:eurorack/plaits/dsp/engine/string_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/string_engine.h **** //
  25:eurorack/plaits/dsp/engine/string_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/string_engine.h **** //
  27:eurorack/plaits/dsp/engine/string_engine.h **** // Three voices of string synthesis.
  28:eurorack/plaits/dsp/engine/string_engine.h **** 
  29:eurorack/plaits/dsp/engine/string_engine.h **** #ifndef PLAITS_DSP_ENGINE_STRING_ENGINE_H_
  30:eurorack/plaits/dsp/engine/string_engine.h **** #define PLAITS_DSP_ENGINE_STRING_ENGINE_H_
  31:eurorack/plaits/dsp/engine/string_engine.h **** 
  32:eurorack/plaits/dsp/engine/string_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/string_engine.h **** #include "plaits/dsp/physical_modelling/string_voice.h"
  34:eurorack/plaits/dsp/engine/string_engine.h **** 
  35:eurorack/plaits/dsp/engine/string_engine.h **** namespace plaits {
  36:eurorack/plaits/dsp/engine/string_engine.h **** 
  37:eurorack/plaits/dsp/engine/string_engine.h **** const int kNumStrings = 3;
  38:eurorack/plaits/dsp/engine/string_engine.h **** 
  39:eurorack/plaits/dsp/engine/string_engine.h **** class StringEngine : public Engine {
  40:eurorack/plaits/dsp/engine/string_engine.h ****  public:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 53


  41:eurorack/plaits/dsp/engine/string_engine.h ****   StringEngine() { }
 981              		.loc 28 41 3 is_stmt 1 view .LVU264
 982              	.LBB1388:
 983              	.LBB1389:
 984              	.LBI1389:
 985              		.loc 6 80 3 view .LVU265
 986              		.loc 6 80 3 is_stmt 0 view .LVU266
 987              	.LBE1389:
 988              		.loc 28 41 18 view .LVU267
 989 003c 1F4A     		ldr	r2, .L36+40
 990 003e C3F8CC27 		str	r2, [r3, #1996]
 991              		.loc 28 41 18 is_stmt 1 view .LVU268
 992              	.LVL30:
 993              	.LBB1390:
 994              	.LBI1390:
 995              		.file 29 "eurorack/plaits/dsp/physical_modelling/delay_line.h"
   1:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/plaits/dsp/physical_modelling/delay_line.h **** //
   3:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/physical_modelling/delay_line.h **** //
   5:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // 
  12:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // 
  15:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // 
  23:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/physical_modelling/delay_line.h **** //
  25:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/physical_modelling/delay_line.h **** //
  27:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // Delay line (same implementation as from stmlib, but does not own its buffer).
  28:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  29:eurorack/plaits/dsp/physical_modelling/delay_line.h **** #ifndef PLAITS_DSP_PHYSICAL_MODELLING_DELAY_LINE_H_
  30:eurorack/plaits/dsp/physical_modelling/delay_line.h **** #define PLAITS_DSP_PHYSICAL_MODELLING_DELAY_LINE_H_
  31:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  32:eurorack/plaits/dsp/physical_modelling/delay_line.h **** #include <algorithm>
  33:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  34:eurorack/plaits/dsp/physical_modelling/delay_line.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  36:eurorack/plaits/dsp/physical_modelling/delay_line.h **** namespace plaits {
  37:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  38:eurorack/plaits/dsp/physical_modelling/delay_line.h **** template<typename T, size_t max_delay>
  39:eurorack/plaits/dsp/physical_modelling/delay_line.h **** class DelayLine {
  40:eurorack/plaits/dsp/physical_modelling/delay_line.h ****  public:
  41:eurorack/plaits/dsp/physical_modelling/delay_line.h ****   DelayLine() { }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 54


 996              		.loc 29 41 3 view .LVU269
 997              		.loc 29 41 3 is_stmt 0 view .LVU270
 998              	.LBE1390:
 999              	.LBE1388:
 1000              	.LBE1387:
 1001              	.LBB1391:
 1002              	.LBI1391:
 1003              		.file 30 "eurorack/plaits/dsp/engine/swarm_engine.h"
   1:eurorack/plaits/dsp/engine/swarm_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/swarm_engine.h **** //
   3:eurorack/plaits/dsp/engine/swarm_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/swarm_engine.h **** //
   5:eurorack/plaits/dsp/engine/swarm_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/swarm_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/swarm_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/swarm_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/swarm_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/swarm_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/swarm_engine.h **** // 
  12:eurorack/plaits/dsp/engine/swarm_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/swarm_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/swarm_engine.h **** // 
  15:eurorack/plaits/dsp/engine/swarm_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/swarm_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/swarm_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/swarm_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/swarm_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/swarm_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/swarm_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/swarm_engine.h **** // 
  23:eurorack/plaits/dsp/engine/swarm_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/swarm_engine.h **** //
  25:eurorack/plaits/dsp/engine/swarm_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/swarm_engine.h **** //
  27:eurorack/plaits/dsp/engine/swarm_engine.h **** // Swarm of sawtooths and sines.
  28:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  29:eurorack/plaits/dsp/engine/swarm_engine.h **** #ifndef PLAITS_DSP_ENGINE_SWARM_ENGINE_H_
  30:eurorack/plaits/dsp/engine/swarm_engine.h **** #define PLAITS_DSP_ENGINE_SWARM_ENGINE_H_
  31:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  32:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "stmlib/dsp/polyblep.h"
  33:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "stmlib/dsp/units.h"
  34:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "stmlib/utils/random.h"
  35:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  36:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/dsp/engine/engine.h"
  37:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/dsp/oscillator/oscillator.h"
  38:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/dsp/oscillator/string_synth_oscillator.h"
  39:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/dsp/oscillator/sine_oscillator.h"
  40:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/resources.h"
  41:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  42:eurorack/plaits/dsp/engine/swarm_engine.h **** namespace plaits {
  43:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  44:eurorack/plaits/dsp/engine/swarm_engine.h **** const int kNumSwarmVoices = 8;
  45:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  46:eurorack/plaits/dsp/engine/swarm_engine.h **** class GrainEnvelope {
  47:eurorack/plaits/dsp/engine/swarm_engine.h ****  public:
  48:eurorack/plaits/dsp/engine/swarm_engine.h ****   GrainEnvelope() { }
  49:eurorack/plaits/dsp/engine/swarm_engine.h ****   ~GrainEnvelope() { }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 55


  50:eurorack/plaits/dsp/engine/swarm_engine.h ****   
  51:eurorack/plaits/dsp/engine/swarm_engine.h ****   void Init() {
  52:eurorack/plaits/dsp/engine/swarm_engine.h ****     from_ = 0.0f;
  53:eurorack/plaits/dsp/engine/swarm_engine.h ****     interval_ = 1.0f;
  54:eurorack/plaits/dsp/engine/swarm_engine.h ****     phase_ = 1.0f;
  55:eurorack/plaits/dsp/engine/swarm_engine.h ****     fm_ = 0.0f;
  56:eurorack/plaits/dsp/engine/swarm_engine.h ****     amplitude_ = 0.5f;
  57:eurorack/plaits/dsp/engine/swarm_engine.h ****     previous_size_ratio_ = 0.0f;
  58:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
  59:eurorack/plaits/dsp/engine/swarm_engine.h ****   
  60:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline void Step(float rate, bool burst_mode, bool start_burst) {
  61:eurorack/plaits/dsp/engine/swarm_engine.h ****     bool randomize = false;
  62:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (start_burst) {
  63:eurorack/plaits/dsp/engine/swarm_engine.h ****       phase_ = 0.5f;
  64:eurorack/plaits/dsp/engine/swarm_engine.h ****       fm_ = 16.0f;
  65:eurorack/plaits/dsp/engine/swarm_engine.h ****       randomize = true;
  66:eurorack/plaits/dsp/engine/swarm_engine.h ****     } else {
  67:eurorack/plaits/dsp/engine/swarm_engine.h ****       phase_ += rate * fm_;
  68:eurorack/plaits/dsp/engine/swarm_engine.h ****       if (phase_ >= 1.0f) {
  69:eurorack/plaits/dsp/engine/swarm_engine.h ****         phase_ -= static_cast<float>(static_cast<int>(phase_));
  70:eurorack/plaits/dsp/engine/swarm_engine.h ****         randomize = true;
  71:eurorack/plaits/dsp/engine/swarm_engine.h ****       }
  72:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
  73:eurorack/plaits/dsp/engine/swarm_engine.h ****     
  74:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (randomize) {
  75:eurorack/plaits/dsp/engine/swarm_engine.h ****       from_ += interval_;
  76:eurorack/plaits/dsp/engine/swarm_engine.h ****       interval_ = stmlib::Random::GetFloat() - from_;
  77:eurorack/plaits/dsp/engine/swarm_engine.h ****       // Randomize the duration of the grain.
  78:eurorack/plaits/dsp/engine/swarm_engine.h ****       if (burst_mode) {
  79:eurorack/plaits/dsp/engine/swarm_engine.h ****         fm_ *= 0.8f + 0.2f * stmlib::Random::GetFloat();
  80:eurorack/plaits/dsp/engine/swarm_engine.h ****       } else {
  81:eurorack/plaits/dsp/engine/swarm_engine.h ****         fm_ = 0.5f + 1.5f * stmlib::Random::GetFloat();
  82:eurorack/plaits/dsp/engine/swarm_engine.h ****       }
  83:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
  84:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
  85:eurorack/plaits/dsp/engine/swarm_engine.h ****   
  86:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline float frequency(float size_ratio) const {
  87:eurorack/plaits/dsp/engine/swarm_engine.h ****     // We approximate two overlapping grains of frequencies f1 and f2
  88:eurorack/plaits/dsp/engine/swarm_engine.h ****     // By a continuous tone ramping from f1 to f2. This allows a continuous
  89:eurorack/plaits/dsp/engine/swarm_engine.h ****     // transition between the "grain cloud" and "swarm of glissandi" textures.
  90:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (size_ratio < 1.0f) {
  91:eurorack/plaits/dsp/engine/swarm_engine.h ****       return 2.0f * (from_ + interval_ * phase_) - 1.0f;
  92:eurorack/plaits/dsp/engine/swarm_engine.h ****     } else {
  93:eurorack/plaits/dsp/engine/swarm_engine.h ****       return from_;
  94:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
  95:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
  96:eurorack/plaits/dsp/engine/swarm_engine.h ****   
  97:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline float amplitude(float size_ratio) {
  98:eurorack/plaits/dsp/engine/swarm_engine.h ****     float target_amplitude = 1.0f;
  99:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (size_ratio >= 1.0f) {
 100:eurorack/plaits/dsp/engine/swarm_engine.h ****       float phase = (phase_ - 0.5f) * size_ratio;
 101:eurorack/plaits/dsp/engine/swarm_engine.h ****       CONSTRAIN(phase, -1.0f, 1.0f);
 102:eurorack/plaits/dsp/engine/swarm_engine.h ****       float e = stmlib::InterpolateWrap(
 103:eurorack/plaits/dsp/engine/swarm_engine.h ****           lut_sine, 0.5f * phase + 1.25f, 1024.0f);
 104:eurorack/plaits/dsp/engine/swarm_engine.h ****       target_amplitude = 0.5f * (e + 1.0f);
 105:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
 106:eurorack/plaits/dsp/engine/swarm_engine.h ****     
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 56


 107:eurorack/plaits/dsp/engine/swarm_engine.h ****     if ((size_ratio >= 1.0f) ^ (previous_size_ratio_ >= 1.0f)) {
 108:eurorack/plaits/dsp/engine/swarm_engine.h ****       filter_coefficient_ = 0.5f;
 109:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
 110:eurorack/plaits/dsp/engine/swarm_engine.h ****     filter_coefficient_ *= 0.95f;
 111:eurorack/plaits/dsp/engine/swarm_engine.h ****     
 112:eurorack/plaits/dsp/engine/swarm_engine.h ****     previous_size_ratio_ = size_ratio;
 113:eurorack/plaits/dsp/engine/swarm_engine.h ****     ONE_POLE(amplitude_, target_amplitude, 0.5f - filter_coefficient_);
 114:eurorack/plaits/dsp/engine/swarm_engine.h ****     return amplitude_;
 115:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
 116:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 117:eurorack/plaits/dsp/engine/swarm_engine.h ****  private:
 118:eurorack/plaits/dsp/engine/swarm_engine.h ****   float from_;
 119:eurorack/plaits/dsp/engine/swarm_engine.h ****   float interval_;
 120:eurorack/plaits/dsp/engine/swarm_engine.h ****   float phase_;
 121:eurorack/plaits/dsp/engine/swarm_engine.h ****   float fm_;
 122:eurorack/plaits/dsp/engine/swarm_engine.h ****   float amplitude_;
 123:eurorack/plaits/dsp/engine/swarm_engine.h ****   float previous_size_ratio_;
 124:eurorack/plaits/dsp/engine/swarm_engine.h ****   float filter_coefficient_;
 125:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 126:eurorack/plaits/dsp/engine/swarm_engine.h ****   DISALLOW_COPY_AND_ASSIGN(GrainEnvelope);
 127:eurorack/plaits/dsp/engine/swarm_engine.h **** };
 128:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 129:eurorack/plaits/dsp/engine/swarm_engine.h **** class AdditiveSawOscillator {
 130:eurorack/plaits/dsp/engine/swarm_engine.h ****  public:
 131:eurorack/plaits/dsp/engine/swarm_engine.h ****   AdditiveSawOscillator() { }
 132:eurorack/plaits/dsp/engine/swarm_engine.h ****   ~AdditiveSawOscillator() { }
 133:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 134:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline void Init() {
 135:eurorack/plaits/dsp/engine/swarm_engine.h ****     phase_ = 0.0f;
 136:eurorack/plaits/dsp/engine/swarm_engine.h ****     next_sample_ = 0.0f;
 137:eurorack/plaits/dsp/engine/swarm_engine.h ****     frequency_ = 0.01f;
 138:eurorack/plaits/dsp/engine/swarm_engine.h ****     gain_ = 0.0f;
 139:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
 140:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 141:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline void Render(
 142:eurorack/plaits/dsp/engine/swarm_engine.h ****       float frequency,
 143:eurorack/plaits/dsp/engine/swarm_engine.h ****       float level,
 144:eurorack/plaits/dsp/engine/swarm_engine.h ****       float* out,
 145:eurorack/plaits/dsp/engine/swarm_engine.h ****       size_t size) {
 146:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (frequency >= kMaxFrequency) {
 147:eurorack/plaits/dsp/engine/swarm_engine.h ****       frequency = kMaxFrequency;
 148:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
 149:eurorack/plaits/dsp/engine/swarm_engine.h ****     stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
 150:eurorack/plaits/dsp/engine/swarm_engine.h ****     stmlib::ParameterInterpolator gain(&gain_, level, size);
 151:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 152:eurorack/plaits/dsp/engine/swarm_engine.h ****     float next_sample = next_sample_;
 153:eurorack/plaits/dsp/engine/swarm_engine.h ****     float phase = phase_;
 154:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 155:eurorack/plaits/dsp/engine/swarm_engine.h ****     while (size--) {
 156:eurorack/plaits/dsp/engine/swarm_engine.h ****       float this_sample = next_sample;
 157:eurorack/plaits/dsp/engine/swarm_engine.h ****       next_sample = 0.0f;
 158:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 159:eurorack/plaits/dsp/engine/swarm_engine.h ****       const float frequency = fm.Next();
 160:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 161:eurorack/plaits/dsp/engine/swarm_engine.h ****       phase += frequency;
 162:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 163:eurorack/plaits/dsp/engine/swarm_engine.h ****       if (phase >= 1.0f) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 57


 164:eurorack/plaits/dsp/engine/swarm_engine.h ****         phase -= 1.0f;
 165:eurorack/plaits/dsp/engine/swarm_engine.h ****         float t = phase / frequency;
 166:eurorack/plaits/dsp/engine/swarm_engine.h ****         this_sample -= stmlib::ThisBlepSample(t);
 167:eurorack/plaits/dsp/engine/swarm_engine.h ****         next_sample -= stmlib::NextBlepSample(t);
 168:eurorack/plaits/dsp/engine/swarm_engine.h ****       }
 169:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 170:eurorack/plaits/dsp/engine/swarm_engine.h ****       next_sample += phase;
 171:eurorack/plaits/dsp/engine/swarm_engine.h ****       *out++ += (2.0f * this_sample - 1.0f) * gain.Next();
 172:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
 173:eurorack/plaits/dsp/engine/swarm_engine.h ****     phase_ = phase;
 174:eurorack/plaits/dsp/engine/swarm_engine.h ****     next_sample_ = next_sample;
 175:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
 176:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 177:eurorack/plaits/dsp/engine/swarm_engine.h ****  private:
 178:eurorack/plaits/dsp/engine/swarm_engine.h ****   // Oscillator state.
 179:eurorack/plaits/dsp/engine/swarm_engine.h ****   float phase_;
 180:eurorack/plaits/dsp/engine/swarm_engine.h ****   float next_sample_;
 181:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 182:eurorack/plaits/dsp/engine/swarm_engine.h ****   // For interpolation of parameters.
 183:eurorack/plaits/dsp/engine/swarm_engine.h ****   float frequency_;
 184:eurorack/plaits/dsp/engine/swarm_engine.h ****   float gain_;
 185:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 186:eurorack/plaits/dsp/engine/swarm_engine.h ****   DISALLOW_COPY_AND_ASSIGN(AdditiveSawOscillator);
 187:eurorack/plaits/dsp/engine/swarm_engine.h **** };
 188:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 189:eurorack/plaits/dsp/engine/swarm_engine.h **** class SwarmVoice {
 190:eurorack/plaits/dsp/engine/swarm_engine.h ****  public:
 191:eurorack/plaits/dsp/engine/swarm_engine.h ****   SwarmVoice() { }
 192:eurorack/plaits/dsp/engine/swarm_engine.h ****   ~SwarmVoice() { }
 193:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 194:eurorack/plaits/dsp/engine/swarm_engine.h ****   void Init(float rank) {
 195:eurorack/plaits/dsp/engine/swarm_engine.h ****     rank_ = rank;
 196:eurorack/plaits/dsp/engine/swarm_engine.h ****     envelope_.Init();
 197:eurorack/plaits/dsp/engine/swarm_engine.h ****     saw_.Init();
 198:eurorack/plaits/dsp/engine/swarm_engine.h ****     sine_.Init();
 199:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
 200:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 201:eurorack/plaits/dsp/engine/swarm_engine.h ****   void Render(
 202:eurorack/plaits/dsp/engine/swarm_engine.h ****       float f0,
 203:eurorack/plaits/dsp/engine/swarm_engine.h ****       float density,
 204:eurorack/plaits/dsp/engine/swarm_engine.h ****       bool burst_mode,
 205:eurorack/plaits/dsp/engine/swarm_engine.h ****       bool start_burst,
 206:eurorack/plaits/dsp/engine/swarm_engine.h ****       float spread,
 207:eurorack/plaits/dsp/engine/swarm_engine.h ****       float size_ratio,
 208:eurorack/plaits/dsp/engine/swarm_engine.h ****       float* saw,
 209:eurorack/plaits/dsp/engine/swarm_engine.h ****       float* sine,
 210:eurorack/plaits/dsp/engine/swarm_engine.h ****       size_t size) {
 211:eurorack/plaits/dsp/engine/swarm_engine.h ****     envelope_.Step(density, burst_mode, start_burst);
 212:eurorack/plaits/dsp/engine/swarm_engine.h ****     
 213:eurorack/plaits/dsp/engine/swarm_engine.h ****     const float scale = 1.0f / kNumSwarmVoices;
 214:eurorack/plaits/dsp/engine/swarm_engine.h ****     const float amplitude = envelope_.amplitude(size_ratio) * scale;
 215:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 216:eurorack/plaits/dsp/engine/swarm_engine.h ****     const float expo_amount = envelope_.frequency(size_ratio);
 217:eurorack/plaits/dsp/engine/swarm_engine.h ****     f0 *= stmlib::SemitonesToRatio(48.0f * expo_amount * spread * rank_);
 218:eurorack/plaits/dsp/engine/swarm_engine.h ****     
 219:eurorack/plaits/dsp/engine/swarm_engine.h ****     const float linear_amount = rank_ * (rank_ + 0.01f) * spread * 0.25f;
 220:eurorack/plaits/dsp/engine/swarm_engine.h ****     f0 *= 1.0f + linear_amount;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 58


 221:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 222:eurorack/plaits/dsp/engine/swarm_engine.h ****     saw_.Render(f0, amplitude, saw, size);
 223:eurorack/plaits/dsp/engine/swarm_engine.h ****     sine_.Render(f0, amplitude, sine, size);
 224:eurorack/plaits/dsp/engine/swarm_engine.h ****   };
 225:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 226:eurorack/plaits/dsp/engine/swarm_engine.h ****  private:
 227:eurorack/plaits/dsp/engine/swarm_engine.h ****   float rank_;
 228:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 229:eurorack/plaits/dsp/engine/swarm_engine.h ****   GrainEnvelope envelope_;
 230:eurorack/plaits/dsp/engine/swarm_engine.h ****   AdditiveSawOscillator saw_;
 231:eurorack/plaits/dsp/engine/swarm_engine.h ****   FastSineOscillator sine_;
 232:eurorack/plaits/dsp/engine/swarm_engine.h **** };
 233:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 234:eurorack/plaits/dsp/engine/swarm_engine.h **** class SwarmEngine : public Engine {
 235:eurorack/plaits/dsp/engine/swarm_engine.h ****  public:
 236:eurorack/plaits/dsp/engine/swarm_engine.h ****   SwarmEngine() { }
 1004              		.loc 30 236 3 is_stmt 1 view .LVU271
 1005              	.LBB1392:
 1006              	.LBB1393:
 1007              	.LBI1393:
 1008              		.loc 6 80 3 view .LVU272
 1009              		.loc 6 80 3 is_stmt 0 view .LVU273
 1010              	.LBE1393:
 1011              		.loc 30 236 17 view .LVU274
 1012 0042 1F4A     		ldr	r2, .L36+44
 1013 0044 C3F81829 		str	r2, [r3, #2328]
 1014              		.loc 30 236 17 is_stmt 1 view .LVU275
 1015              	.LVL31:
 1016              		.loc 30 236 17 is_stmt 0 view .LVU276
 1017              	.LBE1392:
 1018              	.LBE1391:
 1019              	.LBB1394:
 1020              	.LBI1394:
 1021              		.file 31 "eurorack/plaits/dsp/engine/virtual_analog_engine.h"
   1:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** //
   3:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** //
   5:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // 
  12:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // 
  15:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // 
  23:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 59


  24:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** //
  25:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** //
  27:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // 2 variable shape oscillators with sync and crossfading.
  28:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** 
  29:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #ifndef PLAITS_DSP_ENGINE_VIRTUAL_ANALOG_ENGINE_H_
  30:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #define PLAITS_DSP_ENGINE_VIRTUAL_ANALOG_ENGINE_H_
  31:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** 
  32:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #include "plaits/dsp/oscillator/variable_saw_oscillator.h"
  34:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #include "plaits/dsp/oscillator/variable_shape_oscillator.h"
  35:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** 
  36:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #define VA_VARIANT 2
  37:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** 
  38:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** namespace plaits {
  39:eurorack/plaits/dsp/engine/virtual_analog_engine.h ****   
  40:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** class VirtualAnalogEngine : public Engine {
  41:eurorack/plaits/dsp/engine/virtual_analog_engine.h ****  public:
  42:eurorack/plaits/dsp/engine/virtual_analog_engine.h ****   VirtualAnalogEngine() { }
 1022              		.loc 31 42 3 is_stmt 1 view .LVU277
 1023              	.LBB1395:
 1024              	.LBB1396:
 1025              	.LBI1396:
 1026              		.loc 6 80 3 view .LVU278
 1027              		.loc 6 80 3 is_stmt 0 view .LVU279
 1028              	.LBE1396:
 1029              		.loc 31 42 25 view .LVU280
 1030 0048 1E4A     		ldr	r2, .L36+48
 1031 004a C3F8282B 		str	r2, [r3, #2856]
 1032              	.LVL32:
 1033              	.LBB1397:
 1034              	.LBI1397:
 1035              		.file 32 "eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h"
   1:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 60


  25:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // Continuously variable waveform: triangle > saw > square. Both square and
  28:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // triangle have variable slope / pulse-width. Additionally, the phase resets
  29:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // can be locked to a master frequency.
  30:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  31:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_VARIABLE_SHAPE_OSCILLATOR_H_
  32:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #define PLAITS_DSP_OSCILLATOR_VARIABLE_SHAPE_OSCILLATOR_H_
  33:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  34:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  36:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #include "stmlib/dsp/polyblep.h"
  37:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  38:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #include <algorithm>
  39:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  40:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** namespace plaits {
  41:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  42:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** class VariableShapeOscillator {
  43:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h ****  public:
  44:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h ****   VariableShapeOscillator() { }
 1036              		.loc 32 44 3 is_stmt 1 view .LVU281
 1037              		.loc 32 44 3 is_stmt 0 view .LVU282
 1038              	.LBE1397:
 1039              	.LBB1398:
 1040              	.LBI1398:
 1041              		.loc 32 44 3 is_stmt 1 view .LVU283
 1042              		.loc 32 44 3 is_stmt 0 view .LVU284
 1043              	.LBE1398:
 1044              	.LBB1399:
 1045              	.LBI1399:
 1046              		.loc 32 44 3 is_stmt 1 view .LVU285
 1047              		.loc 32 44 3 is_stmt 0 view .LVU286
 1048              	.LBE1399:
 1049              	.LBB1400:
 1050              	.LBI1400:
 1051              		.file 33 "eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h"
   1:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // THE SOFTWARE.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 61


  22:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // Saw with variable slope or notch
  28:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  29:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_VARIABLE_SAW_OSCILLATOR_H_
  30:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #define PLAITS_DSP_OSCILLATOR_VARIABLE_SAW_OSCILLATOR_H_
  31:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  32:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include "stmlib/dsp/dsp.h"
  33:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  34:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include "stmlib/dsp/polyblep.h"
  35:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  36:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include <algorithm>
  37:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  38:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include "plaits/dsp/oscillator/oscillator.h"
  39:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  40:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** namespace plaits {
  41:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  42:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** const float kVariableSawNotchDepth = 0.2f;
  43:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  44:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** class VariableSawOscillator {
  45:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h ****  public:
  46:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h ****   VariableSawOscillator() { }
 1052              		.loc 33 46 3 is_stmt 1 view .LVU287
 1053              		.loc 33 46 3 is_stmt 0 view .LVU288
 1054              	.LBE1400:
 1055              	.LBE1395:
 1056              	.LBE1394:
 1057              	.LBB1401:
 1058              	.LBI1401:
 1059              		.file 34 "eurorack/plaits/dsp/engine/waveshaping_engine.h"
   1:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/waveshaping_engine.h **** //
   3:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/waveshaping_engine.h **** //
   5:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // 
  12:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // 
  15:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // 
  23:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/waveshaping_engine.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 62


  25:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/waveshaping_engine.h **** //
  27:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // Slope -> Waveshaper -> Wavefolder.
  28:eurorack/plaits/dsp/engine/waveshaping_engine.h **** 
  29:eurorack/plaits/dsp/engine/waveshaping_engine.h **** #ifndef PLAITS_DSP_ENGINE_WAVESHAPING_ENGINE_H_
  30:eurorack/plaits/dsp/engine/waveshaping_engine.h **** #define PLAITS_DSP_ENGINE_WAVESHAPING_ENGINE_H_
  31:eurorack/plaits/dsp/engine/waveshaping_engine.h **** 
  32:eurorack/plaits/dsp/engine/waveshaping_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/waveshaping_engine.h **** #include "plaits/dsp/oscillator/oscillator.h"
  34:eurorack/plaits/dsp/engine/waveshaping_engine.h **** 
  35:eurorack/plaits/dsp/engine/waveshaping_engine.h **** namespace plaits {
  36:eurorack/plaits/dsp/engine/waveshaping_engine.h ****   
  37:eurorack/plaits/dsp/engine/waveshaping_engine.h **** class WaveshapingEngine : public Engine {
  38:eurorack/plaits/dsp/engine/waveshaping_engine.h ****  public:
  39:eurorack/plaits/dsp/engine/waveshaping_engine.h ****   WaveshapingEngine() { }
 1060              		.loc 34 39 3 is_stmt 1 view .LVU289
 1061              	.LBB1402:
 1062              	.LBB1403:
 1063              	.LBI1403:
 1064              		.loc 6 80 3 view .LVU290
 1065              		.loc 6 80 3 is_stmt 0 view .LVU291
 1066              	.LBE1403:
 1067              		.loc 34 39 23 view .LVU292
 1068 004e 1E4A     		ldr	r2, .L36+52
 1069 0050 C3F8CC2B 		str	r2, [r3, #3020]
 1070              	.LVL33:
 1071              	.LBB1404:
 1072              	.LBI1404:
 1073              		.file 35 "eurorack/plaits/dsp/oscillator/oscillator.h"
   1:eurorack/plaits/dsp/oscillator/oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/oscillator.h **** // Single waveform oscillator. Can optionally do audio-rate linear FM, with
  28:eurorack/plaits/dsp/oscillator/oscillator.h **** // through-zero capabilities (negative frequencies).
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 63


  29:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  30:eurorack/plaits/dsp/oscillator/oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_OSCILLATOR_H_
  31:eurorack/plaits/dsp/oscillator/oscillator.h **** #define PLAITS_DSP_OSCILLATOR_OSCILLATOR_H_
  32:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  33:eurorack/plaits/dsp/oscillator/oscillator.h **** #include "stmlib/dsp/dsp.h"
  34:eurorack/plaits/dsp/oscillator/oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  35:eurorack/plaits/dsp/oscillator/oscillator.h **** #include "stmlib/dsp/polyblep.h"
  36:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  37:eurorack/plaits/dsp/oscillator/oscillator.h **** namespace plaits {
  38:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  39:eurorack/plaits/dsp/oscillator/oscillator.h **** enum OscillatorShape {
  40:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_IMPULSE_TRAIN,
  41:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SAW,
  42:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_TRIANGLE,
  43:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SLOPE,
  44:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SQUARE,
  45:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SQUARE_BRIGHT,
  46:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SQUARE_DARK,
  47:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SQUARE_TRIANGLE
  48:eurorack/plaits/dsp/oscillator/oscillator.h **** };
  49:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  50:eurorack/plaits/dsp/oscillator/oscillator.h **** const float kMaxFrequency = 0.25f;
  51:eurorack/plaits/dsp/oscillator/oscillator.h **** const float kMinFrequency = 0.000001f;
  52:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  53:eurorack/plaits/dsp/oscillator/oscillator.h **** class Oscillator {
  54:eurorack/plaits/dsp/oscillator/oscillator.h ****  public:
  55:eurorack/plaits/dsp/oscillator/oscillator.h ****   Oscillator() { }
 1074              		.loc 35 55 3 is_stmt 1 view .LVU293
 1075              		.loc 35 55 3 is_stmt 0 view .LVU294
 1076              	.LBE1404:
 1077              	.LBB1405:
 1078              	.LBI1405:
 1079              		.loc 35 55 3 is_stmt 1 view .LVU295
 1080              		.loc 35 55 3 is_stmt 0 view .LVU296
 1081              	.LBE1405:
 1082              	.LBE1402:
 1083              	.LBE1401:
 1084              	.LBB1406:
 1085              	.LBI1406:
 1086              		.file 36 "eurorack/stmlib/dsp/hysteresis_quantizer.h"
   1:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // Copyright 2015 Emilie Gillet.
   2:eurorack/stmlib/dsp/hysteresis_quantizer.h **** //
   3:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/dsp/hysteresis_quantizer.h **** //
   5:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // 
  12:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // 
  15:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 64


  18:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // THE SOFTWARE.
  22:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // 
  23:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/dsp/hysteresis_quantizer.h **** //
  25:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/dsp/hysteresis_quantizer.h **** //
  27:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // Quantize a float in [0, 1] to an integer in [0, num_steps[. Apply hysteresis
  28:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // to prevent jumps near the decision boundary.
  29:eurorack/stmlib/dsp/hysteresis_quantizer.h **** 
  30:eurorack/stmlib/dsp/hysteresis_quantizer.h **** #ifndef STMLIB_DSP_HYSTERESIS_QUANTIZER_H_
  31:eurorack/stmlib/dsp/hysteresis_quantizer.h **** #define STMLIB_DSP_HYSTERESIS_QUANTIZER_H_
  32:eurorack/stmlib/dsp/hysteresis_quantizer.h **** 
  33:eurorack/stmlib/dsp/hysteresis_quantizer.h **** #include "stmlib/stmlib.h"
  34:eurorack/stmlib/dsp/hysteresis_quantizer.h **** 
  35:eurorack/stmlib/dsp/hysteresis_quantizer.h **** namespace stmlib {
  36:eurorack/stmlib/dsp/hysteresis_quantizer.h **** 
  37:eurorack/stmlib/dsp/hysteresis_quantizer.h **** class HysteresisQuantizer {
  38:eurorack/stmlib/dsp/hysteresis_quantizer.h ****  public:
  39:eurorack/stmlib/dsp/hysteresis_quantizer.h ****   HysteresisQuantizer() { }
 1087              		.loc 36 39 3 is_stmt 1 view .LVU297
 1088              		.loc 36 39 3 is_stmt 0 view .LVU298
 1089              	.LBE1406:
 1090              	.LBB1407:
 1091              	.LBI1407:
 1092              		.file 37 "eurorack/plaits/dsp/envelope.h"
   1:eurorack/plaits/dsp/envelope.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/envelope.h **** //
   3:eurorack/plaits/dsp/envelope.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/envelope.h **** //
   5:eurorack/plaits/dsp/envelope.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/envelope.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/envelope.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/envelope.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/envelope.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/envelope.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/envelope.h **** // 
  12:eurorack/plaits/dsp/envelope.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/envelope.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/envelope.h **** // 
  15:eurorack/plaits/dsp/envelope.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/envelope.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/envelope.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/envelope.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/envelope.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/envelope.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/envelope.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/envelope.h **** // 
  23:eurorack/plaits/dsp/envelope.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/envelope.h **** //
  25:eurorack/plaits/dsp/envelope.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/envelope.h **** //
  27:eurorack/plaits/dsp/envelope.h **** // Envelope for the internal LPG.
  28:eurorack/plaits/dsp/envelope.h **** 
  29:eurorack/plaits/dsp/envelope.h **** #ifndef PLAITS_DSP_ENVELOPE_H_
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 65


  30:eurorack/plaits/dsp/envelope.h **** #define PLAITS_DSP_ENVELOPE_H_
  31:eurorack/plaits/dsp/envelope.h **** 
  32:eurorack/plaits/dsp/envelope.h **** #include "stmlib/stmlib.h"
  33:eurorack/plaits/dsp/envelope.h **** 
  34:eurorack/plaits/dsp/envelope.h **** namespace plaits {
  35:eurorack/plaits/dsp/envelope.h **** 
  36:eurorack/plaits/dsp/envelope.h **** class LPGEnvelope {
  37:eurorack/plaits/dsp/envelope.h ****  public:
  38:eurorack/plaits/dsp/envelope.h ****   LPGEnvelope() { }
  39:eurorack/plaits/dsp/envelope.h ****   ~LPGEnvelope() { }
  40:eurorack/plaits/dsp/envelope.h ****   
  41:eurorack/plaits/dsp/envelope.h ****   inline void Init() {
  42:eurorack/plaits/dsp/envelope.h ****     vactrol_state_ = 0.0f;
  43:eurorack/plaits/dsp/envelope.h ****     gain_ = 1.0f;
  44:eurorack/plaits/dsp/envelope.h ****     frequency_ = 0.5f;
  45:eurorack/plaits/dsp/envelope.h ****     hf_bleed_ = 0.0f;
  46:eurorack/plaits/dsp/envelope.h ****   }
  47:eurorack/plaits/dsp/envelope.h ****   
  48:eurorack/plaits/dsp/envelope.h ****   inline void Trigger() {
  49:eurorack/plaits/dsp/envelope.h ****     ramp_up_ = true;
  50:eurorack/plaits/dsp/envelope.h ****   }
  51:eurorack/plaits/dsp/envelope.h ****   
  52:eurorack/plaits/dsp/envelope.h ****   inline void ProcessPing(
  53:eurorack/plaits/dsp/envelope.h ****       float attack,
  54:eurorack/plaits/dsp/envelope.h ****       float short_decay,
  55:eurorack/plaits/dsp/envelope.h ****       float decay_tail,
  56:eurorack/plaits/dsp/envelope.h ****       float hf) {
  57:eurorack/plaits/dsp/envelope.h ****     if (ramp_up_) {
  58:eurorack/plaits/dsp/envelope.h ****       vactrol_state_ += attack;
  59:eurorack/plaits/dsp/envelope.h ****       if (vactrol_state_ >= 1.0f) {
  60:eurorack/plaits/dsp/envelope.h ****         vactrol_state_ = 1.0f;
  61:eurorack/plaits/dsp/envelope.h ****         ramp_up_ = false;
  62:eurorack/plaits/dsp/envelope.h ****       }
  63:eurorack/plaits/dsp/envelope.h ****     }
  64:eurorack/plaits/dsp/envelope.h ****     ProcessLP(ramp_up_ ? vactrol_state_ : 0.0f, short_decay, decay_tail, hf);
  65:eurorack/plaits/dsp/envelope.h ****   }
  66:eurorack/plaits/dsp/envelope.h ****   
  67:eurorack/plaits/dsp/envelope.h ****   inline void ProcessLP(
  68:eurorack/plaits/dsp/envelope.h ****       float level,
  69:eurorack/plaits/dsp/envelope.h ****       float short_decay,
  70:eurorack/plaits/dsp/envelope.h ****       float decay_tail,
  71:eurorack/plaits/dsp/envelope.h ****       float hf) {
  72:eurorack/plaits/dsp/envelope.h ****     float vactrol_input = level;
  73:eurorack/plaits/dsp/envelope.h ****     float vactrol_error = (vactrol_input - vactrol_state_);
  74:eurorack/plaits/dsp/envelope.h ****     float vactrol_state_2 = vactrol_state_ * vactrol_state_;
  75:eurorack/plaits/dsp/envelope.h ****     float vactrol_state_4 = vactrol_state_2 * vactrol_state_2;
  76:eurorack/plaits/dsp/envelope.h ****     float tail = 1.0f - vactrol_state_;
  77:eurorack/plaits/dsp/envelope.h ****     float tail_2 = tail * tail;
  78:eurorack/plaits/dsp/envelope.h ****     float vactrol_coefficient = (vactrol_error > 0.0f)
  79:eurorack/plaits/dsp/envelope.h ****         ? 0.6f
  80:eurorack/plaits/dsp/envelope.h ****         : short_decay + (1.0f - vactrol_state_4) * decay_tail;
  81:eurorack/plaits/dsp/envelope.h ****     vactrol_state_ += vactrol_coefficient * vactrol_error;
  82:eurorack/plaits/dsp/envelope.h ****     
  83:eurorack/plaits/dsp/envelope.h ****     gain_ = vactrol_state_;
  84:eurorack/plaits/dsp/envelope.h ****     frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
  85:eurorack/plaits/dsp/envelope.h ****     hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
  86:eurorack/plaits/dsp/envelope.h ****   }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 66


  87:eurorack/plaits/dsp/envelope.h ****   
  88:eurorack/plaits/dsp/envelope.h ****   inline float gain() const { return gain_; }
  89:eurorack/plaits/dsp/envelope.h ****   inline float frequency() const { return frequency_; }
  90:eurorack/plaits/dsp/envelope.h ****   inline float hf_bleed() const { return hf_bleed_; }
  91:eurorack/plaits/dsp/envelope.h ****   
  92:eurorack/plaits/dsp/envelope.h ****  private:
  93:eurorack/plaits/dsp/envelope.h ****   float vactrol_state_;
  94:eurorack/plaits/dsp/envelope.h ****   float gain_;
  95:eurorack/plaits/dsp/envelope.h ****   float frequency_;
  96:eurorack/plaits/dsp/envelope.h ****   float hf_bleed_;
  97:eurorack/plaits/dsp/envelope.h ****   bool ramp_up_;
  98:eurorack/plaits/dsp/envelope.h ****   
  99:eurorack/plaits/dsp/envelope.h ****   DISALLOW_COPY_AND_ASSIGN(LPGEnvelope);
 100:eurorack/plaits/dsp/envelope.h **** };
 101:eurorack/plaits/dsp/envelope.h **** 
 102:eurorack/plaits/dsp/envelope.h **** class DecayEnvelope {
 103:eurorack/plaits/dsp/envelope.h ****  public:
 104:eurorack/plaits/dsp/envelope.h ****   DecayEnvelope() { }
 1093              		.loc 37 104 3 is_stmt 1 view .LVU299
 1094              		.loc 37 104 3 is_stmt 0 view .LVU300
 1095              	.LBE1407:
 1096              	.LBB1408:
 1097              	.LBI1408:
  38:eurorack/plaits/dsp/envelope.h ****   ~LPGEnvelope() { }
 1098              		.loc 37 38 3 is_stmt 1 view .LVU301
  38:eurorack/plaits/dsp/envelope.h ****   ~LPGEnvelope() { }
 1099              		.loc 37 38 3 is_stmt 0 view .LVU302
 1100              	.LBE1408:
 1101              	.LBB1409:
 1102              	.LBI1409:
 1103              		.loc 29 41 3 is_stmt 1 view .LVU303
 1104              		.loc 29 41 3 is_stmt 0 view .LVU304
 1105              	.LBE1409:
 1106              	.LBB1410:
 1107              	.LBI1410:
  68:eurorack/plaits/dsp/voice.h ****   ~ChannelPostProcessor() { }
 1108              		.loc 4 68 3 is_stmt 1 view .LVU305
 1109              	.LBB1411:
 1110              	.LBI1411:
 1111              		.file 38 "eurorack/stmlib/dsp/limiter.h"
   1:eurorack/stmlib/dsp/limiter.h **** // Copyright 2015 Emilie Gillet.
   2:eurorack/stmlib/dsp/limiter.h **** //
   3:eurorack/stmlib/dsp/limiter.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/dsp/limiter.h **** //
   5:eurorack/stmlib/dsp/limiter.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/dsp/limiter.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/dsp/limiter.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/dsp/limiter.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/dsp/limiter.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/dsp/limiter.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/dsp/limiter.h **** // 
  12:eurorack/stmlib/dsp/limiter.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/dsp/limiter.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/dsp/limiter.h **** // 
  15:eurorack/stmlib/dsp/limiter.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/dsp/limiter.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/dsp/limiter.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 67


  18:eurorack/stmlib/dsp/limiter.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/dsp/limiter.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/dsp/limiter.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/dsp/limiter.h **** // THE SOFTWARE.
  22:eurorack/stmlib/dsp/limiter.h **** // 
  23:eurorack/stmlib/dsp/limiter.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/dsp/limiter.h **** //
  25:eurorack/stmlib/dsp/limiter.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/dsp/limiter.h **** //
  27:eurorack/stmlib/dsp/limiter.h **** // Limiter.
  28:eurorack/stmlib/dsp/limiter.h **** 
  29:eurorack/stmlib/dsp/limiter.h **** #ifndef STMLIB_DSP_LIMITER_H_
  30:eurorack/stmlib/dsp/limiter.h **** #define STMLIB_DSP_LIMITER_H_
  31:eurorack/stmlib/dsp/limiter.h **** 
  32:eurorack/stmlib/dsp/limiter.h **** #include "stmlib/stmlib.h"
  33:eurorack/stmlib/dsp/limiter.h **** 
  34:eurorack/stmlib/dsp/limiter.h **** #include <algorithm>
  35:eurorack/stmlib/dsp/limiter.h **** 
  36:eurorack/stmlib/dsp/limiter.h **** #include "stmlib/dsp/dsp.h"
  37:eurorack/stmlib/dsp/limiter.h **** #include "stmlib/dsp/filter.h"
  38:eurorack/stmlib/dsp/limiter.h **** 
  39:eurorack/stmlib/dsp/limiter.h **** namespace stmlib {
  40:eurorack/stmlib/dsp/limiter.h **** 
  41:eurorack/stmlib/dsp/limiter.h **** class Limiter {
  42:eurorack/stmlib/dsp/limiter.h ****  public:
  43:eurorack/stmlib/dsp/limiter.h ****   Limiter() { }
 1112              		.loc 38 43 3 view .LVU306
 1113              		.loc 38 43 3 is_stmt 0 view .LVU307
 1114              	.LBE1411:
 1115              	.LBB1412:
 1116              	.LBI1412:
 1117              		.file 39 "eurorack/plaits/dsp/fx/low_pass_gate.h"
   1:eurorack/plaits/dsp/fx/low_pass_gate.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/plaits/dsp/fx/low_pass_gate.h **** //
   3:eurorack/plaits/dsp/fx/low_pass_gate.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/fx/low_pass_gate.h **** //
   5:eurorack/plaits/dsp/fx/low_pass_gate.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/fx/low_pass_gate.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/fx/low_pass_gate.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/fx/low_pass_gate.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/fx/low_pass_gate.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/fx/low_pass_gate.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/fx/low_pass_gate.h **** // 
  12:eurorack/plaits/dsp/fx/low_pass_gate.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/fx/low_pass_gate.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/fx/low_pass_gate.h **** // 
  15:eurorack/plaits/dsp/fx/low_pass_gate.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/fx/low_pass_gate.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/fx/low_pass_gate.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/fx/low_pass_gate.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/fx/low_pass_gate.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/fx/low_pass_gate.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/fx/low_pass_gate.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/fx/low_pass_gate.h **** // 
  23:eurorack/plaits/dsp/fx/low_pass_gate.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/fx/low_pass_gate.h **** //
  25:eurorack/plaits/dsp/fx/low_pass_gate.h **** // -----------------------------------------------------------------------------
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 68


  26:eurorack/plaits/dsp/fx/low_pass_gate.h **** //
  27:eurorack/plaits/dsp/fx/low_pass_gate.h **** // Approximative low pass gate.
  28:eurorack/plaits/dsp/fx/low_pass_gate.h **** 
  29:eurorack/plaits/dsp/fx/low_pass_gate.h **** #ifndef PLAITS_DSP_FX_LOW_PASS_GATE_H_
  30:eurorack/plaits/dsp/fx/low_pass_gate.h **** #define PLAITS_DSP_FX_LOW_PASS_GATE_H_
  31:eurorack/plaits/dsp/fx/low_pass_gate.h **** 
  32:eurorack/plaits/dsp/fx/low_pass_gate.h **** #include <algorithm>
  33:eurorack/plaits/dsp/fx/low_pass_gate.h **** 
  34:eurorack/plaits/dsp/fx/low_pass_gate.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/fx/low_pass_gate.h **** #include "stmlib/dsp/filter.h"
  36:eurorack/plaits/dsp/fx/low_pass_gate.h **** #include "stmlib/dsp/parameter_interpolator.h"
  37:eurorack/plaits/dsp/fx/low_pass_gate.h **** 
  38:eurorack/plaits/dsp/fx/low_pass_gate.h **** namespace plaits {
  39:eurorack/plaits/dsp/fx/low_pass_gate.h ****   
  40:eurorack/plaits/dsp/fx/low_pass_gate.h **** class LowPassGate {
  41:eurorack/plaits/dsp/fx/low_pass_gate.h ****  public:
  42:eurorack/plaits/dsp/fx/low_pass_gate.h ****   LowPassGate() { }
 1118              		.loc 39 42 3 is_stmt 1 view .LVU308
 1119              	.LBB1413:
 1120              	.LBI1413:
 1121              		.loc 9 179 3 view .LVU309
 1122              		.loc 9 179 3 is_stmt 0 view .LVU310
 1123              	.LBE1413:
 1124              	.LBE1412:
 1125              	.LBE1410:
 1126              	.LBB1414:
 1127              	.LBI1414:
  68:eurorack/plaits/dsp/voice.h ****   ~ChannelPostProcessor() { }
 1128              		.loc 4 68 3 is_stmt 1 view .LVU311
 1129              	.LBB1415:
 1130              	.LBI1415:
 1131              		.loc 38 43 3 view .LVU312
 1132              		.loc 38 43 3 is_stmt 0 view .LVU313
 1133              	.LBE1415:
 1134              	.LBB1416:
 1135              	.LBI1416:
 1136              		.loc 39 42 3 is_stmt 1 view .LVU314
 1137              	.LBB1417:
 1138              	.LBI1417:
 1139              		.loc 9 179 3 view .LVU315
 1140              		.loc 9 179 3 is_stmt 0 view .LVU316
 1141              	.LBE1417:
 1142              	.LBE1416:
 1143              	.LBE1414:
 1144              	.LBB1418:
 1145              	.LBI1418:
  81:eurorack/plaits/dsp/engine/engine.h ****   ~Engine() { }
  82:eurorack/plaits/dsp/engine/engine.h ****   virtual void Init(stmlib::BufferAllocator* allocator) = 0;
  83:eurorack/plaits/dsp/engine/engine.h ****   virtual void Reset() = 0;
  84:eurorack/plaits/dsp/engine/engine.h ****   virtual void Render(
  85:eurorack/plaits/dsp/engine/engine.h ****       const EngineParameters& parameters,
  86:eurorack/plaits/dsp/engine/engine.h ****       float* out,
  87:eurorack/plaits/dsp/engine/engine.h ****       float* aux,
  88:eurorack/plaits/dsp/engine/engine.h ****       size_t size,
  89:eurorack/plaits/dsp/engine/engine.h ****       bool* already_enveloped) = 0;
  90:eurorack/plaits/dsp/engine/engine.h ****   PostProcessingSettings post_processing_settings;
  91:eurorack/plaits/dsp/engine/engine.h **** };
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 69


  92:eurorack/plaits/dsp/engine/engine.h **** 
  93:eurorack/plaits/dsp/engine/engine.h **** template<int max_size>
  94:eurorack/plaits/dsp/engine/engine.h **** class EngineRegistry {
  95:eurorack/plaits/dsp/engine/engine.h ****  public:
  96:eurorack/plaits/dsp/engine/engine.h ****   EngineRegistry() { }
 1146              		.loc 6 96 3 is_stmt 1 view .LVU317
 1147              		.loc 6 96 3 is_stmt 0 view .LVU318
 1148              	.LBE1418:
 1149              	.LBE1424:
   4:Polyphony.cpp **** plaits::Voice voices[NUM_VOICES];
 1150              		.loc 1 4 32 is_stmt 1 view .LVU319
   4:Polyphony.cpp **** plaits::Voice voices[NUM_VOICES];
 1151              		.loc 1 4 32 view .LVU320
 1152 0054 03F55B63 		add	r3, r3, #3504
 1153 0058 D5D1     		bne	.L32
   4:Polyphony.cpp **** plaits::Voice voices[NUM_VOICES];
 1154              		.loc 1 4 15 is_stmt 0 view .LVU321
 1155 005a 1C4A     		ldr	r2, .L36+56
 1156 005c 1C49     		ldr	r1, .L36+60
 1157 005e FFF7FEFF 		bl	__aeabi_atexit
 1158              	.LVL34:
  18:Polyphony.cpp **** VoiceEnvelope voice_envelopes[NUM_VOICES]; 
 1159              		.loc 1 18 41 is_stmt 1 view .LVU322
 1160 0062 1C4B     		ldr	r3, .L36+64
   4:Polyphony.cpp **** plaits::Voice voices[NUM_VOICES];
 1161              		.loc 1 4 15 is_stmt 0 view .LVU323
 1162 0064 0422     		movs	r2, #4
 1163              	.L33:
 1164              	.LVL35:
 1165              	.LBB1425:
 1166              	.LBI1425:
  20:VoiceEnvelope.h ****         current_state(ENV_IDLE),
 1167              		.loc 3 20 5 is_stmt 1 view .LVU324
 1168              	.LBB1426:
  27:VoiceEnvelope.h ****     {}
 1169              		.loc 3 27 31 is_stmt 0 view .LVU325
 1170 0066 0121     		movs	r1, #1
 1171 0068 0020     		movs	r0, #0
 1172 006a 4FF07C54 		mov	r4, #1056964608
 1173              	.LBE1426:
 1174              	.LBE1425:
  18:Polyphony.cpp **** VoiceEnvelope voice_envelopes[NUM_VOICES]; 
 1175              		.loc 1 18 41 view .LVU326
 1176 006e 013A     		subs	r2, r2, #1
 1177              	.LBB1429:
 1178              	.LBB1427:
  27:VoiceEnvelope.h ****     {}
 1179              		.loc 3 27 31 view .LVU327
 1180 0070 5970     		strb	r1, [r3, #1]
 1181 0072 4FF00001 		mov	r1, #0
 1182 0076 1870     		strb	r0, [r3]
 1183              	.LBE1427:
 1184              	.LBE1429:
  18:Polyphony.cpp **** VoiceEnvelope voice_envelopes[NUM_VOICES]; 
 1185              		.loc 1 18 41 view .LVU328
 1186 0078 03F14403 		add	r3, r3, #68
 1187              	.LVL36:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 70


 1188              	.LBB1430:
 1189              	.LBB1428:
  27:VoiceEnvelope.h ****     {}
 1190              		.loc 3 27 31 view .LVU329
 1191 007c 43F8401C 		str	r1, [r3, #-64]	@ float
 1192 0080 43F83C4C 		str	r4, [r3, #-60]	@ float
 1193 0084 43F8384C 		str	r4, [r3, #-56]	@ float
 1194 0088 43F8080C 		str	r0, [r3, #-8]
 1195 008c 43F8041C 		str	r1, [r3, #-4]	@ float
 1196              	.LVL37:
  27:VoiceEnvelope.h ****     {}
 1197              		.loc 3 27 31 view .LVU330
 1198              	.LBE1428:
 1199              	.LBE1430:
  18:Polyphony.cpp **** VoiceEnvelope voice_envelopes[NUM_VOICES]; 
 1200              		.loc 1 18 41 is_stmt 1 view .LVU331
  18:Polyphony.cpp **** VoiceEnvelope voice_envelopes[NUM_VOICES]; 
 1201              		.loc 1 18 41 view .LVU332
 1202 0090 E9D1     		bne	.L33
 1203              	.LBE1436:
 1204              	.LBE1442:
 1205              		.loc 1 79 1 is_stmt 0 view .LVU333
 1206 0092 10BD     		pop	{r4, pc}
 1207              	.L37:
 1208              		.align	2
 1209              	.L36:
 1210 0094 00000000 		.word	voices
 1211 0098 08000000 		.word	_ZTVN6plaits14AdditiveEngineE+8
 1212 009c 08000000 		.word	_ZTVN6plaits14BassDrumEngineE+8
 1213 00a0 08000000 		.word	_ZTVN6plaits8FMEngineE+8
 1214 00a4 08000000 		.word	_ZTVN6plaits11GrainEngineE+8
 1215 00a8 08000000 		.word	_ZTVN6plaits11HiHatEngineE+8
 1216 00ac 08000000 		.word	_ZTVN6plaits11ModalEngineE+8
 1217 00b0 08000000 		.word	_ZTVN6plaits11NoiseEngineE+8
 1218 00b4 08000000 		.word	_ZTVN6plaits14ParticleEngineE+8
 1219 00b8 08000000 		.word	_ZTVN6plaits15SnareDrumEngineE+8
 1220 00bc 08000000 		.word	_ZTVN6plaits12StringEngineE+8
 1221 00c0 08000000 		.word	_ZTVN6plaits11SwarmEngineE+8
 1222 00c4 08000000 		.word	_ZTVN6plaits19VirtualAnalogEngineE+8
 1223 00c8 08000000 		.word	_ZTVN6plaits17WaveshapingEngineE+8
 1224 00cc 00000000 		.word	__dso_handle
 1225 00d0 00000000 		.word	__tcf_0
 1226 00d4 00000000 		.word	.LANCHOR4
 1227              		.cfi_endproc
 1228              	.LFE6066:
 1230              		.section	.init_array,"aw",%init_array
 1231              		.align	2
 1232 0000 00000000 		.word	_GLOBAL__sub_I_voices(target1)
 1233              		.global	MAX_ENGINE_INDEX
 1234              		.global	kTouchMidiNotes
 1235              		.global	voice_envelopes
 1236              		.global	last_touch_state
 1237              		.global	voice_values
 1238              		.global	voice_note
 1239              		.global	voice_active
 1240              		.global	output_buffers
 1241              		.global	shared_buffer
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 71


 1242              		.global	modulations
 1243              		.global	patches
 1244              		.global	voices
 1245              		.section	.bss.last_touch_state,"aw",%nobits
 1246              		.align	1
 1249              	last_touch_state:
 1250 0000 0000     		.space	2
 1251              		.section	.bss.modulations,"aw",%nobits
 1252              		.align	2
 1253              		.set	.LANCHOR2,. + 0
 1256              	modulations:
 1257 0000 00000000 		.space	160
 1257      00000000 
 1257      00000000 
 1257      00000000 
 1257      00000000 
 1258              		.section	.bss.output_buffers,"aw",%nobits
 1259              		.align	1
 1262              	output_buffers:
 1263 0000 00000000 		.space	256
 1263      00000000 
 1263      00000000 
 1263      00000000 
 1263      00000000 
 1264              		.section	.bss.patches,"aw",%nobits
 1265              		.align	2
 1266              		.set	.LANCHOR3,. + 0
 1269              	patches:
 1270 0000 00000000 		.space	160
 1270      00000000 
 1270      00000000 
 1270      00000000 
 1270      00000000 
 1271              		.section	.bss.voice_active,"aw",%nobits
 1272              		.set	.LANCHOR1,. + 0
 1275              	voice_active:
 1276 0000 00000000 		.space	4
 1277              		.section	.bss.voice_envelopes,"aw",%nobits
 1278              		.align	2
 1279              		.set	.LANCHOR4,. + 0
 1282              	voice_envelopes:
 1283 0000 00000000 		.space	272
 1283      00000000 
 1283      00000000 
 1283      00000000 
 1283      00000000 
 1284              		.section	.bss.voice_note,"aw",%nobits
 1285              		.align	2
 1286              		.set	.LANCHOR0,. + 0
 1289              	voice_note:
 1290 0000 00000000 		.space	16
 1290      00000000 
 1290      00000000 
 1290      00000000 
 1291              		.section	.bss.voice_values,"aw",%nobits
 1292              		.align	2
 1293              		.set	.LANCHOR5,. + 0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 72


 1296              	voice_values:
 1297 0000 00000000 		.space	16
 1297      00000000 
 1297      00000000 
 1297      00000000 
 1298              		.section	.bss.voices,"aw",%nobits
 1299              		.align	2
 1302              	voices:
 1303 0000 00000000 		.space	14016
 1303      00000000 
 1303      00000000 
 1303      00000000 
 1303      00000000 
 1304              		.section	.rodata.MAX_ENGINE_INDEX,"a"
 1305              		.align	2
 1308              	MAX_ENGINE_INDEX:
 1309 0000 0C000000 		.word	12
 1310              		.section	.rodata.kTouchMidiNotes,"a"
 1311              		.align	2
 1314              	kTouchMidiNotes:
 1315 0000 00002042 		.word	1109393408
 1316 0004 00002442 		.word	1109655552
 1317 0008 00002C42 		.word	1110179840
 1318 000c 00003442 		.word	1110704128
 1319 0010 00003C42 		.word	1111228416
 1320 0014 00004042 		.word	1111490560
 1321 0018 00004842 		.word	1112014848
 1322 001c 00005042 		.word	1112539136
 1323 0020 00005442 		.word	1112801280
 1324 0024 00005C42 		.word	1113325568
 1325 0028 00006442 		.word	1113849856
 1326 002c 00006C42 		.word	1114374144
 1327              		.section	.sdram_bss,"aw"
 1330              	shared_buffer:
 1331 0000 00000000 		.space	262144
 1331      00000000 
 1331      00000000 
 1331      00000000 
 1331      00000000 
 1332              		.text
 1333              	.Letext0:
 1334              		.file 40 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/machine/_default_types.h"
 1335              		.file 41 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/_stdint.h"
 1336              		.file 42 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdint.h"
 1337              		.file 43 "/Library/DaisyToolchain/0.2.0/arm/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 1338              		.file 44 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/cpp_type_traits.
 1339              		.file 45 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cmath"
 1340              		.file 46 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h"
 1341              		.file 47 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdlib"
 1342              		.file 48 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdint"
 1343              		.file 49 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/type_traits"
 1344              		.file 50 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h"
 1345              		.file 51 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/debug/debug.h"
 1346              		.file 52 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/arm-none-eabi/thumb/v
 1347              		.file 53 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/algorithmfwd.h"
 1348              		.file 54 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/exception_ptr.h"
 1349              		.file 55 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdarg"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 73


 1350              		.file 56 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdio"
 1351              		.file 57 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstring"
 1352              		.file 58 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cwchar"
 1353              		.file 59 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/clocale"
 1354              		.file 60 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/basic_string.h"
 1355              		.file 61 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_iterator.h"
 1356              		.file 62 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/uses_allocator.h
 1357              		.file 63 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/tuple"
 1358              		.file 64 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/functional"
 1359              		.file 65 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/predefined_ops.h
 1360              		.file 66 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/_types.h"
 1361              		.file 67 "<built-in>"
 1362              		.file 68 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/reent.h"
 1363              		.file 69 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/lock.h"
 1364              		.file 70 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/math.h"
 1365              		.file 71 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdlib.h"
 1366              		.file 72 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/math.h"
 1367              		.file 73 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/stdlib.h"
 1368              		.file 74 "lib/libdaisy/src/daisy_core.h"
 1369              		.file 75 "lib/libdaisy/src/util/wav_format.h"
 1370              		.file 76 "lib/libdaisy/src/daisy_seed.h"
 1371              		.file 77 "/Library/DaisyToolchain/0.2.0/arm/lib/gcc/arm-none-eabi/10.3.1/include/stdarg.h"
 1372              		.file 78 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdio.h"
 1373              		.file 79 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/string.h"
 1374              		.file 80 "lib/DaisySP/Source/Control/adenv.h"
 1375              		.file 81 "lib/DaisySP/Source/Utility/dsp.h"
 1376              		.file 82 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/wchar.h"
 1377              		.file 83 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/locale.h"
 1378              		.file 84 "eurorack/stmlib/stmlib.h"
 1379              		.file 85 "eurorack/stmlib/dsp/cosine_oscillator.h"
 1380              		.file 86 "eurorack/plaits/dsp/dsp.h"
 1381              		.file 87 "eurorack/plaits/dsp/oscillator/harmonic_oscillator.h"
 1382              		.file 88 "eurorack/plaits/dsp/engine/chord_engine.h"
 1383              		.file 89 "eurorack/plaits/dsp/oscillator/grainlet_oscillator.h"
 1384              		.file 90 "eurorack/plaits/dsp/noise/clocked_noise.h"
 1385              		.file 91 "eurorack/plaits/dsp/noise/particle.h"
 1386              		.file 92 "eurorack/plaits/dsp/physical_modelling/string.h"
 1387              		.file 93 "eurorack/plaits/dsp/physical_modelling/string_voice.h"
 1388              		.file 94 "mpr121_daisy.h"
 1389              		.file 95 "Effects/BiquadFilters.h"
 1390              		.file 96 "Arpeggiator.h"
 1391              		.file 97 "Thaumazein.h"
 1392              		.file 98 "lib/libdaisy/src/dev/sr_595.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 74


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Polyphony.cpp
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:19     .text.__tcf_0:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:24     .text.__tcf_0:0000000000000000 __tcf_0
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:38     .text._Z9FindVoicefi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:44     .text._Z9FindVoicefi:0000000000000000 _Z9FindVoicefi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:109    .text._Z9FindVoicefi:000000000000003c $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:116    .text._Z18FindAvailableVoicei:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:122    .text._Z18FindAvailableVoicei:0000000000000000 _Z18FindAvailableVoicei
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:164    .text._Z18FindAvailableVoicei:000000000000001c $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:169    .text._Z14AssignMonoNotef:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:175    .text._Z14AssignMonoNotef:0000000000000000 _Z14AssignMonoNotef
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:205    .text._Z14AssignMonoNotef:0000000000000018 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:212    .text._Z16InitializeVoicesv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:218    .text._Z16InitializeVoicesv:0000000000000000 _Z16InitializeVoicesv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:553    .text._Z16InitializeVoicesv:00000000000000a0 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:1330   .sdram_bss:0000000000000000 shared_buffer
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:1302   .bss.voices:0000000000000000 voices
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:574    .text.startup._GLOBAL__sub_I_voices:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:579    .text.startup._GLOBAL__sub_I_voices:0000000000000000 _GLOBAL__sub_I_voices
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:1210   .text.startup._GLOBAL__sub_I_voices:0000000000000094 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:1231   .init_array:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:1308   .rodata.MAX_ENGINE_INDEX:0000000000000000 MAX_ENGINE_INDEX
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:1314   .rodata.kTouchMidiNotes:0000000000000000 kTouchMidiNotes
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:1282   .bss.voice_envelopes:0000000000000000 voice_envelopes
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:1249   .bss.last_touch_state:0000000000000000 last_touch_state
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:1296   .bss.voice_values:0000000000000000 voice_values
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:1289   .bss.voice_note:0000000000000000 voice_note
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:1275   .bss.voice_active:0000000000000000 voice_active
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:1262   .bss.output_buffers:0000000000000000 output_buffers
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:1256   .bss.modulations:0000000000000000 modulations
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:1269   .bss.patches:0000000000000000 patches
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:1246   .bss.last_touch_state:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:1252   .bss.modulations:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:1259   .bss.output_buffers:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:1265   .bss.patches:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:1276   .bss.voice_active:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:1278   .bss.voice_envelopes:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:1285   .bss.voice_note:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:1292   .bss.voice_values:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:1299   .bss.voices:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:1305   .rodata.MAX_ENGINE_INDEX:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:1311   .rodata.kTouchMidiNotes:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s:1331   .sdram_bss:0000000000000000 $d

UNDEFINED SYMBOLS
_ZN6plaits5Voice4InitEPN6stmlib15BufferAllocatorE
__aeabi_atexit
_ZTVN6plaits14AdditiveEngineE
_ZTVN6plaits14BassDrumEngineE
_ZTVN6plaits8FMEngineE
_ZTVN6plaits11GrainEngineE
_ZTVN6plaits11HiHatEngineE
_ZTVN6plaits11ModalEngineE
_ZTVN6plaits11NoiseEngineE
_ZTVN6plaits14ParticleEngineE
_ZTVN6plaits15SnareDrumEngineE
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccZNOPT6.s 			page 75


_ZTVN6plaits12StringEngineE
_ZTVN6plaits11SwarmEngineE
_ZTVN6plaits19VirtualAnalogEngineE
_ZTVN6plaits17WaveshapingEngineE
__dso_handle
