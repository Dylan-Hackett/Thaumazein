ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"Polyphony.cpp"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text._ZN15PolyphonyEngineD2Ev,"ax",%progbits
  19              		.align	1
  20              		.global	_ZN15PolyphonyEngineD2Ev
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	_ZN15PolyphonyEngineD2Ev:
  26              	.LVL0:
  27              	.LFB5846:
  28              		.file 1 "Polyphony.cpp"
   1:Polyphony.cpp **** #include "Thaumazein.h"
   2:Polyphony.cpp **** #include "Polyphony.h"
   3:Polyphony.cpp **** #include "stmlib/utils/buffer_allocator.h"
   4:Polyphony.cpp **** 
   5:Polyphony.cpp **** DSY_SDRAM_BSS char shared_buffer[262144];
   6:Polyphony.cpp **** 
   7:Polyphony.cpp **** const int MAX_ENGINE_INDEX = 12;
   8:Polyphony.cpp **** 
   9:Polyphony.cpp **** 
  10:Polyphony.cpp **** PolyphonyEngine poly_engine;
  11:Polyphony.cpp **** 
  12:Polyphony.cpp **** const float PolyphonyEngine::kTouchMidiNotes_[12] = {
  13:Polyphony.cpp ****     40.0f, 41.0f, 43.0f, 45.0f, 47.0f, 48.0f, // E2, F2, G2, A2, B2, C3
  14:Polyphony.cpp ****     50.0f, 52.0f, 53.0f, 55.0f, 57.0f, 59.0f  // D3, E3, F3, G3, A3, B3
  15:Polyphony.cpp **** };
  16:Polyphony.cpp **** 
  17:Polyphony.cpp **** PolyphonyEngine::PolyphonyEngine() : allocator_(nullptr), hw_ptr_(nullptr), engine_changed_flag_(fa
  18:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
  19:Polyphony.cpp ****     memset(voice_note_, 0, sizeof(voice_note_));
  20:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
  21:Polyphony.cpp ****     memset(mix_buffer_aux_, 0, sizeof(mix_buffer_aux_));
  22:Polyphony.cpp **** }
  23:Polyphony.cpp **** 
  24:Polyphony.cpp **** PolyphonyEngine::~PolyphonyEngine() {
  29              		.loc 1 24 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LBB1052:
  25:Polyphony.cpp ****     if (allocator_) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 2


  34              		.loc 1 25 5 view .LVU1
  35              		.loc 1 25 9 is_stmt 0 view .LVU2
  36 0000 00F54053 		add	r3, r0, #12288
  37              	.LBE1052:
  24:Polyphony.cpp ****     if (allocator_) {
  38              		.loc 1 24 1 view .LVU3
  39 0004 10B5     		push	{r4, lr}
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 4, -8
  42              		.cfi_offset 14, -4
  24:Polyphony.cpp ****     if (allocator_) {
  43              		.loc 1 24 1 view .LVU4
  44 0006 0446     		mov	r4, r0
  45              	.LBB1054:
  46              		.loc 1 25 9 view .LVU5
  47 0008 D3F8A40A 		ldr	r0, [r3, #2724]
  48              	.LVL1:
  49              		.loc 1 25 5 view .LVU6
  50 000c 10B1     		cbz	r0, .L2
  26:Polyphony.cpp ****         delete allocator_;
  51              		.loc 1 26 9 is_stmt 1 view .LVU7
  52              	.LVL2:
  53              	.LBB1053:
  54              	.LBI1053:
  55              		.file 2 "eurorack/stmlib/utils/buffer_allocator.h"
   1:eurorack/stmlib/utils/buffer_allocator.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/stmlib/utils/buffer_allocator.h **** //
   3:eurorack/stmlib/utils/buffer_allocator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/utils/buffer_allocator.h **** //
   5:eurorack/stmlib/utils/buffer_allocator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/utils/buffer_allocator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/utils/buffer_allocator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/utils/buffer_allocator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/utils/buffer_allocator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/utils/buffer_allocator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/utils/buffer_allocator.h **** // 
  12:eurorack/stmlib/utils/buffer_allocator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/utils/buffer_allocator.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/utils/buffer_allocator.h **** // 
  15:eurorack/stmlib/utils/buffer_allocator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/utils/buffer_allocator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/utils/buffer_allocator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/utils/buffer_allocator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/utils/buffer_allocator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/utils/buffer_allocator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/utils/buffer_allocator.h **** // THE SOFTWARE.
  22:eurorack/stmlib/utils/buffer_allocator.h **** // 
  23:eurorack/stmlib/utils/buffer_allocator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/utils/buffer_allocator.h **** //
  25:eurorack/stmlib/utils/buffer_allocator.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/utils/buffer_allocator.h **** //
  27:eurorack/stmlib/utils/buffer_allocator.h **** // Stream buffer for serialization.
  28:eurorack/stmlib/utils/buffer_allocator.h **** 
  29:eurorack/stmlib/utils/buffer_allocator.h **** #ifndef STMLIB_UTILS_BUFFER_ALLOCATOR_H_
  30:eurorack/stmlib/utils/buffer_allocator.h **** #define STMLIB_UTILS_BUFFER_ALLOCATOR_H_
  31:eurorack/stmlib/utils/buffer_allocator.h **** 
  32:eurorack/stmlib/utils/buffer_allocator.h **** #include "stmlib/stmlib.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 3


  33:eurorack/stmlib/utils/buffer_allocator.h **** 
  34:eurorack/stmlib/utils/buffer_allocator.h **** namespace stmlib {
  35:eurorack/stmlib/utils/buffer_allocator.h **** 
  36:eurorack/stmlib/utils/buffer_allocator.h **** class BufferAllocator {
  37:eurorack/stmlib/utils/buffer_allocator.h ****  public:
  38:eurorack/stmlib/utils/buffer_allocator.h ****   BufferAllocator() { }
  39:eurorack/stmlib/utils/buffer_allocator.h ****   ~BufferAllocator() { }
  56              		.loc 2 39 3 view .LVU8
  57              		.loc 2 39 3 is_stmt 0 view .LVU9
  58              	.LBE1053:
  59              		.loc 1 26 16 view .LVU10
  60 000e 1021     		movs	r1, #16
  61 0010 FFF7FEFF 		bl	_ZdlPvj
  62              	.LVL3:
  27:Polyphony.cpp ****         allocator_ = nullptr;
  63              		.loc 1 27 9 is_stmt 1 view .LVU11
  64              	.L2:
  65              	.LBE1054:
  28:Polyphony.cpp ****     }
  29:Polyphony.cpp **** }
  66              		.loc 1 29 1 is_stmt 0 view .LVU12
  67 0014 2046     		mov	r0, r4
  68 0016 10BD     		pop	{r4, pc}
  69              		.loc 1 29 1 view .LVU13
  70              		.cfi_endproc
  71              	.LFE5846:
  73              		.global	_ZN15PolyphonyEngineD1Ev
  74              		.thumb_set _ZN15PolyphonyEngineD1Ev,_ZN15PolyphonyEngineD2Ev
  75              		.section	.text._ZN13VoiceEnvelope7TriggerEv,"axG",%progbits,_ZN13VoiceEnvelope7TriggerEv,comdat
  76              		.align	1
  77              		.weak	_ZN13VoiceEnvelope7TriggerEv
  78              		.syntax unified
  79              		.thumb
  80              		.thumb_func
  82              	_ZN13VoiceEnvelope7TriggerEv:
  83              	.LVL4:
  84              	.LFB5540:
  85              		.file 3 "VoiceEnvelope.h"
   1:VoiceEnvelope.h **** #pragma once
   2:VoiceEnvelope.h **** #include <algorithm>
   3:VoiceEnvelope.h **** 
   4:VoiceEnvelope.h **** // Simple envelope for each polyphonic voice
   5:VoiceEnvelope.h **** class VoiceEnvelope {
   6:VoiceEnvelope.h **** public:
   7:VoiceEnvelope.h ****     enum EnvState {
   8:VoiceEnvelope.h ****         ENV_IDLE,
   9:VoiceEnvelope.h ****         ENV_ATTACK,
  10:VoiceEnvelope.h ****         ENV_SUSTAIN,
  11:VoiceEnvelope.h ****         ENV_DECAY,
  12:VoiceEnvelope.h ****         ENV_RESET
  13:VoiceEnvelope.h ****     };
  14:VoiceEnvelope.h **** 
  15:VoiceEnvelope.h ****     enum EnvMode {
  16:VoiceEnvelope.h ****         MODE_AR,   // Attack-Release
  17:VoiceEnvelope.h ****         MODE_ASR   // Attack-Sustain-Release
  18:VoiceEnvelope.h ****     };
  19:VoiceEnvelope.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 4


  20:VoiceEnvelope.h ****     VoiceEnvelope() :
  21:VoiceEnvelope.h ****         current_state(ENV_IDLE),
  22:VoiceEnvelope.h ****         mode(MODE_ASR),
  23:VoiceEnvelope.h ****         current_value(0.0f),
  24:VoiceEnvelope.h ****         attack_curve_coefficient(0.5f),
  25:VoiceEnvelope.h ****         release_curve_coefficient(0.5f),
  26:VoiceEnvelope.h ****         phase(0),
  27:VoiceEnvelope.h ****         decay_start_level(0.0f)
  28:VoiceEnvelope.h ****     {}
  29:VoiceEnvelope.h **** 
  30:VoiceEnvelope.h ****     void Init(float sample_rate) {
  31:VoiceEnvelope.h ****         time_range_2x = 2.0f * 4.0f * sample_rate;  // 4s max time
  32:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
  33:VoiceEnvelope.h ****         min_decay_time_a = 0.4f * sample_rate;      // 400ms min decay A
  34:VoiceEnvelope.h ****         min_decay_time_b = 0.0001f * sample_rate;    // 0.1ms min decay B (pulse-like release)
  35:VoiceEnvelope.h ****         reset_time = 0.008f * sample_rate;          // 8ms reset time
  36:VoiceEnvelope.h ****         reset_coefficient = 1.0f / reset_time;
  37:VoiceEnvelope.h ****         
  38:VoiceEnvelope.h ****         // Default curves
  39:VoiceEnvelope.h ****         SetAttackCurve(0.5f);
  40:VoiceEnvelope.h ****         SetReleaseCurve(0.5f);
  41:VoiceEnvelope.h ****     }
  42:VoiceEnvelope.h **** 
  43:VoiceEnvelope.h ****     void SetMode(EnvMode new_mode) {
  44:VoiceEnvelope.h ****         mode = new_mode;
  45:VoiceEnvelope.h ****     }
  46:VoiceEnvelope.h **** 
  47:VoiceEnvelope.h ****     // Original combined shape method for backward compatibility
  48:VoiceEnvelope.h ****     void SetShape(float value) {
  49:VoiceEnvelope.h ****         float curve;
  50:VoiceEnvelope.h ****         if (value < 0.5f) {
  51:VoiceEnvelope.h ****             attack_time = min_attack_time;
  52:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * value * value) + min_decay_time_a;
  53:VoiceEnvelope.h ****             curve = value * 0.15f;
  54:VoiceEnvelope.h ****         } else {
  55:VoiceEnvelope.h ****             float norm_val = 2.0f * value - 1.0f;
  56:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(time_range_2x * norm_val * norm_val) + min_attack_tim
  57:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
  58:VoiceEnvelope.h ****             curve = 0.5f;
  59:VoiceEnvelope.h ****         }
  60:VoiceEnvelope.h ****         attack_coefficient = 1.0f / attack_time;
  61:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
  62:VoiceEnvelope.h ****         SetAttackCurve(curve);
  63:VoiceEnvelope.h ****         SetReleaseCurve(curve);
  64:VoiceEnvelope.h ****     }
  65:VoiceEnvelope.h ****     
  66:VoiceEnvelope.h ****     // New methods for separate attack and release control
  67:VoiceEnvelope.h ****     void SetAttackTime(float value) {
  68:VoiceEnvelope.h ****         // Map 0-1 value to attack time (exponential scaling)
  69:VoiceEnvelope.h ****         // value³ for finer control at shorter settings
  70:VoiceEnvelope.h ****         float value_cubed = value * value * value;
  71:VoiceEnvelope.h ****         
  72:VoiceEnvelope.h ****         // Special handling for super punchy attacks at low values
  73:VoiceEnvelope.h ****         if (value < 0.1f) {
  74:VoiceEnvelope.h ****             // Extra fast attacks at the beginning of the range
  75:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(min_attack_time + 
  76:VoiceEnvelope.h ****                                            (min_attack_time * 9.0f * value / 0.1f));
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 5


  77:VoiceEnvelope.h ****         } else {
  78:VoiceEnvelope.h ****             // Normal range from 2ms to 4 seconds
  79:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(0.002f * time_range_2x/8.0f + 
  80:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
  81:VoiceEnvelope.h ****         }
  82:VoiceEnvelope.h ****         
  83:VoiceEnvelope.h ****         attack_coefficient = 1.0f / attack_time;
  84:VoiceEnvelope.h ****         
  85:VoiceEnvelope.h ****         // Make curve more exponential for faster attacks
  86:VoiceEnvelope.h ****         if (value < 0.3f) {
  87:VoiceEnvelope.h ****             // More exponential curve for punchy attacks
  88:VoiceEnvelope.h ****             SetAttackCurve(0.7f + (0.3f - value)); // 0.7 to 1.0 range for punchier curve
  89:VoiceEnvelope.h ****         } else {
  90:VoiceEnvelope.h ****             // Normal curve
  91:VoiceEnvelope.h ****             SetAttackCurve(0.5f);
  92:VoiceEnvelope.h ****         }
  93:VoiceEnvelope.h ****     }
  94:VoiceEnvelope.h ****     
  95:VoiceEnvelope.h ****     void SetReleaseTime(float value) {
  96:VoiceEnvelope.h ****         // Map 0-1 value to release time (exponential scaling)
  97:VoiceEnvelope.h ****         // value³ for finer control at shorter settings
  98:VoiceEnvelope.h ****         float value_cubed = value * value * value;
  99:VoiceEnvelope.h ****         
 100:VoiceEnvelope.h ****         // Release time ranges from min_decay_time_b to 8 seconds
 101:VoiceEnvelope.h ****         decay_time = static_cast<size_t>(min_decay_time_b + 
 102:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 103:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
 104:VoiceEnvelope.h ****         
 105:VoiceEnvelope.h ****         // Use consistent release curve regardless of release time
 106:VoiceEnvelope.h ****         SetReleaseCurve(0.5f);
 107:VoiceEnvelope.h ****     }
 108:VoiceEnvelope.h ****     
 109:VoiceEnvelope.h ****     void SetAttackCurve(float value) {
 110:VoiceEnvelope.h ****         float cu = value - 0.5f;
 111:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
 112:VoiceEnvelope.h ****     }
 113:VoiceEnvelope.h ****     
 114:VoiceEnvelope.h ****     void SetReleaseCurve(float value) {
 115:VoiceEnvelope.h ****         float cu = value - 0.5f;
 116:VoiceEnvelope.h ****         release_curve_coefficient = 128.0f * cu * cu;
 117:VoiceEnvelope.h ****     }
 118:VoiceEnvelope.h **** 
 119:VoiceEnvelope.h ****     void Trigger() {
  86              		.loc 3 119 10 is_stmt 1 view -0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              		@ link register save eliminated.
 120:VoiceEnvelope.h ****         switch (current_state) {
  91              		.loc 3 120 9 view .LVU15
  92              		.loc 3 120 17 is_stmt 0 view .LVU16
  93 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
  94              		.loc 3 120 9 view .LVU17
  95 0002 13B1     		cbz	r3, .L7
  96 0004 032B     		cmp	r3, #3
  97 0006 04D0     		beq	.L8
  98 0008 7047     		bx	lr
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 6


  99              	.L7:
 121:VoiceEnvelope.h ****             case ENV_IDLE:
 100              		.loc 3 121 13 is_stmt 1 view .LVU18
 122:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 101              		.loc 3 122 17 view .LVU19
 102              		.loc 3 122 31 is_stmt 0 view .LVU20
 103 000a 0122     		movs	r2, #1
 123:VoiceEnvelope.h ****                 phase = 0;
 104              		.loc 3 123 23 view .LVU21
 105 000c C363     		str	r3, [r0, #60]
 122:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 106              		.loc 3 122 31 view .LVU22
 107 000e 0270     		strb	r2, [r0]
 108              		.loc 3 123 17 is_stmt 1 view .LVU23
 124:VoiceEnvelope.h ****                 break;
 109              		.loc 3 124 17 view .LVU24
 110 0010 7047     		bx	lr
 111              	.L8:
 112              	.LVL5:
 113              	.LBB1059:
 114              	.LBI1059:
 119:VoiceEnvelope.h ****         switch (current_state) {
 115              		.loc 3 119 10 view .LVU25
 116              	.LBB1060:
 125:VoiceEnvelope.h ****             case ENV_DECAY:
 117              		.loc 3 125 13 view .LVU26
 126:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 118              		.loc 3 126 17 view .LVU27
 119              	.LBB1061:
 120              	.LBB1062:
 127:VoiceEnvelope.h ****                 phase = CalculateAttackPhase(current_value);
 128:VoiceEnvelope.h ****                 break;
 129:VoiceEnvelope.h ****             default:
 130:VoiceEnvelope.h ****                 break;
 131:VoiceEnvelope.h ****         }
 132:VoiceEnvelope.h ****     }
 133:VoiceEnvelope.h **** 
 134:VoiceEnvelope.h ****     void Release() {
 135:VoiceEnvelope.h ****         switch (current_state) {
 136:VoiceEnvelope.h ****             case ENV_ATTACK:
 137:VoiceEnvelope.h ****                 // Preserve the attack curve character when transitioning to release
 138:VoiceEnvelope.h ****                 // This decouples release time from affecting attack punchiness
 139:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(static_cast<float>(phase) * attack_coeffic
 140:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 141:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 142:VoiceEnvelope.h ****                 break;
 143:VoiceEnvelope.h ****             case ENV_SUSTAIN:
 144:VoiceEnvelope.h ****                 phase = 0;
 145:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 146:VoiceEnvelope.h ****                 break;
 147:VoiceEnvelope.h ****             default:
 148:VoiceEnvelope.h ****                 break;
 149:VoiceEnvelope.h ****         }
 150:VoiceEnvelope.h ****     }
 151:VoiceEnvelope.h **** 
 152:VoiceEnvelope.h ****     float Process() {
 153:VoiceEnvelope.h ****         float ph;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 7


 154:VoiceEnvelope.h ****         switch (current_state) {
 155:VoiceEnvelope.h ****             case ENV_IDLE:
 156:VoiceEnvelope.h ****                 current_value = 0.0f;
 157:VoiceEnvelope.h ****                 break;
 158:VoiceEnvelope.h **** 
 159:VoiceEnvelope.h ****             case ENV_ATTACK:
 160:VoiceEnvelope.h ****                 ph = static_cast<float>(phase) * attack_coefficient;
 161:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 162:VoiceEnvelope.h ****                 if (phase >= attack_time) {
 163:VoiceEnvelope.h ****                     current_state = (mode == MODE_AR) ? ENV_DECAY : ENV_SUSTAIN;
 164:VoiceEnvelope.h ****                     phase = 0;
 165:VoiceEnvelope.h ****                 } else {
 166:VoiceEnvelope.h ****                     phase++;
 167:VoiceEnvelope.h ****                 }
 168:VoiceEnvelope.h ****                 break;
 169:VoiceEnvelope.h **** 
 170:VoiceEnvelope.h ****             case ENV_SUSTAIN:
 171:VoiceEnvelope.h ****                 current_value = 1.0f;
 172:VoiceEnvelope.h ****                 break;
 173:VoiceEnvelope.h **** 
 174:VoiceEnvelope.h ****             case ENV_DECAY:
 175:VoiceEnvelope.h ****                 // Use current_value as starting point for decay
 176:VoiceEnvelope.h ****                 // This preserves the correct level from attack phase
 177:VoiceEnvelope.h ****                 ph = static_cast<float>(phase) * decay_coefficient;
 178:VoiceEnvelope.h ****                 if (phase == 0) {
 179:VoiceEnvelope.h ****                     // On first frame, use current value
 180:VoiceEnvelope.h ****                     decay_start_level = current_value;
 181:VoiceEnvelope.h ****                 }
 182:VoiceEnvelope.h ****                 current_value = decay_start_level * (1.0f - ph) / (1.0f + release_curve_coefficient
 183:VoiceEnvelope.h ****                 
 184:VoiceEnvelope.h ****                 if (phase >= decay_time) {
 185:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 186:VoiceEnvelope.h ****                     phase = 0;
 187:VoiceEnvelope.h ****                 } else {
 188:VoiceEnvelope.h ****                     phase++;
 189:VoiceEnvelope.h ****                 }
 190:VoiceEnvelope.h ****                 break;
 191:VoiceEnvelope.h **** 
 192:VoiceEnvelope.h ****             case ENV_RESET:
 193:VoiceEnvelope.h ****                 current_value = reset_target - static_cast<float>(phase) * reset_coefficient;
 194:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 195:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 196:VoiceEnvelope.h ****                     phase = 0;
 197:VoiceEnvelope.h ****                 } else {
 198:VoiceEnvelope.h ****                     phase++;
 199:VoiceEnvelope.h ****                 }
 200:VoiceEnvelope.h ****                 break;
 201:VoiceEnvelope.h ****         }
 202:VoiceEnvelope.h ****         return std::min(std::max(current_value, 0.0f), 1.0f);
 203:VoiceEnvelope.h ****     }
 204:VoiceEnvelope.h **** 
 205:VoiceEnvelope.h ****     void Reset() {
 206:VoiceEnvelope.h ****         if (current_state == ENV_IDLE) return;
 207:VoiceEnvelope.h ****         current_state = ENV_RESET;
 208:VoiceEnvelope.h ****         reset_target = current_value;
 209:VoiceEnvelope.h ****         phase = 0;
 210:VoiceEnvelope.h ****     }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 8


 211:VoiceEnvelope.h **** 
 212:VoiceEnvelope.h ****     bool IsActive() const {
 213:VoiceEnvelope.h ****         return current_state != ENV_IDLE;
 214:VoiceEnvelope.h ****     }
 215:VoiceEnvelope.h **** 
 216:VoiceEnvelope.h **** private:
 217:VoiceEnvelope.h ****     float CalculateAttackAmplitude(float ph) {
 218:VoiceEnvelope.h ****         return ph / (1.0f + attack_curve_coefficient * (1.0f - ph));
 219:VoiceEnvelope.h ****     }
 220:VoiceEnvelope.h **** 
 221:VoiceEnvelope.h ****     float CalculateDecayAmplitude(float ph) {
 222:VoiceEnvelope.h ****         return (1.0f - ph) / (1.0f + release_curve_coefficient * ph);
 223:VoiceEnvelope.h ****     }
 224:VoiceEnvelope.h **** 
 225:VoiceEnvelope.h ****     size_t CalculateAttackPhase(float amp) {
 226:VoiceEnvelope.h ****         return static_cast<size_t>(roundf(attack_time * amp * (1.0f + attack_curve_coefficient) / (
 121              		.loc 3 226 69 is_stmt 0 view .LVU28
 122 0012 B7EE007A 		vmov.f32	s14, #1.0e+0
 123              	.LBE1062:
 124              	.LBE1061:
 127:VoiceEnvelope.h ****                 phase = CalculateAttackPhase(current_value);
 125              		.loc 3 127 45 view .LVU29
 126 0016 D0ED015A 		vldr.32	s11, [r0, #4]
 127              	.LBB1066:
 128              	.LBB1063:
 129              		.loc 3 226 71 view .LVU30
 130 001a 90ED026A 		vldr.32	s12, [r0, #8]
 131              	.LBE1063:
 132              	.LBE1066:
 126:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 133              		.loc 3 126 31 view .LVU31
 134 001e 0123     		movs	r3, #1
 135              	.LBB1067:
 136              	.LBB1064:
 137              		.loc 3 226 55 view .LVU32
 138 0020 D0ED0D7A 		vldr.32	s15, [r0, #52]	@ int
 139              		.loc 3 226 69 view .LVU33
 140 0024 76EE076A 		vadd.f32	s13, s12, s14
 141              	.LBE1064:
 142              	.LBE1067:
 126:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 143              		.loc 3 126 31 view .LVU34
 144 0028 0370     		strb	r3, [r0]
 127:VoiceEnvelope.h ****                 phase = CalculateAttackPhase(current_value);
 145              		.loc 3 127 17 is_stmt 1 view .LVU35
 146              	.LVL6:
 147              	.LBB1068:
 148              	.LBI1061:
 225:VoiceEnvelope.h ****         return static_cast<size_t>(roundf(attack_time * amp * (1.0f + attack_curve_coefficient) / (
 149              		.loc 3 225 12 view .LVU36
 150              	.LBB1065:
 151              		.loc 3 226 9 view .LVU37
 152              		.loc 3 226 105 is_stmt 0 view .LVU38
 153 002a A5EE867A 		vfma.f32	s14, s11, s12
 154              		.loc 3 226 55 view .LVU39
 155 002e F8EE677A 		vcvt.f32.u32	s15, s15
 156 0032 67EEA57A 		vmul.f32	s15, s15, s11
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 9


 157              		.loc 3 226 61 view .LVU40
 158 0036 67EEA67A 		vmul.f32	s15, s15, s13
 159              		.loc 3 226 105 view .LVU41
 160 003a F0EE476A 		vmov.f32	s13, s14
 161              		.loc 3 226 42 view .LVU42
 162 003e 87EEA67A 		vdiv.f32	s14, s15, s13
 163 0042 F8FE477A 		vrinta.f32	s15, s14
 164              	.LVL7:
 165              		.loc 3 226 139 view .LVU43
 166 0046 FCEEE77A 		vcvt.u32.f32	s15, s15
 167 004a C0ED0F7A 		vstr.32	s15, [r0, #60]	@ int
 168              	.LBE1065:
 169              	.LBE1068:
 128:VoiceEnvelope.h ****             default:
 170              		.loc 3 128 17 is_stmt 1 view .LVU44
 171              	.LVL8:
 128:VoiceEnvelope.h ****             default:
 172              		.loc 3 128 17 is_stmt 0 view .LVU45
 173              	.LBE1060:
 174              	.LBE1059:
 132:VoiceEnvelope.h **** 
 175              		.loc 3 132 5 view .LVU46
 176 004e 7047     		bx	lr
 177              		.cfi_endproc
 178              	.LFE5540:
 180              		.section	.text._ZN13VoiceEnvelope7ReleaseEv,"axG",%progbits,_ZN13VoiceEnvelope7ReleaseEv,comdat
 181              		.align	1
 182              		.weak	_ZN13VoiceEnvelope7ReleaseEv
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 187              	_ZN13VoiceEnvelope7ReleaseEv:
 188              	.LVL9:
 189              	.LFB5541:
 134:VoiceEnvelope.h ****         switch (current_state) {
 190              		.loc 3 134 10 is_stmt 1 view -0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              		@ link register save eliminated.
 135:VoiceEnvelope.h ****             case ENV_ATTACK:
 195              		.loc 3 135 9 view .LVU48
 135:VoiceEnvelope.h ****             case ENV_ATTACK:
 196              		.loc 3 135 17 is_stmt 0 view .LVU49
 197 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 135:VoiceEnvelope.h ****             case ENV_ATTACK:
 198              		.loc 3 135 9 view .LVU50
 199 0002 012B     		cmp	r3, #1
 200 0004 02D0     		beq	.L11
 201 0006 022B     		cmp	r3, #2
 202 0008 14D0     		beq	.L12
 203 000a 7047     		bx	lr
 204              	.L11:
 205              	.LVL10:
 206              	.LBB1073:
 207              	.LBI1073:
 134:VoiceEnvelope.h ****         switch (current_state) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 10


 208              		.loc 3 134 10 is_stmt 1 view .LVU51
 209              	.LBB1074:
 136:VoiceEnvelope.h ****                 // Preserve the attack curve character when transitioning to release
 210              		.loc 3 136 13 view .LVU52
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 211              		.loc 3 139 17 view .LVU53
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 212              		.loc 3 139 58 is_stmt 0 view .LVU54
 213 000c D0ED0F7A 		vldr.32	s15, [r0, #60]	@ int
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 214              		.loc 3 139 57 view .LVU55
 215 0010 90ED0B7A 		vldr.32	s14, [r0, #44]
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 216              		.loc 3 139 58 view .LVU56
 217 0014 F8EE677A 		vcvt.f32.u32	s15, s15
 218              	.LBB1075:
 219              	.LBB1076:
 218:VoiceEnvelope.h ****     }
 220              		.loc 3 218 27 view .LVU57
 221 0018 90ED026A 		vldr.32	s12, [r0, #8]
 222              	.LBE1076:
 223              	.LBE1075:
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 224              		.loc 3 139 57 view .LVU58
 225 001c 67EE877A 		vmul.f32	s15, s15, s14
 226              	.LVL11:
 227              	.LBB1078:
 228              	.LBI1075:
 217:VoiceEnvelope.h ****         return ph / (1.0f + attack_curve_coefficient * (1.0f - ph));
 229              		.loc 3 217 11 is_stmt 1 view .LVU59
 230              	.LBB1077:
 218:VoiceEnvelope.h ****     }
 231              		.loc 3 218 9 view .LVU60
 218:VoiceEnvelope.h ****     }
 232              		.loc 3 218 62 is_stmt 0 view .LVU61
 233 0020 B7EE007A 		vmov.f32	s14, #1.0e+0
 234 0024 77EE676A 		vsub.f32	s13, s14, s15
 218:VoiceEnvelope.h ****     }
 235              		.loc 3 218 27 view .LVU62
 236 0028 A6EE267A 		vfma.f32	s14, s12, s13
 237              	.LVL12:
 218:VoiceEnvelope.h ****     }
 238              		.loc 3 218 67 view .LVU63
 239 002c C7EE876A 		vdiv.f32	s13, s15, s14
 240              	.LBE1077:
 241              	.LBE1078:
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 242              		.loc 3 139 31 view .LVU64
 243 0030 C0ED016A 		vstr.32	s13, [r0, #4]
 140:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 244              		.loc 3 140 17 is_stmt 1 view .LVU65
 245              	.LVL13:
 246              	.L12:
 140:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 247              		.loc 3 140 17 is_stmt 0 view .LVU66
 248              	.LBE1074:
 249              	.LBE1073:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 11


 143:VoiceEnvelope.h ****                 phase = 0;
 250              		.loc 3 143 13 is_stmt 1 view .LVU67
 144:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 251              		.loc 3 144 17 view .LVU68
 144:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 252              		.loc 3 144 23 is_stmt 0 view .LVU69
 253 0034 0023     		movs	r3, #0
 254 0036 C363     		str	r3, [r0, #60]
 145:VoiceEnvelope.h ****                 break;
 255              		.loc 3 145 17 is_stmt 1 view .LVU70
 145:VoiceEnvelope.h ****                 break;
 256              		.loc 3 145 31 is_stmt 0 view .LVU71
 257 0038 0323     		movs	r3, #3
 258 003a 0370     		strb	r3, [r0]
 146:VoiceEnvelope.h ****             default:
 259              		.loc 3 146 17 is_stmt 1 view .LVU72
 150:VoiceEnvelope.h **** 
 260              		.loc 3 150 5 is_stmt 0 view .LVU73
 261 003c 7047     		bx	lr
 262              		.cfi_endproc
 263              	.LFE5541:
 265              		.section	.text._ZN13VoiceEnvelope5ResetEv,"axG",%progbits,_ZN13VoiceEnvelope5ResetEv,comdat
 266              		.align	1
 267              		.weak	_ZN13VoiceEnvelope5ResetEv
 268              		.syntax unified
 269              		.thumb
 270              		.thumb_func
 272              	_ZN13VoiceEnvelope5ResetEv:
 273              	.LVL14:
 274              	.LFB5543:
 205:VoiceEnvelope.h ****         if (current_state == ENV_IDLE) return;
 275              		.loc 3 205 10 is_stmt 1 view -0
 276              		.cfi_startproc
 277              		@ args = 0, pretend = 0, frame = 0
 278              		@ frame_needed = 0, uses_anonymous_args = 0
 279              		@ link register save eliminated.
 206:VoiceEnvelope.h ****         current_state = ENV_RESET;
 280              		.loc 3 206 9 view .LVU75
 281 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 282 0002 2BB1     		cbz	r3, .L14
 283              	.LVL15:
 284              	.LBB1081:
 285              	.LBI1081:
 205:VoiceEnvelope.h ****         if (current_state == ENV_IDLE) return;
 286              		.loc 3 205 10 view .LVU76
 287              	.LBB1082:
 207:VoiceEnvelope.h ****         reset_target = current_value;
 288              		.loc 3 207 9 view .LVU77
 207:VoiceEnvelope.h ****         reset_target = current_value;
 289              		.loc 3 207 23 is_stmt 0 view .LVU78
 290 0004 0423     		movs	r3, #4
 291 0006 0370     		strb	r3, [r0]
 208:VoiceEnvelope.h ****         phase = 0;
 292              		.loc 3 208 9 is_stmt 1 view .LVU79
 208:VoiceEnvelope.h ****         phase = 0;
 293              		.loc 3 208 22 is_stmt 0 view .LVU80
 294 0008 4368     		ldr	r3, [r0, #4]	@ float
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 12


 295 000a 8362     		str	r3, [r0, #40]	@ float
 209:VoiceEnvelope.h ****     }
 296              		.loc 3 209 9 is_stmt 1 view .LVU81
 209:VoiceEnvelope.h ****     }
 297              		.loc 3 209 15 is_stmt 0 view .LVU82
 298 000c 0023     		movs	r3, #0
 299 000e C363     		str	r3, [r0, #60]
 300              	.LVL16:
 301              	.L14:
 209:VoiceEnvelope.h ****     }
 302              		.loc 3 209 15 view .LVU83
 303              	.LBE1082:
 304              	.LBE1081:
 210:VoiceEnvelope.h **** 
 305              		.loc 3 210 5 view .LVU84
 306 0010 7047     		bx	lr
 307              		.cfi_endproc
 308              	.LFE5543:
 310              		.section	.text._ZN15PolyphonyEngineC2Ev,"ax",%progbits
 311              		.align	1
 312              		.global	_ZN15PolyphonyEngineC2Ev
 313              		.syntax unified
 314              		.thumb
 315              		.thumb_func
 317              	_ZN15PolyphonyEngineC2Ev:
 318              	.LVL17:
 319              	.LFB5843:
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 320              		.loc 1 17 1 is_stmt 1 view -0
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 0
 323              		@ frame_needed = 0, uses_anonymous_args = 0
 324              	.LBB1277:
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 325              		.loc 1 17 103 view .LVU86
 326              	.LBE1277:
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 327              		.loc 1 17 1 is_stmt 0 view .LVU87
 328 0000 38B5     		push	{r3, r4, r5, lr}
 329              		.cfi_def_cfa_offset 16
 330              		.cfi_offset 3, -16
 331              		.cfi_offset 4, -12
 332              		.cfi_offset 5, -8
 333              		.cfi_offset 14, -4
 334 0002 00F55B52 		add	r2, r0, #14016
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 335              		.loc 1 17 1 view .LVU88
 336 0006 0446     		mov	r4, r0
 337 0008 0346     		mov	r3, r0
 338              	.L20:
 339              	.LVL18:
 340              	.LBB1387:
 341              	.LBB1278:
 342              	.LBI1278:
 343              		.file 4 "eurorack/plaits/dsp/voice.h"
   1:eurorack/plaits/dsp/voice.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/voice.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 13


   3:eurorack/plaits/dsp/voice.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/voice.h **** //
   5:eurorack/plaits/dsp/voice.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/voice.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/voice.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/voice.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/voice.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/voice.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/voice.h **** // 
  12:eurorack/plaits/dsp/voice.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/voice.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/voice.h **** // 
  15:eurorack/plaits/dsp/voice.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/voice.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/voice.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/voice.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/voice.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/voice.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/voice.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/voice.h **** // 
  23:eurorack/plaits/dsp/voice.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/voice.h **** //
  25:eurorack/plaits/dsp/voice.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/voice.h **** //
  27:eurorack/plaits/dsp/voice.h **** // Main synthesis voice.
  28:eurorack/plaits/dsp/voice.h **** 
  29:eurorack/plaits/dsp/voice.h **** #ifndef PLAITS_DSP_VOICE_H_
  30:eurorack/plaits/dsp/voice.h **** #define PLAITS_DSP_VOICE_H_
  31:eurorack/plaits/dsp/voice.h **** 
  32:eurorack/plaits/dsp/voice.h **** #include "stmlib/stmlib.h"
  33:eurorack/plaits/dsp/voice.h **** 
  34:eurorack/plaits/dsp/voice.h **** #include "stmlib/dsp/filter.h"
  35:eurorack/plaits/dsp/voice.h **** #include "stmlib/dsp/limiter.h"
  36:eurorack/plaits/dsp/voice.h **** #include "stmlib/utils/buffer_allocator.h"
  37:eurorack/plaits/dsp/voice.h **** 
  38:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/additive_engine.h"
  39:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/bass_drum_engine.h"
  40:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/chord_engine.h"
  41:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/engine.h"
  42:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/fm_engine.h"
  43:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/grain_engine.h"
  44:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/hi_hat_engine.h"
  45:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/modal_engine.h"
  46:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/noise_engine.h"
  47:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/particle_engine.h"
  48:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/snare_drum_engine.h"
  49:eurorack/plaits/dsp/voice.h **** // #include "plaits/dsp/engine/speech_engine.h"
  50:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/string_engine.h"
  51:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/swarm_engine.h"
  52:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/virtual_analog_engine.h"
  53:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/waveshaping_engine.h"
  54:eurorack/plaits/dsp/voice.h **** // #include "plaits/dsp/engine/wavetable_engine.h"
  55:eurorack/plaits/dsp/voice.h **** 
  56:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/envelope.h"
  57:eurorack/plaits/dsp/voice.h **** 
  58:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/fx/low_pass_gate.h"
  59:eurorack/plaits/dsp/voice.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 14


  60:eurorack/plaits/dsp/voice.h **** namespace plaits {
  61:eurorack/plaits/dsp/voice.h **** 
  62:eurorack/plaits/dsp/voice.h **** const int kMaxEngines = 16;
  63:eurorack/plaits/dsp/voice.h **** const int kMaxTriggerDelay = 8;
  64:eurorack/plaits/dsp/voice.h **** const int kTriggerDelay = 5;
  65:eurorack/plaits/dsp/voice.h **** 
  66:eurorack/plaits/dsp/voice.h **** class ChannelPostProcessor {
  67:eurorack/plaits/dsp/voice.h ****  public:
  68:eurorack/plaits/dsp/voice.h ****   ChannelPostProcessor() { }
  69:eurorack/plaits/dsp/voice.h ****   ~ChannelPostProcessor() { }
  70:eurorack/plaits/dsp/voice.h ****   
  71:eurorack/plaits/dsp/voice.h ****   void Init() {
  72:eurorack/plaits/dsp/voice.h ****     lpg_.Init();
  73:eurorack/plaits/dsp/voice.h ****     Reset();
  74:eurorack/plaits/dsp/voice.h ****   }
  75:eurorack/plaits/dsp/voice.h ****   
  76:eurorack/plaits/dsp/voice.h ****   void Reset() {
  77:eurorack/plaits/dsp/voice.h ****     limiter_.Init();
  78:eurorack/plaits/dsp/voice.h ****   }
  79:eurorack/plaits/dsp/voice.h ****   
  80:eurorack/plaits/dsp/voice.h ****   void Process(
  81:eurorack/plaits/dsp/voice.h ****       float gain,
  82:eurorack/plaits/dsp/voice.h ****       bool bypass_lpg,
  83:eurorack/plaits/dsp/voice.h ****       float low_pass_gate_gain,
  84:eurorack/plaits/dsp/voice.h ****       float low_pass_gate_frequency,
  85:eurorack/plaits/dsp/voice.h ****       float low_pass_gate_hf_bleed,
  86:eurorack/plaits/dsp/voice.h ****       float* in,
  87:eurorack/plaits/dsp/voice.h ****       short* out,
  88:eurorack/plaits/dsp/voice.h ****       size_t size,
  89:eurorack/plaits/dsp/voice.h ****       size_t stride) {
  90:eurorack/plaits/dsp/voice.h ****     if (gain < 0.0f) {
  91:eurorack/plaits/dsp/voice.h ****       limiter_.Process(-gain, in, size);
  92:eurorack/plaits/dsp/voice.h ****     }
  93:eurorack/plaits/dsp/voice.h ****     const float post_gain = (gain < 0.0f ? 1.0f : gain) * -32767.0f;
  94:eurorack/plaits/dsp/voice.h ****     if (!bypass_lpg) {
  95:eurorack/plaits/dsp/voice.h ****       lpg_.Process(
  96:eurorack/plaits/dsp/voice.h ****           post_gain * low_pass_gate_gain,
  97:eurorack/plaits/dsp/voice.h ****           low_pass_gate_frequency,
  98:eurorack/plaits/dsp/voice.h ****           low_pass_gate_hf_bleed,
  99:eurorack/plaits/dsp/voice.h ****           in,
 100:eurorack/plaits/dsp/voice.h ****           out,
 101:eurorack/plaits/dsp/voice.h ****           size,
 102:eurorack/plaits/dsp/voice.h ****           stride);
 103:eurorack/plaits/dsp/voice.h ****     } else {
 104:eurorack/plaits/dsp/voice.h ****       while (size--) {
 105:eurorack/plaits/dsp/voice.h ****         *out = stmlib::Clip16(1 + static_cast<int32_t>(*in++ * post_gain));
 106:eurorack/plaits/dsp/voice.h ****         out += stride;
 107:eurorack/plaits/dsp/voice.h ****       }
 108:eurorack/plaits/dsp/voice.h ****     }
 109:eurorack/plaits/dsp/voice.h ****   }
 110:eurorack/plaits/dsp/voice.h ****   
 111:eurorack/plaits/dsp/voice.h ****  private:
 112:eurorack/plaits/dsp/voice.h ****   stmlib::Limiter limiter_;
 113:eurorack/plaits/dsp/voice.h ****   LowPassGate lpg_;
 114:eurorack/plaits/dsp/voice.h ****   
 115:eurorack/plaits/dsp/voice.h ****   DISALLOW_COPY_AND_ASSIGN(ChannelPostProcessor);
 116:eurorack/plaits/dsp/voice.h **** };
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 15


 117:eurorack/plaits/dsp/voice.h **** 
 118:eurorack/plaits/dsp/voice.h **** struct Patch {
 119:eurorack/plaits/dsp/voice.h ****   float note;
 120:eurorack/plaits/dsp/voice.h ****   float harmonics;
 121:eurorack/plaits/dsp/voice.h ****   float timbre;
 122:eurorack/plaits/dsp/voice.h ****   float morph;
 123:eurorack/plaits/dsp/voice.h ****   float frequency_modulation_amount;
 124:eurorack/plaits/dsp/voice.h ****   float timbre_modulation_amount;
 125:eurorack/plaits/dsp/voice.h ****   float morph_modulation_amount;
 126:eurorack/plaits/dsp/voice.h **** 
 127:eurorack/plaits/dsp/voice.h ****   int engine;
 128:eurorack/plaits/dsp/voice.h ****   float decay;
 129:eurorack/plaits/dsp/voice.h ****   float lpg_colour;
 130:eurorack/plaits/dsp/voice.h **** };
 131:eurorack/plaits/dsp/voice.h **** 
 132:eurorack/plaits/dsp/voice.h **** struct Modulations {
 133:eurorack/plaits/dsp/voice.h ****   float engine;
 134:eurorack/plaits/dsp/voice.h ****   float note;
 135:eurorack/plaits/dsp/voice.h ****   float frequency;
 136:eurorack/plaits/dsp/voice.h ****   float harmonics;
 137:eurorack/plaits/dsp/voice.h ****   float timbre;
 138:eurorack/plaits/dsp/voice.h ****   float morph;
 139:eurorack/plaits/dsp/voice.h ****   float trigger;
 140:eurorack/plaits/dsp/voice.h ****   float level;
 141:eurorack/plaits/dsp/voice.h **** 
 142:eurorack/plaits/dsp/voice.h ****   bool frequency_patched;
 143:eurorack/plaits/dsp/voice.h ****   bool timbre_patched;
 144:eurorack/plaits/dsp/voice.h ****   bool morph_patched;
 145:eurorack/plaits/dsp/voice.h ****   bool trigger_patched;
 146:eurorack/plaits/dsp/voice.h ****   bool level_patched;
 147:eurorack/plaits/dsp/voice.h **** };
 148:eurorack/plaits/dsp/voice.h **** 
 149:eurorack/plaits/dsp/voice.h **** class Voice {
 150:eurorack/plaits/dsp/voice.h ****  public:
 151:eurorack/plaits/dsp/voice.h ****   Voice() { }
 344              		.loc 4 151 3 is_stmt 1 view .LVU89
 345              	.LBB1279:
 346              	.LBI1279:
 347              		.file 5 "eurorack/plaits/dsp/engine/additive_engine.h"
   1:eurorack/plaits/dsp/engine/additive_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/additive_engine.h **** //
   3:eurorack/plaits/dsp/engine/additive_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/additive_engine.h **** //
   5:eurorack/plaits/dsp/engine/additive_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/additive_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/additive_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/additive_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/additive_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/additive_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/additive_engine.h **** // 
  12:eurorack/plaits/dsp/engine/additive_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/additive_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/additive_engine.h **** // 
  15:eurorack/plaits/dsp/engine/additive_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/additive_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/additive_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/additive_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 16


  19:eurorack/plaits/dsp/engine/additive_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/additive_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/additive_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/additive_engine.h **** // 
  23:eurorack/plaits/dsp/engine/additive_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/additive_engine.h **** //
  25:eurorack/plaits/dsp/engine/additive_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/additive_engine.h **** //
  27:eurorack/plaits/dsp/engine/additive_engine.h **** // Additive synthesis with 24+8 partials.
  28:eurorack/plaits/dsp/engine/additive_engine.h **** 
  29:eurorack/plaits/dsp/engine/additive_engine.h **** #ifndef PLAITS_DSP_ENGINE_ADDITIVE_ENGINE_H_
  30:eurorack/plaits/dsp/engine/additive_engine.h **** #define PLAITS_DSP_ENGINE_ADDITIVE_ENGINE_H_
  31:eurorack/plaits/dsp/engine/additive_engine.h **** 
  32:eurorack/plaits/dsp/engine/additive_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/additive_engine.h **** #include "plaits/dsp/oscillator/harmonic_oscillator.h"
  34:eurorack/plaits/dsp/engine/additive_engine.h **** 
  35:eurorack/plaits/dsp/engine/additive_engine.h **** namespace plaits {
  36:eurorack/plaits/dsp/engine/additive_engine.h ****   
  37:eurorack/plaits/dsp/engine/additive_engine.h **** const int kHarmonicBatchSize = 12;
  38:eurorack/plaits/dsp/engine/additive_engine.h **** const int kNumHarmonics = 36;
  39:eurorack/plaits/dsp/engine/additive_engine.h **** const int kNumHarmonicOscillators = kNumHarmonics / kHarmonicBatchSize;
  40:eurorack/plaits/dsp/engine/additive_engine.h **** 
  41:eurorack/plaits/dsp/engine/additive_engine.h **** class AdditiveEngine : public Engine {
  42:eurorack/plaits/dsp/engine/additive_engine.h ****  public:
  43:eurorack/plaits/dsp/engine/additive_engine.h ****   AdditiveEngine() { }
 348              		.loc 5 43 3 view .LVU90
 349              	.LBB1280:
 350              	.LBB1281:
 351              	.LBI1281:
 352              		.file 6 "eurorack/plaits/dsp/engine/engine.h"
   1:eurorack/plaits/dsp/engine/engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/engine.h **** //
   3:eurorack/plaits/dsp/engine/engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/engine.h **** //
   5:eurorack/plaits/dsp/engine/engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/engine.h **** // 
  12:eurorack/plaits/dsp/engine/engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/engine.h **** // 
  15:eurorack/plaits/dsp/engine/engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/engine.h **** // 
  23:eurorack/plaits/dsp/engine/engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/engine.h **** //
  25:eurorack/plaits/dsp/engine/engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/engine.h **** //
  27:eurorack/plaits/dsp/engine/engine.h **** // Base class for all engines.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 17


  28:eurorack/plaits/dsp/engine/engine.h **** 
  29:eurorack/plaits/dsp/engine/engine.h **** #ifndef PLAITS_DSP_ENGINE_ENGINE_H_
  30:eurorack/plaits/dsp/engine/engine.h **** #define PLAITS_DSP_ENGINE_ENGINE_H_
  31:eurorack/plaits/dsp/engine/engine.h **** 
  32:eurorack/plaits/dsp/engine/engine.h **** #include "plaits/dsp/dsp.h"
  33:eurorack/plaits/dsp/engine/engine.h **** 
  34:eurorack/plaits/dsp/engine/engine.h **** #include "stmlib/dsp/units.h"
  35:eurorack/plaits/dsp/engine/engine.h **** #include "stmlib/utils/buffer_allocator.h"
  36:eurorack/plaits/dsp/engine/engine.h **** 
  37:eurorack/plaits/dsp/engine/engine.h **** namespace plaits {
  38:eurorack/plaits/dsp/engine/engine.h **** 
  39:eurorack/plaits/dsp/engine/engine.h **** inline float NoteToFrequency(float midi_note) {
  40:eurorack/plaits/dsp/engine/engine.h ****   midi_note -= 9.0f;
  41:eurorack/plaits/dsp/engine/engine.h ****   CONSTRAIN(midi_note, -128.0f, 127.0f);
  42:eurorack/plaits/dsp/engine/engine.h ****   return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
  43:eurorack/plaits/dsp/engine/engine.h **** }
  44:eurorack/plaits/dsp/engine/engine.h **** 
  45:eurorack/plaits/dsp/engine/engine.h **** enum TriggerState {
  46:eurorack/plaits/dsp/engine/engine.h ****   TRIGGER_LOW = 0,
  47:eurorack/plaits/dsp/engine/engine.h ****   TRIGGER_RISING_EDGE = 1,
  48:eurorack/plaits/dsp/engine/engine.h ****   TRIGGER_UNPATCHED = 2,
  49:eurorack/plaits/dsp/engine/engine.h ****   TRIGGER_UNPATCHED_AUTOTRIGGED = 3,
  50:eurorack/plaits/dsp/engine/engine.h **** };
  51:eurorack/plaits/dsp/engine/engine.h **** 
  52:eurorack/plaits/dsp/engine/engine.h **** struct EngineParameters {
  53:eurorack/plaits/dsp/engine/engine.h ****   TriggerState trigger;
  54:eurorack/plaits/dsp/engine/engine.h ****   float note;
  55:eurorack/plaits/dsp/engine/engine.h ****   float timbre;
  56:eurorack/plaits/dsp/engine/engine.h ****   float morph;
  57:eurorack/plaits/dsp/engine/engine.h ****   float harmonics;
  58:eurorack/plaits/dsp/engine/engine.h ****   float accent;
  59:eurorack/plaits/dsp/engine/engine.h **** };
  60:eurorack/plaits/dsp/engine/engine.h **** 
  61:eurorack/plaits/dsp/engine/engine.h **** struct PostProcessingSettings {
  62:eurorack/plaits/dsp/engine/engine.h ****   // A negative value indicates that a limiter must be used.
  63:eurorack/plaits/dsp/engine/engine.h ****   float out_gain;
  64:eurorack/plaits/dsp/engine/engine.h ****   float aux_gain;
  65:eurorack/plaits/dsp/engine/engine.h ****   
  66:eurorack/plaits/dsp/engine/engine.h ****   // When this flag is set to true, the engine declares that it will 
  67:eurorack/plaits/dsp/engine/engine.h ****   // render a signal that already has an envelope (eg: modal drum, 808 kick).
  68:eurorack/plaits/dsp/engine/engine.h ****   // By reporting this information, the synthesis voice upstream will
  69:eurorack/plaits/dsp/engine/engine.h ****   // bypass the internal envelope/LPG.
  70:eurorack/plaits/dsp/engine/engine.h ****   //
  71:eurorack/plaits/dsp/engine/engine.h ****   // This parameter can be changed on a per-call basis when calling Render()
  72:eurorack/plaits/dsp/engine/engine.h ****   // This is used by the speech synthesis engine, which renders either
  73:eurorack/plaits/dsp/engine/engine.h ****   // a continuous vowel sound (which needs to be enveloped by the LPG)
  74:eurorack/plaits/dsp/engine/engine.h ****   // or a word/sentence (which is already enveloped).
  75:eurorack/plaits/dsp/engine/engine.h ****   bool already_enveloped;
  76:eurorack/plaits/dsp/engine/engine.h **** };
  77:eurorack/plaits/dsp/engine/engine.h **** 
  78:eurorack/plaits/dsp/engine/engine.h **** class Engine {
  79:eurorack/plaits/dsp/engine/engine.h ****  public:
  80:eurorack/plaits/dsp/engine/engine.h ****   Engine() { }
 353              		.loc 6 80 3 view .LVU91
 354              		.loc 6 80 3 is_stmt 0 view .LVU92
 355              	.LBE1281:
 356              		.loc 5 43 20 view .LVU93
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 18


 357 000a 3449     		ldr	r1, .L24
 358 000c 1960     		str	r1, [r3]
 359              		.loc 5 43 20 is_stmt 1 view .LVU94
 360              	.LVL19:
 361              		.loc 5 43 20 is_stmt 0 view .LVU95
 362              	.LBE1280:
 363              	.LBE1279:
 364              	.LBB1282:
 365              	.LBI1282:
 366              		.file 7 "eurorack/plaits/dsp/engine/bass_drum_engine.h"
   1:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/bass_drum_engine.h **** //
   3:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/bass_drum_engine.h **** //
   5:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // 
  12:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // 
  15:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // 
  23:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/bass_drum_engine.h **** //
  25:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/bass_drum_engine.h **** //
  27:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // 808 and synthetic bass drum generators.
  28:eurorack/plaits/dsp/engine/bass_drum_engine.h **** 
  29:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #ifndef PLAITS_DSP_ENGINE_BASS_DRUM_ENGINE_H_
  30:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #define PLAITS_DSP_ENGINE_BASS_DRUM_ENGINE_H_
  31:eurorack/plaits/dsp/engine/bass_drum_engine.h **** 
  32:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/drums/analog_bass_drum.h"
  33:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/drums/synthetic_bass_drum.h"
  34:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/fx/overdrive.h"
  36:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/fx/sample_rate_reducer.h"
  37:eurorack/plaits/dsp/engine/bass_drum_engine.h **** 
  38:eurorack/plaits/dsp/engine/bass_drum_engine.h **** namespace plaits {
  39:eurorack/plaits/dsp/engine/bass_drum_engine.h ****   
  40:eurorack/plaits/dsp/engine/bass_drum_engine.h **** class BassDrumEngine : public Engine {
  41:eurorack/plaits/dsp/engine/bass_drum_engine.h ****  public:
  42:eurorack/plaits/dsp/engine/bass_drum_engine.h ****   BassDrumEngine() { }
 367              		.loc 7 42 3 is_stmt 1 view .LVU96
 368              	.LBB1283:
 369              	.LBB1284:
 370              	.LBI1284:
 371              		.loc 6 80 3 view .LVU97
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 19


 372              		.loc 6 80 3 is_stmt 0 view .LVU98
 373              	.LBE1284:
 374              		.loc 7 42 20 view .LVU99
 375 000e 3449     		ldr	r1, .L24+4
 376 0010 C3F84811 		str	r1, [r3, #328]
 377              	.LVL20:
 378              	.LBB1285:
 379              	.LBI1285:
 380              		.file 8 "eurorack/plaits/dsp/drums/analog_bass_drum.h"
   1:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/analog_bass_drum.h **** //
   3:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/analog_bass_drum.h **** //
   5:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // 
  12:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // 
  15:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // 
  23:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/analog_bass_drum.h **** //
  25:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/analog_bass_drum.h **** //
  27:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // 808 bass drum model, revisited.
  28:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  29:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #ifndef PLAITS_DSP_DRUMS_ANALOG_BASS_DRUM_H_
  30:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #define PLAITS_DSP_DRUMS_ANALOG_BASS_DRUM_H_
  31:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  32:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include <algorithm>
  33:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  34:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "stmlib/dsp/filter.h"
  36:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "stmlib/dsp/parameter_interpolator.h"
  37:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "stmlib/dsp/units.h"
  38:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  39:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "plaits/dsp/dsp.h"
  40:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "plaits/dsp/oscillator/sine_oscillator.h"
  41:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  42:eurorack/plaits/dsp/drums/analog_bass_drum.h **** namespace plaits {
  43:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  44:eurorack/plaits/dsp/drums/analog_bass_drum.h **** class AnalogBassDrum {
  45:eurorack/plaits/dsp/drums/analog_bass_drum.h ****  public:
  46:eurorack/plaits/dsp/drums/analog_bass_drum.h ****   AnalogBassDrum() { }
 381              		.loc 8 46 3 is_stmt 1 view .LVU100
 382              	.LBB1286:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 20


 383              	.LBI1286:
 384              		.file 9 "eurorack/stmlib/dsp/filter.h"
   1:eurorack/stmlib/dsp/filter.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/stmlib/dsp/filter.h **** //
   3:eurorack/stmlib/dsp/filter.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/dsp/filter.h **** //
   5:eurorack/stmlib/dsp/filter.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/dsp/filter.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/dsp/filter.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/dsp/filter.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/dsp/filter.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/dsp/filter.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/dsp/filter.h **** // 
  12:eurorack/stmlib/dsp/filter.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/dsp/filter.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/dsp/filter.h **** // 
  15:eurorack/stmlib/dsp/filter.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/dsp/filter.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/dsp/filter.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/dsp/filter.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/dsp/filter.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/dsp/filter.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/dsp/filter.h **** // THE SOFTWARE.
  22:eurorack/stmlib/dsp/filter.h **** // 
  23:eurorack/stmlib/dsp/filter.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/dsp/filter.h **** //
  25:eurorack/stmlib/dsp/filter.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/dsp/filter.h **** //
  27:eurorack/stmlib/dsp/filter.h **** // Zero-delay-feedback filters (one pole and SVF).
  28:eurorack/stmlib/dsp/filter.h **** // Naive SVF.
  29:eurorack/stmlib/dsp/filter.h **** 
  30:eurorack/stmlib/dsp/filter.h **** #ifndef STMLIB_DSP_FILTER_H_
  31:eurorack/stmlib/dsp/filter.h **** #define STMLIB_DSP_FILTER_H_
  32:eurorack/stmlib/dsp/filter.h **** 
  33:eurorack/stmlib/dsp/filter.h **** #include "stmlib/stmlib.h"
  34:eurorack/stmlib/dsp/filter.h **** 
  35:eurorack/stmlib/dsp/filter.h **** #include <cmath>
  36:eurorack/stmlib/dsp/filter.h **** #include <algorithm>
  37:eurorack/stmlib/dsp/filter.h **** 
  38:eurorack/stmlib/dsp/filter.h **** namespace stmlib {
  39:eurorack/stmlib/dsp/filter.h **** 
  40:eurorack/stmlib/dsp/filter.h **** enum FilterMode {
  41:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_LOW_PASS,
  42:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_BAND_PASS,
  43:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_BAND_PASS_NORMALIZED,
  44:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_HIGH_PASS
  45:eurorack/stmlib/dsp/filter.h **** };
  46:eurorack/stmlib/dsp/filter.h **** 
  47:eurorack/stmlib/dsp/filter.h **** enum FrequencyApproximation {
  48:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_EXACT,
  49:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_ACCURATE,
  50:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_FAST,
  51:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_DIRTY
  52:eurorack/stmlib/dsp/filter.h **** };
  53:eurorack/stmlib/dsp/filter.h **** 
  54:eurorack/stmlib/dsp/filter.h **** #define M_PI_F float(M_PI)
  55:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_2 M_PI * M_PI
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 21


  56:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_3 M_PI_POW_2 * M_PI
  57:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_5 M_PI_POW_3 * M_PI_POW_2
  58:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_7 M_PI_POW_5 * M_PI_POW_2
  59:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_9 M_PI_POW_7 * M_PI_POW_2
  60:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_11 M_PI_POW_9 * M_PI_POW_2
  61:eurorack/stmlib/dsp/filter.h **** 
  62:eurorack/stmlib/dsp/filter.h **** class DCBlocker {
  63:eurorack/stmlib/dsp/filter.h ****  public:
  64:eurorack/stmlib/dsp/filter.h ****   DCBlocker() { }
  65:eurorack/stmlib/dsp/filter.h ****   ~DCBlocker() { }
  66:eurorack/stmlib/dsp/filter.h ****   
  67:eurorack/stmlib/dsp/filter.h ****   void Init(float pole) {
  68:eurorack/stmlib/dsp/filter.h ****     x_ = 0.0f;
  69:eurorack/stmlib/dsp/filter.h ****     y_ = 0.0f;
  70:eurorack/stmlib/dsp/filter.h ****     pole_ = pole;
  71:eurorack/stmlib/dsp/filter.h ****   }
  72:eurorack/stmlib/dsp/filter.h ****   
  73:eurorack/stmlib/dsp/filter.h ****   inline void Process(float* in_out, size_t size) {
  74:eurorack/stmlib/dsp/filter.h ****     float x = x_;
  75:eurorack/stmlib/dsp/filter.h ****     float y = y_;
  76:eurorack/stmlib/dsp/filter.h ****     const float pole = pole_;
  77:eurorack/stmlib/dsp/filter.h ****     while (size--) {
  78:eurorack/stmlib/dsp/filter.h ****       float old_x = x;
  79:eurorack/stmlib/dsp/filter.h ****       x = *in_out;
  80:eurorack/stmlib/dsp/filter.h ****       *in_out++ = y = y * pole + x - old_x;
  81:eurorack/stmlib/dsp/filter.h ****     }
  82:eurorack/stmlib/dsp/filter.h ****     x_ = x;
  83:eurorack/stmlib/dsp/filter.h ****     y_ = y;
  84:eurorack/stmlib/dsp/filter.h ****   }
  85:eurorack/stmlib/dsp/filter.h ****   
  86:eurorack/stmlib/dsp/filter.h ****  private:
  87:eurorack/stmlib/dsp/filter.h ****   float pole_;
  88:eurorack/stmlib/dsp/filter.h ****   float x_;
  89:eurorack/stmlib/dsp/filter.h ****   float y_;
  90:eurorack/stmlib/dsp/filter.h **** };
  91:eurorack/stmlib/dsp/filter.h **** 
  92:eurorack/stmlib/dsp/filter.h **** class OnePole {
  93:eurorack/stmlib/dsp/filter.h ****  public:
  94:eurorack/stmlib/dsp/filter.h ****   OnePole() { }
  95:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
  96:eurorack/stmlib/dsp/filter.h ****   
  97:eurorack/stmlib/dsp/filter.h ****   void Init() {
  98:eurorack/stmlib/dsp/filter.h ****     set_f<FREQUENCY_DIRTY>(0.01f);
  99:eurorack/stmlib/dsp/filter.h ****     Reset();
 100:eurorack/stmlib/dsp/filter.h ****   }
 101:eurorack/stmlib/dsp/filter.h ****   
 102:eurorack/stmlib/dsp/filter.h ****   void Reset() {
 103:eurorack/stmlib/dsp/filter.h ****     state_ = 0.0f;
 104:eurorack/stmlib/dsp/filter.h ****   }
 105:eurorack/stmlib/dsp/filter.h ****   
 106:eurorack/stmlib/dsp/filter.h ****   template<FrequencyApproximation approximation>
 107:eurorack/stmlib/dsp/filter.h ****   static inline float tan(float f) {
 108:eurorack/stmlib/dsp/filter.h ****     if (approximation == FREQUENCY_EXACT) {
 109:eurorack/stmlib/dsp/filter.h ****       // Clip coefficient to about 100.
 110:eurorack/stmlib/dsp/filter.h ****       f = f < 0.497f ? f : 0.497f;
 111:eurorack/stmlib/dsp/filter.h ****       return tanf(M_PI_F * f);
 112:eurorack/stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_DIRTY) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 22


 113:eurorack/stmlib/dsp/filter.h ****       // Optimized for frequencies below 8kHz.
 114:eurorack/stmlib/dsp/filter.h ****       const float a = 3.736e-01f * M_PI_POW_3;
 115:eurorack/stmlib/dsp/filter.h ****       return f * (M_PI_F + a * f * f);
 116:eurorack/stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_FAST) {
 117:eurorack/stmlib/dsp/filter.h ****       // The usual tangent approximation uses 3.1755e-01 and 2.033e-01, but
 118:eurorack/stmlib/dsp/filter.h ****       // the coefficients used here are optimized to minimize error for the
 119:eurorack/stmlib/dsp/filter.h ****       // 16Hz to 16kHz range, with a sample rate of 48kHz.
 120:eurorack/stmlib/dsp/filter.h ****       const float a = 3.260e-01f * M_PI_POW_3;
 121:eurorack/stmlib/dsp/filter.h ****       const float b = 1.823e-01f * M_PI_POW_5;
 122:eurorack/stmlib/dsp/filter.h ****       float f2 = f * f;
 123:eurorack/stmlib/dsp/filter.h ****       return f * (M_PI_F + f2 * (a + b * f2));
 124:eurorack/stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_ACCURATE) {
 125:eurorack/stmlib/dsp/filter.h ****       // These coefficients don't need to be tweaked for the audio range.
 126:eurorack/stmlib/dsp/filter.h ****       const float a = 3.333314036e-01f * M_PI_POW_3;
 127:eurorack/stmlib/dsp/filter.h ****       const float b = 1.333923995e-01f * M_PI_POW_5;
 128:eurorack/stmlib/dsp/filter.h ****       const float c = 5.33740603e-02f * M_PI_POW_7;
 129:eurorack/stmlib/dsp/filter.h ****       const float d = 2.900525e-03f * M_PI_POW_9;
 130:eurorack/stmlib/dsp/filter.h ****       const float e = 9.5168091e-03f * M_PI_POW_11;
 131:eurorack/stmlib/dsp/filter.h ****       float f2 = f * f;
 132:eurorack/stmlib/dsp/filter.h ****       return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
 133:eurorack/stmlib/dsp/filter.h ****     }
 134:eurorack/stmlib/dsp/filter.h ****   }
 135:eurorack/stmlib/dsp/filter.h ****   
 136:eurorack/stmlib/dsp/filter.h ****   // Set frequency and resonance from true units. Various approximations
 137:eurorack/stmlib/dsp/filter.h ****   // are available to avoid the cost of tanf.
 138:eurorack/stmlib/dsp/filter.h ****   template<FrequencyApproximation approximation>
 139:eurorack/stmlib/dsp/filter.h ****   inline void set_f(float f) {
 140:eurorack/stmlib/dsp/filter.h ****     g_ = tan<approximation>(f);
 141:eurorack/stmlib/dsp/filter.h ****     gi_ = 1.0f / (1.0f + g_);
 142:eurorack/stmlib/dsp/filter.h ****   }
 143:eurorack/stmlib/dsp/filter.h ****   
 144:eurorack/stmlib/dsp/filter.h ****   template<FilterMode mode>
 145:eurorack/stmlib/dsp/filter.h ****   inline float Process(float in) {
 146:eurorack/stmlib/dsp/filter.h ****     float lp;
 147:eurorack/stmlib/dsp/filter.h ****     lp = (g_ * in + state_) * gi_;
 148:eurorack/stmlib/dsp/filter.h ****     state_ = g_ * (in - lp) + lp;
 149:eurorack/stmlib/dsp/filter.h **** 
 150:eurorack/stmlib/dsp/filter.h ****     if (mode == FILTER_MODE_LOW_PASS) {
 151:eurorack/stmlib/dsp/filter.h ****       return lp;
 152:eurorack/stmlib/dsp/filter.h ****     } else if (mode == FILTER_MODE_HIGH_PASS) {
 153:eurorack/stmlib/dsp/filter.h ****       return in - lp;
 154:eurorack/stmlib/dsp/filter.h ****     } else {
 155:eurorack/stmlib/dsp/filter.h ****       return 0.0f;
 156:eurorack/stmlib/dsp/filter.h ****     }
 157:eurorack/stmlib/dsp/filter.h ****   }
 158:eurorack/stmlib/dsp/filter.h ****   
 159:eurorack/stmlib/dsp/filter.h ****   template<FilterMode mode>
 160:eurorack/stmlib/dsp/filter.h ****   inline void Process(float* in_out, size_t size) {
 161:eurorack/stmlib/dsp/filter.h ****     while (size--) {
 162:eurorack/stmlib/dsp/filter.h ****       *in_out = Process<mode>(*in_out);
 163:eurorack/stmlib/dsp/filter.h ****       ++in_out;
 164:eurorack/stmlib/dsp/filter.h ****     }
 165:eurorack/stmlib/dsp/filter.h ****   }
 166:eurorack/stmlib/dsp/filter.h ****   
 167:eurorack/stmlib/dsp/filter.h ****  private:
 168:eurorack/stmlib/dsp/filter.h ****   float g_;
 169:eurorack/stmlib/dsp/filter.h ****   float gi_;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 23


 170:eurorack/stmlib/dsp/filter.h ****   float state_;
 171:eurorack/stmlib/dsp/filter.h ****   
 172:eurorack/stmlib/dsp/filter.h ****   DISALLOW_COPY_AND_ASSIGN(OnePole);
 173:eurorack/stmlib/dsp/filter.h **** };
 174:eurorack/stmlib/dsp/filter.h **** 
 175:eurorack/stmlib/dsp/filter.h **** 
 176:eurorack/stmlib/dsp/filter.h **** 
 177:eurorack/stmlib/dsp/filter.h **** class Svf {
 178:eurorack/stmlib/dsp/filter.h ****  public:
 179:eurorack/stmlib/dsp/filter.h ****   Svf() { }
 385              		.loc 9 179 3 view .LVU101
 386              		.loc 9 179 3 is_stmt 0 view .LVU102
 387              	.LBE1286:
 388              	.LBB1287:
 389              	.LBI1287:
 390              		.file 10 "eurorack/plaits/dsp/oscillator/sine_oscillator.h"
   1:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // Simple sine oscillator (wavetable) + fast sine oscillator (magic circle).
  28:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
  29:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // The fast implementation might glitch a bit under heavy modulations of the
  30:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // frequency.
  31:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  32:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_SINE_OSCILLATOR_H_
  33:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #define PLAITS_DSP_OSCILLATOR_SINE_OSCILLATOR_H_
  34:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  35:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #include "stmlib/dsp/dsp.h"
  36:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  37:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #include "stmlib/dsp/rsqrt.h"
  38:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  39:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #include "plaits/resources.h"
  40:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  41:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** namespace plaits {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 24


  42:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  43:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** class SineOscillator {
  44:eurorack/plaits/dsp/oscillator/sine_oscillator.h ****  public:
  45:eurorack/plaits/dsp/oscillator/sine_oscillator.h ****   SineOscillator() { }
 391              		.loc 10 45 3 is_stmt 1 view .LVU103
 392              		.loc 10 45 3 is_stmt 0 view .LVU104
 393              	.LBE1287:
 394              	.LBE1285:
 395              	.LBB1288:
 396              	.LBI1288:
 397              		.file 11 "eurorack/plaits/dsp/drums/synthetic_bass_drum.h"
   1:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** //
   3:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** //
   5:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // 
  12:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // 
  15:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // 
  23:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** //
  25:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** //
  27:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Naive bass drum model (modulated oscillator with FM + envelope).
  28:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Inadvertently 909-ish.
  29:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  30:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #ifndef PLAITS_DSP_DRUMS_SYNTHETIC_BASS_DRUM_H_
  31:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #define PLAITS_DSP_DRUMS_SYNTHETIC_BASS_DRUM_H_
  32:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  33:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "stmlib/dsp/dsp.h"
  34:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "stmlib/dsp/units.h"
  35:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "stmlib/utils/random.h"
  36:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  37:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "plaits/dsp/dsp.h"
  38:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "plaits/resources.h"
  39:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  40:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** namespace plaits {
  41:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  42:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** class SyntheticBassDrumClick {
  43:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  public:
  44:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   SyntheticBassDrumClick() { }
  45:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumClick() { }
  46:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 25


  47:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   void Init() {
  48:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     lp_ = 0.0f;
  49:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     hp_ = 0.0f;
  50:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     filter_.Init();
  51:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  52:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   }
  53:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  54:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float Process(float in) {
  55:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     SLOPE(lp_, in, 0.5f, 0.1f);
  56:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     ONE_POLE(hp_, lp_, 0.04f);
  57:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     return filter_.Process<stmlib::FILTER_MODE_LOW_PASS>(lp_ - hp_);
  58:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   }
  59:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  60:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  private:
  61:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float lp_;
  62:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float hp_;
  63:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   stmlib::Svf filter_;
  64:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  65:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   DISALLOW_COPY_AND_ASSIGN(SyntheticBassDrumClick);
  66:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** };
  67:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  68:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** class SyntheticBassDrumAttackNoise {
  69:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  public:
  70:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   SyntheticBassDrumAttackNoise() { }
  71:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumAttackNoise() { }
  72:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  73:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   void Init() {
  74:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     lp_ = 0.0f;
  75:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     hp_ = 0.0f;
  76:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   }
  77:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  78:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float Render() {
  79:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     float sample = stmlib::Random::GetFloat();
  80:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     ONE_POLE(lp_, sample, 0.05f);
  81:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     ONE_POLE(hp_, lp_, 0.005f);
  82:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     return lp_ - hp_;
  83:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   }
  84:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  85:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  private:
  86:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float lp_;
  87:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float hp_;
  88:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  89:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   DISALLOW_COPY_AND_ASSIGN(SyntheticBassDrumAttackNoise);
  90:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** };
  91:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  92:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** class SyntheticBassDrum {
  93:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  public:
  94:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   SyntheticBassDrum() { }
 398              		.loc 11 94 3 is_stmt 1 view .LVU105
 399              	.LBB1289:
 400              	.LBI1289:
  44:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumClick() { }
 401              		.loc 11 44 3 view .LVU106
 402              	.LBB1290:
 403              	.LBI1290:
 404              		.loc 9 179 3 view .LVU107
 405              		.loc 9 179 3 is_stmt 0 view .LVU108
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 26


 406              	.LBE1290:
 407              	.LBE1289:
 408              	.LBB1291:
 409              	.LBI1291:
  70:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumAttackNoise() { }
 410              		.loc 11 70 3 is_stmt 1 view .LVU109
  70:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumAttackNoise() { }
 411              		.loc 11 70 3 is_stmt 0 view .LVU110
 412              	.LBE1291:
 413              	.LBE1288:
 414              	.LBB1292:
 415              	.LBI1292:
 416              		.file 12 "eurorack/plaits/dsp/fx/overdrive.h"
   1:eurorack/plaits/dsp/fx/overdrive.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/plaits/dsp/fx/overdrive.h **** //
   3:eurorack/plaits/dsp/fx/overdrive.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/fx/overdrive.h **** //
   5:eurorack/plaits/dsp/fx/overdrive.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/fx/overdrive.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/fx/overdrive.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/fx/overdrive.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/fx/overdrive.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/fx/overdrive.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/fx/overdrive.h **** // 
  12:eurorack/plaits/dsp/fx/overdrive.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/fx/overdrive.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/fx/overdrive.h **** // 
  15:eurorack/plaits/dsp/fx/overdrive.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/fx/overdrive.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/fx/overdrive.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/fx/overdrive.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/fx/overdrive.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/fx/overdrive.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/fx/overdrive.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/fx/overdrive.h **** // 
  23:eurorack/plaits/dsp/fx/overdrive.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/fx/overdrive.h **** //
  25:eurorack/plaits/dsp/fx/overdrive.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/fx/overdrive.h **** //
  27:eurorack/plaits/dsp/fx/overdrive.h **** // Distortion/overdrive.
  28:eurorack/plaits/dsp/fx/overdrive.h **** 
  29:eurorack/plaits/dsp/fx/overdrive.h **** #ifndef PLAITS_DSP_FX_OVERDRIVE_H_
  30:eurorack/plaits/dsp/fx/overdrive.h **** #define PLAITS_DSP_FX_OVERDRIVE_H_
  31:eurorack/plaits/dsp/fx/overdrive.h **** 
  32:eurorack/plaits/dsp/fx/overdrive.h **** #include <algorithm>
  33:eurorack/plaits/dsp/fx/overdrive.h **** 
  34:eurorack/plaits/dsp/fx/overdrive.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/fx/overdrive.h **** #include "stmlib/dsp/parameter_interpolator.h"
  36:eurorack/plaits/dsp/fx/overdrive.h **** 
  37:eurorack/plaits/dsp/fx/overdrive.h **** namespace plaits {
  38:eurorack/plaits/dsp/fx/overdrive.h ****   
  39:eurorack/plaits/dsp/fx/overdrive.h **** class Overdrive {
  40:eurorack/plaits/dsp/fx/overdrive.h ****  public:
  41:eurorack/plaits/dsp/fx/overdrive.h ****   Overdrive() { }
 417              		.loc 12 41 3 is_stmt 1 view .LVU111
 418              		.loc 12 41 3 is_stmt 0 view .LVU112
 419              	.LBE1292:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 27


 420              	.LBE1283:
 421              	.LBE1282:
 422              	.LBB1293:
 423              	.LBI1293:
 424              		.file 13 "eurorack/plaits/dsp/engine/fm_engine.h"
   1:eurorack/plaits/dsp/engine/fm_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/fm_engine.h **** //
   3:eurorack/plaits/dsp/engine/fm_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/fm_engine.h **** //
   5:eurorack/plaits/dsp/engine/fm_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/fm_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/fm_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/fm_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/fm_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/fm_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/fm_engine.h **** // 
  12:eurorack/plaits/dsp/engine/fm_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/fm_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/fm_engine.h **** // 
  15:eurorack/plaits/dsp/engine/fm_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/fm_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/fm_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/fm_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/fm_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/fm_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/fm_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/fm_engine.h **** // 
  23:eurorack/plaits/dsp/engine/fm_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/fm_engine.h **** //
  25:eurorack/plaits/dsp/engine/fm_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/fm_engine.h **** //
  27:eurorack/plaits/dsp/engine/fm_engine.h **** // Classic 2-op FM, as found in Braids, Rings and Elements.
  28:eurorack/plaits/dsp/engine/fm_engine.h **** 
  29:eurorack/plaits/dsp/engine/fm_engine.h **** #ifndef PLAITS_DSP_ENGINE_FM_ENGINE_H_
  30:eurorack/plaits/dsp/engine/fm_engine.h **** #define PLAITS_DSP_ENGINE_FM_ENGINE_H_
  31:eurorack/plaits/dsp/engine/fm_engine.h **** 
  32:eurorack/plaits/dsp/engine/fm_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/fm_engine.h **** 
  34:eurorack/plaits/dsp/engine/fm_engine.h **** namespace plaits {
  35:eurorack/plaits/dsp/engine/fm_engine.h ****   
  36:eurorack/plaits/dsp/engine/fm_engine.h **** class FMEngine : public Engine {
  37:eurorack/plaits/dsp/engine/fm_engine.h ****  public:
  38:eurorack/plaits/dsp/engine/fm_engine.h ****   FMEngine() { }
 425              		.loc 13 38 3 is_stmt 1 view .LVU113
 426              	.LBB1294:
 427              	.LBB1295:
 428              	.LBI1295:
 429              		.loc 6 80 3 view .LVU114
 430              		.loc 6 80 3 is_stmt 0 view .LVU115
 431              	.LBE1295:
 432              		.loc 13 38 14 view .LVU116
 433 0014 3349     		ldr	r1, .L24+8
 434 0016 C3F80012 		str	r1, [r3, #512]
 435              	.LVL21:
 436              		.loc 13 38 14 view .LVU117
 437              	.LBE1294:
 438              	.LBE1293:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 28


 439              	.LBB1296:
 440              	.LBI1296:
 441              		.file 14 "eurorack/plaits/dsp/engine/grain_engine.h"
   1:eurorack/plaits/dsp/engine/grain_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/grain_engine.h **** //
   3:eurorack/plaits/dsp/engine/grain_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/grain_engine.h **** //
   5:eurorack/plaits/dsp/engine/grain_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/grain_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/grain_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/grain_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/grain_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/grain_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/grain_engine.h **** // 
  12:eurorack/plaits/dsp/engine/grain_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/grain_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/grain_engine.h **** // 
  15:eurorack/plaits/dsp/engine/grain_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/grain_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/grain_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/grain_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/grain_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/grain_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/grain_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/grain_engine.h **** // 
  23:eurorack/plaits/dsp/engine/grain_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/grain_engine.h **** //
  25:eurorack/plaits/dsp/engine/grain_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/grain_engine.h **** //
  27:eurorack/plaits/dsp/engine/grain_engine.h **** // Windowed sine segments.
  28:eurorack/plaits/dsp/engine/grain_engine.h **** 
  29:eurorack/plaits/dsp/engine/grain_engine.h **** #ifndef PLAITS_DSP_ENGINE_GRAIN_ENGINE_H_
  30:eurorack/plaits/dsp/engine/grain_engine.h **** #define PLAITS_DSP_ENGINE_GRAIN_ENGINE_H_
  31:eurorack/plaits/dsp/engine/grain_engine.h **** 
  32:eurorack/plaits/dsp/engine/grain_engine.h **** #include "stmlib/dsp/filter.h"
  33:eurorack/plaits/dsp/engine/grain_engine.h **** 
  34:eurorack/plaits/dsp/engine/grain_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/grain_engine.h **** #include "plaits/dsp/oscillator/grainlet_oscillator.h"
  36:eurorack/plaits/dsp/engine/grain_engine.h **** #include "plaits/dsp/oscillator/vosim_oscillator.h"
  37:eurorack/plaits/dsp/engine/grain_engine.h **** #include "plaits/dsp/oscillator/z_oscillator.h"
  38:eurorack/plaits/dsp/engine/grain_engine.h **** 
  39:eurorack/plaits/dsp/engine/grain_engine.h **** namespace plaits {
  40:eurorack/plaits/dsp/engine/grain_engine.h ****   
  41:eurorack/plaits/dsp/engine/grain_engine.h **** class GrainEngine : public Engine {
  42:eurorack/plaits/dsp/engine/grain_engine.h ****  public:
  43:eurorack/plaits/dsp/engine/grain_engine.h ****   GrainEngine() { }
 442              		.loc 14 43 3 is_stmt 1 view .LVU118
 443              	.LBB1297:
 444              	.LBB1298:
 445              	.LBI1298:
 446              		.loc 6 80 3 view .LVU119
 447              		.loc 6 80 3 is_stmt 0 view .LVU120
 448              	.LBE1298:
 449              		.loc 14 43 17 view .LVU121
 450 001a 3349     		ldr	r1, .L24+12
 451 001c C3F83812 		str	r1, [r3, #568]
 452              		.loc 14 43 17 is_stmt 1 view .LVU122
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 29


 453              	.LVL22:
 454              	.LBB1299:
 455              	.LBI1299:
 456              		.file 15 "eurorack/plaits/dsp/oscillator/z_oscillator.h"
   1:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/z_oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/z_oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/z_oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/z_oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // Sinewave multiplied by and sync'ed to a carrier.
  28:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  29:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_Z_OSCILLATOR_H_
  30:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #define PLAITS_DSP_OSCILLATOR_Z_OSCILLATOR_H_
  31:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  32:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include <algorithm>
  33:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  34:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  36:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include "stmlib/dsp/polyblep.h"
  37:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  38:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include "plaits/resources.h"
  39:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  40:eurorack/plaits/dsp/oscillator/z_oscillator.h **** namespace plaits {
  41:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  42:eurorack/plaits/dsp/oscillator/z_oscillator.h **** class ZOscillator {
  43:eurorack/plaits/dsp/oscillator/z_oscillator.h ****  public:
  44:eurorack/plaits/dsp/oscillator/z_oscillator.h ****   ZOscillator() { }
 457              		.loc 15 44 3 view .LVU123
 458              		.loc 15 44 3 is_stmt 0 view .LVU124
 459              	.LBE1299:
 460              		.loc 14 43 17 is_stmt 1 view .LVU125
 461              		.loc 14 43 17 is_stmt 0 view .LVU126
 462              	.LBE1297:
 463              	.LBE1296:
 464              	.LBB1300:
 465              	.LBI1300:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 30


 466              		.file 16 "eurorack/plaits/dsp/engine/hi_hat_engine.h"
   1:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/hi_hat_engine.h **** //
   3:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/hi_hat_engine.h **** //
   5:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // 
  12:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // 
  15:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // 
  23:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/hi_hat_engine.h **** //
  25:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/hi_hat_engine.h **** //
  27:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // 808-style HH with two noise sources - one faithful to the original, the other
  28:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // more metallic.
  29:eurorack/plaits/dsp/engine/hi_hat_engine.h **** 
  30:eurorack/plaits/dsp/engine/hi_hat_engine.h **** #ifndef PLAITS_DSP_ENGINE_HI_HAT_ENGINE_H_
  31:eurorack/plaits/dsp/engine/hi_hat_engine.h **** #define PLAITS_DSP_ENGINE_HI_HAT_ENGINE_H_
  32:eurorack/plaits/dsp/engine/hi_hat_engine.h **** 
  33:eurorack/plaits/dsp/engine/hi_hat_engine.h **** #include "plaits/dsp/drums/hi_hat.h"
  34:eurorack/plaits/dsp/engine/hi_hat_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/hi_hat_engine.h **** 
  36:eurorack/plaits/dsp/engine/hi_hat_engine.h **** namespace plaits {
  37:eurorack/plaits/dsp/engine/hi_hat_engine.h ****   
  38:eurorack/plaits/dsp/engine/hi_hat_engine.h **** class HiHatEngine : public Engine {
  39:eurorack/plaits/dsp/engine/hi_hat_engine.h ****  public:
  40:eurorack/plaits/dsp/engine/hi_hat_engine.h ****   HiHatEngine() { }
 467              		.loc 16 40 3 is_stmt 1 view .LVU127
 468              	.LBB1301:
 469              	.LBB1302:
 470              	.LBI1302:
 471              		.loc 6 80 3 view .LVU128
 472              		.loc 6 80 3 is_stmt 0 view .LVU129
 473              	.LBE1302:
 474              		.loc 16 40 17 view .LVU130
 475 0020 3249     		ldr	r1, .L24+16
 476 0022 C3F8BC12 		str	r1, [r3, #700]
 477              	.LVL23:
 478              	.LBB1303:
 479              	.LBI1303:
 480              		.file 17 "eurorack/plaits/dsp/drums/hi_hat.h"
   1:eurorack/plaits/dsp/drums/hi_hat.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/hi_hat.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 31


   3:eurorack/plaits/dsp/drums/hi_hat.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/hi_hat.h **** //
   5:eurorack/plaits/dsp/drums/hi_hat.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/hi_hat.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/hi_hat.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/hi_hat.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/hi_hat.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/hi_hat.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/hi_hat.h **** // 
  12:eurorack/plaits/dsp/drums/hi_hat.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/hi_hat.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/hi_hat.h **** // 
  15:eurorack/plaits/dsp/drums/hi_hat.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/hi_hat.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/hi_hat.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/hi_hat.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/hi_hat.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/hi_hat.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/hi_hat.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/hi_hat.h **** // 
  23:eurorack/plaits/dsp/drums/hi_hat.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/hi_hat.h **** //
  25:eurorack/plaits/dsp/drums/hi_hat.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/hi_hat.h **** //
  27:eurorack/plaits/dsp/drums/hi_hat.h **** // 808 HH, with a few extra parameters to push things to the CY territory...
  28:eurorack/plaits/dsp/drums/hi_hat.h **** // The template parameter MetallicNoiseSource allows another kind of "metallic
  29:eurorack/plaits/dsp/drums/hi_hat.h **** // noise" to be used, for results which are more similar to KR-55 or FM hi-hats.
  30:eurorack/plaits/dsp/drums/hi_hat.h **** 
  31:eurorack/plaits/dsp/drums/hi_hat.h **** #ifndef PLAITS_DSP_DRUMS_HI_HAT_H_
  32:eurorack/plaits/dsp/drums/hi_hat.h **** #define PLAITS_DSP_DRUMS_HI_HAT_H_
  33:eurorack/plaits/dsp/drums/hi_hat.h **** 
  34:eurorack/plaits/dsp/drums/hi_hat.h **** #include <algorithm>
  35:eurorack/plaits/dsp/drums/hi_hat.h **** 
  36:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/dsp/dsp.h"
  37:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/dsp/filter.h"
  38:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/dsp/parameter_interpolator.h"
  39:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/dsp/units.h"
  40:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/utils/random.h"
  41:eurorack/plaits/dsp/drums/hi_hat.h **** 
  42:eurorack/plaits/dsp/drums/hi_hat.h **** #include "plaits/dsp/dsp.h"
  43:eurorack/plaits/dsp/drums/hi_hat.h **** #include "plaits/dsp/oscillator/oscillator.h"
  44:eurorack/plaits/dsp/drums/hi_hat.h **** 
  45:eurorack/plaits/dsp/drums/hi_hat.h **** namespace plaits {
  46:eurorack/plaits/dsp/drums/hi_hat.h **** 
  47:eurorack/plaits/dsp/drums/hi_hat.h **** // 808 style "metallic noise" with 6 square oscillators.
  48:eurorack/plaits/dsp/drums/hi_hat.h **** class SquareNoise {
  49:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
  50:eurorack/plaits/dsp/drums/hi_hat.h ****   SquareNoise() { }
  51:eurorack/plaits/dsp/drums/hi_hat.h ****   ~SquareNoise() { }
  52:eurorack/plaits/dsp/drums/hi_hat.h **** 
  53:eurorack/plaits/dsp/drums/hi_hat.h ****   void Init() {
  54:eurorack/plaits/dsp/drums/hi_hat.h ****     std::fill(&phase_[0], &phase_[6], 0);
  55:eurorack/plaits/dsp/drums/hi_hat.h ****   }
  56:eurorack/plaits/dsp/drums/hi_hat.h ****     
  57:eurorack/plaits/dsp/drums/hi_hat.h ****   void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
  58:eurorack/plaits/dsp/drums/hi_hat.h ****     const float ratios[6] = {
  59:eurorack/plaits/dsp/drums/hi_hat.h ****         // Nominal f0: 414 Hz
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 32


  60:eurorack/plaits/dsp/drums/hi_hat.h ****         1.0f, 1.304f, 1.466f, 1.787f, 1.932f, 2.536f
  61:eurorack/plaits/dsp/drums/hi_hat.h ****     };
  62:eurorack/plaits/dsp/drums/hi_hat.h ****   
  63:eurorack/plaits/dsp/drums/hi_hat.h ****     uint32_t increment[6];
  64:eurorack/plaits/dsp/drums/hi_hat.h ****     uint32_t phase[6];
  65:eurorack/plaits/dsp/drums/hi_hat.h ****     for (int i = 0; i < 6; ++i) {
  66:eurorack/plaits/dsp/drums/hi_hat.h ****       float f = f0 * ratios[i];
  67:eurorack/plaits/dsp/drums/hi_hat.h ****       if (f >= 0.499f) f = 0.499f;
  68:eurorack/plaits/dsp/drums/hi_hat.h ****       increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
  69:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[i] = phase_[i];
  70:eurorack/plaits/dsp/drums/hi_hat.h ****     }
  71:eurorack/plaits/dsp/drums/hi_hat.h **** 
  72:eurorack/plaits/dsp/drums/hi_hat.h ****     while (size--) {
  73:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[0] += increment[0];
  74:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[1] += increment[1];
  75:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[2] += increment[2];
  76:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[3] += increment[3];
  77:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[4] += increment[4];
  78:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[5] += increment[5];
  79:eurorack/plaits/dsp/drums/hi_hat.h ****       uint32_t noise = 0;
  80:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[0] >> 31);
  81:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[1] >> 31);
  82:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[2] >> 31);
  83:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[3] >> 31);
  84:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[4] >> 31);
  85:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[5] >> 31);
  86:eurorack/plaits/dsp/drums/hi_hat.h ****       *out++ = 0.33f * static_cast<float>(noise) - 1.0f;
  87:eurorack/plaits/dsp/drums/hi_hat.h ****     }
  88:eurorack/plaits/dsp/drums/hi_hat.h ****   
  89:eurorack/plaits/dsp/drums/hi_hat.h ****     for (int i = 0; i < 6; ++i) {
  90:eurorack/plaits/dsp/drums/hi_hat.h ****       phase_[i] = phase[i];
  91:eurorack/plaits/dsp/drums/hi_hat.h ****     }
  92:eurorack/plaits/dsp/drums/hi_hat.h ****   }
  93:eurorack/plaits/dsp/drums/hi_hat.h **** 
  94:eurorack/plaits/dsp/drums/hi_hat.h ****  private:
  95:eurorack/plaits/dsp/drums/hi_hat.h ****   uint32_t phase_[6];
  96:eurorack/plaits/dsp/drums/hi_hat.h **** 
  97:eurorack/plaits/dsp/drums/hi_hat.h ****   DISALLOW_COPY_AND_ASSIGN(SquareNoise);
  98:eurorack/plaits/dsp/drums/hi_hat.h **** };
  99:eurorack/plaits/dsp/drums/hi_hat.h **** 
 100:eurorack/plaits/dsp/drums/hi_hat.h **** class RingModNoise {
 101:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
 102:eurorack/plaits/dsp/drums/hi_hat.h ****   RingModNoise() { }
 103:eurorack/plaits/dsp/drums/hi_hat.h ****   ~RingModNoise() { }
 104:eurorack/plaits/dsp/drums/hi_hat.h **** 
 105:eurorack/plaits/dsp/drums/hi_hat.h ****   void Init() {
 106:eurorack/plaits/dsp/drums/hi_hat.h ****     for (int i = 0; i < 6; ++i) {
 107:eurorack/plaits/dsp/drums/hi_hat.h ****       oscillator_[i].Init();
 108:eurorack/plaits/dsp/drums/hi_hat.h ****     }
 109:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 110:eurorack/plaits/dsp/drums/hi_hat.h ****   
 111:eurorack/plaits/dsp/drums/hi_hat.h ****   void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
 112:eurorack/plaits/dsp/drums/hi_hat.h ****     const float ratio = f0 / (0.01f + f0);
 113:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f1a = 200.0f / kSampleRate * ratio;
 114:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f1b = 7530.0f / kSampleRate * ratio;
 115:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f2a = 510.0f / kSampleRate * ratio;
 116:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f2b = 8075.0f / kSampleRate * ratio;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 33


 117:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f3a = 730.0f / kSampleRate * ratio;
 118:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f3b = 10500.0f / kSampleRate * ratio;
 119:eurorack/plaits/dsp/drums/hi_hat.h ****     
 120:eurorack/plaits/dsp/drums/hi_hat.h ****     std::fill(&out[0], &out[size], 0.0f);
 121:eurorack/plaits/dsp/drums/hi_hat.h ****     
 122:eurorack/plaits/dsp/drums/hi_hat.h ****     RenderPair(&oscillator_[0], f1a, f1b, temp_1, temp_2, out, size);
 123:eurorack/plaits/dsp/drums/hi_hat.h ****     RenderPair(&oscillator_[2], f2a, f2b, temp_1, temp_2, out, size);
 124:eurorack/plaits/dsp/drums/hi_hat.h ****     RenderPair(&oscillator_[4], f3a, f3b, temp_1, temp_2, out, size);
 125:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 126:eurorack/plaits/dsp/drums/hi_hat.h **** 
 127:eurorack/plaits/dsp/drums/hi_hat.h ****  private:
 128:eurorack/plaits/dsp/drums/hi_hat.h ****   void RenderPair(
 129:eurorack/plaits/dsp/drums/hi_hat.h ****       Oscillator* osc,
 130:eurorack/plaits/dsp/drums/hi_hat.h ****       float f1,
 131:eurorack/plaits/dsp/drums/hi_hat.h ****       float f2,
 132:eurorack/plaits/dsp/drums/hi_hat.h ****       float* temp_1,
 133:eurorack/plaits/dsp/drums/hi_hat.h ****       float* temp_2,
 134:eurorack/plaits/dsp/drums/hi_hat.h ****       float* out,
 135:eurorack/plaits/dsp/drums/hi_hat.h ****       size_t size) {
 136:eurorack/plaits/dsp/drums/hi_hat.h ****     osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
 137:eurorack/plaits/dsp/drums/hi_hat.h ****     osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
 138:eurorack/plaits/dsp/drums/hi_hat.h ****     while (size--) {
 139:eurorack/plaits/dsp/drums/hi_hat.h ****       *out++ += *temp_1++ * *temp_2++;
 140:eurorack/plaits/dsp/drums/hi_hat.h ****     }
 141:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 142:eurorack/plaits/dsp/drums/hi_hat.h ****   Oscillator oscillator_[6];
 143:eurorack/plaits/dsp/drums/hi_hat.h ****   
 144:eurorack/plaits/dsp/drums/hi_hat.h ****   DISALLOW_COPY_AND_ASSIGN(RingModNoise);
 145:eurorack/plaits/dsp/drums/hi_hat.h **** };
 146:eurorack/plaits/dsp/drums/hi_hat.h **** 
 147:eurorack/plaits/dsp/drums/hi_hat.h **** class SwingVCA {
 148:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
 149:eurorack/plaits/dsp/drums/hi_hat.h ****   float operator()(float s, float gain) {
 150:eurorack/plaits/dsp/drums/hi_hat.h ****    s *= s > 0.0f ? 10.0f : 0.1f;
 151:eurorack/plaits/dsp/drums/hi_hat.h ****    s = s / (1.0f + fabsf(s));
 152:eurorack/plaits/dsp/drums/hi_hat.h ****    return (s + 1.0f) * gain;
 153:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 154:eurorack/plaits/dsp/drums/hi_hat.h **** };
 155:eurorack/plaits/dsp/drums/hi_hat.h **** 
 156:eurorack/plaits/dsp/drums/hi_hat.h **** class LinearVCA {
 157:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
 158:eurorack/plaits/dsp/drums/hi_hat.h ****   float operator()(float s, float gain) {
 159:eurorack/plaits/dsp/drums/hi_hat.h ****    return s * gain;
 160:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 161:eurorack/plaits/dsp/drums/hi_hat.h **** };
 162:eurorack/plaits/dsp/drums/hi_hat.h **** 
 163:eurorack/plaits/dsp/drums/hi_hat.h **** template<typename MetallicNoiseSource, typename VCA, bool resonance>
 164:eurorack/plaits/dsp/drums/hi_hat.h **** class HiHat {
 165:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
 166:eurorack/plaits/dsp/drums/hi_hat.h ****   HiHat() { }
 481              		.loc 17 166 3 is_stmt 1 view .LVU131
 482              	.LBB1304:
 483              	.LBI1304:
  50:eurorack/plaits/dsp/drums/hi_hat.h ****   ~SquareNoise() { }
 484              		.loc 17 50 3 view .LVU132
  50:eurorack/plaits/dsp/drums/hi_hat.h ****   ~SquareNoise() { }
 485              		.loc 17 50 3 is_stmt 0 view .LVU133
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 34


 486              	.LBE1304:
 487              	.LBB1305:
 488              	.LBI1305:
 489              		.loc 9 179 3 is_stmt 1 view .LVU134
 490              		.loc 9 179 3 is_stmt 0 view .LVU135
 491              	.LBE1305:
 492              	.LBB1306:
 493              	.LBI1306:
 494              		.loc 9 179 3 is_stmt 1 view .LVU136
 495              		.loc 9 179 3 is_stmt 0 view .LVU137
 496              	.LBE1306:
 497              	.LBE1303:
 498              	.LBB1307:
 499              	.LBI1307:
 500              		.loc 17 166 3 is_stmt 1 view .LVU138
 501              	.LBB1308:
 502              	.LBI1308:
 102:eurorack/plaits/dsp/drums/hi_hat.h ****   ~RingModNoise() { }
 503              		.loc 17 102 3 view .LVU139
 504              	.LBE1308:
 505              	.LBE1307:
 506              	.LBE1301:
 507              	.LBE1300:
 508              	.LBE1278:
 509              	.LBE1387:
 102:eurorack/plaits/dsp/drums/hi_hat.h ****   ~RingModNoise() { }
 510              		.loc 17 102 18 view .LVU140
 511              	.LBB1388:
 512              	.LBB1378:
 513              	.LBB1313:
 514              	.LBB1312:
 515              	.LBB1311:
 516              	.LBB1309:
 517              	.LBI1309:
 518              		.loc 9 179 3 view .LVU141
 519              		.loc 9 179 3 is_stmt 0 view .LVU142
 520              	.LBE1309:
 521              	.LBB1310:
 522              	.LBI1310:
 523              		.loc 9 179 3 is_stmt 1 view .LVU143
 524              		.loc 9 179 3 is_stmt 0 view .LVU144
 525              	.LBE1310:
 526              	.LBE1311:
 527              	.LBE1312:
 528              	.LBE1313:
 529              	.LBB1314:
 530              	.LBI1314:
 531              		.file 18 "eurorack/plaits/dsp/engine/modal_engine.h"
   1:eurorack/plaits/dsp/engine/modal_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/modal_engine.h **** //
   3:eurorack/plaits/dsp/engine/modal_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/modal_engine.h **** //
   5:eurorack/plaits/dsp/engine/modal_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/modal_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/modal_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/modal_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/modal_engine.h **** // copies of the Software, and to permit persons to whom the Software is
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 35


  10:eurorack/plaits/dsp/engine/modal_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/modal_engine.h **** // 
  12:eurorack/plaits/dsp/engine/modal_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/modal_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/modal_engine.h **** // 
  15:eurorack/plaits/dsp/engine/modal_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/modal_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/modal_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/modal_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/modal_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/modal_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/modal_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/modal_engine.h **** // 
  23:eurorack/plaits/dsp/engine/modal_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/modal_engine.h **** //
  25:eurorack/plaits/dsp/engine/modal_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/modal_engine.h **** //
  27:eurorack/plaits/dsp/engine/modal_engine.h **** // One voice of modal synthesis.
  28:eurorack/plaits/dsp/engine/modal_engine.h **** 
  29:eurorack/plaits/dsp/engine/modal_engine.h **** #ifndef PLAITS_DSP_ENGINE_MODAL_ENGINE_H_
  30:eurorack/plaits/dsp/engine/modal_engine.h **** #define PLAITS_DSP_ENGINE_MODAL_ENGINE_H_
  31:eurorack/plaits/dsp/engine/modal_engine.h **** 
  32:eurorack/plaits/dsp/engine/modal_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/modal_engine.h **** #include "plaits/dsp/physical_modelling/modal_voice.h"
  34:eurorack/plaits/dsp/engine/modal_engine.h **** 
  35:eurorack/plaits/dsp/engine/modal_engine.h **** namespace plaits {
  36:eurorack/plaits/dsp/engine/modal_engine.h **** 
  37:eurorack/plaits/dsp/engine/modal_engine.h **** class ModalEngine : public Engine {
  38:eurorack/plaits/dsp/engine/modal_engine.h ****  public:
  39:eurorack/plaits/dsp/engine/modal_engine.h ****   ModalEngine() { }
 532              		.loc 18 39 3 is_stmt 1 view .LVU145
 533              	.LBB1315:
 534              	.LBB1316:
 535              	.LBI1316:
 536              		.loc 6 80 3 view .LVU146
 537              		.loc 6 80 3 is_stmt 0 view .LVU147
 538              	.LBE1316:
 539              		.loc 18 39 17 view .LVU148
 540 0026 3249     		ldr	r1, .L24+20
 541 0028 C3F80414 		str	r1, [r3, #1028]
 542              	.LVL24:
 543              	.LBB1317:
 544              	.LBI1317:
 545              		.file 19 "eurorack/plaits/dsp/physical_modelling/modal_voice.h"
   1:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** //
   3:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** //
   5:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // 
  12:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // all copies or substantial portions of the Software.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 36


  14:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // 
  15:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // 
  23:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** //
  25:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** //
  27:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // Simple modal synthesis voice with a mallet exciter:
  28:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // click -> LPF -> resonator.
  29:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // 
  30:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // The click is replaced by continuous white noise when the trigger input
  31:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // of the module is not patched.
  32:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** 
  33:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** #ifndef PLAITS_DSP_PHYSICAL_MODELLING_MODAL_VOICE_H_
  34:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** #define PLAITS_DSP_PHYSICAL_MODELLING_MODAL_VOICE_H_
  35:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** 
  36:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** #include "plaits/dsp/physical_modelling/resonator.h"
  37:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** 
  38:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** namespace plaits {
  39:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** 
  40:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** class ModalVoice {
  41:eurorack/plaits/dsp/physical_modelling/modal_voice.h ****  public:
  42:eurorack/plaits/dsp/physical_modelling/modal_voice.h ****   ModalVoice() { }
 546              		.loc 19 42 3 is_stmt 1 view .LVU149
 547              	.LBB1318:
 548              	.LBI1318:
 549              		.file 20 "eurorack/plaits/dsp/physical_modelling/resonator.h"
   1:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
   3:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
   5:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/physical_modelling/resonator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/physical_modelling/resonator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/physical_modelling/resonator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/physical_modelling/resonator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/physical_modelling/resonator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/physical_modelling/resonator.h **** // 
  12:eurorack/plaits/dsp/physical_modelling/resonator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/physical_modelling/resonator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/physical_modelling/resonator.h **** // 
  15:eurorack/plaits/dsp/physical_modelling/resonator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/physical_modelling/resonator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/physical_modelling/resonator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/physical_modelling/resonator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/physical_modelling/resonator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/physical_modelling/resonator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/physical_modelling/resonator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/physical_modelling/resonator.h **** // 
  23:eurorack/plaits/dsp/physical_modelling/resonator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 37


  25:eurorack/plaits/dsp/physical_modelling/resonator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
  27:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Resonator, taken from Rings' code but with fixed position.
  28:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  29:eurorack/plaits/dsp/physical_modelling/resonator.h **** #ifndef PLAITS_DSP_PHYSICAL_MODELLING_RESONATOR_H_
  30:eurorack/plaits/dsp/physical_modelling/resonator.h **** #define PLAITS_DSP_PHYSICAL_MODELLING_RESONATOR_H_
  31:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  32:eurorack/plaits/dsp/physical_modelling/resonator.h **** #include "stmlib/dsp/filter.h"
  33:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  34:eurorack/plaits/dsp/physical_modelling/resonator.h **** namespace plaits {
  35:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  36:eurorack/plaits/dsp/physical_modelling/resonator.h **** const int kMaxNumModes = 24;
  37:eurorack/plaits/dsp/physical_modelling/resonator.h **** const int kModeBatchSize = 4;
  38:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  39:eurorack/plaits/dsp/physical_modelling/resonator.h **** // We render 4 modes simultaneously since there are enough registers to hold
  40:eurorack/plaits/dsp/physical_modelling/resonator.h **** // all state variables.
  41:eurorack/plaits/dsp/physical_modelling/resonator.h **** template<int batch_size>
  42:eurorack/plaits/dsp/physical_modelling/resonator.h **** class ResonatorSvf {
  43:eurorack/plaits/dsp/physical_modelling/resonator.h ****  public:
  44:eurorack/plaits/dsp/physical_modelling/resonator.h ****   ResonatorSvf() { }
 550              		.loc 20 44 3 view .LVU150
 551              		.loc 20 44 3 is_stmt 0 view .LVU151
 552              	.LBE1318:
 553              	.LBB1319:
 554              	.LBI1319:
  45:eurorack/plaits/dsp/physical_modelling/resonator.h ****   ~ResonatorSvf() { }
  46:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
  47:eurorack/plaits/dsp/physical_modelling/resonator.h ****   void Init() {
  48:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
  49:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1_[i] = state_2_[i] = 0.0f;
  50:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  51:eurorack/plaits/dsp/physical_modelling/resonator.h ****   }
  52:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
  53:eurorack/plaits/dsp/physical_modelling/resonator.h ****   template<stmlib::FilterMode mode, bool add>
  54:eurorack/plaits/dsp/physical_modelling/resonator.h ****   void Process(
  55:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* f,
  56:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* q,
  57:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* gain,
  58:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* in,
  59:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float* out,
  60:eurorack/plaits/dsp/physical_modelling/resonator.h ****       size_t size) {
  61:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float g[batch_size];
  62:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float r[batch_size];
  63:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float r_plus_g[batch_size];
  64:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float h[batch_size];
  65:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float state_1[batch_size];
  66:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float state_2[batch_size];
  67:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float gains[batch_size];
  68:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
  69:eurorack/plaits/dsp/physical_modelling/resonator.h ****       g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
  70:eurorack/plaits/dsp/physical_modelling/resonator.h ****       r[i] = 1.0f / q[i];
  71:eurorack/plaits/dsp/physical_modelling/resonator.h ****       h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
  72:eurorack/plaits/dsp/physical_modelling/resonator.h ****       r_plus_g[i] = r[i] + g[i];
  73:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1[i] = state_1_[i];
  74:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_2[i] = state_2_[i];
  75:eurorack/plaits/dsp/physical_modelling/resonator.h ****       gains[i] = gain[i];
  76:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 38


  77:eurorack/plaits/dsp/physical_modelling/resonator.h ****     
  78:eurorack/plaits/dsp/physical_modelling/resonator.h ****     while (size--) {
  79:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float s_in = *in++;
  80:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float s_out = 0.0f;
  81:eurorack/plaits/dsp/physical_modelling/resonator.h ****       for (int i = 0; i < batch_size; ++i) {
  82:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
  83:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float bp = g[i] * hp + state_1[i];
  84:eurorack/plaits/dsp/physical_modelling/resonator.h ****         state_1[i] = g[i] * hp + bp;
  85:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float lp = g[i] * bp + state_2[i];
  86:eurorack/plaits/dsp/physical_modelling/resonator.h ****         state_2[i] = g[i] * bp + lp;
  87:eurorack/plaits/dsp/physical_modelling/resonator.h ****         s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
  88:eurorack/plaits/dsp/physical_modelling/resonator.h ****       }
  89:eurorack/plaits/dsp/physical_modelling/resonator.h ****       if (add) {
  90:eurorack/plaits/dsp/physical_modelling/resonator.h ****         *out++ += s_out;
  91:eurorack/plaits/dsp/physical_modelling/resonator.h ****       } else {
  92:eurorack/plaits/dsp/physical_modelling/resonator.h ****         *out++ = s_out;
  93:eurorack/plaits/dsp/physical_modelling/resonator.h ****       }
  94:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  95:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
  96:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1_[i] = state_1[i];
  97:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_2_[i] = state_2[i];
  98:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  99:eurorack/plaits/dsp/physical_modelling/resonator.h ****   }
 100:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
 101:eurorack/plaits/dsp/physical_modelling/resonator.h ****  private:
 102:eurorack/plaits/dsp/physical_modelling/resonator.h ****   float state_1_[batch_size];
 103:eurorack/plaits/dsp/physical_modelling/resonator.h ****   float state_2_[batch_size];
 104:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
 105:eurorack/plaits/dsp/physical_modelling/resonator.h ****   DISALLOW_COPY_AND_ASSIGN(ResonatorSvf);
 106:eurorack/plaits/dsp/physical_modelling/resonator.h **** };
 107:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
 108:eurorack/plaits/dsp/physical_modelling/resonator.h **** class Resonator {
 109:eurorack/plaits/dsp/physical_modelling/resonator.h ****  public:
 110:eurorack/plaits/dsp/physical_modelling/resonator.h ****   Resonator() { }
 555              		.loc 20 110 3 is_stmt 1 view .LVU152
 556              	.LBE1319:
 557              	.LBE1317:
 558              	.LBE1315:
 559              	.LBE1314:
 560              	.LBE1378:
 561              	.LBE1388:
 562              		.loc 20 110 15 view .LVU153
 563              	.LBB1389:
 564              	.LBB1379:
 565              	.LBB1320:
 566              	.LBI1320:
 567              		.file 21 "eurorack/plaits/dsp/engine/noise_engine.h"
   1:eurorack/plaits/dsp/engine/noise_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/noise_engine.h **** //
   3:eurorack/plaits/dsp/engine/noise_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/noise_engine.h **** //
   5:eurorack/plaits/dsp/engine/noise_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/noise_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/noise_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/noise_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/noise_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/noise_engine.h **** // furnished to do so, subject to the following conditions:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 39


  11:eurorack/plaits/dsp/engine/noise_engine.h **** // 
  12:eurorack/plaits/dsp/engine/noise_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/noise_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/noise_engine.h **** // 
  15:eurorack/plaits/dsp/engine/noise_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/noise_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/noise_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/noise_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/noise_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/noise_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/noise_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/noise_engine.h **** // 
  23:eurorack/plaits/dsp/engine/noise_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/noise_engine.h **** //
  25:eurorack/plaits/dsp/engine/noise_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/noise_engine.h **** //
  27:eurorack/plaits/dsp/engine/noise_engine.h **** // Clocked noise processed by a multimode filter.
  28:eurorack/plaits/dsp/engine/noise_engine.h **** 
  29:eurorack/plaits/dsp/engine/noise_engine.h **** #ifndef PLAITS_DSP_ENGINE_NOISE_ENGINE_H_
  30:eurorack/plaits/dsp/engine/noise_engine.h **** #define PLAITS_DSP_ENGINE_NOISE_ENGINE_H_
  31:eurorack/plaits/dsp/engine/noise_engine.h **** 
  32:eurorack/plaits/dsp/engine/noise_engine.h **** #include "stmlib/dsp/filter.h"
  33:eurorack/plaits/dsp/engine/noise_engine.h **** 
  34:eurorack/plaits/dsp/engine/noise_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/noise_engine.h **** #include "plaits/dsp/noise/clocked_noise.h"
  36:eurorack/plaits/dsp/engine/noise_engine.h **** 
  37:eurorack/plaits/dsp/engine/noise_engine.h **** namespace plaits {
  38:eurorack/plaits/dsp/engine/noise_engine.h **** 
  39:eurorack/plaits/dsp/engine/noise_engine.h **** class NoiseEngine : public Engine {
  40:eurorack/plaits/dsp/engine/noise_engine.h ****  public:
  41:eurorack/plaits/dsp/engine/noise_engine.h ****   NoiseEngine() { }
 568              		.loc 21 41 3 view .LVU154
 569              	.LBB1321:
 570              	.LBB1322:
 571              	.LBI1322:
 572              		.loc 6 80 3 view .LVU155
 573              		.loc 6 80 3 is_stmt 0 view .LVU156
 574              	.LBE1322:
 575              		.loc 21 41 17 view .LVU157
 576 002c 3149     		ldr	r1, .L24+24
 577 002e C3F84815 		str	r1, [r3, #1352]
 578              		.loc 21 41 17 is_stmt 1 view .LVU158
 579              	.LVL25:
 580              	.LBB1323:
 581              	.LBI1323:
 582              		.loc 9 179 3 view .LVU159
 583              		.loc 9 179 3 is_stmt 0 view .LVU160
 584              	.LBE1323:
 585              		.loc 21 41 17 is_stmt 1 view .LVU161
 586              		.loc 21 41 17 is_stmt 0 view .LVU162
 587              	.LBE1321:
 588              	.LBE1320:
 589              	.LBB1324:
 590              	.LBI1324:
 591              		.file 22 "eurorack/plaits/dsp/engine/particle_engine.h"
   1:eurorack/plaits/dsp/engine/particle_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/particle_engine.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 40


   3:eurorack/plaits/dsp/engine/particle_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/particle_engine.h **** //
   5:eurorack/plaits/dsp/engine/particle_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/particle_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/particle_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/particle_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/particle_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/particle_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/particle_engine.h **** // 
  12:eurorack/plaits/dsp/engine/particle_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/particle_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/particle_engine.h **** // 
  15:eurorack/plaits/dsp/engine/particle_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/particle_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/particle_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/particle_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/particle_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/particle_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/particle_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/particle_engine.h **** // 
  23:eurorack/plaits/dsp/engine/particle_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/particle_engine.h **** //
  25:eurorack/plaits/dsp/engine/particle_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/particle_engine.h **** //
  27:eurorack/plaits/dsp/engine/particle_engine.h **** // Filtered random pulses.
  28:eurorack/plaits/dsp/engine/particle_engine.h **** 
  29:eurorack/plaits/dsp/engine/particle_engine.h **** #ifndef PLAITS_DSP_ENGINE_PARTICLE_ENGINE_H_
  30:eurorack/plaits/dsp/engine/particle_engine.h **** #define PLAITS_DSP_ENGINE_PARTICLE_ENGINE_H_
  31:eurorack/plaits/dsp/engine/particle_engine.h **** 
  32:eurorack/plaits/dsp/engine/particle_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/particle_engine.h **** #include "plaits/dsp/fx/diffuser.h"
  34:eurorack/plaits/dsp/engine/particle_engine.h **** #include "plaits/dsp/noise/particle.h"
  35:eurorack/plaits/dsp/engine/particle_engine.h **** 
  36:eurorack/plaits/dsp/engine/particle_engine.h **** namespace plaits {
  37:eurorack/plaits/dsp/engine/particle_engine.h **** 
  38:eurorack/plaits/dsp/engine/particle_engine.h **** const int kNumParticles = 6;
  39:eurorack/plaits/dsp/engine/particle_engine.h **** 
  40:eurorack/plaits/dsp/engine/particle_engine.h **** class ParticleEngine : public Engine {
  41:eurorack/plaits/dsp/engine/particle_engine.h ****  public:
  42:eurorack/plaits/dsp/engine/particle_engine.h ****   ParticleEngine() { }
 592              		.loc 22 42 3 is_stmt 1 view .LVU163
 593              	.LBB1325:
 594              	.LBB1326:
 595              	.LBI1326:
 596              		.loc 6 80 3 view .LVU164
 597              		.loc 6 80 3 is_stmt 0 view .LVU165
 598              	.LBE1326:
 599              		.loc 22 42 20 view .LVU166
 600 0032 3149     		ldr	r1, .L24+28
 601 0034 C3F8C815 		str	r1, [r3, #1480]
 602              		.loc 22 42 20 is_stmt 1 view .LVU167
 603              	.LVL26:
 604              	.LBB1327:
 605              	.LBI1327:
 606              		.file 23 "eurorack/plaits/dsp/fx/diffuser.h"
   1:eurorack/plaits/dsp/fx/diffuser.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/fx/diffuser.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 41


   3:eurorack/plaits/dsp/fx/diffuser.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/fx/diffuser.h **** //
   5:eurorack/plaits/dsp/fx/diffuser.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/fx/diffuser.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/fx/diffuser.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/fx/diffuser.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/fx/diffuser.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/fx/diffuser.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/fx/diffuser.h **** // 
  12:eurorack/plaits/dsp/fx/diffuser.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/fx/diffuser.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/fx/diffuser.h **** // 
  15:eurorack/plaits/dsp/fx/diffuser.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/fx/diffuser.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/fx/diffuser.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/fx/diffuser.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/fx/diffuser.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/fx/diffuser.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/fx/diffuser.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/fx/diffuser.h **** // 
  23:eurorack/plaits/dsp/fx/diffuser.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/fx/diffuser.h **** //
  25:eurorack/plaits/dsp/fx/diffuser.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/fx/diffuser.h **** //
  27:eurorack/plaits/dsp/fx/diffuser.h **** // Granular diffuser.
  28:eurorack/plaits/dsp/fx/diffuser.h **** 
  29:eurorack/plaits/dsp/fx/diffuser.h **** #ifndef PLAITS_DSP_FX_DIFFUSER_H_
  30:eurorack/plaits/dsp/fx/diffuser.h **** #define PLAITS_DSP_FX_DIFFUSER_H_
  31:eurorack/plaits/dsp/fx/diffuser.h **** 
  32:eurorack/plaits/dsp/fx/diffuser.h **** #include "stmlib/stmlib.h"
  33:eurorack/plaits/dsp/fx/diffuser.h **** 
  34:eurorack/plaits/dsp/fx/diffuser.h **** #include "plaits/dsp/fx/fx_engine.h"
  35:eurorack/plaits/dsp/fx/diffuser.h **** 
  36:eurorack/plaits/dsp/fx/diffuser.h **** namespace plaits {
  37:eurorack/plaits/dsp/fx/diffuser.h **** 
  38:eurorack/plaits/dsp/fx/diffuser.h **** class Diffuser {
  39:eurorack/plaits/dsp/fx/diffuser.h ****  public:
  40:eurorack/plaits/dsp/fx/diffuser.h ****   Diffuser() { }
 607              		.loc 23 40 3 view .LVU168
 608              	.LBB1328:
 609              	.LBI1328:
 610              		.file 24 "eurorack/plaits/dsp/fx/fx_engine.h"
   1:eurorack/plaits/dsp/fx/fx_engine.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/plaits/dsp/fx/fx_engine.h **** //
   3:eurorack/plaits/dsp/fx/fx_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/fx/fx_engine.h **** //
   5:eurorack/plaits/dsp/fx/fx_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/fx/fx_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/fx/fx_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/fx/fx_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/fx/fx_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/fx/fx_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/fx/fx_engine.h **** // 
  12:eurorack/plaits/dsp/fx/fx_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/fx/fx_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/fx/fx_engine.h **** // 
  15:eurorack/plaits/dsp/fx/fx_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 42


  16:eurorack/plaits/dsp/fx/fx_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/fx/fx_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/fx/fx_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/fx/fx_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/fx/fx_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/fx/fx_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/fx/fx_engine.h **** // 
  23:eurorack/plaits/dsp/fx/fx_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/fx/fx_engine.h **** //
  25:eurorack/plaits/dsp/fx/fx_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/fx/fx_engine.h **** //
  27:eurorack/plaits/dsp/fx/fx_engine.h **** // Base class for building reverbs.
  28:eurorack/plaits/dsp/fx/fx_engine.h **** 
  29:eurorack/plaits/dsp/fx/fx_engine.h **** #ifndef PLAITS_DSP_FX_FX_ENGINE_H_
  30:eurorack/plaits/dsp/fx/fx_engine.h **** #define PLAITS_DSP_FX_FX_ENGINE_H_
  31:eurorack/plaits/dsp/fx/fx_engine.h **** 
  32:eurorack/plaits/dsp/fx/fx_engine.h **** #include <algorithm>
  33:eurorack/plaits/dsp/fx/fx_engine.h **** 
  34:eurorack/plaits/dsp/fx/fx_engine.h **** #include "stmlib/stmlib.h"
  35:eurorack/plaits/dsp/fx/fx_engine.h **** 
  36:eurorack/plaits/dsp/fx/fx_engine.h **** #include "stmlib/dsp/dsp.h"
  37:eurorack/plaits/dsp/fx/fx_engine.h **** #include "stmlib/dsp/cosine_oscillator.h"
  38:eurorack/plaits/dsp/fx/fx_engine.h **** 
  39:eurorack/plaits/dsp/fx/fx_engine.h **** namespace plaits {
  40:eurorack/plaits/dsp/fx/fx_engine.h **** 
  41:eurorack/plaits/dsp/fx/fx_engine.h **** #define TAIL , -1
  42:eurorack/plaits/dsp/fx/fx_engine.h **** 
  43:eurorack/plaits/dsp/fx/fx_engine.h **** enum Format {
  44:eurorack/plaits/dsp/fx/fx_engine.h ****   FORMAT_12_BIT,
  45:eurorack/plaits/dsp/fx/fx_engine.h ****   FORMAT_16_BIT,
  46:eurorack/plaits/dsp/fx/fx_engine.h ****   FORMAT_32_BIT
  47:eurorack/plaits/dsp/fx/fx_engine.h **** };
  48:eurorack/plaits/dsp/fx/fx_engine.h **** 
  49:eurorack/plaits/dsp/fx/fx_engine.h **** enum LFOIndex {
  50:eurorack/plaits/dsp/fx/fx_engine.h ****   LFO_1,
  51:eurorack/plaits/dsp/fx/fx_engine.h ****   LFO_2
  52:eurorack/plaits/dsp/fx/fx_engine.h **** };
  53:eurorack/plaits/dsp/fx/fx_engine.h **** 
  54:eurorack/plaits/dsp/fx/fx_engine.h **** template<Format format>
  55:eurorack/plaits/dsp/fx/fx_engine.h **** struct DataType { };
  56:eurorack/plaits/dsp/fx/fx_engine.h **** 
  57:eurorack/plaits/dsp/fx/fx_engine.h **** template<>
  58:eurorack/plaits/dsp/fx/fx_engine.h **** struct DataType<FORMAT_12_BIT> {
  59:eurorack/plaits/dsp/fx/fx_engine.h ****   typedef uint16_t T;
  60:eurorack/plaits/dsp/fx/fx_engine.h ****   
  61:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline float Decompress(T value) {
  62:eurorack/plaits/dsp/fx/fx_engine.h ****     return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
  63:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  64:eurorack/plaits/dsp/fx/fx_engine.h ****   
  65:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline T Compress(float value) {
  66:eurorack/plaits/dsp/fx/fx_engine.h ****     return static_cast<uint16_t>(
  67:eurorack/plaits/dsp/fx/fx_engine.h ****         stmlib::Clip16(static_cast<int32_t>(value * 4096.0f)));
  68:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  69:eurorack/plaits/dsp/fx/fx_engine.h **** };
  70:eurorack/plaits/dsp/fx/fx_engine.h **** 
  71:eurorack/plaits/dsp/fx/fx_engine.h **** template<>
  72:eurorack/plaits/dsp/fx/fx_engine.h **** struct DataType<FORMAT_16_BIT> {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 43


  73:eurorack/plaits/dsp/fx/fx_engine.h ****   typedef uint16_t T;
  74:eurorack/plaits/dsp/fx/fx_engine.h ****   
  75:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline float Decompress(T value) {
  76:eurorack/plaits/dsp/fx/fx_engine.h ****     return static_cast<float>(static_cast<int16_t>(value)) / 32768.0f;
  77:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  78:eurorack/plaits/dsp/fx/fx_engine.h ****   
  79:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline T Compress(float value) {
  80:eurorack/plaits/dsp/fx/fx_engine.h ****     return static_cast<uint16_t>(
  81:eurorack/plaits/dsp/fx/fx_engine.h ****         stmlib::Clip16(static_cast<int32_t>(value * 32768.0f)));
  82:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  83:eurorack/plaits/dsp/fx/fx_engine.h **** };
  84:eurorack/plaits/dsp/fx/fx_engine.h **** 
  85:eurorack/plaits/dsp/fx/fx_engine.h **** template<>
  86:eurorack/plaits/dsp/fx/fx_engine.h **** struct DataType<FORMAT_32_BIT> {
  87:eurorack/plaits/dsp/fx/fx_engine.h ****   typedef float T;
  88:eurorack/plaits/dsp/fx/fx_engine.h ****   
  89:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline float Decompress(T value) {
  90:eurorack/plaits/dsp/fx/fx_engine.h ****     return value;;
  91:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  92:eurorack/plaits/dsp/fx/fx_engine.h ****   
  93:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline T Compress(float value) {
  94:eurorack/plaits/dsp/fx/fx_engine.h ****     return value;
  95:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  96:eurorack/plaits/dsp/fx/fx_engine.h **** };
  97:eurorack/plaits/dsp/fx/fx_engine.h **** 
  98:eurorack/plaits/dsp/fx/fx_engine.h **** template<
  99:eurorack/plaits/dsp/fx/fx_engine.h ****     size_t size,
 100:eurorack/plaits/dsp/fx/fx_engine.h ****     Format format = FORMAT_12_BIT>
 101:eurorack/plaits/dsp/fx/fx_engine.h **** class FxEngine {
 102:eurorack/plaits/dsp/fx/fx_engine.h ****  public:
 103:eurorack/plaits/dsp/fx/fx_engine.h ****   typedef typename DataType<format>::T T;
 104:eurorack/plaits/dsp/fx/fx_engine.h ****   FxEngine() { }
 611              		.loc 24 104 3 view .LVU169
 612              	.LBE1328:
 613              	.LBE1327:
 614              	.LBE1325:
 615              	.LBE1324:
 616              	.LBE1379:
 617              	.LBE1389:
 618              		.loc 24 104 14 view .LVU170
 619              	.LBB1390:
 620              	.LBB1380:
 621              	.LBB1331:
 622              	.LBB1330:
 623              	.LBB1329:
 624              	.LBI1329:
 625              		.loc 9 179 3 view .LVU171
 626              		.loc 9 179 3 is_stmt 0 view .LVU172
 627              	.LBE1329:
 628              	.LBE1330:
 629              	.LBE1331:
 630              	.LBB1332:
 631              	.LBI1332:
 632              		.file 25 "eurorack/plaits/dsp/engine/snare_drum_engine.h"
   1:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/snare_drum_engine.h **** //
   3:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 44


   4:eurorack/plaits/dsp/engine/snare_drum_engine.h **** //
   5:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // 
  12:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // 
  15:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // 
  23:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/snare_drum_engine.h **** //
  25:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/snare_drum_engine.h **** //
  27:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // 808 and synthetic snare drum generators.
  28:eurorack/plaits/dsp/engine/snare_drum_engine.h **** 
  29:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #ifndef PLAITS_DSP_ENGINE_SNARE_DRUM_ENGINE_H_
  30:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #define PLAITS_DSP_ENGINE_SNARE_DRUM_ENGINE_H_
  31:eurorack/plaits/dsp/engine/snare_drum_engine.h **** 
  32:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #include "plaits/dsp/drums/analog_snare_drum.h"
  33:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #include "plaits/dsp/drums/synthetic_snare_drum.h"
  34:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/snare_drum_engine.h **** 
  36:eurorack/plaits/dsp/engine/snare_drum_engine.h **** namespace plaits {
  37:eurorack/plaits/dsp/engine/snare_drum_engine.h ****   
  38:eurorack/plaits/dsp/engine/snare_drum_engine.h **** class SnareDrumEngine : public Engine {
  39:eurorack/plaits/dsp/engine/snare_drum_engine.h ****  public:
  40:eurorack/plaits/dsp/engine/snare_drum_engine.h ****   SnareDrumEngine() { }
 633              		.loc 25 40 3 is_stmt 1 view .LVU173
 634              	.LBB1333:
 635              	.LBB1334:
 636              	.LBI1334:
 637              		.loc 6 80 3 view .LVU174
 638              		.loc 6 80 3 is_stmt 0 view .LVU175
 639              	.LBE1334:
 640              		.loc 25 40 21 view .LVU176
 641 0038 3049     		ldr	r1, .L24+32
 642 003a C3F8A816 		str	r1, [r3, #1704]
 643              	.LVL27:
 644              	.LBB1335:
 645              	.LBI1335:
 646              		.file 26 "eurorack/plaits/dsp/drums/analog_snare_drum.h"
   1:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/analog_snare_drum.h **** //
   3:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/analog_snare_drum.h **** //
   5:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // of this software and associated documentation files (the "Software"), to deal
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 45


   7:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // 
  12:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // 
  15:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // 
  23:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/analog_snare_drum.h **** //
  25:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/analog_snare_drum.h **** //
  27:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // 808 snare drum model, revisited.
  28:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  29:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #ifndef PLAITS_DSP_DRUMS_ANALOG_SNARE_DRUM_H_
  30:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #define PLAITS_DSP_DRUMS_ANALOG_SNARE_DRUM_H_
  31:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  32:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include <algorithm>
  33:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  34:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/dsp/filter.h"
  36:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/dsp/parameter_interpolator.h"
  37:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/dsp/units.h"
  38:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/utils/random.h"
  39:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  40:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "plaits/dsp/dsp.h"
  41:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "plaits/dsp/oscillator/sine_oscillator.h"
  42:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  43:eurorack/plaits/dsp/drums/analog_snare_drum.h **** namespace plaits {
  44:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  45:eurorack/plaits/dsp/drums/analog_snare_drum.h **** class AnalogSnareDrum {
  46:eurorack/plaits/dsp/drums/analog_snare_drum.h ****  public:
  47:eurorack/plaits/dsp/drums/analog_snare_drum.h ****   AnalogSnareDrum() { }
 647              		.loc 26 47 3 is_stmt 1 view .LVU177
 648              	.LBE1335:
 649              	.LBE1333:
 650              	.LBE1332:
 651              	.LBE1380:
 652              	.LBE1390:
 653              		.loc 26 47 21 view .LVU178
 654              	.LBB1391:
 655              	.LBB1381:
 656              	.LBB1344:
 657              	.LBB1342:
 658              	.LBB1337:
 659              	.LBB1336:
 660              	.LBI1336:
 661              		.loc 9 179 3 view .LVU179
 662              		.loc 9 179 3 is_stmt 0 view .LVU180
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 46


 663              	.LBE1336:
 664              	.LBE1337:
 665              	.LBE1342:
 666              	.LBE1344:
 667              	.LBE1381:
 668              	.LBE1391:
 669              		.loc 26 47 21 is_stmt 1 view .LVU181
 670              	.LBB1392:
 671              	.LBB1382:
 672              	.LBB1345:
 673              	.LBB1343:
 674              	.LBB1338:
 675              	.LBI1338:
 676              		.file 27 "eurorack/plaits/dsp/drums/synthetic_snare_drum.h"
   1:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** //
   3:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** //
   5:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // 
  12:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // 
  15:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // 
  23:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** //
  25:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** //
  27:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Naive snare drum model (two modulated oscillators + filtered noise).
  28:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Uses a few magic numbers taken from the 909 schematics:
  29:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // - Ratio between the two modes of the drum set to 1.47.
  30:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // - Funky coupling between the two modes.
  31:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // - Noise coloration filters and envelope shapes for the snare.
  32:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  33:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #ifndef PLAITS_DSP_DRUMS_SYNTHETIC_SNARE_DRUM_H_
  34:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #define PLAITS_DSP_DRUMS_SYNTHETIC_SNARE_DRUM_H_
  35:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  36:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include <algorithm>
  37:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  38:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include "stmlib/dsp/dsp.h"
  39:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include "stmlib/dsp/parameter_interpolator.h"
  40:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include "stmlib/dsp/units.h"
  41:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  42:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include "plaits/dsp/dsp.h"
  43:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 47


  44:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** namespace plaits {
  45:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  46:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** class SyntheticSnareDrum {
  47:eurorack/plaits/dsp/drums/synthetic_snare_drum.h ****  public:
  48:eurorack/plaits/dsp/drums/synthetic_snare_drum.h ****   SyntheticSnareDrum() { }
 677              		.loc 27 48 3 view .LVU182
 678              	.LBB1339:
 679              	.LBI1339:
  94:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
 680              		.loc 9 94 3 view .LVU183
  94:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
 681              		.loc 9 94 3 is_stmt 0 view .LVU184
 682              	.LBE1339:
 683              	.LBB1340:
 684              	.LBI1340:
  94:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
 685              		.loc 9 94 3 is_stmt 1 view .LVU185
  94:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
 686              		.loc 9 94 3 is_stmt 0 view .LVU186
 687              	.LBE1340:
 688              	.LBB1341:
 689              	.LBI1341:
 690              		.loc 9 179 3 is_stmt 1 view .LVU187
 691              		.loc 9 179 3 is_stmt 0 view .LVU188
 692              	.LBE1341:
 693              	.LBE1338:
 694              	.LBE1343:
 695              	.LBE1345:
 696              	.LBB1346:
 697              	.LBI1346:
 698              		.file 28 "eurorack/plaits/dsp/engine/string_engine.h"
   1:eurorack/plaits/dsp/engine/string_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/string_engine.h **** //
   3:eurorack/plaits/dsp/engine/string_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/string_engine.h **** //
   5:eurorack/plaits/dsp/engine/string_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/string_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/string_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/string_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/string_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/string_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/string_engine.h **** // 
  12:eurorack/plaits/dsp/engine/string_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/string_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/string_engine.h **** // 
  15:eurorack/plaits/dsp/engine/string_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/string_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/string_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/string_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/string_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/string_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/string_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/string_engine.h **** // 
  23:eurorack/plaits/dsp/engine/string_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/string_engine.h **** //
  25:eurorack/plaits/dsp/engine/string_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/string_engine.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 48


  27:eurorack/plaits/dsp/engine/string_engine.h **** // Three voices of string synthesis.
  28:eurorack/plaits/dsp/engine/string_engine.h **** 
  29:eurorack/plaits/dsp/engine/string_engine.h **** #ifndef PLAITS_DSP_ENGINE_STRING_ENGINE_H_
  30:eurorack/plaits/dsp/engine/string_engine.h **** #define PLAITS_DSP_ENGINE_STRING_ENGINE_H_
  31:eurorack/plaits/dsp/engine/string_engine.h **** 
  32:eurorack/plaits/dsp/engine/string_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/string_engine.h **** #include "plaits/dsp/physical_modelling/string_voice.h"
  34:eurorack/plaits/dsp/engine/string_engine.h **** 
  35:eurorack/plaits/dsp/engine/string_engine.h **** namespace plaits {
  36:eurorack/plaits/dsp/engine/string_engine.h **** 
  37:eurorack/plaits/dsp/engine/string_engine.h **** const int kNumStrings = 3;
  38:eurorack/plaits/dsp/engine/string_engine.h **** 
  39:eurorack/plaits/dsp/engine/string_engine.h **** class StringEngine : public Engine {
  40:eurorack/plaits/dsp/engine/string_engine.h ****  public:
  41:eurorack/plaits/dsp/engine/string_engine.h ****   StringEngine() { }
 699              		.loc 28 41 3 is_stmt 1 view .LVU189
 700              	.LBB1347:
 701              	.LBB1348:
 702              	.LBI1348:
 703              		.loc 6 80 3 view .LVU190
 704              		.loc 6 80 3 is_stmt 0 view .LVU191
 705              	.LBE1348:
 706              		.loc 28 41 18 view .LVU192
 707 003e 3049     		ldr	r1, .L24+36
 708 0040 C3F8CC17 		str	r1, [r3, #1996]
 709              		.loc 28 41 18 is_stmt 1 view .LVU193
 710              	.LVL28:
 711              	.LBB1349:
 712              	.LBI1349:
 713              		.file 29 "eurorack/plaits/dsp/physical_modelling/delay_line.h"
   1:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/plaits/dsp/physical_modelling/delay_line.h **** //
   3:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/physical_modelling/delay_line.h **** //
   5:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // 
  12:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // 
  15:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // 
  23:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/physical_modelling/delay_line.h **** //
  25:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/physical_modelling/delay_line.h **** //
  27:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // Delay line (same implementation as from stmlib, but does not own its buffer).
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 49


  28:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  29:eurorack/plaits/dsp/physical_modelling/delay_line.h **** #ifndef PLAITS_DSP_PHYSICAL_MODELLING_DELAY_LINE_H_
  30:eurorack/plaits/dsp/physical_modelling/delay_line.h **** #define PLAITS_DSP_PHYSICAL_MODELLING_DELAY_LINE_H_
  31:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  32:eurorack/plaits/dsp/physical_modelling/delay_line.h **** #include <algorithm>
  33:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  34:eurorack/plaits/dsp/physical_modelling/delay_line.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  36:eurorack/plaits/dsp/physical_modelling/delay_line.h **** namespace plaits {
  37:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  38:eurorack/plaits/dsp/physical_modelling/delay_line.h **** template<typename T, size_t max_delay>
  39:eurorack/plaits/dsp/physical_modelling/delay_line.h **** class DelayLine {
  40:eurorack/plaits/dsp/physical_modelling/delay_line.h ****  public:
  41:eurorack/plaits/dsp/physical_modelling/delay_line.h ****   DelayLine() { }
 714              		.loc 29 41 3 view .LVU194
 715              		.loc 29 41 3 is_stmt 0 view .LVU195
 716              	.LBE1349:
 717              	.LBE1347:
 718              	.LBE1346:
 719              	.LBB1350:
 720              	.LBI1350:
 721              		.file 30 "eurorack/plaits/dsp/engine/swarm_engine.h"
   1:eurorack/plaits/dsp/engine/swarm_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/swarm_engine.h **** //
   3:eurorack/plaits/dsp/engine/swarm_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/swarm_engine.h **** //
   5:eurorack/plaits/dsp/engine/swarm_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/swarm_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/swarm_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/swarm_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/swarm_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/swarm_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/swarm_engine.h **** // 
  12:eurorack/plaits/dsp/engine/swarm_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/swarm_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/swarm_engine.h **** // 
  15:eurorack/plaits/dsp/engine/swarm_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/swarm_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/swarm_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/swarm_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/swarm_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/swarm_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/swarm_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/swarm_engine.h **** // 
  23:eurorack/plaits/dsp/engine/swarm_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/swarm_engine.h **** //
  25:eurorack/plaits/dsp/engine/swarm_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/swarm_engine.h **** //
  27:eurorack/plaits/dsp/engine/swarm_engine.h **** // Swarm of sawtooths and sines.
  28:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  29:eurorack/plaits/dsp/engine/swarm_engine.h **** #ifndef PLAITS_DSP_ENGINE_SWARM_ENGINE_H_
  30:eurorack/plaits/dsp/engine/swarm_engine.h **** #define PLAITS_DSP_ENGINE_SWARM_ENGINE_H_
  31:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  32:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "stmlib/dsp/polyblep.h"
  33:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "stmlib/dsp/units.h"
  34:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "stmlib/utils/random.h"
  35:eurorack/plaits/dsp/engine/swarm_engine.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 50


  36:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/dsp/engine/engine.h"
  37:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/dsp/oscillator/oscillator.h"
  38:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/dsp/oscillator/string_synth_oscillator.h"
  39:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/dsp/oscillator/sine_oscillator.h"
  40:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/resources.h"
  41:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  42:eurorack/plaits/dsp/engine/swarm_engine.h **** namespace plaits {
  43:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  44:eurorack/plaits/dsp/engine/swarm_engine.h **** const int kNumSwarmVoices = 8;
  45:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  46:eurorack/plaits/dsp/engine/swarm_engine.h **** class GrainEnvelope {
  47:eurorack/plaits/dsp/engine/swarm_engine.h ****  public:
  48:eurorack/plaits/dsp/engine/swarm_engine.h ****   GrainEnvelope() { }
  49:eurorack/plaits/dsp/engine/swarm_engine.h ****   ~GrainEnvelope() { }
  50:eurorack/plaits/dsp/engine/swarm_engine.h ****   
  51:eurorack/plaits/dsp/engine/swarm_engine.h ****   void Init() {
  52:eurorack/plaits/dsp/engine/swarm_engine.h ****     from_ = 0.0f;
  53:eurorack/plaits/dsp/engine/swarm_engine.h ****     interval_ = 1.0f;
  54:eurorack/plaits/dsp/engine/swarm_engine.h ****     phase_ = 1.0f;
  55:eurorack/plaits/dsp/engine/swarm_engine.h ****     fm_ = 0.0f;
  56:eurorack/plaits/dsp/engine/swarm_engine.h ****     amplitude_ = 0.5f;
  57:eurorack/plaits/dsp/engine/swarm_engine.h ****     previous_size_ratio_ = 0.0f;
  58:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
  59:eurorack/plaits/dsp/engine/swarm_engine.h ****   
  60:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline void Step(float rate, bool burst_mode, bool start_burst) {
  61:eurorack/plaits/dsp/engine/swarm_engine.h ****     bool randomize = false;
  62:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (start_burst) {
  63:eurorack/plaits/dsp/engine/swarm_engine.h ****       phase_ = 0.5f;
  64:eurorack/plaits/dsp/engine/swarm_engine.h ****       fm_ = 16.0f;
  65:eurorack/plaits/dsp/engine/swarm_engine.h ****       randomize = true;
  66:eurorack/plaits/dsp/engine/swarm_engine.h ****     } else {
  67:eurorack/plaits/dsp/engine/swarm_engine.h ****       phase_ += rate * fm_;
  68:eurorack/plaits/dsp/engine/swarm_engine.h ****       if (phase_ >= 1.0f) {
  69:eurorack/plaits/dsp/engine/swarm_engine.h ****         phase_ -= static_cast<float>(static_cast<int>(phase_));
  70:eurorack/plaits/dsp/engine/swarm_engine.h ****         randomize = true;
  71:eurorack/plaits/dsp/engine/swarm_engine.h ****       }
  72:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
  73:eurorack/plaits/dsp/engine/swarm_engine.h ****     
  74:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (randomize) {
  75:eurorack/plaits/dsp/engine/swarm_engine.h ****       from_ += interval_;
  76:eurorack/plaits/dsp/engine/swarm_engine.h ****       interval_ = stmlib::Random::GetFloat() - from_;
  77:eurorack/plaits/dsp/engine/swarm_engine.h ****       // Randomize the duration of the grain.
  78:eurorack/plaits/dsp/engine/swarm_engine.h ****       if (burst_mode) {
  79:eurorack/plaits/dsp/engine/swarm_engine.h ****         fm_ *= 0.8f + 0.2f * stmlib::Random::GetFloat();
  80:eurorack/plaits/dsp/engine/swarm_engine.h ****       } else {
  81:eurorack/plaits/dsp/engine/swarm_engine.h ****         fm_ = 0.5f + 1.5f * stmlib::Random::GetFloat();
  82:eurorack/plaits/dsp/engine/swarm_engine.h ****       }
  83:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
  84:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
  85:eurorack/plaits/dsp/engine/swarm_engine.h ****   
  86:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline float frequency(float size_ratio) const {
  87:eurorack/plaits/dsp/engine/swarm_engine.h ****     // We approximate two overlapping grains of frequencies f1 and f2
  88:eurorack/plaits/dsp/engine/swarm_engine.h ****     // By a continuous tone ramping from f1 to f2. This allows a continuous
  89:eurorack/plaits/dsp/engine/swarm_engine.h ****     // transition between the "grain cloud" and "swarm of glissandi" textures.
  90:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (size_ratio < 1.0f) {
  91:eurorack/plaits/dsp/engine/swarm_engine.h ****       return 2.0f * (from_ + interval_ * phase_) - 1.0f;
  92:eurorack/plaits/dsp/engine/swarm_engine.h ****     } else {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 51


  93:eurorack/plaits/dsp/engine/swarm_engine.h ****       return from_;
  94:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
  95:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
  96:eurorack/plaits/dsp/engine/swarm_engine.h ****   
  97:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline float amplitude(float size_ratio) {
  98:eurorack/plaits/dsp/engine/swarm_engine.h ****     float target_amplitude = 1.0f;
  99:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (size_ratio >= 1.0f) {
 100:eurorack/plaits/dsp/engine/swarm_engine.h ****       float phase = (phase_ - 0.5f) * size_ratio;
 101:eurorack/plaits/dsp/engine/swarm_engine.h ****       CONSTRAIN(phase, -1.0f, 1.0f);
 102:eurorack/plaits/dsp/engine/swarm_engine.h ****       float e = stmlib::InterpolateWrap(
 103:eurorack/plaits/dsp/engine/swarm_engine.h ****           lut_sine, 0.5f * phase + 1.25f, 1024.0f);
 104:eurorack/plaits/dsp/engine/swarm_engine.h ****       target_amplitude = 0.5f * (e + 1.0f);
 105:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
 106:eurorack/plaits/dsp/engine/swarm_engine.h ****     
 107:eurorack/plaits/dsp/engine/swarm_engine.h ****     if ((size_ratio >= 1.0f) ^ (previous_size_ratio_ >= 1.0f)) {
 108:eurorack/plaits/dsp/engine/swarm_engine.h ****       filter_coefficient_ = 0.5f;
 109:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
 110:eurorack/plaits/dsp/engine/swarm_engine.h ****     filter_coefficient_ *= 0.95f;
 111:eurorack/plaits/dsp/engine/swarm_engine.h ****     
 112:eurorack/plaits/dsp/engine/swarm_engine.h ****     previous_size_ratio_ = size_ratio;
 113:eurorack/plaits/dsp/engine/swarm_engine.h ****     ONE_POLE(amplitude_, target_amplitude, 0.5f - filter_coefficient_);
 114:eurorack/plaits/dsp/engine/swarm_engine.h ****     return amplitude_;
 115:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
 116:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 117:eurorack/plaits/dsp/engine/swarm_engine.h ****  private:
 118:eurorack/plaits/dsp/engine/swarm_engine.h ****   float from_;
 119:eurorack/plaits/dsp/engine/swarm_engine.h ****   float interval_;
 120:eurorack/plaits/dsp/engine/swarm_engine.h ****   float phase_;
 121:eurorack/plaits/dsp/engine/swarm_engine.h ****   float fm_;
 122:eurorack/plaits/dsp/engine/swarm_engine.h ****   float amplitude_;
 123:eurorack/plaits/dsp/engine/swarm_engine.h ****   float previous_size_ratio_;
 124:eurorack/plaits/dsp/engine/swarm_engine.h ****   float filter_coefficient_;
 125:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 126:eurorack/plaits/dsp/engine/swarm_engine.h ****   DISALLOW_COPY_AND_ASSIGN(GrainEnvelope);
 127:eurorack/plaits/dsp/engine/swarm_engine.h **** };
 128:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 129:eurorack/plaits/dsp/engine/swarm_engine.h **** class AdditiveSawOscillator {
 130:eurorack/plaits/dsp/engine/swarm_engine.h ****  public:
 131:eurorack/plaits/dsp/engine/swarm_engine.h ****   AdditiveSawOscillator() { }
 132:eurorack/plaits/dsp/engine/swarm_engine.h ****   ~AdditiveSawOscillator() { }
 133:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 134:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline void Init() {
 135:eurorack/plaits/dsp/engine/swarm_engine.h ****     phase_ = 0.0f;
 136:eurorack/plaits/dsp/engine/swarm_engine.h ****     next_sample_ = 0.0f;
 137:eurorack/plaits/dsp/engine/swarm_engine.h ****     frequency_ = 0.01f;
 138:eurorack/plaits/dsp/engine/swarm_engine.h ****     gain_ = 0.0f;
 139:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
 140:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 141:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline void Render(
 142:eurorack/plaits/dsp/engine/swarm_engine.h ****       float frequency,
 143:eurorack/plaits/dsp/engine/swarm_engine.h ****       float level,
 144:eurorack/plaits/dsp/engine/swarm_engine.h ****       float* out,
 145:eurorack/plaits/dsp/engine/swarm_engine.h ****       size_t size) {
 146:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (frequency >= kMaxFrequency) {
 147:eurorack/plaits/dsp/engine/swarm_engine.h ****       frequency = kMaxFrequency;
 148:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
 149:eurorack/plaits/dsp/engine/swarm_engine.h ****     stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 52


 150:eurorack/plaits/dsp/engine/swarm_engine.h ****     stmlib::ParameterInterpolator gain(&gain_, level, size);
 151:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 152:eurorack/plaits/dsp/engine/swarm_engine.h ****     float next_sample = next_sample_;
 153:eurorack/plaits/dsp/engine/swarm_engine.h ****     float phase = phase_;
 154:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 155:eurorack/plaits/dsp/engine/swarm_engine.h ****     while (size--) {
 156:eurorack/plaits/dsp/engine/swarm_engine.h ****       float this_sample = next_sample;
 157:eurorack/plaits/dsp/engine/swarm_engine.h ****       next_sample = 0.0f;
 158:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 159:eurorack/plaits/dsp/engine/swarm_engine.h ****       const float frequency = fm.Next();
 160:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 161:eurorack/plaits/dsp/engine/swarm_engine.h ****       phase += frequency;
 162:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 163:eurorack/plaits/dsp/engine/swarm_engine.h ****       if (phase >= 1.0f) {
 164:eurorack/plaits/dsp/engine/swarm_engine.h ****         phase -= 1.0f;
 165:eurorack/plaits/dsp/engine/swarm_engine.h ****         float t = phase / frequency;
 166:eurorack/plaits/dsp/engine/swarm_engine.h ****         this_sample -= stmlib::ThisBlepSample(t);
 167:eurorack/plaits/dsp/engine/swarm_engine.h ****         next_sample -= stmlib::NextBlepSample(t);
 168:eurorack/plaits/dsp/engine/swarm_engine.h ****       }
 169:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 170:eurorack/plaits/dsp/engine/swarm_engine.h ****       next_sample += phase;
 171:eurorack/plaits/dsp/engine/swarm_engine.h ****       *out++ += (2.0f * this_sample - 1.0f) * gain.Next();
 172:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
 173:eurorack/plaits/dsp/engine/swarm_engine.h ****     phase_ = phase;
 174:eurorack/plaits/dsp/engine/swarm_engine.h ****     next_sample_ = next_sample;
 175:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
 176:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 177:eurorack/plaits/dsp/engine/swarm_engine.h ****  private:
 178:eurorack/plaits/dsp/engine/swarm_engine.h ****   // Oscillator state.
 179:eurorack/plaits/dsp/engine/swarm_engine.h ****   float phase_;
 180:eurorack/plaits/dsp/engine/swarm_engine.h ****   float next_sample_;
 181:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 182:eurorack/plaits/dsp/engine/swarm_engine.h ****   // For interpolation of parameters.
 183:eurorack/plaits/dsp/engine/swarm_engine.h ****   float frequency_;
 184:eurorack/plaits/dsp/engine/swarm_engine.h ****   float gain_;
 185:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 186:eurorack/plaits/dsp/engine/swarm_engine.h ****   DISALLOW_COPY_AND_ASSIGN(AdditiveSawOscillator);
 187:eurorack/plaits/dsp/engine/swarm_engine.h **** };
 188:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 189:eurorack/plaits/dsp/engine/swarm_engine.h **** class SwarmVoice {
 190:eurorack/plaits/dsp/engine/swarm_engine.h ****  public:
 191:eurorack/plaits/dsp/engine/swarm_engine.h ****   SwarmVoice() { }
 192:eurorack/plaits/dsp/engine/swarm_engine.h ****   ~SwarmVoice() { }
 193:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 194:eurorack/plaits/dsp/engine/swarm_engine.h ****   void Init(float rank) {
 195:eurorack/plaits/dsp/engine/swarm_engine.h ****     rank_ = rank;
 196:eurorack/plaits/dsp/engine/swarm_engine.h ****     envelope_.Init();
 197:eurorack/plaits/dsp/engine/swarm_engine.h ****     saw_.Init();
 198:eurorack/plaits/dsp/engine/swarm_engine.h ****     sine_.Init();
 199:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
 200:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 201:eurorack/plaits/dsp/engine/swarm_engine.h ****   void Render(
 202:eurorack/plaits/dsp/engine/swarm_engine.h ****       float f0,
 203:eurorack/plaits/dsp/engine/swarm_engine.h ****       float density,
 204:eurorack/plaits/dsp/engine/swarm_engine.h ****       bool burst_mode,
 205:eurorack/plaits/dsp/engine/swarm_engine.h ****       bool start_burst,
 206:eurorack/plaits/dsp/engine/swarm_engine.h ****       float spread,
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 53


 207:eurorack/plaits/dsp/engine/swarm_engine.h ****       float size_ratio,
 208:eurorack/plaits/dsp/engine/swarm_engine.h ****       float* saw,
 209:eurorack/plaits/dsp/engine/swarm_engine.h ****       float* sine,
 210:eurorack/plaits/dsp/engine/swarm_engine.h ****       size_t size) {
 211:eurorack/plaits/dsp/engine/swarm_engine.h ****     envelope_.Step(density, burst_mode, start_burst);
 212:eurorack/plaits/dsp/engine/swarm_engine.h ****     
 213:eurorack/plaits/dsp/engine/swarm_engine.h ****     const float scale = 1.0f / kNumSwarmVoices;
 214:eurorack/plaits/dsp/engine/swarm_engine.h ****     const float amplitude = envelope_.amplitude(size_ratio) * scale;
 215:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 216:eurorack/plaits/dsp/engine/swarm_engine.h ****     const float expo_amount = envelope_.frequency(size_ratio);
 217:eurorack/plaits/dsp/engine/swarm_engine.h ****     f0 *= stmlib::SemitonesToRatio(48.0f * expo_amount * spread * rank_);
 218:eurorack/plaits/dsp/engine/swarm_engine.h ****     
 219:eurorack/plaits/dsp/engine/swarm_engine.h ****     const float linear_amount = rank_ * (rank_ + 0.01f) * spread * 0.25f;
 220:eurorack/plaits/dsp/engine/swarm_engine.h ****     f0 *= 1.0f + linear_amount;
 221:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 222:eurorack/plaits/dsp/engine/swarm_engine.h ****     saw_.Render(f0, amplitude, saw, size);
 223:eurorack/plaits/dsp/engine/swarm_engine.h ****     sine_.Render(f0, amplitude, sine, size);
 224:eurorack/plaits/dsp/engine/swarm_engine.h ****   };
 225:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 226:eurorack/plaits/dsp/engine/swarm_engine.h ****  private:
 227:eurorack/plaits/dsp/engine/swarm_engine.h ****   float rank_;
 228:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 229:eurorack/plaits/dsp/engine/swarm_engine.h ****   GrainEnvelope envelope_;
 230:eurorack/plaits/dsp/engine/swarm_engine.h ****   AdditiveSawOscillator saw_;
 231:eurorack/plaits/dsp/engine/swarm_engine.h ****   FastSineOscillator sine_;
 232:eurorack/plaits/dsp/engine/swarm_engine.h **** };
 233:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 234:eurorack/plaits/dsp/engine/swarm_engine.h **** class SwarmEngine : public Engine {
 235:eurorack/plaits/dsp/engine/swarm_engine.h ****  public:
 236:eurorack/plaits/dsp/engine/swarm_engine.h ****   SwarmEngine() { }
 722              		.loc 30 236 3 is_stmt 1 view .LVU196
 723              	.LBB1351:
 724              	.LBB1352:
 725              	.LBI1352:
 726              		.loc 6 80 3 view .LVU197
 727              		.loc 6 80 3 is_stmt 0 view .LVU198
 728              	.LBE1352:
 729              		.loc 30 236 17 view .LVU199
 730 0044 2F49     		ldr	r1, .L24+40
 731 0046 C3F81819 		str	r1, [r3, #2328]
 732              		.loc 30 236 17 is_stmt 1 view .LVU200
 733              	.LVL29:
 734              		.loc 30 236 17 is_stmt 0 view .LVU201
 735              	.LBE1351:
 736              	.LBE1350:
 737              	.LBB1353:
 738              	.LBI1353:
 739              		.file 31 "eurorack/plaits/dsp/engine/virtual_analog_engine.h"
   1:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** //
   3:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** //
   5:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // copies of the Software, and to permit persons to whom the Software is
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 54


  10:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // 
  12:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // 
  15:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // 
  23:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** //
  25:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** //
  27:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // 2 variable shape oscillators with sync and crossfading.
  28:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** 
  29:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #ifndef PLAITS_DSP_ENGINE_VIRTUAL_ANALOG_ENGINE_H_
  30:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #define PLAITS_DSP_ENGINE_VIRTUAL_ANALOG_ENGINE_H_
  31:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** 
  32:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #include "plaits/dsp/oscillator/variable_saw_oscillator.h"
  34:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #include "plaits/dsp/oscillator/variable_shape_oscillator.h"
  35:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** 
  36:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #define VA_VARIANT 2
  37:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** 
  38:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** namespace plaits {
  39:eurorack/plaits/dsp/engine/virtual_analog_engine.h ****   
  40:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** class VirtualAnalogEngine : public Engine {
  41:eurorack/plaits/dsp/engine/virtual_analog_engine.h ****  public:
  42:eurorack/plaits/dsp/engine/virtual_analog_engine.h ****   VirtualAnalogEngine() { }
 740              		.loc 31 42 3 is_stmt 1 view .LVU202
 741              	.LBB1354:
 742              	.LBB1355:
 743              	.LBI1355:
 744              		.loc 6 80 3 view .LVU203
 745              		.loc 6 80 3 is_stmt 0 view .LVU204
 746              	.LBE1355:
 747              		.loc 31 42 25 view .LVU205
 748 004a 2F49     		ldr	r1, .L24+44
 749 004c C3F8281B 		str	r1, [r3, #2856]
 750              	.LVL30:
 751              	.LBB1356:
 752              	.LBI1356:
 753              		.file 32 "eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h"
   1:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // furnished to do so, subject to the following conditions:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 55


  11:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // Continuously variable waveform: triangle > saw > square. Both square and
  28:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // triangle have variable slope / pulse-width. Additionally, the phase resets
  29:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // can be locked to a master frequency.
  30:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  31:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_VARIABLE_SHAPE_OSCILLATOR_H_
  32:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #define PLAITS_DSP_OSCILLATOR_VARIABLE_SHAPE_OSCILLATOR_H_
  33:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  34:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  36:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #include "stmlib/dsp/polyblep.h"
  37:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  38:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #include <algorithm>
  39:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  40:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** namespace plaits {
  41:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  42:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** class VariableShapeOscillator {
  43:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h ****  public:
  44:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h ****   VariableShapeOscillator() { }
 754              		.loc 32 44 3 is_stmt 1 view .LVU206
 755              		.loc 32 44 3 is_stmt 0 view .LVU207
 756              	.LBE1356:
 757              	.LBB1357:
 758              	.LBI1357:
 759              		.loc 32 44 3 is_stmt 1 view .LVU208
 760              		.loc 32 44 3 is_stmt 0 view .LVU209
 761              	.LBE1357:
 762              	.LBB1358:
 763              	.LBI1358:
 764              		.loc 32 44 3 is_stmt 1 view .LVU210
 765              		.loc 32 44 3 is_stmt 0 view .LVU211
 766              	.LBE1358:
 767              	.LBB1359:
 768              	.LBI1359:
 769              		.file 33 "eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h"
   1:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // in the Software without restriction, including without limitation the rights
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 56


   8:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // Saw with variable slope or notch
  28:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  29:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_VARIABLE_SAW_OSCILLATOR_H_
  30:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #define PLAITS_DSP_OSCILLATOR_VARIABLE_SAW_OSCILLATOR_H_
  31:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  32:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include "stmlib/dsp/dsp.h"
  33:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  34:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include "stmlib/dsp/polyblep.h"
  35:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  36:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include <algorithm>
  37:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  38:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include "plaits/dsp/oscillator/oscillator.h"
  39:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  40:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** namespace plaits {
  41:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  42:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** const float kVariableSawNotchDepth = 0.2f;
  43:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  44:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** class VariableSawOscillator {
  45:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h ****  public:
  46:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h ****   VariableSawOscillator() { }
 770              		.loc 33 46 3 is_stmt 1 view .LVU212
 771              		.loc 33 46 3 is_stmt 0 view .LVU213
 772              	.LBE1359:
 773              	.LBE1354:
 774              	.LBE1353:
 775              	.LBB1360:
 776              	.LBI1360:
 777              		.file 34 "eurorack/plaits/dsp/engine/waveshaping_engine.h"
   1:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/waveshaping_engine.h **** //
   3:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/waveshaping_engine.h **** //
   5:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // furnished to do so, subject to the following conditions:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 57


  11:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // 
  12:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // 
  15:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // 
  23:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/waveshaping_engine.h **** //
  25:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/waveshaping_engine.h **** //
  27:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // Slope -> Waveshaper -> Wavefolder.
  28:eurorack/plaits/dsp/engine/waveshaping_engine.h **** 
  29:eurorack/plaits/dsp/engine/waveshaping_engine.h **** #ifndef PLAITS_DSP_ENGINE_WAVESHAPING_ENGINE_H_
  30:eurorack/plaits/dsp/engine/waveshaping_engine.h **** #define PLAITS_DSP_ENGINE_WAVESHAPING_ENGINE_H_
  31:eurorack/plaits/dsp/engine/waveshaping_engine.h **** 
  32:eurorack/plaits/dsp/engine/waveshaping_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/waveshaping_engine.h **** #include "plaits/dsp/oscillator/oscillator.h"
  34:eurorack/plaits/dsp/engine/waveshaping_engine.h **** 
  35:eurorack/plaits/dsp/engine/waveshaping_engine.h **** namespace plaits {
  36:eurorack/plaits/dsp/engine/waveshaping_engine.h ****   
  37:eurorack/plaits/dsp/engine/waveshaping_engine.h **** class WaveshapingEngine : public Engine {
  38:eurorack/plaits/dsp/engine/waveshaping_engine.h ****  public:
  39:eurorack/plaits/dsp/engine/waveshaping_engine.h ****   WaveshapingEngine() { }
 778              		.loc 34 39 3 is_stmt 1 view .LVU214
 779              	.LBB1361:
 780              	.LBB1362:
 781              	.LBI1362:
 782              		.loc 6 80 3 view .LVU215
 783              		.loc 6 80 3 is_stmt 0 view .LVU216
 784              	.LBE1362:
 785              		.loc 34 39 23 view .LVU217
 786 0050 2E49     		ldr	r1, .L24+48
 787 0052 C3F8CC1B 		str	r1, [r3, #3020]
 788              	.LVL31:
 789              	.LBB1363:
 790              	.LBI1363:
 791              		.file 35 "eurorack/plaits/dsp/oscillator/oscillator.h"
   1:eurorack/plaits/dsp/oscillator/oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/oscillator.h **** // 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 58


  15:eurorack/plaits/dsp/oscillator/oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/oscillator.h **** // Single waveform oscillator. Can optionally do audio-rate linear FM, with
  28:eurorack/plaits/dsp/oscillator/oscillator.h **** // through-zero capabilities (negative frequencies).
  29:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  30:eurorack/plaits/dsp/oscillator/oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_OSCILLATOR_H_
  31:eurorack/plaits/dsp/oscillator/oscillator.h **** #define PLAITS_DSP_OSCILLATOR_OSCILLATOR_H_
  32:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  33:eurorack/plaits/dsp/oscillator/oscillator.h **** #include "stmlib/dsp/dsp.h"
  34:eurorack/plaits/dsp/oscillator/oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  35:eurorack/plaits/dsp/oscillator/oscillator.h **** #include "stmlib/dsp/polyblep.h"
  36:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  37:eurorack/plaits/dsp/oscillator/oscillator.h **** namespace plaits {
  38:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  39:eurorack/plaits/dsp/oscillator/oscillator.h **** enum OscillatorShape {
  40:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_IMPULSE_TRAIN,
  41:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SAW,
  42:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_TRIANGLE,
  43:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SLOPE,
  44:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SQUARE,
  45:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SQUARE_BRIGHT,
  46:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SQUARE_DARK,
  47:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SQUARE_TRIANGLE
  48:eurorack/plaits/dsp/oscillator/oscillator.h **** };
  49:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  50:eurorack/plaits/dsp/oscillator/oscillator.h **** const float kMaxFrequency = 0.25f;
  51:eurorack/plaits/dsp/oscillator/oscillator.h **** const float kMinFrequency = 0.000001f;
  52:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  53:eurorack/plaits/dsp/oscillator/oscillator.h **** class Oscillator {
  54:eurorack/plaits/dsp/oscillator/oscillator.h ****  public:
  55:eurorack/plaits/dsp/oscillator/oscillator.h ****   Oscillator() { }
 792              		.loc 35 55 3 is_stmt 1 view .LVU218
 793              		.loc 35 55 3 is_stmt 0 view .LVU219
 794              	.LBE1363:
 795              	.LBB1364:
 796              	.LBI1364:
 797              		.loc 35 55 3 is_stmt 1 view .LVU220
 798              		.loc 35 55 3 is_stmt 0 view .LVU221
 799              	.LBE1364:
 800              	.LBE1361:
 801              	.LBE1360:
 802              	.LBB1365:
 803              	.LBI1365:
 804              		.file 36 "eurorack/stmlib/dsp/hysteresis_quantizer.h"
   1:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // Copyright 2015 Emilie Gillet.
   2:eurorack/stmlib/dsp/hysteresis_quantizer.h **** //
   3:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 59


   4:eurorack/stmlib/dsp/hysteresis_quantizer.h **** //
   5:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // 
  12:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // 
  15:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // THE SOFTWARE.
  22:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // 
  23:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/dsp/hysteresis_quantizer.h **** //
  25:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/dsp/hysteresis_quantizer.h **** //
  27:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // Quantize a float in [0, 1] to an integer in [0, num_steps[. Apply hysteresis
  28:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // to prevent jumps near the decision boundary.
  29:eurorack/stmlib/dsp/hysteresis_quantizer.h **** 
  30:eurorack/stmlib/dsp/hysteresis_quantizer.h **** #ifndef STMLIB_DSP_HYSTERESIS_QUANTIZER_H_
  31:eurorack/stmlib/dsp/hysteresis_quantizer.h **** #define STMLIB_DSP_HYSTERESIS_QUANTIZER_H_
  32:eurorack/stmlib/dsp/hysteresis_quantizer.h **** 
  33:eurorack/stmlib/dsp/hysteresis_quantizer.h **** #include "stmlib/stmlib.h"
  34:eurorack/stmlib/dsp/hysteresis_quantizer.h **** 
  35:eurorack/stmlib/dsp/hysteresis_quantizer.h **** namespace stmlib {
  36:eurorack/stmlib/dsp/hysteresis_quantizer.h **** 
  37:eurorack/stmlib/dsp/hysteresis_quantizer.h **** class HysteresisQuantizer {
  38:eurorack/stmlib/dsp/hysteresis_quantizer.h ****  public:
  39:eurorack/stmlib/dsp/hysteresis_quantizer.h ****   HysteresisQuantizer() { }
 805              		.loc 36 39 3 is_stmt 1 view .LVU222
 806              		.loc 36 39 3 is_stmt 0 view .LVU223
 807              	.LBE1365:
 808              	.LBB1366:
 809              	.LBI1366:
 810              		.file 37 "eurorack/plaits/dsp/envelope.h"
   1:eurorack/plaits/dsp/envelope.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/envelope.h **** //
   3:eurorack/plaits/dsp/envelope.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/envelope.h **** //
   5:eurorack/plaits/dsp/envelope.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/envelope.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/envelope.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/envelope.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/envelope.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/envelope.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/envelope.h **** // 
  12:eurorack/plaits/dsp/envelope.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/envelope.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/envelope.h **** // 
  15:eurorack/plaits/dsp/envelope.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 60


  16:eurorack/plaits/dsp/envelope.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/envelope.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/envelope.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/envelope.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/envelope.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/envelope.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/envelope.h **** // 
  23:eurorack/plaits/dsp/envelope.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/envelope.h **** //
  25:eurorack/plaits/dsp/envelope.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/envelope.h **** //
  27:eurorack/plaits/dsp/envelope.h **** // Envelope for the internal LPG.
  28:eurorack/plaits/dsp/envelope.h **** 
  29:eurorack/plaits/dsp/envelope.h **** #ifndef PLAITS_DSP_ENVELOPE_H_
  30:eurorack/plaits/dsp/envelope.h **** #define PLAITS_DSP_ENVELOPE_H_
  31:eurorack/plaits/dsp/envelope.h **** 
  32:eurorack/plaits/dsp/envelope.h **** #include "stmlib/stmlib.h"
  33:eurorack/plaits/dsp/envelope.h **** 
  34:eurorack/plaits/dsp/envelope.h **** namespace plaits {
  35:eurorack/plaits/dsp/envelope.h **** 
  36:eurorack/plaits/dsp/envelope.h **** class LPGEnvelope {
  37:eurorack/plaits/dsp/envelope.h ****  public:
  38:eurorack/plaits/dsp/envelope.h ****   LPGEnvelope() { }
  39:eurorack/plaits/dsp/envelope.h ****   ~LPGEnvelope() { }
  40:eurorack/plaits/dsp/envelope.h ****   
  41:eurorack/plaits/dsp/envelope.h ****   inline void Init() {
  42:eurorack/plaits/dsp/envelope.h ****     vactrol_state_ = 0.0f;
  43:eurorack/plaits/dsp/envelope.h ****     gain_ = 1.0f;
  44:eurorack/plaits/dsp/envelope.h ****     frequency_ = 0.5f;
  45:eurorack/plaits/dsp/envelope.h ****     hf_bleed_ = 0.0f;
  46:eurorack/plaits/dsp/envelope.h ****   }
  47:eurorack/plaits/dsp/envelope.h ****   
  48:eurorack/plaits/dsp/envelope.h ****   inline void Trigger() {
  49:eurorack/plaits/dsp/envelope.h ****     ramp_up_ = true;
  50:eurorack/plaits/dsp/envelope.h ****   }
  51:eurorack/plaits/dsp/envelope.h ****   
  52:eurorack/plaits/dsp/envelope.h ****   inline void ProcessPing(
  53:eurorack/plaits/dsp/envelope.h ****       float attack,
  54:eurorack/plaits/dsp/envelope.h ****       float short_decay,
  55:eurorack/plaits/dsp/envelope.h ****       float decay_tail,
  56:eurorack/plaits/dsp/envelope.h ****       float hf) {
  57:eurorack/plaits/dsp/envelope.h ****     if (ramp_up_) {
  58:eurorack/plaits/dsp/envelope.h ****       vactrol_state_ += attack;
  59:eurorack/plaits/dsp/envelope.h ****       if (vactrol_state_ >= 1.0f) {
  60:eurorack/plaits/dsp/envelope.h ****         vactrol_state_ = 1.0f;
  61:eurorack/plaits/dsp/envelope.h ****         ramp_up_ = false;
  62:eurorack/plaits/dsp/envelope.h ****       }
  63:eurorack/plaits/dsp/envelope.h ****     }
  64:eurorack/plaits/dsp/envelope.h ****     ProcessLP(ramp_up_ ? vactrol_state_ : 0.0f, short_decay, decay_tail, hf);
  65:eurorack/plaits/dsp/envelope.h ****   }
  66:eurorack/plaits/dsp/envelope.h ****   
  67:eurorack/plaits/dsp/envelope.h ****   inline void ProcessLP(
  68:eurorack/plaits/dsp/envelope.h ****       float level,
  69:eurorack/plaits/dsp/envelope.h ****       float short_decay,
  70:eurorack/plaits/dsp/envelope.h ****       float decay_tail,
  71:eurorack/plaits/dsp/envelope.h ****       float hf) {
  72:eurorack/plaits/dsp/envelope.h ****     float vactrol_input = level;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 61


  73:eurorack/plaits/dsp/envelope.h ****     float vactrol_error = (vactrol_input - vactrol_state_);
  74:eurorack/plaits/dsp/envelope.h ****     float vactrol_state_2 = vactrol_state_ * vactrol_state_;
  75:eurorack/plaits/dsp/envelope.h ****     float vactrol_state_4 = vactrol_state_2 * vactrol_state_2;
  76:eurorack/plaits/dsp/envelope.h ****     float tail = 1.0f - vactrol_state_;
  77:eurorack/plaits/dsp/envelope.h ****     float tail_2 = tail * tail;
  78:eurorack/plaits/dsp/envelope.h ****     float vactrol_coefficient = (vactrol_error > 0.0f)
  79:eurorack/plaits/dsp/envelope.h ****         ? 0.6f
  80:eurorack/plaits/dsp/envelope.h ****         : short_decay + (1.0f - vactrol_state_4) * decay_tail;
  81:eurorack/plaits/dsp/envelope.h ****     vactrol_state_ += vactrol_coefficient * vactrol_error;
  82:eurorack/plaits/dsp/envelope.h ****     
  83:eurorack/plaits/dsp/envelope.h ****     gain_ = vactrol_state_;
  84:eurorack/plaits/dsp/envelope.h ****     frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
  85:eurorack/plaits/dsp/envelope.h ****     hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
  86:eurorack/plaits/dsp/envelope.h ****   }
  87:eurorack/plaits/dsp/envelope.h ****   
  88:eurorack/plaits/dsp/envelope.h ****   inline float gain() const { return gain_; }
  89:eurorack/plaits/dsp/envelope.h ****   inline float frequency() const { return frequency_; }
  90:eurorack/plaits/dsp/envelope.h ****   inline float hf_bleed() const { return hf_bleed_; }
  91:eurorack/plaits/dsp/envelope.h ****   
  92:eurorack/plaits/dsp/envelope.h ****  private:
  93:eurorack/plaits/dsp/envelope.h ****   float vactrol_state_;
  94:eurorack/plaits/dsp/envelope.h ****   float gain_;
  95:eurorack/plaits/dsp/envelope.h ****   float frequency_;
  96:eurorack/plaits/dsp/envelope.h ****   float hf_bleed_;
  97:eurorack/plaits/dsp/envelope.h ****   bool ramp_up_;
  98:eurorack/plaits/dsp/envelope.h ****   
  99:eurorack/plaits/dsp/envelope.h ****   DISALLOW_COPY_AND_ASSIGN(LPGEnvelope);
 100:eurorack/plaits/dsp/envelope.h **** };
 101:eurorack/plaits/dsp/envelope.h **** 
 102:eurorack/plaits/dsp/envelope.h **** class DecayEnvelope {
 103:eurorack/plaits/dsp/envelope.h ****  public:
 104:eurorack/plaits/dsp/envelope.h ****   DecayEnvelope() { }
 811              		.loc 37 104 3 is_stmt 1 view .LVU224
 812              		.loc 37 104 3 is_stmt 0 view .LVU225
 813              	.LBE1366:
 814              	.LBB1367:
 815              	.LBI1367:
  38:eurorack/plaits/dsp/envelope.h ****   ~LPGEnvelope() { }
 816              		.loc 37 38 3 is_stmt 1 view .LVU226
  38:eurorack/plaits/dsp/envelope.h ****   ~LPGEnvelope() { }
 817              		.loc 37 38 3 is_stmt 0 view .LVU227
 818              	.LBE1367:
 819              	.LBB1368:
 820              	.LBI1368:
 821              		.loc 29 41 3 is_stmt 1 view .LVU228
 822              		.loc 29 41 3 is_stmt 0 view .LVU229
 823              	.LBE1368:
 824              	.LBB1369:
 825              	.LBI1369:
  68:eurorack/plaits/dsp/voice.h ****   ~ChannelPostProcessor() { }
 826              		.loc 4 68 3 is_stmt 1 view .LVU230
 827              	.LBB1370:
 828              	.LBI1370:
 829              		.file 38 "eurorack/stmlib/dsp/limiter.h"
   1:eurorack/stmlib/dsp/limiter.h **** // Copyright 2015 Emilie Gillet.
   2:eurorack/stmlib/dsp/limiter.h **** //
   3:eurorack/stmlib/dsp/limiter.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 62


   4:eurorack/stmlib/dsp/limiter.h **** //
   5:eurorack/stmlib/dsp/limiter.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/dsp/limiter.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/dsp/limiter.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/dsp/limiter.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/dsp/limiter.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/dsp/limiter.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/dsp/limiter.h **** // 
  12:eurorack/stmlib/dsp/limiter.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/dsp/limiter.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/dsp/limiter.h **** // 
  15:eurorack/stmlib/dsp/limiter.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/dsp/limiter.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/dsp/limiter.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/dsp/limiter.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/dsp/limiter.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/dsp/limiter.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/dsp/limiter.h **** // THE SOFTWARE.
  22:eurorack/stmlib/dsp/limiter.h **** // 
  23:eurorack/stmlib/dsp/limiter.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/dsp/limiter.h **** //
  25:eurorack/stmlib/dsp/limiter.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/dsp/limiter.h **** //
  27:eurorack/stmlib/dsp/limiter.h **** // Limiter.
  28:eurorack/stmlib/dsp/limiter.h **** 
  29:eurorack/stmlib/dsp/limiter.h **** #ifndef STMLIB_DSP_LIMITER_H_
  30:eurorack/stmlib/dsp/limiter.h **** #define STMLIB_DSP_LIMITER_H_
  31:eurorack/stmlib/dsp/limiter.h **** 
  32:eurorack/stmlib/dsp/limiter.h **** #include "stmlib/stmlib.h"
  33:eurorack/stmlib/dsp/limiter.h **** 
  34:eurorack/stmlib/dsp/limiter.h **** #include <algorithm>
  35:eurorack/stmlib/dsp/limiter.h **** 
  36:eurorack/stmlib/dsp/limiter.h **** #include "stmlib/dsp/dsp.h"
  37:eurorack/stmlib/dsp/limiter.h **** #include "stmlib/dsp/filter.h"
  38:eurorack/stmlib/dsp/limiter.h **** 
  39:eurorack/stmlib/dsp/limiter.h **** namespace stmlib {
  40:eurorack/stmlib/dsp/limiter.h **** 
  41:eurorack/stmlib/dsp/limiter.h **** class Limiter {
  42:eurorack/stmlib/dsp/limiter.h ****  public:
  43:eurorack/stmlib/dsp/limiter.h ****   Limiter() { }
 830              		.loc 38 43 3 view .LVU231
 831              		.loc 38 43 3 is_stmt 0 view .LVU232
 832              	.LBE1370:
 833              	.LBB1371:
 834              	.LBI1371:
 835              		.file 39 "eurorack/plaits/dsp/fx/low_pass_gate.h"
   1:eurorack/plaits/dsp/fx/low_pass_gate.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/plaits/dsp/fx/low_pass_gate.h **** //
   3:eurorack/plaits/dsp/fx/low_pass_gate.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/fx/low_pass_gate.h **** //
   5:eurorack/plaits/dsp/fx/low_pass_gate.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/fx/low_pass_gate.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/fx/low_pass_gate.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/fx/low_pass_gate.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/fx/low_pass_gate.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/fx/low_pass_gate.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/fx/low_pass_gate.h **** // 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 63


  12:eurorack/plaits/dsp/fx/low_pass_gate.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/fx/low_pass_gate.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/fx/low_pass_gate.h **** // 
  15:eurorack/plaits/dsp/fx/low_pass_gate.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/fx/low_pass_gate.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/fx/low_pass_gate.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/fx/low_pass_gate.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/fx/low_pass_gate.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/fx/low_pass_gate.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/fx/low_pass_gate.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/fx/low_pass_gate.h **** // 
  23:eurorack/plaits/dsp/fx/low_pass_gate.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/fx/low_pass_gate.h **** //
  25:eurorack/plaits/dsp/fx/low_pass_gate.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/fx/low_pass_gate.h **** //
  27:eurorack/plaits/dsp/fx/low_pass_gate.h **** // Approximative low pass gate.
  28:eurorack/plaits/dsp/fx/low_pass_gate.h **** 
  29:eurorack/plaits/dsp/fx/low_pass_gate.h **** #ifndef PLAITS_DSP_FX_LOW_PASS_GATE_H_
  30:eurorack/plaits/dsp/fx/low_pass_gate.h **** #define PLAITS_DSP_FX_LOW_PASS_GATE_H_
  31:eurorack/plaits/dsp/fx/low_pass_gate.h **** 
  32:eurorack/plaits/dsp/fx/low_pass_gate.h **** #include <algorithm>
  33:eurorack/plaits/dsp/fx/low_pass_gate.h **** 
  34:eurorack/plaits/dsp/fx/low_pass_gate.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/fx/low_pass_gate.h **** #include "stmlib/dsp/filter.h"
  36:eurorack/plaits/dsp/fx/low_pass_gate.h **** #include "stmlib/dsp/parameter_interpolator.h"
  37:eurorack/plaits/dsp/fx/low_pass_gate.h **** 
  38:eurorack/plaits/dsp/fx/low_pass_gate.h **** namespace plaits {
  39:eurorack/plaits/dsp/fx/low_pass_gate.h ****   
  40:eurorack/plaits/dsp/fx/low_pass_gate.h **** class LowPassGate {
  41:eurorack/plaits/dsp/fx/low_pass_gate.h ****  public:
  42:eurorack/plaits/dsp/fx/low_pass_gate.h ****   LowPassGate() { }
 836              		.loc 39 42 3 is_stmt 1 view .LVU233
 837              	.LBB1372:
 838              	.LBI1372:
 839              		.loc 9 179 3 view .LVU234
 840              		.loc 9 179 3 is_stmt 0 view .LVU235
 841              	.LBE1372:
 842              	.LBE1371:
 843              	.LBE1369:
 844              	.LBB1373:
 845              	.LBI1373:
  68:eurorack/plaits/dsp/voice.h ****   ~ChannelPostProcessor() { }
 846              		.loc 4 68 3 is_stmt 1 view .LVU236
 847              	.LBB1374:
 848              	.LBI1374:
 849              		.loc 38 43 3 view .LVU237
 850              		.loc 38 43 3 is_stmt 0 view .LVU238
 851              	.LBE1374:
 852              	.LBB1375:
 853              	.LBI1375:
 854              		.loc 39 42 3 is_stmt 1 view .LVU239
 855              	.LBB1376:
 856              	.LBI1376:
 857              		.loc 9 179 3 view .LVU240
 858              		.loc 9 179 3 is_stmt 0 view .LVU241
 859              	.LBE1376:
 860              	.LBE1375:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 64


 861              	.LBE1373:
 862              	.LBB1377:
 863              	.LBI1377:
  81:eurorack/plaits/dsp/engine/engine.h ****   ~Engine() { }
  82:eurorack/plaits/dsp/engine/engine.h ****   virtual void Init(stmlib::BufferAllocator* allocator) = 0;
  83:eurorack/plaits/dsp/engine/engine.h ****   virtual void Reset() = 0;
  84:eurorack/plaits/dsp/engine/engine.h ****   virtual void Render(
  85:eurorack/plaits/dsp/engine/engine.h ****       const EngineParameters& parameters,
  86:eurorack/plaits/dsp/engine/engine.h ****       float* out,
  87:eurorack/plaits/dsp/engine/engine.h ****       float* aux,
  88:eurorack/plaits/dsp/engine/engine.h ****       size_t size,
  89:eurorack/plaits/dsp/engine/engine.h ****       bool* already_enveloped) = 0;
  90:eurorack/plaits/dsp/engine/engine.h ****   PostProcessingSettings post_processing_settings;
  91:eurorack/plaits/dsp/engine/engine.h **** };
  92:eurorack/plaits/dsp/engine/engine.h **** 
  93:eurorack/plaits/dsp/engine/engine.h **** template<int max_size>
  94:eurorack/plaits/dsp/engine/engine.h **** class EngineRegistry {
  95:eurorack/plaits/dsp/engine/engine.h ****  public:
  96:eurorack/plaits/dsp/engine/engine.h ****   EngineRegistry() { }
 864              		.loc 6 96 3 is_stmt 1 view .LVU242
 865              		.loc 6 96 3 is_stmt 0 view .LVU243
 866              	.LBE1377:
 867              	.LBE1382:
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 868              		.loc 1 17 103 is_stmt 1 view .LVU244
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 869              		.loc 1 17 103 view .LVU245
 870 0056 03F55B63 		add	r3, r3, #3504
 871 005a 9342     		cmp	r3, r2
 872 005c D5D1     		bne	.L20
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 873              		.loc 1 17 103 discriminator 2 view .LVU246
 874 005e 04F56452 		add	r2, r4, #14592
 875 0062 04F56053 		add	r3, r4, #14336
 876 0066 1032     		adds	r2, r2, #16
 877              	.LVL32:
 878              	.L21:
 879              	.LBB1383:
 880              	.LBI1383:
  20:VoiceEnvelope.h ****         current_state(ENV_IDLE),
 881              		.loc 3 20 5 view .LVU247
 882              	.LBB1384:
  27:VoiceEnvelope.h ****     {}
 883              		.loc 3 27 31 is_stmt 0 view .LVU248
 884 0068 0121     		movs	r1, #1
 885 006a 0025     		movs	r5, #0
 886 006c 4FF07C50 		mov	r0, #1056964608
 887              	.LBE1384:
 888              	.LBE1383:
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 889              		.loc 1 17 103 view .LVU249
 890 0070 4433     		adds	r3, r3, #68
 891              	.LVL33:
 892              	.LBB1386:
 893              	.LBB1385:
  27:VoiceEnvelope.h ****     {}
 894              		.loc 3 27 31 view .LVU250
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 65


 895 0072 03F8431C 		strb	r1, [r3, #-67]
 896 0076 0021     		movs	r1, #0
 897 0078 03F8445C 		strb	r5, [r3, #-68]
 898 007c 43F8401C 		str	r1, [r3, #-64]	@ float
 899 0080 43F83C0C 		str	r0, [r3, #-60]	@ float
 900 0084 43F8380C 		str	r0, [r3, #-56]	@ float
 901 0088 43F8085C 		str	r5, [r3, #-8]
 902 008c 43F8041C 		str	r1, [r3, #-4]	@ float
 903              	.LVL34:
  27:VoiceEnvelope.h ****     {}
 904              		.loc 3 27 31 view .LVU251
 905              	.LBE1385:
 906              	.LBE1386:
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 907              		.loc 1 17 103 is_stmt 1 view .LVU252
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 908              		.loc 1 17 103 view .LVU253
 909 0090 9342     		cmp	r3, r2
 910 0092 E9D1     		bne	.L21
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 911              		.loc 1 17 103 is_stmt 0 discriminator 6 view .LVU254
 912 0094 04F54053 		add	r3, r4, #12288
  19:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
 913              		.loc 1 19 11 discriminator 6 view .LVU255
 914 0098 04F56450 		add	r0, r4, #14592
 915 009c 2946     		mov	r1, r5
 916 009e 1022     		movs	r2, #16
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 917              		.loc 1 17 103 discriminator 6 view .LVU256
 918 00a0 C3F8A45A 		str	r5, [r3, #2724]
  19:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
 919              		.loc 1 19 11 discriminator 6 view .LVU257
 920 00a4 1430     		adds	r0, r0, #20
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 921              		.loc 1 17 103 discriminator 6 view .LVU258
 922 00a6 C3F8A85A 		str	r5, [r3, #2728]
 923 00aa 83F8AC5A 		strb	r5, [r3, #2732]
 924 00ae A3F8AE5A 		strh	r5, [r3, #2734]	@ movhi
  18:Polyphony.cpp ****     memset(voice_note_, 0, sizeof(voice_note_));
 925              		.loc 1 18 5 is_stmt 1 discriminator 6 view .LVU259
  18:Polyphony.cpp ****     memset(voice_note_, 0, sizeof(voice_note_));
 926              		.loc 1 18 11 is_stmt 0 discriminator 6 view .LVU260
 927 00b2 43F61013 		movw	r3, #14608
 928 00b6 E550     		str	r5, [r4, r3]	@ unaligned
  19:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
 929              		.loc 1 19 5 is_stmt 1 discriminator 6 view .LVU261
  19:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
 930              		.loc 1 19 11 is_stmt 0 discriminator 6 view .LVU262
 931 00b8 FFF7FEFF 		bl	memset
 932              	.LVL35:
  20:Polyphony.cpp ****     memset(mix_buffer_aux_, 0, sizeof(mix_buffer_aux_));
 933              		.loc 1 20 5 is_stmt 1 discriminator 6 view .LVU263
  20:Polyphony.cpp ****     memset(mix_buffer_aux_, 0, sizeof(mix_buffer_aux_));
 934              		.loc 1 20 11 is_stmt 0 discriminator 6 view .LVU264
 935 00bc 04F56850 		add	r0, r4, #14848
 936 00c0 2946     		mov	r1, r5
 937 00c2 4022     		movs	r2, #64
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 66


 938 00c4 2430     		adds	r0, r0, #36
 939 00c6 FFF7FEFF 		bl	memset
 940              	.LVL36:
  21:Polyphony.cpp **** }
 941              		.loc 1 21 5 is_stmt 1 discriminator 6 view .LVU265
  21:Polyphony.cpp **** }
 942              		.loc 1 21 11 is_stmt 0 discriminator 6 view .LVU266
 943 00ca 04F56950 		add	r0, r4, #14912
 944 00ce 4022     		movs	r2, #64
 945 00d0 2946     		mov	r1, r5
 946 00d2 2430     		adds	r0, r0, #36
 947 00d4 FFF7FEFF 		bl	memset
 948              	.LVL37:
 949              	.LBE1392:
  22:Polyphony.cpp **** 
 950              		.loc 1 22 1 discriminator 6 view .LVU267
 951 00d8 2046     		mov	r0, r4
 952 00da 38BD     		pop	{r3, r4, r5, pc}
 953              	.LVL38:
 954              	.L25:
  22:Polyphony.cpp **** 
 955              		.loc 1 22 1 discriminator 6 view .LVU268
 956              		.align	2
 957              	.L24:
 958 00dc 08000000 		.word	_ZTVN6plaits14AdditiveEngineE+8
 959 00e0 08000000 		.word	_ZTVN6plaits14BassDrumEngineE+8
 960 00e4 08000000 		.word	_ZTVN6plaits8FMEngineE+8
 961 00e8 08000000 		.word	_ZTVN6plaits11GrainEngineE+8
 962 00ec 08000000 		.word	_ZTVN6plaits11HiHatEngineE+8
 963 00f0 08000000 		.word	_ZTVN6plaits11ModalEngineE+8
 964 00f4 08000000 		.word	_ZTVN6plaits11NoiseEngineE+8
 965 00f8 08000000 		.word	_ZTVN6plaits14ParticleEngineE+8
 966 00fc 08000000 		.word	_ZTVN6plaits15SnareDrumEngineE+8
 967 0100 08000000 		.word	_ZTVN6plaits12StringEngineE+8
 968 0104 08000000 		.word	_ZTVN6plaits11SwarmEngineE+8
 969 0108 08000000 		.word	_ZTVN6plaits19VirtualAnalogEngineE+8
 970 010c 08000000 		.word	_ZTVN6plaits17WaveshapingEngineE+8
 971              		.cfi_endproc
 972              	.LFE5843:
 974              		.global	_ZN15PolyphonyEngineC1Ev
 975              		.thumb_set _ZN15PolyphonyEngineC1Ev,_ZN15PolyphonyEngineC2Ev
 976              		.section	.text._ZN15PolyphonyEngine11ResetVoicesEv,"ax",%progbits
 977              		.align	1
 978              		.global	_ZN15PolyphonyEngine11ResetVoicesEv
 979              		.syntax unified
 980              		.thumb
 981              		.thumb_func
 983              	_ZN15PolyphonyEngine11ResetVoicesEv:
 984              	.LVL39:
 985              	.LFB5851:
  30:Polyphony.cpp **** 
  31:Polyphony.cpp **** void PolyphonyEngine::Init(daisy::DaisySeed* hw) {
  32:Polyphony.cpp ****     hw_ptr_ = hw;
  33:Polyphony.cpp ****     AllocateVoices(); 
  34:Polyphony.cpp ****     InitVoiceParameters(); 
  35:Polyphony.cpp **** }
  36:Polyphony.cpp **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 67


  37:Polyphony.cpp **** void PolyphonyEngine::HandleTouchInput(uint16_t current_touch_state_param, uint16_t last_touch_stat
  38:Polyphony.cpp ****     bool percussive_engine = (engine_index > 7);
  39:Polyphony.cpp **** 
  40:Polyphony.cpp ****     for (int i = 0; i < 12; ++i) {
  41:Polyphony.cpp ****         bool pad_currently_pressed = (current_touch_state_param >> i) & 1;
  42:Polyphony.cpp ****         bool pad_was_pressed = (last_touch_state_param >> i) & 1; 
  43:Polyphony.cpp ****         float note_for_pad = PolyphonyEngine::kTouchMidiNotes_[i];
  44:Polyphony.cpp **** 
  45:Polyphony.cpp ****         if (pad_currently_pressed && !pad_was_pressed) { // Note ON
  46:Polyphony.cpp ****             if (poly_mode) {
  47:Polyphony.cpp ****                 int voice_idx = FindFreeVoice(effective_num_voices); 
  48:Polyphony.cpp ****                 if (voice_idx != -1) {
  49:Polyphony.cpp ****                     voice_note_[voice_idx] = note_for_pad;
  50:Polyphony.cpp ****                     voice_active_[voice_idx] = true;
  51:Polyphony.cpp ****                     modulations_[voice_idx].trigger = 1.0f; 
  52:Polyphony.cpp ****                     if (percussive_engine) {
  53:Polyphony.cpp ****                         modulations_[voice_idx].trigger_patched = true;
  54:Polyphony.cpp ****                     } else {
  55:Polyphony.cpp ****                         modulations_[voice_idx].trigger_patched = false;
  56:Polyphony.cpp ****                     }
  57:Polyphony.cpp ****                     voice_envelopes_[voice_idx].Trigger(); 
  58:Polyphony.cpp ****                 }
  59:Polyphony.cpp ****             } else { // Mono mode
  60:Polyphony.cpp ****                 AssignMonoNote(note_for_pad, percussive_engine);
  61:Polyphony.cpp ****             }
  62:Polyphony.cpp ****         } else if (!pad_currently_pressed && pad_was_pressed) { // Note OFF
  63:Polyphony.cpp ****             if (poly_mode) {
  64:Polyphony.cpp ****                  int voice_idx = FindVoiceForNote(note_for_pad, engine_index, poly_mode, effective_
  65:Polyphony.cpp ****                  if (voice_idx != -1) {
  66:Polyphony.cpp ****                      voice_active_[voice_idx] = false; 
  67:Polyphony.cpp ****                      voice_envelopes_[voice_idx].Release(); 
  68:Polyphony.cpp ****                      modulations_[voice_idx].trigger_patched = false; 
  69:Polyphony.cpp ****                  }
  70:Polyphony.cpp ****             } else { // Mono mode
  71:Polyphony.cpp ****                 if (voice_active_[0] && fabsf(voice_note_[0] - note_for_pad) < 0.1f) {
  72:Polyphony.cpp ****                     voice_active_[0] = false; 
  73:Polyphony.cpp ****                     voice_envelopes_[0].Release();
  74:Polyphony.cpp ****                     modulations_[0].trigger_patched = false;
  75:Polyphony.cpp ****                 }
  76:Polyphony.cpp ****             }
  77:Polyphony.cpp ****         }
  78:Polyphony.cpp ****     }
  79:Polyphony.cpp **** }
  80:Polyphony.cpp **** 
  81:Polyphony.cpp **** void PolyphonyEngine::RenderBlock(const RenderParameters& params) {
  82:Polyphony.cpp ****     PrepVoiceParams(params);
  83:Polyphony.cpp ****     
  84:Polyphony.cpp ****     ProcessEnvelopes(params.poly_mode);
  85:Polyphony.cpp **** 
  86:Polyphony.cpp ****     if (params.arp_on) {
  87:Polyphony.cpp ****         modulations_[0].trigger = 0.0f;
  88:Polyphony.cpp ****         modulations_[0].trigger_patched = false; 
  89:Polyphony.cpp ****     }
  90:Polyphony.cpp **** }
  91:Polyphony.cpp **** 
  92:Polyphony.cpp **** void PolyphonyEngine::ResetVoices() {
 986              		.loc 1 92 37 is_stmt 1 view -0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 68


 987              		.cfi_startproc
 988              		@ args = 0, pretend = 0, frame = 0
 989              		@ frame_needed = 0, uses_anonymous_args = 0
  93:Polyphony.cpp ****     for (int v = 0; v < NUM_VOICES; v++) {
 990              		.loc 1 93 5 view .LVU270
 991              	.LBB1393:
 992              		.loc 1 93 23 view .LVU271
 993              	.LBE1393:
  92:Polyphony.cpp ****     for (int v = 0; v < NUM_VOICES; v++) {
 994              		.loc 1 92 37 is_stmt 0 view .LVU272
 995 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 996              		.cfi_def_cfa_offset 24
 997              		.cfi_offset 3, -24
 998              		.cfi_offset 4, -20
 999              		.cfi_offset 5, -16
 1000              		.cfi_offset 6, -12
 1001              		.cfi_offset 7, -8
 1002              		.cfi_offset 14, -4
 1003 0002 00F56456 		add	r6, r0, #14592
 1004 0006 00F55D55 		add	r5, r0, #14144
 1005 000a 00F56454 		add	r4, r0, #14592
 1006 000e 00F56057 		add	r7, r0, #14336
 1007 0012 1036     		adds	r6, r6, #16
 1008 0014 3835     		adds	r5, r5, #56
 1009 0016 1434     		adds	r4, r4, #20
 1010              	.LVL40:
 1011              	.L27:
 1012              	.LBB1394:
  94:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 1013              		.loc 1 94 9 is_stmt 1 discriminator 2 view .LVU273
 1014              		.loc 1 94 34 is_stmt 0 discriminator 2 view .LVU274
 1015 0018 3846     		mov	r0, r7
  93:Polyphony.cpp ****     for (int v = 0; v < NUM_VOICES; v++) {
 1016              		.loc 1 93 23 discriminator 2 view .LVU275
 1017 001a 2835     		adds	r5, r5, #40
 1018              		.loc 1 94 34 discriminator 2 view .LVU276
 1019 001c FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 1020              	.LVL41:
  95:Polyphony.cpp ****         voice_active_[v] = false;
 1021              		.loc 1 95 9 is_stmt 1 discriminator 2 view .LVU277
 1022              		.loc 1 95 26 is_stmt 0 discriminator 2 view .LVU278
 1023 0020 0023     		movs	r3, #0
  96:Polyphony.cpp ****         modulations_[v].trigger = 0.0f;
 1024              		.loc 1 96 33 discriminator 2 view .LVU279
 1025 0022 0022     		movs	r2, #0
  93:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 1026              		.loc 1 93 23 discriminator 2 view .LVU280
 1027 0024 4437     		adds	r7, r7, #68
  95:Polyphony.cpp ****         voice_active_[v] = false;
 1028              		.loc 1 95 26 discriminator 2 view .LVU281
 1029 0026 06F8013B 		strb	r3, [r6], #1
 1030              	.LVL42:
 1031              		.loc 1 96 9 is_stmt 1 discriminator 2 view .LVU282
  93:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 1032              		.loc 1 93 23 is_stmt 0 discriminator 2 view .LVU283
 1033 002a A642     		cmp	r6, r4
 1034              		.loc 1 96 33 discriminator 2 view .LVU284
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 69


 1035 002c 45F8282C 		str	r2, [r5, #-40]	@ float
  97:Polyphony.cpp ****         modulations_[v].trigger_patched = false; 
 1036              		.loc 1 97 9 is_stmt 1 discriminator 2 view .LVU285
 1037              		.loc 1 97 41 is_stmt 0 discriminator 2 view .LVU286
 1038 0030 05F81D3C 		strb	r3, [r5, #-29]
  98:Polyphony.cpp ****         modulations_[v].level_patched = false;  
 1039              		.loc 1 98 9 is_stmt 1 discriminator 2 view .LVU287
 1040              		.loc 1 98 39 is_stmt 0 discriminator 2 view .LVU288
 1041 0034 05F81C3C 		strb	r3, [r5, #-28]
  93:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 1042              		.loc 1 93 5 is_stmt 1 discriminator 2 view .LVU289
 1043              	.LVL43:
  93:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 1044              		.loc 1 93 23 discriminator 2 view .LVU290
 1045 0038 EED1     		bne	.L27
 1046              	.LBE1394:
  99:Polyphony.cpp ****     }
 100:Polyphony.cpp **** }
 1047              		.loc 1 100 1 is_stmt 0 view .LVU291
 1048 003a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1049              		.loc 1 100 1 view .LVU292
 1050              		.cfi_endproc
 1051              	.LFE5851:
 1053              		.section	.text._ZN15PolyphonyEngine14AllocateVoicesEv,"ax",%progbits
 1054              		.align	1
 1055              		.global	_ZN15PolyphonyEngine14AllocateVoicesEv
 1056              		.syntax unified
 1057              		.thumb
 1058              		.thumb_func
 1060              	_ZN15PolyphonyEngine14AllocateVoicesEv:
 1061              	.LVL44:
 1062              	.LFB5852:
 101:Polyphony.cpp **** 
 102:Polyphony.cpp **** void PolyphonyEngine::AllocateVoices() {
 1063              		.loc 1 102 40 is_stmt 1 view -0
 1064              		.cfi_startproc
 1065              		@ args = 0, pretend = 0, frame = 0
 1066              		@ frame_needed = 0, uses_anonymous_args = 0
 103:Polyphony.cpp ****     if (!allocator_) {
 1067              		.loc 1 103 5 view .LVU294
 102:Polyphony.cpp ****     if (!allocator_) {
 1068              		.loc 1 102 40 is_stmt 0 view .LVU295
 1069 0000 70B5     		push	{r4, r5, r6, lr}
 1070              		.cfi_def_cfa_offset 16
 1071              		.cfi_offset 4, -16
 1072              		.cfi_offset 5, -12
 1073              		.cfi_offset 6, -8
 1074              		.cfi_offset 14, -4
 1075              		.loc 1 103 10 view .LVU296
 1076 0002 00F54055 		add	r5, r0, #12288
 102:Polyphony.cpp ****     if (!allocator_) {
 1077              		.loc 1 102 40 view .LVU297
 1078 0006 0446     		mov	r4, r0
 1079              		.loc 1 103 5 view .LVU298
 1080 0008 D5F8A43A 		ldr	r3, [r5, #2724]
 1081 000c 5BB9     		cbnz	r3, .L30
 104:Polyphony.cpp ****         allocator_ = new stmlib::BufferAllocator(shared_buffer, sizeof(shared_buffer));
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 70


 1082              		.loc 1 104 9 is_stmt 1 view .LVU299
 1083              		.loc 1 104 86 is_stmt 0 view .LVU300
 1084 000e 1020     		movs	r0, #16
 1085              	.LVL45:
 1086              		.loc 1 104 86 view .LVU301
 1087 0010 FFF7FEFF 		bl	_Znwj
 1088              	.LVL46:
 1089              	.LBB1395:
 1090              	.LBI1395:
  40:eurorack/stmlib/utils/buffer_allocator.h ****   
  41:eurorack/stmlib/utils/buffer_allocator.h ****   BufferAllocator(void* buffer, size_t size) {
 1091              		.loc 2 41 3 is_stmt 1 view .LVU302
 1092              	.LBE1395:
  42:eurorack/stmlib/utils/buffer_allocator.h ****     Init(buffer, size);
 1093              		.loc 2 42 5 view .LVU303
 1094              	.LBB1402:
 1095              	.LBB1396:
 1096              	.LBI1396:
  43:eurorack/stmlib/utils/buffer_allocator.h ****   }
  44:eurorack/stmlib/utils/buffer_allocator.h ****   
  45:eurorack/stmlib/utils/buffer_allocator.h ****   inline void Init(void* buffer, size_t size) {
 1097              		.loc 2 45 15 view .LVU304
 1098              	.LBB1397:
  46:eurorack/stmlib/utils/buffer_allocator.h ****     buffer_ = static_cast<uint8_t*>(buffer);
 1099              		.loc 2 46 5 view .LVU305
 1100              		.loc 2 46 13 is_stmt 0 view .LVU306
 1101 0014 0A4A     		ldr	r2, .L33
  47:eurorack/stmlib/utils/buffer_allocator.h ****     size_ = size;
 1102              		.loc 2 47 11 view .LVU307
 1103 0016 4FF48023 		mov	r3, #262144
 1104              	.LBE1397:
 1105              	.LBE1396:
 1106              	.LBE1402:
 1107              		.loc 1 104 20 view .LVU308
 1108 001a C5F8A40A 		str	r0, [r5, #2724]
 1109              	.LBB1403:
 1110              	.LBB1401:
 1111              	.LBB1400:
  46:eurorack/stmlib/utils/buffer_allocator.h ****     buffer_ = static_cast<uint8_t*>(buffer);
 1112              		.loc 2 46 13 view .LVU309
 1113 001e 4260     		str	r2, [r0, #4]
 1114              		.loc 2 47 5 is_stmt 1 view .LVU310
 1115              		.loc 2 47 11 is_stmt 0 view .LVU311
 1116 0020 C360     		str	r3, [r0, #12]
  48:eurorack/stmlib/utils/buffer_allocator.h ****     Free();
 1117              		.loc 2 48 5 is_stmt 1 view .LVU312
 1118              	.LVL47:
 1119              	.LBB1398:
 1120              	.LBI1398:
  49:eurorack/stmlib/utils/buffer_allocator.h ****   }
  50:eurorack/stmlib/utils/buffer_allocator.h **** 
  51:eurorack/stmlib/utils/buffer_allocator.h ****   template<typename T>
  52:eurorack/stmlib/utils/buffer_allocator.h ****   inline T* Allocate() {
  53:eurorack/stmlib/utils/buffer_allocator.h ****     return Allocate<T>(1);
  54:eurorack/stmlib/utils/buffer_allocator.h ****   }
  55:eurorack/stmlib/utils/buffer_allocator.h ****   
  56:eurorack/stmlib/utils/buffer_allocator.h ****   template<typename T>
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 71


  57:eurorack/stmlib/utils/buffer_allocator.h ****   inline T* Allocate(size_t size) {
  58:eurorack/stmlib/utils/buffer_allocator.h ****     size_t size_bytes = sizeof(T) * size;
  59:eurorack/stmlib/utils/buffer_allocator.h ****     if (size_bytes <= free_) {
  60:eurorack/stmlib/utils/buffer_allocator.h ****       T* start = static_cast<T*>(static_cast<void*>(next_));
  61:eurorack/stmlib/utils/buffer_allocator.h ****       next_ += size_bytes;
  62:eurorack/stmlib/utils/buffer_allocator.h ****       free_ -= size_bytes;
  63:eurorack/stmlib/utils/buffer_allocator.h ****       return start;
  64:eurorack/stmlib/utils/buffer_allocator.h ****     } else {
  65:eurorack/stmlib/utils/buffer_allocator.h ****       return NULL;
  66:eurorack/stmlib/utils/buffer_allocator.h ****     }
  67:eurorack/stmlib/utils/buffer_allocator.h ****   }
  68:eurorack/stmlib/utils/buffer_allocator.h ****   
  69:eurorack/stmlib/utils/buffer_allocator.h ****   inline void Free() {
 1121              		.loc 2 69 15 view .LVU313
 1122              	.LBB1399:
  70:eurorack/stmlib/utils/buffer_allocator.h ****     next_ = buffer_;
 1123              		.loc 2 70 5 view .LVU314
 1124              		.loc 2 70 11 is_stmt 0 view .LVU315
 1125 0022 0260     		str	r2, [r0]
  71:eurorack/stmlib/utils/buffer_allocator.h ****     free_ = size_;
 1126              		.loc 2 71 5 is_stmt 1 view .LVU316
 1127              		.loc 2 71 11 is_stmt 0 view .LVU317
 1128 0024 8360     		str	r3, [r0, #8]
 1129              	.LVL48:
 1130              	.L30:
 1131              		.loc 2 71 11 view .LVU318
 1132 0026 04F55B56 		add	r6, r4, #14016
 1133              	.LVL49:
 1134              	.L31:
 1135              		.loc 2 71 11 view .LVU319
 1136              	.LBE1399:
 1137              	.LBE1398:
 1138              	.LBE1400:
 1139              	.LBE1401:
 1140              	.LBE1403:
 1141              	.LBB1404:
 105:Polyphony.cpp ****     }
 106:Polyphony.cpp **** 
 107:Polyphony.cpp ****     for (int i = 0; i < NUM_VOICES; ++i) {
 108:Polyphony.cpp ****         voices_[i].Init(allocator_);
 1142              		.loc 1 108 9 is_stmt 1 discriminator 2 view .LVU320
 1143              		.loc 1 108 24 is_stmt 0 discriminator 2 view .LVU321
 1144 002a 2046     		mov	r0, r4
 107:Polyphony.cpp ****         voices_[i].Init(allocator_);
 1145              		.loc 1 107 23 discriminator 2 view .LVU322
 1146 002c 04F55B64 		add	r4, r4, #3504
 1147              		.loc 1 108 24 discriminator 2 view .LVU323
 1148 0030 D5F8A41A 		ldr	r1, [r5, #2724]
 1149 0034 FFF7FEFF 		bl	_ZN6plaits5Voice4InitEPN6stmlib15BufferAllocatorE
 1150              	.LVL50:
 107:Polyphony.cpp ****         voices_[i].Init(allocator_);
 1151              		.loc 1 107 5 is_stmt 1 discriminator 2 view .LVU324
 107:Polyphony.cpp ****         voices_[i].Init(allocator_);
 1152              		.loc 1 107 23 discriminator 2 view .LVU325
 1153 0038 B442     		cmp	r4, r6
 1154 003a F6D1     		bne	.L31
 1155              	.LBE1404:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 72


 109:Polyphony.cpp ****     }
 110:Polyphony.cpp **** }
 1156              		.loc 1 110 1 is_stmt 0 view .LVU326
 1157 003c 70BD     		pop	{r4, r5, r6, pc}
 1158              	.LVL51:
 1159              	.L34:
 1160              		.loc 1 110 1 view .LVU327
 1161 003e 00BF     		.align	2
 1162              	.L33:
 1163 0040 00000000 		.word	shared_buffer
 1164              		.cfi_endproc
 1165              	.LFE5852:
 1167              		.section	.text._ZN15PolyphonyEngine19InitVoiceParametersEv,"ax",%progbits
 1168              		.align	1
 1169              		.global	_ZN15PolyphonyEngine19InitVoiceParametersEv
 1170              		.syntax unified
 1171              		.thumb
 1172              		.thumb_func
 1174              	_ZN15PolyphonyEngine19InitVoiceParametersEv:
 1175              	.LVL52:
 1176              	.LFB5853:
 111:Polyphony.cpp **** 
 112:Polyphony.cpp **** void PolyphonyEngine::InitVoiceParameters() {
 1177              		.loc 1 112 45 is_stmt 1 view -0
 1178              		.cfi_startproc
 1179              		@ args = 0, pretend = 0, frame = 0
 1180              		@ frame_needed = 0, uses_anonymous_args = 0
 113:Polyphony.cpp ****     float sample_rate_val = SAMPLE_RATE;
 1181              		.loc 1 113 5 view .LVU329
 114:Polyphony.cpp **** 
 115:Polyphony.cpp ****     for (int i = 0; i < NUM_VOICES; ++i) {
 1182              		.loc 1 115 5 view .LVU330
 1183              	.LBB1422:
 1184              		.loc 1 115 23 view .LVU331
 1185              	.LBE1422:
 112:Polyphony.cpp ****     float sample_rate_val = SAMPLE_RATE;
 1186              		.loc 1 112 45 is_stmt 0 view .LVU332
 1187 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1188              		.cfi_def_cfa_offset 24
 1189              		.cfi_offset 4, -24
 1190              		.cfi_offset 5, -20
 1191              		.cfi_offset 6, -16
 1192              		.cfi_offset 7, -12
 1193              		.cfi_offset 8, -8
 1194              		.cfi_offset 14, -4
 1195 0004 00F56457 		add	r7, r0, #14592
 1196 0008 00F55B55 		add	r5, r0, #14016
 1197 000c 00F56456 		add	r6, r0, #14592
 1198 0010 00F56054 		add	r4, r0, #14336
 1199 0014 1437     		adds	r7, r7, #20
 1200 0016 00F56453 		add	r3, r0, #14592
 1201 001a 1C35     		adds	r5, r5, #28
 1202 001c 1036     		adds	r6, r6, #16
 1203 001e 0134     		adds	r4, r4, #1
 1204 0020 2433     		adds	r3, r3, #36
 1205 0022 B846     		mov	r8, r7
 1206              	.LVL53:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 73


 1207              	.L36:
 1208              	.LBB1446:
 116:Polyphony.cpp ****         patches_[i].engine = 0;      
 1209              		.loc 1 116 9 is_stmt 1 discriminator 2 view .LVU333
 117:Polyphony.cpp ****         modulations_[i].engine = 0; 
 1210              		.loc 1 117 32 is_stmt 0 discriminator 2 view .LVU334
 1211 0024 0022     		movs	r2, #0
 116:Polyphony.cpp ****         patches_[i].engine = 0;      
 1212              		.loc 1 116 28 discriminator 2 view .LVU335
 1213 0026 0021     		movs	r1, #0
 1214              	.LBB1423:
 1215              	.LBB1424:
  31:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
 1216              		.loc 3 31 23 discriminator 2 view .LVU336
 1217 0028 04F10F00 		add	r0, r4, #15
 1218 002c DFF8A4C0 		ldr	ip, .L38+12
 1219              	.LBE1424:
 1220              	.LBE1423:
 1221              		.loc 1 117 32 discriminator 2 view .LVU337
 1222 0030 C5F88420 		str	r2, [r5, #132]	@ float
 115:Polyphony.cpp ****         patches_[i].engine = 0;      
 1223              		.loc 1 115 23 discriminator 2 view .LVU338
 1224 0034 2835     		adds	r5, r5, #40
 118:Polyphony.cpp ****         modulations_[i].trigger = 0.0f;
 1225              		.loc 1 118 33 discriminator 2 view .LVU339
 1226 0036 6A67     		str	r2, [r5, #116]	@ float
 116:Polyphony.cpp ****         modulations_[i].engine = 0; 
 1227              		.loc 1 116 28 discriminator 2 view .LVU340
 1228 0038 45F8281C 		str	r1, [r5, #-40]
 117:Polyphony.cpp ****         modulations_[i].trigger = 0.0f;
 1229              		.loc 1 117 9 is_stmt 1 discriminator 2 view .LVU341
 1230              		.loc 1 118 9 discriminator 2 view .LVU342
 119:Polyphony.cpp ****         modulations_[i].level_patched = false;
 1231              		.loc 1 119 9 discriminator 2 view .LVU343
 1232              		.loc 1 119 39 is_stmt 0 discriminator 2 view .LVU344
 1233 003c 85F88010 		strb	r1, [r5, #128]
 120:Polyphony.cpp ****         voice_active_[i] = false;
 1234              		.loc 1 120 9 is_stmt 1 discriminator 2 view .LVU345
 1235              		.loc 1 120 26 is_stmt 0 discriminator 2 view .LVU346
 1236 0040 06F8011B 		strb	r1, [r6], #1
 1237              	.LVL54:
 121:Polyphony.cpp ****         voice_note_[i] = 0.0f;
 1238              		.loc 1 121 9 is_stmt 1 discriminator 2 view .LVU347
 1239              		.loc 1 121 24 is_stmt 0 discriminator 2 view .LVU348
 1240 0044 47F8042B 		str	r2, [r7], #4	@ float
 122:Polyphony.cpp ****         
 123:Polyphony.cpp ****         voice_envelopes_[i].Init(sample_rate_val); 
 1241              		.loc 1 123 9 is_stmt 1 discriminator 2 view .LVU349
 1242              	.LVL55:
 1243              	.LBB1430:
 1244              	.LBI1423:
  30:VoiceEnvelope.h ****         time_range_2x = 2.0f * 4.0f * sample_rate;  // 4s max time
 1245              		.loc 3 30 10 discriminator 2 view .LVU350
 1246              	.LBB1429:
  31:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
 1247              		.loc 3 31 9 discriminator 2 view .LVU351
  31:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 74


 1248              		.loc 3 31 23 is_stmt 0 discriminator 2 view .LVU352
 1249 0048 C0F800C0 		str	ip, [r0]	@ float
  32:VoiceEnvelope.h ****         min_decay_time_a = 0.4f * sample_rate;      // 400ms min decay A
 1250              		.loc 3 32 9 is_stmt 1 discriminator 2 view .LVU353
  32:VoiceEnvelope.h ****         min_decay_time_a = 0.4f * sample_rate;      // 400ms min decay A
 1251              		.loc 3 32 25 is_stmt 0 discriminator 2 view .LVU354
 1252 004c 04F11300 		add	r0, r4, #19
 1253 0050 DFF884C0 		ldr	ip, .L38+16
 1254 0054 C0F800C0 		str	ip, [r0]	@ float
  33:VoiceEnvelope.h ****         min_decay_time_b = 0.0001f * sample_rate;    // 0.1ms min decay B (pulse-like release)
 1255              		.loc 3 33 9 is_stmt 1 discriminator 2 view .LVU355
  33:VoiceEnvelope.h ****         min_decay_time_b = 0.0001f * sample_rate;    // 0.1ms min decay B (pulse-like release)
 1256              		.loc 3 33 26 is_stmt 0 discriminator 2 view .LVU356
 1257 0058 04F11700 		add	r0, r4, #23
 1258 005c DFF87CC0 		ldr	ip, .L38+20
 1259 0060 C0F800C0 		str	ip, [r0]	@ float
  34:VoiceEnvelope.h ****         reset_time = 0.008f * sample_rate;          // 8ms reset time
 1260              		.loc 3 34 9 is_stmt 1 discriminator 2 view .LVU357
  34:VoiceEnvelope.h ****         reset_time = 0.008f * sample_rate;          // 8ms reset time
 1261              		.loc 3 34 26 is_stmt 0 discriminator 2 view .LVU358
 1262 0064 04F11B00 		add	r0, r4, #27
 1263 0068 DFF874C0 		ldr	ip, .L38+24
 1264 006c C0F800C0 		str	ip, [r0]	@ float
  35:VoiceEnvelope.h ****         reset_coefficient = 1.0f / reset_time;
 1265              		.loc 3 35 9 is_stmt 1 discriminator 2 view .LVU359
  35:VoiceEnvelope.h ****         reset_coefficient = 1.0f / reset_time;
 1266              		.loc 3 35 20 is_stmt 0 discriminator 2 view .LVU360
 1267 0070 04F11F00 		add	r0, r4, #31
 1268 0074 DFF86CC0 		ldr	ip, .L38+28
 1269 0078 C0F800C0 		str	ip, [r0]	@ float
  36:VoiceEnvelope.h ****         
 1270              		.loc 3 36 9 is_stmt 1 discriminator 2 view .LVU361
  36:VoiceEnvelope.h ****         
 1271              		.loc 3 36 27 is_stmt 0 discriminator 2 view .LVU362
 1272 007c 04F12300 		add	r0, r4, #35
 1273 0080 DFF864C0 		ldr	ip, .L38+32
 1274 0084 C0F800C0 		str	ip, [r0]	@ float
  39:VoiceEnvelope.h ****         SetReleaseCurve(0.5f);
 1275              		.loc 3 39 9 is_stmt 1 discriminator 2 view .LVU363
 1276              	.LVL56:
 1277              	.LBB1425:
 1278              	.LBI1425:
 109:VoiceEnvelope.h ****         float cu = value - 0.5f;
 1279              		.loc 3 109 10 discriminator 2 view .LVU364
 1280              	.LBB1426:
 110:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
 1281              		.loc 3 110 9 discriminator 2 view .LVU365
 111:VoiceEnvelope.h ****     }
 1282              		.loc 3 111 9 discriminator 2 view .LVU366
 111:VoiceEnvelope.h ****     }
 1283              		.loc 3 111 34 is_stmt 0 discriminator 2 view .LVU367
 1284 0088 E01D     		adds	r0, r4, #7
 1285 008a 0260     		str	r2, [r0]	@ float
 1286              	.LVL57:
 111:VoiceEnvelope.h ****     }
 1287              		.loc 3 111 34 discriminator 2 view .LVU368
 1288              	.LBE1426:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 75


 1289              	.LBE1425:
  40:VoiceEnvelope.h ****     }
 1290              		.loc 3 40 9 is_stmt 1 discriminator 2 view .LVU369
 1291              	.LBB1427:
 1292              	.LBI1427:
 114:VoiceEnvelope.h ****         float cu = value - 0.5f;
 1293              		.loc 3 114 10 discriminator 2 view .LVU370
 1294              	.LBB1428:
 115:VoiceEnvelope.h ****         release_curve_coefficient = 128.0f * cu * cu;
 1295              		.loc 3 115 9 discriminator 2 view .LVU371
 116:VoiceEnvelope.h ****     }
 1296              		.loc 3 116 9 discriminator 2 view .LVU372
 116:VoiceEnvelope.h ****     }
 1297              		.loc 3 116 35 is_stmt 0 discriminator 2 view .LVU373
 1298 008c 04F10B00 		add	r0, r4, #11
 1299 0090 0260     		str	r2, [r0]	@ float
 1300              	.LVL58:
 116:VoiceEnvelope.h ****     }
 1301              		.loc 3 116 35 discriminator 2 view .LVU374
 1302              	.LBE1428:
 1303              	.LBE1427:
 1304              	.LBE1429:
 1305              	.LBE1430:
 124:Polyphony.cpp ****         voice_envelopes_[i].SetMode(VoiceEnvelope::MODE_AR);
 1306              		.loc 1 124 9 is_stmt 1 discriminator 2 view .LVU375
 1307              	.LBB1431:
 1308              	.LBI1431:
  43:VoiceEnvelope.h ****         mode = new_mode;
 1309              		.loc 3 43 10 discriminator 2 view .LVU376
 1310              	.LBB1432:
  44:VoiceEnvelope.h ****     }
 1311              		.loc 3 44 9 discriminator 2 view .LVU377
 1312              	.LBE1432:
 1313              	.LBE1431:
 1314              	.LBB1434:
 1315              	.LBB1435:
 1316              	.LBB1436:
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 1317              		.loc 3 56 25 is_stmt 0 discriminator 2 view .LVU378
 1318 0092 0922     		movs	r2, #9
 1319              	.LBE1436:
  60:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
 1320              		.loc 3 60 28 discriminator 2 view .LVU379
 1321 0094 0C48     		ldr	r0, .L38
 1322              	.LBB1437:
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 1323              		.loc 3 56 25 discriminator 2 view .LVU380
 1324 0096 C4F83320 		str	r2, [r4, #51]
  57:VoiceEnvelope.h ****             curve = 0.5f;
 1325              		.loc 3 57 24 discriminator 2 view .LVU381
 1326 009a 0C4A     		ldr	r2, .L38+4
 1327              	.LBE1437:
 1328              	.LBE1435:
 1329              	.LBE1434:
 1330              	.LBB1442:
 1331              	.LBB1433:
  44:VoiceEnvelope.h ****     }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 76


 1332              		.loc 3 44 14 discriminator 2 view .LVU382
 1333 009c 2170     		strb	r1, [r4]
 1334              	.LVL59:
  44:VoiceEnvelope.h ****     }
 1335              		.loc 3 44 14 discriminator 2 view .LVU383
 1336              	.LBE1433:
 1337              	.LBE1442:
 125:Polyphony.cpp ****         voice_envelopes_[i].SetShape(0.5f);
 1338              		.loc 1 125 9 is_stmt 1 discriminator 2 view .LVU384
 1339              	.LBB1443:
 1340              	.LBI1434:
  48:VoiceEnvelope.h ****         float curve;
 1341              		.loc 3 48 10 discriminator 2 view .LVU385
 1342              	.LBB1439:
  49:VoiceEnvelope.h ****         if (value < 0.5f) {
 1343              		.loc 3 49 9 discriminator 2 view .LVU386
  50:VoiceEnvelope.h ****             attack_time = min_attack_time;
 1344              		.loc 3 50 9 discriminator 2 view .LVU387
 1345              	.LBB1438:
  55:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(time_range_2x * norm_val * norm_val) + min_attack_tim
 1346              		.loc 3 55 13 discriminator 2 view .LVU388
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 1347              		.loc 3 56 13 discriminator 2 view .LVU389
  57:VoiceEnvelope.h ****             curve = 0.5f;
 1348              		.loc 3 57 13 discriminator 2 view .LVU390
  57:VoiceEnvelope.h ****             curve = 0.5f;
 1349              		.loc 3 57 24 is_stmt 0 discriminator 2 view .LVU391
 1350 009e C4F83720 		str	r2, [r4, #55]
  58:VoiceEnvelope.h ****         }
 1351              		.loc 3 58 13 is_stmt 1 discriminator 2 view .LVU392
 1352              	.LVL60:
  58:VoiceEnvelope.h ****         }
 1353              		.loc 3 58 13 is_stmt 0 discriminator 2 view .LVU393
 1354              	.LBE1438:
  60:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
 1355              		.loc 3 60 9 is_stmt 1 discriminator 2 view .LVU394
  60:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
 1356              		.loc 3 60 28 is_stmt 0 discriminator 2 view .LVU395
 1357 00a2 04F12B02 		add	r2, r4, #43
 1358 00a6 1060     		str	r0, [r2]	@ float
  61:VoiceEnvelope.h ****         SetAttackCurve(curve);
 1359              		.loc 3 61 9 is_stmt 1 discriminator 2 view .LVU396
  61:VoiceEnvelope.h ****         SetAttackCurve(curve);
 1360              		.loc 3 61 27 is_stmt 0 discriminator 2 view .LVU397
 1361 00a8 04F12F02 		add	r2, r4, #47
 1362 00ac 0848     		ldr	r0, .L38+8
 1363              	.LBE1439:
 1364              	.LBE1443:
 115:Polyphony.cpp ****         patches_[i].engine = 0;      
 1365              		.loc 1 115 23 discriminator 2 view .LVU398
 1366 00ae 4434     		adds	r4, r4, #68
 1367              	.LBB1444:
 1368              	.LBB1440:
  61:VoiceEnvelope.h ****         SetAttackCurve(curve);
 1369              		.loc 3 61 27 discriminator 2 view .LVU399
 1370 00b0 1060     		str	r0, [r2]	@ float
  62:VoiceEnvelope.h ****         SetReleaseCurve(curve);
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 77


 1371              		.loc 3 62 9 is_stmt 1 discriminator 2 view .LVU400
 1372              	.LVL61:
  62:VoiceEnvelope.h ****         SetReleaseCurve(curve);
 1373              		.loc 3 62 9 is_stmt 0 discriminator 2 view .LVU401
 1374              	.LBE1440:
 1375              	.LBE1444:
 1376              	.LBE1446:
 110:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
 1377              		.loc 3 110 9 is_stmt 1 discriminator 2 view .LVU402
 111:VoiceEnvelope.h ****     }
 1378              		.loc 3 111 9 discriminator 2 view .LVU403
 1379              	.LBB1447:
 1380              	.LBB1445:
 1381              	.LBB1441:
  63:VoiceEnvelope.h ****     }
 1382              		.loc 3 63 9 discriminator 2 view .LVU404
  63:VoiceEnvelope.h ****     }
 1383              		.loc 3 63 9 is_stmt 0 discriminator 2 view .LVU405
 1384              	.LBE1441:
 1385              	.LBE1445:
 1386              	.LBE1447:
 115:VoiceEnvelope.h ****         release_curve_coefficient = 128.0f * cu * cu;
 1387              		.loc 3 115 9 is_stmt 1 discriminator 2 view .LVU406
 116:VoiceEnvelope.h ****     }
 1388              		.loc 3 116 9 discriminator 2 view .LVU407
 1389              	.LBB1448:
 126:Polyphony.cpp **** 
 127:Polyphony.cpp ****         memset(output_buffers_[i], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 1390              		.loc 1 127 9 discriminator 2 view .LVU408
 1391              		.loc 1 127 15 is_stmt 0 discriminator 2 view .LVU409
 1392 00b2 1846     		mov	r0, r3
 1393 00b4 4022     		movs	r2, #64
 1394 00b6 FFF7FEFF 		bl	memset
 1395              	.LVL62:
 115:Polyphony.cpp ****         patches_[i].engine = 0;      
 1396              		.loc 1 115 23 discriminator 2 view .LVU410
 1397 00ba 4645     		cmp	r6, r8
 1398              		.loc 1 127 15 discriminator 2 view .LVU411
 1399 00bc 0346     		mov	r3, r0
 115:Polyphony.cpp ****         patches_[i].engine = 0;      
 1400              		.loc 1 115 5 is_stmt 1 discriminator 2 view .LVU412
 1401              	.LVL63:
 115:Polyphony.cpp ****         patches_[i].engine = 0;      
 1402              		.loc 1 115 23 discriminator 2 view .LVU413
 1403 00be 03F14003 		add	r3, r3, #64
 1404 00c2 AFD1     		bne	.L36
 1405              	.LBE1448:
 128:Polyphony.cpp ****     }
 129:Polyphony.cpp **** }
 1406              		.loc 1 129 1 is_stmt 0 view .LVU414
 1407 00c4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1408              	.LVL64:
 1409              	.L39:
 1410              		.loc 1 129 1 view .LVU415
 1411              		.align	2
 1412              	.L38:
 1413 00c8 398EE33D 		.word	1038323257
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 78


 1414 00cc 04650400 		.word	288004
 1415 00d0 7F036936 		.word	912851839
 1416 00d4 0080BB48 		.word	1220247552
 1417 00d8 99991941 		.word	1092196761
 1418 00dc 00009646 		.word	1184235520
 1419 00e0 99999940 		.word	1083808153
 1420 00e4 0100C043 		.word	1136656385
 1421 00e8 AAAA2A3B 		.word	992651946
 1422              		.cfi_endproc
 1423              	.LFE5853:
 1425              		.section	.text._ZN15PolyphonyEngine4InitEPN5daisy9DaisySeedE,"ax",%progbits
 1426              		.align	1
 1427              		.global	_ZN15PolyphonyEngine4InitEPN5daisy9DaisySeedE
 1428              		.syntax unified
 1429              		.thumb
 1430              		.thumb_func
 1432              	_ZN15PolyphonyEngine4InitEPN5daisy9DaisySeedE:
 1433              	.LVL65:
 1434              	.LFB5848:
  31:Polyphony.cpp ****     hw_ptr_ = hw;
 1435              		.loc 1 31 50 is_stmt 1 view -0
 1436              		.cfi_startproc
 1437              		@ args = 0, pretend = 0, frame = 0
 1438              		@ frame_needed = 0, uses_anonymous_args = 0
  32:Polyphony.cpp ****     AllocateVoices(); 
 1439              		.loc 1 32 5 view .LVU417
  32:Polyphony.cpp ****     AllocateVoices(); 
 1440              		.loc 1 32 13 is_stmt 0 view .LVU418
 1441 0000 00F54053 		add	r3, r0, #12288
  31:Polyphony.cpp ****     hw_ptr_ = hw;
 1442              		.loc 1 31 50 view .LVU419
 1443 0004 10B5     		push	{r4, lr}
 1444              		.cfi_def_cfa_offset 8
 1445              		.cfi_offset 4, -8
 1446              		.cfi_offset 14, -4
  31:Polyphony.cpp ****     hw_ptr_ = hw;
 1447              		.loc 1 31 50 view .LVU420
 1448 0006 0446     		mov	r4, r0
  32:Polyphony.cpp ****     AllocateVoices(); 
 1449              		.loc 1 32 13 view .LVU421
 1450 0008 C3F8A81A 		str	r1, [r3, #2728]
  33:Polyphony.cpp ****     InitVoiceParameters(); 
 1451              		.loc 1 33 5 is_stmt 1 view .LVU422
  33:Polyphony.cpp ****     InitVoiceParameters(); 
 1452              		.loc 1 33 19 is_stmt 0 view .LVU423
 1453 000c FFF7FEFF 		bl	_ZN15PolyphonyEngine14AllocateVoicesEv
 1454              	.LVL66:
  34:Polyphony.cpp **** }
 1455              		.loc 1 34 5 is_stmt 1 view .LVU424
  34:Polyphony.cpp **** }
 1456              		.loc 1 34 24 is_stmt 0 view .LVU425
 1457 0010 2046     		mov	r0, r4
  35:Polyphony.cpp **** 
 1458              		.loc 1 35 1 view .LVU426
 1459 0012 BDE81040 		pop	{r4, lr}
 1460              		.cfi_restore 14
 1461              		.cfi_restore 4
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 79


 1462              		.cfi_def_cfa_offset 0
 1463              	.LVL67:
  34:Polyphony.cpp **** }
 1464              		.loc 1 34 24 view .LVU427
 1465 0016 FFF7FEBF 		b	_ZN15PolyphonyEngine19InitVoiceParametersEv
 1466              	.LVL68:
  34:Polyphony.cpp **** }
 1467              		.loc 1 34 24 view .LVU428
 1468              		.cfi_endproc
 1469              	.LFE5848:
 1471              		.section	.text._ZN15PolyphonyEngine16ProcessEnvelopesEb,"ax",%progbits
 1472              		.align	1
 1473              		.global	_ZN15PolyphonyEngine16ProcessEnvelopesEb
 1474              		.syntax unified
 1475              		.thumb
 1476              		.thumb_func
 1478              	_ZN15PolyphonyEngine16ProcessEnvelopesEb:
 1479              	.LVL69:
 1480              	.LFB5855:
 130:Polyphony.cpp **** 
 131:Polyphony.cpp **** void PolyphonyEngine::PrepVoiceParams(const RenderParameters& params) {
 132:Polyphony.cpp ****     bool percussive_engine = (params.engine_index > 7);
 133:Polyphony.cpp **** 
 134:Polyphony.cpp ****     float attack_value = 0.0f;
 135:Polyphony.cpp ****     float release_value = 0.0f;
 136:Polyphony.cpp ****     if (!percussive_engine) {
 137:Polyphony.cpp ****         float attack_raw = params.env_attack_val; 
 138:Polyphony.cpp ****         if (attack_raw < 0.2f) {
 139:Polyphony.cpp ****             attack_value = attack_raw * (attack_raw * 0.5f);
 140:Polyphony.cpp ****         } else {
 141:Polyphony.cpp ****             attack_value = attack_raw * attack_raw * attack_raw;
 142:Polyphony.cpp ****         }
 143:Polyphony.cpp ****         release_value = params.env_release_val * params.env_release_val * params.env_release_val;
 144:Polyphony.cpp ****     }
 145:Polyphony.cpp **** 
 146:Polyphony.cpp ****     float global_pitch_offset = params.pitch_val * 24.f - 12.f;
 147:Polyphony.cpp ****     float current_global_harmonics = params.harm_knob_val;
 148:Polyphony.cpp ****     float current_global_morph = params.morph_knob_val;
 149:Polyphony.cpp ****     float current_global_timbre = params.timbre_knob_val;
 150:Polyphony.cpp **** 
 151:Polyphony.cpp ****     for (int v = 0; v <= params.effective_num_voices - 1; ++v) { 
 152:Polyphony.cpp ****         PatchParams patch_params;
 153:Polyphony.cpp ****         patch_params.engine_idx = params.engine_index;
 154:Polyphony.cpp ****         patch_params.note = voice_note_[v];
 155:Polyphony.cpp ****         patch_params.global_pitch_offset = global_pitch_offset;
 156:Polyphony.cpp ****         patch_params.harmonics = current_global_harmonics;
 157:Polyphony.cpp ****         patch_params.timbre = current_global_timbre;
 158:Polyphony.cpp ****         patch_params.morph = current_global_morph;
 159:Polyphony.cpp ****         patch_params.arp_on = params.arp_on;
 160:Polyphony.cpp ****         patch_params.decay = params.env_release_val;
 161:Polyphony.cpp ****         
 162:Polyphony.cpp ****         UpdatePatchParams(patches_[v], patch_params);
 163:Polyphony.cpp **** 
 164:Polyphony.cpp ****         UpdateModAndEnv(
 165:Polyphony.cpp ****             modulations_[v],
 166:Polyphony.cpp ****             voice_envelopes_[v],
 167:Polyphony.cpp ****             percussive_engine,
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 80


 168:Polyphony.cpp ****             attack_value,
 169:Polyphony.cpp ****             release_value
 170:Polyphony.cpp ****         );
 171:Polyphony.cpp **** 
 172:Polyphony.cpp ****         if (!params.poly_mode && !params.arp_on) {
 173:Polyphony.cpp ****             UpdateMonoTrigger(
 174:Polyphony.cpp ****                 modulations_[v],
 175:Polyphony.cpp ****                 voice_active_[v],
 176:Polyphony.cpp ****                 engine_changed_flag_
 177:Polyphony.cpp ****             );
 178:Polyphony.cpp ****         }
 179:Polyphony.cpp ****         
 180:Polyphony.cpp ****         voices_[v].Render(patches_[v], modulations_[v], output_buffers_[v], BLOCK_SIZE);
 181:Polyphony.cpp **** 
 182:Polyphony.cpp ****         if (!params.poly_mode && !params.arp_on && (patches_[v].engine > 7) && v == 0) {
 183:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 184:Polyphony.cpp ****         }
 185:Polyphony.cpp ****     }
 186:Polyphony.cpp ****     
 187:Polyphony.cpp ****     int effective_voices = params.effective_num_voices; 
 188:Polyphony.cpp ****     for (int v = effective_voices; v < NUM_VOICES; ++v) {
 189:Polyphony.cpp ****          SilenceVoice(v);
 190:Polyphony.cpp ****     }
 191:Polyphony.cpp **** 
 192:Polyphony.cpp ****     if(engine_changed_flag_) {
 193:Polyphony.cpp ****         for(int v = 0; v < effective_voices; ++v) {
 194:Polyphony.cpp ****             RetriggerVoice(v);
 195:Polyphony.cpp ****         }
 196:Polyphony.cpp ****         engine_changed_flag_ = false;
 197:Polyphony.cpp ****     }
 198:Polyphony.cpp **** }
 199:Polyphony.cpp **** 
 200:Polyphony.cpp **** void PolyphonyEngine::ProcessEnvelopes(bool poly_mode) {
 1481              		.loc 1 200 56 is_stmt 1 view -0
 1482              		.cfi_startproc
 1483              		@ args = 0, pretend = 0, frame = 0
 1484              		@ frame_needed = 0, uses_anonymous_args = 0
 201:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
 1485              		.loc 1 201 5 view .LVU430
 200:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
 1486              		.loc 1 200 56 is_stmt 0 view .LVU431
 1487 0000 70B5     		push	{r4, r5, r6, lr}
 1488              		.cfi_def_cfa_offset 16
 1489              		.cfi_offset 4, -16
 1490              		.cfi_offset 5, -12
 1491              		.cfi_offset 6, -8
 1492              		.cfi_offset 14, -4
 1493              		.loc 1 201 11 view .LVU432
 1494 0002 00F56855 		add	r5, r0, #14848
 200:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
 1495              		.loc 1 200 56 view .LVU433
 1496 0006 0446     		mov	r4, r0
 1497 0008 0E46     		mov	r6, r1
 1498              		.loc 1 201 11 view .LVU434
 1499 000a 4022     		movs	r2, #64
 1500 000c 2435     		adds	r5, r5, #36
 1501 000e 0021     		movs	r1, #0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 81


 1502              	.LVL70:
 1503              		.loc 1 201 11 view .LVU435
 1504 0010 2846     		mov	r0, r5
 1505              	.LVL71:
 1506              		.loc 1 201 11 view .LVU436
 1507 0012 FFF7FEFF 		bl	memset
 1508              	.LVL72:
 202:Polyphony.cpp ****     memset(mix_buffer_aux_, 0, sizeof(mix_buffer_aux_));
 1509              		.loc 1 202 5 is_stmt 1 view .LVU437
 1510              		.loc 1 202 11 is_stmt 0 view .LVU438
 1511 0016 04F56953 		add	r3, r4, #14912
 1512 001a 0021     		movs	r1, #0
 1513 001c 4022     		movs	r2, #64
 1514 001e 2433     		adds	r3, r3, #36
 1515 0020 1846     		mov	r0, r3
 1516 0022 FFF7FEFF 		bl	memset
 1517              	.LVL73:
 203:Polyphony.cpp **** 
 204:Polyphony.cpp ****     int voices_to_process = poly_mode ? NUM_VOICES : 1;
 1518              		.loc 1 204 39 view .LVU439
 1519 0026 002E     		cmp	r6, #0
 202:Polyphony.cpp ****     memset(mix_buffer_aux_, 0, sizeof(mix_buffer_aux_));
 1520              		.loc 1 202 11 view .LVU440
 1521 0028 0346     		mov	r3, r0
 1522              		.loc 1 204 5 is_stmt 1 view .LVU441
 1523              		.loc 1 204 39 is_stmt 0 view .LVU442
 1524 002a 1348     		ldr	r0, .L48
 1525 002c 14BF     		ite	ne
 1526 002e 0421     		movne	r1, #4
 1527 0030 0121     		moveq	r1, #1
 1528              	.LVL74:
 205:Polyphony.cpp ****     for (int v = 0; v < voices_to_process; ++v) {
 1529              		.loc 1 205 5 is_stmt 1 view .LVU443
 1530              	.LBB1449:
 1531              		.loc 1 205 23 view .LVU444
 1532 0032 8901     		lsls	r1, r1, #6
 1533              	.LVL75:
 1534              		.loc 1 205 23 is_stmt 0 view .LVU445
 1535 0034 A1F58271 		sub	r1, r1, #260
 1536              	.LVL76:
 1537              	.L44:
 1538              	.LBB1450:
 206:Polyphony.cpp ****         for (int i = 0; i < BLOCK_SIZE; ++i) {
 1539              		.loc 1 206 27 is_stmt 1 view .LVU446
 1540 0038 2A46     		mov	r2, r5
 1541              	.LVL77:
 1542              	.L43:
 207:Polyphony.cpp ****             mix_buffer_out_[i] += output_buffers_[v][i].out;
 1543              		.loc 1 207 13 discriminator 2 view .LVU447
 1544              		.loc 1 207 32 is_stmt 0 discriminator 2 view .LVU448
 1545 003a B2EC017A 		vldmia.32	r2!, {s14}
 1546 003e 145E     		ldrsh	r4, [r2, r0]
 206:Polyphony.cpp ****         for (int i = 0; i < BLOCK_SIZE; ++i) {
 1547              		.loc 1 206 27 discriminator 2 view .LVU449
 1548 0040 9A42     		cmp	r2, r3
 1549              		.loc 1 207 32 discriminator 2 view .LVU450
 1550 0042 07EE904A 		vmov	s15, r4	@ int
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 82


 208:Polyphony.cpp ****             mix_buffer_aux_[i] += output_buffers_[v][i].aux;
 1551              		.loc 1 208 57 discriminator 2 view .LVU451
 1552 0046 00F10204 		add	r4, r0, #2
 207:Polyphony.cpp ****             mix_buffer_out_[i] += output_buffers_[v][i].out;
 1553              		.loc 1 207 32 discriminator 2 view .LVU452
 1554 004a F8EEE77A 		vcvt.f32.s32	s15, s15
 1555              		.loc 1 208 32 discriminator 2 view .LVU453
 1556 004e 145F     		ldrsh	r4, [r2, r4]
 207:Polyphony.cpp ****             mix_buffer_out_[i] += output_buffers_[v][i].out;
 1557              		.loc 1 207 32 discriminator 2 view .LVU454
 1558 0050 77EE877A 		vadd.f32	s15, s15, s14
 1559 0054 42ED017A 		vstr.32	s15, [r2, #-4]
 1560              		.loc 1 208 13 is_stmt 1 discriminator 2 view .LVU455
 1561              		.loc 1 208 32 is_stmt 0 discriminator 2 view .LVU456
 1562 0058 07EE904A 		vmov	s15, r4	@ int
 1563 005c B8EEE77A 		vcvt.f32.s32	s14, s15
 1564 0060 D2ED0F7A 		vldr.32	s15, [r2, #60]
 1565 0064 77EE877A 		vadd.f32	s15, s15, s14
 1566 0068 C2ED0F7A 		vstr.32	s15, [r2, #60]
 206:Polyphony.cpp ****         for (int i = 0; i < BLOCK_SIZE; ++i) {
 1567              		.loc 1 206 9 is_stmt 1 discriminator 2 view .LVU457
 206:Polyphony.cpp ****         for (int i = 0; i < BLOCK_SIZE; ++i) {
 1568              		.loc 1 206 27 discriminator 2 view .LVU458
 1569 006c E5D1     		bne	.L43
 1570              	.LBE1450:
 205:Polyphony.cpp ****         for (int i = 0; i < BLOCK_SIZE; ++i) {
 1571              		.loc 1 205 5 discriminator 2 view .LVU459
 205:Polyphony.cpp ****         for (int i = 0; i < BLOCK_SIZE; ++i) {
 1572              		.loc 1 205 23 discriminator 2 view .LVU460
 1573 006e 4030     		adds	r0, r0, #64
 1574 0070 8842     		cmp	r0, r1
 1575 0072 E1D1     		bne	.L44
 1576              	.LBE1449:
 209:Polyphony.cpp ****         }
 210:Polyphony.cpp ****     }
 211:Polyphony.cpp **** }
 1577              		.loc 1 211 1 is_stmt 0 view .LVU461
 1578 0074 70BD     		pop	{r4, r5, r6, pc}
 1579              	.LVL78:
 1580              	.L49:
 1581              		.loc 1 211 1 view .LVU462
 1582 0076 00BF     		.align	2
 1583              	.L48:
 1584 0078 FCFEFFFF 		.word	-260
 1585              		.cfi_endproc
 1586              	.LFE5855:
 1588              		.section	.text._ZN15PolyphonyEngine17UpdatePatchParamsERN6plaits5PatchERK11PatchParams,"ax",%progb
 1589              		.align	1
 1590              		.global	_ZN15PolyphonyEngine17UpdatePatchParamsERN6plaits5PatchERK11PatchParams
 1591              		.syntax unified
 1592              		.thumb
 1593              		.thumb_func
 1595              	_ZN15PolyphonyEngine17UpdatePatchParamsERN6plaits5PatchERK11PatchParams:
 1596              	.LVL79:
 1597              	.LFB5856:
 212:Polyphony.cpp **** 
 213:Polyphony.cpp **** void PolyphonyEngine::UpdatePatchParams(plaits::Patch& patch, const PatchParams& params) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 83


 1598              		.loc 1 213 90 is_stmt 1 view -0
 1599              		.cfi_startproc
 1600              		@ args = 0, pretend = 0, frame = 0
 1601              		@ frame_needed = 0, uses_anonymous_args = 0
 1602              		@ link register save eliminated.
 214:Polyphony.cpp ****     patch.note = params.note + params.global_pitch_offset;
 1603              		.loc 1 214 5 view .LVU464
 215:Polyphony.cpp ****     patch.engine = params.engine_idx;
 1604              		.loc 1 215 18 is_stmt 0 view .LVU465
 1605 0000 1368     		ldr	r3, [r2]
 214:Polyphony.cpp ****     patch.note = params.note + params.global_pitch_offset;
 1606              		.loc 1 214 30 view .LVU466
 1607 0002 D2ED017A 		vldr.32	s15, [r2, #4]
 1608 0006 92ED027A 		vldr.32	s14, [r2, #8]
 1609              		.loc 1 215 18 view .LVU467
 1610 000a CB61     		str	r3, [r1, #28]
 216:Polyphony.cpp ****     patch.harmonics = params.harmonics;
 1611              		.loc 1 216 21 view .LVU468
 1612 000c D368     		ldr	r3, [r2, #12]	@ float
 214:Polyphony.cpp ****     patch.note = params.note + params.global_pitch_offset;
 1613              		.loc 1 214 30 view .LVU469
 1614 000e 77EE877A 		vadd.f32	s15, s15, s14
 217:Polyphony.cpp ****     patch.timbre = params.timbre;
 218:Polyphony.cpp ****     patch.morph = params.morph;
 219:Polyphony.cpp ****     patch.lpg_colour = 0.0f;
 220:Polyphony.cpp ****     patch.decay = params.arp_on ? params.decay : 0.5f;
 1615              		.loc 1 220 33 view .LVU470
 1616 0012 107E     		ldrb	r0, [r2, #24]	@ zero_extendqisi2
 1617              	.LVL80:
 216:Polyphony.cpp ****     patch.harmonics = params.harmonics;
 1618              		.loc 1 216 21 view .LVU471
 1619 0014 4B60     		str	r3, [r1, #4]	@ float
 217:Polyphony.cpp ****     patch.timbre = params.timbre;
 1620              		.loc 1 217 18 view .LVU472
 1621 0016 1369     		ldr	r3, [r2, #16]	@ float
 214:Polyphony.cpp ****     patch.engine = params.engine_idx;
 1622              		.loc 1 214 16 view .LVU473
 1623 0018 C1ED007A 		vstr.32	s15, [r1]
 215:Polyphony.cpp ****     patch.harmonics = params.harmonics;
 1624              		.loc 1 215 5 is_stmt 1 view .LVU474
 216:Polyphony.cpp ****     patch.timbre = params.timbre;
 1625              		.loc 1 216 5 view .LVU475
 217:Polyphony.cpp ****     patch.morph = params.morph;
 1626              		.loc 1 217 5 view .LVU476
 217:Polyphony.cpp ****     patch.morph = params.morph;
 1627              		.loc 1 217 18 is_stmt 0 view .LVU477
 1628 001c 8B60     		str	r3, [r1, #8]	@ float
 218:Polyphony.cpp ****     patch.lpg_colour = 0.0f;
 1629              		.loc 1 218 5 is_stmt 1 view .LVU478
 218:Polyphony.cpp ****     patch.lpg_colour = 0.0f;
 1630              		.loc 1 218 17 is_stmt 0 view .LVU479
 1631 001e 5369     		ldr	r3, [r2, #20]	@ float
 1632 0020 CB60     		str	r3, [r1, #12]	@ float
 219:Polyphony.cpp ****     patch.decay = params.arp_on ? params.decay : 0.5f;
 1633              		.loc 1 219 5 is_stmt 1 view .LVU480
 219:Polyphony.cpp ****     patch.decay = params.arp_on ? params.decay : 0.5f;
 1634              		.loc 1 219 22 is_stmt 0 view .LVU481
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 84


 1635 0022 0023     		movs	r3, #0
 1636 0024 4B62     		str	r3, [r1, #36]	@ float
 1637              		.loc 1 220 5 is_stmt 1 view .LVU482
 1638              		.loc 1 220 33 is_stmt 0 view .LVU483
 1639 0026 28B1     		cbz	r0, .L52
 1640              		.loc 1 220 33 discriminator 1 view .LVU484
 1641 0028 D269     		ldr	r2, [r2, #28]	@ float
 1642              	.LVL81:
 1643              	.L51:
 1644              		.loc 1 220 17 discriminator 4 view .LVU485
 1645 002a 0A62     		str	r2, [r1, #32]	@ float
 221:Polyphony.cpp ****     patch.frequency_modulation_amount = 0.f;
 1646              		.loc 1 221 5 is_stmt 1 discriminator 4 view .LVU486
 1647              		.loc 1 221 39 is_stmt 0 discriminator 4 view .LVU487
 1648 002c 0B61     		str	r3, [r1, #16]	@ float
 222:Polyphony.cpp ****     patch.timbre_modulation_amount = 0.f;
 1649              		.loc 1 222 5 is_stmt 1 discriminator 4 view .LVU488
 1650              		.loc 1 222 36 is_stmt 0 discriminator 4 view .LVU489
 1651 002e 4B61     		str	r3, [r1, #20]	@ float
 223:Polyphony.cpp ****     patch.morph_modulation_amount = 0.f;
 1652              		.loc 1 223 5 is_stmt 1 discriminator 4 view .LVU490
 1653              		.loc 1 223 35 is_stmt 0 discriminator 4 view .LVU491
 1654 0030 8B61     		str	r3, [r1, #24]	@ float
 224:Polyphony.cpp **** }
 1655              		.loc 1 224 1 discriminator 4 view .LVU492
 1656 0032 7047     		bx	lr
 1657              	.LVL82:
 1658              	.L52:
 220:Polyphony.cpp ****     patch.frequency_modulation_amount = 0.f;
 1659              		.loc 1 220 33 view .LVU493
 1660 0034 4FF07C52 		mov	r2, #1056964608
 1661              	.LVL83:
 220:Polyphony.cpp ****     patch.frequency_modulation_amount = 0.f;
 1662              		.loc 1 220 33 view .LVU494
 1663 0038 F7E7     		b	.L51
 1664              		.cfi_endproc
 1665              	.LFE5856:
 1667              		.section	.text._ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff,"a
 1668              		.align	1
 1669              		.global	_ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff
 1670              		.syntax unified
 1671              		.thumb
 1672              		.thumb_func
 1674              	_ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff:
 1675              	.LVL84:
 1676              	.LFB5857:
 225:Polyphony.cpp **** 
 226:Polyphony.cpp **** void PolyphonyEngine::UpdateModAndEnv(plaits::Modulations& mod, VoiceEnvelope& env, bool percussive
 1677              		.loc 1 226 150 is_stmt 1 view -0
 1678              		.cfi_startproc
 1679              		@ args = 0, pretend = 0, frame = 8
 1680              		@ frame_needed = 0, uses_anonymous_args = 0
 227:Polyphony.cpp ****     mod.engine = 0;
 1681              		.loc 1 227 5 view .LVU496
 1682              		.loc 1 227 16 is_stmt 0 view .LVU497
 1683 0000 DFED7E6A 		vldr.32	s13, .L87
 1684 0004 B7EE007A 		vmov.f32	s14, #1.0e+0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 85


 226:Polyphony.cpp ****     mod.engine = 0;
 1685              		.loc 1 226 150 view .LVU498
 1686 0008 13B5     		push	{r0, r1, r4, lr}
 1687              		.cfi_def_cfa_offset 16
 1688              		.cfi_offset 4, -8
 1689              		.cfi_offset 14, -4
 1690              		.loc 1 227 16 view .LVU499
 1691 000a C1ED006A 		vstr.32	s13, [r1]
 228:Polyphony.cpp ****     mod.note = 0.0f; 
 1692              		.loc 1 228 5 is_stmt 1 view .LVU500
 1693              		.loc 1 228 14 is_stmt 0 view .LVU501
 1694 000e C1ED016A 		vstr.32	s13, [r1, #4]
 229:Polyphony.cpp ****     mod.frequency = 0.0f;
 1695              		.loc 1 229 5 is_stmt 1 view .LVU502
 1696              		.loc 1 229 19 is_stmt 0 view .LVU503
 1697 0012 C1ED026A 		vstr.32	s13, [r1, #8]
 230:Polyphony.cpp ****     mod.harmonics = 0.0f; 
 1698              		.loc 1 230 5 is_stmt 1 view .LVU504
 1699              		.loc 1 230 19 is_stmt 0 view .LVU505
 1700 0016 C1ED036A 		vstr.32	s13, [r1, #12]
 231:Polyphony.cpp ****     mod.timbre = 0.0f;
 1701              		.loc 1 231 5 is_stmt 1 view .LVU506
 1702              		.loc 1 231 16 is_stmt 0 view .LVU507
 1703 001a C1ED046A 		vstr.32	s13, [r1, #16]
 232:Polyphony.cpp ****     mod.morph = 0.0f; 
 1704              		.loc 1 232 5 is_stmt 1 view .LVU508
 1705              		.loc 1 232 15 is_stmt 0 view .LVU509
 1706 001e C1ED056A 		vstr.32	s13, [r1, #20]
 233:Polyphony.cpp **** 
 234:Polyphony.cpp ****     if (!percussive_engine) {
 1707              		.loc 1 234 5 is_stmt 1 view .LVU510
 1708              	.LBB1478:
 1709 0022 002B     		cmp	r3, #0
 1710 0024 40F0E180 		bne	.L54
 1711              	.LVL85:
 1712              		.loc 1 234 5 is_stmt 0 view .LVU511
 1713              	.LBE1478:
 1714              	.LBB1479:
 1715              	.LBI1479:
 226:Polyphony.cpp ****     mod.engine = 0;
 1716              		.loc 1 226 6 is_stmt 1 view .LVU512
 1717              	.LBB1480:
 1718              	.LBB1481:
 235:Polyphony.cpp ****         env.SetAttackTime(attack_value);
 1719              		.loc 1 235 9 view .LVU513
 1720              	.LBB1482:
 1721              	.LBI1482:
  67:VoiceEnvelope.h ****         // Map 0-1 value to attack time (exponential scaling)
 1722              		.loc 3 67 10 view .LVU514
 1723              	.LBB1483:
  70:VoiceEnvelope.h ****         
 1724              		.loc 3 70 9 view .LVU515
  73:VoiceEnvelope.h ****             // Extra fast attacks at the beginning of the range
 1725              		.loc 3 73 9 view .LVU516
 1726 0028 DFED754A 		vldr.32	s9, .L87+4
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 1727              		.loc 3 79 56 is_stmt 0 view .LVU517
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 86


 1728 002c 92ED045A 		vldr.32	s10, [r2, #16]
  73:VoiceEnvelope.h ****             // Extra fast attacks at the beginning of the range
 1729              		.loc 3 73 9 view .LVU518
 1730 0030 B4EEE40A 		vcmpe.f32	s0, s9
 1731 0034 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1732 0038 4CD5     		bpl	.L82
  75:VoiceEnvelope.h ****                                            (min_attack_time * 9.0f * value / 0.1f));
 1733              		.loc 3 75 13 is_stmt 1 view .LVU519
  76:VoiceEnvelope.h ****         } else {
 1734              		.loc 3 76 61 is_stmt 0 view .LVU520
 1735 003a B2EE026A 		vmov.f32	s12, #9.0e+0
  75:VoiceEnvelope.h ****                                            (min_attack_time * 9.0f * value / 0.1f));
 1736              		.loc 3 75 47 view .LVU521
 1737 003e D2ED055A 		vldr.32	s11, [r2, #20]
  76:VoiceEnvelope.h ****         } else {
 1738              		.loc 3 76 61 view .LVU522
 1739 0042 25EE866A 		vmul.f32	s12, s11, s12
  76:VoiceEnvelope.h ****         } else {
 1740              		.loc 3 76 68 view .LVU523
 1741 0046 26EE006A 		vmul.f32	s12, s12, s0
  76:VoiceEnvelope.h ****         } else {
 1742              		.loc 3 76 76 view .LVU524
 1743 004a C6EE247A 		vdiv.f32	s15, s12, s9
  75:VoiceEnvelope.h ****                                            (min_attack_time * 9.0f * value / 0.1f));
 1744              		.loc 3 75 63 view .LVU525
 1745 004e 77EEA57A 		vadd.f32	s15, s15, s11
 1746              	.L84:
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 1747              		.loc 3 79 27 view .LVU526
 1748 0052 FCEEE77A 		vcvt.u32.f32	s15, s15
  86:VoiceEnvelope.h ****             // More exponential curve for punchy attacks
 1749              		.loc 3 86 9 view .LVU527
 1750 0056 DFED6B5A 		vldr.32	s11, .L87+8
 1751 005a B4EEE50A 		vcmpe.f32	s0, s11
  83:VoiceEnvelope.h ****         
 1752              		.loc 3 83 35 view .LVU528
 1753 005e B8EE676A 		vcvt.f32.u32	s12, s15
 1754 0062 C2ED0D7A 		vstr.32	s15, [r2, #52]	@ int
  83:VoiceEnvelope.h ****         
 1755              		.loc 3 83 9 is_stmt 1 view .LVU529
  86:VoiceEnvelope.h ****             // More exponential curve for punchy attacks
 1756              		.loc 3 86 9 is_stmt 0 view .LVU530
 1757 0066 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  83:VoiceEnvelope.h ****         
 1758              		.loc 3 83 35 view .LVU531
 1759 006a 87EE064A 		vdiv.f32	s8, s14, s12
  83:VoiceEnvelope.h ****         
 1760              		.loc 3 83 28 view .LVU532
 1761 006e 82ED0B4A 		vstr.32	s8, [r2, #44]
  86:VoiceEnvelope.h ****             // More exponential curve for punchy attacks
 1762              		.loc 3 86 9 is_stmt 1 view .LVU533
 1763 0072 42D5     		bpl	.L83
 1764              	.LVL86:
 1765              	.LBB1484:
 1766              	.LBI1484:
  67:VoiceEnvelope.h ****         // Map 0-1 value to attack time (exponential scaling)
 1767              		.loc 3 67 10 view .LVU534
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 87


 1768              	.LBB1485:
  88:VoiceEnvelope.h ****         } else {
 1769              		.loc 3 88 13 view .LVU535
 1770              	.LBB1486:
 1771              	.LBI1486:
 109:VoiceEnvelope.h ****         float cu = value - 0.5f;
 1772              		.loc 3 109 10 view .LVU536
 1773              	.LBB1487:
 110:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
 1774              		.loc 3 110 9 view .LVU537
 1775              	.LBE1487:
 1776              	.LBE1486:
  88:VoiceEnvelope.h ****         } else {
 1777              		.loc 3 88 41 is_stmt 0 view .LVU538
 1778 0074 35EEC06A 		vsub.f32	s12, s11, s0
  88:VoiceEnvelope.h ****         } else {
 1779              		.loc 3 88 27 view .LVU539
 1780 0078 DFED635A 		vldr.32	s11, .L87+12
 1781 007c 36EE256A 		vadd.f32	s12, s12, s11
 1782              	.LVL87:
 1783              	.LBB1489:
 1784              	.LBB1488:
 110:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
 1785              		.loc 3 110 15 view .LVU540
 1786 0080 F6EE005A 		vmov.f32	s11, #5.0e-1
 1787 0084 36EE656A 		vsub.f32	s12, s12, s11
 1788              	.LVL88:
 111:VoiceEnvelope.h ****     }
 1789              		.loc 3 111 9 is_stmt 1 view .LVU541
 111:VoiceEnvelope.h ****     }
 1790              		.loc 3 111 43 is_stmt 0 view .LVU542
 1791 0088 DFED605A 		vldr.32	s11, .L87+16
 1792 008c 66EE255A 		vmul.f32	s11, s12, s11
 111:VoiceEnvelope.h ****     }
 1793              		.loc 3 111 48 view .LVU543
 1794 0090 25EE866A 		vmul.f32	s12, s11, s12
 1795              	.LVL89:
 1796              	.L58:
 111:VoiceEnvelope.h ****     }
 1797              		.loc 3 111 48 view .LVU544
 1798              	.LBE1488:
 1799              	.LBE1489:
 1800              	.LBE1485:
 1801              	.LBE1484:
 1802              	.LBE1483:
 1803              	.LBE1482:
 1804              	.LBB1493:
 1805              	.LBB1494:
  98:VoiceEnvelope.h ****         
 1806              		.loc 3 98 35 view .LVU545
 1807 0094 60EEA04A 		vmul.f32	s9, s1, s1
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 1808              		.loc 3 101 59 view .LVU546
 1809 0098 D2ED075A 		vldr.32	s11, [r2, #28]
 1810              	.LBE1494:
 1811              	.LBE1493:
 1812              	.LBB1500:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 88


 1813              	.LBB1501:
 154:VoiceEnvelope.h ****             case ENV_IDLE:
 1814              		.loc 3 154 9 view .LVU547
 1815 009c 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 1816              	.LVL90:
 154:VoiceEnvelope.h ****             case ENV_IDLE:
 1817              		.loc 3 154 9 view .LVU548
 1818 009e 82ED026A 		vstr.32	s12, [r2, #8]
 1819              	.LVL91:
 154:VoiceEnvelope.h ****             case ENV_IDLE:
 1820              		.loc 3 154 9 view .LVU549
 1821              	.LBE1501:
 1822              	.LBE1500:
 236:Polyphony.cpp ****         env.SetReleaseTime(release_value);
 1823              		.loc 1 236 9 is_stmt 1 view .LVU550
 1824              	.LBB1519:
 1825              	.LBI1493:
  95:VoiceEnvelope.h ****         // Map 0-1 value to release time (exponential scaling)
 1826              		.loc 3 95 10 view .LVU551
 1827              	.LBB1499:
  98:VoiceEnvelope.h ****         
 1828              		.loc 3 98 9 view .LVU552
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 1829              		.loc 3 101 9 view .LVU553
  98:VoiceEnvelope.h ****         
 1830              		.loc 3 98 15 is_stmt 0 view .LVU554
 1831 00a2 64EEA00A 		vmul.f32	s1, s9, s1
 1832              	.LVL92:
 1833              	.LBB1495:
 1834              	.LBB1496:
 116:VoiceEnvelope.h ****     }
 1835              		.loc 3 116 35 view .LVU555
 1836 00a6 C2ED036A 		vstr.32	s13, [r2, #12]
 1837              	.LBE1496:
 1838              	.LBE1495:
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 1839              		.loc 3 101 59 view .LVU556
 1840 00aa E0EE855A 		vfma.f32	s11, s1, s10
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 1841              		.loc 3 101 22 view .LVU557
 1842 00ae FCEEE55A 		vcvt.u32.f32	s11, s11
 1843 00b2 15EE903A 		vmov	r3, s11	@ int
 1844              	.LVL93:
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 1845              		.loc 3 101 20 view .LVU558
 1846 00b6 C2ED0E5A 		vstr.32	s11, [r2, #56]	@ int
 103:VoiceEnvelope.h ****         
 1847              		.loc 3 103 9 is_stmt 1 view .LVU559
 103:VoiceEnvelope.h ****         
 1848              		.loc 3 103 34 is_stmt 0 view .LVU560
 1849 00ba F8EE655A 		vcvt.f32.u32	s11, s11
 1850 00be 87EE255A 		vdiv.f32	s10, s14, s11
 103:VoiceEnvelope.h ****         
 1851              		.loc 3 103 27 view .LVU561
 1852 00c2 82ED0C5A 		vstr.32	s10, [r2, #48]
 106:VoiceEnvelope.h ****     }
 1853              		.loc 3 106 9 is_stmt 1 view .LVU562
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 89


 1854              	.LVL94:
 1855              	.LBB1498:
 1856              	.LBI1495:
 114:VoiceEnvelope.h ****         float cu = value - 0.5f;
 1857              		.loc 3 114 10 view .LVU563
 1858              	.LBB1497:
 115:VoiceEnvelope.h ****         release_curve_coefficient = 128.0f * cu * cu;
 1859              		.loc 3 115 9 view .LVU564
 116:VoiceEnvelope.h ****     }
 1860              		.loc 3 116 9 view .LVU565
 116:VoiceEnvelope.h ****     }
 1861              		.loc 3 116 9 is_stmt 0 view .LVU566
 1862              	.LBE1497:
 1863              	.LBE1498:
 1864              	.LBE1499:
 1865              	.LBE1519:
 237:Polyphony.cpp ****         float env_value = env.Process();
 1866              		.loc 1 237 9 is_stmt 1 view .LVU567
 1867              	.LBB1520:
 1868              	.LBI1500:
 152:VoiceEnvelope.h ****         float ph;
 1869              		.loc 3 152 11 view .LVU568
 1870              	.LBB1516:
 153:VoiceEnvelope.h ****         switch (current_state) {
 1871              		.loc 3 153 9 view .LVU569
 154:VoiceEnvelope.h ****             case ENV_IDLE:
 1872              		.loc 3 154 9 view .LVU570
 1873 00c6 0428     		cmp	r0, #4
 1874 00c8 1CD8     		bhi	.L60
 1875 00ca DFE800F0 		tbb	[pc, r0]
 1876              	.L62:
 1877 00ce 19       		.byte	(.L66-.L62)/2
 1878 00cf 37       		.byte	(.L65-.L62)/2
 1879 00d0 55       		.byte	(.L64-.L62)/2
 1880 00d1 58       		.byte	(.L63-.L62)/2
 1881 00d2 78       		.byte	(.L61-.L62)/2
 1882              	.LVL95:
 1883 00d3 00       		.p2align 1
 1884              	.L82:
 154:VoiceEnvelope.h ****             case ENV_IDLE:
 1885              		.loc 3 154 9 is_stmt 0 view .LVU571
 1886              	.LBE1516:
 1887              	.LBE1520:
 1888              	.LBB1521:
 1889              	.LBB1492:
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 1890              		.loc 3 79 13 is_stmt 1 view .LVU572
  70:VoiceEnvelope.h ****         
 1891              		.loc 3 70 35 is_stmt 0 view .LVU573
 1892 00d4 60EE007A 		vmul.f32	s15, s0, s0
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 1893              		.loc 3 79 54 view .LVU574
 1894 00d8 9FED4D6A 		vldr.32	s12, .L87+20
  80:VoiceEnvelope.h ****         }
 1895              		.loc 3 80 59 view .LVU575
 1896 00dc F6EE005A 		vmov.f32	s11, #5.0e-1
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 90


 1897              		.loc 3 79 54 view .LVU576
 1898 00e0 25EE066A 		vmul.f32	s12, s10, s12
  70:VoiceEnvelope.h ****         
 1899              		.loc 3 70 15 view .LVU577
 1900 00e4 67EE807A 		vmul.f32	s15, s15, s0
  80:VoiceEnvelope.h ****         }
 1901              		.loc 3 80 59 view .LVU578
 1902 00e8 65EE255A 		vmul.f32	s11, s10, s11
  80:VoiceEnvelope.h ****         }
 1903              		.loc 3 80 66 view .LVU579
 1904 00ec 67EEA57A 		vmul.f32	s15, s15, s11
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 1905              		.loc 3 79 75 view .LVU580
 1906 00f0 F4EE005A 		vmov.f32	s11, #1.25e-1
 1907 00f4 E6EE257A 		vfma.f32	s15, s12, s11
 1908 00f8 ABE7     		b	.L84
 1909              	.L83:
 1910              	.LBB1490:
 1911              	.LBB1491:
 111:VoiceEnvelope.h ****     }
 1912              		.loc 3 111 34 view .LVU581
 1913 00fa 9FED406A 		vldr.32	s12, .L87
 1914 00fe C9E7     		b	.L58
 1915              	.LVL96:
 1916              	.L66:
 111:VoiceEnvelope.h ****     }
 1917              		.loc 3 111 34 view .LVU582
 1918              	.LBE1491:
 1919              	.LBE1490:
 1920              	.LBE1492:
 1921              	.LBE1521:
 1922              	.LBB1522:
 1923              	.LBB1517:
 155:VoiceEnvelope.h ****                 current_value = 0.0f;
 1924              		.loc 3 155 13 is_stmt 1 view .LVU583
 156:VoiceEnvelope.h ****                 break;
 1925              		.loc 3 156 17 view .LVU584
 156:VoiceEnvelope.h ****                 break;
 1926              		.loc 3 156 31 is_stmt 0 view .LVU585
 1927 0100 C2ED016A 		vstr.32	s13, [r2, #4]
 157:VoiceEnvelope.h **** 
 1928              		.loc 3 157 17 is_stmt 1 view .LVU586
 1929              	.L60:
 202:VoiceEnvelope.h ****     }
 1930              		.loc 3 202 9 view .LVU587
 1931              	.LBB1502:
 1932              	.LBB1503:
 1933              		.file 40 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h"
   1:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
   3:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** //
   5:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // any later version.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 91


  10:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  11:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  16:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  20:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  25:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** /*
  26:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  27:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  30:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  38:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  39:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  42:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  */
  50:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  51:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  */
  55:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  56:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  59:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 92


  67:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  73:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** # include <type_traits>
  74:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  75:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus > 201703L
  76:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** # include <compare>
  77:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  78:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  79:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** {
  81:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  83:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /*
  84:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    * A constexpr wrapper for __builtin_memcmp.
  85:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    * @param __num The number of elements of type _Tp (not bytes).
  86:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    */
  87:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Up>
  88:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
  89:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline int
  90:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
  91:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
  92:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  93:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
  94:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  95:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
  96:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
  97:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
  98:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  for(; __num > 0; ++__first1, ++__first2, --__num)
  99:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    if (*__first1 != *__first2)
 100:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      return *__first1 < *__first2 ? -1 : 1;
 101:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return 0;
 102:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 103:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       else
 104:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 105:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 106:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 107:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 108:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 109:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
 110:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
 111:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
 112:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _BoolType>
 113:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap
 114:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 115:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 116:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static void
 117:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 119:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    _ValueType1;
 121:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
 122:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  *__a = *__b;
 123:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  *__b = __tmp;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 93


 124:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 125:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 126:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 127:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<>
 128:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap<true>
 129:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 130:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 131:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static void
 132:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 133:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 134:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  swap(*__a, *__b);
 135:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 136:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 137:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif // C++03
 138:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 139:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 140:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 141:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 142:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 143:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 144:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   Nothing.
 145:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 146:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 147:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  iterators themselves.
 148:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 149:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 150:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 151:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline void
 152:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 153:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 154:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 155:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 156:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 157:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 158:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 159:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 160:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 161:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 162:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType1;
 163:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 164:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType2;
 165:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 166:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 167:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType2>)
 168:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 169:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType1>)
 170:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 171:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 172:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType1;
 173:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 174:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType2;
 175:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 176:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 177:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 178:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 179:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #else
 180:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 94


 181:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // 187. iter_swap underspecified
 182:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       swap(*__a, *__b);
 183:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 184:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 185:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 186:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 187:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 188:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 189:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 190:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 191:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 192:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 193:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 194:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 195:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 196:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  The ranges must not overlap.
 197:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 198:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 199:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 200:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _ForwardIterator2
 201:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 202:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 203:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 204:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 205:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 206:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 207:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 208:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 209:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 210:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 211:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 212:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 213:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __first2;
 214:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 215:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 216:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 217:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 218:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 219:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 220:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 221:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 222:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 223:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 224:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 225:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 226:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 227:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 228:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 229:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 230:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 231:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 232:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 233:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 234:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 235:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (__b < __a)
 236:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 237:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 95


 238:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 239:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 240:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 241:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 242:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 243:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 244:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 245:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 246:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 247:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 248:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 249:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 250:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 251:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 252:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 253:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 254:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 255:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 256:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 257:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 258:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 259:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (__a < __b)
 1934              		.loc 40 259 7 is_stmt 0 view .LVU588
 1935 0104 D2ED017A 		vldr.32	s15, [r2, #4]
 1936              	.LBE1503:
 1937              	.LBE1502:
 202:VoiceEnvelope.h ****     }
 1938              		.loc 3 202 49 view .LVU589
 1939 0108 CDED016A 		vstr.32	s13, [sp, #4]
 1940              	.LVL97:
 1941              	.LBB1507:
 1942              	.LBI1502:
 254:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 1943              		.loc 40 254 5 is_stmt 1 view .LVU590
 1944              	.LBB1504:
 1945              		.loc 40 259 7 is_stmt 0 view .LVU591
 1946 010c F5EEC07A 		vcmpe.f32	s15, #0
 1947              	.LBE1504:
 1948              	.LBE1507:
 202:VoiceEnvelope.h ****     }
 1949              		.loc 3 202 56 view .LVU592
 1950 0110 8DED007A 		vstr.32	s14, [sp]
 1951              	.LBB1508:
 1952              	.LBB1505:
 1953              		.loc 40 259 7 view .LVU593
 1954 0114 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1955              	.LBE1505:
 1956              	.LBE1508:
 202:VoiceEnvelope.h ****     }
 1957              		.loc 3 202 34 view .LVU594
 1958 0118 54BF     		ite	pl
 1959 011a 0432     		addpl	r2, r2, #4
 1960              	.LVL98:
 1961              	.LBB1509:
 1962              	.LBB1506:
 260:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 1963              		.loc 40 260 9 view .LVU595
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 96


 1964 011c 01AA     		addmi	r2, sp, #4
 1965              	.LVL99:
 1966              		.loc 40 260 9 view .LVU596
 1967              	.LBE1506:
 1968              	.LBE1509:
 1969              	.LBB1510:
 1970              	.LBI1510:
 230:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 1971              		.loc 40 230 5 is_stmt 1 view .LVU597
 1972              	.LBB1511:
 235:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 1973              		.loc 40 235 7 is_stmt 0 view .LVU598
 1974 011e D2ED007A 		vldr.32	s15, [r2]
 1975 0122 F4EEC77A 		vcmpe.f32	s15, s14
 1976 0126 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 236:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 1977              		.loc 40 236 9 view .LVU599
 1978 012a C8BF     		it	gt
 1979 012c 6A46     		movgt	r2, sp
 1980              	.LVL100:
 236:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 1981              		.loc 40 236 9 view .LVU600
 1982              	.LBE1511:
 1983              	.LBE1510:
 202:VoiceEnvelope.h ****     }
 1984              		.loc 3 202 60 view .LVU601
 1985 012e 1368     		ldr	r3, [r2]	@ float
 1986              	.LVL101:
 202:VoiceEnvelope.h ****     }
 1987              		.loc 3 202 60 view .LVU602
 1988              	.LBE1517:
 1989              	.LBE1522:
 238:Polyphony.cpp ****         mod.level = env_value;
 1990              		.loc 1 238 9 is_stmt 1 view .LVU603
 1991              		.loc 1 238 19 is_stmt 0 view .LVU604
 1992 0130 CB61     		str	r3, [r1, #28]	@ float
 239:Polyphony.cpp ****         mod.level_patched = true;
 1993              		.loc 1 239 9 is_stmt 1 view .LVU605
 1994              		.loc 1 239 27 is_stmt 0 view .LVU606
 1995 0132 0123     		movs	r3, #1
 1996              	.LVL102:
 1997              		.loc 1 239 27 view .LVU607
 1998 0134 81F82430 		strb	r3, [r1, #36]
 1999              	.LVL103:
 2000              	.L53:
 2001              		.loc 1 239 27 view .LVU608
 2002              	.LBE1481:
 2003              	.LBE1480:
 2004              	.LBE1479:
 240:Polyphony.cpp ****     } else {
 241:Polyphony.cpp ****         mod.level = 1.0f;
 242:Polyphony.cpp ****         mod.level_patched = false;
 243:Polyphony.cpp ****         mod.trigger_patched = true;
 244:Polyphony.cpp ****     }
 245:Polyphony.cpp **** }
 2005              		.loc 1 245 1 view .LVU609
 2006 0138 02B0     		add	sp, sp, #8
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 97


 2007              		.cfi_remember_state
 2008              		.cfi_def_cfa_offset 8
 2009              		@ sp needed
 2010 013a 10BD     		pop	{r4, pc}
 2011              	.LVL104:
 2012              	.L65:
 2013              		.cfi_restore_state
 2014              	.LBB1526:
 2015              	.LBB1525:
 2016              	.LBB1524:
 2017              	.LBB1523:
 2018              	.LBB1518:
 159:VoiceEnvelope.h ****                 ph = static_cast<float>(phase) * attack_coefficient;
 2019              		.loc 3 159 13 is_stmt 1 view .LVU610
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 2020              		.loc 3 160 17 view .LVU611
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 2021              		.loc 3 160 41 is_stmt 0 view .LVU612
 2022 013c D36B     		ldr	r3, [r2, #60]
 2023              	.LBB1512:
 2024              	.LBB1513:
 218:VoiceEnvelope.h ****     }
 2025              		.loc 3 218 27 view .LVU613
 2026 013e B0EE475A 		vmov.f32	s10, s14
 2027              	.LBE1513:
 2028              	.LBE1512:
 162:VoiceEnvelope.h ****                     current_state = (mode == MODE_AR) ? ENV_DECAY : ENV_SUSTAIN;
 2029              		.loc 3 162 17 view .LVU614
 2030 0142 17EE900A 		vmov	r0, s15	@ int
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 2031              		.loc 3 160 22 view .LVU615
 2032 0146 05EE903A 		vmov	s11, r3	@ int
 162:VoiceEnvelope.h ****                     current_state = (mode == MODE_AR) ? ENV_DECAY : ENV_SUSTAIN;
 2033              		.loc 3 162 17 view .LVU616
 2034 014a 8342     		cmp	r3, r0
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 2035              		.loc 3 160 22 view .LVU617
 2036 014c F8EE655A 		vcvt.f32.u32	s11, s11
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 2037              		.loc 3 160 20 view .LVU618
 2038 0150 65EE845A 		vmul.f32	s11, s11, s8
 2039              	.LVL105:
 161:VoiceEnvelope.h ****                 if (phase >= attack_time) {
 2040              		.loc 3 161 17 is_stmt 1 view .LVU619
 2041              	.LBB1515:
 2042              	.LBI1512:
 217:VoiceEnvelope.h ****         return ph / (1.0f + attack_curve_coefficient * (1.0f - ph));
 2043              		.loc 3 217 11 view .LVU620
 2044              	.LBB1514:
 218:VoiceEnvelope.h ****     }
 2045              		.loc 3 218 9 view .LVU621
 218:VoiceEnvelope.h ****     }
 2046              		.loc 3 218 62 is_stmt 0 view .LVU622
 2047 0154 77EE654A 		vsub.f32	s9, s14, s11
 218:VoiceEnvelope.h ****     }
 2048              		.loc 3 218 27 view .LVU623
 2049 0158 A6EE245A 		vfma.f32	s10, s12, s9
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 98


 2050              	.LVL106:
 218:VoiceEnvelope.h ****     }
 2051              		.loc 3 218 67 view .LVU624
 2052 015c 85EE856A 		vdiv.f32	s12, s11, s10
 2053              	.LBE1514:
 2054              	.LBE1515:
 161:VoiceEnvelope.h ****                 if (phase >= attack_time) {
 2055              		.loc 3 161 31 view .LVU625
 2056 0160 82ED016A 		vstr.32	s12, [r2, #4]
 162:VoiceEnvelope.h ****                     current_state = (mode == MODE_AR) ? ENV_DECAY : ENV_SUSTAIN;
 2057              		.loc 3 162 17 is_stmt 1 view .LVU626
 2058 0164 3FD3     		bcc	.L86
 163:VoiceEnvelope.h ****                     phase = 0;
 2059              		.loc 3 163 21 view .LVU627
 163:VoiceEnvelope.h ****                     phase = 0;
 2060              		.loc 3 163 55 is_stmt 0 view .LVU628
 2061 0166 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 2062 0168 002B     		cmp	r3, #0
 2063 016a 0CBF     		ite	eq
 2064 016c 0323     		moveq	r3, #3
 2065 016e 0223     		movne	r3, #2
 163:VoiceEnvelope.h ****                     phase = 0;
 2066              		.loc 3 163 35 view .LVU629
 2067 0170 1370     		strb	r3, [r2]
 164:VoiceEnvelope.h ****                 } else {
 2068              		.loc 3 164 21 is_stmt 1 view .LVU630
 164:VoiceEnvelope.h ****                 } else {
 2069              		.loc 3 164 27 is_stmt 0 view .LVU631
 2070 0172 0023     		movs	r3, #0
 2071              	.LVL107:
 2072              	.L85:
 198:VoiceEnvelope.h ****                 }
 2073              		.loc 3 198 26 view .LVU632
 2074 0174 D363     		str	r3, [r2, #60]
 2075 0176 C5E7     		b	.L60
 2076              	.L64:
 170:VoiceEnvelope.h ****                 current_value = 1.0f;
 2077              		.loc 3 170 13 is_stmt 1 view .LVU633
 171:VoiceEnvelope.h ****                 break;
 2078              		.loc 3 171 17 view .LVU634
 171:VoiceEnvelope.h ****                 break;
 2079              		.loc 3 171 31 is_stmt 0 view .LVU635
 2080 0178 82ED017A 		vstr.32	s14, [r2, #4]
 172:VoiceEnvelope.h **** 
 2081              		.loc 3 172 17 is_stmt 1 view .LVU636
 2082 017c C2E7     		b	.L60
 2083              	.L63:
 174:VoiceEnvelope.h ****                 // Use current_value as starting point for decay
 2084              		.loc 3 174 13 view .LVU637
 177:VoiceEnvelope.h ****                 if (phase == 0) {
 2085              		.loc 3 177 17 view .LVU638
 177:VoiceEnvelope.h ****                 if (phase == 0) {
 2086              		.loc 3 177 41 is_stmt 0 view .LVU639
 2087 017e D06B     		ldr	r0, [r2, #60]
 177:VoiceEnvelope.h ****                 if (phase == 0) {
 2088              		.loc 3 177 22 view .LVU640
 2089 0180 07EE900A 		vmov	s15, r0	@ int
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 99


 2090 0184 F8EE677A 		vcvt.f32.u32	s15, s15
 177:VoiceEnvelope.h ****                 if (phase == 0) {
 2091              		.loc 3 177 20 view .LVU641
 2092 0188 67EE857A 		vmul.f32	s15, s15, s10
 2093              	.LVL108:
 178:VoiceEnvelope.h ****                     // On first frame, use current value
 2094              		.loc 3 178 17 is_stmt 1 view .LVU642
 2095 018c 08B9     		cbnz	r0, .L69
 180:VoiceEnvelope.h ****                 }
 2096              		.loc 3 180 21 view .LVU643
 180:VoiceEnvelope.h ****                 }
 2097              		.loc 3 180 39 is_stmt 0 view .LVU644
 2098 018e 5468     		ldr	r4, [r2, #4]	@ float
 2099 0190 1464     		str	r4, [r2, #64]	@ float
 2100              	.L69:
 182:VoiceEnvelope.h ****                 
 2101              		.loc 3 182 17 is_stmt 1 view .LVU645
 182:VoiceEnvelope.h ****                 
 2102              		.loc 3 182 59 is_stmt 0 view .LVU646
 2103 0192 37EE676A 		vsub.f32	s12, s14, s15
 182:VoiceEnvelope.h ****                 
 2104              		.loc 3 182 51 view .LVU647
 2105 0196 D2ED105A 		vldr.32	s11, [r2, #64]
 184:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 2106              		.loc 3 184 17 view .LVU648
 2107 019a 9842     		cmp	r0, r3
 182:VoiceEnvelope.h ****                 
 2108              		.loc 3 182 51 view .LVU649
 2109 019c 26EE256A 		vmul.f32	s12, s12, s11
 182:VoiceEnvelope.h ****                 
 2110              		.loc 3 182 73 view .LVU650
 2111 01a0 F0EE475A 		vmov.f32	s11, s14
 2112 01a4 E7EEA65A 		vfma.f32	s11, s15, s13
 182:VoiceEnvelope.h ****                 
 2113              		.loc 3 182 65 view .LVU651
 2114 01a8 C6EE257A 		vdiv.f32	s15, s12, s11
 2115              	.LVL109:
 182:VoiceEnvelope.h ****                 
 2116              		.loc 3 182 31 view .LVU652
 2117 01ac C2ED017A 		vstr.32	s15, [r2, #4]
 184:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 2118              		.loc 3 184 17 is_stmt 1 view .LVU653
 2119 01b0 02D3     		bcc	.L70
 2120              	.LVL110:
 2121              	.L71:
 185:VoiceEnvelope.h ****                     phase = 0;
 2122              		.loc 3 185 21 view .LVU654
 185:VoiceEnvelope.h ****                     phase = 0;
 2123              		.loc 3 185 35 is_stmt 0 view .LVU655
 2124 01b2 0023     		movs	r3, #0
 2125 01b4 1370     		strb	r3, [r2]
 186:VoiceEnvelope.h ****                 } else {
 2126              		.loc 3 186 21 is_stmt 1 view .LVU656
 2127 01b6 DDE7     		b	.L85
 2128              	.LVL111:
 2129              	.L70:
 188:VoiceEnvelope.h ****                 }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 100


 2130              		.loc 3 188 21 view .LVU657
 188:VoiceEnvelope.h ****                 }
 2131              		.loc 3 188 26 is_stmt 0 view .LVU658
 2132 01b8 0130     		adds	r0, r0, #1
 2133              	.LVL112:
 188:VoiceEnvelope.h ****                 }
 2134              		.loc 3 188 26 view .LVU659
 2135 01ba D063     		str	r0, [r2, #60]
 2136              	.LVL113:
 188:VoiceEnvelope.h ****                 }
 2137              		.loc 3 188 26 view .LVU660
 2138 01bc A2E7     		b	.L60
 2139              	.LVL114:
 2140              	.L61:
 192:VoiceEnvelope.h ****                 current_value = reset_target - static_cast<float>(phase) * reset_coefficient;
 2141              		.loc 3 192 13 is_stmt 1 view .LVU661
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 2142              		.loc 3 193 17 view .LVU662
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 2143              		.loc 3 193 67 is_stmt 0 view .LVU663
 2144 01be D36B     		ldr	r3, [r2, #60]
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 2145              		.loc 3 193 46 view .LVU664
 2146 01c0 D2ED095A 		vldr.32	s11, [r2, #36]
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 2147              		.loc 3 193 48 view .LVU665
 2148 01c4 07EE903A 		vmov	s15, r3	@ int
 2149 01c8 B8EE676A 		vcvt.f32.u32	s12, s15
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 2150              		.loc 3 193 46 view .LVU666
 2151 01cc D2ED0A7A 		vldr.32	s15, [r2, #40]
 2152 01d0 E6EE657A 		vfms.f32	s15, s12, s11
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 2153              		.loc 3 193 31 view .LVU667
 2154 01d4 C2ED017A 		vstr.32	s15, [r2, #4]
 194:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 2155              		.loc 3 194 17 is_stmt 1 view .LVU668
 2156 01d8 D2ED087A 		vldr.32	s15, [r2, #32]
 2157 01dc B4EEE76A 		vcmpe.f32	s12, s15
 2158 01e0 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2159 01e4 E5DA     		bge	.L71
 2160              	.L86:
 198:VoiceEnvelope.h ****                 }
 2161              		.loc 3 198 21 view .LVU669
 198:VoiceEnvelope.h ****                 }
 2162              		.loc 3 198 26 is_stmt 0 view .LVU670
 2163 01e6 0133     		adds	r3, r3, #1
 2164 01e8 C4E7     		b	.L85
 2165              	.LVL115:
 2166              	.L54:
 198:VoiceEnvelope.h ****                 }
 2167              		.loc 3 198 26 view .LVU671
 2168              	.LBE1518:
 2169              	.LBE1523:
 2170              	.LBE1524:
 2171              	.LBE1525:
 2172              	.LBE1526:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 101


 2173              	.LBB1527:
 241:Polyphony.cpp ****         mod.level_patched = false;
 2174              		.loc 1 241 9 is_stmt 1 view .LVU672
 242:Polyphony.cpp ****         mod.trigger_patched = true;
 2175              		.loc 1 242 27 is_stmt 0 view .LVU673
 2176 01ea 0023     		movs	r3, #0
 2177              	.LVL116:
 241:Polyphony.cpp ****         mod.level_patched = false;
 2178              		.loc 1 241 19 view .LVU674
 2179 01ec 81ED077A 		vstr.32	s14, [r1, #28]
 242:Polyphony.cpp ****         mod.trigger_patched = true;
 2180              		.loc 1 242 9 is_stmt 1 view .LVU675
 242:Polyphony.cpp ****         mod.trigger_patched = true;
 2181              		.loc 1 242 27 is_stmt 0 view .LVU676
 2182 01f0 81F82430 		strb	r3, [r1, #36]
 243:Polyphony.cpp ****     }
 2183              		.loc 1 243 9 is_stmt 1 view .LVU677
 243:Polyphony.cpp ****     }
 2184              		.loc 1 243 29 is_stmt 0 view .LVU678
 2185 01f4 0123     		movs	r3, #1
 2186 01f6 81F82330 		strb	r3, [r1, #35]
 2187              	.LBE1527:
 2188              		.loc 1 245 1 view .LVU679
 2189 01fa 9DE7     		b	.L53
 2190              	.L88:
 2191              		.align	2
 2192              	.L87:
 2193 01fc 00000000 		.word	0
 2194 0200 CDCCCC3D 		.word	1036831949
 2195 0204 9A99993E 		.word	1050253722
 2196 0208 3333333F 		.word	1060320051
 2197 020c 00000043 		.word	1124073472
 2198 0210 6F12033B 		.word	990057071
 2199              		.cfi_endproc
 2200              	.LFE5857:
 2202              		.section	.text._ZN15PolyphonyEngine17UpdateMonoTriggerERN6plaits11ModulationsERbb,"ax",%progbits
 2203              		.align	1
 2204              		.global	_ZN15PolyphonyEngine17UpdateMonoTriggerERN6plaits11ModulationsERbb
 2205              		.syntax unified
 2206              		.thumb
 2207              		.thumb_func
 2209              	_ZN15PolyphonyEngine17UpdateMonoTriggerERN6plaits11ModulationsERbb:
 2210              	.LVL117:
 2211              	.LFB5858:
 246:Polyphony.cpp **** 
 247:Polyphony.cpp **** void PolyphonyEngine::UpdateMonoTrigger(plaits::Modulations& mod, bool& active_flag, bool engine_ch
 2212              		.loc 1 247 118 is_stmt 1 view -0
 2213              		.cfi_startproc
 2214              		@ args = 0, pretend = 0, frame = 0
 2215              		@ frame_needed = 0, uses_anonymous_args = 0
 2216              		@ link register save eliminated.
 248:Polyphony.cpp ****     if ((engine_changed_flag_param && active_flag) || !active_flag) {
 2217              		.loc 1 248 5 view .LVU681
 2218 0000 0BB9     		cbnz	r3, .L90
 2219              		.loc 1 248 52 is_stmt 0 discriminator 3 view .LVU682
 2220 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 2221              	.LVL118:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 102


 2222              		.loc 1 248 52 discriminator 3 view .LVU683
 2223 0004 0BB9     		cbnz	r3, .L89
 2224              	.L90:
 249:Polyphony.cpp ****         mod.trigger = 0.0f; 
 2225              		.loc 1 249 9 is_stmt 1 view .LVU684
 2226              		.loc 1 249 21 is_stmt 0 view .LVU685
 2227 0006 0023     		movs	r3, #0
 2228 0008 8B61     		str	r3, [r1, #24]	@ float
 2229              	.L89:
 250:Polyphony.cpp ****     } 
 251:Polyphony.cpp **** }
 2230              		.loc 1 251 1 view .LVU686
 2231 000a 7047     		bx	lr
 2232              		.cfi_endproc
 2233              	.LFE5858:
 2235              		.section	.text._ZN15PolyphonyEngine12SilenceVoiceEi,"ax",%progbits
 2236              		.align	1
 2237              		.global	_ZN15PolyphonyEngine12SilenceVoiceEi
 2238              		.syntax unified
 2239              		.thumb
 2240              		.thumb_func
 2242              	_ZN15PolyphonyEngine12SilenceVoiceEi:
 2243              	.LVL119:
 2244              	.LFB5859:
 252:Polyphony.cpp **** 
 253:Polyphony.cpp **** void PolyphonyEngine::SilenceVoice(int voice_idx) {
 2245              		.loc 1 253 51 is_stmt 1 view -0
 2246              		.cfi_startproc
 2247              		@ args = 0, pretend = 0, frame = 0
 2248              		@ frame_needed = 0, uses_anonymous_args = 0
 2249              		@ link register save eliminated.
 254:Polyphony.cpp ****     if (voice_idx >= 0 && voice_idx < NUM_VOICES) {
 2250              		.loc 1 254 5 view .LVU688
 2251 0000 0329     		cmp	r1, #3
 2252 0002 08D8     		bhi	.L92
 255:Polyphony.cpp ****         memset(output_buffers_[voice_idx], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 2253              		.loc 1 255 9 view .LVU689
 2254              		.loc 1 255 41 is_stmt 0 view .LVU690
 2255 0004 00EB8110 		add	r0, r0, r1, lsl #6
 2256              	.LVL120:
 2257              		.loc 1 255 15 view .LVU691
 2258 0008 4022     		movs	r2, #64
 2259 000a 0021     		movs	r1, #0
 2260              	.LVL121:
 2261              		.loc 1 255 15 view .LVU692
 2262 000c 00F56450 		add	r0, r0, #14592
 2263 0010 2430     		adds	r0, r0, #36
 2264 0012 FFF7FEBF 		b	memset
 2265              	.LVL122:
 2266              	.L92:
 256:Polyphony.cpp ****     }
 257:Polyphony.cpp **** }
 2267              		.loc 1 257 1 view .LVU693
 2268 0016 7047     		bx	lr
 2269              		.cfi_endproc
 2270              	.LFE5859:
 2272              		.section	.text._ZN15PolyphonyEngine14RetriggerVoiceEi,"ax",%progbits
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 103


 2273              		.align	1
 2274              		.global	_ZN15PolyphonyEngine14RetriggerVoiceEi
 2275              		.syntax unified
 2276              		.thumb
 2277              		.thumb_func
 2279              	_ZN15PolyphonyEngine14RetriggerVoiceEi:
 2280              	.LVL123:
 2281              	.LFB5860:
 258:Polyphony.cpp **** 
 259:Polyphony.cpp **** void PolyphonyEngine::RetriggerVoice(int voice_idx) {
 2282              		.loc 1 259 53 is_stmt 1 view -0
 2283              		.cfi_startproc
 2284              		@ args = 0, pretend = 0, frame = 8
 2285              		@ frame_needed = 0, uses_anonymous_args = 0
 260:Polyphony.cpp ****     if (voice_idx >= 0 && voice_idx < NUM_VOICES && voice_active_[voice_idx]) {
 2286              		.loc 1 260 5 view .LVU695
 2287              	.LBB1533:
 2288 0000 0329     		cmp	r1, #3
 2289              	.LBE1533:
 259:Polyphony.cpp ****     if (voice_idx >= 0 && voice_idx < NUM_VOICES && voice_active_[voice_idx]) {
 2290              		.loc 1 259 53 is_stmt 0 view .LVU696
 2291 0002 73B5     		push	{r0, r1, r4, r5, r6, lr}
 2292              		.cfi_def_cfa_offset 24
 2293              		.cfi_offset 4, -16
 2294              		.cfi_offset 5, -12
 2295              		.cfi_offset 6, -8
 2296              		.cfi_offset 14, -4
 259:Polyphony.cpp ****     if (voice_idx >= 0 && voice_idx < NUM_VOICES && voice_active_[voice_idx]) {
 2297              		.loc 1 259 53 view .LVU697
 2298 0004 0446     		mov	r4, r0
 2299 0006 0D46     		mov	r5, r1
 2300              	.LBB1534:
 2301              		.loc 1 260 5 view .LVU698
 2302 0008 27D8     		bhi	.L94
 2303              		.loc 1 260 76 discriminator 1 view .LVU699
 2304 000a 4218     		adds	r2, r0, r1
 2305 000c 43F61013 		movw	r3, #14608
 2306              		.loc 1 260 50 discriminator 1 view .LVU700
 2307 0010 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2308 0012 13B3     		cbz	r3, .L94
 2309              	.LVL124:
 2310              		.loc 1 260 50 discriminator 1 view .LVU701
 2311              	.LBE1534:
 2312              	.LBB1535:
 2313              	.LBI1535:
 259:Polyphony.cpp ****     if (voice_idx >= 0 && voice_idx < NUM_VOICES && voice_active_[voice_idx]) {
 2314              		.loc 1 259 6 is_stmt 1 view .LVU702
 2315              	.LBB1536:
 261:Polyphony.cpp ****         bool percussive_engine = (patches_[voice_idx].engine > 7);
 2316              		.loc 1 261 9 view .LVU703
 2317              		.loc 1 261 55 is_stmt 0 view .LVU704
 2318 0014 2823     		movs	r3, #40
 2319 0016 43F2DC62 		movw	r2, #14044
 2320 001a 03FB0103 		mla	r3, r3, r1, r0
 2321 001e 9E58     		ldr	r6, [r3, r2]
 2322              	.LVL125:
 262:Polyphony.cpp ****         if (!percussive_engine) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 104


 2323              		.loc 1 262 9 is_stmt 1 view .LVU705
 2324 0020 072E     		cmp	r6, #7
 2325 0022 0ADC     		bgt	.L98
 263:Polyphony.cpp ****             voice_envelopes_[voice_idx].Reset();
 2326              		.loc 1 263 13 view .LVU706
 2327              		.loc 1 263 46 is_stmt 0 view .LVU707
 2328 0024 4420     		movs	r0, #68
 2329              	.LVL126:
 2330              		.loc 1 263 46 view .LVU708
 2331 0026 00FB0140 		mla	r0, r0, r1, r4
 2332 002a 00F56050 		add	r0, r0, #14336
 2333 002e 0190     		str	r0, [sp, #4]
 2334 0030 FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 2335              	.LVL127:
 264:Polyphony.cpp ****             voice_envelopes_[voice_idx].Trigger();
 2336              		.loc 1 264 13 is_stmt 1 view .LVU709
 2337              		.loc 1 264 48 is_stmt 0 view .LVU710
 2338 0034 0198     		ldr	r0, [sp, #4]
 2339 0036 FFF7FEFF 		bl	_ZN13VoiceEnvelope7TriggerEv
 2340              	.LVL128:
 2341              	.L98:
 265:Polyphony.cpp ****         }
 266:Polyphony.cpp **** 
 267:Polyphony.cpp ****         modulations_[voice_idx].trigger = 1.0f;
 2342              		.loc 1 267 9 is_stmt 1 view .LVU711
 2343              		.loc 1 267 41 is_stmt 0 view .LVU712
 2344 003a 2821     		movs	r1, #40
 2345 003c 4FF07E52 		mov	r2, #1065353216
 268:Polyphony.cpp ****         if(percussive_engine) {
 2346              		.loc 1 268 9 view .LVU713
 2347 0040 072E     		cmp	r6, #7
 267:Polyphony.cpp ****         if(percussive_engine) {
 2348              		.loc 1 267 41 view .LVU714
 2349 0042 01FB0544 		mla	r4, r1, r5, r4
 2350              	.LVL129:
 267:Polyphony.cpp ****         if(percussive_engine) {
 2351              		.loc 1 267 41 view .LVU715
 2352 0046 04F55D53 		add	r3, r4, #14144
 2353 004a 9A63     		str	r2, [r3, #56]	@ float
 2354 004c 03F13803 		add	r3, r3, #56
 2355              		.loc 1 268 9 is_stmt 1 view .LVU716
 269:Polyphony.cpp ****             modulations_[voice_idx].trigger_patched = true;
 2356              		.loc 1 269 13 view .LVU717
 2357              		.loc 1 269 53 is_stmt 0 view .LVU718
 2358 0050 C2BF     		ittt	gt
 2359 0052 0122     		movgt	r2, #1
 2360 0054 43F28373 		movwgt	r3, #14211
 2361 0058 E254     		strbgt	r2, [r4, r3]
 2362              	.LVL130:
 2363              	.L94:
 2364              		.loc 1 269 53 view .LVU719
 2365              	.LBE1536:
 2366              	.LBE1535:
 270:Polyphony.cpp ****         }
 271:Polyphony.cpp ****     }
 272:Polyphony.cpp **** }
 2367              		.loc 1 272 1 view .LVU720
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 105


 2368 005a 02B0     		add	sp, sp, #8
 2369              		.cfi_def_cfa_offset 16
 2370              		@ sp needed
 2371 005c 70BD     		pop	{r4, r5, r6, pc}
 2372              		.loc 1 272 1 view .LVU721
 2373              		.cfi_endproc
 2374              	.LFE5860:
 2376              		.section	.text._ZN15PolyphonyEngine15PrepVoiceParamsERKNS_16RenderParametersE,"ax",%progbits
 2377              		.align	1
 2378              		.global	_ZN15PolyphonyEngine15PrepVoiceParamsERKNS_16RenderParametersE
 2379              		.syntax unified
 2380              		.thumb
 2381              		.thumb_func
 2383              	_ZN15PolyphonyEngine15PrepVoiceParamsERKNS_16RenderParametersE:
 2384              	.LVL131:
 2385              	.LFB5854:
 131:Polyphony.cpp ****     bool percussive_engine = (params.engine_index > 7);
 2386              		.loc 1 131 71 is_stmt 1 view -0
 2387              		.cfi_startproc
 2388              		@ args = 0, pretend = 0, frame = 32
 2389              		@ frame_needed = 0, uses_anonymous_args = 0
 132:Polyphony.cpp **** 
 2390              		.loc 1 132 5 view .LVU723
 132:Polyphony.cpp **** 
 2391              		.loc 1 132 38 is_stmt 0 view .LVU724
 2392 0000 0B68     		ldr	r3, [r1]
 132:Polyphony.cpp **** 
 2393              		.loc 1 132 10 view .LVU725
 2394 0002 072B     		cmp	r3, #7
 2395 0004 CCBF     		ite	gt
 2396 0006 0123     		movgt	r3, #1
 2397 0008 0023     		movle	r3, #0
 131:Polyphony.cpp ****     bool percussive_engine = (params.engine_index > 7);
 2398              		.loc 1 131 71 view .LVU726
 2399 000a 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2400              		.cfi_def_cfa_offset 36
 2401              		.cfi_offset 4, -36
 2402              		.cfi_offset 5, -32
 2403              		.cfi_offset 6, -28
 2404              		.cfi_offset 7, -24
 2405              		.cfi_offset 8, -20
 2406              		.cfi_offset 9, -16
 2407              		.cfi_offset 10, -12
 2408              		.cfi_offset 11, -8
 2409              		.cfi_offset 14, -4
 2410 000e 0546     		mov	r5, r0
 2411 0010 0C46     		mov	r4, r1
 2412 0012 2DED088B 		vpush.64	{d8, d9, d10, d11}
 2413              		.cfi_def_cfa_offset 68
 2414              		.cfi_offset 80, -68
 2415              		.cfi_offset 81, -64
 2416              		.cfi_offset 82, -60
 2417              		.cfi_offset 83, -56
 2418              		.cfi_offset 84, -52
 2419              		.cfi_offset 85, -48
 2420              		.cfi_offset 86, -44
 2421              		.cfi_offset 87, -40
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 106


 132:Polyphony.cpp **** 
 2422              		.loc 1 132 10 view .LVU727
 2423 0016 0BEE103A 		vmov	s22, r3	@ int
 2424              	.LVL132:
 134:Polyphony.cpp ****     float release_value = 0.0f;
 2425              		.loc 1 134 5 is_stmt 1 view .LVU728
 135:Polyphony.cpp ****     if (!percussive_engine) {
 2426              		.loc 1 135 5 view .LVU729
 136:Polyphony.cpp ****         float attack_raw = params.env_attack_val; 
 2427              		.loc 1 136 5 view .LVU730
 131:Polyphony.cpp ****     bool percussive_engine = (params.engine_index > 7);
 2428              		.loc 1 131 71 is_stmt 0 view .LVU731
 2429 001a 8BB0     		sub	sp, sp, #44
 2430              		.cfi_def_cfa_offset 112
 2431              	.LBB1537:
 136:Polyphony.cpp ****         float attack_raw = params.env_attack_val; 
 2432              		.loc 1 136 5 view .LVU732
 2433 001c 00F38780 		bgt	.L115
 2434              	.LBB1538:
 137:Polyphony.cpp ****         if (attack_raw < 0.2f) {
 2435              		.loc 1 137 9 is_stmt 1 view .LVU733
 137:Polyphony.cpp ****         if (attack_raw < 0.2f) {
 2436              		.loc 1 137 15 is_stmt 0 view .LVU734
 2437 0020 91ED080A 		vldr.32	s0, [r1, #32]
 2438              	.LVL133:
 138:Polyphony.cpp ****             attack_value = attack_raw * (attack_raw * 0.5f);
 2439              		.loc 1 138 9 is_stmt 1 view .LVU735
 2440 0024 DFED547A 		vldr.32	s15, .L123
 2441 0028 B4EEE70A 		vcmpe.f32	s0, s15
 143:Polyphony.cpp ****     }
 2442              		.loc 1 143 32 is_stmt 0 view .LVU736
 2443 002c D1ED097A 		vldr.32	s15, [r1, #36]
 143:Polyphony.cpp ****     }
 2444              		.loc 1 143 48 view .LVU737
 2445 0030 67EEA78A 		vmul.f32	s17, s15, s15
 138:Polyphony.cpp ****             attack_value = attack_raw * (attack_raw * 0.5f);
 2446              		.loc 1 138 9 view .LVU738
 2447 0034 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 139:Polyphony.cpp ****         } else {
 2448              		.loc 1 139 13 is_stmt 1 view .LVU739
 143:Polyphony.cpp ****     }
 2449              		.loc 1 143 23 is_stmt 0 view .LVU740
 2450 0038 68EEA78A 		vmul.f32	s17, s17, s15
 139:Polyphony.cpp ****         } else {
 2451              		.loc 1 139 53 view .LVU741
 2452 003c 4ABF     		itet	mi
 2453 003e B6EE008A 		vmovmi.f32	s16, #5.0e-1
 141:Polyphony.cpp ****         }
 2454              		.loc 1 141 39 view .LVU742
 2455 0042 20EE008A 		vmulpl.f32	s16, s0, s0
 139:Polyphony.cpp ****         } else {
 2456              		.loc 1 139 53 view .LVU743
 2457 0046 20EE088A 		vmulmi.f32	s16, s0, s16
 141:Polyphony.cpp ****         }
 2458              		.loc 1 141 13 is_stmt 1 view .LVU744
 141:Polyphony.cpp ****         }
 2459              		.loc 1 141 26 is_stmt 0 view .LVU745
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 107


 2460 004a 28EE008A 		vmul.f32	s16, s16, s0
 2461              	.LVL134:
 143:Polyphony.cpp ****     }
 2462              		.loc 1 143 9 is_stmt 1 view .LVU746
 2463              	.L103:
 143:Polyphony.cpp ****     }
 2464              		.loc 1 143 9 is_stmt 0 view .LVU747
 2465              	.LBE1538:
 2466              	.LBE1537:
 146:Polyphony.cpp ****     float current_global_harmonics = params.harm_knob_val;
 2467              		.loc 1 146 5 is_stmt 1 view .LVU748
 146:Polyphony.cpp ****     float current_global_harmonics = params.harm_knob_val;
 2468              		.loc 1 146 11 is_stmt 0 view .LVU749
 2469 004e F3EE087A 		vmov.f32	s15, #2.4e+1
 2470 0052 94ED047A 		vldr.32	s14, [r4, #16]
 2471 0056 BAEE089A 		vmov.f32	s18, #-1.2e+1
 2472 005a 05F56458 		add	r8, r5, #14592
 2473 005e 05F56459 		add	r9, r5, #14592
 147:Polyphony.cpp ****     float current_global_morph = params.morph_knob_val;
 2474              		.loc 1 147 11 view .LVU750
 2475 0062 D4ED059A 		vldr.32	s19, [r4, #20]
 148:Polyphony.cpp ****     float current_global_timbre = params.timbre_knob_val;
 2476              		.loc 1 148 11 view .LVU751
 2477 0066 94ED06AA 		vldr.32	s20, [r4, #24]
 2478 006a 05F55B56 		add	r6, r5, #14016
 146:Polyphony.cpp ****     float current_global_harmonics = params.harm_knob_val;
 2479              		.loc 1 146 11 view .LVU752
 2480 006e A7EE279A 		vfma.f32	s18, s14, s15
 2481              	.LVL135:
 147:Polyphony.cpp ****     float current_global_morph = params.morph_knob_val;
 2482              		.loc 1 147 5 is_stmt 1 view .LVU753
 148:Polyphony.cpp ****     float current_global_timbre = params.timbre_knob_val;
 2483              		.loc 1 148 5 view .LVU754
 149:Polyphony.cpp **** 
 2484              		.loc 1 149 5 view .LVU755
 149:Polyphony.cpp **** 
 2485              		.loc 1 149 11 is_stmt 0 view .LVU756
 2486 0072 D4ED07AA 		vldr.32	s21, [r4, #28]
 2487              	.LVL136:
 151:Polyphony.cpp ****         PatchParams patch_params;
 2488              		.loc 1 151 5 is_stmt 1 view .LVU757
 151:Polyphony.cpp ****         PatchParams patch_params;
 2489              		.loc 1 151 5 is_stmt 0 view .LVU758
 2490 0076 08F12408 		add	r8, r8, #36
 2491 007a 09F11409 		add	r9, r9, #20
 2492 007e 05F5605A 		add	r10, r5, #14336
 2493              	.LBB1539:
 151:Polyphony.cpp ****         PatchParams patch_params;
 2494              		.loc 1 151 14 view .LVU759
 2495 0082 0027     		movs	r7, #0
 2496              	.LVL137:
 2497              	.L110:
 151:Polyphony.cpp ****         PatchParams patch_params;
 2498              		.loc 1 151 23 is_stmt 1 discriminator 1 view .LVU760
 151:Polyphony.cpp ****         PatchParams patch_params;
 2499              		.loc 1 151 33 is_stmt 0 discriminator 1 view .LVU761
 2500 0084 D4F808B0 		ldr	fp, [r4, #8]
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 108


 151:Polyphony.cpp ****         PatchParams patch_params;
 2501              		.loc 1 151 23 discriminator 1 view .LVU762
 2502 0088 BB45     		cmp	fp, r7
 2503 008a 55DD     		ble	.L116
 2504              	.LBB1540:
 152:Polyphony.cpp ****         patch_params.engine_idx = params.engine_index;
 2505              		.loc 1 152 9 is_stmt 1 view .LVU763
 153:Polyphony.cpp ****         patch_params.note = voice_note_[v];
 2506              		.loc 1 153 9 view .LVU764
 153:Polyphony.cpp ****         patch_params.note = voice_note_[v];
 2507              		.loc 1 153 33 is_stmt 0 view .LVU765
 2508 008c 2368     		ldr	r3, [r4]
 2509 008e 06F1A00B 		add	fp, r6, #160
 162:Polyphony.cpp **** 
 2510              		.loc 1 162 26 view .LVU766
 2511 0092 02AA     		add	r2, sp, #8
 2512 0094 3146     		mov	r1, r6
 153:Polyphony.cpp ****         patch_params.note = voice_note_[v];
 2513              		.loc 1 153 33 view .LVU767
 2514 0096 0293     		str	r3, [sp, #8]
 154:Polyphony.cpp ****         patch_params.global_pitch_offset = global_pitch_offset;
 2515              		.loc 1 154 9 is_stmt 1 view .LVU768
 162:Polyphony.cpp **** 
 2516              		.loc 1 162 26 is_stmt 0 view .LVU769
 2517 0098 2846     		mov	r0, r5
 154:Polyphony.cpp ****         patch_params.global_pitch_offset = global_pitch_offset;
 2518              		.loc 1 154 42 view .LVU770
 2519 009a 59F8043B 		ldr	r3, [r9], #4	@ float
 164:Polyphony.cpp ****             modulations_[v],
 2520              		.loc 1 164 24 view .LVU771
 2521 009e F0EE680A 		vmov.f32	s1, s17
 2522 00a2 B0EE480A 		vmov.f32	s0, s16
 155:Polyphony.cpp ****         patch_params.harmonics = current_global_harmonics;
 2523              		.loc 1 155 42 view .LVU772
 2524 00a6 8DED049A 		vstr.32	s18, [sp, #16]
 154:Polyphony.cpp ****         patch_params.global_pitch_offset = global_pitch_offset;
 2525              		.loc 1 154 27 view .LVU773
 2526 00aa 0393     		str	r3, [sp, #12]	@ float
 155:Polyphony.cpp ****         patch_params.harmonics = current_global_harmonics;
 2527              		.loc 1 155 9 is_stmt 1 view .LVU774
 156:Polyphony.cpp ****         patch_params.timbre = current_global_timbre;
 2528              		.loc 1 156 9 view .LVU775
 159:Polyphony.cpp ****         patch_params.decay = params.env_release_val;
 2529              		.loc 1 159 29 is_stmt 0 view .LVU776
 2530 00ac 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 156:Polyphony.cpp ****         patch_params.timbre = current_global_timbre;
 2531              		.loc 1 156 32 view .LVU777
 2532 00ae CDED059A 		vstr.32	s19, [sp, #20]
 157:Polyphony.cpp ****         patch_params.morph = current_global_morph;
 2533              		.loc 1 157 9 is_stmt 1 view .LVU778
 159:Polyphony.cpp ****         patch_params.decay = params.env_release_val;
 2534              		.loc 1 159 29 is_stmt 0 view .LVU779
 2535 00b2 8DF82030 		strb	r3, [sp, #32]
 160:Polyphony.cpp ****         
 2536              		.loc 1 160 28 view .LVU780
 2537 00b6 636A     		ldr	r3, [r4, #36]	@ float
 157:Polyphony.cpp ****         patch_params.morph = current_global_morph;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 109


 2538              		.loc 1 157 29 view .LVU781
 2539 00b8 CDED06AA 		vstr.32	s21, [sp, #24]
 158:Polyphony.cpp ****         patch_params.arp_on = params.arp_on;
 2540              		.loc 1 158 9 is_stmt 1 view .LVU782
 160:Polyphony.cpp ****         
 2541              		.loc 1 160 28 is_stmt 0 view .LVU783
 2542 00bc 0993     		str	r3, [sp, #36]	@ float
 158:Polyphony.cpp ****         patch_params.arp_on = params.arp_on;
 2543              		.loc 1 158 28 view .LVU784
 2544 00be 8DED07AA 		vstr.32	s20, [sp, #28]
 159:Polyphony.cpp ****         patch_params.decay = params.env_release_val;
 2545              		.loc 1 159 9 is_stmt 1 view .LVU785
 160:Polyphony.cpp ****         
 2546              		.loc 1 160 9 view .LVU786
 162:Polyphony.cpp **** 
 2547              		.loc 1 162 9 view .LVU787
 162:Polyphony.cpp **** 
 2548              		.loc 1 162 26 is_stmt 0 view .LVU788
 2549 00c2 FFF7FEFF 		bl	_ZN15PolyphonyEngine17UpdatePatchParamsERN6plaits5PatchERK11PatchParams
 2550              	.LVL138:
 164:Polyphony.cpp ****             modulations_[v],
 2551              		.loc 1 164 9 is_stmt 1 view .LVU789
 164:Polyphony.cpp ****             modulations_[v],
 2552              		.loc 1 164 24 is_stmt 0 view .LVU790
 2553 00c6 1BEE103A 		vmov	r3, s22	@ int
 2554 00ca 5246     		mov	r2, r10
 2555 00cc 5946     		mov	r1, fp
 2556 00ce 2846     		mov	r0, r5
 2557 00d0 FFF7FEFF 		bl	_ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff
 2558              	.LVL139:
 172:Polyphony.cpp ****             UpdateMonoTrigger(
 2559              		.loc 1 172 9 is_stmt 1 view .LVU791
 2560 00d4 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2561 00d6 63B9     		cbnz	r3, .L108
 2562              	.LVL140:
 172:Polyphony.cpp ****             UpdateMonoTrigger(
 2563              		.loc 1 172 31 is_stmt 0 discriminator 1 view .LVU792
 2564 00d8 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 2565 00da 53B9     		cbnz	r3, .L108
 173:Polyphony.cpp ****                 modulations_[v],
 2566              		.loc 1 173 13 is_stmt 1 view .LVU793
 173:Polyphony.cpp ****                 modulations_[v],
 2567              		.loc 1 173 30 is_stmt 0 view .LVU794
 2568 00dc 05F56452 		add	r2, r5, #14592
 2569 00e0 05F54053 		add	r3, r5, #12288
 2570 00e4 2846     		mov	r0, r5
 2571 00e6 1032     		adds	r2, r2, #16
 2572 00e8 93F8AC3A 		ldrb	r3, [r3, #2732]	@ zero_extendqisi2
 2573 00ec 3A44     		add	r2, r2, r7
 2574 00ee FFF7FEFF 		bl	_ZN15PolyphonyEngine17UpdateMonoTriggerERN6plaits11ModulationsERbb
 2575              	.LVL141:
 2576              	.L108:
 180:Polyphony.cpp **** 
 2577              		.loc 1 180 9 is_stmt 1 view .LVU795
 180:Polyphony.cpp **** 
 2578              		.loc 1 180 26 is_stmt 0 view .LVU796
 2579 00f2 1023     		movs	r3, #16
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 110


 2580 00f4 4FF45B60 		mov	r0, #3504
 2581 00f8 5A46     		mov	r2, fp
 2582 00fa 3146     		mov	r1, r6
 2583 00fc 0093     		str	r3, [sp]
 2584 00fe 4346     		mov	r3, r8
 2585 0100 00FB0750 		mla	r0, r0, r7, r5
 2586 0104 FFF7FEFF 		bl	_ZN6plaits5Voice6RenderERKNS_5PatchERKNS_11ModulationsEPNS0_5FrameEj
 2587              	.LVL142:
 182:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 2588              		.loc 1 182 9 is_stmt 1 view .LVU797
 2589 0108 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2590 010a 4BB9     		cbnz	r3, .L109
 182:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 2591              		.loc 1 182 31 is_stmt 0 discriminator 1 view .LVU798
 2592 010c 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 2593 010e 3BB9     		cbnz	r3, .L109
 182:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 2594              		.loc 1 182 49 discriminator 2 view .LVU799
 2595 0110 F369     		ldr	r3, [r6, #28]
 2596 0112 072B     		cmp	r3, #7
 2597 0114 04DD     		ble	.L109
 182:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 2598              		.loc 1 182 77 discriminator 3 view .LVU800
 2599 0116 1FB9     		cbnz	r7, .L109
 183:Polyphony.cpp ****         }
 2600              		.loc 1 183 13 is_stmt 1 view .LVU801
 183:Polyphony.cpp ****         }
 2601              		.loc 1 183 37 is_stmt 0 view .LVU802
 2602 0118 05F55D53 		add	r3, r5, #14144
 2603 011c 0022     		movs	r2, #0
 2604 011e 9A63     		str	r2, [r3, #56]	@ float
 2605              	.L109:
 2606              	.LBE1540:
 151:Polyphony.cpp ****         PatchParams patch_params;
 2607              		.loc 1 151 5 is_stmt 1 discriminator 2 view .LVU803
 2608 0120 0137     		adds	r7, r7, #1
 2609              	.LVL143:
 151:Polyphony.cpp ****         PatchParams patch_params;
 2610              		.loc 1 151 5 is_stmt 0 discriminator 2 view .LVU804
 2611 0122 2836     		adds	r6, r6, #40
 2612 0124 08F14008 		add	r8, r8, #64
 2613 0128 0AF1440A 		add	r10, r10, #68
 2614 012c AAE7     		b	.L110
 2615              	.LVL144:
 2616              	.L115:
 151:Polyphony.cpp ****         PatchParams patch_params;
 2617              		.loc 1 151 5 discriminator 2 view .LVU805
 2618              	.LBE1539:
 135:Polyphony.cpp ****     if (!percussive_engine) {
 2619              		.loc 1 135 11 view .LVU806
 2620 012e DFED138A 		vldr.32	s17, .L123+4
 134:Polyphony.cpp ****     float release_value = 0.0f;
 2621              		.loc 1 134 11 view .LVU807
 2622 0132 B0EE688A 		vmov.f32	s16, s17
 2623 0136 8AE7     		b	.L103
 2624              	.LVL145:
 2625              	.L116:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 111


 2626              	.LBB1541:
 151:Polyphony.cpp ****         PatchParams patch_params;
 2627              		.loc 1 151 33 view .LVU808
 2628 0138 5C46     		mov	r4, fp
 2629              	.LVL146:
 2630              	.L107:
 151:Polyphony.cpp ****         PatchParams patch_params;
 2631              		.loc 1 151 33 view .LVU809
 2632              	.LBE1541:
 2633              	.LBB1542:
 188:Polyphony.cpp ****          SilenceVoice(v);
 2634              		.loc 1 188 38 is_stmt 1 discriminator 3 view .LVU810
 2635 013a 032C     		cmp	r4, #3
 2636 013c 05DC     		bgt	.L111
 189:Polyphony.cpp ****     }
 2637              		.loc 1 189 10 discriminator 2 view .LVU811
 189:Polyphony.cpp ****     }
 2638              		.loc 1 189 22 is_stmt 0 discriminator 2 view .LVU812
 2639 013e 2146     		mov	r1, r4
 2640 0140 2846     		mov	r0, r5
 188:Polyphony.cpp ****          SilenceVoice(v);
 2641              		.loc 1 188 5 discriminator 2 view .LVU813
 2642 0142 0134     		adds	r4, r4, #1
 2643              	.LVL147:
 189:Polyphony.cpp ****     }
 2644              		.loc 1 189 22 discriminator 2 view .LVU814
 2645 0144 FFF7FEFF 		bl	_ZN15PolyphonyEngine12SilenceVoiceEi
 2646              	.LVL148:
 188:Polyphony.cpp ****          SilenceVoice(v);
 2647              		.loc 1 188 5 is_stmt 1 discriminator 2 view .LVU815
 188:Polyphony.cpp ****          SilenceVoice(v);
 2648              		.loc 1 188 5 is_stmt 0 discriminator 2 view .LVU816
 2649 0148 F7E7     		b	.L107
 2650              	.L111:
 188:Polyphony.cpp ****          SilenceVoice(v);
 2651              		.loc 1 188 5 discriminator 2 view .LVU817
 2652              	.LBE1542:
 192:Polyphony.cpp ****         for(int v = 0; v < effective_voices; ++v) {
 2653              		.loc 1 192 5 is_stmt 1 view .LVU818
 2654              	.LBB1543:
 192:Polyphony.cpp ****         for(int v = 0; v < effective_voices; ++v) {
 2655              		.loc 1 192 8 is_stmt 0 view .LVU819
 2656 014a 05F54056 		add	r6, r5, #12288
 192:Polyphony.cpp ****         for(int v = 0; v < effective_voices; ++v) {
 2657              		.loc 1 192 5 view .LVU820
 2658 014e 96F8AC3A 		ldrb	r3, [r6, #2732]	@ zero_extendqisi2
 2659 0152 5BB1     		cbz	r3, .L102
 2660              	.LBB1544:
 2661              	.LBB1545:
 193:Polyphony.cpp ****             RetriggerVoice(v);
 2662              		.loc 1 193 17 view .LVU821
 2663 0154 0024     		movs	r4, #0
 2664              	.LVL149:
 2665              	.L114:
 193:Polyphony.cpp ****             RetriggerVoice(v);
 2666              		.loc 1 193 26 is_stmt 1 discriminator 3 view .LVU822
 2667 0156 A345     		cmp	fp, r4
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 112


 2668 0158 05DD     		ble	.L113
 194:Polyphony.cpp ****         }
 2669              		.loc 1 194 13 discriminator 2 view .LVU823
 194:Polyphony.cpp ****         }
 2670              		.loc 1 194 27 is_stmt 0 discriminator 2 view .LVU824
 2671 015a 2146     		mov	r1, r4
 2672 015c 2846     		mov	r0, r5
 193:Polyphony.cpp ****             RetriggerVoice(v);
 2673              		.loc 1 193 9 discriminator 2 view .LVU825
 2674 015e 0134     		adds	r4, r4, #1
 2675              	.LVL150:
 194:Polyphony.cpp ****         }
 2676              		.loc 1 194 27 discriminator 2 view .LVU826
 2677 0160 FFF7FEFF 		bl	_ZN15PolyphonyEngine14RetriggerVoiceEi
 2678              	.LVL151:
 193:Polyphony.cpp ****             RetriggerVoice(v);
 2679              		.loc 1 193 9 is_stmt 1 discriminator 2 view .LVU827
 193:Polyphony.cpp ****             RetriggerVoice(v);
 2680              		.loc 1 193 9 is_stmt 0 discriminator 2 view .LVU828
 2681 0164 F7E7     		b	.L114
 2682              	.L113:
 193:Polyphony.cpp ****             RetriggerVoice(v);
 2683              		.loc 1 193 9 discriminator 2 view .LVU829
 2684              	.LBE1545:
 196:Polyphony.cpp ****     }
 2685              		.loc 1 196 9 is_stmt 1 view .LVU830
 196:Polyphony.cpp ****     }
 2686              		.loc 1 196 30 is_stmt 0 view .LVU831
 2687 0166 0023     		movs	r3, #0
 2688 0168 86F8AC3A 		strb	r3, [r6, #2732]
 2689              	.LVL152:
 2690              	.L102:
 196:Polyphony.cpp ****     }
 2691              		.loc 1 196 30 view .LVU832
 2692              	.LBE1544:
 2693              	.LBE1543:
 198:Polyphony.cpp **** 
 2694              		.loc 1 198 1 view .LVU833
 2695 016c 0BB0     		add	sp, sp, #44
 2696              		.cfi_def_cfa_offset 68
 2697              		@ sp needed
 2698 016e BDEC088B 		vldm	sp!, {d8-d11}
 2699              		.cfi_restore 86
 2700              		.cfi_restore 87
 2701              		.cfi_restore 84
 2702              		.cfi_restore 85
 2703              		.cfi_restore 82
 2704              		.cfi_restore 83
 2705              		.cfi_restore 80
 2706              		.cfi_restore 81
 2707              		.cfi_def_cfa_offset 36
 2708              	.LVL153:
 198:Polyphony.cpp **** 
 2709              		.loc 1 198 1 view .LVU834
 2710 0172 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2711              	.LVL154:
 2712              	.L124:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 113


 198:Polyphony.cpp **** 
 2713              		.loc 1 198 1 view .LVU835
 2714 0176 00BF     		.align	2
 2715              	.L123:
 2716 0178 CDCC4C3E 		.word	1045220557
 2717 017c 00000000 		.word	0
 2718              		.cfi_endproc
 2719              	.LFE5854:
 2721              		.section	.text._ZN15PolyphonyEngine11RenderBlockERKNS_16RenderParametersE,"ax",%progbits
 2722              		.align	1
 2723              		.global	_ZN15PolyphonyEngine11RenderBlockERKNS_16RenderParametersE
 2724              		.syntax unified
 2725              		.thumb
 2726              		.thumb_func
 2728              	_ZN15PolyphonyEngine11RenderBlockERKNS_16RenderParametersE:
 2729              	.LVL155:
 2730              	.LFB5850:
  81:Polyphony.cpp ****     PrepVoiceParams(params);
 2731              		.loc 1 81 67 is_stmt 1 view -0
 2732              		.cfi_startproc
 2733              		@ args = 0, pretend = 0, frame = 0
 2734              		@ frame_needed = 0, uses_anonymous_args = 0
  82:Polyphony.cpp ****     
 2735              		.loc 1 82 5 view .LVU837
  81:Polyphony.cpp ****     PrepVoiceParams(params);
 2736              		.loc 1 81 67 is_stmt 0 view .LVU838
 2737 0000 38B5     		push	{r3, r4, r5, lr}
 2738              		.cfi_def_cfa_offset 16
 2739              		.cfi_offset 3, -16
 2740              		.cfi_offset 4, -12
 2741              		.cfi_offset 5, -8
 2742              		.cfi_offset 14, -4
  81:Polyphony.cpp ****     PrepVoiceParams(params);
 2743              		.loc 1 81 67 view .LVU839
 2744 0002 0D46     		mov	r5, r1
 2745 0004 0446     		mov	r4, r0
  82:Polyphony.cpp ****     
 2746              		.loc 1 82 20 view .LVU840
 2747 0006 FFF7FEFF 		bl	_ZN15PolyphonyEngine15PrepVoiceParamsERKNS_16RenderParametersE
 2748              	.LVL156:
  84:Polyphony.cpp **** 
 2749              		.loc 1 84 5 is_stmt 1 view .LVU841
  84:Polyphony.cpp **** 
 2750              		.loc 1 84 21 is_stmt 0 view .LVU842
 2751 000a 2979     		ldrb	r1, [r5, #4]	@ zero_extendqisi2
 2752 000c 2046     		mov	r0, r4
 2753 000e FFF7FEFF 		bl	_ZN15PolyphonyEngine16ProcessEnvelopesEb
 2754              	.LVL157:
  86:Polyphony.cpp ****         modulations_[0].trigger = 0.0f;
 2755              		.loc 1 86 5 is_stmt 1 view .LVU843
 2756 0012 2B7B     		ldrb	r3, [r5, #12]	@ zero_extendqisi2
 2757 0014 43B1     		cbz	r3, .L125
  87:Polyphony.cpp ****         modulations_[0].trigger_patched = false; 
 2758              		.loc 1 87 9 view .LVU844
  87:Polyphony.cpp ****         modulations_[0].trigger_patched = false; 
 2759              		.loc 1 87 33 is_stmt 0 view .LVU845
 2760 0016 04F54054 		add	r4, r4, #12288
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 114


 2761              	.LVL158:
  87:Polyphony.cpp ****         modulations_[0].trigger_patched = false; 
 2762              		.loc 1 87 33 view .LVU846
 2763 001a 0022     		movs	r2, #0
 2764 001c 04F5EF63 		add	r3, r4, #1912
 2765 0020 1A60     		str	r2, [r3]	@ float
  88:Polyphony.cpp ****     }
 2766              		.loc 1 88 9 is_stmt 1 view .LVU847
  88:Polyphony.cpp ****     }
 2767              		.loc 1 88 41 is_stmt 0 view .LVU848
 2768 0022 0023     		movs	r3, #0
 2769 0024 84F88337 		strb	r3, [r4, #1923]
 2770              	.LVL159:
 2771              	.L125:
  90:Polyphony.cpp **** 
 2772              		.loc 1 90 1 view .LVU849
 2773 0028 38BD     		pop	{r3, r4, r5, pc}
  90:Polyphony.cpp **** 
 2774              		.loc 1 90 1 view .LVU850
 2775              		.cfi_endproc
 2776              	.LFE5850:
 2778              		.section	.text._ZN15PolyphonyEngine11ClearVoicesEv,"ax",%progbits
 2779              		.align	1
 2780              		.global	_ZN15PolyphonyEngine11ClearVoicesEv
 2781              		.syntax unified
 2782              		.thumb
 2783              		.thumb_func
 2785              	_ZN15PolyphonyEngine11ClearVoicesEv:
 2786              	.LVL160:
 2787              	.LFB5861:
 273:Polyphony.cpp **** 
 274:Polyphony.cpp **** void PolyphonyEngine::ClearVoices() {
 2788              		.loc 1 274 37 is_stmt 1 view -0
 2789              		.cfi_startproc
 2790              		@ args = 0, pretend = 0, frame = 0
 2791              		@ frame_needed = 0, uses_anonymous_args = 0
 275:Polyphony.cpp ****     for (int v = 0; v < NUM_VOICES; ++v) {
 2792              		.loc 1 275 5 view .LVU852
 2793              	.LBB1546:
 2794              		.loc 1 275 23 view .LVU853
 2795              	.LBE1546:
 274:Polyphony.cpp ****     for (int v = 0; v < NUM_VOICES; ++v) {
 2796              		.loc 1 274 37 is_stmt 0 view .LVU854
 2797 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2798              		.cfi_def_cfa_offset 24
 2799              		.cfi_offset 4, -24
 2800              		.cfi_offset 5, -20
 2801              		.cfi_offset 6, -16
 2802              		.cfi_offset 7, -12
 2803              		.cfi_offset 8, -8
 2804              		.cfi_offset 14, -4
 2805 0004 00F56456 		add	r6, r0, #14592
 2806 0008 00F55D55 		add	r5, r0, #14144
 2807 000c 00F56454 		add	r4, r0, #14592
 2808 0010 00F56057 		add	r7, r0, #14336
 2809 0014 1036     		adds	r6, r6, #16
 2810 0016 3835     		adds	r5, r5, #56
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 115


 2811 0018 2434     		adds	r4, r4, #36
 2812 001a B046     		mov	r8, r6
 2813              	.LVL161:
 2814              	.L131:
 2815              	.LBB1547:
 276:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 2816              		.loc 1 276 9 is_stmt 1 discriminator 2 view .LVU855
 2817              		.loc 1 276 34 is_stmt 0 discriminator 2 view .LVU856
 2818 001c 3846     		mov	r0, r7
 275:Polyphony.cpp ****     for (int v = 0; v < NUM_VOICES; ++v) {
 2819              		.loc 1 275 23 discriminator 2 view .LVU857
 2820 001e 4437     		adds	r7, r7, #68
 2821              		.loc 1 276 34 discriminator 2 view .LVU858
 2822 0020 FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 2823              	.LVL162:
 277:Polyphony.cpp ****         voice_active_[v] = false;
 2824              		.loc 1 277 9 is_stmt 1 discriminator 2 view .LVU859
 2825              		.loc 1 277 26 is_stmt 0 discriminator 2 view .LVU860
 2826 0024 0021     		movs	r1, #0
 278:Polyphony.cpp ****         modulations_[v].trigger = 0.0f;
 2827              		.loc 1 278 33 discriminator 2 view .LVU861
 2828 0026 0023     		movs	r3, #0
 279:Polyphony.cpp ****         modulations_[v].trigger_patched = false;
 280:Polyphony.cpp ****         modulations_[v].level_patched = false; 
 281:Polyphony.cpp ****         memset(output_buffers_[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 2829              		.loc 1 281 15 discriminator 2 view .LVU862
 2830 0028 2046     		mov	r0, r4
 277:Polyphony.cpp ****         modulations_[v].trigger = 0.0f;
 2831              		.loc 1 277 26 discriminator 2 view .LVU863
 2832 002a 06F8011B 		strb	r1, [r6], #1
 2833              	.LVL163:
 278:Polyphony.cpp ****         modulations_[v].trigger = 0.0f;
 2834              		.loc 1 278 9 is_stmt 1 discriminator 2 view .LVU864
 2835              		.loc 1 281 15 is_stmt 0 discriminator 2 view .LVU865
 2836 002e 4022     		movs	r2, #64
 278:Polyphony.cpp ****         modulations_[v].trigger = 0.0f;
 2837              		.loc 1 278 33 discriminator 2 view .LVU866
 2838 0030 2B60     		str	r3, [r5]	@ float
 279:Polyphony.cpp ****         modulations_[v].trigger_patched = false;
 2839              		.loc 1 279 9 is_stmt 1 discriminator 2 view .LVU867
 275:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 2840              		.loc 1 275 23 is_stmt 0 discriminator 2 view .LVU868
 2841 0032 4034     		adds	r4, r4, #64
 279:Polyphony.cpp ****         modulations_[v].trigger_patched = false;
 2842              		.loc 1 279 41 discriminator 2 view .LVU869
 2843 0034 E972     		strb	r1, [r5, #11]
 280:Polyphony.cpp ****         memset(output_buffers_[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 2844              		.loc 1 280 9 is_stmt 1 discriminator 2 view .LVU870
 275:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 2845              		.loc 1 275 23 is_stmt 0 discriminator 2 view .LVU871
 2846 0036 2835     		adds	r5, r5, #40
 280:Polyphony.cpp ****         memset(output_buffers_[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 2847              		.loc 1 280 39 discriminator 2 view .LVU872
 2848 0038 05F81C1C 		strb	r1, [r5, #-28]
 2849              		.loc 1 281 9 is_stmt 1 discriminator 2 view .LVU873
 2850              		.loc 1 281 15 is_stmt 0 discriminator 2 view .LVU874
 2851 003c FFF7FEFF 		bl	memset
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 116


 2852              	.LVL164:
 275:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 2853              		.loc 1 275 5 is_stmt 1 discriminator 2 view .LVU875
 275:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 2854              		.loc 1 275 23 discriminator 2 view .LVU876
 2855 0040 4745     		cmp	r7, r8
 2856 0042 EBD1     		bne	.L131
 2857              	.LBE1547:
 282:Polyphony.cpp ****     }
 283:Polyphony.cpp **** }
 2858              		.loc 1 283 1 is_stmt 0 view .LVU877
 2859 0044 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2860              		.loc 1 283 1 view .LVU878
 2861              		.cfi_endproc
 2862              	.LFE5861:
 2864              		.section	.text._ZN15PolyphonyEngine10PolyToMonoEi,"ax",%progbits
 2865              		.align	1
 2866              		.global	_ZN15PolyphonyEngine10PolyToMonoEi
 2867              		.syntax unified
 2868              		.thumb
 2869              		.thumb_func
 2871              	_ZN15PolyphonyEngine10PolyToMonoEi:
 2872              	.LVL165:
 2873              	.LFB5862:
 284:Polyphony.cpp **** 
 285:Polyphony.cpp **** void PolyphonyEngine::PolyToMono(int source_voice_idx) {
 2874              		.loc 1 285 56 is_stmt 1 view -0
 2875              		.cfi_startproc
 2876              		@ args = 0, pretend = 0, frame = 0
 2877              		@ frame_needed = 0, uses_anonymous_args = 0
 286:Polyphony.cpp ****     if (source_voice_idx < 0 || source_voice_idx >= NUM_VOICES) return;
 2878              		.loc 1 286 5 view .LVU880
 2879 0000 0329     		cmp	r1, #3
 285:Polyphony.cpp ****     if (source_voice_idx < 0 || source_voice_idx >= NUM_VOICES) return;
 2880              		.loc 1 285 56 is_stmt 0 view .LVU881
 2881 0002 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2882              		.cfi_def_cfa_offset 40
 2883              		.cfi_offset 3, -40
 2884              		.cfi_offset 4, -36
 2885              		.cfi_offset 5, -32
 2886              		.cfi_offset 6, -28
 2887              		.cfi_offset 7, -24
 2888              		.cfi_offset 8, -20
 2889              		.cfi_offset 9, -16
 2890              		.cfi_offset 10, -12
 2891              		.cfi_offset 11, -8
 2892              		.cfi_offset 14, -4
 2893 0006 0446     		mov	r4, r0
 2894 0008 0E46     		mov	r6, r1
 2895 000a 2DED028B 		vpush.64	{d8}
 2896              		.cfi_def_cfa_offset 48
 2897              		.cfi_offset 80, -48
 2898              		.cfi_offset 81, -44
 2899              		.loc 1 286 5 view .LVU882
 2900 000e 61D8     		bhi	.L133
 2901 0010 00F56058 		add	r8, r0, #14336
 2902 0014 00F55D55 		add	r5, r0, #14144
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 117


 2903              	.LBB1552:
 2904              	.LBB1553:
 2905              	.LBB1554:
 287:Polyphony.cpp **** 
 288:Polyphony.cpp ****     for (int v = 0; v < NUM_VOICES; ++v) {
 2906              		.loc 1 288 14 view .LVU883
 2907 0018 0027     		movs	r7, #0
 2908 001a 3835     		adds	r5, r5, #56
 2909 001c C146     		mov	r9, r8
 2910              	.LVL166:
 2911              	.L136:
 289:Polyphony.cpp ****         if (v != source_voice_idx) {
 2912              		.loc 1 289 9 is_stmt 1 view .LVU884
 2913 001e BE42     		cmp	r6, r7
 2914 0020 0DD0     		beq	.L135
 290:Polyphony.cpp ****             voice_active_[v] = false;
 2915              		.loc 1 290 13 view .LVU885
 2916              		.loc 1 290 30 is_stmt 0 view .LVU886
 2917 0022 04F56453 		add	r3, r4, #14592
 2918 0026 4FF0000A 		mov	r10, #0
 291:Polyphony.cpp ****             voice_envelopes_[v].Reset();
 2919              		.loc 1 291 38 view .LVU887
 2920 002a 4046     		mov	r0, r8
 290:Polyphony.cpp ****             voice_active_[v] = false;
 2921              		.loc 1 290 30 view .LVU888
 2922 002c 1033     		adds	r3, r3, #16
 2923 002e 03F807A0 		strb	r10, [r3, r7]
 2924              		.loc 1 291 13 is_stmt 1 view .LVU889
 2925              		.loc 1 291 38 is_stmt 0 view .LVU890
 2926 0032 FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 2927              	.LVL167:
 292:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 2928              		.loc 1 292 13 is_stmt 1 view .LVU891
 2929              		.loc 1 292 37 is_stmt 0 view .LVU892
 2930 0036 0023     		movs	r3, #0
 293:Polyphony.cpp ****             modulations_[v].trigger_patched = false;
 2931              		.loc 1 293 45 view .LVU893
 2932 0038 85F80BA0 		strb	r10, [r5, #11]
 292:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 2933              		.loc 1 292 37 view .LVU894
 2934 003c 2B60     		str	r3, [r5]	@ float
 2935              		.loc 1 293 13 is_stmt 1 view .LVU895
 2936              	.L135:
 288:Polyphony.cpp ****         if (v != source_voice_idx) {
 2937              		.loc 1 288 5 view .LVU896
 2938 003e 0137     		adds	r7, r7, #1
 2939              	.LVL168:
 288:Polyphony.cpp ****         if (v != source_voice_idx) {
 2940              		.loc 1 288 23 view .LVU897
 2941 0040 08F14408 		add	r8, r8, #68
 2942 0044 2835     		adds	r5, r5, #40
 2943 0046 042F     		cmp	r7, #4
 2944 0048 E9D1     		bne	.L136
 2945              	.LBE1554:
 294:Polyphony.cpp ****         }
 295:Polyphony.cpp ****     }
 296:Polyphony.cpp **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 118


 297:Polyphony.cpp ****     if (voice_active_[source_voice_idx]) {
 2946              		.loc 1 297 5 view .LVU898
 2947              		.loc 1 297 39 is_stmt 0 view .LVU899
 2948 004a 04EB060B 		add	fp, r4, r6
 2949 004e 43F6101A 		movw	r10, #14608
 2950 0052 9FED288A 		vldr.32	s16, .L139
 2951 0056 04F54055 		add	r5, r4, #12288
 2952              		.loc 1 297 5 view .LVU900
 2953 005a 1BF80A70 		ldrb	r7, [fp, r10]	@ zero_extendqisi2
 2954              	.LVL169:
 2955              		.loc 1 297 5 view .LVU901
 2956 005e 002F     		cmp	r7, #0
 2957 0060 3CD0     		beq	.L137
 298:Polyphony.cpp ****         voice_active_[0] = true;
 2958              		.loc 1 298 9 is_stmt 1 view .LVU902
 2959              		.loc 1 298 26 is_stmt 0 view .LVU903
 2960 0062 0123     		movs	r3, #1
 299:Polyphony.cpp ****         voice_note_[0] = voice_note_[source_voice_idx];
 300:Polyphony.cpp ****         
 301:Polyphony.cpp ****         voice_envelopes_[0] = voice_envelopes_[source_voice_idx];
 2961              		.loc 1 301 29 view .LVU904
 2962 0064 4846     		mov	r0, r9
 302:Polyphony.cpp **** 
 303:Polyphony.cpp ****         modulations_[0].trigger = modulations_[source_voice_idx].trigger; 
 304:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
 2963              		.loc 1 304 74 view .LVU905
 2964 0066 43F28379 		movw	r9, #14211
 298:Polyphony.cpp ****         voice_note_[0] = voice_note_[source_voice_idx];
 2965              		.loc 1 298 26 view .LVU906
 2966 006a 85F81039 		strb	r3, [r5, #2320]
 299:Polyphony.cpp ****         voice_note_[0] = voice_note_[source_voice_idx];
 2967              		.loc 1 299 9 is_stmt 1 view .LVU907
 299:Polyphony.cpp ****         voice_note_[0] = voice_note_[source_voice_idx];
 2968              		.loc 1 299 54 is_stmt 0 view .LVU908
 2969 006e 06F64463 		addw	r3, r6, #3652
 2970 0072 04EB8303 		add	r3, r4, r3, lsl #2
 2971 0076 5A68     		ldr	r2, [r3, #4]	@ float
 299:Polyphony.cpp ****         voice_note_[0] = voice_note_[source_voice_idx];
 2972              		.loc 1 299 24 view .LVU909
 2973 0078 05F61413 		addw	r3, r5, #2324
 2974 007c 1A60     		str	r2, [r3]	@ float
 301:Polyphony.cpp **** 
 2975              		.loc 1 301 9 is_stmt 1 view .LVU910
 301:Polyphony.cpp **** 
 2976              		.loc 1 301 29 is_stmt 0 view .LVU911
 2977 007e 4422     		movs	r2, #68
 2978 0080 02FB06F8 		mul	r8, r2, r6
 2979 0084 04EB0801 		add	r1, r4, r8
 2980 0088 01F56051 		add	r1, r1, #14336
 2981 008c FFF7FEFF 		bl	memcpy
 2982              	.LVL170:
 303:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
 2983              		.loc 1 303 9 is_stmt 1 view .LVU912
 303:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
 2984              		.loc 1 303 66 is_stmt 0 view .LVU913
 2985 0090 2821     		movs	r1, #40
 303:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 119


 2986              		.loc 1 303 33 view .LVU914
 2987 0092 05F5EF63 		add	r3, r5, #1912
 305:Polyphony.cpp ****         modulations_[0].level = modulations_[source_voice_idx].level;
 306:Polyphony.cpp ****         modulations_[0].level_patched = modulations_[source_voice_idx].level_patched;
 307:Polyphony.cpp **** 
 308:Polyphony.cpp ****         voice_active_[source_voice_idx] = false;
 309:Polyphony.cpp ****         voice_envelopes_[source_voice_idx].Reset();
 2988              		.loc 1 309 49 view .LVU915
 2989 0096 08F56050 		add	r0, r8, #14336
 303:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
 2990              		.loc 1 303 66 view .LVU916
 2991 009a 01FB0646 		mla	r6, r1, r6, r4
 2992              	.LVL171:
 2993              		.loc 1 309 49 view .LVU917
 2994 009e 2044     		add	r0, r0, r4
 303:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
 2995              		.loc 1 303 66 view .LVU918
 2996 00a0 06F55D57 		add	r7, r6, #14144
 2997 00a4 BA6B     		ldr	r2, [r7, #56]	@ float
 303:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
 2998              		.loc 1 303 33 view .LVU919
 2999 00a6 1A60     		str	r2, [r3]	@ float
 304:Polyphony.cpp ****         modulations_[0].level = modulations_[source_voice_idx].level;
 3000              		.loc 1 304 9 is_stmt 1 view .LVU920
 304:Polyphony.cpp ****         modulations_[0].level = modulations_[source_voice_idx].level;
 3001              		.loc 1 304 74 is_stmt 0 view .LVU921
 3002 00a8 16F80930 		ldrb	r3, [r6, r9]	@ zero_extendqisi2
 305:Polyphony.cpp ****         modulations_[0].level = modulations_[source_voice_idx].level;
 3003              		.loc 1 305 64 view .LVU922
 3004 00ac FA6B     		ldr	r2, [r7, #60]	@ float
 304:Polyphony.cpp ****         modulations_[0].level = modulations_[source_voice_idx].level;
 3005              		.loc 1 304 41 view .LVU923
 3006 00ae 85F88337 		strb	r3, [r5, #1923]
 305:Polyphony.cpp ****         modulations_[0].level = modulations_[source_voice_idx].level;
 3007              		.loc 1 305 9 is_stmt 1 view .LVU924
 305:Polyphony.cpp ****         modulations_[0].level = modulations_[source_voice_idx].level;
 3008              		.loc 1 305 31 is_stmt 0 view .LVU925
 3009 00b2 05F27C73 		addw	r3, r5, #1916
 3010 00b6 1A60     		str	r2, [r3]	@ float
 306:Polyphony.cpp **** 
 3011              		.loc 1 306 9 is_stmt 1 view .LVU926
 306:Polyphony.cpp **** 
 3012              		.loc 1 306 72 is_stmt 0 view .LVU927
 3013 00b8 43F28473 		movw	r3, #14212
 3014 00bc F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 306:Polyphony.cpp **** 
 3015              		.loc 1 306 39 view .LVU928
 3016 00be 85F88437 		strb	r3, [r5, #1924]
 308:Polyphony.cpp ****         voice_envelopes_[source_voice_idx].Reset();
 3017              		.loc 1 308 9 is_stmt 1 view .LVU929
 308:Polyphony.cpp ****         voice_envelopes_[source_voice_idx].Reset();
 3018              		.loc 1 308 41 is_stmt 0 view .LVU930
 3019 00c2 0025     		movs	r5, #0
 3020 00c4 0BF80A50 		strb	r5, [fp, r10]
 3021              		.loc 1 309 9 is_stmt 1 view .LVU931
 3022              		.loc 1 309 49 is_stmt 0 view .LVU932
 3023 00c8 FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 120


 3024              	.LVL172:
 310:Polyphony.cpp ****         modulations_[source_voice_idx].trigger = 0.0f;
 3025              		.loc 1 310 9 is_stmt 1 view .LVU933
 3026              		.loc 1 310 48 is_stmt 0 view .LVU934
 3027 00cc 87ED0E8A 		vstr.32	s16, [r7, #56]
 311:Polyphony.cpp ****         modulations_[source_voice_idx].trigger_patched = false;
 3028              		.loc 1 311 9 is_stmt 1 view .LVU935
 3029              		.loc 1 311 56 is_stmt 0 view .LVU936
 3030 00d0 06F80950 		strb	r5, [r6, r9]
 3031              	.L133:
 3032              		.loc 1 311 56 view .LVU937
 3033              	.LBE1553:
 3034              	.LBE1552:
 312:Polyphony.cpp ****     } else {
 313:Polyphony.cpp ****         voice_active_[0] = false;
 314:Polyphony.cpp ****         voice_envelopes_[0].Reset();
 315:Polyphony.cpp ****         modulations_[0].trigger = 0.0f;
 316:Polyphony.cpp ****         modulations_[0].trigger_patched = false;
 317:Polyphony.cpp ****     }
 318:Polyphony.cpp **** }
 3035              		.loc 1 318 1 view .LVU938
 3036 00d4 BDEC028B 		vldm	sp!, {d8}
 3037              		.cfi_remember_state
 3038              		.cfi_restore 80
 3039              		.cfi_restore 81
 3040              		.cfi_def_cfa_offset 40
 3041 00d8 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3042              	.LVL173:
 3043              	.L137:
 3044              		.cfi_restore_state
 3045              	.LBB1556:
 3046              	.LBB1555:
 313:Polyphony.cpp ****         voice_envelopes_[0].Reset();
 3047              		.loc 1 313 9 is_stmt 1 view .LVU939
 314:Polyphony.cpp ****         modulations_[0].trigger = 0.0f;
 3048              		.loc 1 314 34 is_stmt 0 view .LVU940
 3049 00dc 4846     		mov	r0, r9
 313:Polyphony.cpp ****         voice_envelopes_[0].Reset();
 3050              		.loc 1 313 26 view .LVU941
 3051 00de 85F81079 		strb	r7, [r5, #2320]
 314:Polyphony.cpp ****         modulations_[0].trigger = 0.0f;
 3052              		.loc 1 314 9 is_stmt 1 view .LVU942
 314:Polyphony.cpp ****         modulations_[0].trigger = 0.0f;
 3053              		.loc 1 314 34 is_stmt 0 view .LVU943
 3054 00e2 FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 3055              	.LVL174:
 315:Polyphony.cpp ****         modulations_[0].trigger_patched = false;
 3056              		.loc 1 315 9 is_stmt 1 view .LVU944
 315:Polyphony.cpp ****         modulations_[0].trigger_patched = false;
 3057              		.loc 1 315 33 is_stmt 0 view .LVU945
 3058 00e6 05F5EF63 		add	r3, r5, #1912
 3059 00ea 83ED008A 		vstr.32	s16, [r3]
 316:Polyphony.cpp ****     }
 3060              		.loc 1 316 9 is_stmt 1 view .LVU946
 316:Polyphony.cpp ****     }
 3061              		.loc 1 316 41 is_stmt 0 view .LVU947
 3062 00ee 85F88377 		strb	r7, [r5, #1923]
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 121


 316:Polyphony.cpp ****     }
 3063              		.loc 1 316 41 view .LVU948
 3064 00f2 EFE7     		b	.L133
 3065              	.L140:
 3066              		.align	2
 3067              	.L139:
 3068 00f4 00000000 		.word	0
 3069              	.LBE1555:
 3070              	.LBE1556:
 3071              		.cfi_endproc
 3072              	.LFE5862:
 3074              		.section	.text._ZN15PolyphonyEngine14OnEngineChangeEii,"ax",%progbits
 3075              		.align	1
 3076              		.global	_ZN15PolyphonyEngine14OnEngineChangeEii
 3077              		.syntax unified
 3078              		.thumb
 3079              		.thumb_func
 3081              	_ZN15PolyphonyEngine14OnEngineChangeEii:
 3082              	.LVL175:
 3083              	.LFB5863:
 319:Polyphony.cpp **** 
 320:Polyphony.cpp **** void PolyphonyEngine::OnEngineChange(int old_engine_idx, int new_engine_idx) {
 3084              		.loc 1 320 78 is_stmt 1 view -0
 3085              		.cfi_startproc
 3086              		@ args = 0, pretend = 0, frame = 0
 3087              		@ frame_needed = 0, uses_anonymous_args = 0
 3088              		@ link register save eliminated.
 321:Polyphony.cpp ****     bool prev_was_poly = (old_engine_idx <= 3);
 3089              		.loc 1 321 5 view .LVU950
 3090              		.loc 1 321 10 is_stmt 0 view .LVU951
 3091 0000 0329     		cmp	r1, #3
 320:Polyphony.cpp ****     bool prev_was_poly = (old_engine_idx <= 3);
 3092              		.loc 1 320 78 view .LVU952
 3093 0002 70B4     		push	{r4, r5, r6}
 3094              		.cfi_def_cfa_offset 12
 3095              		.cfi_offset 4, -12
 3096              		.cfi_offset 5, -8
 3097              		.cfi_offset 6, -4
 3098              		.loc 1 321 10 view .LVU953
 3099 0004 CCBF     		ite	gt
 3100 0006 0025     		movgt	r5, #0
 3101 0008 0125     		movle	r5, #1
 3102              	.LVL176:
 322:Polyphony.cpp ****     bool now_poly      = (new_engine_idx <= 3);
 3103              		.loc 1 322 5 is_stmt 1 view .LVU954
 3104              		.loc 1 322 10 is_stmt 0 view .LVU955
 3105 000a 032A     		cmp	r2, #3
 3106 000c CCBF     		ite	gt
 3107 000e 0024     		movgt	r4, #0
 3108 0010 0124     		movle	r4, #1
 3109              	.LVL177:
 323:Polyphony.cpp **** 
 324:Polyphony.cpp ****     if(old_engine_idx == new_engine_idx) {
 3110              		.loc 1 324 5 is_stmt 1 view .LVU956
 3111 0012 9142     		cmp	r1, r2
 3112 0014 1AD0     		beq	.L141
 325:Polyphony.cpp ****         return;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 122


 326:Polyphony.cpp ****     }
 327:Polyphony.cpp **** 
 328:Polyphony.cpp ****     engine_changed_flag_ = true;
 3113              		.loc 1 328 5 view .LVU957
 3114              		.loc 1 328 26 is_stmt 0 view .LVU958
 3115 0016 00F54053 		add	r3, r0, #12288
 3116 001a 0126     		movs	r6, #1
 329:Polyphony.cpp **** 
 330:Polyphony.cpp ****     if(prev_was_poly == now_poly) {
 3117              		.loc 1 330 5 view .LVU959
 3118 001c A542     		cmp	r5, r4
 328:Polyphony.cpp **** 
 3119              		.loc 1 328 26 view .LVU960
 3120 001e 83F8AC6A 		strb	r6, [r3, #2732]
 3121              		.loc 1 330 5 is_stmt 1 view .LVU961
 3122 0022 13D0     		beq	.L141
 331:Polyphony.cpp ****         return;
 332:Polyphony.cpp ****     }
 333:Polyphony.cpp **** 
 334:Polyphony.cpp ****     if(prev_was_poly && !now_poly) {
 3123              		.loc 1 334 5 view .LVU962
 3124              	.LBB1557:
 3125 0024 0329     		cmp	r1, #3
 3126 0026 0BDC     		bgt	.L145
 3127              		.loc 1 334 22 is_stmt 0 discriminator 1 view .LVU963
 3128 0028 032A     		cmp	r2, #3
 3129 002a 09DD     		ble	.L145
 3130 002c 00F56453 		add	r3, r0, #14592
 3131              	.LBB1558:
 3132              	.LBB1559:
 335:Polyphony.cpp ****         int source_voice = -1;
 336:Polyphony.cpp ****         for(int v = 0; v < NUM_VOICES; ++v) {
 3133              		.loc 1 336 17 view .LVU964
 3134 0030 0021     		movs	r1, #0
 3135              	.LVL178:
 3136              		.loc 1 336 17 view .LVU965
 3137 0032 1033     		adds	r3, r3, #16
 3138              	.LVL179:
 3139              	.L147:
 337:Polyphony.cpp ****             if(voice_active_[v]) { source_voice = v; break; }
 3140              		.loc 1 337 13 is_stmt 1 view .LVU966
 3141              		.loc 1 337 31 is_stmt 0 view .LVU967
 3142 0034 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 3143              		.loc 1 337 13 view .LVU968
 3144 0038 2AB9     		cbnz	r2, .L146
 336:Polyphony.cpp ****             if(voice_active_[v]) { source_voice = v; break; }
 3145              		.loc 1 336 9 is_stmt 1 discriminator 2 view .LVU969
 3146 003a 0131     		adds	r1, r1, #1
 3147              	.LVL180:
 336:Polyphony.cpp ****             if(voice_active_[v]) { source_voice = v; break; }
 3148              		.loc 1 336 26 discriminator 2 view .LVU970
 3149 003c 0429     		cmp	r1, #4
 3150 003e F9D1     		bne	.L147
 3151              	.LVL181:
 3152              	.L145:
 336:Polyphony.cpp ****             if(voice_active_[v]) { source_voice = v; break; }
 3153              		.loc 1 336 26 is_stmt 0 discriminator 2 view .LVU971
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 123


 3154              	.LBE1559:
 3155              	.LBE1558:
 338:Polyphony.cpp ****         }
 339:Polyphony.cpp **** 
 340:Polyphony.cpp ****         if(source_voice != -1) {
 341:Polyphony.cpp ****             PolyToMono(source_voice);
 342:Polyphony.cpp ****         } else {
 343:Polyphony.cpp ****             ClearVoices();
 344:Polyphony.cpp ****         }
 345:Polyphony.cpp ****     }
 346:Polyphony.cpp ****     else {
 347:Polyphony.cpp ****         ClearVoices();
 3156              		.loc 1 347 9 is_stmt 1 view .LVU972
 3157              	.LBE1557:
 348:Polyphony.cpp ****     }
 349:Polyphony.cpp **** }
 3158              		.loc 1 349 1 is_stmt 0 view .LVU973
 3159 0040 70BC     		pop	{r4, r5, r6}
 3160              		.cfi_remember_state
 3161              		.cfi_restore 6
 3162              		.cfi_restore 5
 3163              		.cfi_restore 4
 3164              		.cfi_def_cfa_offset 0
 3165              	.LVL182:
 3166              	.LBB1562:
 347:Polyphony.cpp ****     }
 3167              		.loc 1 347 20 view .LVU974
 3168 0042 FFF7FEBF 		b	_ZN15PolyphonyEngine11ClearVoicesEv
 3169              	.LVL183:
 3170              	.L146:
 3171              		.cfi_restore_state
 3172              	.LBB1560:
 340:Polyphony.cpp ****             PolyToMono(source_voice);
 3173              		.loc 1 340 9 is_stmt 1 view .LVU975
 341:Polyphony.cpp ****         } else {
 3174              		.loc 1 341 13 view .LVU976
 3175              	.LBE1560:
 3176              	.LBE1562:
 3177              		.loc 1 349 1 is_stmt 0 view .LVU977
 3178 0046 70BC     		pop	{r4, r5, r6}
 3179              		.cfi_remember_state
 3180              		.cfi_restore 6
 3181              		.cfi_restore 5
 3182              		.cfi_restore 4
 3183              		.cfi_def_cfa_offset 0
 3184              	.LVL184:
 3185              	.LBB1563:
 3186              	.LBB1561:
 341:Polyphony.cpp ****         } else {
 3187              		.loc 1 341 23 view .LVU978
 3188 0048 FFF7FEBF 		b	_ZN15PolyphonyEngine10PolyToMonoEi
 3189              	.LVL185:
 3190              	.L141:
 3191              		.cfi_restore_state
 341:Polyphony.cpp ****         } else {
 3192              		.loc 1 341 23 view .LVU979
 3193              	.LBE1561:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 124


 3194              	.LBE1563:
 3195              		.loc 1 349 1 view .LVU980
 3196 004c 70BC     		pop	{r4, r5, r6}
 3197              		.cfi_restore 6
 3198              		.cfi_restore 5
 3199              		.cfi_restore 4
 3200              		.cfi_def_cfa_offset 0
 3201              	.LVL186:
 3202              		.loc 1 349 1 view .LVU981
 3203 004e 7047     		bx	lr
 3204              		.cfi_endproc
 3205              	.LFE5863:
 3207              		.section	.text._ZNK15PolyphonyEngine17GetLastTouchStateEv,"ax",%progbits
 3208              		.align	1
 3209              		.global	_ZNK15PolyphonyEngine17GetLastTouchStateEv
 3210              		.syntax unified
 3211              		.thumb
 3212              		.thumb_func
 3214              	_ZNK15PolyphonyEngine17GetLastTouchStateEv:
 3215              	.LVL187:
 3216              	.LFB5864:
 350:Polyphony.cpp **** 
 351:Polyphony.cpp **** uint16_t PolyphonyEngine::GetLastTouchState() const {
 3217              		.loc 1 351 53 is_stmt 1 view -0
 3218              		.cfi_startproc
 3219              		@ args = 0, pretend = 0, frame = 0
 3220              		@ frame_needed = 0, uses_anonymous_args = 0
 3221              		@ link register save eliminated.
 352:Polyphony.cpp ****     return last_touch_state_member_;
 3222              		.loc 1 352 5 view .LVU983
 3223              		.loc 1 352 12 is_stmt 0 view .LVU984
 3224 0000 00F54050 		add	r0, r0, #12288
 3225              	.LVL188:
 353:Polyphony.cpp **** }
 3226              		.loc 1 353 1 view .LVU985
 3227 0004 B0F8AE0A 		ldrh	r0, [r0, #2734]
 3228              	.LVL189:
 3229              		.loc 1 353 1 view .LVU986
 3230 0008 7047     		bx	lr
 3231              		.cfi_endproc
 3232              	.LFE5864:
 3234              		.section	.text._ZN15PolyphonyEngine20UpdateLastTouchStateEt,"ax",%progbits
 3235              		.align	1
 3236              		.global	_ZN15PolyphonyEngine20UpdateLastTouchStateEt
 3237              		.syntax unified
 3238              		.thumb
 3239              		.thumb_func
 3241              	_ZN15PolyphonyEngine20UpdateLastTouchStateEt:
 3242              	.LVL190:
 3243              	.LFB5865:
 354:Polyphony.cpp **** 
 355:Polyphony.cpp **** void PolyphonyEngine::UpdateLastTouchState(uint16_t current_state) {
 3244              		.loc 1 355 68 is_stmt 1 view -0
 3245              		.cfi_startproc
 3246              		@ args = 0, pretend = 0, frame = 0
 3247              		@ frame_needed = 0, uses_anonymous_args = 0
 3248              		@ link register save eliminated.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 125


 356:Polyphony.cpp ****     last_touch_state_member_ = current_state;
 3249              		.loc 1 356 5 view .LVU988
 3250              		.loc 1 356 30 is_stmt 0 view .LVU989
 3251 0000 00F54050 		add	r0, r0, #12288
 3252              	.LVL191:
 3253              		.loc 1 356 30 view .LVU990
 3254 0004 A0F8AE1A 		strh	r1, [r0, #2734]	@ movhi
 357:Polyphony.cpp **** }
 3255              		.loc 1 357 1 view .LVU991
 3256 0008 7047     		bx	lr
 3257              		.cfi_endproc
 3258              	.LFE5865:
 3260              		.section	.text._ZN15PolyphonyEngine13FindFreeVoiceEi,"ax",%progbits
 3261              		.align	1
 3262              		.global	_ZN15PolyphonyEngine13FindFreeVoiceEi
 3263              		.syntax unified
 3264              		.thumb
 3265              		.thumb_func
 3267              	_ZN15PolyphonyEngine13FindFreeVoiceEi:
 3268              	.LVL192:
 3269              	.LFB5866:
 358:Polyphony.cpp **** 
 359:Polyphony.cpp **** int PolyphonyEngine::FindFreeVoice(int max_voices) {
 3270              		.loc 1 359 52 is_stmt 1 view -0
 3271              		.cfi_startproc
 3272              		@ args = 0, pretend = 0, frame = 0
 3273              		@ frame_needed = 0, uses_anonymous_args = 0
 3274              		@ link register save eliminated.
 360:Polyphony.cpp ****     for (int i = 0; i < max_voices; ++i) {
 3275              		.loc 1 360 5 view .LVU993
 3276              		.loc 1 360 5 is_stmt 0 view .LVU994
 3277 0000 00F56453 		add	r3, r0, #14592
 3278              	.LBB1564:
 3279              		.loc 1 360 14 view .LVU995
 3280 0004 0020     		movs	r0, #0
 3281              	.LVL193:
 3282              		.loc 1 360 14 view .LVU996
 3283 0006 1033     		adds	r3, r3, #16
 3284              	.LVL194:
 3285              	.L153:
 3286              		.loc 1 360 23 is_stmt 1 discriminator 1 view .LVU997
 3287 0008 8842     		cmp	r0, r1
 3288 000a 04DA     		bge	.L154
 361:Polyphony.cpp ****         if (!voice_active_[i]) {
 3289              		.loc 1 361 9 view .LVU998
 3290              		.loc 1 361 29 is_stmt 0 view .LVU999
 3291 000c 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 3292              		.loc 1 361 9 view .LVU1000
 3293 0010 1AB1     		cbz	r2, .L151
 360:Polyphony.cpp ****     for (int i = 0; i < max_voices; ++i) {
 3294              		.loc 1 360 5 is_stmt 1 discriminator 2 view .LVU1001
 3295 0012 0130     		adds	r0, r0, #1
 3296              	.LVL195:
 360:Polyphony.cpp ****     for (int i = 0; i < max_voices; ++i) {
 3297              		.loc 1 360 5 is_stmt 0 discriminator 2 view .LVU1002
 3298 0014 F8E7     		b	.L153
 3299              	.L154:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 126


 360:Polyphony.cpp ****     for (int i = 0; i < max_voices; ++i) {
 3300              		.loc 1 360 5 discriminator 2 view .LVU1003
 3301              	.LBE1564:
 362:Polyphony.cpp ****             return i;
 363:Polyphony.cpp ****         }
 364:Polyphony.cpp ****     }
 365:Polyphony.cpp ****     
 366:Polyphony.cpp ****     return -1; 
 3302              		.loc 1 366 13 view .LVU1004
 3303 0016 4FF0FF30 		mov	r0, #-1
 3304              	.LVL196:
 3305              	.L151:
 367:Polyphony.cpp **** }
 3306              		.loc 1 367 1 view .LVU1005
 3307 001a 7047     		bx	lr
 3308              		.cfi_endproc
 3309              	.LFE5866:
 3311              		.section	.text._ZN15PolyphonyEngine14AssignMonoNoteEfb,"ax",%progbits
 3312              		.align	1
 3313              		.global	_ZN15PolyphonyEngine14AssignMonoNoteEfb
 3314              		.syntax unified
 3315              		.thumb
 3316              		.thumb_func
 3318              	_ZN15PolyphonyEngine14AssignMonoNoteEfb:
 3319              	.LVL197:
 3320              	.LFB5867:
 368:Polyphony.cpp **** 
 369:Polyphony.cpp **** void PolyphonyEngine::AssignMonoNote(float note, bool percussive_engine) {
 3321              		.loc 1 369 74 is_stmt 1 view -0
 3322              		.cfi_startproc
 3323              		@ args = 0, pretend = 0, frame = 0
 3324              		@ frame_needed = 0, uses_anonymous_args = 0
 370:Polyphony.cpp ****     voice_note_[0] = note;
 3325              		.loc 1 370 5 view .LVU1007
 369:Polyphony.cpp ****     voice_note_[0] = note;
 3326              		.loc 1 369 74 is_stmt 0 view .LVU1008
 3327 0000 38B5     		push	{r3, r4, r5, lr}
 3328              		.cfi_def_cfa_offset 16
 3329              		.cfi_offset 3, -16
 3330              		.cfi_offset 4, -12
 3331              		.cfi_offset 5, -8
 3332              		.cfi_offset 14, -4
 3333              		.loc 1 370 20 view .LVU1009
 3334 0002 00F54053 		add	r3, r0, #12288
 371:Polyphony.cpp ****     voice_active_[0] = true;
 372:Polyphony.cpp ****     modulations_[0].trigger = 1.0f;
 3335              		.loc 1 372 29 view .LVU1010
 3336 0006 4FF07E55 		mov	r5, #1065353216
 370:Polyphony.cpp ****     voice_active_[0] = true;
 3337              		.loc 1 370 20 view .LVU1011
 3338 000a 03F61412 		addw	r2, r3, #2324
 3339              		.loc 1 372 29 view .LVU1012
 3340 000e 03F5EF64 		add	r4, r3, #1912
 370:Polyphony.cpp ****     voice_active_[0] = true;
 3341              		.loc 1 370 20 view .LVU1013
 3342 0012 82ED000A 		vstr.32	s0, [r2]
 371:Polyphony.cpp ****     voice_active_[0] = true;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 127


 3343              		.loc 1 371 5 is_stmt 1 view .LVU1014
 371:Polyphony.cpp ****     voice_active_[0] = true;
 3344              		.loc 1 371 22 is_stmt 0 view .LVU1015
 3345 0016 0122     		movs	r2, #1
 3346 0018 83F81029 		strb	r2, [r3, #2320]
 3347              		.loc 1 372 5 is_stmt 1 view .LVU1016
 3348              		.loc 1 372 29 is_stmt 0 view .LVU1017
 3349 001c 2560     		str	r5, [r4]	@ float
 373:Polyphony.cpp **** 
 374:Polyphony.cpp ****     if (percussive_engine) {
 3350              		.loc 1 374 5 is_stmt 1 view .LVU1018
 3351 001e 11B1     		cbz	r1, .L160
 375:Polyphony.cpp ****         modulations_[0].trigger_patched = true; 
 3352              		.loc 1 375 9 view .LVU1019
 3353              		.loc 1 375 41 is_stmt 0 view .LVU1020
 3354 0020 83F88327 		strb	r2, [r3, #1923]
 3355              	.LVL198:
 3356              	.L159:
 376:Polyphony.cpp ****     } else {
 377:Polyphony.cpp ****         modulations_[0].trigger_patched = false;
 378:Polyphony.cpp ****         voice_envelopes_[0].Trigger(); 
 379:Polyphony.cpp ****     }
 380:Polyphony.cpp **** }
 3357              		.loc 1 380 1 view .LVU1021
 3358 0024 38BD     		pop	{r3, r4, r5, pc}
 3359              	.LVL199:
 3360              	.L160:
 377:Polyphony.cpp ****         voice_envelopes_[0].Trigger(); 
 3361              		.loc 1 377 9 is_stmt 1 view .LVU1022
 378:Polyphony.cpp ****     }
 3362              		.loc 1 378 36 is_stmt 0 view .LVU1023
 3363 0026 00F56050 		add	r0, r0, #14336
 3364              	.LVL200:
 377:Polyphony.cpp ****         voice_envelopes_[0].Trigger(); 
 3365              		.loc 1 377 41 view .LVU1024
 3366 002a 83F88317 		strb	r1, [r3, #1923]
 378:Polyphony.cpp ****     }
 3367              		.loc 1 378 9 is_stmt 1 view .LVU1025
 378:Polyphony.cpp ****     }
 3368              		.loc 1 378 36 is_stmt 0 view .LVU1026
 3369 002e FFF7FEFF 		bl	_ZN13VoiceEnvelope7TriggerEv
 3370              	.LVL201:
 3371              		.loc 1 380 1 view .LVU1027
 3372 0032 F7E7     		b	.L159
 3373              		.cfi_endproc
 3374              	.LFE5867:
 3376              		.section	.text._ZN15PolyphonyEngine16FindVoiceForNoteEfibi,"ax",%progbits
 3377              		.align	1
 3378              		.global	_ZN15PolyphonyEngine16FindVoiceForNoteEfibi
 3379              		.syntax unified
 3380              		.thumb
 3381              		.thumb_func
 3383              	_ZN15PolyphonyEngine16FindVoiceForNoteEfibi:
 3384              	.LVL202:
 3385              	.LFB5868:
 381:Polyphony.cpp **** 
 382:Polyphony.cpp **** int PolyphonyEngine::FindVoiceForNote(float note, int engine_index, bool poly_mode, int max_voices)
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 128


 3386              		.loc 1 382 101 is_stmt 1 view -0
 3387              		.cfi_startproc
 3388              		@ args = 0, pretend = 0, frame = 0
 3389              		@ frame_needed = 0, uses_anonymous_args = 0
 383:Polyphony.cpp ****     if (poly_mode) {
 3390              		.loc 1 383 5 view .LVU1029
 382:Polyphony.cpp ****     if (poly_mode) {
 3391              		.loc 1 382 101 is_stmt 0 view .LVU1030
 3392 0000 10B5     		push	{r4, lr}
 3393              		.cfi_def_cfa_offset 8
 3394              		.cfi_offset 4, -8
 3395              		.cfi_offset 14, -4
 3396              	.LBB1571:
 3397              		.loc 1 383 5 view .LVU1031
 3398 0002 DAB1     		cbz	r2, .L163
 3399 0004 00F56451 		add	r1, r0, #14592
 3400              	.LVL203:
 3401              		.loc 1 383 5 view .LVU1032
 3402 0008 00F56452 		add	r2, r0, #14592
 3403              	.LVL204:
 3404              	.LBB1572:
 384:Polyphony.cpp ****         for (int i = 0; i < max_voices; ++i) {
 3405              		.loc 1 384 18 view .LVU1033
 3406 000c 0020     		movs	r0, #0
 3407              	.LVL205:
 3408              		.loc 1 384 18 view .LVU1034
 3409 000e 1431     		adds	r1, r1, #20
 3410              	.LVL206:
 3411              		.loc 1 384 18 view .LVU1035
 3412 0010 1032     		adds	r2, r2, #16
 3413              	.LVL207:
 3414              	.L166:
 3415              		.loc 1 384 27 is_stmt 1 discriminator 1 view .LVU1036
 3416 0012 9842     		cmp	r0, r3
 3417 0014 2ADA     		bge	.L168
 385:Polyphony.cpp ****             if (voice_active_[i] && fabsf(voice_note_[i] - note) < 0.1f) {
 3418              		.loc 1 385 13 view .LVU1037
 3419              		.loc 1 385 32 is_stmt 0 view .LVU1038
 3420 0016 12F8014B 		ldrb	r4, [r2], #1	@ zero_extendqisi2
 3421              		.loc 1 385 13 view .LVU1039
 3422 001a 64B1     		cbz	r4, .L165
 3423              		.loc 1 385 58 discriminator 1 view .LVU1040
 3424 001c D1ED007A 		vldr.32	s15, [r1]
 3425              		.loc 1 385 34 discriminator 1 view .LVU1041
 3426 0020 9FED147A 		vldr.32	s14, .L173
 3427              		.loc 1 385 58 discriminator 1 view .LVU1042
 3428 0024 77EEC07A 		vsub.f32	s15, s15, s0
 3429              		.loc 1 385 42 discriminator 1 view .LVU1043
 3430 0028 F0EEE77A 		vabs.f32	s15, s15
 3431              		.loc 1 385 34 discriminator 1 view .LVU1044
 3432 002c F4EEC77A 		vcmpe.f32	s15, s14
 3433 0030 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3434 0034 19D4     		bmi	.L162
 3435              	.L165:
 384:Polyphony.cpp ****         for (int i = 0; i < max_voices; ++i) {
 3436              		.loc 1 384 9 is_stmt 1 discriminator 2 view .LVU1045
 3437 0036 0130     		adds	r0, r0, #1
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 129


 3438              	.LVL208:
 384:Polyphony.cpp ****         for (int i = 0; i < max_voices; ++i) {
 3439              		.loc 1 384 9 is_stmt 0 discriminator 2 view .LVU1046
 3440 0038 0431     		adds	r1, r1, #4
 3441 003a EAE7     		b	.L166
 3442              	.LVL209:
 3443              	.L163:
 384:Polyphony.cpp ****         for (int i = 0; i < max_voices; ++i) {
 3444              		.loc 1 384 9 discriminator 2 view .LVU1047
 3445              	.LBE1572:
 386:Polyphony.cpp ****                 return i;
 387:Polyphony.cpp ****             }
 388:Polyphony.cpp ****         }
 389:Polyphony.cpp ****     } else { 
 390:Polyphony.cpp ****         if (voice_active_[0] && fabsf(voice_note_[0] - note) < 0.1f) {
 3446              		.loc 1 390 9 is_stmt 1 view .LVU1048
 3447              		.loc 1 390 28 is_stmt 0 view .LVU1049
 3448 003c 00F54050 		add	r0, r0, #12288
 3449              	.LVL210:
 3450              		.loc 1 390 9 view .LVU1050
 3451 0040 90F81039 		ldrb	r3, [r0, #2320]	@ zero_extendqisi2
 3452              	.LVL211:
 3453              		.loc 1 390 9 view .LVU1051
 3454 0044 93B1     		cbz	r3, .L168
 3455              	.LVL212:
 3456              		.loc 1 390 9 view .LVU1052
 3457              	.LBE1571:
 3458              	.LBB1573:
 3459              	.LBI1573:
 382:Polyphony.cpp ****     if (poly_mode) {
 3460              		.loc 1 382 5 is_stmt 1 discriminator 1 view .LVU1053
 3461              	.LBB1574:
 3462              	.LBB1575:
 3463              		.loc 1 390 54 is_stmt 0 discriminator 1 view .LVU1054
 3464 0046 00F61410 		addw	r0, r0, #2324
 3465              	.LVL213:
 3466              		.loc 1 390 54 discriminator 1 view .LVU1055
 3467 004a D0ED007A 		vldr.32	s15, [r0]
 3468 004e 37EEC00A 		vsub.f32	s0, s15, s0
 3469              	.LVL214:
 3470              		.loc 1 390 30 discriminator 1 view .LVU1056
 3471 0052 DFED087A 		vldr.32	s15, .L173
 3472              		.loc 1 390 38 discriminator 1 view .LVU1057
 3473 0056 B0EEC00A 		vabs.f32	s0, s0
 3474              		.loc 1 390 30 discriminator 1 view .LVU1058
 3475 005a B4EEE70A 		vcmpe.f32	s0, s15
 3476 005e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3477 0062 54BF     		ite	pl
 3478 0064 4FF0FF30 		movpl	r0, #-1
 3479              	.LVL215:
 3480              		.loc 1 390 30 discriminator 1 view .LVU1059
 3481 0068 0020     		movmi	r0, #0
 3482              	.LVL216:
 3483              	.L162:
 3484              		.loc 1 390 30 discriminator 1 view .LVU1060
 3485              	.LBE1575:
 3486              	.LBE1574:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 130


 3487              	.LBE1573:
 391:Polyphony.cpp ****             return 0;
 392:Polyphony.cpp ****         }
 393:Polyphony.cpp ****     }
 394:Polyphony.cpp ****     return -1;
 395:Polyphony.cpp **** }
 3488              		.loc 1 395 1 view .LVU1061
 3489 006a 10BD     		pop	{r4, pc}
 3490              	.LVL217:
 3491              	.L168:
 394:Polyphony.cpp **** }
 3492              		.loc 1 394 13 view .LVU1062
 3493 006c 4FF0FF30 		mov	r0, #-1
 3494 0070 FBE7     		b	.L162
 3495              	.L174:
 3496 0072 00BF     		.align	2
 3497              	.L173:
 3498 0074 CDCCCC3D 		.word	1036831949
 3499              		.cfi_endproc
 3500              	.LFE5868:
 3502              		.section	.text._ZN15PolyphonyEngine16HandleTouchInputEttibi,"ax",%progbits
 3503              		.align	1
 3504              		.global	_ZN15PolyphonyEngine16HandleTouchInputEttibi
 3505              		.syntax unified
 3506              		.thumb
 3507              		.thumb_func
 3509              	_ZN15PolyphonyEngine16HandleTouchInputEttibi:
 3510              	.LVL218:
 3511              	.LFB5849:
  37:Polyphony.cpp ****     bool percussive_engine = (engine_index > 7);
 3512              		.loc 1 37 169 is_stmt 1 view -0
 3513              		.cfi_startproc
 3514              		@ args = 8, pretend = 0, frame = 16
 3515              		@ frame_needed = 0, uses_anonymous_args = 0
  38:Polyphony.cpp **** 
 3516              		.loc 1 38 5 view .LVU1064
  37:Polyphony.cpp ****     bool percussive_engine = (engine_index > 7);
 3517              		.loc 1 37 169 is_stmt 0 view .LVU1065
 3518 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3519              		.cfi_def_cfa_offset 36
 3520              		.cfi_offset 4, -36
 3521              		.cfi_offset 5, -32
 3522              		.cfi_offset 6, -28
 3523              		.cfi_offset 7, -24
 3524              		.cfi_offset 8, -20
 3525              		.cfi_offset 9, -16
 3526              		.cfi_offset 10, -12
 3527              		.cfi_offset 11, -8
 3528              		.cfi_offset 14, -4
  38:Polyphony.cpp **** 
 3529              		.loc 1 38 10 view .LVU1066
 3530 0004 072B     		cmp	r3, #7
  37:Polyphony.cpp ****     bool percussive_engine = (engine_index > 7);
 3531              		.loc 1 37 169 view .LVU1067
 3532 0006 85B0     		sub	sp, sp, #20
 3533              		.cfi_def_cfa_offset 56
  37:Polyphony.cpp ****     bool percussive_engine = (engine_index > 7);
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 131


 3534              		.loc 1 37 169 view .LVU1068
 3535 0008 0446     		mov	r4, r0
 3536 000a 1F46     		mov	r7, r3
 3537 000c 9DF83880 		ldrb	r8, [sp, #56]	@ zero_extendqisi2
  38:Polyphony.cpp **** 
 3538              		.loc 1 38 10 view .LVU1069
 3539 0010 D8BF     		it	le
 3540 0012 4FF00009 		movle	r9, #0
  37:Polyphony.cpp ****     bool percussive_engine = (engine_index > 7);
 3541              		.loc 1 37 169 view .LVU1070
 3542 0016 DDF83CB0 		ldr	fp, [sp, #60]
  38:Polyphony.cpp **** 
 3543              		.loc 1 38 10 view .LVU1071
 3544 001a C8BF     		it	gt
 3545 001c 4FF00109 		movgt	r9, #1
 3546              	.LVL219:
  40:Polyphony.cpp ****         bool pad_currently_pressed = (current_touch_state_param >> i) & 1;
 3547              		.loc 1 40 5 is_stmt 1 view .LVU1072
 3548              	.LBB1576:
  40:Polyphony.cpp ****         bool pad_currently_pressed = (current_touch_state_param >> i) & 1;
 3549              		.loc 1 40 23 view .LVU1073
 3550 0020 DFF808A1 		ldr	r10, .L196+4
  40:Polyphony.cpp ****         bool pad_currently_pressed = (current_touch_state_param >> i) & 1;
 3551              		.loc 1 40 14 is_stmt 0 view .LVU1074
 3552 0024 0025     		movs	r5, #0
 3553              	.LBE1576:
  37:Polyphony.cpp ****     bool percussive_engine = (engine_index > 7);
 3554              		.loc 1 37 169 view .LVU1075
 3555 0026 CDE90112 		strd	r1, r2, [sp, #4]
 3556              	.LVL220:
 3557              	.L181:
 3558              	.LBB1595:
 3559              	.LBB1577:
  41:Polyphony.cpp ****         bool pad_was_pressed = (last_touch_state_param >> i) & 1; 
 3560              		.loc 1 41 9 is_stmt 1 view .LVU1076
  42:Polyphony.cpp ****         float note_for_pad = PolyphonyEngine::kTouchMidiNotes_[i];
 3561              		.loc 1 42 9 view .LVU1077
  41:Polyphony.cpp ****         bool pad_was_pressed = (last_touch_state_param >> i) & 1; 
 3562              		.loc 1 41 65 is_stmt 0 view .LVU1078
 3563 002a 019A     		ldr	r2, [sp, #4]
  42:Polyphony.cpp ****         float note_for_pad = PolyphonyEngine::kTouchMidiNotes_[i];
 3564              		.loc 1 42 56 view .LVU1079
 3565 002c 029B     		ldr	r3, [sp, #8]
  41:Polyphony.cpp ****         bool pad_was_pressed = (last_touch_state_param >> i) & 1; 
 3566              		.loc 1 41 65 view .LVU1080
 3567 002e 42FA05F6 		asr	r6, r2, r5
  43:Polyphony.cpp **** 
 3568              		.loc 1 43 15 view .LVU1081
 3569 0032 BAEC010A 		vldmia.32	r10!, {s0}
  42:Polyphony.cpp ****         float note_for_pad = PolyphonyEngine::kTouchMidiNotes_[i];
 3570              		.loc 1 42 56 view .LVU1082
 3571 0036 2B41     		asrs	r3, r3, r5
 3572              	.LBB1578:
  45:Polyphony.cpp ****             if (poly_mode) {
 3573              		.loc 1 45 9 view .LVU1083
 3574 0038 16F00106 		ands	r6, r6, #1
 3575              	.LBE1578:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 132


  42:Polyphony.cpp ****         float note_for_pad = PolyphonyEngine::kTouchMidiNotes_[i];
 3576              		.loc 1 42 62 view .LVU1084
 3577 003c 03F00103 		and	r3, r3, #1
 3578              	.LVL221:
  43:Polyphony.cpp **** 
 3579              		.loc 1 43 9 is_stmt 1 view .LVU1085
  45:Polyphony.cpp ****             if (poly_mode) {
 3580              		.loc 1 45 9 view .LVU1086
 3581              	.LBB1586:
 3582 0040 32D0     		beq	.L176
  45:Polyphony.cpp ****             if (poly_mode) {
 3583              		.loc 1 45 35 is_stmt 0 discriminator 1 view .LVU1087
 3584 0042 33BB     		cbnz	r3, .L177
 3585              	.LBE1586:
 3586              	.LBE1577:
 3587              	.LBE1595:
  46:Polyphony.cpp ****                 int voice_idx = FindFreeVoice(effective_num_voices); 
 3588              		.loc 1 46 13 is_stmt 1 view .LVU1088
 3589              	.LBB1596:
 3590              	.LBB1591:
 3591              	.LBB1587:
 3592              	.LBB1579:
 3593 0044 B8F1000F 		cmp	r8, #0
 3594 0048 29D0     		beq	.L178
 3595              	.LBB1580:
  47:Polyphony.cpp ****                 if (voice_idx != -1) {
 3596              		.loc 1 47 17 view .LVU1089
  47:Polyphony.cpp ****                 if (voice_idx != -1) {
 3597              		.loc 1 47 46 is_stmt 0 view .LVU1090
 3598 004a 5946     		mov	r1, fp
 3599 004c 2046     		mov	r0, r4
 3600 004e FFF7FEFF 		bl	_ZN15PolyphonyEngine13FindFreeVoiceEi
 3601              	.LVL222:
  48:Polyphony.cpp ****                     voice_note_[voice_idx] = note_for_pad;
 3602              		.loc 1 48 17 is_stmt 1 view .LVU1091
 3603 0052 411C     		adds	r1, r0, #1
 3604 0054 1DD0     		beq	.L177
  49:Polyphony.cpp ****                     voice_active_[voice_idx] = true;
 3605              		.loc 1 49 21 view .LVU1092
  49:Polyphony.cpp ****                     voice_active_[voice_idx] = true;
 3606              		.loc 1 49 44 is_stmt 0 view .LVU1093
 3607 0056 00F64463 		addw	r3, r0, #3652
  50:Polyphony.cpp ****                     modulations_[voice_idx].trigger = 1.0f; 
 3608              		.loc 1 50 46 view .LVU1094
 3609 005a 2218     		adds	r2, r4, r0
 3610 005c 0121     		movs	r1, #1
  49:Polyphony.cpp ****                     voice_active_[voice_idx] = true;
 3611              		.loc 1 49 44 view .LVU1095
 3612 005e 04EB8303 		add	r3, r4, r3, lsl #2
 3613 0062 83ED010A 		vstr.32	s0, [r3, #4]
  50:Polyphony.cpp ****                     modulations_[voice_idx].trigger = 1.0f; 
 3614              		.loc 1 50 21 is_stmt 1 view .LVU1096
  50:Polyphony.cpp ****                     modulations_[voice_idx].trigger = 1.0f; 
 3615              		.loc 1 50 46 is_stmt 0 view .LVU1097
 3616 0066 43F61013 		movw	r3, #14608
 3617 006a D154     		strb	r1, [r2, r3]
  51:Polyphony.cpp ****                     if (percussive_engine) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 133


 3618              		.loc 1 51 21 is_stmt 1 view .LVU1098
  51:Polyphony.cpp ****                     if (percussive_engine) {
 3619              		.loc 1 51 53 is_stmt 0 view .LVU1099
 3620 006c 2823     		movs	r3, #40
 3621 006e 4FF07E51 		mov	r1, #1065353216
 3622 0072 03FB0043 		mla	r3, r3, r0, r4
 3623 0076 03F55D52 		add	r2, r3, #14144
 3624 007a 9163     		str	r1, [r2, #56]	@ float
  52:Polyphony.cpp ****                         modulations_[voice_idx].trigger_patched = true;
 3625              		.loc 1 52 21 is_stmt 1 view .LVU1100
 3626 007c 43F28372 		movw	r2, #14211
 3627 0080 03F80290 		strb	r9, [r3, r2]
  57:Polyphony.cpp ****                 }
 3628              		.loc 1 57 21 view .LVU1101
  57:Polyphony.cpp ****                 }
 3629              		.loc 1 57 56 is_stmt 0 view .LVU1102
 3630 0084 4423     		movs	r3, #68
 3631 0086 03FB0040 		mla	r0, r3, r0, r4
 3632              	.LVL223:
  57:Polyphony.cpp ****                 }
 3633              		.loc 1 57 56 view .LVU1103
 3634 008a 00F56050 		add	r0, r0, #14336
 3635 008e FFF7FEFF 		bl	_ZN13VoiceEnvelope7TriggerEv
 3636              	.LVL224:
 3637              	.L177:
  57:Polyphony.cpp ****                 }
 3638              		.loc 1 57 56 view .LVU1104
 3639              	.LBE1580:
 3640              	.LBE1579:
 3641              	.LBE1587:
 3642              	.LBE1591:
  40:Polyphony.cpp ****         bool pad_currently_pressed = (current_touch_state_param >> i) & 1;
 3643              		.loc 1 40 5 is_stmt 1 discriminator 2 view .LVU1105
 3644 0092 0135     		adds	r5, r5, #1
 3645              	.LVL225:
  40:Polyphony.cpp ****         bool pad_currently_pressed = (current_touch_state_param >> i) & 1;
 3646              		.loc 1 40 23 discriminator 2 view .LVU1106
 3647 0094 0C2D     		cmp	r5, #12
 3648 0096 C8D1     		bne	.L181
 3649              	.LBE1596:
  79:Polyphony.cpp **** 
 3650              		.loc 1 79 1 is_stmt 0 view .LVU1107
 3651 0098 05B0     		add	sp, sp, #20
 3652              		.cfi_remember_state
 3653              		.cfi_def_cfa_offset 36
 3654              		@ sp needed
 3655 009a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3656              	.LVL226:
 3657              	.L178:
 3658              		.cfi_restore_state
 3659              	.LBB1597:
 3660              	.LBB1592:
 3661              	.LBB1588:
 3662              	.LBB1581:
  60:Polyphony.cpp ****             }
 3663              		.loc 1 60 17 is_stmt 1 view .LVU1108
  60:Polyphony.cpp ****             }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 134


 3664              		.loc 1 60 31 is_stmt 0 view .LVU1109
 3665 009e 4946     		mov	r1, r9
 3666 00a0 2046     		mov	r0, r4
 3667 00a2 FFF7FEFF 		bl	_ZN15PolyphonyEngine14AssignMonoNoteEfb
 3668              	.LVL227:
  60:Polyphony.cpp ****             }
 3669              		.loc 1 60 31 view .LVU1110
 3670 00a6 F4E7     		b	.L177
 3671              	.LVL228:
 3672              	.L176:
  60:Polyphony.cpp ****             }
 3673              		.loc 1 60 31 view .LVU1111
 3674              	.LBE1581:
 3675              	.LBE1588:
 3676              	.LBE1592:
 3677              	.LBE1597:
  62:Polyphony.cpp ****             if (poly_mode) {
 3678              		.loc 1 62 16 is_stmt 1 discriminator 1 view .LVU1112
 3679              	.LBB1598:
 3680              	.LBB1593:
 3681              	.LBB1589:
 3682              	.LBB1582:
  62:Polyphony.cpp ****             if (poly_mode) {
 3683              		.loc 1 62 43 is_stmt 0 discriminator 1 view .LVU1113
 3684 00a8 002B     		cmp	r3, #0
 3685 00aa F2D0     		beq	.L177
 3686              	.LBE1582:
 3687              	.LBE1589:
 3688              	.LBE1593:
 3689              	.LBE1598:
  63:Polyphony.cpp ****                  int voice_idx = FindVoiceForNote(note_for_pad, engine_index, poly_mode, effective_
 3690              		.loc 1 63 13 is_stmt 1 view .LVU1114
 3691              	.LBB1599:
 3692              	.LBB1594:
 3693              	.LBB1590:
 3694              	.LBB1585:
 3695              	.LBB1583:
 3696 00ac B8F1000F 		cmp	r8, #0
 3697 00b0 1CD0     		beq	.L179
 3698              	.LBB1584:
  64:Polyphony.cpp ****                  if (voice_idx != -1) {
 3699              		.loc 1 64 18 view .LVU1115
  64:Polyphony.cpp ****                  if (voice_idx != -1) {
 3700              		.loc 1 64 50 is_stmt 0 view .LVU1116
 3701 00b2 5B46     		mov	r3, fp
 3702              	.LVL229:
  64:Polyphony.cpp ****                  if (voice_idx != -1) {
 3703              		.loc 1 64 50 view .LVU1117
 3704 00b4 0122     		movs	r2, #1
 3705 00b6 3946     		mov	r1, r7
 3706 00b8 2046     		mov	r0, r4
 3707 00ba FFF7FEFF 		bl	_ZN15PolyphonyEngine16FindVoiceForNoteEfibi
 3708              	.LVL230:
  65:Polyphony.cpp ****                      voice_active_[voice_idx] = false; 
 3709              		.loc 1 65 18 view .LVU1118
 3710 00be 421C     		adds	r2, r0, #1
  64:Polyphony.cpp ****                  if (voice_idx != -1) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 135


 3711              		.loc 1 64 50 view .LVU1119
 3712 00c0 0346     		mov	r3, r0
 3713              	.LVL231:
  65:Polyphony.cpp ****                      voice_active_[voice_idx] = false; 
 3714              		.loc 1 65 18 is_stmt 1 view .LVU1120
 3715 00c2 E6D0     		beq	.L177
  66:Polyphony.cpp ****                      voice_envelopes_[voice_idx].Release(); 
 3716              		.loc 1 66 22 view .LVU1121
  66:Polyphony.cpp ****                      voice_envelopes_[voice_idx].Release(); 
 3717              		.loc 1 66 47 is_stmt 0 view .LVU1122
 3718 00c4 2118     		adds	r1, r4, r0
  67:Polyphony.cpp ****                      modulations_[voice_idx].trigger_patched = false; 
 3719              		.loc 1 67 57 view .LVU1123
 3720 00c6 4420     		movs	r0, #68
 3721              	.LVL232:
  66:Polyphony.cpp ****                      voice_envelopes_[voice_idx].Release(); 
 3722              		.loc 1 66 47 view .LVU1124
 3723 00c8 43F61012 		movw	r2, #14608
  67:Polyphony.cpp ****                      modulations_[voice_idx].trigger_patched = false; 
 3724              		.loc 1 67 57 view .LVU1125
 3725 00cc 0393     		str	r3, [sp, #12]
 3726 00ce 00FB0340 		mla	r0, r0, r3, r4
  66:Polyphony.cpp ****                      voice_envelopes_[voice_idx].Release(); 
 3727              		.loc 1 66 47 view .LVU1126
 3728 00d2 8E54     		strb	r6, [r1, r2]
  67:Polyphony.cpp ****                      modulations_[voice_idx].trigger_patched = false; 
 3729              		.loc 1 67 22 is_stmt 1 view .LVU1127
  67:Polyphony.cpp ****                      modulations_[voice_idx].trigger_patched = false; 
 3730              		.loc 1 67 57 is_stmt 0 view .LVU1128
 3731 00d4 00F56050 		add	r0, r0, #14336
 3732 00d8 FFF7FEFF 		bl	_ZN13VoiceEnvelope7ReleaseEv
 3733              	.LVL233:
  68:Polyphony.cpp ****                  }
 3734              		.loc 1 68 22 is_stmt 1 view .LVU1129
  68:Polyphony.cpp ****                  }
 3735              		.loc 1 68 62 is_stmt 0 view .LVU1130
 3736 00dc 2820     		movs	r0, #40
 3737 00de 039B     		ldr	r3, [sp, #12]
 3738 00e0 43F28372 		movw	r2, #14211
 3739 00e4 00FB0343 		mla	r3, r0, r3, r4
 3740 00e8 9E54     		strb	r6, [r3, r2]
 3741 00ea D2E7     		b	.L177
 3742              	.LVL234:
 3743              	.L179:
  68:Polyphony.cpp ****                  }
 3744              		.loc 1 68 62 view .LVU1131
 3745              	.LBE1584:
  71:Polyphony.cpp ****                     voice_active_[0] = false; 
 3746              		.loc 1 71 17 is_stmt 1 view .LVU1132
  71:Polyphony.cpp ****                     voice_active_[0] = false; 
 3747              		.loc 1 71 36 is_stmt 0 view .LVU1133
 3748 00ec 04F54056 		add	r6, r4, #12288
  71:Polyphony.cpp ****                     voice_active_[0] = false; 
 3749              		.loc 1 71 17 view .LVU1134
 3750 00f0 96F81039 		ldrb	r3, [r6, #2320]	@ zero_extendqisi2
 3751              	.LVL235:
  71:Polyphony.cpp ****                     voice_active_[0] = false; 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 136


 3752              		.loc 1 71 17 view .LVU1135
 3753 00f4 002B     		cmp	r3, #0
 3754 00f6 CCD0     		beq	.L177
  71:Polyphony.cpp ****                     voice_active_[0] = false; 
 3755              		.loc 1 71 60 discriminator 1 view .LVU1136
 3756 00f8 06F61413 		addw	r3, r6, #2324
  71:Polyphony.cpp ****                     voice_active_[0] = false; 
 3757              		.loc 1 71 38 discriminator 1 view .LVU1137
 3758 00fc 9FED0A7A 		vldr.32	s14, .L196
  71:Polyphony.cpp ****                     voice_active_[0] = false; 
 3759              		.loc 1 71 62 discriminator 1 view .LVU1138
 3760 0100 D3ED007A 		vldr.32	s15, [r3]
 3761 0104 77EEC07A 		vsub.f32	s15, s15, s0
  71:Polyphony.cpp ****                     voice_active_[0] = false; 
 3762              		.loc 1 71 46 discriminator 1 view .LVU1139
 3763 0108 F0EEE77A 		vabs.f32	s15, s15
  71:Polyphony.cpp ****                     voice_active_[0] = false; 
 3764              		.loc 1 71 38 discriminator 1 view .LVU1140
 3765 010c F4EEC77A 		vcmpe.f32	s15, s14
 3766 0110 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3767 0114 BDD5     		bpl	.L177
  72:Polyphony.cpp ****                     voice_envelopes_[0].Release();
 3768              		.loc 1 72 21 is_stmt 1 view .LVU1141
  73:Polyphony.cpp ****                     modulations_[0].trigger_patched = false;
 3769              		.loc 1 73 48 is_stmt 0 view .LVU1142
 3770 0116 04F56050 		add	r0, r4, #14336
  72:Polyphony.cpp ****                     voice_envelopes_[0].Release();
 3771              		.loc 1 72 38 view .LVU1143
 3772 011a 86F81089 		strb	r8, [r6, #2320]
  73:Polyphony.cpp ****                     modulations_[0].trigger_patched = false;
 3773              		.loc 1 73 21 is_stmt 1 view .LVU1144
  73:Polyphony.cpp ****                     modulations_[0].trigger_patched = false;
 3774              		.loc 1 73 48 is_stmt 0 view .LVU1145
 3775 011e FFF7FEFF 		bl	_ZN13VoiceEnvelope7ReleaseEv
 3776              	.LVL236:
  74:Polyphony.cpp ****                 }
 3777              		.loc 1 74 21 is_stmt 1 view .LVU1146
  74:Polyphony.cpp ****                 }
 3778              		.loc 1 74 53 is_stmt 0 view .LVU1147
 3779 0122 86F88387 		strb	r8, [r6, #1923]
 3780 0126 B4E7     		b	.L177
 3781              	.L197:
 3782              		.align	2
 3783              	.L196:
 3784 0128 CDCCCC3D 		.word	1036831949
 3785 012c 00000000 		.word	.LANCHOR0
 3786              	.LBE1583:
 3787              	.LBE1585:
 3788              	.LBE1590:
 3789              	.LBE1594:
 3790              	.LBE1599:
 3791              		.cfi_endproc
 3792              	.LFE5849:
 3794              		.section	.text._ZN15PolyphonyEngine15TriggerArpVoiceEii,"ax",%progbits
 3795              		.align	1
 3796              		.global	_ZN15PolyphonyEngine15TriggerArpVoiceEii
 3797              		.syntax unified
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 137


 3798              		.thumb
 3799              		.thumb_func
 3801              	_ZN15PolyphonyEngine15TriggerArpVoiceEii:
 3802              	.LVL237:
 3803              	.LFB5869:
 396:Polyphony.cpp **** 
 397:Polyphony.cpp **** void PolyphonyEngine::TriggerArpVoice(int pad_idx, int current_engine_index_val) {
 3804              		.loc 1 397 82 is_stmt 1 view -0
 3805              		.cfi_startproc
 3806              		@ args = 0, pretend = 0, frame = 32
 3807              		@ frame_needed = 0, uses_anonymous_args = 0
 398:Polyphony.cpp ****     if (pad_idx < 0 || pad_idx >= 12) return;
 3808              		.loc 1 398 5 view .LVU1149
 3809 0000 0B29     		cmp	r1, #11
 397:Polyphony.cpp ****     if (pad_idx < 0 || pad_idx >= 12) return;
 3810              		.loc 1 397 82 is_stmt 0 view .LVU1150
 3811 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 3812              		.cfi_def_cfa_offset 20
 3813              		.cfi_offset 4, -20
 3814              		.cfi_offset 5, -16
 3815              		.cfi_offset 6, -12
 3816              		.cfi_offset 7, -8
 3817              		.cfi_offset 14, -4
 3818 0004 0446     		mov	r4, r0
 3819 0006 89B0     		sub	sp, sp, #36
 3820              		.cfi_def_cfa_offset 56
 397:Polyphony.cpp ****     if (pad_idx < 0 || pad_idx >= 12) return;
 3821              		.loc 1 397 82 view .LVU1151
 3822 0008 1646     		mov	r6, r2
 3823              		.loc 1 398 5 view .LVU1152
 3824 000a 2CD8     		bhi	.L198
 399:Polyphony.cpp **** 
 400:Polyphony.cpp ****     float note_to_play = kTouchMidiNotes_[pad_idx];
 3825              		.loc 1 400 5 is_stmt 1 view .LVU1153
 3826              		.loc 1 400 11 is_stmt 0 view .LVU1154
 3827 000c 174B     		ldr	r3, .L201
 401:Polyphony.cpp ****     bool percussive = (current_engine_index_val > 7);
 402:Polyphony.cpp **** 
 403:Polyphony.cpp ****     voice_note_[0] = note_to_play;
 3828              		.loc 1 403 20 view .LVU1155
 3829 000e 00F54055 		add	r5, r0, #12288
 404:Polyphony.cpp ****     voice_active_[0] = true;
 3830              		.loc 1 404 22 view .LVU1156
 3831 0012 0127     		movs	r7, #1
 405:Polyphony.cpp **** 
 406:Polyphony.cpp ****     PatchParams patch_params;
 407:Polyphony.cpp ****     patch_params.engine_idx = current_engine_index_val;
 3832              		.loc 1 407 29 view .LVU1157
 3833 0014 0096     		str	r6, [sp]
 400:Polyphony.cpp ****     bool percussive = (current_engine_index_val > 7);
 3834              		.loc 1 400 11 view .LVU1158
 3835 0016 03EB8101 		add	r1, r3, r1, lsl #2
 3836              	.LVL238:
 403:Polyphony.cpp ****     voice_active_[0] = true;
 3837              		.loc 1 403 20 view .LVU1159
 3838 001a 05F61412 		addw	r2, r5, #2324
 3839              	.LVL239:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 138


 408:Polyphony.cpp ****     patch_params.note = note_to_play;
 409:Polyphony.cpp ****     patch_params.global_pitch_offset = 0.0f;
 410:Polyphony.cpp ****     patch_params.harmonics = 0.5f;  // Default values
 411:Polyphony.cpp ****     patch_params.timbre = 0.5f;
 412:Polyphony.cpp ****     patch_params.morph = 0.5f;
 413:Polyphony.cpp ****     patch_params.arp_on = true;
 3840              		.loc 1 413 25 view .LVU1160
 3841 001e 8DF81870 		strb	r7, [sp, #24]
 400:Polyphony.cpp ****     bool percussive = (current_engine_index_val > 7);
 3842              		.loc 1 400 11 view .LVU1161
 3843 0022 0B68     		ldr	r3, [r1]	@ float
 3844              	.LVL240:
 401:Polyphony.cpp **** 
 3845              		.loc 1 401 5 is_stmt 1 view .LVU1162
 403:Polyphony.cpp ****     voice_active_[0] = true;
 3846              		.loc 1 403 5 view .LVU1163
 414:Polyphony.cpp ****     patch_params.decay = 0.5f;
 415:Polyphony.cpp ****     
 416:Polyphony.cpp ****     UpdatePatchParams(patches_[0], patch_params);
 3847              		.loc 1 416 22 is_stmt 0 view .LVU1164
 3848 0024 00F55B51 		add	r1, r0, #14016
 403:Polyphony.cpp ****     voice_active_[0] = true;
 3849              		.loc 1 403 20 view .LVU1165
 3850 0028 1360     		str	r3, [r2]	@ float
 404:Polyphony.cpp **** 
 3851              		.loc 1 404 5 is_stmt 1 view .LVU1166
 3852              		.loc 1 416 22 is_stmt 0 view .LVU1167
 3853 002a 6A46     		mov	r2, sp
 408:Polyphony.cpp ****     patch_params.global_pitch_offset = 0.0f;
 3854              		.loc 1 408 23 view .LVU1168
 3855 002c 0193     		str	r3, [sp, #4]	@ float
 409:Polyphony.cpp ****     patch_params.harmonics = 0.5f;  // Default values
 3856              		.loc 1 409 38 view .LVU1169
 3857 002e 0023     		movs	r3, #0
 3858              	.LVL241:
 404:Polyphony.cpp **** 
 3859              		.loc 1 404 22 view .LVU1170
 3860 0030 85F81079 		strb	r7, [r5, #2320]
 406:Polyphony.cpp ****     patch_params.engine_idx = current_engine_index_val;
 3861              		.loc 1 406 5 is_stmt 1 view .LVU1171
 407:Polyphony.cpp ****     patch_params.note = note_to_play;
 3862              		.loc 1 407 5 view .LVU1172
 408:Polyphony.cpp ****     patch_params.global_pitch_offset = 0.0f;
 3863              		.loc 1 408 5 view .LVU1173
 409:Polyphony.cpp ****     patch_params.harmonics = 0.5f;  // Default values
 3864              		.loc 1 409 5 view .LVU1174
 409:Polyphony.cpp ****     patch_params.harmonics = 0.5f;  // Default values
 3865              		.loc 1 409 38 is_stmt 0 view .LVU1175
 3866 0034 0293     		str	r3, [sp, #8]	@ float
 410:Polyphony.cpp ****     patch_params.timbre = 0.5f;
 3867              		.loc 1 410 5 is_stmt 1 view .LVU1176
 410:Polyphony.cpp ****     patch_params.timbre = 0.5f;
 3868              		.loc 1 410 28 is_stmt 0 view .LVU1177
 3869 0036 4FF07C53 		mov	r3, #1056964608
 3870 003a 0393     		str	r3, [sp, #12]	@ float
 411:Polyphony.cpp ****     patch_params.morph = 0.5f;
 3871              		.loc 1 411 5 is_stmt 1 view .LVU1178
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 139


 411:Polyphony.cpp ****     patch_params.morph = 0.5f;
 3872              		.loc 1 411 25 is_stmt 0 view .LVU1179
 3873 003c 0493     		str	r3, [sp, #16]	@ float
 412:Polyphony.cpp ****     patch_params.arp_on = true;
 3874              		.loc 1 412 5 is_stmt 1 view .LVU1180
 412:Polyphony.cpp ****     patch_params.arp_on = true;
 3875              		.loc 1 412 24 is_stmt 0 view .LVU1181
 3876 003e 0593     		str	r3, [sp, #20]	@ float
 413:Polyphony.cpp ****     patch_params.decay = 0.5f;
 3877              		.loc 1 413 5 is_stmt 1 view .LVU1182
 414:Polyphony.cpp ****     
 3878              		.loc 1 414 5 view .LVU1183
 414:Polyphony.cpp ****     
 3879              		.loc 1 414 24 is_stmt 0 view .LVU1184
 3880 0040 0793     		str	r3, [sp, #28]	@ float
 3881              		.loc 1 416 5 is_stmt 1 view .LVU1185
 3882              		.loc 1 416 22 is_stmt 0 view .LVU1186
 3883 0042 FFF7FEFF 		bl	_ZN15PolyphonyEngine17UpdatePatchParamsERN6plaits5PatchERK11PatchParams
 3884              	.LVL242:
 417:Polyphony.cpp **** 
 418:Polyphony.cpp ****     modulations_[0].trigger = 1.0f;
 3885              		.loc 1 418 5 is_stmt 1 view .LVU1187
 3886              		.loc 1 418 29 is_stmt 0 view .LVU1188
 3887 0046 05F5EF63 		add	r3, r5, #1912
 3888 004a 4FF07E52 		mov	r2, #1065353216
 419:Polyphony.cpp ****     modulations_[0].trigger_patched = true;
 420:Polyphony.cpp **** 
 421:Polyphony.cpp ****     if (!percussive) {
 3889              		.loc 1 421 5 view .LVU1189
 3890 004e 072E     		cmp	r6, #7
 418:Polyphony.cpp ****     modulations_[0].trigger_patched = true;
 3891              		.loc 1 418 29 view .LVU1190
 3892 0050 1A60     		str	r2, [r3]	@ float
 419:Polyphony.cpp ****     modulations_[0].trigger_patched = true;
 3893              		.loc 1 419 5 is_stmt 1 view .LVU1191
 419:Polyphony.cpp ****     modulations_[0].trigger_patched = true;
 3894              		.loc 1 419 37 is_stmt 0 view .LVU1192
 3895 0052 85F88377 		strb	r7, [r5, #1923]
 3896              		.loc 1 421 5 is_stmt 1 view .LVU1193
 3897 0056 06DC     		bgt	.L198
 422:Polyphony.cpp ****         voice_envelopes_[0].SetMode(VoiceEnvelope::MODE_AR);
 3898              		.loc 1 422 9 view .LVU1194
 3899              	.LVL243:
 3900              	.LBB1600:
 3901              	.LBI1600:
  43:VoiceEnvelope.h ****         mode = new_mode;
 3902              		.loc 3 43 10 view .LVU1195
 3903              	.LBB1601:
  44:VoiceEnvelope.h ****     }
 3904              		.loc 3 44 9 view .LVU1196
  44:VoiceEnvelope.h ****     }
 3905              		.loc 3 44 14 is_stmt 0 view .LVU1197
 3906 0058 0023     		movs	r3, #0
 3907              	.LBE1601:
 3908              	.LBE1600:
 423:Polyphony.cpp ****         voice_envelopes_[0].Trigger();
 3909              		.loc 1 423 36 view .LVU1198
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 140


 3910 005a 04F56050 		add	r0, r4, #14336
 3911              	.LVL244:
 3912              	.LBB1603:
 3913              	.LBB1602:
  44:VoiceEnvelope.h ****     }
 3914              		.loc 3 44 14 view .LVU1199
 3915 005e 85F80138 		strb	r3, [r5, #2049]
 3916              	.LVL245:
  44:VoiceEnvelope.h ****     }
 3917              		.loc 3 44 14 view .LVU1200
 3918              	.LBE1602:
 3919              	.LBE1603:
 3920              		.loc 1 423 9 is_stmt 1 view .LVU1201
 3921              		.loc 1 423 36 is_stmt 0 view .LVU1202
 3922 0062 FFF7FEFF 		bl	_ZN13VoiceEnvelope7TriggerEv
 3923              	.LVL246:
 3924              	.L198:
 424:Polyphony.cpp ****     }
 425:Polyphony.cpp **** }
 3925              		.loc 1 425 1 view .LVU1203
 3926 0066 09B0     		add	sp, sp, #36
 3927              		.cfi_def_cfa_offset 20
 3928              		@ sp needed
 3929 0068 F0BD     		pop	{r4, r5, r6, r7, pc}
 3930              	.LVL247:
 3931              	.L202:
 3932              		.loc 1 425 1 view .LVU1204
 3933 006a 00BF     		.align	2
 3934              	.L201:
 3935 006c 00000000 		.word	.LANCHOR0
 3936              		.cfi_endproc
 3937              	.LFE5869:
 3939              		.section	.text._ZNK15PolyphonyEngine16IsAnyVoiceActiveEv,"ax",%progbits
 3940              		.align	1
 3941              		.global	_ZNK15PolyphonyEngine16IsAnyVoiceActiveEv
 3942              		.syntax unified
 3943              		.thumb
 3944              		.thumb_func
 3946              	_ZNK15PolyphonyEngine16IsAnyVoiceActiveEv:
 3947              	.LVL248:
 3948              	.LFB5870:
 426:Polyphony.cpp **** 
 427:Polyphony.cpp **** bool PolyphonyEngine::IsAnyVoiceActive() const {
 3949              		.loc 1 427 48 is_stmt 1 view -0
 3950              		.cfi_startproc
 3951              		@ args = 0, pretend = 0, frame = 0
 3952              		@ frame_needed = 0, uses_anonymous_args = 0
 3953              		@ link register save eliminated.
 428:Polyphony.cpp ****     for (int i = 0; i < NUM_VOICES; ++i) {
 3954              		.loc 1 428 5 view .LVU1206
 3955              	.LBB1604:
 3956              		.loc 1 428 23 view .LVU1207
 3957 0000 00F56452 		add	r2, r0, #14592
 3958 0004 00F56453 		add	r3, r0, #14592
 3959 0008 1032     		adds	r2, r2, #16
 3960 000a 1433     		adds	r3, r3, #20
 3961              	.LVL249:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 141


 3962              	.L205:
 429:Polyphony.cpp ****         if (voice_active_[i]) {
 3963              		.loc 1 429 9 view .LVU1208
 3964              		.loc 1 429 28 is_stmt 0 view .LVU1209
 3965 000c 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 3966              	.LVL250:
 3967              		.loc 1 429 9 view .LVU1210
 3968 0010 08B9     		cbnz	r0, .L204
 428:Polyphony.cpp ****     for (int i = 0; i < NUM_VOICES; ++i) {
 3969              		.loc 1 428 5 is_stmt 1 discriminator 2 view .LVU1211
 3970              	.LVL251:
 428:Polyphony.cpp ****     for (int i = 0; i < NUM_VOICES; ++i) {
 3971              		.loc 1 428 23 discriminator 2 view .LVU1212
 3972 0012 9A42     		cmp	r2, r3
 3973 0014 FAD1     		bne	.L205
 3974              	.LVL252:
 3975              	.L204:
 428:Polyphony.cpp ****     for (int i = 0; i < NUM_VOICES; ++i) {
 3976              		.loc 1 428 23 is_stmt 0 discriminator 2 view .LVU1213
 3977              	.LBE1604:
 430:Polyphony.cpp ****             return true;
 431:Polyphony.cpp ****         }
 432:Polyphony.cpp ****     }
 433:Polyphony.cpp ****     return false;
 434:Polyphony.cpp **** }
 3978              		.loc 1 434 1 view .LVU1214
 3979 0016 7047     		bx	lr
 3980              		.cfi_endproc
 3981              	.LFE5870:
 3983              		.section	.text.startup._GLOBAL__sub_I_shared_buffer,"ax",%progbits
 3984              		.align	1
 3985              		.syntax unified
 3986              		.thumb
 3987              		.thumb_func
 3989              	_GLOBAL__sub_I_shared_buffer:
 3990              	.LFB6592:
 3991              		.loc 1 434 1 is_stmt 1 view -0
 3992              		.cfi_startproc
 3993              		@ args = 0, pretend = 0, frame = 0
 3994              		@ frame_needed = 0, uses_anonymous_args = 0
 3995              	.LBB1607:
 3996              	.LBI1607:
 3997              		.loc 1 434 1 view .LVU1216
 3998              	.LVL253:
 3999              		.loc 1 434 1 is_stmt 0 view .LVU1217
 4000              	.LBE1607:
 4001 0000 10B5     		push	{r4, lr}
 4002              		.cfi_def_cfa_offset 8
 4003              		.cfi_offset 4, -8
 4004              		.cfi_offset 14, -4
 4005              	.LBB1610:
 4006              	.LBB1608:
  10:Polyphony.cpp **** 
 4007              		.loc 1 10 17 view .LVU1218
 4008 0002 054C     		ldr	r4, .L208
 4009 0004 2046     		mov	r0, r4
 4010 0006 FFF7FEFF 		bl	_ZN15PolyphonyEngineC1Ev
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 142


 4011              	.LVL254:
 4012 000a 2046     		mov	r0, r4
 4013 000c 034A     		ldr	r2, .L208+4
 4014 000e 0449     		ldr	r1, .L208+8
 4015              	.LBE1608:
 4016              	.LBE1610:
 4017              		.loc 1 434 1 view .LVU1219
 4018 0010 BDE81040 		pop	{r4, lr}
 4019              		.cfi_restore 14
 4020              		.cfi_restore 4
 4021              		.cfi_def_cfa_offset 0
 4022              	.LBB1611:
 4023              	.LBB1609:
  10:Polyphony.cpp **** 
 4024              		.loc 1 10 17 view .LVU1220
 4025 0014 FFF7FEBF 		b	__aeabi_atexit
 4026              	.LVL255:
 4027              	.L209:
 4028              		.align	2
 4029              	.L208:
 4030 0018 00000000 		.word	poly_engine
 4031 001c 00000000 		.word	__dso_handle
 4032 0020 00000000 		.word	_ZN15PolyphonyEngineD1Ev
 4033              	.LBE1609:
 4034              	.LBE1611:
 4035              		.cfi_endproc
 4036              	.LFE6592:
 4038              		.section	.init_array,"aw",%init_array
 4039              		.align	2
 4040 0000 00000000 		.word	_GLOBAL__sub_I_shared_buffer(target1)
 4041              		.global	_ZN15PolyphonyEngine16kTouchMidiNotes_E
 4042              		.global	poly_engine
 4043              		.global	MAX_ENGINE_INDEX
 4044              		.global	shared_buffer
 4045              		.section	.bss.poly_engine,"aw",%nobits
 4046              		.align	2
 4049              	poly_engine:
 4050 0000 00000000 		.space	15024
 4050      00000000 
 4050      00000000 
 4050      00000000 
 4050      00000000 
 4051              		.section	.rodata.MAX_ENGINE_INDEX,"a"
 4052              		.align	2
 4055              	MAX_ENGINE_INDEX:
 4056 0000 0C000000 		.word	12
 4057              		.section	.rodata._ZN15PolyphonyEngine16kTouchMidiNotes_E,"a"
 4058              		.align	2
 4059              		.set	.LANCHOR0,. + 0
 4062              	_ZN15PolyphonyEngine16kTouchMidiNotes_E:
 4063 0000 00002042 		.word	1109393408
 4064 0004 00002442 		.word	1109655552
 4065 0008 00002C42 		.word	1110179840
 4066 000c 00003442 		.word	1110704128
 4067 0010 00003C42 		.word	1111228416
 4068 0014 00004042 		.word	1111490560
 4069 0018 00004842 		.word	1112014848
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 143


 4070 001c 00005042 		.word	1112539136
 4071 0020 00005442 		.word	1112801280
 4072 0024 00005C42 		.word	1113325568
 4073 0028 00006442 		.word	1113849856
 4074 002c 00006C42 		.word	1114374144
 4075              		.section	.sdram_bss,"aw"
 4078              	shared_buffer:
 4079 0000 00000000 		.space	262144
 4079      00000000 
 4079      00000000 
 4079      00000000 
 4079      00000000 
 4080              		.text
 4081              	.Letext0:
 4082              		.file 41 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/machine/_default_types.h"
 4083              		.file 42 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/_stdint.h"
 4084              		.file 43 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdint.h"
 4085              		.file 44 "/Library/DaisyToolchain/0.2.0/arm/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 4086              		.file 45 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cmath"
 4087              		.file 46 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h"
 4088              		.file 47 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdlib"
 4089              		.file 48 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdint"
 4090              		.file 49 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/type_traits"
 4091              		.file 50 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/debug/debug.h"
 4092              		.file 51 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/arm-none-eabi/thumb/v
 4093              		.file 52 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/algorithmfwd.h"
 4094              		.file 53 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h"
 4095              		.file 54 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/exception_ptr.h"
 4096              		.file 55 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdarg"
 4097              		.file 56 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdio"
 4098              		.file 57 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstring"
 4099              		.file 58 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cwchar"
 4100              		.file 59 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/clocale"
 4101              		.file 60 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/basic_string.h"
 4102              		.file 61 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_iterator.h"
 4103              		.file 62 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/uses_allocator.h
 4104              		.file 63 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/tuple"
 4105              		.file 64 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/functional"
 4106              		.file 65 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/predefined_ops.h
 4107              		.file 66 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/_types.h"
 4108              		.file 67 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/reent.h"
 4109              		.file 68 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/lock.h"
 4110              		.file 69 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/math.h"
 4111              		.file 70 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdlib.h"
 4112              		.file 71 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/math.h"
 4113              		.file 72 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/stdlib.h"
 4114              		.file 73 "lib/libdaisy/src/daisy_core.h"
 4115              		.file 74 "lib/libdaisy/src/per/tim.h"
 4116              		.file 75 "lib/libdaisy/src/sys/system.h"
 4117              		.file 76 "lib/libdaisy/src/per/qspi.h"
 4118              		.file 77 "lib/libdaisy/src/per/dac.h"
 4119              		.file 78 "lib/libdaisy/src/per/gpio.h"
 4120              		.file 79 "lib/libdaisy/src/per/sai.h"
 4121              		.file 80 "lib/libdaisy/src/hid/audio.h"
 4122              		.file 81 "lib/libdaisy/src/per/adc.h"
 4123              		.file 82 "lib/libdaisy/src/hid/usb.h"
 4124              		.file 83 "lib/libdaisy/src/util/wav_format.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 144


 4125              		.file 84 "lib/libdaisy/src/dev/sr_595.h"
 4126              		.file 85 "lib/libdaisy/src/dev/codec_ak4556.h"
 4127              		.file 86 "lib/libdaisy/src/dev/max11300.h"
 4128              		.file 87 "lib/libdaisy/src/daisy_seed.h"
 4129              		.file 88 "lib/libdaisy/src/dev/sdram.h"
 4130              		.file 89 "/Library/DaisyToolchain/0.2.0/arm/lib/gcc/arm-none-eabi/10.3.1/include/stdarg.h"
 4131              		.file 90 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdio.h"
 4132              		.file 91 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/string.h"
 4133              		.file 92 "lib/DaisySP/Source/Control/adenv.h"
 4134              		.file 93 "lib/DaisySP/Source/Utility/dsp.h"
 4135              		.file 94 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/wchar.h"
 4136              		.file 95 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/locale.h"
 4137              		.file 96 "eurorack/stmlib/stmlib.h"
 4138              		.file 97 "eurorack/stmlib/dsp/cosine_oscillator.h"
 4139              		.file 98 "eurorack/plaits/dsp/dsp.h"
 4140              		.file 99 "eurorack/plaits/dsp/oscillator/harmonic_oscillator.h"
 4141              		.file 100 "eurorack/plaits/dsp/engine/chord_engine.h"
 4142              		.file 101 "eurorack/plaits/dsp/oscillator/grainlet_oscillator.h"
 4143              		.file 102 "eurorack/plaits/dsp/noise/clocked_noise.h"
 4144              		.file 103 "eurorack/plaits/dsp/noise/particle.h"
 4145              		.file 104 "eurorack/plaits/dsp/physical_modelling/string.h"
 4146              		.file 105 "eurorack/plaits/dsp/physical_modelling/string_voice.h"
 4147              		.file 106 "mpr121_daisy.h"
 4148              		.file 107 "Effects/BiquadFilters.h"
 4149              		.file 108 "Arpeggiator.h"
 4150              		.file 109 "Polyphony.h"
 4151              		.file 110 "Thaumazein.h"
 4152              		.file 111 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/new"
 4153              		.file 112 "<built-in>"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 145


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Polyphony.cpp
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:19     .text._ZN15PolyphonyEngineD2Ev:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:25     .text._ZN15PolyphonyEngineD2Ev:0000000000000000 _ZN15PolyphonyEngineD2Ev
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:25     .text._ZN15PolyphonyEngineD2Ev:0000000000000000 _ZN15PolyphonyEngineD1Ev
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:76     .text._ZN13VoiceEnvelope7TriggerEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:82     .text._ZN13VoiceEnvelope7TriggerEv:0000000000000000 _ZN13VoiceEnvelope7TriggerEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:181    .text._ZN13VoiceEnvelope7ReleaseEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:187    .text._ZN13VoiceEnvelope7ReleaseEv:0000000000000000 _ZN13VoiceEnvelope7ReleaseEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:266    .text._ZN13VoiceEnvelope5ResetEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:272    .text._ZN13VoiceEnvelope5ResetEv:0000000000000000 _ZN13VoiceEnvelope5ResetEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:311    .text._ZN15PolyphonyEngineC2Ev:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:317    .text._ZN15PolyphonyEngineC2Ev:0000000000000000 _ZN15PolyphonyEngineC2Ev
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:958    .text._ZN15PolyphonyEngineC2Ev:00000000000000dc $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:317    .text._ZN15PolyphonyEngineC2Ev:0000000000000000 _ZN15PolyphonyEngineC1Ev
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:977    .text._ZN15PolyphonyEngine11ResetVoicesEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:983    .text._ZN15PolyphonyEngine11ResetVoicesEv:0000000000000000 _ZN15PolyphonyEngine11ResetVoicesEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:1054   .text._ZN15PolyphonyEngine14AllocateVoicesEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:1060   .text._ZN15PolyphonyEngine14AllocateVoicesEv:0000000000000000 _ZN15PolyphonyEngine14AllocateVoicesEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:1163   .text._ZN15PolyphonyEngine14AllocateVoicesEv:0000000000000040 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:4078   .sdram_bss:0000000000000000 shared_buffer
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:1168   .text._ZN15PolyphonyEngine19InitVoiceParametersEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:1174   .text._ZN15PolyphonyEngine19InitVoiceParametersEv:0000000000000000 _ZN15PolyphonyEngine19InitVoiceParametersEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:1413   .text._ZN15PolyphonyEngine19InitVoiceParametersEv:00000000000000c8 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:1426   .text._ZN15PolyphonyEngine4InitEPN5daisy9DaisySeedE:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:1432   .text._ZN15PolyphonyEngine4InitEPN5daisy9DaisySeedE:0000000000000000 _ZN15PolyphonyEngine4InitEPN5daisy9DaisySeedE
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:1472   .text._ZN15PolyphonyEngine16ProcessEnvelopesEb:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:1478   .text._ZN15PolyphonyEngine16ProcessEnvelopesEb:0000000000000000 _ZN15PolyphonyEngine16ProcessEnvelopesEb
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:1584   .text._ZN15PolyphonyEngine16ProcessEnvelopesEb:0000000000000078 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:1589   .text._ZN15PolyphonyEngine17UpdatePatchParamsERN6plaits5PatchERK11PatchParams:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:1595   .text._ZN15PolyphonyEngine17UpdatePatchParamsERN6plaits5PatchERK11PatchParams:0000000000000000 _ZN15PolyphonyEngine17UpdatePatchParamsERN6plaits5PatchERK11PatchParams
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:1668   .text._ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:1674   .text._ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff:0000000000000000 _ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:1877   .text._ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff:00000000000000ce $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:2193   .text._ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff:00000000000001fc $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:2203   .text._ZN15PolyphonyEngine17UpdateMonoTriggerERN6plaits11ModulationsERbb:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:2209   .text._ZN15PolyphonyEngine17UpdateMonoTriggerERN6plaits11ModulationsERbb:0000000000000000 _ZN15PolyphonyEngine17UpdateMonoTriggerERN6plaits11ModulationsERbb
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:2236   .text._ZN15PolyphonyEngine12SilenceVoiceEi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:2242   .text._ZN15PolyphonyEngine12SilenceVoiceEi:0000000000000000 _ZN15PolyphonyEngine12SilenceVoiceEi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:2273   .text._ZN15PolyphonyEngine14RetriggerVoiceEi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:2279   .text._ZN15PolyphonyEngine14RetriggerVoiceEi:0000000000000000 _ZN15PolyphonyEngine14RetriggerVoiceEi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:2377   .text._ZN15PolyphonyEngine15PrepVoiceParamsERKNS_16RenderParametersE:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:2383   .text._ZN15PolyphonyEngine15PrepVoiceParamsERKNS_16RenderParametersE:0000000000000000 _ZN15PolyphonyEngine15PrepVoiceParamsERKNS_16RenderParametersE
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:2716   .text._ZN15PolyphonyEngine15PrepVoiceParamsERKNS_16RenderParametersE:0000000000000178 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:2722   .text._ZN15PolyphonyEngine11RenderBlockERKNS_16RenderParametersE:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:2728   .text._ZN15PolyphonyEngine11RenderBlockERKNS_16RenderParametersE:0000000000000000 _ZN15PolyphonyEngine11RenderBlockERKNS_16RenderParametersE
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:2779   .text._ZN15PolyphonyEngine11ClearVoicesEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:2785   .text._ZN15PolyphonyEngine11ClearVoicesEv:0000000000000000 _ZN15PolyphonyEngine11ClearVoicesEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:2865   .text._ZN15PolyphonyEngine10PolyToMonoEi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:2871   .text._ZN15PolyphonyEngine10PolyToMonoEi:0000000000000000 _ZN15PolyphonyEngine10PolyToMonoEi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:3068   .text._ZN15PolyphonyEngine10PolyToMonoEi:00000000000000f4 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:3075   .text._ZN15PolyphonyEngine14OnEngineChangeEii:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:3081   .text._ZN15PolyphonyEngine14OnEngineChangeEii:0000000000000000 _ZN15PolyphonyEngine14OnEngineChangeEii
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:3208   .text._ZNK15PolyphonyEngine17GetLastTouchStateEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:3214   .text._ZNK15PolyphonyEngine17GetLastTouchStateEv:0000000000000000 _ZNK15PolyphonyEngine17GetLastTouchStateEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:3235   .text._ZN15PolyphonyEngine20UpdateLastTouchStateEt:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:3241   .text._ZN15PolyphonyEngine20UpdateLastTouchStateEt:0000000000000000 _ZN15PolyphonyEngine20UpdateLastTouchStateEt
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s 			page 146


/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:3261   .text._ZN15PolyphonyEngine13FindFreeVoiceEi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:3267   .text._ZN15PolyphonyEngine13FindFreeVoiceEi:0000000000000000 _ZN15PolyphonyEngine13FindFreeVoiceEi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:3312   .text._ZN15PolyphonyEngine14AssignMonoNoteEfb:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:3318   .text._ZN15PolyphonyEngine14AssignMonoNoteEfb:0000000000000000 _ZN15PolyphonyEngine14AssignMonoNoteEfb
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:3377   .text._ZN15PolyphonyEngine16FindVoiceForNoteEfibi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:3383   .text._ZN15PolyphonyEngine16FindVoiceForNoteEfibi:0000000000000000 _ZN15PolyphonyEngine16FindVoiceForNoteEfibi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:3498   .text._ZN15PolyphonyEngine16FindVoiceForNoteEfibi:0000000000000074 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:3503   .text._ZN15PolyphonyEngine16HandleTouchInputEttibi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:3509   .text._ZN15PolyphonyEngine16HandleTouchInputEttibi:0000000000000000 _ZN15PolyphonyEngine16HandleTouchInputEttibi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:3784   .text._ZN15PolyphonyEngine16HandleTouchInputEttibi:0000000000000128 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:3795   .text._ZN15PolyphonyEngine15TriggerArpVoiceEii:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:3801   .text._ZN15PolyphonyEngine15TriggerArpVoiceEii:0000000000000000 _ZN15PolyphonyEngine15TriggerArpVoiceEii
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:3935   .text._ZN15PolyphonyEngine15TriggerArpVoiceEii:000000000000006c $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:3940   .text._ZNK15PolyphonyEngine16IsAnyVoiceActiveEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:3946   .text._ZNK15PolyphonyEngine16IsAnyVoiceActiveEv:0000000000000000 _ZNK15PolyphonyEngine16IsAnyVoiceActiveEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:3984   .text.startup._GLOBAL__sub_I_shared_buffer:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:3989   .text.startup._GLOBAL__sub_I_shared_buffer:0000000000000000 _GLOBAL__sub_I_shared_buffer
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:4030   .text.startup._GLOBAL__sub_I_shared_buffer:0000000000000018 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:4049   .bss.poly_engine:0000000000000000 poly_engine
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:4039   .init_array:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:4062   .rodata._ZN15PolyphonyEngine16kTouchMidiNotes_E:0000000000000000 _ZN15PolyphonyEngine16kTouchMidiNotes_E
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:4055   .rodata.MAX_ENGINE_INDEX:0000000000000000 MAX_ENGINE_INDEX
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:4046   .bss.poly_engine:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:4052   .rodata.MAX_ENGINE_INDEX:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:4058   .rodata._ZN15PolyphonyEngine16kTouchMidiNotes_E:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:4079   .sdram_bss:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:1883   .text._ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff:00000000000000d3 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccchLLf8.s:1883   .text._ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff:00000000000000d4 $t

UNDEFINED SYMBOLS
_ZdlPvj
memset
_ZTVN6plaits14AdditiveEngineE
_ZTVN6plaits14BassDrumEngineE
_ZTVN6plaits8FMEngineE
_ZTVN6plaits11GrainEngineE
_ZTVN6plaits11HiHatEngineE
_ZTVN6plaits11ModalEngineE
_ZTVN6plaits11NoiseEngineE
_ZTVN6plaits14ParticleEngineE
_ZTVN6plaits15SnareDrumEngineE
_ZTVN6plaits12StringEngineE
_ZTVN6plaits11SwarmEngineE
_ZTVN6plaits19VirtualAnalogEngineE
_ZTVN6plaits17WaveshapingEngineE
_Znwj
_ZN6plaits5Voice4InitEPN6stmlib15BufferAllocatorE
_ZN6plaits5Voice6RenderERKNS_5PatchERKNS_11ModulationsEPNS0_5FrameEj
memcpy
__aeabi_atexit
__dso_handle
