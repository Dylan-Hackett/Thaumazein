ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"Polyphony.cpp"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.__tcf_0,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	__tcf_0:
  25              	.LFB5779:
  26              		.file 1 "Polyphony.cpp"
   1:Polyphony.cpp **** #include "Thaumazein.h"
   2:Polyphony.cpp **** 
   3:Polyphony.cpp **** // --- Polyphony Setup ---
   4:Polyphony.cpp **** plaits::Voice voices[NUM_VOICES];
  27              		.loc 1 4 15 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              		.loc 1 4 15 is_stmt 0 view .LVU1
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE5779:
  37              		.section	.text._Z9FindVoicefi,"ax",%progbits
  38              		.align	1
  39              		.global	_Z9FindVoicefi
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  44              	_Z9FindVoicefi:
  45              	.LVL0:
  46              	.LFB5057:
   5:Polyphony.cpp **** plaits::Patch patches[NUM_VOICES];
   6:Polyphony.cpp **** plaits::Modulations modulations[NUM_VOICES];
   7:Polyphony.cpp **** 
   8:Polyphony.cpp **** // Place the shared buffer in SDRAM using the DSY_SDRAM_BSS attribute
   9:Polyphony.cpp **** // Increase buffer size for 4 voices (256KB)
  10:Polyphony.cpp **** DSY_SDRAM_BSS char shared_buffer[262144]; 
  11:Polyphony.cpp **** 
  12:Polyphony.cpp **** plaits::Voice::Frame output_buffers[NUM_VOICES][BLOCK_SIZE]; 
  13:Polyphony.cpp **** 
  14:Polyphony.cpp **** bool voice_active[NUM_VOICES] = {false};
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 2


  15:Polyphony.cpp **** float voice_note[NUM_VOICES] = {0.0f};
  16:Polyphony.cpp **** float voice_values[NUM_VOICES] = {0.0f}; // For envelope output values
  17:Polyphony.cpp **** uint16_t last_touch_state = 0;
  18:Polyphony.cpp **** VoiceEnvelope voice_envelopes[NUM_VOICES]; 
  19:Polyphony.cpp **** 
  20:Polyphony.cpp **** // Map touch pads (0-11) to MIDI notes (E Phrygian scale starting at E2)
  21:Polyphony.cpp **** const float kTouchMidiNotes[12] = {
  22:Polyphony.cpp ****     40.0f, 41.0f, 43.0f, 45.0f, 47.0f, 48.0f, // E2, F2, G2, A2, B2, C3
  23:Polyphony.cpp ****     50.0f, 52.0f, 53.0f, 55.0f, 57.0f, 59.0f  // D3, E3, F3, G3, A3, B3
  24:Polyphony.cpp **** };
  25:Polyphony.cpp **** 
  26:Polyphony.cpp **** // Engine configuration
  27:Polyphony.cpp **** // Allow all engines, polyphony determined dynamically
  28:Polyphony.cpp **** // Total registered engines in plaits::Voice (see Voice::Init)
  29:Polyphony.cpp **** const int MAX_ENGINE_INDEX = 12; // Valid indices: 0-12
  30:Polyphony.cpp **** 
  31:Polyphony.cpp **** // --- Voice management functions ---
  32:Polyphony.cpp **** int FindVoice(float note, int max_voices) {
  47              		.loc 1 32 43 is_stmt 1 view -0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  33:Polyphony.cpp ****     for (int v = 0; v < max_voices; ++v) {
  51              		.loc 1 33 5 view .LVU3
  32:Polyphony.cpp ****     for (int v = 0; v < max_voices; ++v) {
  52              		.loc 1 32 43 is_stmt 0 view .LVU4
  53 0000 0246     		mov	r2, r0
  54 0002 0E4B     		ldr	r3, .L11
  55 0004 0E49     		ldr	r1, .L11+4
  56              	.LBB1029:
  57              		.loc 1 33 14 view .LVU5
  58 0006 0020     		movs	r0, #0
  59              	.LVL1:
  60              		.loc 1 33 14 view .LVU6
  61              	.LBE1029:
  32:Polyphony.cpp ****     for (int v = 0; v < max_voices; ++v) {
  62              		.loc 1 32 43 view .LVU7
  63 0008 10B5     		push	{r4, lr}
  64              		.cfi_def_cfa_offset 8
  65              		.cfi_offset 4, -8
  66              		.cfi_offset 14, -4
  67              	.LVL2:
  68              	.L5:
  69              	.LBB1030:
  70              		.loc 1 33 23 is_stmt 1 discriminator 1 view .LVU8
  71 000a 9042     		cmp	r0, r2
  72 000c 12DA     		bge	.L6
  34:Polyphony.cpp ****         if (voice_active[v] && fabsf(voice_note[v] - note) < 0.1f) {
  73              		.loc 1 34 9 view .LVU9
  74              		.loc 1 34 27 is_stmt 0 view .LVU10
  75 000e 11F8014B 		ldrb	r4, [r1], #1	@ zero_extendqisi2
  76              		.loc 1 34 9 view .LVU11
  77 0012 64B1     		cbz	r4, .L4
  78              		.loc 1 34 52 discriminator 1 view .LVU12
  79 0014 D3ED007A 		vldr.32	s15, [r3]
  80              		.loc 1 34 29 discriminator 1 view .LVU13
  81 0018 9FED0A7A 		vldr.32	s14, .L11+8
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 3


  82              		.loc 1 34 52 discriminator 1 view .LVU14
  83 001c 77EEC07A 		vsub.f32	s15, s15, s0
  84              		.loc 1 34 37 discriminator 1 view .LVU15
  85 0020 F0EEE77A 		vabs.f32	s15, s15
  86              		.loc 1 34 29 discriminator 1 view .LVU16
  87 0024 F4EEC77A 		vcmpe.f32	s15, s14
  88 0028 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  89 002c 04D4     		bmi	.L2
  90              	.L4:
  33:Polyphony.cpp ****     for (int v = 0; v < max_voices; ++v) {
  91              		.loc 1 33 5 is_stmt 1 discriminator 2 view .LVU17
  92 002e 0130     		adds	r0, r0, #1
  93              	.LVL3:
  33:Polyphony.cpp ****     for (int v = 0; v < max_voices; ++v) {
  94              		.loc 1 33 5 is_stmt 0 discriminator 2 view .LVU18
  95 0030 0433     		adds	r3, r3, #4
  96 0032 EAE7     		b	.L5
  97              	.L6:
  33:Polyphony.cpp ****     for (int v = 0; v < max_voices; ++v) {
  98              		.loc 1 33 5 discriminator 2 view .LVU19
  99              	.LBE1030:
  35:Polyphony.cpp ****             return v;
  36:Polyphony.cpp ****         }
  37:Polyphony.cpp ****     }
  38:Polyphony.cpp ****     return -1; // Not found
 100              		.loc 1 38 13 view .LVU20
 101 0034 4FF0FF30 		mov	r0, #-1
 102              	.LVL4:
 103              	.L2:
  39:Polyphony.cpp **** }
 104              		.loc 1 39 1 view .LVU21
 105 0038 10BD     		pop	{r4, pc}
 106              	.L12:
 107 003a 00BF     		.align	2
 108              	.L11:
 109 003c 00000000 		.word	.LANCHOR0
 110 0040 00000000 		.word	.LANCHOR1
 111 0044 CDCCCC3D 		.word	1036831949
 112              		.cfi_endproc
 113              	.LFE5057:
 115              		.section	.text._Z18FindAvailableVoicei,"ax",%progbits
 116              		.align	1
 117              		.global	_Z18FindAvailableVoicei
 118              		.syntax unified
 119              		.thumb
 120              		.thumb_func
 122              	_Z18FindAvailableVoicei:
 123              	.LVL5:
 124              	.LFB5058:
  40:Polyphony.cpp **** 
  41:Polyphony.cpp **** int FindAvailableVoice(int max_voices) {
 125              		.loc 1 41 40 is_stmt 1 view -0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 129              		@ link register save eliminated.
  42:Polyphony.cpp ****     for (int v = 0; v < max_voices; ++v) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 4


 130              		.loc 1 42 5 view .LVU23
  41:Polyphony.cpp ****     for (int v = 0; v < max_voices; ++v) {
 131              		.loc 1 41 40 is_stmt 0 view .LVU24
 132 0000 0346     		mov	r3, r0
 133 0002 064A     		ldr	r2, .L21
 134              	.LBB1031:
 135              		.loc 1 42 14 view .LVU25
 136 0004 0020     		movs	r0, #0
 137              	.LVL6:
 138              	.L15:
 139              		.loc 1 42 23 is_stmt 1 discriminator 1 view .LVU26
 140 0006 9842     		cmp	r0, r3
 141 0008 04DA     		bge	.L16
  43:Polyphony.cpp ****         if (!voice_active[v]) {
 142              		.loc 1 43 9 view .LVU27
 143              		.loc 1 43 28 is_stmt 0 view .LVU28
 144 000a 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 145              		.loc 1 43 9 view .LVU29
 146 000e 19B1     		cbz	r1, .L13
  42:Polyphony.cpp ****     for (int v = 0; v < max_voices; ++v) {
 147              		.loc 1 42 5 is_stmt 1 discriminator 2 view .LVU30
 148 0010 0130     		adds	r0, r0, #1
 149              	.LVL7:
  42:Polyphony.cpp ****     for (int v = 0; v < max_voices; ++v) {
 150              		.loc 1 42 5 is_stmt 0 discriminator 2 view .LVU31
 151 0012 F8E7     		b	.L15
 152              	.L16:
  42:Polyphony.cpp ****     for (int v = 0; v < max_voices; ++v) {
 153              		.loc 1 42 5 discriminator 2 view .LVU32
 154              	.LBE1031:
  44:Polyphony.cpp ****             return v;
  45:Polyphony.cpp ****         }
  46:Polyphony.cpp ****     }
  47:Polyphony.cpp ****     return -1; // All allowed voices active
 155              		.loc 1 47 13 view .LVU33
 156 0014 4FF0FF30 		mov	r0, #-1
 157              	.LVL8:
 158              	.L13:
  48:Polyphony.cpp **** }
 159              		.loc 1 48 1 view .LVU34
 160 0018 7047     		bx	lr
 161              	.L22:
 162 001a 00BF     		.align	2
 163              	.L21:
 164 001c 00000000 		.word	.LANCHOR1
 165              		.cfi_endproc
 166              	.LFE5058:
 168              		.section	.text._Z14AssignMonoNotef,"ax",%progbits
 169              		.align	1
 170              		.global	_Z14AssignMonoNotef
 171              		.syntax unified
 172              		.thumb
 173              		.thumb_func
 175              	_Z14AssignMonoNotef:
 176              	.LVL9:
 177              	.LFB5059:
  49:Polyphony.cpp **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 5


  50:Polyphony.cpp **** void AssignMonoNote(float note) {
 178              		.loc 1 50 33 is_stmt 1 view -0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182              		@ link register save eliminated.
  51:Polyphony.cpp ****     if (voice_active[0] && fabsf(voice_note[0] - note) > 0.1f) {
 183              		.loc 1 51 5 view .LVU36
  52:Polyphony.cpp ****         voice_active[0] = false; // Mark old note for release
  53:Polyphony.cpp ****     }
  54:Polyphony.cpp ****     voice_note[0] = note;
 184              		.loc 1 54 5 view .LVU37
 185              		.loc 1 54 19 is_stmt 0 view .LVU38
 186 0000 054B     		ldr	r3, .L24
  55:Polyphony.cpp ****     voice_active[0] = true;
 187              		.loc 1 55 21 view .LVU39
 188 0002 0122     		movs	r2, #1
  54:Polyphony.cpp ****     voice_active[0] = true;
 189              		.loc 1 54 19 view .LVU40
 190 0004 83ED000A 		vstr.32	s0, [r3]
 191              		.loc 1 55 5 is_stmt 1 view .LVU41
 192              		.loc 1 55 21 is_stmt 0 view .LVU42
 193 0008 044B     		ldr	r3, .L24+4
 194 000a 1A70     		strb	r2, [r3]
  56:Polyphony.cpp ****     modulations[0].trigger = 1.0f; // Set trigger high for the new note
 195              		.loc 1 56 5 is_stmt 1 view .LVU43
 196              		.loc 1 56 28 is_stmt 0 view .LVU44
 197 000c 4FF07E52 		mov	r2, #1065353216
 198 0010 034B     		ldr	r3, .L24+8
 199 0012 9A61     		str	r2, [r3, #24]	@ float
  57:Polyphony.cpp **** }
 200              		.loc 1 57 1 view .LVU45
 201 0014 7047     		bx	lr
 202              	.L25:
 203 0016 00BF     		.align	2
 204              	.L24:
 205 0018 00000000 		.word	.LANCHOR0
 206 001c 00000000 		.word	.LANCHOR1
 207 0020 00000000 		.word	.LANCHOR2
 208              		.cfi_endproc
 209              	.LFE5059:
 211              		.section	.text._Z16InitializeVoicesv,"ax",%progbits
 212              		.align	1
 213              		.global	_Z16InitializeVoicesv
 214              		.syntax unified
 215              		.thumb
 216              		.thumb_func
 218              	_Z16InitializeVoicesv:
 219              	.LFB5060:
  58:Polyphony.cpp **** 
  59:Polyphony.cpp **** void InitializeVoices() {
 220              		.loc 1 59 25 is_stmt 1 view -0
 221              		.cfi_startproc
 222              		@ args = 0, pretend = 0, frame = 16
 223              		@ frame_needed = 0, uses_anonymous_args = 0
  60:Polyphony.cpp ****     // Initialize the allocator with the SDRAM buffer
  61:Polyphony.cpp ****     stmlib::BufferAllocator allocator(shared_buffer, sizeof(shared_buffer));
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 6


 224              		.loc 1 61 5 view .LVU47
  59:Polyphony.cpp ****     // Initialize the allocator with the SDRAM buffer
 225              		.loc 1 59 25 is_stmt 0 view .LVU48
 226 0000 2DE9FF47 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, lr}
 227              		.cfi_def_cfa_offset 48
 228              		.cfi_offset 4, -32
 229              		.cfi_offset 5, -28
 230              		.cfi_offset 6, -24
 231              		.cfi_offset 7, -20
 232              		.cfi_offset 8, -16
 233              		.cfi_offset 9, -12
 234              		.cfi_offset 10, -8
 235              		.cfi_offset 14, -4
 236              	.LVL10:
 237              	.LBB1057:
 238              	.LBI1057:
 239              		.file 2 "eurorack/stmlib/utils/buffer_allocator.h"
   1:eurorack/stmlib/utils/buffer_allocator.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/stmlib/utils/buffer_allocator.h **** //
   3:eurorack/stmlib/utils/buffer_allocator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/utils/buffer_allocator.h **** //
   5:eurorack/stmlib/utils/buffer_allocator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/utils/buffer_allocator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/utils/buffer_allocator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/utils/buffer_allocator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/utils/buffer_allocator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/utils/buffer_allocator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/utils/buffer_allocator.h **** // 
  12:eurorack/stmlib/utils/buffer_allocator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/utils/buffer_allocator.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/utils/buffer_allocator.h **** // 
  15:eurorack/stmlib/utils/buffer_allocator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/utils/buffer_allocator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/utils/buffer_allocator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/utils/buffer_allocator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/utils/buffer_allocator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/utils/buffer_allocator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/utils/buffer_allocator.h **** // THE SOFTWARE.
  22:eurorack/stmlib/utils/buffer_allocator.h **** // 
  23:eurorack/stmlib/utils/buffer_allocator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/utils/buffer_allocator.h **** //
  25:eurorack/stmlib/utils/buffer_allocator.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/utils/buffer_allocator.h **** //
  27:eurorack/stmlib/utils/buffer_allocator.h **** // Stream buffer for serialization.
  28:eurorack/stmlib/utils/buffer_allocator.h **** 
  29:eurorack/stmlib/utils/buffer_allocator.h **** #ifndef STMLIB_UTILS_BUFFER_ALLOCATOR_H_
  30:eurorack/stmlib/utils/buffer_allocator.h **** #define STMLIB_UTILS_BUFFER_ALLOCATOR_H_
  31:eurorack/stmlib/utils/buffer_allocator.h **** 
  32:eurorack/stmlib/utils/buffer_allocator.h **** #include "stmlib/stmlib.h"
  33:eurorack/stmlib/utils/buffer_allocator.h **** 
  34:eurorack/stmlib/utils/buffer_allocator.h **** namespace stmlib {
  35:eurorack/stmlib/utils/buffer_allocator.h **** 
  36:eurorack/stmlib/utils/buffer_allocator.h **** class BufferAllocator {
  37:eurorack/stmlib/utils/buffer_allocator.h ****  public:
  38:eurorack/stmlib/utils/buffer_allocator.h ****   BufferAllocator() { }
  39:eurorack/stmlib/utils/buffer_allocator.h ****   ~BufferAllocator() { }
  40:eurorack/stmlib/utils/buffer_allocator.h ****   
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 7


  41:eurorack/stmlib/utils/buffer_allocator.h ****   BufferAllocator(void* buffer, size_t size) {
 240              		.loc 2 41 3 is_stmt 1 view .LVU49
 241              	.LBE1057:
  42:eurorack/stmlib/utils/buffer_allocator.h ****     Init(buffer, size);
 242              		.loc 2 42 5 view .LVU50
 243              	.LBB1066:
 244              	.LBB1058:
 245              	.LBB1059:
 246              	.LBI1059:
  43:eurorack/stmlib/utils/buffer_allocator.h ****   }
  44:eurorack/stmlib/utils/buffer_allocator.h ****   
  45:eurorack/stmlib/utils/buffer_allocator.h ****   inline void Init(void* buffer, size_t size) {
 247              		.loc 2 45 15 view .LVU51
 248              	.LBB1060:
  46:eurorack/stmlib/utils/buffer_allocator.h ****     buffer_ = static_cast<uint8_t*>(buffer);
 249              		.loc 2 46 5 view .LVU52
 250              		.loc 2 46 13 is_stmt 0 view .LVU53
 251 0004 264A     		ldr	r2, .L29
  47:eurorack/stmlib/utils/buffer_allocator.h ****     size_ = size;
 252              		.loc 2 47 11 view .LVU54
 253 0006 4FF48023 		mov	r3, #262144
 254 000a 264F     		ldr	r7, .L29+4
 255              	.LBE1060:
 256              	.LBE1059:
 257              	.LBE1058:
 258              	.LBE1066:
 259              	.LBB1067:
  62:Polyphony.cpp **** 
  63:Polyphony.cpp ****     // Initialize Plaits Voices 
  64:Polyphony.cpp ****     for (int i = 0; i < NUM_VOICES; ++i) { // Initialize all 4 voices
 260              		.loc 1 64 14 view .LVU55
 261 000c 0025     		movs	r5, #0
 262 000e 264E     		ldr	r6, .L29+8
 263 0010 DFF8C4A0 		ldr	r10, .L29+56
 264 0014 DFF8C490 		ldr	r9, .L29+60
 265 0018 244C     		ldr	r4, .L29+12
 266 001a DFF8C480 		ldr	r8, .L29+64
 267              	.LBE1067:
 268              	.LBB1098:
 269              	.LBB1065:
 270              	.LBB1064:
 271              	.LBB1063:
  46:eurorack/stmlib/utils/buffer_allocator.h ****     size_ = size;
 272              		.loc 2 46 13 view .LVU56
 273 001e 0192     		str	r2, [sp, #4]
 274              		.loc 2 47 5 is_stmt 1 view .LVU57
 275              		.loc 2 47 11 is_stmt 0 view .LVU58
 276 0020 0393     		str	r3, [sp, #12]
  48:eurorack/stmlib/utils/buffer_allocator.h ****     Free();
 277              		.loc 2 48 5 is_stmt 1 view .LVU59
 278              	.LVL11:
 279              	.LBB1061:
 280              	.LBI1061:
  49:eurorack/stmlib/utils/buffer_allocator.h ****   }
  50:eurorack/stmlib/utils/buffer_allocator.h **** 
  51:eurorack/stmlib/utils/buffer_allocator.h ****   template<typename T>
  52:eurorack/stmlib/utils/buffer_allocator.h ****   inline T* Allocate() {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 8


  53:eurorack/stmlib/utils/buffer_allocator.h ****     return Allocate<T>(1);
  54:eurorack/stmlib/utils/buffer_allocator.h ****   }
  55:eurorack/stmlib/utils/buffer_allocator.h ****   
  56:eurorack/stmlib/utils/buffer_allocator.h ****   template<typename T>
  57:eurorack/stmlib/utils/buffer_allocator.h ****   inline T* Allocate(size_t size) {
  58:eurorack/stmlib/utils/buffer_allocator.h ****     size_t size_bytes = sizeof(T) * size;
  59:eurorack/stmlib/utils/buffer_allocator.h ****     if (size_bytes <= free_) {
  60:eurorack/stmlib/utils/buffer_allocator.h ****       T* start = static_cast<T*>(static_cast<void*>(next_));
  61:eurorack/stmlib/utils/buffer_allocator.h ****       next_ += size_bytes;
  62:eurorack/stmlib/utils/buffer_allocator.h ****       free_ -= size_bytes;
  63:eurorack/stmlib/utils/buffer_allocator.h ****       return start;
  64:eurorack/stmlib/utils/buffer_allocator.h ****     } else {
  65:eurorack/stmlib/utils/buffer_allocator.h ****       return NULL;
  66:eurorack/stmlib/utils/buffer_allocator.h ****     }
  67:eurorack/stmlib/utils/buffer_allocator.h ****   }
  68:eurorack/stmlib/utils/buffer_allocator.h ****   
  69:eurorack/stmlib/utils/buffer_allocator.h ****   inline void Free() {
 281              		.loc 2 69 15 view .LVU60
 282              	.LBB1062:
  70:eurorack/stmlib/utils/buffer_allocator.h ****     next_ = buffer_;
 283              		.loc 2 70 5 view .LVU61
 284              		.loc 2 70 11 is_stmt 0 view .LVU62
 285 0022 0092     		str	r2, [sp]
  71:eurorack/stmlib/utils/buffer_allocator.h ****     free_ = size_;
 286              		.loc 2 71 5 is_stmt 1 view .LVU63
 287              		.loc 2 71 11 is_stmt 0 view .LVU64
 288 0024 0293     		str	r3, [sp, #8]
 289              	.LVL12:
 290              		.loc 2 71 11 view .LVU65
 291              	.LBE1062:
 292              	.LBE1061:
 293              	.LBE1063:
 294              	.LBE1064:
 295              	.LBE1065:
 296              	.LBE1098:
 297              		.loc 1 64 5 is_stmt 1 view .LVU66
 298              	.LBB1099:
 299              		.loc 1 64 23 view .LVU67
 300              	.L27:
  65:Polyphony.cpp ****         voices[i].Init(&allocator);
 301              		.loc 1 65 9 discriminator 2 view .LVU68
 302              		.loc 1 65 23 is_stmt 0 discriminator 2 view .LVU69
 303 0026 224B     		ldr	r3, .L29+16
 304 0028 4FF45B60 		mov	r0, #3504
 305 002c 6946     		mov	r1, sp
  64:Polyphony.cpp ****         voices[i].Init(&allocator);
 306              		.loc 1 64 23 discriminator 2 view .LVU70
 307 002e 2837     		adds	r7, r7, #40
 308              		.loc 1 65 23 discriminator 2 view .LVU71
 309 0030 00FB0530 		mla	r0, r0, r5, r3
  64:Polyphony.cpp ****         voices[i].Init(&allocator);
 310              		.loc 1 64 5 discriminator 2 view .LVU72
 311 0034 0135     		adds	r5, r5, #1
 312              	.LVL13:
 313              		.loc 1 65 23 discriminator 2 view .LVU73
 314 0036 FFF7FEFF 		bl	_ZN6plaits5Voice4InitEPN6stmlib15BufferAllocatorE
 315              	.LVL14:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 9


  66:Polyphony.cpp ****         patches[i].engine = 0;      
 316              		.loc 1 66 9 is_stmt 1 discriminator 2 view .LVU74
 317              		.loc 1 66 27 is_stmt 0 discriminator 2 view .LVU75
 318 003a 0022     		movs	r2, #0
 319              	.LBB1068:
 320              	.LBB1069:
 321              	.LBB1070:
 322              		.file 3 "VoiceEnvelope.h"
   1:VoiceEnvelope.h **** #pragma once
   2:VoiceEnvelope.h **** #include <algorithm>
   3:VoiceEnvelope.h **** 
   4:VoiceEnvelope.h **** // Simple envelope for each polyphonic voice
   5:VoiceEnvelope.h **** class VoiceEnvelope {
   6:VoiceEnvelope.h **** public:
   7:VoiceEnvelope.h ****     enum EnvState {
   8:VoiceEnvelope.h ****         ENV_IDLE,
   9:VoiceEnvelope.h ****         ENV_ATTACK,
  10:VoiceEnvelope.h ****         ENV_SUSTAIN,
  11:VoiceEnvelope.h ****         ENV_DECAY,
  12:VoiceEnvelope.h ****         ENV_RESET
  13:VoiceEnvelope.h ****     };
  14:VoiceEnvelope.h **** 
  15:VoiceEnvelope.h ****     enum EnvMode {
  16:VoiceEnvelope.h ****         MODE_AR,   // Attack-Release
  17:VoiceEnvelope.h ****         MODE_ASR   // Attack-Sustain-Release
  18:VoiceEnvelope.h ****     };
  19:VoiceEnvelope.h **** 
  20:VoiceEnvelope.h ****     VoiceEnvelope() :
  21:VoiceEnvelope.h ****         current_state(ENV_IDLE),
  22:VoiceEnvelope.h ****         current_value(0.0f),
  23:VoiceEnvelope.h ****         mode(MODE_ASR),
  24:VoiceEnvelope.h ****         attack_curve_coefficient(0.5f),
  25:VoiceEnvelope.h ****         release_curve_coefficient(0.5f),
  26:VoiceEnvelope.h ****         phase(0),
  27:VoiceEnvelope.h ****         decay_start_level(0.0f)
  28:VoiceEnvelope.h ****     {}
  29:VoiceEnvelope.h **** 
  30:VoiceEnvelope.h ****     void Init(float sample_rate) {
  31:VoiceEnvelope.h ****         time_range_2x = 2.0f * 4.0f * sample_rate;  // 4s max time
  32:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
  33:VoiceEnvelope.h ****         min_decay_time_a = 0.4f * sample_rate;      // 400ms min decay A
  34:VoiceEnvelope.h ****         min_decay_time_b = 0.01f * sample_rate;     // 10ms min decay B
  35:VoiceEnvelope.h ****         reset_time = 0.008f * sample_rate;          // 8ms reset time
  36:VoiceEnvelope.h ****         reset_coefficient = 1.0f / reset_time;
  37:VoiceEnvelope.h ****         
  38:VoiceEnvelope.h ****         // Default curves
  39:VoiceEnvelope.h ****         SetAttackCurve(0.5f);
  40:VoiceEnvelope.h ****         SetReleaseCurve(0.5f);
  41:VoiceEnvelope.h ****     }
  42:VoiceEnvelope.h **** 
  43:VoiceEnvelope.h ****     void SetMode(EnvMode new_mode) {
  44:VoiceEnvelope.h ****         mode = new_mode;
  45:VoiceEnvelope.h ****     }
  46:VoiceEnvelope.h **** 
  47:VoiceEnvelope.h ****     // Original combined shape method for backward compatibility
  48:VoiceEnvelope.h ****     void SetShape(float value) {
  49:VoiceEnvelope.h ****         float curve;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 10


  50:VoiceEnvelope.h ****         if (value < 0.5f) {
  51:VoiceEnvelope.h ****             attack_time = min_attack_time;
  52:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * value * value) + min_decay_time_a;
  53:VoiceEnvelope.h ****             curve = value * 0.15f;
  54:VoiceEnvelope.h ****         } else {
  55:VoiceEnvelope.h ****             float norm_val = 2.0f * value - 1.0f;
  56:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(time_range_2x * norm_val * norm_val) + min_attack_tim
  57:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 323              		.loc 3 57 24 discriminator 2 view .LVU76
 324 003c 0921     		movs	r1, #9
 325              	.LBE1070:
 326              	.LBE1069:
 327              	.LBE1068:
  67:Polyphony.cpp ****         modulations[i].engine = 0; 
 328              		.loc 1 67 31 discriminator 2 view .LVU77
 329 003e 0023     		movs	r3, #0
  66:Polyphony.cpp ****         patches[i].engine = 0;      
 330              		.loc 1 66 27 discriminator 2 view .LVU78
 331 0040 47F80C2C 		str	r2, [r7, #-12]
 332              		.loc 1 67 9 is_stmt 1 discriminator 2 view .LVU79
  64:Polyphony.cpp ****         voices[i].Init(&allocator);
 333              		.loc 1 64 23 is_stmt 0 discriminator 2 view .LVU80
 334 0044 042D     		cmp	r5, #4
  68:Polyphony.cpp ****         modulations[i].trigger = 0.0f;
  69:Polyphony.cpp ****         voice_active[i] = false;
 335              		.loc 1 69 25 discriminator 2 view .LVU81
 336 0046 0AF8012B 		strb	r2, [r10], #1
  64:Polyphony.cpp ****         voices[i].Init(&allocator);
 337              		.loc 1 64 23 discriminator 2 view .LVU82
 338 004a 06F12806 		add	r6, r6, #40
 339              	.LBB1075:
 340              	.LBB1076:
  31:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
 341              		.loc 3 31 23 discriminator 2 view .LVU83
 342 004e 194A     		ldr	r2, .L29+20
 343              	.LBB1077:
 344              	.LBB1078:
  58:VoiceEnvelope.h ****             curve = 0.5f;
  59:VoiceEnvelope.h ****         }
  60:VoiceEnvelope.h ****         attack_coefficient = 1.0f / attack_time;
  61:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
  62:VoiceEnvelope.h ****         SetAttackCurve(curve);
  63:VoiceEnvelope.h ****         SetReleaseCurve(curve);
  64:VoiceEnvelope.h ****     }
  65:VoiceEnvelope.h ****     
  66:VoiceEnvelope.h ****     // New methods for separate attack and release control
  67:VoiceEnvelope.h ****     void SetAttackTime(float value) {
  68:VoiceEnvelope.h ****         // Map 0-1 value to attack time (exponential scaling)
  69:VoiceEnvelope.h ****         // value³ for finer control at shorter settings
  70:VoiceEnvelope.h ****         float value_cubed = value * value * value;
  71:VoiceEnvelope.h ****         
  72:VoiceEnvelope.h ****         // Special handling for super punchy attacks at low values
  73:VoiceEnvelope.h ****         if (value < 0.1f) {
  74:VoiceEnvelope.h ****             // Extra fast attacks at the beginning of the range
  75:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(min_attack_time + 
  76:VoiceEnvelope.h ****                                            (min_attack_time * 9.0f * value / 0.1f));
  77:VoiceEnvelope.h ****         } else {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 11


  78:VoiceEnvelope.h ****             // Normal range from 2ms to 4 seconds
  79:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(0.002f * time_range_2x/8.0f + 
  80:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
  81:VoiceEnvelope.h ****         }
  82:VoiceEnvelope.h ****         
  83:VoiceEnvelope.h ****         attack_coefficient = 1.0f / attack_time;
  84:VoiceEnvelope.h ****         
  85:VoiceEnvelope.h ****         // Make curve more exponential for faster attacks
  86:VoiceEnvelope.h ****         if (value < 0.3f) {
  87:VoiceEnvelope.h ****             // More exponential curve for punchy attacks
  88:VoiceEnvelope.h ****             SetAttackCurve(0.7f + (0.3f - value)); // 0.7 to 1.0 range for punchier curve
  89:VoiceEnvelope.h ****         } else {
  90:VoiceEnvelope.h ****             // Normal curve
  91:VoiceEnvelope.h ****             SetAttackCurve(0.5f);
  92:VoiceEnvelope.h ****         }
  93:VoiceEnvelope.h ****     }
  94:VoiceEnvelope.h ****     
  95:VoiceEnvelope.h ****     void SetReleaseTime(float value) {
  96:VoiceEnvelope.h ****         // Map 0-1 value to release time (exponential scaling)
  97:VoiceEnvelope.h ****         // value³ for finer control at shorter settings
  98:VoiceEnvelope.h ****         float value_cubed = value * value * value;
  99:VoiceEnvelope.h ****         
 100:VoiceEnvelope.h ****         // Release time ranges from min_decay_time_b to 8 seconds
 101:VoiceEnvelope.h ****         decay_time = static_cast<size_t>(min_decay_time_b + 
 102:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 103:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
 104:VoiceEnvelope.h ****         
 105:VoiceEnvelope.h ****         // Use consistent release curve regardless of release time
 106:VoiceEnvelope.h ****         SetReleaseCurve(0.5f);
 107:VoiceEnvelope.h ****     }
 108:VoiceEnvelope.h ****     
 109:VoiceEnvelope.h ****     void SetAttackCurve(float value) {
 110:VoiceEnvelope.h ****         float cu = value - 0.5f;
 111:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
 345              		.loc 3 111 34 discriminator 2 view .LVU84
 346 0050 A360     		str	r3, [r4, #8]	@ float
 347              	.LBE1078:
 348              	.LBE1077:
  31:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
 349              		.loc 3 31 23 discriminator 2 view .LVU85
 350 0052 2261     		str	r2, [r4, #16]	@ float
  32:VoiceEnvelope.h ****         min_decay_time_a = 0.4f * sample_rate;      // 400ms min decay A
 351              		.loc 3 32 25 discriminator 2 view .LVU86
 352 0054 184A     		ldr	r2, .L29+24
 353              	.LBB1080:
 354              	.LBB1081:
 112:VoiceEnvelope.h ****     }
 113:VoiceEnvelope.h ****     
 114:VoiceEnvelope.h ****     void SetReleaseCurve(float value) {
 115:VoiceEnvelope.h ****         float cu = value - 0.5f;
 116:VoiceEnvelope.h ****         release_curve_coefficient = 128.0f * cu * cu;
 355              		.loc 3 116 35 discriminator 2 view .LVU87
 356 0056 E360     		str	r3, [r4, #12]	@ float
 357              	.LBE1081:
 358              	.LBE1080:
  32:VoiceEnvelope.h ****         min_decay_time_a = 0.4f * sample_rate;      // 400ms min decay A
 359              		.loc 3 32 25 discriminator 2 view .LVU88
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 12


 360 0058 6261     		str	r2, [r4, #20]	@ float
  33:VoiceEnvelope.h ****         min_decay_time_b = 0.01f * sample_rate;     // 10ms min decay B
 361              		.loc 3 33 26 discriminator 2 view .LVU89
 362 005a 184A     		ldr	r2, .L29+28
 363              	.LBE1076:
 364              	.LBE1075:
  67:Polyphony.cpp ****         modulations[i].trigger = 0.0f;
 365              		.loc 1 67 31 discriminator 2 view .LVU90
 366 005c 46F8283C 		str	r3, [r6, #-40]	@ float
  68:Polyphony.cpp ****         voice_active[i] = false;
 367              		.loc 1 68 9 is_stmt 1 discriminator 2 view .LVU91
 368              	.LBB1089:
 369              	.LBB1085:
  33:VoiceEnvelope.h ****         min_decay_time_b = 0.01f * sample_rate;     // 10ms min decay B
 370              		.loc 3 33 26 is_stmt 0 discriminator 2 view .LVU92
 371 0060 A261     		str	r2, [r4, #24]	@ float
  34:VoiceEnvelope.h ****         reset_time = 0.008f * sample_rate;          // 8ms reset time
 372              		.loc 3 34 26 discriminator 2 view .LVU93
 373 0062 174A     		ldr	r2, .L29+32
 374              	.LBE1085:
 375              	.LBE1089:
  68:Polyphony.cpp ****         voice_active[i] = false;
 376              		.loc 1 68 32 discriminator 2 view .LVU94
 377 0064 46F8103C 		str	r3, [r6, #-16]	@ float
 378              		.loc 1 69 9 is_stmt 1 discriminator 2 view .LVU95
  70:Polyphony.cpp ****         voice_note[i] = 0.0f;
 379              		.loc 1 70 9 discriminator 2 view .LVU96
 380              	.LBB1090:
 381              	.LBB1086:
  34:VoiceEnvelope.h ****         reset_time = 0.008f * sample_rate;          // 8ms reset time
 382              		.loc 3 34 26 is_stmt 0 discriminator 2 view .LVU97
 383 0068 E261     		str	r2, [r4, #28]	@ float
  35:VoiceEnvelope.h ****         reset_coefficient = 1.0f / reset_time;
 384              		.loc 3 35 20 discriminator 2 view .LVU98
 385 006a 164A     		ldr	r2, .L29+36
 386              	.LBE1086:
 387              	.LBE1090:
 388              		.loc 1 70 23 discriminator 2 view .LVU99
 389 006c 49F8043B 		str	r3, [r9], #4	@ float
  71:Polyphony.cpp ****         
  72:Polyphony.cpp ****         // Initialize envelopes with proper settings
  73:Polyphony.cpp ****         voice_envelopes[i].Init(SAMPLE_RATE);
 390              		.loc 1 73 9 is_stmt 1 discriminator 2 view .LVU100
 391              	.LVL15:
 392              	.LBB1091:
 393              	.LBI1075:
  30:VoiceEnvelope.h ****         time_range_2x = 2.0f * 4.0f * sample_rate;  // 4s max time
 394              		.loc 3 30 10 discriminator 2 view .LVU101
 395              	.LBB1087:
  31:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
 396              		.loc 3 31 9 discriminator 2 view .LVU102
  32:VoiceEnvelope.h ****         min_decay_time_a = 0.4f * sample_rate;      // 400ms min decay A
 397              		.loc 3 32 9 discriminator 2 view .LVU103
  33:VoiceEnvelope.h ****         min_decay_time_b = 0.01f * sample_rate;     // 10ms min decay B
 398              		.loc 3 33 9 discriminator 2 view .LVU104
  34:VoiceEnvelope.h ****         reset_time = 0.008f * sample_rate;          // 8ms reset time
 399              		.loc 3 34 9 discriminator 2 view .LVU105
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 13


  35:VoiceEnvelope.h ****         reset_coefficient = 1.0f / reset_time;
 400              		.loc 3 35 9 discriminator 2 view .LVU106
  35:VoiceEnvelope.h ****         reset_coefficient = 1.0f / reset_time;
 401              		.loc 3 35 20 is_stmt 0 discriminator 2 view .LVU107
 402 0070 2262     		str	r2, [r4, #32]	@ float
  36:VoiceEnvelope.h ****         
 403              		.loc 3 36 9 is_stmt 1 discriminator 2 view .LVU108
  36:VoiceEnvelope.h ****         
 404              		.loc 3 36 27 is_stmt 0 discriminator 2 view .LVU109
 405 0072 154A     		ldr	r2, .L29+40
 406              	.LBE1087:
 407              	.LBE1091:
  74:Polyphony.cpp ****         voice_envelopes[i].SetMode(VoiceEnvelope::MODE_ASR); // Use ASR mode by default
  75:Polyphony.cpp ****         voice_envelopes[i].SetShape(0.5f); // Start with middle curve
  76:Polyphony.cpp ****         voice_values[i] = 0.0f;
 408              		.loc 1 76 25 discriminator 2 view .LVU110
 409 0074 48F8043B 		str	r3, [r8], #4	@ float
 410              	.LBB1092:
 411              	.LBB1088:
  36:VoiceEnvelope.h ****         
 412              		.loc 3 36 27 discriminator 2 view .LVU111
 413 0078 6262     		str	r2, [r4, #36]	@ float
  39:VoiceEnvelope.h ****         SetReleaseCurve(0.5f);
 414              		.loc 3 39 9 is_stmt 1 discriminator 2 view .LVU112
 415              	.LVL16:
 416              	.LBB1083:
 417              	.LBI1077:
 109:VoiceEnvelope.h ****         float cu = value - 0.5f;
 418              		.loc 3 109 10 discriminator 2 view .LVU113
 419              	.LBB1079:
 110:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
 420              		.loc 3 110 9 discriminator 2 view .LVU114
 111:VoiceEnvelope.h ****     }
 421              		.loc 3 111 9 discriminator 2 view .LVU115
 111:VoiceEnvelope.h ****     }
 422              		.loc 3 111 9 is_stmt 0 discriminator 2 view .LVU116
 423              	.LBE1079:
 424              	.LBE1083:
  40:VoiceEnvelope.h ****     }
 425              		.loc 3 40 9 is_stmt 1 discriminator 2 view .LVU117
 426              	.LBB1084:
 427              	.LBI1080:
 114:VoiceEnvelope.h ****         float cu = value - 0.5f;
 428              		.loc 3 114 10 discriminator 2 view .LVU118
 429              	.LBB1082:
 115:VoiceEnvelope.h ****         release_curve_coefficient = 128.0f * cu * cu;
 430              		.loc 3 115 9 discriminator 2 view .LVU119
 431              		.loc 3 116 9 discriminator 2 view .LVU120
 432              		.loc 3 116 9 is_stmt 0 discriminator 2 view .LVU121
 433              	.LBE1082:
 434              	.LBE1084:
 435              	.LBE1088:
 436              	.LBE1092:
  74:Polyphony.cpp ****         voice_envelopes[i].SetShape(0.5f); // Start with middle curve
 437              		.loc 1 74 9 is_stmt 1 discriminator 2 view .LVU122
 438              	.LBB1093:
 439              	.LBI1093:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 14


  43:VoiceEnvelope.h ****         mode = new_mode;
 440              		.loc 3 43 10 discriminator 2 view .LVU123
 441              	.LBB1094:
  44:VoiceEnvelope.h ****     }
 442              		.loc 3 44 9 discriminator 2 view .LVU124
  44:VoiceEnvelope.h ****     }
 443              		.loc 3 44 14 is_stmt 0 discriminator 2 view .LVU125
 444 007a 4FF00102 		mov	r2, #1
 445 007e 6270     		strb	r2, [r4, #1]
 446              	.LVL17:
  44:VoiceEnvelope.h ****     }
 447              		.loc 3 44 14 discriminator 2 view .LVU126
 448              	.LBE1094:
 449              	.LBE1093:
  75:Polyphony.cpp ****         voice_values[i] = 0.0f;
 450              		.loc 1 75 9 is_stmt 1 discriminator 2 view .LVU127
 451              	.LBB1095:
 452              	.LBI1068:
  48:VoiceEnvelope.h ****         float curve;
 453              		.loc 3 48 10 discriminator 2 view .LVU128
 454              	.LBB1072:
  49:VoiceEnvelope.h ****         if (value < 0.5f) {
 455              		.loc 3 49 9 discriminator 2 view .LVU129
  50:VoiceEnvelope.h ****             attack_time = min_attack_time;
 456              		.loc 3 50 9 discriminator 2 view .LVU130
 457              	.LBB1071:
  55:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(time_range_2x * norm_val * norm_val) + min_attack_tim
 458              		.loc 3 55 13 discriminator 2 view .LVU131
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 459              		.loc 3 56 13 discriminator 2 view .LVU132
  57:VoiceEnvelope.h ****             curve = 0.5f;
 460              		.loc 3 57 24 is_stmt 0 discriminator 2 view .LVU133
 461 0080 124A     		ldr	r2, .L29+44
 462 0082 C4E90D12 		strd	r1, r2, [r4, #52]
  58:VoiceEnvelope.h ****         }
 463              		.loc 3 58 13 is_stmt 1 discriminator 2 view .LVU134
 464              	.LVL18:
  58:VoiceEnvelope.h ****         }
 465              		.loc 3 58 13 is_stmt 0 discriminator 2 view .LVU135
 466              	.LBE1071:
  60:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
 467              		.loc 3 60 9 is_stmt 1 discriminator 2 view .LVU136
  60:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
 468              		.loc 3 60 28 is_stmt 0 discriminator 2 view .LVU137
 469 0086 124A     		ldr	r2, .L29+48
 470              	.LBE1072:
 471              	.LBE1095:
  64:Polyphony.cpp ****         voices[i].Init(&allocator);
 472              		.loc 1 64 23 discriminator 2 view .LVU138
 473 0088 04F14404 		add	r4, r4, #68
 474              	.LBB1096:
 475              	.LBB1073:
  60:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
 476              		.loc 3 60 28 discriminator 2 view .LVU139
 477 008c 44F8182C 		str	r2, [r4, #-24]	@ float
  61:VoiceEnvelope.h ****         SetAttackCurve(curve);
 478              		.loc 3 61 9 is_stmt 1 discriminator 2 view .LVU140
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 15


  61:VoiceEnvelope.h ****         SetAttackCurve(curve);
 479              		.loc 3 61 27 is_stmt 0 discriminator 2 view .LVU141
 480 0090 104A     		ldr	r2, .L29+52
 481 0092 44F8142C 		str	r2, [r4, #-20]	@ float
  62:VoiceEnvelope.h ****         SetReleaseCurve(curve);
 482              		.loc 3 62 9 is_stmt 1 discriminator 2 view .LVU142
 483              	.LVL19:
  62:VoiceEnvelope.h ****         SetReleaseCurve(curve);
 484              		.loc 3 62 9 is_stmt 0 discriminator 2 view .LVU143
 485              	.LBE1073:
 486              	.LBE1096:
 487              	.LBE1099:
 110:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
 488              		.loc 3 110 9 is_stmt 1 discriminator 2 view .LVU144
 111:VoiceEnvelope.h ****     }
 489              		.loc 3 111 9 discriminator 2 view .LVU145
 490              	.LBB1100:
 491              	.LBB1097:
 492              	.LBB1074:
  63:VoiceEnvelope.h ****     }
 493              		.loc 3 63 9 discriminator 2 view .LVU146
  63:VoiceEnvelope.h ****     }
 494              		.loc 3 63 9 is_stmt 0 discriminator 2 view .LVU147
 495              	.LBE1074:
 496              	.LBE1097:
 497              	.LBE1100:
 115:VoiceEnvelope.h ****         release_curve_coefficient = 128.0f * cu * cu;
 498              		.loc 3 115 9 is_stmt 1 discriminator 2 view .LVU148
 499              		.loc 3 116 9 discriminator 2 view .LVU149
 500              	.LBB1101:
 501              		.loc 1 76 9 discriminator 2 view .LVU150
  64:Polyphony.cpp ****         voices[i].Init(&allocator);
 502              		.loc 1 64 5 discriminator 2 view .LVU151
  64:Polyphony.cpp ****         voices[i].Init(&allocator);
 503              		.loc 1 64 23 discriminator 2 view .LVU152
 504 0096 C6D1     		bne	.L27
 505              	.LBE1101:
  77:Polyphony.cpp ****     }
  78:Polyphony.cpp **** } ...
 506              		.loc 1 78 1 is_stmt 0 view .LVU153
 507 0098 04B0     		add	sp, sp, #16
 508              		.cfi_def_cfa_offset 32
 509              		@ sp needed
 510 009a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 511              	.LVL20:
 512              	.L30:
 513              		.loc 1 78 1 view .LVU154
 514 009e 00BF     		.align	2
 515              	.L29:
 516 00a0 00000000 		.word	shared_buffer
 517 00a4 00000000 		.word	.LANCHOR3
 518 00a8 00000000 		.word	.LANCHOR2
 519 00ac 00000000 		.word	.LANCHOR4
 520 00b0 00000000 		.word	voices
 521 00b4 0080BB48 		.word	1220247552
 522 00b8 99991941 		.word	1092196761
 523 00bc 00009646 		.word	1184235520
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 16


 524 00c0 0000F043 		.word	1139802112
 525 00c4 0100C043 		.word	1136656385
 526 00c8 AAAA2A3B 		.word	992651946
 527 00cc E0660400 		.word	288480
 528 00d0 398EE33D 		.word	1038323257
 529 00d4 12A16836 		.word	912826642
 530 00d8 00000000 		.word	.LANCHOR1
 531 00dc 00000000 		.word	.LANCHOR0
 532 00e0 00000000 		.word	.LANCHOR5
 533              		.cfi_endproc
 534              	.LFE5060:
 536              		.section	.text.startup._GLOBAL__sub_I_voices,"ax",%progbits
 537              		.align	1
 538              		.syntax unified
 539              		.thumb
 540              		.thumb_func
 542              	_GLOBAL__sub_I_voices:
 543              	.LFB5780:
 544              		.loc 1 78 1 is_stmt 1 view -0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 0
 547              		@ frame_needed = 0, uses_anonymous_args = 0
 548              	.LBB1297:
 549              	.LBI1297:
 550              		.loc 1 78 1 view .LVU156
 551              	.LVL21:
 552              	.LBB1298:
   4:Polyphony.cpp **** plaits::Voice voices[NUM_VOICES];
 553              		.loc 1 4 32 view .LVU157
 554 0000 244B     		ldr	r3, .L36
 555              	.LBE1298:
 556              	.LBE1297:
 557              		.loc 1 78 1 is_stmt 0 view .LVU158
 558 0002 0420     		movs	r0, #4
 559 0004 10B5     		push	{r4, lr}
 560              		.cfi_def_cfa_offset 8
 561              		.cfi_offset 4, -8
 562              		.cfi_offset 14, -4
 563              	.L32:
 564              	.LVL22:
 565              	.LBB1419:
 566              	.LBB1413:
 567              	.LBB1299:
 568              	.LBI1299:
 569              		.file 4 "eurorack/plaits/dsp/voice.h"
   1:eurorack/plaits/dsp/voice.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/voice.h **** //
   3:eurorack/plaits/dsp/voice.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/voice.h **** //
   5:eurorack/plaits/dsp/voice.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/voice.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/voice.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/voice.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/voice.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/voice.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/voice.h **** // 
  12:eurorack/plaits/dsp/voice.h **** // The above copyright notice and this permission notice shall be included in
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 17


  13:eurorack/plaits/dsp/voice.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/voice.h **** // 
  15:eurorack/plaits/dsp/voice.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/voice.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/voice.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/voice.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/voice.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/voice.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/voice.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/voice.h **** // 
  23:eurorack/plaits/dsp/voice.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/voice.h **** //
  25:eurorack/plaits/dsp/voice.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/voice.h **** //
  27:eurorack/plaits/dsp/voice.h **** // Main synthesis voice.
  28:eurorack/plaits/dsp/voice.h **** 
  29:eurorack/plaits/dsp/voice.h **** #ifndef PLAITS_DSP_VOICE_H_
  30:eurorack/plaits/dsp/voice.h **** #define PLAITS_DSP_VOICE_H_
  31:eurorack/plaits/dsp/voice.h **** 
  32:eurorack/plaits/dsp/voice.h **** #include "stmlib/stmlib.h"
  33:eurorack/plaits/dsp/voice.h **** 
  34:eurorack/plaits/dsp/voice.h **** #include "stmlib/dsp/filter.h"
  35:eurorack/plaits/dsp/voice.h **** #include "stmlib/dsp/limiter.h"
  36:eurorack/plaits/dsp/voice.h **** #include "stmlib/utils/buffer_allocator.h"
  37:eurorack/plaits/dsp/voice.h **** 
  38:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/additive_engine.h"
  39:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/bass_drum_engine.h"
  40:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/chord_engine.h"
  41:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/engine.h"
  42:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/fm_engine.h"
  43:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/grain_engine.h"
  44:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/hi_hat_engine.h"
  45:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/modal_engine.h"
  46:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/noise_engine.h"
  47:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/particle_engine.h"
  48:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/snare_drum_engine.h"
  49:eurorack/plaits/dsp/voice.h **** // #include "plaits/dsp/engine/speech_engine.h"
  50:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/string_engine.h"
  51:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/swarm_engine.h"
  52:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/virtual_analog_engine.h"
  53:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/waveshaping_engine.h"
  54:eurorack/plaits/dsp/voice.h **** // #include "plaits/dsp/engine/wavetable_engine.h"
  55:eurorack/plaits/dsp/voice.h **** 
  56:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/envelope.h"
  57:eurorack/plaits/dsp/voice.h **** 
  58:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/fx/low_pass_gate.h"
  59:eurorack/plaits/dsp/voice.h **** 
  60:eurorack/plaits/dsp/voice.h **** namespace plaits {
  61:eurorack/plaits/dsp/voice.h **** 
  62:eurorack/plaits/dsp/voice.h **** const int kMaxEngines = 16;
  63:eurorack/plaits/dsp/voice.h **** const int kMaxTriggerDelay = 8;
  64:eurorack/plaits/dsp/voice.h **** const int kTriggerDelay = 5;
  65:eurorack/plaits/dsp/voice.h **** 
  66:eurorack/plaits/dsp/voice.h **** class ChannelPostProcessor {
  67:eurorack/plaits/dsp/voice.h ****  public:
  68:eurorack/plaits/dsp/voice.h ****   ChannelPostProcessor() { }
  69:eurorack/plaits/dsp/voice.h ****   ~ChannelPostProcessor() { }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 18


  70:eurorack/plaits/dsp/voice.h ****   
  71:eurorack/plaits/dsp/voice.h ****   void Init() {
  72:eurorack/plaits/dsp/voice.h ****     lpg_.Init();
  73:eurorack/plaits/dsp/voice.h ****     Reset();
  74:eurorack/plaits/dsp/voice.h ****   }
  75:eurorack/plaits/dsp/voice.h ****   
  76:eurorack/plaits/dsp/voice.h ****   void Reset() {
  77:eurorack/plaits/dsp/voice.h ****     limiter_.Init();
  78:eurorack/plaits/dsp/voice.h ****   }
  79:eurorack/plaits/dsp/voice.h ****   
  80:eurorack/plaits/dsp/voice.h ****   void Process(
  81:eurorack/plaits/dsp/voice.h ****       float gain,
  82:eurorack/plaits/dsp/voice.h ****       bool bypass_lpg,
  83:eurorack/plaits/dsp/voice.h ****       float low_pass_gate_gain,
  84:eurorack/plaits/dsp/voice.h ****       float low_pass_gate_frequency,
  85:eurorack/plaits/dsp/voice.h ****       float low_pass_gate_hf_bleed,
  86:eurorack/plaits/dsp/voice.h ****       float* in,
  87:eurorack/plaits/dsp/voice.h ****       short* out,
  88:eurorack/plaits/dsp/voice.h ****       size_t size,
  89:eurorack/plaits/dsp/voice.h ****       size_t stride) {
  90:eurorack/plaits/dsp/voice.h ****     if (gain < 0.0f) {
  91:eurorack/plaits/dsp/voice.h ****       limiter_.Process(-gain, in, size);
  92:eurorack/plaits/dsp/voice.h ****     }
  93:eurorack/plaits/dsp/voice.h ****     const float post_gain = (gain < 0.0f ? 1.0f : gain) * -32767.0f;
  94:eurorack/plaits/dsp/voice.h ****     if (!bypass_lpg) {
  95:eurorack/plaits/dsp/voice.h ****       lpg_.Process(
  96:eurorack/plaits/dsp/voice.h ****           post_gain * low_pass_gate_gain,
  97:eurorack/plaits/dsp/voice.h ****           low_pass_gate_frequency,
  98:eurorack/plaits/dsp/voice.h ****           low_pass_gate_hf_bleed,
  99:eurorack/plaits/dsp/voice.h ****           in,
 100:eurorack/plaits/dsp/voice.h ****           out,
 101:eurorack/plaits/dsp/voice.h ****           size,
 102:eurorack/plaits/dsp/voice.h ****           stride);
 103:eurorack/plaits/dsp/voice.h ****     } else {
 104:eurorack/plaits/dsp/voice.h ****       while (size--) {
 105:eurorack/plaits/dsp/voice.h ****         *out = stmlib::Clip16(1 + static_cast<int32_t>(*in++ * post_gain));
 106:eurorack/plaits/dsp/voice.h ****         out += stride;
 107:eurorack/plaits/dsp/voice.h ****       }
 108:eurorack/plaits/dsp/voice.h ****     }
 109:eurorack/plaits/dsp/voice.h ****   }
 110:eurorack/plaits/dsp/voice.h ****   
 111:eurorack/plaits/dsp/voice.h ****  private:
 112:eurorack/plaits/dsp/voice.h ****   stmlib::Limiter limiter_;
 113:eurorack/plaits/dsp/voice.h ****   LowPassGate lpg_;
 114:eurorack/plaits/dsp/voice.h ****   
 115:eurorack/plaits/dsp/voice.h ****   DISALLOW_COPY_AND_ASSIGN(ChannelPostProcessor);
 116:eurorack/plaits/dsp/voice.h **** };
 117:eurorack/plaits/dsp/voice.h **** 
 118:eurorack/plaits/dsp/voice.h **** struct Patch {
 119:eurorack/plaits/dsp/voice.h ****   float note;
 120:eurorack/plaits/dsp/voice.h ****   float harmonics;
 121:eurorack/plaits/dsp/voice.h ****   float timbre;
 122:eurorack/plaits/dsp/voice.h ****   float morph;
 123:eurorack/plaits/dsp/voice.h ****   float frequency_modulation_amount;
 124:eurorack/plaits/dsp/voice.h ****   float timbre_modulation_amount;
 125:eurorack/plaits/dsp/voice.h ****   float morph_modulation_amount;
 126:eurorack/plaits/dsp/voice.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 19


 127:eurorack/plaits/dsp/voice.h ****   int engine;
 128:eurorack/plaits/dsp/voice.h ****   float decay;
 129:eurorack/plaits/dsp/voice.h ****   float lpg_colour;
 130:eurorack/plaits/dsp/voice.h **** };
 131:eurorack/plaits/dsp/voice.h **** 
 132:eurorack/plaits/dsp/voice.h **** struct Modulations {
 133:eurorack/plaits/dsp/voice.h ****   float engine;
 134:eurorack/plaits/dsp/voice.h ****   float note;
 135:eurorack/plaits/dsp/voice.h ****   float frequency;
 136:eurorack/plaits/dsp/voice.h ****   float harmonics;
 137:eurorack/plaits/dsp/voice.h ****   float timbre;
 138:eurorack/plaits/dsp/voice.h ****   float morph;
 139:eurorack/plaits/dsp/voice.h ****   float trigger;
 140:eurorack/plaits/dsp/voice.h ****   float level;
 141:eurorack/plaits/dsp/voice.h **** 
 142:eurorack/plaits/dsp/voice.h ****   bool frequency_patched;
 143:eurorack/plaits/dsp/voice.h ****   bool timbre_patched;
 144:eurorack/plaits/dsp/voice.h ****   bool morph_patched;
 145:eurorack/plaits/dsp/voice.h ****   bool trigger_patched;
 146:eurorack/plaits/dsp/voice.h ****   bool level_patched;
 147:eurorack/plaits/dsp/voice.h **** };
 148:eurorack/plaits/dsp/voice.h **** 
 149:eurorack/plaits/dsp/voice.h **** class Voice {
 150:eurorack/plaits/dsp/voice.h ****  public:
 151:eurorack/plaits/dsp/voice.h ****   Voice() { }
 570              		.loc 4 151 3 is_stmt 1 view .LVU159
 571              	.LBB1300:
 572              	.LBI1300:
 573              		.file 5 "eurorack/plaits/dsp/engine/additive_engine.h"
   1:eurorack/plaits/dsp/engine/additive_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/additive_engine.h **** //
   3:eurorack/plaits/dsp/engine/additive_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/additive_engine.h **** //
   5:eurorack/plaits/dsp/engine/additive_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/additive_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/additive_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/additive_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/additive_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/additive_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/additive_engine.h **** // 
  12:eurorack/plaits/dsp/engine/additive_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/additive_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/additive_engine.h **** // 
  15:eurorack/plaits/dsp/engine/additive_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/additive_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/additive_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/additive_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/additive_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/additive_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/additive_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/additive_engine.h **** // 
  23:eurorack/plaits/dsp/engine/additive_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/additive_engine.h **** //
  25:eurorack/plaits/dsp/engine/additive_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/additive_engine.h **** //
  27:eurorack/plaits/dsp/engine/additive_engine.h **** // Additive synthesis with 24+8 partials.
  28:eurorack/plaits/dsp/engine/additive_engine.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 20


  29:eurorack/plaits/dsp/engine/additive_engine.h **** #ifndef PLAITS_DSP_ENGINE_ADDITIVE_ENGINE_H_
  30:eurorack/plaits/dsp/engine/additive_engine.h **** #define PLAITS_DSP_ENGINE_ADDITIVE_ENGINE_H_
  31:eurorack/plaits/dsp/engine/additive_engine.h **** 
  32:eurorack/plaits/dsp/engine/additive_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/additive_engine.h **** #include "plaits/dsp/oscillator/harmonic_oscillator.h"
  34:eurorack/plaits/dsp/engine/additive_engine.h **** 
  35:eurorack/plaits/dsp/engine/additive_engine.h **** namespace plaits {
  36:eurorack/plaits/dsp/engine/additive_engine.h ****   
  37:eurorack/plaits/dsp/engine/additive_engine.h **** const int kHarmonicBatchSize = 12;
  38:eurorack/plaits/dsp/engine/additive_engine.h **** const int kNumHarmonics = 36;
  39:eurorack/plaits/dsp/engine/additive_engine.h **** const int kNumHarmonicOscillators = kNumHarmonics / kHarmonicBatchSize;
  40:eurorack/plaits/dsp/engine/additive_engine.h **** 
  41:eurorack/plaits/dsp/engine/additive_engine.h **** class AdditiveEngine : public Engine {
  42:eurorack/plaits/dsp/engine/additive_engine.h ****  public:
  43:eurorack/plaits/dsp/engine/additive_engine.h ****   AdditiveEngine() { }
 574              		.loc 5 43 3 view .LVU160
 575              	.LBB1301:
 576              	.LBB1302:
 577              	.LBI1302:
 578              		.file 6 "eurorack/plaits/dsp/engine/engine.h"
   1:eurorack/plaits/dsp/engine/engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/engine.h **** //
   3:eurorack/plaits/dsp/engine/engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/engine.h **** //
   5:eurorack/plaits/dsp/engine/engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/engine.h **** // 
  12:eurorack/plaits/dsp/engine/engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/engine.h **** // 
  15:eurorack/plaits/dsp/engine/engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/engine.h **** // 
  23:eurorack/plaits/dsp/engine/engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/engine.h **** //
  25:eurorack/plaits/dsp/engine/engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/engine.h **** //
  27:eurorack/plaits/dsp/engine/engine.h **** // Base class for all engines.
  28:eurorack/plaits/dsp/engine/engine.h **** 
  29:eurorack/plaits/dsp/engine/engine.h **** #ifndef PLAITS_DSP_ENGINE_ENGINE_H_
  30:eurorack/plaits/dsp/engine/engine.h **** #define PLAITS_DSP_ENGINE_ENGINE_H_
  31:eurorack/plaits/dsp/engine/engine.h **** 
  32:eurorack/plaits/dsp/engine/engine.h **** #include "plaits/dsp/dsp.h"
  33:eurorack/plaits/dsp/engine/engine.h **** 
  34:eurorack/plaits/dsp/engine/engine.h **** #include "stmlib/dsp/units.h"
  35:eurorack/plaits/dsp/engine/engine.h **** #include "stmlib/utils/buffer_allocator.h"
  36:eurorack/plaits/dsp/engine/engine.h **** 
  37:eurorack/plaits/dsp/engine/engine.h **** namespace plaits {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 21


  38:eurorack/plaits/dsp/engine/engine.h **** 
  39:eurorack/plaits/dsp/engine/engine.h **** inline float NoteToFrequency(float midi_note) {
  40:eurorack/plaits/dsp/engine/engine.h ****   midi_note -= 9.0f;
  41:eurorack/plaits/dsp/engine/engine.h ****   CONSTRAIN(midi_note, -128.0f, 127.0f);
  42:eurorack/plaits/dsp/engine/engine.h ****   return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
  43:eurorack/plaits/dsp/engine/engine.h **** }
  44:eurorack/plaits/dsp/engine/engine.h **** 
  45:eurorack/plaits/dsp/engine/engine.h **** enum TriggerState {
  46:eurorack/plaits/dsp/engine/engine.h ****   TRIGGER_LOW = 0,
  47:eurorack/plaits/dsp/engine/engine.h ****   TRIGGER_RISING_EDGE = 1,
  48:eurorack/plaits/dsp/engine/engine.h ****   TRIGGER_UNPATCHED = 2,
  49:eurorack/plaits/dsp/engine/engine.h ****   TRIGGER_UNPATCHED_AUTOTRIGGED = 3,
  50:eurorack/plaits/dsp/engine/engine.h **** };
  51:eurorack/plaits/dsp/engine/engine.h **** 
  52:eurorack/plaits/dsp/engine/engine.h **** struct EngineParameters {
  53:eurorack/plaits/dsp/engine/engine.h ****   TriggerState trigger;
  54:eurorack/plaits/dsp/engine/engine.h ****   float note;
  55:eurorack/plaits/dsp/engine/engine.h ****   float timbre;
  56:eurorack/plaits/dsp/engine/engine.h ****   float morph;
  57:eurorack/plaits/dsp/engine/engine.h ****   float harmonics;
  58:eurorack/plaits/dsp/engine/engine.h ****   float accent;
  59:eurorack/plaits/dsp/engine/engine.h **** };
  60:eurorack/plaits/dsp/engine/engine.h **** 
  61:eurorack/plaits/dsp/engine/engine.h **** struct PostProcessingSettings {
  62:eurorack/plaits/dsp/engine/engine.h ****   // A negative value indicates that a limiter must be used.
  63:eurorack/plaits/dsp/engine/engine.h ****   float out_gain;
  64:eurorack/plaits/dsp/engine/engine.h ****   float aux_gain;
  65:eurorack/plaits/dsp/engine/engine.h ****   
  66:eurorack/plaits/dsp/engine/engine.h ****   // When this flag is set to true, the engine declares that it will 
  67:eurorack/plaits/dsp/engine/engine.h ****   // render a signal that already has an envelope (eg: modal drum, 808 kick).
  68:eurorack/plaits/dsp/engine/engine.h ****   // By reporting this information, the synthesis voice upstream will
  69:eurorack/plaits/dsp/engine/engine.h ****   // bypass the internal envelope/LPG.
  70:eurorack/plaits/dsp/engine/engine.h ****   //
  71:eurorack/plaits/dsp/engine/engine.h ****   // This parameter can be changed on a per-call basis when calling Render()
  72:eurorack/plaits/dsp/engine/engine.h ****   // This is used by the speech synthesis engine, which renders either
  73:eurorack/plaits/dsp/engine/engine.h ****   // a continuous vowel sound (which needs to be enveloped by the LPG)
  74:eurorack/plaits/dsp/engine/engine.h ****   // or a word/sentence (which is already enveloped).
  75:eurorack/plaits/dsp/engine/engine.h ****   bool already_enveloped;
  76:eurorack/plaits/dsp/engine/engine.h **** };
  77:eurorack/plaits/dsp/engine/engine.h **** 
  78:eurorack/plaits/dsp/engine/engine.h **** class Engine {
  79:eurorack/plaits/dsp/engine/engine.h ****  public:
  80:eurorack/plaits/dsp/engine/engine.h ****   Engine() { }
 579              		.loc 6 80 3 view .LVU161
 580              		.loc 6 80 3 is_stmt 0 view .LVU162
 581              	.LBE1302:
 582              		.loc 5 43 20 view .LVU163
 583 0006 244A     		ldr	r2, .L36+4
 584              	.LBE1301:
 585              	.LBE1300:
 586              	.LBE1299:
   4:Polyphony.cpp **** plaits::Voice voices[NUM_VOICES];
 587              		.loc 1 4 32 view .LVU164
 588 0008 0138     		subs	r0, r0, #1
 589              	.LBB1401:
 590              	.LBB1304:
 591              	.LBB1303:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 22


 592              		.loc 5 43 20 view .LVU165
 593 000a 1A60     		str	r2, [r3]
 594              		.loc 5 43 20 is_stmt 1 view .LVU166
 595              	.LVL23:
 596              		.loc 5 43 20 is_stmt 0 view .LVU167
 597              	.LBE1303:
 598              	.LBE1304:
 599              	.LBB1305:
 600              	.LBI1305:
 601              		.file 7 "eurorack/plaits/dsp/engine/bass_drum_engine.h"
   1:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/bass_drum_engine.h **** //
   3:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/bass_drum_engine.h **** //
   5:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // 
  12:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // 
  15:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // 
  23:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/bass_drum_engine.h **** //
  25:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/bass_drum_engine.h **** //
  27:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // 808 and synthetic bass drum generators.
  28:eurorack/plaits/dsp/engine/bass_drum_engine.h **** 
  29:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #ifndef PLAITS_DSP_ENGINE_BASS_DRUM_ENGINE_H_
  30:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #define PLAITS_DSP_ENGINE_BASS_DRUM_ENGINE_H_
  31:eurorack/plaits/dsp/engine/bass_drum_engine.h **** 
  32:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/drums/analog_bass_drum.h"
  33:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/drums/synthetic_bass_drum.h"
  34:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/fx/overdrive.h"
  36:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/fx/sample_rate_reducer.h"
  37:eurorack/plaits/dsp/engine/bass_drum_engine.h **** 
  38:eurorack/plaits/dsp/engine/bass_drum_engine.h **** namespace plaits {
  39:eurorack/plaits/dsp/engine/bass_drum_engine.h ****   
  40:eurorack/plaits/dsp/engine/bass_drum_engine.h **** class BassDrumEngine : public Engine {
  41:eurorack/plaits/dsp/engine/bass_drum_engine.h ****  public:
  42:eurorack/plaits/dsp/engine/bass_drum_engine.h ****   BassDrumEngine() { }
 602              		.loc 7 42 3 is_stmt 1 view .LVU168
 603              	.LBB1306:
 604              	.LBB1307:
 605              	.LBI1307:
 606              		.loc 6 80 3 view .LVU169
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 23


 607              		.loc 6 80 3 is_stmt 0 view .LVU170
 608              	.LBE1307:
 609              		.loc 7 42 20 view .LVU171
 610 000c 234A     		ldr	r2, .L36+8
 611 000e C3F84821 		str	r2, [r3, #328]
 612              	.LVL24:
 613              	.LBB1308:
 614              	.LBI1308:
 615              		.file 8 "eurorack/plaits/dsp/drums/analog_bass_drum.h"
   1:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/analog_bass_drum.h **** //
   3:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/analog_bass_drum.h **** //
   5:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // 
  12:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // 
  15:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // 
  23:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/analog_bass_drum.h **** //
  25:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/analog_bass_drum.h **** //
  27:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // 808 bass drum model, revisited.
  28:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  29:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #ifndef PLAITS_DSP_DRUMS_ANALOG_BASS_DRUM_H_
  30:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #define PLAITS_DSP_DRUMS_ANALOG_BASS_DRUM_H_
  31:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  32:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include <algorithm>
  33:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  34:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "stmlib/dsp/filter.h"
  36:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "stmlib/dsp/parameter_interpolator.h"
  37:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "stmlib/dsp/units.h"
  38:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  39:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "plaits/dsp/dsp.h"
  40:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "plaits/dsp/oscillator/sine_oscillator.h"
  41:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  42:eurorack/plaits/dsp/drums/analog_bass_drum.h **** namespace plaits {
  43:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  44:eurorack/plaits/dsp/drums/analog_bass_drum.h **** class AnalogBassDrum {
  45:eurorack/plaits/dsp/drums/analog_bass_drum.h ****  public:
  46:eurorack/plaits/dsp/drums/analog_bass_drum.h ****   AnalogBassDrum() { }
 616              		.loc 8 46 3 is_stmt 1 view .LVU172
 617              	.LBB1309:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 24


 618              	.LBI1309:
 619              		.file 9 "eurorack/stmlib/dsp/filter.h"
   1:eurorack/stmlib/dsp/filter.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/stmlib/dsp/filter.h **** //
   3:eurorack/stmlib/dsp/filter.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/dsp/filter.h **** //
   5:eurorack/stmlib/dsp/filter.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/dsp/filter.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/dsp/filter.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/dsp/filter.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/dsp/filter.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/dsp/filter.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/dsp/filter.h **** // 
  12:eurorack/stmlib/dsp/filter.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/dsp/filter.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/dsp/filter.h **** // 
  15:eurorack/stmlib/dsp/filter.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/dsp/filter.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/dsp/filter.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/dsp/filter.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/dsp/filter.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/dsp/filter.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/dsp/filter.h **** // THE SOFTWARE.
  22:eurorack/stmlib/dsp/filter.h **** // 
  23:eurorack/stmlib/dsp/filter.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/dsp/filter.h **** //
  25:eurorack/stmlib/dsp/filter.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/dsp/filter.h **** //
  27:eurorack/stmlib/dsp/filter.h **** // Zero-delay-feedback filters (one pole and SVF).
  28:eurorack/stmlib/dsp/filter.h **** // Naive SVF.
  29:eurorack/stmlib/dsp/filter.h **** 
  30:eurorack/stmlib/dsp/filter.h **** #ifndef STMLIB_DSP_FILTER_H_
  31:eurorack/stmlib/dsp/filter.h **** #define STMLIB_DSP_FILTER_H_
  32:eurorack/stmlib/dsp/filter.h **** 
  33:eurorack/stmlib/dsp/filter.h **** #include "stmlib/stmlib.h"
  34:eurorack/stmlib/dsp/filter.h **** 
  35:eurorack/stmlib/dsp/filter.h **** #include <cmath>
  36:eurorack/stmlib/dsp/filter.h **** #include <algorithm>
  37:eurorack/stmlib/dsp/filter.h **** 
  38:eurorack/stmlib/dsp/filter.h **** namespace stmlib {
  39:eurorack/stmlib/dsp/filter.h **** 
  40:eurorack/stmlib/dsp/filter.h **** enum FilterMode {
  41:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_LOW_PASS,
  42:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_BAND_PASS,
  43:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_BAND_PASS_NORMALIZED,
  44:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_HIGH_PASS
  45:eurorack/stmlib/dsp/filter.h **** };
  46:eurorack/stmlib/dsp/filter.h **** 
  47:eurorack/stmlib/dsp/filter.h **** enum FrequencyApproximation {
  48:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_EXACT,
  49:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_ACCURATE,
  50:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_FAST,
  51:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_DIRTY
  52:eurorack/stmlib/dsp/filter.h **** };
  53:eurorack/stmlib/dsp/filter.h **** 
  54:eurorack/stmlib/dsp/filter.h **** #define M_PI_F float(M_PI)
  55:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_2 M_PI * M_PI
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 25


  56:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_3 M_PI_POW_2 * M_PI
  57:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_5 M_PI_POW_3 * M_PI_POW_2
  58:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_7 M_PI_POW_5 * M_PI_POW_2
  59:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_9 M_PI_POW_7 * M_PI_POW_2
  60:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_11 M_PI_POW_9 * M_PI_POW_2
  61:eurorack/stmlib/dsp/filter.h **** 
  62:eurorack/stmlib/dsp/filter.h **** class DCBlocker {
  63:eurorack/stmlib/dsp/filter.h ****  public:
  64:eurorack/stmlib/dsp/filter.h ****   DCBlocker() { }
  65:eurorack/stmlib/dsp/filter.h ****   ~DCBlocker() { }
  66:eurorack/stmlib/dsp/filter.h ****   
  67:eurorack/stmlib/dsp/filter.h ****   void Init(float pole) {
  68:eurorack/stmlib/dsp/filter.h ****     x_ = 0.0f;
  69:eurorack/stmlib/dsp/filter.h ****     y_ = 0.0f;
  70:eurorack/stmlib/dsp/filter.h ****     pole_ = pole;
  71:eurorack/stmlib/dsp/filter.h ****   }
  72:eurorack/stmlib/dsp/filter.h ****   
  73:eurorack/stmlib/dsp/filter.h ****   inline void Process(float* in_out, size_t size) {
  74:eurorack/stmlib/dsp/filter.h ****     float x = x_;
  75:eurorack/stmlib/dsp/filter.h ****     float y = y_;
  76:eurorack/stmlib/dsp/filter.h ****     const float pole = pole_;
  77:eurorack/stmlib/dsp/filter.h ****     while (size--) {
  78:eurorack/stmlib/dsp/filter.h ****       float old_x = x;
  79:eurorack/stmlib/dsp/filter.h ****       x = *in_out;
  80:eurorack/stmlib/dsp/filter.h ****       *in_out++ = y = y * pole + x - old_x;
  81:eurorack/stmlib/dsp/filter.h ****     }
  82:eurorack/stmlib/dsp/filter.h ****     x_ = x;
  83:eurorack/stmlib/dsp/filter.h ****     y_ = y;
  84:eurorack/stmlib/dsp/filter.h ****   }
  85:eurorack/stmlib/dsp/filter.h ****   
  86:eurorack/stmlib/dsp/filter.h ****  private:
  87:eurorack/stmlib/dsp/filter.h ****   float pole_;
  88:eurorack/stmlib/dsp/filter.h ****   float x_;
  89:eurorack/stmlib/dsp/filter.h ****   float y_;
  90:eurorack/stmlib/dsp/filter.h **** };
  91:eurorack/stmlib/dsp/filter.h **** 
  92:eurorack/stmlib/dsp/filter.h **** class OnePole {
  93:eurorack/stmlib/dsp/filter.h ****  public:
  94:eurorack/stmlib/dsp/filter.h ****   OnePole() { }
  95:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
  96:eurorack/stmlib/dsp/filter.h ****   
  97:eurorack/stmlib/dsp/filter.h ****   void Init() {
  98:eurorack/stmlib/dsp/filter.h ****     set_f<FREQUENCY_DIRTY>(0.01f);
  99:eurorack/stmlib/dsp/filter.h ****     Reset();
 100:eurorack/stmlib/dsp/filter.h ****   }
 101:eurorack/stmlib/dsp/filter.h ****   
 102:eurorack/stmlib/dsp/filter.h ****   void Reset() {
 103:eurorack/stmlib/dsp/filter.h ****     state_ = 0.0f;
 104:eurorack/stmlib/dsp/filter.h ****   }
 105:eurorack/stmlib/dsp/filter.h ****   
 106:eurorack/stmlib/dsp/filter.h ****   template<FrequencyApproximation approximation>
 107:eurorack/stmlib/dsp/filter.h ****   static inline float tan(float f) {
 108:eurorack/stmlib/dsp/filter.h ****     if (approximation == FREQUENCY_EXACT) {
 109:eurorack/stmlib/dsp/filter.h ****       // Clip coefficient to about 100.
 110:eurorack/stmlib/dsp/filter.h ****       f = f < 0.497f ? f : 0.497f;
 111:eurorack/stmlib/dsp/filter.h ****       return tanf(M_PI_F * f);
 112:eurorack/stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_DIRTY) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 26


 113:eurorack/stmlib/dsp/filter.h ****       // Optimized for frequencies below 8kHz.
 114:eurorack/stmlib/dsp/filter.h ****       const float a = 3.736e-01f * M_PI_POW_3;
 115:eurorack/stmlib/dsp/filter.h ****       return f * (M_PI_F + a * f * f);
 116:eurorack/stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_FAST) {
 117:eurorack/stmlib/dsp/filter.h ****       // The usual tangent approximation uses 3.1755e-01 and 2.033e-01, but
 118:eurorack/stmlib/dsp/filter.h ****       // the coefficients used here are optimized to minimize error for the
 119:eurorack/stmlib/dsp/filter.h ****       // 16Hz to 16kHz range, with a sample rate of 48kHz.
 120:eurorack/stmlib/dsp/filter.h ****       const float a = 3.260e-01f * M_PI_POW_3;
 121:eurorack/stmlib/dsp/filter.h ****       const float b = 1.823e-01f * M_PI_POW_5;
 122:eurorack/stmlib/dsp/filter.h ****       float f2 = f * f;
 123:eurorack/stmlib/dsp/filter.h ****       return f * (M_PI_F + f2 * (a + b * f2));
 124:eurorack/stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_ACCURATE) {
 125:eurorack/stmlib/dsp/filter.h ****       // These coefficients don't need to be tweaked for the audio range.
 126:eurorack/stmlib/dsp/filter.h ****       const float a = 3.333314036e-01f * M_PI_POW_3;
 127:eurorack/stmlib/dsp/filter.h ****       const float b = 1.333923995e-01f * M_PI_POW_5;
 128:eurorack/stmlib/dsp/filter.h ****       const float c = 5.33740603e-02f * M_PI_POW_7;
 129:eurorack/stmlib/dsp/filter.h ****       const float d = 2.900525e-03f * M_PI_POW_9;
 130:eurorack/stmlib/dsp/filter.h ****       const float e = 9.5168091e-03f * M_PI_POW_11;
 131:eurorack/stmlib/dsp/filter.h ****       float f2 = f * f;
 132:eurorack/stmlib/dsp/filter.h ****       return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
 133:eurorack/stmlib/dsp/filter.h ****     }
 134:eurorack/stmlib/dsp/filter.h ****   }
 135:eurorack/stmlib/dsp/filter.h ****   
 136:eurorack/stmlib/dsp/filter.h ****   // Set frequency and resonance from true units. Various approximations
 137:eurorack/stmlib/dsp/filter.h ****   // are available to avoid the cost of tanf.
 138:eurorack/stmlib/dsp/filter.h ****   template<FrequencyApproximation approximation>
 139:eurorack/stmlib/dsp/filter.h ****   inline void set_f(float f) {
 140:eurorack/stmlib/dsp/filter.h ****     g_ = tan<approximation>(f);
 141:eurorack/stmlib/dsp/filter.h ****     gi_ = 1.0f / (1.0f + g_);
 142:eurorack/stmlib/dsp/filter.h ****   }
 143:eurorack/stmlib/dsp/filter.h ****   
 144:eurorack/stmlib/dsp/filter.h ****   template<FilterMode mode>
 145:eurorack/stmlib/dsp/filter.h ****   inline float Process(float in) {
 146:eurorack/stmlib/dsp/filter.h ****     float lp;
 147:eurorack/stmlib/dsp/filter.h ****     lp = (g_ * in + state_) * gi_;
 148:eurorack/stmlib/dsp/filter.h ****     state_ = g_ * (in - lp) + lp;
 149:eurorack/stmlib/dsp/filter.h **** 
 150:eurorack/stmlib/dsp/filter.h ****     if (mode == FILTER_MODE_LOW_PASS) {
 151:eurorack/stmlib/dsp/filter.h ****       return lp;
 152:eurorack/stmlib/dsp/filter.h ****     } else if (mode == FILTER_MODE_HIGH_PASS) {
 153:eurorack/stmlib/dsp/filter.h ****       return in - lp;
 154:eurorack/stmlib/dsp/filter.h ****     } else {
 155:eurorack/stmlib/dsp/filter.h ****       return 0.0f;
 156:eurorack/stmlib/dsp/filter.h ****     }
 157:eurorack/stmlib/dsp/filter.h ****   }
 158:eurorack/stmlib/dsp/filter.h ****   
 159:eurorack/stmlib/dsp/filter.h ****   template<FilterMode mode>
 160:eurorack/stmlib/dsp/filter.h ****   inline void Process(float* in_out, size_t size) {
 161:eurorack/stmlib/dsp/filter.h ****     while (size--) {
 162:eurorack/stmlib/dsp/filter.h ****       *in_out = Process<mode>(*in_out);
 163:eurorack/stmlib/dsp/filter.h ****       ++in_out;
 164:eurorack/stmlib/dsp/filter.h ****     }
 165:eurorack/stmlib/dsp/filter.h ****   }
 166:eurorack/stmlib/dsp/filter.h ****   
 167:eurorack/stmlib/dsp/filter.h ****  private:
 168:eurorack/stmlib/dsp/filter.h ****   float g_;
 169:eurorack/stmlib/dsp/filter.h ****   float gi_;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 27


 170:eurorack/stmlib/dsp/filter.h ****   float state_;
 171:eurorack/stmlib/dsp/filter.h ****   
 172:eurorack/stmlib/dsp/filter.h ****   DISALLOW_COPY_AND_ASSIGN(OnePole);
 173:eurorack/stmlib/dsp/filter.h **** };
 174:eurorack/stmlib/dsp/filter.h **** 
 175:eurorack/stmlib/dsp/filter.h **** 
 176:eurorack/stmlib/dsp/filter.h **** 
 177:eurorack/stmlib/dsp/filter.h **** class Svf {
 178:eurorack/stmlib/dsp/filter.h ****  public:
 179:eurorack/stmlib/dsp/filter.h ****   Svf() { }
 620              		.loc 9 179 3 view .LVU173
 621              		.loc 9 179 3 is_stmt 0 view .LVU174
 622              	.LBE1309:
 623              	.LBB1310:
 624              	.LBI1310:
 625              		.file 10 "eurorack/plaits/dsp/oscillator/sine_oscillator.h"
   1:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // Simple sine oscillator (wavetable) + fast sine oscillator (magic circle).
  28:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
  29:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // The fast implementation might glitch a bit under heavy modulations of the
  30:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // frequency.
  31:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  32:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_SINE_OSCILLATOR_H_
  33:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #define PLAITS_DSP_OSCILLATOR_SINE_OSCILLATOR_H_
  34:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  35:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #include "stmlib/dsp/dsp.h"
  36:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  37:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #include "stmlib/dsp/rsqrt.h"
  38:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  39:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #include "plaits/resources.h"
  40:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  41:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** namespace plaits {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 28


  42:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  43:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** class SineOscillator {
  44:eurorack/plaits/dsp/oscillator/sine_oscillator.h ****  public:
  45:eurorack/plaits/dsp/oscillator/sine_oscillator.h ****   SineOscillator() { }
 626              		.loc 10 45 3 is_stmt 1 view .LVU175
 627              		.loc 10 45 3 is_stmt 0 view .LVU176
 628              	.LBE1310:
 629              	.LBE1308:
 630              	.LBB1311:
 631              	.LBI1311:
 632              		.file 11 "eurorack/plaits/dsp/drums/synthetic_bass_drum.h"
   1:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** //
   3:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** //
   5:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // 
  12:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // 
  15:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // 
  23:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** //
  25:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** //
  27:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Naive bass drum model (modulated oscillator with FM + envelope).
  28:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Inadvertently 909-ish.
  29:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  30:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #ifndef PLAITS_DSP_DRUMS_SYNTHETIC_BASS_DRUM_H_
  31:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #define PLAITS_DSP_DRUMS_SYNTHETIC_BASS_DRUM_H_
  32:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  33:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "stmlib/dsp/dsp.h"
  34:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "stmlib/dsp/units.h"
  35:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "stmlib/utils/random.h"
  36:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  37:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "plaits/dsp/dsp.h"
  38:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "plaits/resources.h"
  39:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  40:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** namespace plaits {
  41:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  42:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** class SyntheticBassDrumClick {
  43:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  public:
  44:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   SyntheticBassDrumClick() { }
  45:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumClick() { }
  46:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 29


  47:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   void Init() {
  48:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     lp_ = 0.0f;
  49:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     hp_ = 0.0f;
  50:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     filter_.Init();
  51:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  52:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   }
  53:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  54:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float Process(float in) {
  55:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     SLOPE(lp_, in, 0.5f, 0.1f);
  56:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     ONE_POLE(hp_, lp_, 0.04f);
  57:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     return filter_.Process<stmlib::FILTER_MODE_LOW_PASS>(lp_ - hp_);
  58:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   }
  59:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  60:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  private:
  61:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float lp_;
  62:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float hp_;
  63:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   stmlib::Svf filter_;
  64:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  65:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   DISALLOW_COPY_AND_ASSIGN(SyntheticBassDrumClick);
  66:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** };
  67:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  68:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** class SyntheticBassDrumAttackNoise {
  69:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  public:
  70:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   SyntheticBassDrumAttackNoise() { }
  71:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumAttackNoise() { }
  72:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  73:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   void Init() {
  74:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     lp_ = 0.0f;
  75:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     hp_ = 0.0f;
  76:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   }
  77:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  78:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float Render() {
  79:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     float sample = stmlib::Random::GetFloat();
  80:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     ONE_POLE(lp_, sample, 0.05f);
  81:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     ONE_POLE(hp_, lp_, 0.005f);
  82:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     return lp_ - hp_;
  83:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   }
  84:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  85:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  private:
  86:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float lp_;
  87:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float hp_;
  88:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  89:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   DISALLOW_COPY_AND_ASSIGN(SyntheticBassDrumAttackNoise);
  90:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** };
  91:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  92:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** class SyntheticBassDrum {
  93:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  public:
  94:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   SyntheticBassDrum() { }
 633              		.loc 11 94 3 is_stmt 1 view .LVU177
 634              	.LBB1312:
 635              	.LBI1312:
  44:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumClick() { }
 636              		.loc 11 44 3 view .LVU178
 637              	.LBB1313:
 638              	.LBI1313:
 639              		.loc 9 179 3 view .LVU179
 640              		.loc 9 179 3 is_stmt 0 view .LVU180
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 30


 641              	.LBE1313:
 642              	.LBE1312:
 643              	.LBB1314:
 644              	.LBI1314:
  70:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumAttackNoise() { }
 645              		.loc 11 70 3 is_stmt 1 view .LVU181
  70:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumAttackNoise() { }
 646              		.loc 11 70 3 is_stmt 0 view .LVU182
 647              	.LBE1314:
 648              	.LBE1311:
 649              	.LBB1315:
 650              	.LBI1315:
 651              		.file 12 "eurorack/plaits/dsp/fx/overdrive.h"
   1:eurorack/plaits/dsp/fx/overdrive.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/plaits/dsp/fx/overdrive.h **** //
   3:eurorack/plaits/dsp/fx/overdrive.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/fx/overdrive.h **** //
   5:eurorack/plaits/dsp/fx/overdrive.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/fx/overdrive.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/fx/overdrive.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/fx/overdrive.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/fx/overdrive.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/fx/overdrive.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/fx/overdrive.h **** // 
  12:eurorack/plaits/dsp/fx/overdrive.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/fx/overdrive.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/fx/overdrive.h **** // 
  15:eurorack/plaits/dsp/fx/overdrive.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/fx/overdrive.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/fx/overdrive.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/fx/overdrive.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/fx/overdrive.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/fx/overdrive.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/fx/overdrive.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/fx/overdrive.h **** // 
  23:eurorack/plaits/dsp/fx/overdrive.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/fx/overdrive.h **** //
  25:eurorack/plaits/dsp/fx/overdrive.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/fx/overdrive.h **** //
  27:eurorack/plaits/dsp/fx/overdrive.h **** // Distortion/overdrive.
  28:eurorack/plaits/dsp/fx/overdrive.h **** 
  29:eurorack/plaits/dsp/fx/overdrive.h **** #ifndef PLAITS_DSP_FX_OVERDRIVE_H_
  30:eurorack/plaits/dsp/fx/overdrive.h **** #define PLAITS_DSP_FX_OVERDRIVE_H_
  31:eurorack/plaits/dsp/fx/overdrive.h **** 
  32:eurorack/plaits/dsp/fx/overdrive.h **** #include <algorithm>
  33:eurorack/plaits/dsp/fx/overdrive.h **** 
  34:eurorack/plaits/dsp/fx/overdrive.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/fx/overdrive.h **** #include "stmlib/dsp/parameter_interpolator.h"
  36:eurorack/plaits/dsp/fx/overdrive.h **** 
  37:eurorack/plaits/dsp/fx/overdrive.h **** namespace plaits {
  38:eurorack/plaits/dsp/fx/overdrive.h ****   
  39:eurorack/plaits/dsp/fx/overdrive.h **** class Overdrive {
  40:eurorack/plaits/dsp/fx/overdrive.h ****  public:
  41:eurorack/plaits/dsp/fx/overdrive.h ****   Overdrive() { }
 652              		.loc 12 41 3 is_stmt 1 view .LVU183
 653              		.loc 12 41 3 is_stmt 0 view .LVU184
 654              	.LBE1315:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 31


 655              	.LBE1306:
 656              	.LBE1305:
 657              	.LBB1316:
 658              	.LBI1316:
 659              		.file 13 "eurorack/plaits/dsp/engine/fm_engine.h"
   1:eurorack/plaits/dsp/engine/fm_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/fm_engine.h **** //
   3:eurorack/plaits/dsp/engine/fm_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/fm_engine.h **** //
   5:eurorack/plaits/dsp/engine/fm_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/fm_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/fm_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/fm_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/fm_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/fm_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/fm_engine.h **** // 
  12:eurorack/plaits/dsp/engine/fm_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/fm_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/fm_engine.h **** // 
  15:eurorack/plaits/dsp/engine/fm_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/fm_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/fm_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/fm_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/fm_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/fm_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/fm_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/fm_engine.h **** // 
  23:eurorack/plaits/dsp/engine/fm_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/fm_engine.h **** //
  25:eurorack/plaits/dsp/engine/fm_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/fm_engine.h **** //
  27:eurorack/plaits/dsp/engine/fm_engine.h **** // Classic 2-op FM, as found in Braids, Rings and Elements.
  28:eurorack/plaits/dsp/engine/fm_engine.h **** 
  29:eurorack/plaits/dsp/engine/fm_engine.h **** #ifndef PLAITS_DSP_ENGINE_FM_ENGINE_H_
  30:eurorack/plaits/dsp/engine/fm_engine.h **** #define PLAITS_DSP_ENGINE_FM_ENGINE_H_
  31:eurorack/plaits/dsp/engine/fm_engine.h **** 
  32:eurorack/plaits/dsp/engine/fm_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/fm_engine.h **** 
  34:eurorack/plaits/dsp/engine/fm_engine.h **** namespace plaits {
  35:eurorack/plaits/dsp/engine/fm_engine.h ****   
  36:eurorack/plaits/dsp/engine/fm_engine.h **** class FMEngine : public Engine {
  37:eurorack/plaits/dsp/engine/fm_engine.h ****  public:
  38:eurorack/plaits/dsp/engine/fm_engine.h ****   FMEngine() { }
 660              		.loc 13 38 3 is_stmt 1 view .LVU185
 661              	.LBB1317:
 662              	.LBB1318:
 663              	.LBI1318:
 664              		.loc 6 80 3 view .LVU186
 665              		.loc 6 80 3 is_stmt 0 view .LVU187
 666              	.LBE1318:
 667              		.loc 13 38 14 view .LVU188
 668 0012 234A     		ldr	r2, .L36+12
 669 0014 C3F80022 		str	r2, [r3, #512]
 670              	.LVL25:
 671              		.loc 13 38 14 view .LVU189
 672              	.LBE1317:
 673              	.LBE1316:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 32


 674              	.LBB1319:
 675              	.LBI1319:
 676              		.file 14 "eurorack/plaits/dsp/engine/grain_engine.h"
   1:eurorack/plaits/dsp/engine/grain_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/grain_engine.h **** //
   3:eurorack/plaits/dsp/engine/grain_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/grain_engine.h **** //
   5:eurorack/plaits/dsp/engine/grain_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/grain_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/grain_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/grain_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/grain_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/grain_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/grain_engine.h **** // 
  12:eurorack/plaits/dsp/engine/grain_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/grain_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/grain_engine.h **** // 
  15:eurorack/plaits/dsp/engine/grain_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/grain_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/grain_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/grain_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/grain_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/grain_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/grain_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/grain_engine.h **** // 
  23:eurorack/plaits/dsp/engine/grain_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/grain_engine.h **** //
  25:eurorack/plaits/dsp/engine/grain_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/grain_engine.h **** //
  27:eurorack/plaits/dsp/engine/grain_engine.h **** // Windowed sine segments.
  28:eurorack/plaits/dsp/engine/grain_engine.h **** 
  29:eurorack/plaits/dsp/engine/grain_engine.h **** #ifndef PLAITS_DSP_ENGINE_GRAIN_ENGINE_H_
  30:eurorack/plaits/dsp/engine/grain_engine.h **** #define PLAITS_DSP_ENGINE_GRAIN_ENGINE_H_
  31:eurorack/plaits/dsp/engine/grain_engine.h **** 
  32:eurorack/plaits/dsp/engine/grain_engine.h **** #include "stmlib/dsp/filter.h"
  33:eurorack/plaits/dsp/engine/grain_engine.h **** 
  34:eurorack/plaits/dsp/engine/grain_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/grain_engine.h **** #include "plaits/dsp/oscillator/grainlet_oscillator.h"
  36:eurorack/plaits/dsp/engine/grain_engine.h **** #include "plaits/dsp/oscillator/vosim_oscillator.h"
  37:eurorack/plaits/dsp/engine/grain_engine.h **** #include "plaits/dsp/oscillator/z_oscillator.h"
  38:eurorack/plaits/dsp/engine/grain_engine.h **** 
  39:eurorack/plaits/dsp/engine/grain_engine.h **** namespace plaits {
  40:eurorack/plaits/dsp/engine/grain_engine.h ****   
  41:eurorack/plaits/dsp/engine/grain_engine.h **** class GrainEngine : public Engine {
  42:eurorack/plaits/dsp/engine/grain_engine.h ****  public:
  43:eurorack/plaits/dsp/engine/grain_engine.h ****   GrainEngine() { }
 677              		.loc 14 43 3 is_stmt 1 view .LVU190
 678              	.LBB1320:
 679              	.LBB1321:
 680              	.LBI1321:
 681              		.loc 6 80 3 view .LVU191
 682              		.loc 6 80 3 is_stmt 0 view .LVU192
 683              	.LBE1321:
 684              		.loc 14 43 17 view .LVU193
 685 0018 224A     		ldr	r2, .L36+16
 686 001a C3F83822 		str	r2, [r3, #568]
 687              		.loc 14 43 17 is_stmt 1 view .LVU194
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 33


 688              	.LVL26:
 689              	.LBB1322:
 690              	.LBI1322:
 691              		.file 15 "eurorack/plaits/dsp/oscillator/z_oscillator.h"
   1:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/z_oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/z_oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/z_oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/z_oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // Sinewave multiplied by and sync'ed to a carrier.
  28:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  29:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_Z_OSCILLATOR_H_
  30:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #define PLAITS_DSP_OSCILLATOR_Z_OSCILLATOR_H_
  31:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  32:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include <algorithm>
  33:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  34:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  36:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include "stmlib/dsp/polyblep.h"
  37:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  38:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include "plaits/resources.h"
  39:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  40:eurorack/plaits/dsp/oscillator/z_oscillator.h **** namespace plaits {
  41:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  42:eurorack/plaits/dsp/oscillator/z_oscillator.h **** class ZOscillator {
  43:eurorack/plaits/dsp/oscillator/z_oscillator.h ****  public:
  44:eurorack/plaits/dsp/oscillator/z_oscillator.h ****   ZOscillator() { }
 692              		.loc 15 44 3 view .LVU195
 693              		.loc 15 44 3 is_stmt 0 view .LVU196
 694              	.LBE1322:
 695              		.loc 14 43 17 is_stmt 1 view .LVU197
 696              		.loc 14 43 17 is_stmt 0 view .LVU198
 697              	.LBE1320:
 698              	.LBE1319:
 699              	.LBB1323:
 700              	.LBI1323:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 34


 701              		.file 16 "eurorack/plaits/dsp/engine/hi_hat_engine.h"
   1:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/hi_hat_engine.h **** //
   3:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/hi_hat_engine.h **** //
   5:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // 
  12:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // 
  15:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // 
  23:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/hi_hat_engine.h **** //
  25:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/hi_hat_engine.h **** //
  27:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // 808-style HH with two noise sources - one faithful to the original, the other
  28:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // more metallic.
  29:eurorack/plaits/dsp/engine/hi_hat_engine.h **** 
  30:eurorack/plaits/dsp/engine/hi_hat_engine.h **** #ifndef PLAITS_DSP_ENGINE_HI_HAT_ENGINE_H_
  31:eurorack/plaits/dsp/engine/hi_hat_engine.h **** #define PLAITS_DSP_ENGINE_HI_HAT_ENGINE_H_
  32:eurorack/plaits/dsp/engine/hi_hat_engine.h **** 
  33:eurorack/plaits/dsp/engine/hi_hat_engine.h **** #include "plaits/dsp/drums/hi_hat.h"
  34:eurorack/plaits/dsp/engine/hi_hat_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/hi_hat_engine.h **** 
  36:eurorack/plaits/dsp/engine/hi_hat_engine.h **** namespace plaits {
  37:eurorack/plaits/dsp/engine/hi_hat_engine.h ****   
  38:eurorack/plaits/dsp/engine/hi_hat_engine.h **** class HiHatEngine : public Engine {
  39:eurorack/plaits/dsp/engine/hi_hat_engine.h ****  public:
  40:eurorack/plaits/dsp/engine/hi_hat_engine.h ****   HiHatEngine() { }
 702              		.loc 16 40 3 is_stmt 1 view .LVU199
 703              	.LBB1324:
 704              	.LBB1325:
 705              	.LBI1325:
 706              		.loc 6 80 3 view .LVU200
 707              		.loc 6 80 3 is_stmt 0 view .LVU201
 708              	.LBE1325:
 709              		.loc 16 40 17 view .LVU202
 710 001e 224A     		ldr	r2, .L36+20
 711 0020 C3F8BC22 		str	r2, [r3, #700]
 712              	.LVL27:
 713              	.LBB1326:
 714              	.LBI1326:
 715              		.file 17 "eurorack/plaits/dsp/drums/hi_hat.h"
   1:eurorack/plaits/dsp/drums/hi_hat.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/hi_hat.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 35


   3:eurorack/plaits/dsp/drums/hi_hat.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/hi_hat.h **** //
   5:eurorack/plaits/dsp/drums/hi_hat.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/hi_hat.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/hi_hat.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/hi_hat.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/hi_hat.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/hi_hat.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/hi_hat.h **** // 
  12:eurorack/plaits/dsp/drums/hi_hat.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/hi_hat.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/hi_hat.h **** // 
  15:eurorack/plaits/dsp/drums/hi_hat.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/hi_hat.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/hi_hat.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/hi_hat.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/hi_hat.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/hi_hat.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/hi_hat.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/hi_hat.h **** // 
  23:eurorack/plaits/dsp/drums/hi_hat.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/hi_hat.h **** //
  25:eurorack/plaits/dsp/drums/hi_hat.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/hi_hat.h **** //
  27:eurorack/plaits/dsp/drums/hi_hat.h **** // 808 HH, with a few extra parameters to push things to the CY territory...
  28:eurorack/plaits/dsp/drums/hi_hat.h **** // The template parameter MetallicNoiseSource allows another kind of "metallic
  29:eurorack/plaits/dsp/drums/hi_hat.h **** // noise" to be used, for results which are more similar to KR-55 or FM hi-hats.
  30:eurorack/plaits/dsp/drums/hi_hat.h **** 
  31:eurorack/plaits/dsp/drums/hi_hat.h **** #ifndef PLAITS_DSP_DRUMS_HI_HAT_H_
  32:eurorack/plaits/dsp/drums/hi_hat.h **** #define PLAITS_DSP_DRUMS_HI_HAT_H_
  33:eurorack/plaits/dsp/drums/hi_hat.h **** 
  34:eurorack/plaits/dsp/drums/hi_hat.h **** #include <algorithm>
  35:eurorack/plaits/dsp/drums/hi_hat.h **** 
  36:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/dsp/dsp.h"
  37:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/dsp/filter.h"
  38:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/dsp/parameter_interpolator.h"
  39:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/dsp/units.h"
  40:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/utils/random.h"
  41:eurorack/plaits/dsp/drums/hi_hat.h **** 
  42:eurorack/plaits/dsp/drums/hi_hat.h **** #include "plaits/dsp/dsp.h"
  43:eurorack/plaits/dsp/drums/hi_hat.h **** #include "plaits/dsp/oscillator/oscillator.h"
  44:eurorack/plaits/dsp/drums/hi_hat.h **** 
  45:eurorack/plaits/dsp/drums/hi_hat.h **** namespace plaits {
  46:eurorack/plaits/dsp/drums/hi_hat.h **** 
  47:eurorack/plaits/dsp/drums/hi_hat.h **** // 808 style "metallic noise" with 6 square oscillators.
  48:eurorack/plaits/dsp/drums/hi_hat.h **** class SquareNoise {
  49:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
  50:eurorack/plaits/dsp/drums/hi_hat.h ****   SquareNoise() { }
  51:eurorack/plaits/dsp/drums/hi_hat.h ****   ~SquareNoise() { }
  52:eurorack/plaits/dsp/drums/hi_hat.h **** 
  53:eurorack/plaits/dsp/drums/hi_hat.h ****   void Init() {
  54:eurorack/plaits/dsp/drums/hi_hat.h ****     std::fill(&phase_[0], &phase_[6], 0);
  55:eurorack/plaits/dsp/drums/hi_hat.h ****   }
  56:eurorack/plaits/dsp/drums/hi_hat.h ****     
  57:eurorack/plaits/dsp/drums/hi_hat.h ****   void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
  58:eurorack/plaits/dsp/drums/hi_hat.h ****     const float ratios[6] = {
  59:eurorack/plaits/dsp/drums/hi_hat.h ****         // Nominal f0: 414 Hz
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 36


  60:eurorack/plaits/dsp/drums/hi_hat.h ****         1.0f, 1.304f, 1.466f, 1.787f, 1.932f, 2.536f
  61:eurorack/plaits/dsp/drums/hi_hat.h ****     };
  62:eurorack/plaits/dsp/drums/hi_hat.h ****   
  63:eurorack/plaits/dsp/drums/hi_hat.h ****     uint32_t increment[6];
  64:eurorack/plaits/dsp/drums/hi_hat.h ****     uint32_t phase[6];
  65:eurorack/plaits/dsp/drums/hi_hat.h ****     for (int i = 0; i < 6; ++i) {
  66:eurorack/plaits/dsp/drums/hi_hat.h ****       float f = f0 * ratios[i];
  67:eurorack/plaits/dsp/drums/hi_hat.h ****       if (f >= 0.499f) f = 0.499f;
  68:eurorack/plaits/dsp/drums/hi_hat.h ****       increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
  69:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[i] = phase_[i];
  70:eurorack/plaits/dsp/drums/hi_hat.h ****     }
  71:eurorack/plaits/dsp/drums/hi_hat.h **** 
  72:eurorack/plaits/dsp/drums/hi_hat.h ****     while (size--) {
  73:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[0] += increment[0];
  74:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[1] += increment[1];
  75:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[2] += increment[2];
  76:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[3] += increment[3];
  77:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[4] += increment[4];
  78:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[5] += increment[5];
  79:eurorack/plaits/dsp/drums/hi_hat.h ****       uint32_t noise = 0;
  80:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[0] >> 31);
  81:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[1] >> 31);
  82:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[2] >> 31);
  83:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[3] >> 31);
  84:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[4] >> 31);
  85:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[5] >> 31);
  86:eurorack/plaits/dsp/drums/hi_hat.h ****       *out++ = 0.33f * static_cast<float>(noise) - 1.0f;
  87:eurorack/plaits/dsp/drums/hi_hat.h ****     }
  88:eurorack/plaits/dsp/drums/hi_hat.h ****   
  89:eurorack/plaits/dsp/drums/hi_hat.h ****     for (int i = 0; i < 6; ++i) {
  90:eurorack/plaits/dsp/drums/hi_hat.h ****       phase_[i] = phase[i];
  91:eurorack/plaits/dsp/drums/hi_hat.h ****     }
  92:eurorack/plaits/dsp/drums/hi_hat.h ****   }
  93:eurorack/plaits/dsp/drums/hi_hat.h **** 
  94:eurorack/plaits/dsp/drums/hi_hat.h ****  private:
  95:eurorack/plaits/dsp/drums/hi_hat.h ****   uint32_t phase_[6];
  96:eurorack/plaits/dsp/drums/hi_hat.h **** 
  97:eurorack/plaits/dsp/drums/hi_hat.h ****   DISALLOW_COPY_AND_ASSIGN(SquareNoise);
  98:eurorack/plaits/dsp/drums/hi_hat.h **** };
  99:eurorack/plaits/dsp/drums/hi_hat.h **** 
 100:eurorack/plaits/dsp/drums/hi_hat.h **** class RingModNoise {
 101:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
 102:eurorack/plaits/dsp/drums/hi_hat.h ****   RingModNoise() { }
 103:eurorack/plaits/dsp/drums/hi_hat.h ****   ~RingModNoise() { }
 104:eurorack/plaits/dsp/drums/hi_hat.h **** 
 105:eurorack/plaits/dsp/drums/hi_hat.h ****   void Init() {
 106:eurorack/plaits/dsp/drums/hi_hat.h ****     for (int i = 0; i < 6; ++i) {
 107:eurorack/plaits/dsp/drums/hi_hat.h ****       oscillator_[i].Init();
 108:eurorack/plaits/dsp/drums/hi_hat.h ****     }
 109:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 110:eurorack/plaits/dsp/drums/hi_hat.h ****   
 111:eurorack/plaits/dsp/drums/hi_hat.h ****   void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
 112:eurorack/plaits/dsp/drums/hi_hat.h ****     const float ratio = f0 / (0.01f + f0);
 113:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f1a = 200.0f / kSampleRate * ratio;
 114:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f1b = 7530.0f / kSampleRate * ratio;
 115:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f2a = 510.0f / kSampleRate * ratio;
 116:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f2b = 8075.0f / kSampleRate * ratio;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 37


 117:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f3a = 730.0f / kSampleRate * ratio;
 118:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f3b = 10500.0f / kSampleRate * ratio;
 119:eurorack/plaits/dsp/drums/hi_hat.h ****     
 120:eurorack/plaits/dsp/drums/hi_hat.h ****     std::fill(&out[0], &out[size], 0.0f);
 121:eurorack/plaits/dsp/drums/hi_hat.h ****     
 122:eurorack/plaits/dsp/drums/hi_hat.h ****     RenderPair(&oscillator_[0], f1a, f1b, temp_1, temp_2, out, size);
 123:eurorack/plaits/dsp/drums/hi_hat.h ****     RenderPair(&oscillator_[2], f2a, f2b, temp_1, temp_2, out, size);
 124:eurorack/plaits/dsp/drums/hi_hat.h ****     RenderPair(&oscillator_[4], f3a, f3b, temp_1, temp_2, out, size);
 125:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 126:eurorack/plaits/dsp/drums/hi_hat.h **** 
 127:eurorack/plaits/dsp/drums/hi_hat.h ****  private:
 128:eurorack/plaits/dsp/drums/hi_hat.h ****   void RenderPair(
 129:eurorack/plaits/dsp/drums/hi_hat.h ****       Oscillator* osc,
 130:eurorack/plaits/dsp/drums/hi_hat.h ****       float f1,
 131:eurorack/plaits/dsp/drums/hi_hat.h ****       float f2,
 132:eurorack/plaits/dsp/drums/hi_hat.h ****       float* temp_1,
 133:eurorack/plaits/dsp/drums/hi_hat.h ****       float* temp_2,
 134:eurorack/plaits/dsp/drums/hi_hat.h ****       float* out,
 135:eurorack/plaits/dsp/drums/hi_hat.h ****       size_t size) {
 136:eurorack/plaits/dsp/drums/hi_hat.h ****     osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
 137:eurorack/plaits/dsp/drums/hi_hat.h ****     osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
 138:eurorack/plaits/dsp/drums/hi_hat.h ****     while (size--) {
 139:eurorack/plaits/dsp/drums/hi_hat.h ****       *out++ += *temp_1++ * *temp_2++;
 140:eurorack/plaits/dsp/drums/hi_hat.h ****     }
 141:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 142:eurorack/plaits/dsp/drums/hi_hat.h ****   Oscillator oscillator_[6];
 143:eurorack/plaits/dsp/drums/hi_hat.h ****   
 144:eurorack/plaits/dsp/drums/hi_hat.h ****   DISALLOW_COPY_AND_ASSIGN(RingModNoise);
 145:eurorack/plaits/dsp/drums/hi_hat.h **** };
 146:eurorack/plaits/dsp/drums/hi_hat.h **** 
 147:eurorack/plaits/dsp/drums/hi_hat.h **** class SwingVCA {
 148:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
 149:eurorack/plaits/dsp/drums/hi_hat.h ****   float operator()(float s, float gain) {
 150:eurorack/plaits/dsp/drums/hi_hat.h ****    s *= s > 0.0f ? 10.0f : 0.1f;
 151:eurorack/plaits/dsp/drums/hi_hat.h ****    s = s / (1.0f + fabsf(s));
 152:eurorack/plaits/dsp/drums/hi_hat.h ****    return (s + 1.0f) * gain;
 153:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 154:eurorack/plaits/dsp/drums/hi_hat.h **** };
 155:eurorack/plaits/dsp/drums/hi_hat.h **** 
 156:eurorack/plaits/dsp/drums/hi_hat.h **** class LinearVCA {
 157:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
 158:eurorack/plaits/dsp/drums/hi_hat.h ****   float operator()(float s, float gain) {
 159:eurorack/plaits/dsp/drums/hi_hat.h ****    return s * gain;
 160:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 161:eurorack/plaits/dsp/drums/hi_hat.h **** };
 162:eurorack/plaits/dsp/drums/hi_hat.h **** 
 163:eurorack/plaits/dsp/drums/hi_hat.h **** template<typename MetallicNoiseSource, typename VCA, bool resonance>
 164:eurorack/plaits/dsp/drums/hi_hat.h **** class HiHat {
 165:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
 166:eurorack/plaits/dsp/drums/hi_hat.h ****   HiHat() { }
 716              		.loc 17 166 3 is_stmt 1 view .LVU203
 717              	.LBB1327:
 718              	.LBI1327:
  50:eurorack/plaits/dsp/drums/hi_hat.h ****   ~SquareNoise() { }
 719              		.loc 17 50 3 view .LVU204
  50:eurorack/plaits/dsp/drums/hi_hat.h ****   ~SquareNoise() { }
 720              		.loc 17 50 3 is_stmt 0 view .LVU205
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 38


 721              	.LBE1327:
 722              	.LBB1328:
 723              	.LBI1328:
 724              		.loc 9 179 3 is_stmt 1 view .LVU206
 725              		.loc 9 179 3 is_stmt 0 view .LVU207
 726              	.LBE1328:
 727              	.LBB1329:
 728              	.LBI1329:
 729              		.loc 9 179 3 is_stmt 1 view .LVU208
 730              		.loc 9 179 3 is_stmt 0 view .LVU209
 731              	.LBE1329:
 732              	.LBE1326:
 733              	.LBB1330:
 734              	.LBI1330:
 735              		.loc 17 166 3 is_stmt 1 view .LVU210
 736              	.LBB1331:
 737              	.LBI1331:
 102:eurorack/plaits/dsp/drums/hi_hat.h ****   ~RingModNoise() { }
 738              		.loc 17 102 3 view .LVU211
 739              	.LBE1331:
 740              	.LBE1330:
 741              	.LBE1324:
 742              	.LBE1323:
 743              	.LBE1401:
 744              	.LBE1413:
 745              	.LBE1419:
 102:eurorack/plaits/dsp/drums/hi_hat.h ****   ~RingModNoise() { }
 746              		.loc 17 102 18 view .LVU212
 747              	.LBB1420:
 748              	.LBB1414:
 749              	.LBB1402:
 750              	.LBB1336:
 751              	.LBB1335:
 752              	.LBB1334:
 753              	.LBB1332:
 754              	.LBI1332:
 755              		.loc 9 179 3 view .LVU213
 756              		.loc 9 179 3 is_stmt 0 view .LVU214
 757              	.LBE1332:
 758              	.LBB1333:
 759              	.LBI1333:
 760              		.loc 9 179 3 is_stmt 1 view .LVU215
 761              		.loc 9 179 3 is_stmt 0 view .LVU216
 762              	.LBE1333:
 763              	.LBE1334:
 764              	.LBE1335:
 765              	.LBE1336:
 766              	.LBB1337:
 767              	.LBI1337:
 768              		.file 18 "eurorack/plaits/dsp/engine/modal_engine.h"
   1:eurorack/plaits/dsp/engine/modal_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/modal_engine.h **** //
   3:eurorack/plaits/dsp/engine/modal_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/modal_engine.h **** //
   5:eurorack/plaits/dsp/engine/modal_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/modal_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/modal_engine.h **** // in the Software without restriction, including without limitation the rights
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 39


   8:eurorack/plaits/dsp/engine/modal_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/modal_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/modal_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/modal_engine.h **** // 
  12:eurorack/plaits/dsp/engine/modal_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/modal_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/modal_engine.h **** // 
  15:eurorack/plaits/dsp/engine/modal_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/modal_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/modal_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/modal_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/modal_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/modal_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/modal_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/modal_engine.h **** // 
  23:eurorack/plaits/dsp/engine/modal_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/modal_engine.h **** //
  25:eurorack/plaits/dsp/engine/modal_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/modal_engine.h **** //
  27:eurorack/plaits/dsp/engine/modal_engine.h **** // One voice of modal synthesis.
  28:eurorack/plaits/dsp/engine/modal_engine.h **** 
  29:eurorack/plaits/dsp/engine/modal_engine.h **** #ifndef PLAITS_DSP_ENGINE_MODAL_ENGINE_H_
  30:eurorack/plaits/dsp/engine/modal_engine.h **** #define PLAITS_DSP_ENGINE_MODAL_ENGINE_H_
  31:eurorack/plaits/dsp/engine/modal_engine.h **** 
  32:eurorack/plaits/dsp/engine/modal_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/modal_engine.h **** #include "plaits/dsp/physical_modelling/modal_voice.h"
  34:eurorack/plaits/dsp/engine/modal_engine.h **** 
  35:eurorack/plaits/dsp/engine/modal_engine.h **** namespace plaits {
  36:eurorack/plaits/dsp/engine/modal_engine.h **** 
  37:eurorack/plaits/dsp/engine/modal_engine.h **** class ModalEngine : public Engine {
  38:eurorack/plaits/dsp/engine/modal_engine.h ****  public:
  39:eurorack/plaits/dsp/engine/modal_engine.h ****   ModalEngine() { }
 769              		.loc 18 39 3 is_stmt 1 view .LVU217
 770              	.LBB1338:
 771              	.LBB1339:
 772              	.LBI1339:
 773              		.loc 6 80 3 view .LVU218
 774              		.loc 6 80 3 is_stmt 0 view .LVU219
 775              	.LBE1339:
 776              		.loc 18 39 17 view .LVU220
 777 0024 214A     		ldr	r2, .L36+24
 778 0026 C3F80424 		str	r2, [r3, #1028]
 779              	.LVL28:
 780              	.LBB1340:
 781              	.LBI1340:
 782              		.file 19 "eurorack/plaits/dsp/physical_modelling/modal_voice.h"
   1:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** //
   3:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** //
   5:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 40


  12:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // 
  15:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // 
  23:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** //
  25:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** //
  27:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // Simple modal synthesis voice with a mallet exciter:
  28:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // click -> LPF -> resonator.
  29:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // 
  30:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // The click is replaced by continuous white noise when the trigger input
  31:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // of the module is not patched.
  32:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** 
  33:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** #ifndef PLAITS_DSP_PHYSICAL_MODELLING_MODAL_VOICE_H_
  34:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** #define PLAITS_DSP_PHYSICAL_MODELLING_MODAL_VOICE_H_
  35:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** 
  36:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** #include "plaits/dsp/physical_modelling/resonator.h"
  37:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** 
  38:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** namespace plaits {
  39:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** 
  40:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** class ModalVoice {
  41:eurorack/plaits/dsp/physical_modelling/modal_voice.h ****  public:
  42:eurorack/plaits/dsp/physical_modelling/modal_voice.h ****   ModalVoice() { }
 783              		.loc 19 42 3 is_stmt 1 view .LVU221
 784              	.LBB1341:
 785              	.LBI1341:
 786              		.file 20 "eurorack/plaits/dsp/physical_modelling/resonator.h"
   1:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
   3:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
   5:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/physical_modelling/resonator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/physical_modelling/resonator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/physical_modelling/resonator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/physical_modelling/resonator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/physical_modelling/resonator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/physical_modelling/resonator.h **** // 
  12:eurorack/plaits/dsp/physical_modelling/resonator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/physical_modelling/resonator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/physical_modelling/resonator.h **** // 
  15:eurorack/plaits/dsp/physical_modelling/resonator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/physical_modelling/resonator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/physical_modelling/resonator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/physical_modelling/resonator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/physical_modelling/resonator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/physical_modelling/resonator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/physical_modelling/resonator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/physical_modelling/resonator.h **** // 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 41


  23:eurorack/plaits/dsp/physical_modelling/resonator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
  25:eurorack/plaits/dsp/physical_modelling/resonator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
  27:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Resonator, taken from Rings' code but with fixed position.
  28:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  29:eurorack/plaits/dsp/physical_modelling/resonator.h **** #ifndef PLAITS_DSP_PHYSICAL_MODELLING_RESONATOR_H_
  30:eurorack/plaits/dsp/physical_modelling/resonator.h **** #define PLAITS_DSP_PHYSICAL_MODELLING_RESONATOR_H_
  31:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  32:eurorack/plaits/dsp/physical_modelling/resonator.h **** #include "stmlib/dsp/filter.h"
  33:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  34:eurorack/plaits/dsp/physical_modelling/resonator.h **** namespace plaits {
  35:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  36:eurorack/plaits/dsp/physical_modelling/resonator.h **** const int kMaxNumModes = 24;
  37:eurorack/plaits/dsp/physical_modelling/resonator.h **** const int kModeBatchSize = 4;
  38:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  39:eurorack/plaits/dsp/physical_modelling/resonator.h **** // We render 4 modes simultaneously since there are enough registers to hold
  40:eurorack/plaits/dsp/physical_modelling/resonator.h **** // all state variables.
  41:eurorack/plaits/dsp/physical_modelling/resonator.h **** template<int batch_size>
  42:eurorack/plaits/dsp/physical_modelling/resonator.h **** class ResonatorSvf {
  43:eurorack/plaits/dsp/physical_modelling/resonator.h ****  public:
  44:eurorack/plaits/dsp/physical_modelling/resonator.h ****   ResonatorSvf() { }
 787              		.loc 20 44 3 view .LVU222
 788              		.loc 20 44 3 is_stmt 0 view .LVU223
 789              	.LBE1341:
 790              	.LBB1342:
 791              	.LBI1342:
  45:eurorack/plaits/dsp/physical_modelling/resonator.h ****   ~ResonatorSvf() { }
  46:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
  47:eurorack/plaits/dsp/physical_modelling/resonator.h ****   void Init() {
  48:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
  49:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1_[i] = state_2_[i] = 0.0f;
  50:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  51:eurorack/plaits/dsp/physical_modelling/resonator.h ****   }
  52:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
  53:eurorack/plaits/dsp/physical_modelling/resonator.h ****   template<stmlib::FilterMode mode, bool add>
  54:eurorack/plaits/dsp/physical_modelling/resonator.h ****   void Process(
  55:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* f,
  56:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* q,
  57:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* gain,
  58:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* in,
  59:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float* out,
  60:eurorack/plaits/dsp/physical_modelling/resonator.h ****       size_t size) {
  61:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float g[batch_size];
  62:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float r[batch_size];
  63:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float r_plus_g[batch_size];
  64:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float h[batch_size];
  65:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float state_1[batch_size];
  66:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float state_2[batch_size];
  67:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float gains[batch_size];
  68:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
  69:eurorack/plaits/dsp/physical_modelling/resonator.h ****       g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
  70:eurorack/plaits/dsp/physical_modelling/resonator.h ****       r[i] = 1.0f / q[i];
  71:eurorack/plaits/dsp/physical_modelling/resonator.h ****       h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
  72:eurorack/plaits/dsp/physical_modelling/resonator.h ****       r_plus_g[i] = r[i] + g[i];
  73:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1[i] = state_1_[i];
  74:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_2[i] = state_2_[i];
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 42


  75:eurorack/plaits/dsp/physical_modelling/resonator.h ****       gains[i] = gain[i];
  76:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  77:eurorack/plaits/dsp/physical_modelling/resonator.h ****     
  78:eurorack/plaits/dsp/physical_modelling/resonator.h ****     while (size--) {
  79:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float s_in = *in++;
  80:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float s_out = 0.0f;
  81:eurorack/plaits/dsp/physical_modelling/resonator.h ****       for (int i = 0; i < batch_size; ++i) {
  82:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
  83:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float bp = g[i] * hp + state_1[i];
  84:eurorack/plaits/dsp/physical_modelling/resonator.h ****         state_1[i] = g[i] * hp + bp;
  85:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float lp = g[i] * bp + state_2[i];
  86:eurorack/plaits/dsp/physical_modelling/resonator.h ****         state_2[i] = g[i] * bp + lp;
  87:eurorack/plaits/dsp/physical_modelling/resonator.h ****         s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
  88:eurorack/plaits/dsp/physical_modelling/resonator.h ****       }
  89:eurorack/plaits/dsp/physical_modelling/resonator.h ****       if (add) {
  90:eurorack/plaits/dsp/physical_modelling/resonator.h ****         *out++ += s_out;
  91:eurorack/plaits/dsp/physical_modelling/resonator.h ****       } else {
  92:eurorack/plaits/dsp/physical_modelling/resonator.h ****         *out++ = s_out;
  93:eurorack/plaits/dsp/physical_modelling/resonator.h ****       }
  94:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  95:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
  96:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1_[i] = state_1[i];
  97:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_2_[i] = state_2[i];
  98:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  99:eurorack/plaits/dsp/physical_modelling/resonator.h ****   }
 100:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
 101:eurorack/plaits/dsp/physical_modelling/resonator.h ****  private:
 102:eurorack/plaits/dsp/physical_modelling/resonator.h ****   float state_1_[batch_size];
 103:eurorack/plaits/dsp/physical_modelling/resonator.h ****   float state_2_[batch_size];
 104:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
 105:eurorack/plaits/dsp/physical_modelling/resonator.h ****   DISALLOW_COPY_AND_ASSIGN(ResonatorSvf);
 106:eurorack/plaits/dsp/physical_modelling/resonator.h **** };
 107:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
 108:eurorack/plaits/dsp/physical_modelling/resonator.h **** class Resonator {
 109:eurorack/plaits/dsp/physical_modelling/resonator.h ****  public:
 110:eurorack/plaits/dsp/physical_modelling/resonator.h ****   Resonator() { }
 792              		.loc 20 110 3 is_stmt 1 view .LVU224
 793              	.LBE1342:
 794              	.LBE1340:
 795              	.LBE1338:
 796              	.LBE1337:
 797              	.LBE1402:
 798              	.LBE1414:
 799              	.LBE1420:
 800              		.loc 20 110 15 view .LVU225
 801              	.LBB1421:
 802              	.LBB1415:
 803              	.LBB1403:
 804              	.LBB1343:
 805              	.LBI1343:
 806              		.file 21 "eurorack/plaits/dsp/engine/noise_engine.h"
   1:eurorack/plaits/dsp/engine/noise_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/noise_engine.h **** //
   3:eurorack/plaits/dsp/engine/noise_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/noise_engine.h **** //
   5:eurorack/plaits/dsp/engine/noise_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/noise_engine.h **** // of this software and associated documentation files (the "Software"), to deal
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 43


   7:eurorack/plaits/dsp/engine/noise_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/noise_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/noise_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/noise_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/noise_engine.h **** // 
  12:eurorack/plaits/dsp/engine/noise_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/noise_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/noise_engine.h **** // 
  15:eurorack/plaits/dsp/engine/noise_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/noise_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/noise_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/noise_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/noise_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/noise_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/noise_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/noise_engine.h **** // 
  23:eurorack/plaits/dsp/engine/noise_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/noise_engine.h **** //
  25:eurorack/plaits/dsp/engine/noise_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/noise_engine.h **** //
  27:eurorack/plaits/dsp/engine/noise_engine.h **** // Clocked noise processed by a multimode filter.
  28:eurorack/plaits/dsp/engine/noise_engine.h **** 
  29:eurorack/plaits/dsp/engine/noise_engine.h **** #ifndef PLAITS_DSP_ENGINE_NOISE_ENGINE_H_
  30:eurorack/plaits/dsp/engine/noise_engine.h **** #define PLAITS_DSP_ENGINE_NOISE_ENGINE_H_
  31:eurorack/plaits/dsp/engine/noise_engine.h **** 
  32:eurorack/plaits/dsp/engine/noise_engine.h **** #include "stmlib/dsp/filter.h"
  33:eurorack/plaits/dsp/engine/noise_engine.h **** 
  34:eurorack/plaits/dsp/engine/noise_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/noise_engine.h **** #include "plaits/dsp/noise/clocked_noise.h"
  36:eurorack/plaits/dsp/engine/noise_engine.h **** 
  37:eurorack/plaits/dsp/engine/noise_engine.h **** namespace plaits {
  38:eurorack/plaits/dsp/engine/noise_engine.h **** 
  39:eurorack/plaits/dsp/engine/noise_engine.h **** class NoiseEngine : public Engine {
  40:eurorack/plaits/dsp/engine/noise_engine.h ****  public:
  41:eurorack/plaits/dsp/engine/noise_engine.h ****   NoiseEngine() { }
 807              		.loc 21 41 3 view .LVU226
 808              	.LBB1344:
 809              	.LBB1345:
 810              	.LBI1345:
 811              		.loc 6 80 3 view .LVU227
 812              		.loc 6 80 3 is_stmt 0 view .LVU228
 813              	.LBE1345:
 814              		.loc 21 41 17 view .LVU229
 815 002a 214A     		ldr	r2, .L36+28
 816 002c C3F84825 		str	r2, [r3, #1352]
 817              		.loc 21 41 17 is_stmt 1 view .LVU230
 818              	.LVL29:
 819              	.LBB1346:
 820              	.LBI1346:
 821              		.loc 9 179 3 view .LVU231
 822              		.loc 9 179 3 is_stmt 0 view .LVU232
 823              	.LBE1346:
 824              		.loc 21 41 17 is_stmt 1 view .LVU233
 825              		.loc 21 41 17 is_stmt 0 view .LVU234
 826              	.LBE1344:
 827              	.LBE1343:
 828              	.LBB1347:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 44


 829              	.LBI1347:
 830              		.file 22 "eurorack/plaits/dsp/engine/particle_engine.h"
   1:eurorack/plaits/dsp/engine/particle_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/particle_engine.h **** //
   3:eurorack/plaits/dsp/engine/particle_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/particle_engine.h **** //
   5:eurorack/plaits/dsp/engine/particle_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/particle_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/particle_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/particle_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/particle_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/particle_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/particle_engine.h **** // 
  12:eurorack/plaits/dsp/engine/particle_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/particle_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/particle_engine.h **** // 
  15:eurorack/plaits/dsp/engine/particle_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/particle_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/particle_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/particle_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/particle_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/particle_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/particle_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/particle_engine.h **** // 
  23:eurorack/plaits/dsp/engine/particle_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/particle_engine.h **** //
  25:eurorack/plaits/dsp/engine/particle_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/particle_engine.h **** //
  27:eurorack/plaits/dsp/engine/particle_engine.h **** // Filtered random pulses.
  28:eurorack/plaits/dsp/engine/particle_engine.h **** 
  29:eurorack/plaits/dsp/engine/particle_engine.h **** #ifndef PLAITS_DSP_ENGINE_PARTICLE_ENGINE_H_
  30:eurorack/plaits/dsp/engine/particle_engine.h **** #define PLAITS_DSP_ENGINE_PARTICLE_ENGINE_H_
  31:eurorack/plaits/dsp/engine/particle_engine.h **** 
  32:eurorack/plaits/dsp/engine/particle_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/particle_engine.h **** #include "plaits/dsp/fx/diffuser.h"
  34:eurorack/plaits/dsp/engine/particle_engine.h **** #include "plaits/dsp/noise/particle.h"
  35:eurorack/plaits/dsp/engine/particle_engine.h **** 
  36:eurorack/plaits/dsp/engine/particle_engine.h **** namespace plaits {
  37:eurorack/plaits/dsp/engine/particle_engine.h **** 
  38:eurorack/plaits/dsp/engine/particle_engine.h **** const int kNumParticles = 6;
  39:eurorack/plaits/dsp/engine/particle_engine.h **** 
  40:eurorack/plaits/dsp/engine/particle_engine.h **** class ParticleEngine : public Engine {
  41:eurorack/plaits/dsp/engine/particle_engine.h ****  public:
  42:eurorack/plaits/dsp/engine/particle_engine.h ****   ParticleEngine() { }
 831              		.loc 22 42 3 is_stmt 1 view .LVU235
 832              	.LBB1348:
 833              	.LBB1349:
 834              	.LBI1349:
 835              		.loc 6 80 3 view .LVU236
 836              		.loc 6 80 3 is_stmt 0 view .LVU237
 837              	.LBE1349:
 838              		.loc 22 42 20 view .LVU238
 839 0030 204A     		ldr	r2, .L36+32
 840 0032 C3F8C825 		str	r2, [r3, #1480]
 841              		.loc 22 42 20 is_stmt 1 view .LVU239
 842              	.LVL30:
 843              	.LBB1350:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 45


 844              	.LBI1350:
 845              		.file 23 "eurorack/plaits/dsp/fx/diffuser.h"
   1:eurorack/plaits/dsp/fx/diffuser.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/fx/diffuser.h **** //
   3:eurorack/plaits/dsp/fx/diffuser.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/fx/diffuser.h **** //
   5:eurorack/plaits/dsp/fx/diffuser.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/fx/diffuser.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/fx/diffuser.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/fx/diffuser.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/fx/diffuser.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/fx/diffuser.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/fx/diffuser.h **** // 
  12:eurorack/plaits/dsp/fx/diffuser.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/fx/diffuser.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/fx/diffuser.h **** // 
  15:eurorack/plaits/dsp/fx/diffuser.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/fx/diffuser.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/fx/diffuser.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/fx/diffuser.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/fx/diffuser.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/fx/diffuser.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/fx/diffuser.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/fx/diffuser.h **** // 
  23:eurorack/plaits/dsp/fx/diffuser.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/fx/diffuser.h **** //
  25:eurorack/plaits/dsp/fx/diffuser.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/fx/diffuser.h **** //
  27:eurorack/plaits/dsp/fx/diffuser.h **** // Granular diffuser.
  28:eurorack/plaits/dsp/fx/diffuser.h **** 
  29:eurorack/plaits/dsp/fx/diffuser.h **** #ifndef PLAITS_DSP_FX_DIFFUSER_H_
  30:eurorack/plaits/dsp/fx/diffuser.h **** #define PLAITS_DSP_FX_DIFFUSER_H_
  31:eurorack/plaits/dsp/fx/diffuser.h **** 
  32:eurorack/plaits/dsp/fx/diffuser.h **** #include "stmlib/stmlib.h"
  33:eurorack/plaits/dsp/fx/diffuser.h **** 
  34:eurorack/plaits/dsp/fx/diffuser.h **** #include "plaits/dsp/fx/fx_engine.h"
  35:eurorack/plaits/dsp/fx/diffuser.h **** 
  36:eurorack/plaits/dsp/fx/diffuser.h **** namespace plaits {
  37:eurorack/plaits/dsp/fx/diffuser.h **** 
  38:eurorack/plaits/dsp/fx/diffuser.h **** class Diffuser {
  39:eurorack/plaits/dsp/fx/diffuser.h ****  public:
  40:eurorack/plaits/dsp/fx/diffuser.h ****   Diffuser() { }
 846              		.loc 23 40 3 view .LVU240
 847              	.LBB1351:
 848              	.LBI1351:
 849              		.file 24 "eurorack/plaits/dsp/fx/fx_engine.h"
   1:eurorack/plaits/dsp/fx/fx_engine.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/plaits/dsp/fx/fx_engine.h **** //
   3:eurorack/plaits/dsp/fx/fx_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/fx/fx_engine.h **** //
   5:eurorack/plaits/dsp/fx/fx_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/fx/fx_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/fx/fx_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/fx/fx_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/fx/fx_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/fx/fx_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/fx/fx_engine.h **** // 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 46


  12:eurorack/plaits/dsp/fx/fx_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/fx/fx_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/fx/fx_engine.h **** // 
  15:eurorack/plaits/dsp/fx/fx_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/fx/fx_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/fx/fx_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/fx/fx_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/fx/fx_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/fx/fx_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/fx/fx_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/fx/fx_engine.h **** // 
  23:eurorack/plaits/dsp/fx/fx_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/fx/fx_engine.h **** //
  25:eurorack/plaits/dsp/fx/fx_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/fx/fx_engine.h **** //
  27:eurorack/plaits/dsp/fx/fx_engine.h **** // Base class for building reverbs.
  28:eurorack/plaits/dsp/fx/fx_engine.h **** 
  29:eurorack/plaits/dsp/fx/fx_engine.h **** #ifndef PLAITS_DSP_FX_FX_ENGINE_H_
  30:eurorack/plaits/dsp/fx/fx_engine.h **** #define PLAITS_DSP_FX_FX_ENGINE_H_
  31:eurorack/plaits/dsp/fx/fx_engine.h **** 
  32:eurorack/plaits/dsp/fx/fx_engine.h **** #include <algorithm>
  33:eurorack/plaits/dsp/fx/fx_engine.h **** 
  34:eurorack/plaits/dsp/fx/fx_engine.h **** #include "stmlib/stmlib.h"
  35:eurorack/plaits/dsp/fx/fx_engine.h **** 
  36:eurorack/plaits/dsp/fx/fx_engine.h **** #include "stmlib/dsp/dsp.h"
  37:eurorack/plaits/dsp/fx/fx_engine.h **** #include "stmlib/dsp/cosine_oscillator.h"
  38:eurorack/plaits/dsp/fx/fx_engine.h **** 
  39:eurorack/plaits/dsp/fx/fx_engine.h **** namespace plaits {
  40:eurorack/plaits/dsp/fx/fx_engine.h **** 
  41:eurorack/plaits/dsp/fx/fx_engine.h **** #define TAIL , -1
  42:eurorack/plaits/dsp/fx/fx_engine.h **** 
  43:eurorack/plaits/dsp/fx/fx_engine.h **** enum Format {
  44:eurorack/plaits/dsp/fx/fx_engine.h ****   FORMAT_12_BIT,
  45:eurorack/plaits/dsp/fx/fx_engine.h ****   FORMAT_16_BIT,
  46:eurorack/plaits/dsp/fx/fx_engine.h ****   FORMAT_32_BIT
  47:eurorack/plaits/dsp/fx/fx_engine.h **** };
  48:eurorack/plaits/dsp/fx/fx_engine.h **** 
  49:eurorack/plaits/dsp/fx/fx_engine.h **** enum LFOIndex {
  50:eurorack/plaits/dsp/fx/fx_engine.h ****   LFO_1,
  51:eurorack/plaits/dsp/fx/fx_engine.h ****   LFO_2
  52:eurorack/plaits/dsp/fx/fx_engine.h **** };
  53:eurorack/plaits/dsp/fx/fx_engine.h **** 
  54:eurorack/plaits/dsp/fx/fx_engine.h **** template<Format format>
  55:eurorack/plaits/dsp/fx/fx_engine.h **** struct DataType { };
  56:eurorack/plaits/dsp/fx/fx_engine.h **** 
  57:eurorack/plaits/dsp/fx/fx_engine.h **** template<>
  58:eurorack/plaits/dsp/fx/fx_engine.h **** struct DataType<FORMAT_12_BIT> {
  59:eurorack/plaits/dsp/fx/fx_engine.h ****   typedef uint16_t T;
  60:eurorack/plaits/dsp/fx/fx_engine.h ****   
  61:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline float Decompress(T value) {
  62:eurorack/plaits/dsp/fx/fx_engine.h ****     return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
  63:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  64:eurorack/plaits/dsp/fx/fx_engine.h ****   
  65:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline T Compress(float value) {
  66:eurorack/plaits/dsp/fx/fx_engine.h ****     return static_cast<uint16_t>(
  67:eurorack/plaits/dsp/fx/fx_engine.h ****         stmlib::Clip16(static_cast<int32_t>(value * 4096.0f)));
  68:eurorack/plaits/dsp/fx/fx_engine.h ****   }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 47


  69:eurorack/plaits/dsp/fx/fx_engine.h **** };
  70:eurorack/plaits/dsp/fx/fx_engine.h **** 
  71:eurorack/plaits/dsp/fx/fx_engine.h **** template<>
  72:eurorack/plaits/dsp/fx/fx_engine.h **** struct DataType<FORMAT_16_BIT> {
  73:eurorack/plaits/dsp/fx/fx_engine.h ****   typedef uint16_t T;
  74:eurorack/plaits/dsp/fx/fx_engine.h ****   
  75:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline float Decompress(T value) {
  76:eurorack/plaits/dsp/fx/fx_engine.h ****     return static_cast<float>(static_cast<int16_t>(value)) / 32768.0f;
  77:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  78:eurorack/plaits/dsp/fx/fx_engine.h ****   
  79:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline T Compress(float value) {
  80:eurorack/plaits/dsp/fx/fx_engine.h ****     return static_cast<uint16_t>(
  81:eurorack/plaits/dsp/fx/fx_engine.h ****         stmlib::Clip16(static_cast<int32_t>(value * 32768.0f)));
  82:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  83:eurorack/plaits/dsp/fx/fx_engine.h **** };
  84:eurorack/plaits/dsp/fx/fx_engine.h **** 
  85:eurorack/plaits/dsp/fx/fx_engine.h **** template<>
  86:eurorack/plaits/dsp/fx/fx_engine.h **** struct DataType<FORMAT_32_BIT> {
  87:eurorack/plaits/dsp/fx/fx_engine.h ****   typedef float T;
  88:eurorack/plaits/dsp/fx/fx_engine.h ****   
  89:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline float Decompress(T value) {
  90:eurorack/plaits/dsp/fx/fx_engine.h ****     return value;;
  91:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  92:eurorack/plaits/dsp/fx/fx_engine.h ****   
  93:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline T Compress(float value) {
  94:eurorack/plaits/dsp/fx/fx_engine.h ****     return value;
  95:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  96:eurorack/plaits/dsp/fx/fx_engine.h **** };
  97:eurorack/plaits/dsp/fx/fx_engine.h **** 
  98:eurorack/plaits/dsp/fx/fx_engine.h **** template<
  99:eurorack/plaits/dsp/fx/fx_engine.h ****     size_t size,
 100:eurorack/plaits/dsp/fx/fx_engine.h ****     Format format = FORMAT_12_BIT>
 101:eurorack/plaits/dsp/fx/fx_engine.h **** class FxEngine {
 102:eurorack/plaits/dsp/fx/fx_engine.h ****  public:
 103:eurorack/plaits/dsp/fx/fx_engine.h ****   typedef typename DataType<format>::T T;
 104:eurorack/plaits/dsp/fx/fx_engine.h ****   FxEngine() { }
 850              		.loc 24 104 3 view .LVU241
 851              	.LBE1351:
 852              	.LBE1350:
 853              	.LBE1348:
 854              	.LBE1347:
 855              	.LBE1403:
 856              	.LBE1415:
 857              	.LBE1421:
 858              		.loc 24 104 14 view .LVU242
 859              	.LBB1422:
 860              	.LBB1416:
 861              	.LBB1404:
 862              	.LBB1354:
 863              	.LBB1353:
 864              	.LBB1352:
 865              	.LBI1352:
 866              		.loc 9 179 3 view .LVU243
 867              		.loc 9 179 3 is_stmt 0 view .LVU244
 868              	.LBE1352:
 869              	.LBE1353:
 870              	.LBE1354:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 48


 871              	.LBB1355:
 872              	.LBI1355:
 873              		.file 25 "eurorack/plaits/dsp/engine/snare_drum_engine.h"
   1:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/snare_drum_engine.h **** //
   3:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/snare_drum_engine.h **** //
   5:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // 
  12:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // 
  15:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // 
  23:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/snare_drum_engine.h **** //
  25:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/snare_drum_engine.h **** //
  27:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // 808 and synthetic snare drum generators.
  28:eurorack/plaits/dsp/engine/snare_drum_engine.h **** 
  29:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #ifndef PLAITS_DSP_ENGINE_SNARE_DRUM_ENGINE_H_
  30:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #define PLAITS_DSP_ENGINE_SNARE_DRUM_ENGINE_H_
  31:eurorack/plaits/dsp/engine/snare_drum_engine.h **** 
  32:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #include "plaits/dsp/drums/analog_snare_drum.h"
  33:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #include "plaits/dsp/drums/synthetic_snare_drum.h"
  34:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/snare_drum_engine.h **** 
  36:eurorack/plaits/dsp/engine/snare_drum_engine.h **** namespace plaits {
  37:eurorack/plaits/dsp/engine/snare_drum_engine.h ****   
  38:eurorack/plaits/dsp/engine/snare_drum_engine.h **** class SnareDrumEngine : public Engine {
  39:eurorack/plaits/dsp/engine/snare_drum_engine.h ****  public:
  40:eurorack/plaits/dsp/engine/snare_drum_engine.h ****   SnareDrumEngine() { }
 874              		.loc 25 40 3 is_stmt 1 view .LVU245
 875              	.LBB1356:
 876              	.LBB1357:
 877              	.LBI1357:
 878              		.loc 6 80 3 view .LVU246
 879              		.loc 6 80 3 is_stmt 0 view .LVU247
 880              	.LBE1357:
 881              		.loc 25 40 21 view .LVU248
 882 0036 204A     		ldr	r2, .L36+36
 883 0038 C3F8A826 		str	r2, [r3, #1704]
 884              	.LVL31:
 885              	.LBB1358:
 886              	.LBI1358:
 887              		.file 26 "eurorack/plaits/dsp/drums/analog_snare_drum.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 49


   1:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/analog_snare_drum.h **** //
   3:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/analog_snare_drum.h **** //
   5:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // 
  12:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // 
  15:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // 
  23:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/analog_snare_drum.h **** //
  25:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/analog_snare_drum.h **** //
  27:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // 808 snare drum model, revisited.
  28:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  29:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #ifndef PLAITS_DSP_DRUMS_ANALOG_SNARE_DRUM_H_
  30:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #define PLAITS_DSP_DRUMS_ANALOG_SNARE_DRUM_H_
  31:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  32:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include <algorithm>
  33:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  34:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/dsp/filter.h"
  36:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/dsp/parameter_interpolator.h"
  37:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/dsp/units.h"
  38:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/utils/random.h"
  39:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  40:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "plaits/dsp/dsp.h"
  41:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "plaits/dsp/oscillator/sine_oscillator.h"
  42:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  43:eurorack/plaits/dsp/drums/analog_snare_drum.h **** namespace plaits {
  44:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  45:eurorack/plaits/dsp/drums/analog_snare_drum.h **** class AnalogSnareDrum {
  46:eurorack/plaits/dsp/drums/analog_snare_drum.h ****  public:
  47:eurorack/plaits/dsp/drums/analog_snare_drum.h ****   AnalogSnareDrum() { }
 888              		.loc 26 47 3 is_stmt 1 view .LVU249
 889              	.LBE1358:
 890              	.LBE1356:
 891              	.LBE1355:
 892              	.LBE1404:
 893              	.LBE1416:
 894              	.LBE1422:
 895              		.loc 26 47 21 view .LVU250
 896              	.LBB1423:
 897              	.LBB1417:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 50


 898              	.LBB1405:
 899              	.LBB1367:
 900              	.LBB1365:
 901              	.LBB1360:
 902              	.LBB1359:
 903              	.LBI1359:
 904              		.loc 9 179 3 view .LVU251
 905              		.loc 9 179 3 is_stmt 0 view .LVU252
 906              	.LBE1359:
 907              	.LBE1360:
 908              	.LBE1365:
 909              	.LBE1367:
 910              	.LBE1405:
 911              	.LBE1417:
 912              	.LBE1423:
 913              		.loc 26 47 21 is_stmt 1 view .LVU253
 914              	.LBB1424:
 915              	.LBB1418:
 916              	.LBB1406:
 917              	.LBB1368:
 918              	.LBB1366:
 919              	.LBB1361:
 920              	.LBI1361:
 921              		.file 27 "eurorack/plaits/dsp/drums/synthetic_snare_drum.h"
   1:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** //
   3:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** //
   5:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // 
  12:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // 
  15:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // 
  23:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** //
  25:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** //
  27:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Naive snare drum model (two modulated oscillators + filtered noise).
  28:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Uses a few magic numbers taken from the 909 schematics:
  29:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // - Ratio between the two modes of the drum set to 1.47.
  30:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // - Funky coupling between the two modes.
  31:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // - Noise coloration filters and envelope shapes for the snare.
  32:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  33:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #ifndef PLAITS_DSP_DRUMS_SYNTHETIC_SNARE_DRUM_H_
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 51


  34:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #define PLAITS_DSP_DRUMS_SYNTHETIC_SNARE_DRUM_H_
  35:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  36:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include <algorithm>
  37:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  38:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include "stmlib/dsp/dsp.h"
  39:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include "stmlib/dsp/parameter_interpolator.h"
  40:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include "stmlib/dsp/units.h"
  41:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  42:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include "plaits/dsp/dsp.h"
  43:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  44:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** namespace plaits {
  45:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  46:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** class SyntheticSnareDrum {
  47:eurorack/plaits/dsp/drums/synthetic_snare_drum.h ****  public:
  48:eurorack/plaits/dsp/drums/synthetic_snare_drum.h ****   SyntheticSnareDrum() { }
 922              		.loc 27 48 3 view .LVU254
 923              	.LBB1362:
 924              	.LBI1362:
  94:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
 925              		.loc 9 94 3 view .LVU255
  94:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
 926              		.loc 9 94 3 is_stmt 0 view .LVU256
 927              	.LBE1362:
 928              	.LBB1363:
 929              	.LBI1363:
  94:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
 930              		.loc 9 94 3 is_stmt 1 view .LVU257
  94:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
 931              		.loc 9 94 3 is_stmt 0 view .LVU258
 932              	.LBE1363:
 933              	.LBB1364:
 934              	.LBI1364:
 935              		.loc 9 179 3 is_stmt 1 view .LVU259
 936              		.loc 9 179 3 is_stmt 0 view .LVU260
 937              	.LBE1364:
 938              	.LBE1361:
 939              	.LBE1366:
 940              	.LBE1368:
 941              	.LBB1369:
 942              	.LBI1369:
 943              		.file 28 "eurorack/plaits/dsp/engine/string_engine.h"
   1:eurorack/plaits/dsp/engine/string_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/string_engine.h **** //
   3:eurorack/plaits/dsp/engine/string_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/string_engine.h **** //
   5:eurorack/plaits/dsp/engine/string_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/string_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/string_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/string_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/string_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/string_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/string_engine.h **** // 
  12:eurorack/plaits/dsp/engine/string_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/string_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/string_engine.h **** // 
  15:eurorack/plaits/dsp/engine/string_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/string_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 52


  17:eurorack/plaits/dsp/engine/string_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/string_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/string_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/string_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/string_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/string_engine.h **** // 
  23:eurorack/plaits/dsp/engine/string_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/string_engine.h **** //
  25:eurorack/plaits/dsp/engine/string_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/string_engine.h **** //
  27:eurorack/plaits/dsp/engine/string_engine.h **** // Three voices of string synthesis.
  28:eurorack/plaits/dsp/engine/string_engine.h **** 
  29:eurorack/plaits/dsp/engine/string_engine.h **** #ifndef PLAITS_DSP_ENGINE_STRING_ENGINE_H_
  30:eurorack/plaits/dsp/engine/string_engine.h **** #define PLAITS_DSP_ENGINE_STRING_ENGINE_H_
  31:eurorack/plaits/dsp/engine/string_engine.h **** 
  32:eurorack/plaits/dsp/engine/string_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/string_engine.h **** #include "plaits/dsp/physical_modelling/string_voice.h"
  34:eurorack/plaits/dsp/engine/string_engine.h **** 
  35:eurorack/plaits/dsp/engine/string_engine.h **** namespace plaits {
  36:eurorack/plaits/dsp/engine/string_engine.h **** 
  37:eurorack/plaits/dsp/engine/string_engine.h **** const int kNumStrings = 3;
  38:eurorack/plaits/dsp/engine/string_engine.h **** 
  39:eurorack/plaits/dsp/engine/string_engine.h **** class StringEngine : public Engine {
  40:eurorack/plaits/dsp/engine/string_engine.h ****  public:
  41:eurorack/plaits/dsp/engine/string_engine.h ****   StringEngine() { }
 944              		.loc 28 41 3 is_stmt 1 view .LVU261
 945              	.LBB1370:
 946              	.LBB1371:
 947              	.LBI1371:
 948              		.loc 6 80 3 view .LVU262
 949              		.loc 6 80 3 is_stmt 0 view .LVU263
 950              	.LBE1371:
 951              		.loc 28 41 18 view .LVU264
 952 003c 1F4A     		ldr	r2, .L36+40
 953 003e C3F8CC27 		str	r2, [r3, #1996]
 954              		.loc 28 41 18 is_stmt 1 view .LVU265
 955              	.LVL32:
 956              	.LBB1372:
 957              	.LBI1372:
 958              		.file 29 "eurorack/plaits/dsp/physical_modelling/delay_line.h"
   1:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/plaits/dsp/physical_modelling/delay_line.h **** //
   3:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/physical_modelling/delay_line.h **** //
   5:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // 
  12:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // 
  15:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 53


  18:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // 
  23:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/physical_modelling/delay_line.h **** //
  25:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/physical_modelling/delay_line.h **** //
  27:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // Delay line (same implementation as from stmlib, but does not own its buffer).
  28:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  29:eurorack/plaits/dsp/physical_modelling/delay_line.h **** #ifndef PLAITS_DSP_PHYSICAL_MODELLING_DELAY_LINE_H_
  30:eurorack/plaits/dsp/physical_modelling/delay_line.h **** #define PLAITS_DSP_PHYSICAL_MODELLING_DELAY_LINE_H_
  31:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  32:eurorack/plaits/dsp/physical_modelling/delay_line.h **** #include <algorithm>
  33:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  34:eurorack/plaits/dsp/physical_modelling/delay_line.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  36:eurorack/plaits/dsp/physical_modelling/delay_line.h **** namespace plaits {
  37:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  38:eurorack/plaits/dsp/physical_modelling/delay_line.h **** template<typename T, size_t max_delay>
  39:eurorack/plaits/dsp/physical_modelling/delay_line.h **** class DelayLine {
  40:eurorack/plaits/dsp/physical_modelling/delay_line.h ****  public:
  41:eurorack/plaits/dsp/physical_modelling/delay_line.h ****   DelayLine() { }
 959              		.loc 29 41 3 view .LVU266
 960              		.loc 29 41 3 is_stmt 0 view .LVU267
 961              	.LBE1372:
 962              	.LBE1370:
 963              	.LBE1369:
 964              	.LBB1373:
 965              	.LBI1373:
 966              		.file 30 "eurorack/plaits/dsp/engine/swarm_engine.h"
   1:eurorack/plaits/dsp/engine/swarm_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/swarm_engine.h **** //
   3:eurorack/plaits/dsp/engine/swarm_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/swarm_engine.h **** //
   5:eurorack/plaits/dsp/engine/swarm_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/swarm_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/swarm_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/swarm_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/swarm_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/swarm_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/swarm_engine.h **** // 
  12:eurorack/plaits/dsp/engine/swarm_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/swarm_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/swarm_engine.h **** // 
  15:eurorack/plaits/dsp/engine/swarm_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/swarm_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/swarm_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/swarm_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/swarm_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/swarm_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/swarm_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/swarm_engine.h **** // 
  23:eurorack/plaits/dsp/engine/swarm_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/swarm_engine.h **** //
  25:eurorack/plaits/dsp/engine/swarm_engine.h **** // -----------------------------------------------------------------------------
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 54


  26:eurorack/plaits/dsp/engine/swarm_engine.h **** //
  27:eurorack/plaits/dsp/engine/swarm_engine.h **** // Swarm of sawtooths and sines.
  28:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  29:eurorack/plaits/dsp/engine/swarm_engine.h **** #ifndef PLAITS_DSP_ENGINE_SWARM_ENGINE_H_
  30:eurorack/plaits/dsp/engine/swarm_engine.h **** #define PLAITS_DSP_ENGINE_SWARM_ENGINE_H_
  31:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  32:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "stmlib/dsp/polyblep.h"
  33:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "stmlib/dsp/units.h"
  34:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "stmlib/utils/random.h"
  35:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  36:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/dsp/engine/engine.h"
  37:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/dsp/oscillator/oscillator.h"
  38:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/dsp/oscillator/string_synth_oscillator.h"
  39:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/dsp/oscillator/sine_oscillator.h"
  40:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/resources.h"
  41:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  42:eurorack/plaits/dsp/engine/swarm_engine.h **** namespace plaits {
  43:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  44:eurorack/plaits/dsp/engine/swarm_engine.h **** const int kNumSwarmVoices = 8;
  45:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  46:eurorack/plaits/dsp/engine/swarm_engine.h **** class GrainEnvelope {
  47:eurorack/plaits/dsp/engine/swarm_engine.h ****  public:
  48:eurorack/plaits/dsp/engine/swarm_engine.h ****   GrainEnvelope() { }
  49:eurorack/plaits/dsp/engine/swarm_engine.h ****   ~GrainEnvelope() { }
  50:eurorack/plaits/dsp/engine/swarm_engine.h ****   
  51:eurorack/plaits/dsp/engine/swarm_engine.h ****   void Init() {
  52:eurorack/plaits/dsp/engine/swarm_engine.h ****     from_ = 0.0f;
  53:eurorack/plaits/dsp/engine/swarm_engine.h ****     interval_ = 1.0f;
  54:eurorack/plaits/dsp/engine/swarm_engine.h ****     phase_ = 1.0f;
  55:eurorack/plaits/dsp/engine/swarm_engine.h ****     fm_ = 0.0f;
  56:eurorack/plaits/dsp/engine/swarm_engine.h ****     amplitude_ = 0.5f;
  57:eurorack/plaits/dsp/engine/swarm_engine.h ****     previous_size_ratio_ = 0.0f;
  58:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
  59:eurorack/plaits/dsp/engine/swarm_engine.h ****   
  60:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline void Step(float rate, bool burst_mode, bool start_burst) {
  61:eurorack/plaits/dsp/engine/swarm_engine.h ****     bool randomize = false;
  62:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (start_burst) {
  63:eurorack/plaits/dsp/engine/swarm_engine.h ****       phase_ = 0.5f;
  64:eurorack/plaits/dsp/engine/swarm_engine.h ****       fm_ = 16.0f;
  65:eurorack/plaits/dsp/engine/swarm_engine.h ****       randomize = true;
  66:eurorack/plaits/dsp/engine/swarm_engine.h ****     } else {
  67:eurorack/plaits/dsp/engine/swarm_engine.h ****       phase_ += rate * fm_;
  68:eurorack/plaits/dsp/engine/swarm_engine.h ****       if (phase_ >= 1.0f) {
  69:eurorack/plaits/dsp/engine/swarm_engine.h ****         phase_ -= static_cast<float>(static_cast<int>(phase_));
  70:eurorack/plaits/dsp/engine/swarm_engine.h ****         randomize = true;
  71:eurorack/plaits/dsp/engine/swarm_engine.h ****       }
  72:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
  73:eurorack/plaits/dsp/engine/swarm_engine.h ****     
  74:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (randomize) {
  75:eurorack/plaits/dsp/engine/swarm_engine.h ****       from_ += interval_;
  76:eurorack/plaits/dsp/engine/swarm_engine.h ****       interval_ = stmlib::Random::GetFloat() - from_;
  77:eurorack/plaits/dsp/engine/swarm_engine.h ****       // Randomize the duration of the grain.
  78:eurorack/plaits/dsp/engine/swarm_engine.h ****       if (burst_mode) {
  79:eurorack/plaits/dsp/engine/swarm_engine.h ****         fm_ *= 0.8f + 0.2f * stmlib::Random::GetFloat();
  80:eurorack/plaits/dsp/engine/swarm_engine.h ****       } else {
  81:eurorack/plaits/dsp/engine/swarm_engine.h ****         fm_ = 0.5f + 1.5f * stmlib::Random::GetFloat();
  82:eurorack/plaits/dsp/engine/swarm_engine.h ****       }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 55


  83:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
  84:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
  85:eurorack/plaits/dsp/engine/swarm_engine.h ****   
  86:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline float frequency(float size_ratio) const {
  87:eurorack/plaits/dsp/engine/swarm_engine.h ****     // We approximate two overlapping grains of frequencies f1 and f2
  88:eurorack/plaits/dsp/engine/swarm_engine.h ****     // By a continuous tone ramping from f1 to f2. This allows a continuous
  89:eurorack/plaits/dsp/engine/swarm_engine.h ****     // transition between the "grain cloud" and "swarm of glissandi" textures.
  90:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (size_ratio < 1.0f) {
  91:eurorack/plaits/dsp/engine/swarm_engine.h ****       return 2.0f * (from_ + interval_ * phase_) - 1.0f;
  92:eurorack/plaits/dsp/engine/swarm_engine.h ****     } else {
  93:eurorack/plaits/dsp/engine/swarm_engine.h ****       return from_;
  94:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
  95:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
  96:eurorack/plaits/dsp/engine/swarm_engine.h ****   
  97:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline float amplitude(float size_ratio) {
  98:eurorack/plaits/dsp/engine/swarm_engine.h ****     float target_amplitude = 1.0f;
  99:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (size_ratio >= 1.0f) {
 100:eurorack/plaits/dsp/engine/swarm_engine.h ****       float phase = (phase_ - 0.5f) * size_ratio;
 101:eurorack/plaits/dsp/engine/swarm_engine.h ****       CONSTRAIN(phase, -1.0f, 1.0f);
 102:eurorack/plaits/dsp/engine/swarm_engine.h ****       float e = stmlib::InterpolateWrap(
 103:eurorack/plaits/dsp/engine/swarm_engine.h ****           lut_sine, 0.5f * phase + 1.25f, 1024.0f);
 104:eurorack/plaits/dsp/engine/swarm_engine.h ****       target_amplitude = 0.5f * (e + 1.0f);
 105:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
 106:eurorack/plaits/dsp/engine/swarm_engine.h ****     
 107:eurorack/plaits/dsp/engine/swarm_engine.h ****     if ((size_ratio >= 1.0f) ^ (previous_size_ratio_ >= 1.0f)) {
 108:eurorack/plaits/dsp/engine/swarm_engine.h ****       filter_coefficient_ = 0.5f;
 109:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
 110:eurorack/plaits/dsp/engine/swarm_engine.h ****     filter_coefficient_ *= 0.95f;
 111:eurorack/plaits/dsp/engine/swarm_engine.h ****     
 112:eurorack/plaits/dsp/engine/swarm_engine.h ****     previous_size_ratio_ = size_ratio;
 113:eurorack/plaits/dsp/engine/swarm_engine.h ****     ONE_POLE(amplitude_, target_amplitude, 0.5f - filter_coefficient_);
 114:eurorack/plaits/dsp/engine/swarm_engine.h ****     return amplitude_;
 115:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
 116:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 117:eurorack/plaits/dsp/engine/swarm_engine.h ****  private:
 118:eurorack/plaits/dsp/engine/swarm_engine.h ****   float from_;
 119:eurorack/plaits/dsp/engine/swarm_engine.h ****   float interval_;
 120:eurorack/plaits/dsp/engine/swarm_engine.h ****   float phase_;
 121:eurorack/plaits/dsp/engine/swarm_engine.h ****   float fm_;
 122:eurorack/plaits/dsp/engine/swarm_engine.h ****   float amplitude_;
 123:eurorack/plaits/dsp/engine/swarm_engine.h ****   float previous_size_ratio_;
 124:eurorack/plaits/dsp/engine/swarm_engine.h ****   float filter_coefficient_;
 125:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 126:eurorack/plaits/dsp/engine/swarm_engine.h ****   DISALLOW_COPY_AND_ASSIGN(GrainEnvelope);
 127:eurorack/plaits/dsp/engine/swarm_engine.h **** };
 128:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 129:eurorack/plaits/dsp/engine/swarm_engine.h **** class AdditiveSawOscillator {
 130:eurorack/plaits/dsp/engine/swarm_engine.h ****  public:
 131:eurorack/plaits/dsp/engine/swarm_engine.h ****   AdditiveSawOscillator() { }
 132:eurorack/plaits/dsp/engine/swarm_engine.h ****   ~AdditiveSawOscillator() { }
 133:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 134:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline void Init() {
 135:eurorack/plaits/dsp/engine/swarm_engine.h ****     phase_ = 0.0f;
 136:eurorack/plaits/dsp/engine/swarm_engine.h ****     next_sample_ = 0.0f;
 137:eurorack/plaits/dsp/engine/swarm_engine.h ****     frequency_ = 0.01f;
 138:eurorack/plaits/dsp/engine/swarm_engine.h ****     gain_ = 0.0f;
 139:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 56


 140:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 141:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline void Render(
 142:eurorack/plaits/dsp/engine/swarm_engine.h ****       float frequency,
 143:eurorack/plaits/dsp/engine/swarm_engine.h ****       float level,
 144:eurorack/plaits/dsp/engine/swarm_engine.h ****       float* out,
 145:eurorack/plaits/dsp/engine/swarm_engine.h ****       size_t size) {
 146:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (frequency >= kMaxFrequency) {
 147:eurorack/plaits/dsp/engine/swarm_engine.h ****       frequency = kMaxFrequency;
 148:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
 149:eurorack/plaits/dsp/engine/swarm_engine.h ****     stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
 150:eurorack/plaits/dsp/engine/swarm_engine.h ****     stmlib::ParameterInterpolator gain(&gain_, level, size);
 151:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 152:eurorack/plaits/dsp/engine/swarm_engine.h ****     float next_sample = next_sample_;
 153:eurorack/plaits/dsp/engine/swarm_engine.h ****     float phase = phase_;
 154:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 155:eurorack/plaits/dsp/engine/swarm_engine.h ****     while (size--) {
 156:eurorack/plaits/dsp/engine/swarm_engine.h ****       float this_sample = next_sample;
 157:eurorack/plaits/dsp/engine/swarm_engine.h ****       next_sample = 0.0f;
 158:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 159:eurorack/plaits/dsp/engine/swarm_engine.h ****       const float frequency = fm.Next();
 160:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 161:eurorack/plaits/dsp/engine/swarm_engine.h ****       phase += frequency;
 162:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 163:eurorack/plaits/dsp/engine/swarm_engine.h ****       if (phase >= 1.0f) {
 164:eurorack/plaits/dsp/engine/swarm_engine.h ****         phase -= 1.0f;
 165:eurorack/plaits/dsp/engine/swarm_engine.h ****         float t = phase / frequency;
 166:eurorack/plaits/dsp/engine/swarm_engine.h ****         this_sample -= stmlib::ThisBlepSample(t);
 167:eurorack/plaits/dsp/engine/swarm_engine.h ****         next_sample -= stmlib::NextBlepSample(t);
 168:eurorack/plaits/dsp/engine/swarm_engine.h ****       }
 169:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 170:eurorack/plaits/dsp/engine/swarm_engine.h ****       next_sample += phase;
 171:eurorack/plaits/dsp/engine/swarm_engine.h ****       *out++ += (2.0f * this_sample - 1.0f) * gain.Next();
 172:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
 173:eurorack/plaits/dsp/engine/swarm_engine.h ****     phase_ = phase;
 174:eurorack/plaits/dsp/engine/swarm_engine.h ****     next_sample_ = next_sample;
 175:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
 176:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 177:eurorack/plaits/dsp/engine/swarm_engine.h ****  private:
 178:eurorack/plaits/dsp/engine/swarm_engine.h ****   // Oscillator state.
 179:eurorack/plaits/dsp/engine/swarm_engine.h ****   float phase_;
 180:eurorack/plaits/dsp/engine/swarm_engine.h ****   float next_sample_;
 181:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 182:eurorack/plaits/dsp/engine/swarm_engine.h ****   // For interpolation of parameters.
 183:eurorack/plaits/dsp/engine/swarm_engine.h ****   float frequency_;
 184:eurorack/plaits/dsp/engine/swarm_engine.h ****   float gain_;
 185:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 186:eurorack/plaits/dsp/engine/swarm_engine.h ****   DISALLOW_COPY_AND_ASSIGN(AdditiveSawOscillator);
 187:eurorack/plaits/dsp/engine/swarm_engine.h **** };
 188:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 189:eurorack/plaits/dsp/engine/swarm_engine.h **** class SwarmVoice {
 190:eurorack/plaits/dsp/engine/swarm_engine.h ****  public:
 191:eurorack/plaits/dsp/engine/swarm_engine.h ****   SwarmVoice() { }
 192:eurorack/plaits/dsp/engine/swarm_engine.h ****   ~SwarmVoice() { }
 193:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 194:eurorack/plaits/dsp/engine/swarm_engine.h ****   void Init(float rank) {
 195:eurorack/plaits/dsp/engine/swarm_engine.h ****     rank_ = rank;
 196:eurorack/plaits/dsp/engine/swarm_engine.h ****     envelope_.Init();
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 57


 197:eurorack/plaits/dsp/engine/swarm_engine.h ****     saw_.Init();
 198:eurorack/plaits/dsp/engine/swarm_engine.h ****     sine_.Init();
 199:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
 200:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 201:eurorack/plaits/dsp/engine/swarm_engine.h ****   void Render(
 202:eurorack/plaits/dsp/engine/swarm_engine.h ****       float f0,
 203:eurorack/plaits/dsp/engine/swarm_engine.h ****       float density,
 204:eurorack/plaits/dsp/engine/swarm_engine.h ****       bool burst_mode,
 205:eurorack/plaits/dsp/engine/swarm_engine.h ****       bool start_burst,
 206:eurorack/plaits/dsp/engine/swarm_engine.h ****       float spread,
 207:eurorack/plaits/dsp/engine/swarm_engine.h ****       float size_ratio,
 208:eurorack/plaits/dsp/engine/swarm_engine.h ****       float* saw,
 209:eurorack/plaits/dsp/engine/swarm_engine.h ****       float* sine,
 210:eurorack/plaits/dsp/engine/swarm_engine.h ****       size_t size) {
 211:eurorack/plaits/dsp/engine/swarm_engine.h ****     envelope_.Step(density, burst_mode, start_burst);
 212:eurorack/plaits/dsp/engine/swarm_engine.h ****     
 213:eurorack/plaits/dsp/engine/swarm_engine.h ****     const float scale = 1.0f / kNumSwarmVoices;
 214:eurorack/plaits/dsp/engine/swarm_engine.h ****     const float amplitude = envelope_.amplitude(size_ratio) * scale;
 215:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 216:eurorack/plaits/dsp/engine/swarm_engine.h ****     const float expo_amount = envelope_.frequency(size_ratio);
 217:eurorack/plaits/dsp/engine/swarm_engine.h ****     f0 *= stmlib::SemitonesToRatio(48.0f * expo_amount * spread * rank_);
 218:eurorack/plaits/dsp/engine/swarm_engine.h ****     
 219:eurorack/plaits/dsp/engine/swarm_engine.h ****     const float linear_amount = rank_ * (rank_ + 0.01f) * spread * 0.25f;
 220:eurorack/plaits/dsp/engine/swarm_engine.h ****     f0 *= 1.0f + linear_amount;
 221:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 222:eurorack/plaits/dsp/engine/swarm_engine.h ****     saw_.Render(f0, amplitude, saw, size);
 223:eurorack/plaits/dsp/engine/swarm_engine.h ****     sine_.Render(f0, amplitude, sine, size);
 224:eurorack/plaits/dsp/engine/swarm_engine.h ****   };
 225:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 226:eurorack/plaits/dsp/engine/swarm_engine.h ****  private:
 227:eurorack/plaits/dsp/engine/swarm_engine.h ****   float rank_;
 228:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 229:eurorack/plaits/dsp/engine/swarm_engine.h ****   GrainEnvelope envelope_;
 230:eurorack/plaits/dsp/engine/swarm_engine.h ****   AdditiveSawOscillator saw_;
 231:eurorack/plaits/dsp/engine/swarm_engine.h ****   FastSineOscillator sine_;
 232:eurorack/plaits/dsp/engine/swarm_engine.h **** };
 233:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 234:eurorack/plaits/dsp/engine/swarm_engine.h **** class SwarmEngine : public Engine {
 235:eurorack/plaits/dsp/engine/swarm_engine.h ****  public:
 236:eurorack/plaits/dsp/engine/swarm_engine.h ****   SwarmEngine() { }
 967              		.loc 30 236 3 is_stmt 1 view .LVU268
 968              	.LBB1374:
 969              	.LBB1375:
 970              	.LBI1375:
 971              		.loc 6 80 3 view .LVU269
 972              		.loc 6 80 3 is_stmt 0 view .LVU270
 973              	.LBE1375:
 974              		.loc 30 236 17 view .LVU271
 975 0042 1F4A     		ldr	r2, .L36+44
 976 0044 C3F81829 		str	r2, [r3, #2328]
 977              		.loc 30 236 17 is_stmt 1 view .LVU272
 978              	.LVL33:
 979              		.loc 30 236 17 is_stmt 0 view .LVU273
 980              	.LBE1374:
 981              	.LBE1373:
 982              	.LBB1376:
 983              	.LBI1376:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 58


 984              		.file 31 "eurorack/plaits/dsp/engine/virtual_analog_engine.h"
   1:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** //
   3:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** //
   5:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // 
  12:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // 
  15:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // 
  23:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** //
  25:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** //
  27:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // 2 variable shape oscillators with sync and crossfading.
  28:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** 
  29:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #ifndef PLAITS_DSP_ENGINE_VIRTUAL_ANALOG_ENGINE_H_
  30:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #define PLAITS_DSP_ENGINE_VIRTUAL_ANALOG_ENGINE_H_
  31:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** 
  32:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #include "plaits/dsp/oscillator/variable_saw_oscillator.h"
  34:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #include "plaits/dsp/oscillator/variable_shape_oscillator.h"
  35:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** 
  36:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #define VA_VARIANT 2
  37:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** 
  38:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** namespace plaits {
  39:eurorack/plaits/dsp/engine/virtual_analog_engine.h ****   
  40:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** class VirtualAnalogEngine : public Engine {
  41:eurorack/plaits/dsp/engine/virtual_analog_engine.h ****  public:
  42:eurorack/plaits/dsp/engine/virtual_analog_engine.h ****   VirtualAnalogEngine() { }
 985              		.loc 31 42 3 is_stmt 1 view .LVU274
 986              	.LBB1377:
 987              	.LBB1378:
 988              	.LBI1378:
 989              		.loc 6 80 3 view .LVU275
 990              		.loc 6 80 3 is_stmt 0 view .LVU276
 991              	.LBE1378:
 992              		.loc 31 42 25 view .LVU277
 993 0048 1E4A     		ldr	r2, .L36+48
 994 004a C3F8282B 		str	r2, [r3, #2856]
 995              	.LVL34:
 996              	.LBB1379:
 997              	.LBI1379:
 998              		.file 32 "eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 59


   1:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // Continuously variable waveform: triangle > saw > square. Both square and
  28:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // triangle have variable slope / pulse-width. Additionally, the phase resets
  29:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // can be locked to a master frequency.
  30:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  31:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_VARIABLE_SHAPE_OSCILLATOR_H_
  32:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #define PLAITS_DSP_OSCILLATOR_VARIABLE_SHAPE_OSCILLATOR_H_
  33:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  34:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  36:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #include "stmlib/dsp/polyblep.h"
  37:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  38:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #include <algorithm>
  39:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  40:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** namespace plaits {
  41:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  42:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** class VariableShapeOscillator {
  43:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h ****  public:
  44:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h ****   VariableShapeOscillator() { }
 999              		.loc 32 44 3 is_stmt 1 view .LVU278
 1000              		.loc 32 44 3 is_stmt 0 view .LVU279
 1001              	.LBE1379:
 1002              	.LBB1380:
 1003              	.LBI1380:
 1004              		.loc 32 44 3 is_stmt 1 view .LVU280
 1005              		.loc 32 44 3 is_stmt 0 view .LVU281
 1006              	.LBE1380:
 1007              	.LBB1381:
 1008              	.LBI1381:
 1009              		.loc 32 44 3 is_stmt 1 view .LVU282
 1010              		.loc 32 44 3 is_stmt 0 view .LVU283
 1011              	.LBE1381:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 60


 1012              	.LBB1382:
 1013              	.LBI1382:
 1014              		.file 33 "eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h"
   1:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // Saw with variable slope or notch
  28:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  29:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_VARIABLE_SAW_OSCILLATOR_H_
  30:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #define PLAITS_DSP_OSCILLATOR_VARIABLE_SAW_OSCILLATOR_H_
  31:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  32:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include "stmlib/dsp/dsp.h"
  33:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  34:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include "stmlib/dsp/polyblep.h"
  35:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  36:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include <algorithm>
  37:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  38:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include "plaits/dsp/oscillator/oscillator.h"
  39:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  40:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** namespace plaits {
  41:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  42:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** const float kVariableSawNotchDepth = 0.2f;
  43:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  44:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** class VariableSawOscillator {
  45:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h ****  public:
  46:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h ****   VariableSawOscillator() { }
 1015              		.loc 33 46 3 is_stmt 1 view .LVU284
 1016              		.loc 33 46 3 is_stmt 0 view .LVU285
 1017              	.LBE1382:
 1018              	.LBE1377:
 1019              	.LBE1376:
 1020              	.LBB1383:
 1021              	.LBI1383:
 1022              		.file 34 "eurorack/plaits/dsp/engine/waveshaping_engine.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 61


   1:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/waveshaping_engine.h **** //
   3:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/waveshaping_engine.h **** //
   5:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // 
  12:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // 
  15:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // 
  23:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/waveshaping_engine.h **** //
  25:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/waveshaping_engine.h **** //
  27:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // Slope -> Waveshaper -> Wavefolder.
  28:eurorack/plaits/dsp/engine/waveshaping_engine.h **** 
  29:eurorack/plaits/dsp/engine/waveshaping_engine.h **** #ifndef PLAITS_DSP_ENGINE_WAVESHAPING_ENGINE_H_
  30:eurorack/plaits/dsp/engine/waveshaping_engine.h **** #define PLAITS_DSP_ENGINE_WAVESHAPING_ENGINE_H_
  31:eurorack/plaits/dsp/engine/waveshaping_engine.h **** 
  32:eurorack/plaits/dsp/engine/waveshaping_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/waveshaping_engine.h **** #include "plaits/dsp/oscillator/oscillator.h"
  34:eurorack/plaits/dsp/engine/waveshaping_engine.h **** 
  35:eurorack/plaits/dsp/engine/waveshaping_engine.h **** namespace plaits {
  36:eurorack/plaits/dsp/engine/waveshaping_engine.h ****   
  37:eurorack/plaits/dsp/engine/waveshaping_engine.h **** class WaveshapingEngine : public Engine {
  38:eurorack/plaits/dsp/engine/waveshaping_engine.h ****  public:
  39:eurorack/plaits/dsp/engine/waveshaping_engine.h ****   WaveshapingEngine() { }
 1023              		.loc 34 39 3 is_stmt 1 view .LVU286
 1024              	.LBB1384:
 1025              	.LBB1385:
 1026              	.LBI1385:
 1027              		.loc 6 80 3 view .LVU287
 1028              		.loc 6 80 3 is_stmt 0 view .LVU288
 1029              	.LBE1385:
 1030              		.loc 34 39 23 view .LVU289
 1031 004e 1E4A     		ldr	r2, .L36+52
 1032 0050 C3F8CC2B 		str	r2, [r3, #3020]
 1033              	.LVL35:
 1034              	.LBB1386:
 1035              	.LBI1386:
 1036              		.file 35 "eurorack/plaits/dsp/oscillator/oscillator.h"
   1:eurorack/plaits/dsp/oscillator/oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/oscillator.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 62


   5:eurorack/plaits/dsp/oscillator/oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/oscillator.h **** // Single waveform oscillator. Can optionally do audio-rate linear FM, with
  28:eurorack/plaits/dsp/oscillator/oscillator.h **** // through-zero capabilities (negative frequencies).
  29:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  30:eurorack/plaits/dsp/oscillator/oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_OSCILLATOR_H_
  31:eurorack/plaits/dsp/oscillator/oscillator.h **** #define PLAITS_DSP_OSCILLATOR_OSCILLATOR_H_
  32:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  33:eurorack/plaits/dsp/oscillator/oscillator.h **** #include "stmlib/dsp/dsp.h"
  34:eurorack/plaits/dsp/oscillator/oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  35:eurorack/plaits/dsp/oscillator/oscillator.h **** #include "stmlib/dsp/polyblep.h"
  36:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  37:eurorack/plaits/dsp/oscillator/oscillator.h **** namespace plaits {
  38:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  39:eurorack/plaits/dsp/oscillator/oscillator.h **** enum OscillatorShape {
  40:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_IMPULSE_TRAIN,
  41:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SAW,
  42:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_TRIANGLE,
  43:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SLOPE,
  44:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SQUARE,
  45:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SQUARE_BRIGHT,
  46:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SQUARE_DARK,
  47:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SQUARE_TRIANGLE
  48:eurorack/plaits/dsp/oscillator/oscillator.h **** };
  49:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  50:eurorack/plaits/dsp/oscillator/oscillator.h **** const float kMaxFrequency = 0.25f;
  51:eurorack/plaits/dsp/oscillator/oscillator.h **** const float kMinFrequency = 0.000001f;
  52:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  53:eurorack/plaits/dsp/oscillator/oscillator.h **** class Oscillator {
  54:eurorack/plaits/dsp/oscillator/oscillator.h ****  public:
  55:eurorack/plaits/dsp/oscillator/oscillator.h ****   Oscillator() { }
 1037              		.loc 35 55 3 is_stmt 1 view .LVU290
 1038              		.loc 35 55 3 is_stmt 0 view .LVU291
 1039              	.LBE1386:
 1040              	.LBB1387:
 1041              	.LBI1387:
 1042              		.loc 35 55 3 is_stmt 1 view .LVU292
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 63


 1043              		.loc 35 55 3 is_stmt 0 view .LVU293
 1044              	.LBE1387:
 1045              	.LBE1384:
 1046              	.LBE1383:
 1047              	.LBB1388:
 1048              	.LBI1388:
 1049              		.file 36 "eurorack/stmlib/dsp/hysteresis_quantizer.h"
   1:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // Copyright 2015 Emilie Gillet.
   2:eurorack/stmlib/dsp/hysteresis_quantizer.h **** //
   3:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/dsp/hysteresis_quantizer.h **** //
   5:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // 
  12:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // 
  15:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // THE SOFTWARE.
  22:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // 
  23:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/dsp/hysteresis_quantizer.h **** //
  25:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/dsp/hysteresis_quantizer.h **** //
  27:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // Quantize a float in [0, 1] to an integer in [0, num_steps[. Apply hysteresis
  28:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // to prevent jumps near the decision boundary.
  29:eurorack/stmlib/dsp/hysteresis_quantizer.h **** 
  30:eurorack/stmlib/dsp/hysteresis_quantizer.h **** #ifndef STMLIB_DSP_HYSTERESIS_QUANTIZER_H_
  31:eurorack/stmlib/dsp/hysteresis_quantizer.h **** #define STMLIB_DSP_HYSTERESIS_QUANTIZER_H_
  32:eurorack/stmlib/dsp/hysteresis_quantizer.h **** 
  33:eurorack/stmlib/dsp/hysteresis_quantizer.h **** #include "stmlib/stmlib.h"
  34:eurorack/stmlib/dsp/hysteresis_quantizer.h **** 
  35:eurorack/stmlib/dsp/hysteresis_quantizer.h **** namespace stmlib {
  36:eurorack/stmlib/dsp/hysteresis_quantizer.h **** 
  37:eurorack/stmlib/dsp/hysteresis_quantizer.h **** class HysteresisQuantizer {
  38:eurorack/stmlib/dsp/hysteresis_quantizer.h ****  public:
  39:eurorack/stmlib/dsp/hysteresis_quantizer.h ****   HysteresisQuantizer() { }
 1050              		.loc 36 39 3 is_stmt 1 view .LVU294
 1051              		.loc 36 39 3 is_stmt 0 view .LVU295
 1052              	.LBE1388:
 1053              	.LBB1389:
 1054              	.LBI1389:
 1055              		.file 37 "eurorack/plaits/dsp/envelope.h"
   1:eurorack/plaits/dsp/envelope.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/envelope.h **** //
   3:eurorack/plaits/dsp/envelope.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/envelope.h **** //
   5:eurorack/plaits/dsp/envelope.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 64


   6:eurorack/plaits/dsp/envelope.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/envelope.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/envelope.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/envelope.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/envelope.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/envelope.h **** // 
  12:eurorack/plaits/dsp/envelope.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/envelope.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/envelope.h **** // 
  15:eurorack/plaits/dsp/envelope.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/envelope.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/envelope.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/envelope.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/envelope.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/envelope.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/envelope.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/envelope.h **** // 
  23:eurorack/plaits/dsp/envelope.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/envelope.h **** //
  25:eurorack/plaits/dsp/envelope.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/envelope.h **** //
  27:eurorack/plaits/dsp/envelope.h **** // Envelope for the internal LPG.
  28:eurorack/plaits/dsp/envelope.h **** 
  29:eurorack/plaits/dsp/envelope.h **** #ifndef PLAITS_DSP_ENVELOPE_H_
  30:eurorack/plaits/dsp/envelope.h **** #define PLAITS_DSP_ENVELOPE_H_
  31:eurorack/plaits/dsp/envelope.h **** 
  32:eurorack/plaits/dsp/envelope.h **** #include "stmlib/stmlib.h"
  33:eurorack/plaits/dsp/envelope.h **** 
  34:eurorack/plaits/dsp/envelope.h **** namespace plaits {
  35:eurorack/plaits/dsp/envelope.h **** 
  36:eurorack/plaits/dsp/envelope.h **** class LPGEnvelope {
  37:eurorack/plaits/dsp/envelope.h ****  public:
  38:eurorack/plaits/dsp/envelope.h ****   LPGEnvelope() { }
  39:eurorack/plaits/dsp/envelope.h ****   ~LPGEnvelope() { }
  40:eurorack/plaits/dsp/envelope.h ****   
  41:eurorack/plaits/dsp/envelope.h ****   inline void Init() {
  42:eurorack/plaits/dsp/envelope.h ****     vactrol_state_ = 0.0f;
  43:eurorack/plaits/dsp/envelope.h ****     gain_ = 1.0f;
  44:eurorack/plaits/dsp/envelope.h ****     frequency_ = 0.5f;
  45:eurorack/plaits/dsp/envelope.h ****     hf_bleed_ = 0.0f;
  46:eurorack/plaits/dsp/envelope.h ****   }
  47:eurorack/plaits/dsp/envelope.h ****   
  48:eurorack/plaits/dsp/envelope.h ****   inline void Trigger() {
  49:eurorack/plaits/dsp/envelope.h ****     ramp_up_ = true;
  50:eurorack/plaits/dsp/envelope.h ****   }
  51:eurorack/plaits/dsp/envelope.h ****   
  52:eurorack/plaits/dsp/envelope.h ****   inline void ProcessPing(
  53:eurorack/plaits/dsp/envelope.h ****       float attack,
  54:eurorack/plaits/dsp/envelope.h ****       float short_decay,
  55:eurorack/plaits/dsp/envelope.h ****       float decay_tail,
  56:eurorack/plaits/dsp/envelope.h ****       float hf) {
  57:eurorack/plaits/dsp/envelope.h ****     if (ramp_up_) {
  58:eurorack/plaits/dsp/envelope.h ****       vactrol_state_ += attack;
  59:eurorack/plaits/dsp/envelope.h ****       if (vactrol_state_ >= 1.0f) {
  60:eurorack/plaits/dsp/envelope.h ****         vactrol_state_ = 1.0f;
  61:eurorack/plaits/dsp/envelope.h ****         ramp_up_ = false;
  62:eurorack/plaits/dsp/envelope.h ****       }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 65


  63:eurorack/plaits/dsp/envelope.h ****     }
  64:eurorack/plaits/dsp/envelope.h ****     ProcessLP(ramp_up_ ? vactrol_state_ : 0.0f, short_decay, decay_tail, hf);
  65:eurorack/plaits/dsp/envelope.h ****   }
  66:eurorack/plaits/dsp/envelope.h ****   
  67:eurorack/plaits/dsp/envelope.h ****   inline void ProcessLP(
  68:eurorack/plaits/dsp/envelope.h ****       float level,
  69:eurorack/plaits/dsp/envelope.h ****       float short_decay,
  70:eurorack/plaits/dsp/envelope.h ****       float decay_tail,
  71:eurorack/plaits/dsp/envelope.h ****       float hf) {
  72:eurorack/plaits/dsp/envelope.h ****     float vactrol_input = level;
  73:eurorack/plaits/dsp/envelope.h ****     float vactrol_error = (vactrol_input - vactrol_state_);
  74:eurorack/plaits/dsp/envelope.h ****     float vactrol_state_2 = vactrol_state_ * vactrol_state_;
  75:eurorack/plaits/dsp/envelope.h ****     float vactrol_state_4 = vactrol_state_2 * vactrol_state_2;
  76:eurorack/plaits/dsp/envelope.h ****     float tail = 1.0f - vactrol_state_;
  77:eurorack/plaits/dsp/envelope.h ****     float tail_2 = tail * tail;
  78:eurorack/plaits/dsp/envelope.h ****     float vactrol_coefficient = (vactrol_error > 0.0f)
  79:eurorack/plaits/dsp/envelope.h ****         ? 0.6f
  80:eurorack/plaits/dsp/envelope.h ****         : short_decay + (1.0f - vactrol_state_4) * decay_tail;
  81:eurorack/plaits/dsp/envelope.h ****     vactrol_state_ += vactrol_coefficient * vactrol_error;
  82:eurorack/plaits/dsp/envelope.h ****     
  83:eurorack/plaits/dsp/envelope.h ****     gain_ = vactrol_state_;
  84:eurorack/plaits/dsp/envelope.h ****     frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
  85:eurorack/plaits/dsp/envelope.h ****     hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
  86:eurorack/plaits/dsp/envelope.h ****   }
  87:eurorack/plaits/dsp/envelope.h ****   
  88:eurorack/plaits/dsp/envelope.h ****   inline float gain() const { return gain_; }
  89:eurorack/plaits/dsp/envelope.h ****   inline float frequency() const { return frequency_; }
  90:eurorack/plaits/dsp/envelope.h ****   inline float hf_bleed() const { return hf_bleed_; }
  91:eurorack/plaits/dsp/envelope.h ****   
  92:eurorack/plaits/dsp/envelope.h ****  private:
  93:eurorack/plaits/dsp/envelope.h ****   float vactrol_state_;
  94:eurorack/plaits/dsp/envelope.h ****   float gain_;
  95:eurorack/plaits/dsp/envelope.h ****   float frequency_;
  96:eurorack/plaits/dsp/envelope.h ****   float hf_bleed_;
  97:eurorack/plaits/dsp/envelope.h ****   bool ramp_up_;
  98:eurorack/plaits/dsp/envelope.h ****   
  99:eurorack/plaits/dsp/envelope.h ****   DISALLOW_COPY_AND_ASSIGN(LPGEnvelope);
 100:eurorack/plaits/dsp/envelope.h **** };
 101:eurorack/plaits/dsp/envelope.h **** 
 102:eurorack/plaits/dsp/envelope.h **** class DecayEnvelope {
 103:eurorack/plaits/dsp/envelope.h ****  public:
 104:eurorack/plaits/dsp/envelope.h ****   DecayEnvelope() { }
 1056              		.loc 37 104 3 is_stmt 1 view .LVU296
 1057              		.loc 37 104 3 is_stmt 0 view .LVU297
 1058              	.LBE1389:
 1059              	.LBB1390:
 1060              	.LBI1390:
  38:eurorack/plaits/dsp/envelope.h ****   ~LPGEnvelope() { }
 1061              		.loc 37 38 3 is_stmt 1 view .LVU298
  38:eurorack/plaits/dsp/envelope.h ****   ~LPGEnvelope() { }
 1062              		.loc 37 38 3 is_stmt 0 view .LVU299
 1063              	.LBE1390:
 1064              	.LBB1391:
 1065              	.LBI1391:
 1066              		.loc 29 41 3 is_stmt 1 view .LVU300
 1067              		.loc 29 41 3 is_stmt 0 view .LVU301
 1068              	.LBE1391:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 66


 1069              	.LBB1392:
 1070              	.LBI1392:
  68:eurorack/plaits/dsp/voice.h ****   ~ChannelPostProcessor() { }
 1071              		.loc 4 68 3 is_stmt 1 view .LVU302
 1072              	.LBB1393:
 1073              	.LBI1393:
 1074              		.file 38 "eurorack/stmlib/dsp/limiter.h"
   1:eurorack/stmlib/dsp/limiter.h **** // Copyright 2015 Emilie Gillet.
   2:eurorack/stmlib/dsp/limiter.h **** //
   3:eurorack/stmlib/dsp/limiter.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/dsp/limiter.h **** //
   5:eurorack/stmlib/dsp/limiter.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/dsp/limiter.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/dsp/limiter.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/dsp/limiter.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/dsp/limiter.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/dsp/limiter.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/dsp/limiter.h **** // 
  12:eurorack/stmlib/dsp/limiter.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/dsp/limiter.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/dsp/limiter.h **** // 
  15:eurorack/stmlib/dsp/limiter.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/dsp/limiter.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/dsp/limiter.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/dsp/limiter.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/dsp/limiter.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/dsp/limiter.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/dsp/limiter.h **** // THE SOFTWARE.
  22:eurorack/stmlib/dsp/limiter.h **** // 
  23:eurorack/stmlib/dsp/limiter.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/dsp/limiter.h **** //
  25:eurorack/stmlib/dsp/limiter.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/dsp/limiter.h **** //
  27:eurorack/stmlib/dsp/limiter.h **** // Limiter.
  28:eurorack/stmlib/dsp/limiter.h **** 
  29:eurorack/stmlib/dsp/limiter.h **** #ifndef STMLIB_DSP_LIMITER_H_
  30:eurorack/stmlib/dsp/limiter.h **** #define STMLIB_DSP_LIMITER_H_
  31:eurorack/stmlib/dsp/limiter.h **** 
  32:eurorack/stmlib/dsp/limiter.h **** #include "stmlib/stmlib.h"
  33:eurorack/stmlib/dsp/limiter.h **** 
  34:eurorack/stmlib/dsp/limiter.h **** #include <algorithm>
  35:eurorack/stmlib/dsp/limiter.h **** 
  36:eurorack/stmlib/dsp/limiter.h **** #include "stmlib/dsp/dsp.h"
  37:eurorack/stmlib/dsp/limiter.h **** #include "stmlib/dsp/filter.h"
  38:eurorack/stmlib/dsp/limiter.h **** 
  39:eurorack/stmlib/dsp/limiter.h **** namespace stmlib {
  40:eurorack/stmlib/dsp/limiter.h **** 
  41:eurorack/stmlib/dsp/limiter.h **** class Limiter {
  42:eurorack/stmlib/dsp/limiter.h ****  public:
  43:eurorack/stmlib/dsp/limiter.h ****   Limiter() { }
 1075              		.loc 38 43 3 view .LVU303
 1076              		.loc 38 43 3 is_stmt 0 view .LVU304
 1077              	.LBE1393:
 1078              	.LBB1394:
 1079              	.LBI1394:
 1080              		.file 39 "eurorack/plaits/dsp/fx/low_pass_gate.h"
   1:eurorack/plaits/dsp/fx/low_pass_gate.h **** // Copyright 2014 Emilie Gillet.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 67


   2:eurorack/plaits/dsp/fx/low_pass_gate.h **** //
   3:eurorack/plaits/dsp/fx/low_pass_gate.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/fx/low_pass_gate.h **** //
   5:eurorack/plaits/dsp/fx/low_pass_gate.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/fx/low_pass_gate.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/fx/low_pass_gate.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/fx/low_pass_gate.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/fx/low_pass_gate.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/fx/low_pass_gate.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/fx/low_pass_gate.h **** // 
  12:eurorack/plaits/dsp/fx/low_pass_gate.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/fx/low_pass_gate.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/fx/low_pass_gate.h **** // 
  15:eurorack/plaits/dsp/fx/low_pass_gate.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/fx/low_pass_gate.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/fx/low_pass_gate.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/fx/low_pass_gate.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/fx/low_pass_gate.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/fx/low_pass_gate.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/fx/low_pass_gate.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/fx/low_pass_gate.h **** // 
  23:eurorack/plaits/dsp/fx/low_pass_gate.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/fx/low_pass_gate.h **** //
  25:eurorack/plaits/dsp/fx/low_pass_gate.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/fx/low_pass_gate.h **** //
  27:eurorack/plaits/dsp/fx/low_pass_gate.h **** // Approximative low pass gate.
  28:eurorack/plaits/dsp/fx/low_pass_gate.h **** 
  29:eurorack/plaits/dsp/fx/low_pass_gate.h **** #ifndef PLAITS_DSP_FX_LOW_PASS_GATE_H_
  30:eurorack/plaits/dsp/fx/low_pass_gate.h **** #define PLAITS_DSP_FX_LOW_PASS_GATE_H_
  31:eurorack/plaits/dsp/fx/low_pass_gate.h **** 
  32:eurorack/plaits/dsp/fx/low_pass_gate.h **** #include <algorithm>
  33:eurorack/plaits/dsp/fx/low_pass_gate.h **** 
  34:eurorack/plaits/dsp/fx/low_pass_gate.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/fx/low_pass_gate.h **** #include "stmlib/dsp/filter.h"
  36:eurorack/plaits/dsp/fx/low_pass_gate.h **** #include "stmlib/dsp/parameter_interpolator.h"
  37:eurorack/plaits/dsp/fx/low_pass_gate.h **** 
  38:eurorack/plaits/dsp/fx/low_pass_gate.h **** namespace plaits {
  39:eurorack/plaits/dsp/fx/low_pass_gate.h ****   
  40:eurorack/plaits/dsp/fx/low_pass_gate.h **** class LowPassGate {
  41:eurorack/plaits/dsp/fx/low_pass_gate.h ****  public:
  42:eurorack/plaits/dsp/fx/low_pass_gate.h ****   LowPassGate() { }
 1081              		.loc 39 42 3 is_stmt 1 view .LVU305
 1082              	.LBB1395:
 1083              	.LBI1395:
 1084              		.loc 9 179 3 view .LVU306
 1085              		.loc 9 179 3 is_stmt 0 view .LVU307
 1086              	.LBE1395:
 1087              	.LBE1394:
 1088              	.LBE1392:
 1089              	.LBB1396:
 1090              	.LBI1396:
  68:eurorack/plaits/dsp/voice.h ****   ~ChannelPostProcessor() { }
 1091              		.loc 4 68 3 is_stmt 1 view .LVU308
 1092              	.LBB1397:
 1093              	.LBI1397:
 1094              		.loc 38 43 3 view .LVU309
 1095              		.loc 38 43 3 is_stmt 0 view .LVU310
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 68


 1096              	.LBE1397:
 1097              	.LBB1398:
 1098              	.LBI1398:
 1099              		.loc 39 42 3 is_stmt 1 view .LVU311
 1100              	.LBB1399:
 1101              	.LBI1399:
 1102              		.loc 9 179 3 view .LVU312
 1103              		.loc 9 179 3 is_stmt 0 view .LVU313
 1104              	.LBE1399:
 1105              	.LBE1398:
 1106              	.LBE1396:
 1107              	.LBB1400:
 1108              	.LBI1400:
  81:eurorack/plaits/dsp/engine/engine.h ****   ~Engine() { }
  82:eurorack/plaits/dsp/engine/engine.h ****   virtual void Init(stmlib::BufferAllocator* allocator) = 0;
  83:eurorack/plaits/dsp/engine/engine.h ****   virtual void Reset() = 0;
  84:eurorack/plaits/dsp/engine/engine.h ****   virtual void Render(
  85:eurorack/plaits/dsp/engine/engine.h ****       const EngineParameters& parameters,
  86:eurorack/plaits/dsp/engine/engine.h ****       float* out,
  87:eurorack/plaits/dsp/engine/engine.h ****       float* aux,
  88:eurorack/plaits/dsp/engine/engine.h ****       size_t size,
  89:eurorack/plaits/dsp/engine/engine.h ****       bool* already_enveloped) = 0;
  90:eurorack/plaits/dsp/engine/engine.h ****   PostProcessingSettings post_processing_settings;
  91:eurorack/plaits/dsp/engine/engine.h **** };
  92:eurorack/plaits/dsp/engine/engine.h **** 
  93:eurorack/plaits/dsp/engine/engine.h **** template<int max_size>
  94:eurorack/plaits/dsp/engine/engine.h **** class EngineRegistry {
  95:eurorack/plaits/dsp/engine/engine.h ****  public:
  96:eurorack/plaits/dsp/engine/engine.h ****   EngineRegistry() { }
 1109              		.loc 6 96 3 is_stmt 1 view .LVU314
 1110              		.loc 6 96 3 is_stmt 0 view .LVU315
 1111              	.LBE1400:
 1112              	.LBE1406:
   4:Polyphony.cpp **** plaits::Voice voices[NUM_VOICES];
 1113              		.loc 1 4 32 is_stmt 1 view .LVU316
   4:Polyphony.cpp **** plaits::Voice voices[NUM_VOICES];
 1114              		.loc 1 4 32 view .LVU317
 1115 0054 03F55B63 		add	r3, r3, #3504
 1116 0058 D5D1     		bne	.L32
   4:Polyphony.cpp **** plaits::Voice voices[NUM_VOICES];
 1117              		.loc 1 4 15 is_stmt 0 view .LVU318
 1118 005a 1C4A     		ldr	r2, .L36+56
 1119 005c 1C49     		ldr	r1, .L36+60
 1120 005e FFF7FEFF 		bl	__aeabi_atexit
 1121              	.LVL36:
  18:Polyphony.cpp **** VoiceEnvelope voice_envelopes[NUM_VOICES]; 
 1122              		.loc 1 18 41 is_stmt 1 view .LVU319
 1123 0062 1C4B     		ldr	r3, .L36+64
   4:Polyphony.cpp **** plaits::Voice voices[NUM_VOICES];
 1124              		.loc 1 4 15 is_stmt 0 view .LVU320
 1125 0064 0422     		movs	r2, #4
 1126              	.L33:
 1127              	.LVL37:
 1128              	.LBB1407:
 1129              	.LBI1407:
  20:VoiceEnvelope.h ****         current_state(ENV_IDLE),
 1130              		.loc 3 20 5 is_stmt 1 view .LVU321
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 69


 1131              	.LBB1408:
  27:VoiceEnvelope.h ****     {}
 1132              		.loc 3 27 31 is_stmt 0 view .LVU322
 1133 0066 0121     		movs	r1, #1
 1134 0068 0020     		movs	r0, #0
 1135 006a 4FF07C54 		mov	r4, #1056964608
 1136              	.LBE1408:
 1137              	.LBE1407:
  18:Polyphony.cpp **** VoiceEnvelope voice_envelopes[NUM_VOICES]; 
 1138              		.loc 1 18 41 view .LVU323
 1139 006e 013A     		subs	r2, r2, #1
 1140              	.LBB1411:
 1141              	.LBB1409:
  27:VoiceEnvelope.h ****     {}
 1142              		.loc 3 27 31 view .LVU324
 1143 0070 5970     		strb	r1, [r3, #1]
 1144 0072 4FF00001 		mov	r1, #0
 1145 0076 1870     		strb	r0, [r3]
 1146              	.LBE1409:
 1147              	.LBE1411:
  18:Polyphony.cpp **** VoiceEnvelope voice_envelopes[NUM_VOICES]; 
 1148              		.loc 1 18 41 view .LVU325
 1149 0078 03F14403 		add	r3, r3, #68
 1150              	.LVL38:
 1151              	.LBB1412:
 1152              	.LBB1410:
  27:VoiceEnvelope.h ****     {}
 1153              		.loc 3 27 31 view .LVU326
 1154 007c 43F8401C 		str	r1, [r3, #-64]	@ float
 1155 0080 43F83C4C 		str	r4, [r3, #-60]	@ float
 1156 0084 43F8384C 		str	r4, [r3, #-56]	@ float
 1157 0088 43F8080C 		str	r0, [r3, #-8]
 1158 008c 43F8041C 		str	r1, [r3, #-4]	@ float
 1159              	.LVL39:
  27:VoiceEnvelope.h ****     {}
 1160              		.loc 3 27 31 view .LVU327
 1161              	.LBE1410:
 1162              	.LBE1412:
  18:Polyphony.cpp **** VoiceEnvelope voice_envelopes[NUM_VOICES]; 
 1163              		.loc 1 18 41 is_stmt 1 view .LVU328
  18:Polyphony.cpp **** VoiceEnvelope voice_envelopes[NUM_VOICES]; 
 1164              		.loc 1 18 41 view .LVU329
 1165 0090 E9D1     		bne	.L33
 1166              	.LBE1418:
 1167              	.LBE1424:
 1168              		.loc 1 78 1 is_stmt 0 view .LVU330
 1169 0092 10BD     		pop	{r4, pc}
 1170              	.L37:
 1171              		.align	2
 1172              	.L36:
 1173 0094 00000000 		.word	voices
 1174 0098 08000000 		.word	_ZTVN6plaits14AdditiveEngineE+8
 1175 009c 08000000 		.word	_ZTVN6plaits14BassDrumEngineE+8
 1176 00a0 08000000 		.word	_ZTVN6plaits8FMEngineE+8
 1177 00a4 08000000 		.word	_ZTVN6plaits11GrainEngineE+8
 1178 00a8 08000000 		.word	_ZTVN6plaits11HiHatEngineE+8
 1179 00ac 08000000 		.word	_ZTVN6plaits11ModalEngineE+8
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 70


 1180 00b0 08000000 		.word	_ZTVN6plaits11NoiseEngineE+8
 1181 00b4 08000000 		.word	_ZTVN6plaits14ParticleEngineE+8
 1182 00b8 08000000 		.word	_ZTVN6plaits15SnareDrumEngineE+8
 1183 00bc 08000000 		.word	_ZTVN6plaits12StringEngineE+8
 1184 00c0 08000000 		.word	_ZTVN6plaits11SwarmEngineE+8
 1185 00c4 08000000 		.word	_ZTVN6plaits19VirtualAnalogEngineE+8
 1186 00c8 08000000 		.word	_ZTVN6plaits17WaveshapingEngineE+8
 1187 00cc 00000000 		.word	__dso_handle
 1188 00d0 00000000 		.word	__tcf_0
 1189 00d4 00000000 		.word	.LANCHOR4
 1190              		.cfi_endproc
 1191              	.LFE5780:
 1193              		.section	.init_array,"aw",%init_array
 1194              		.align	2
 1195 0000 00000000 		.word	_GLOBAL__sub_I_voices(target1)
 1196              		.global	MAX_ENGINE_INDEX
 1197              		.global	kTouchMidiNotes
 1198              		.global	voice_envelopes
 1199              		.global	last_touch_state
 1200              		.global	voice_values
 1201              		.global	voice_note
 1202              		.global	voice_active
 1203              		.global	output_buffers
 1204              		.global	shared_buffer
 1205              		.global	modulations
 1206              		.global	patches
 1207              		.global	voices
 1208              		.section	.bss.last_touch_state,"aw",%nobits
 1209              		.align	1
 1212              	last_touch_state:
 1213 0000 0000     		.space	2
 1214              		.section	.bss.modulations,"aw",%nobits
 1215              		.align	2
 1216              		.set	.LANCHOR2,. + 0
 1219              	modulations:
 1220 0000 00000000 		.space	160
 1220      00000000 
 1220      00000000 
 1220      00000000 
 1220      00000000 
 1221              		.section	.bss.output_buffers,"aw",%nobits
 1222              		.align	1
 1225              	output_buffers:
 1226 0000 00000000 		.space	256
 1226      00000000 
 1226      00000000 
 1226      00000000 
 1226      00000000 
 1227              		.section	.bss.patches,"aw",%nobits
 1228              		.align	2
 1229              		.set	.LANCHOR3,. + 0
 1232              	patches:
 1233 0000 00000000 		.space	160
 1233      00000000 
 1233      00000000 
 1233      00000000 
 1233      00000000 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 71


 1234              		.section	.bss.voice_active,"aw",%nobits
 1235              		.set	.LANCHOR1,. + 0
 1238              	voice_active:
 1239 0000 00000000 		.space	4
 1240              		.section	.bss.voice_envelopes,"aw",%nobits
 1241              		.align	2
 1242              		.set	.LANCHOR4,. + 0
 1245              	voice_envelopes:
 1246 0000 00000000 		.space	272
 1246      00000000 
 1246      00000000 
 1246      00000000 
 1246      00000000 
 1247              		.section	.bss.voice_note,"aw",%nobits
 1248              		.align	2
 1249              		.set	.LANCHOR0,. + 0
 1252              	voice_note:
 1253 0000 00000000 		.space	16
 1253      00000000 
 1253      00000000 
 1253      00000000 
 1254              		.section	.bss.voice_values,"aw",%nobits
 1255              		.align	2
 1256              		.set	.LANCHOR5,. + 0
 1259              	voice_values:
 1260 0000 00000000 		.space	16
 1260      00000000 
 1260      00000000 
 1260      00000000 
 1261              		.section	.bss.voices,"aw",%nobits
 1262              		.align	2
 1265              	voices:
 1266 0000 00000000 		.space	14016
 1266      00000000 
 1266      00000000 
 1266      00000000 
 1266      00000000 
 1267              		.section	.rodata.MAX_ENGINE_INDEX,"a"
 1268              		.align	2
 1271              	MAX_ENGINE_INDEX:
 1272 0000 0C000000 		.word	12
 1273              		.section	.rodata.kTouchMidiNotes,"a"
 1274              		.align	2
 1277              	kTouchMidiNotes:
 1278 0000 00002042 		.word	1109393408
 1279 0004 00002442 		.word	1109655552
 1280 0008 00002C42 		.word	1110179840
 1281 000c 00003442 		.word	1110704128
 1282 0010 00003C42 		.word	1111228416
 1283 0014 00004042 		.word	1111490560
 1284 0018 00004842 		.word	1112014848
 1285 001c 00005042 		.word	1112539136
 1286 0020 00005442 		.word	1112801280
 1287 0024 00005C42 		.word	1113325568
 1288 0028 00006442 		.word	1113849856
 1289 002c 00006C42 		.word	1114374144
 1290              		.section	.sdram_bss,"aw"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 72


 1293              	shared_buffer:
 1294 0000 00000000 		.space	262144
 1294      00000000 
 1294      00000000 
 1294      00000000 
 1294      00000000 
 1295              		.text
 1296              	.Letext0:
 1297              		.file 40 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/machine/_default_types.h"
 1298              		.file 41 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/_stdint.h"
 1299              		.file 42 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdint.h"
 1300              		.file 43 "/Library/DaisyToolchain/0.2.0/arm/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 1301              		.file 44 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/cpp_type_traits.
 1302              		.file 45 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cmath"
 1303              		.file 46 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h"
 1304              		.file 47 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdlib"
 1305              		.file 48 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdint"
 1306              		.file 49 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/arm-none-eabi/thumb/v
 1307              		.file 50 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/type_traits"
 1308              		.file 51 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h"
 1309              		.file 52 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/debug/debug.h"
 1310              		.file 53 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/algorithmfwd.h"
 1311              		.file 54 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/exception_ptr.h"
 1312              		.file 55 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdarg"
 1313              		.file 56 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdio"
 1314              		.file 57 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstring"
 1315              		.file 58 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cwchar"
 1316              		.file 59 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/clocale"
 1317              		.file 60 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/basic_string.h"
 1318              		.file 61 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_iterator.h"
 1319              		.file 62 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/array"
 1320              		.file 63 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/predefined_ops.h
 1321              		.file 64 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/_types.h"
 1322              		.file 65 "<built-in>"
 1323              		.file 66 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/reent.h"
 1324              		.file 67 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/lock.h"
 1325              		.file 68 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/math.h"
 1326              		.file 69 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdlib.h"
 1327              		.file 70 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/math.h"
 1328              		.file 71 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/stdlib.h"
 1329              		.file 72 "lib/libdaisy/src/daisy_core.h"
 1330              		.file 73 "lib/libdaisy/src/util/wav_format.h"
 1331              		.file 74 "lib/libdaisy/src/daisy_seed.h"
 1332              		.file 75 "/Library/DaisyToolchain/0.2.0/arm/lib/gcc/arm-none-eabi/10.3.1/include/stdarg.h"
 1333              		.file 76 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdio.h"
 1334              		.file 77 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/string.h"
 1335              		.file 78 "lib/DaisySP/Source/Control/adenv.h"
 1336              		.file 79 "lib/DaisySP/Source/Utility/dsp.h"
 1337              		.file 80 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/wchar.h"
 1338              		.file 81 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/locale.h"
 1339              		.file 82 "eurorack/stmlib/stmlib.h"
 1340              		.file 83 "eurorack/stmlib/dsp/cosine_oscillator.h"
 1341              		.file 84 "eurorack/plaits/dsp/dsp.h"
 1342              		.file 85 "eurorack/plaits/dsp/oscillator/harmonic_oscillator.h"
 1343              		.file 86 "eurorack/plaits/dsp/engine/chord_engine.h"
 1344              		.file 87 "eurorack/plaits/dsp/oscillator/grainlet_oscillator.h"
 1345              		.file 88 "eurorack/plaits/dsp/noise/clocked_noise.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 73


 1346              		.file 89 "eurorack/plaits/dsp/noise/particle.h"
 1347              		.file 90 "eurorack/plaits/dsp/physical_modelling/string.h"
 1348              		.file 91 "eurorack/plaits/dsp/physical_modelling/string_voice.h"
 1349              		.file 92 "mpr121_daisy.h"
 1350              		.file 93 "Effects/BiquadFilters.h"
 1351              		.file 94 "Thaumazein.h"
 1352              		.file 95 "lib/libdaisy/src/dev/sr_595.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 74


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Polyphony.cpp
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:19     .text.__tcf_0:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:24     .text.__tcf_0:0000000000000000 __tcf_0
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:38     .text._Z9FindVoicefi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:44     .text._Z9FindVoicefi:0000000000000000 _Z9FindVoicefi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:109    .text._Z9FindVoicefi:000000000000003c $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:116    .text._Z18FindAvailableVoicei:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:122    .text._Z18FindAvailableVoicei:0000000000000000 _Z18FindAvailableVoicei
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:164    .text._Z18FindAvailableVoicei:000000000000001c $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:169    .text._Z14AssignMonoNotef:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:175    .text._Z14AssignMonoNotef:0000000000000000 _Z14AssignMonoNotef
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:205    .text._Z14AssignMonoNotef:0000000000000018 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:212    .text._Z16InitializeVoicesv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:218    .text._Z16InitializeVoicesv:0000000000000000 _Z16InitializeVoicesv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:516    .text._Z16InitializeVoicesv:00000000000000a0 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:1293   .sdram_bss:0000000000000000 shared_buffer
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:1265   .bss.voices:0000000000000000 voices
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:537    .text.startup._GLOBAL__sub_I_voices:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:542    .text.startup._GLOBAL__sub_I_voices:0000000000000000 _GLOBAL__sub_I_voices
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:1173   .text.startup._GLOBAL__sub_I_voices:0000000000000094 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:1194   .init_array:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:1271   .rodata.MAX_ENGINE_INDEX:0000000000000000 MAX_ENGINE_INDEX
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:1277   .rodata.kTouchMidiNotes:0000000000000000 kTouchMidiNotes
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:1245   .bss.voice_envelopes:0000000000000000 voice_envelopes
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:1212   .bss.last_touch_state:0000000000000000 last_touch_state
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:1259   .bss.voice_values:0000000000000000 voice_values
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:1252   .bss.voice_note:0000000000000000 voice_note
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:1238   .bss.voice_active:0000000000000000 voice_active
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:1225   .bss.output_buffers:0000000000000000 output_buffers
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:1219   .bss.modulations:0000000000000000 modulations
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:1232   .bss.patches:0000000000000000 patches
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:1209   .bss.last_touch_state:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:1215   .bss.modulations:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:1222   .bss.output_buffers:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:1228   .bss.patches:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:1239   .bss.voice_active:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:1241   .bss.voice_envelopes:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:1248   .bss.voice_note:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:1255   .bss.voice_values:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:1262   .bss.voices:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:1268   .rodata.MAX_ENGINE_INDEX:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:1274   .rodata.kTouchMidiNotes:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s:1294   .sdram_bss:0000000000000000 $d

UNDEFINED SYMBOLS
_ZN6plaits5Voice4InitEPN6stmlib15BufferAllocatorE
__aeabi_atexit
_ZTVN6plaits14AdditiveEngineE
_ZTVN6plaits14BassDrumEngineE
_ZTVN6plaits8FMEngineE
_ZTVN6plaits11GrainEngineE
_ZTVN6plaits11HiHatEngineE
_ZTVN6plaits11ModalEngineE
_ZTVN6plaits11NoiseEngineE
_ZTVN6plaits14ParticleEngineE
_ZTVN6plaits15SnareDrumEngineE
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cctDoMvZ.s 			page 75


_ZTVN6plaits12StringEngineE
_ZTVN6plaits11SwarmEngineE
_ZTVN6plaits19VirtualAnalogEngineE
_ZTVN6plaits17WaveshapingEngineE
__dso_handle
