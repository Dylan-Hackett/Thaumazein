ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"AudioProcessor.cpp"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text._ZN13VoiceEnvelope13SetAttackTimeEf,"axG",%progbits,_ZN13VoiceEnvelope13SetAttackTi
  19              		.align	1
  20              		.weak	_ZN13VoiceEnvelope13SetAttackTimeEf
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	_ZN13VoiceEnvelope13SetAttackTimeEf:
  26              	.LVL0:
  27              	.LFB5036:
  28              		.file 1 "VoiceEnvelope.h"
   1:VoiceEnvelope.h **** #pragma once
   2:VoiceEnvelope.h **** #include <algorithm>
   3:VoiceEnvelope.h **** 
   4:VoiceEnvelope.h **** // Simple envelope for each polyphonic voice
   5:VoiceEnvelope.h **** class VoiceEnvelope {
   6:VoiceEnvelope.h **** public:
   7:VoiceEnvelope.h ****     enum EnvState {
   8:VoiceEnvelope.h ****         ENV_IDLE,
   9:VoiceEnvelope.h ****         ENV_ATTACK,
  10:VoiceEnvelope.h ****         ENV_SUSTAIN,
  11:VoiceEnvelope.h ****         ENV_DECAY,
  12:VoiceEnvelope.h ****         ENV_RESET
  13:VoiceEnvelope.h ****     };
  14:VoiceEnvelope.h **** 
  15:VoiceEnvelope.h ****     enum EnvMode {
  16:VoiceEnvelope.h ****         MODE_AR,   // Attack-Release
  17:VoiceEnvelope.h ****         MODE_ASR   // Attack-Sustain-Release
  18:VoiceEnvelope.h ****     };
  19:VoiceEnvelope.h **** 
  20:VoiceEnvelope.h ****     VoiceEnvelope() :
  21:VoiceEnvelope.h ****         current_state(ENV_IDLE),
  22:VoiceEnvelope.h ****         current_value(0.0f),
  23:VoiceEnvelope.h ****         mode(MODE_ASR),
  24:VoiceEnvelope.h ****         attack_curve_coefficient(0.5f),
  25:VoiceEnvelope.h ****         release_curve_coefficient(0.5f),
  26:VoiceEnvelope.h ****         phase(0),
  27:VoiceEnvelope.h ****         decay_start_level(0.0f)
  28:VoiceEnvelope.h ****     {}
  29:VoiceEnvelope.h **** 
  30:VoiceEnvelope.h ****     void Init(float sample_rate) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 2


  31:VoiceEnvelope.h ****         time_range_2x = 2.0f * 4.0f * sample_rate;  // 4s max time
  32:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
  33:VoiceEnvelope.h ****         min_decay_time_a = 0.4f * sample_rate;      // 400ms min decay A
  34:VoiceEnvelope.h ****         min_decay_time_b = 0.01f * sample_rate;     // 10ms min decay B
  35:VoiceEnvelope.h ****         reset_time = 0.008f * sample_rate;          // 8ms reset time
  36:VoiceEnvelope.h ****         reset_coefficient = 1.0f / reset_time;
  37:VoiceEnvelope.h ****         
  38:VoiceEnvelope.h ****         // Default curves
  39:VoiceEnvelope.h ****         SetAttackCurve(0.5f);
  40:VoiceEnvelope.h ****         SetReleaseCurve(0.5f);
  41:VoiceEnvelope.h ****     }
  42:VoiceEnvelope.h **** 
  43:VoiceEnvelope.h ****     void SetMode(EnvMode new_mode) {
  44:VoiceEnvelope.h ****         mode = new_mode;
  45:VoiceEnvelope.h ****     }
  46:VoiceEnvelope.h **** 
  47:VoiceEnvelope.h ****     // Original combined shape method for backward compatibility
  48:VoiceEnvelope.h ****     void SetShape(float value) {
  49:VoiceEnvelope.h ****         float curve;
  50:VoiceEnvelope.h ****         if (value < 0.5f) {
  51:VoiceEnvelope.h ****             attack_time = min_attack_time;
  52:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * value * value) + min_decay_time_a;
  53:VoiceEnvelope.h ****             curve = value * 0.15f;
  54:VoiceEnvelope.h ****         } else {
  55:VoiceEnvelope.h ****             float norm_val = 2.0f * value - 1.0f;
  56:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(time_range_2x * norm_val * norm_val) + min_attack_tim
  57:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
  58:VoiceEnvelope.h ****             curve = 0.5f;
  59:VoiceEnvelope.h ****         }
  60:VoiceEnvelope.h ****         attack_coefficient = 1.0f / attack_time;
  61:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
  62:VoiceEnvelope.h ****         SetAttackCurve(curve);
  63:VoiceEnvelope.h ****         SetReleaseCurve(curve);
  64:VoiceEnvelope.h ****     }
  65:VoiceEnvelope.h ****     
  66:VoiceEnvelope.h ****     // New methods for separate attack and release control
  67:VoiceEnvelope.h ****     void SetAttackTime(float value) {
  29              		.loc 1 67 10 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  68:VoiceEnvelope.h ****         // Map 0-1 value to attack time (exponential scaling)
  69:VoiceEnvelope.h ****         // value³ for finer control at shorter settings
  70:VoiceEnvelope.h ****         float value_cubed = value * value * value;
  34              		.loc 1 70 9 view .LVU1
  71:VoiceEnvelope.h ****         
  72:VoiceEnvelope.h ****         // Special handling for super punchy attacks at low values
  73:VoiceEnvelope.h ****         if (value < 0.1f) {
  35              		.loc 1 73 9 view .LVU2
  36 0000 9FED286A 		vldr.32	s12, .L13
  37 0004 B4EEC60A 		vcmpe.f32	s0, s12
  38 0008 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  39 000c 31D5     		bpl	.L10
  74:VoiceEnvelope.h ****             // Extra fast attacks at the beginning of the range
  75:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(min_attack_time + 
  40              		.loc 1 75 13 view .LVU3
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 3


  76:VoiceEnvelope.h ****                                            (min_attack_time * 9.0f * value / 0.1f));
  41              		.loc 1 76 61 is_stmt 0 view .LVU4
  42 000e B2EE027A 		vmov.f32	s14, #9.0e+0
  75:VoiceEnvelope.h ****                                            (min_attack_time * 9.0f * value / 0.1f));
  43              		.loc 1 75 47 view .LVU5
  44 0012 D0ED056A 		vldr.32	s13, [r0, #20]
  45              		.loc 1 76 61 view .LVU6
  46 0016 26EE877A 		vmul.f32	s14, s13, s14
  47              		.loc 1 76 68 view .LVU7
  48 001a 27EE007A 		vmul.f32	s14, s14, s0
  49              		.loc 1 76 76 view .LVU8
  50 001e C7EE067A 		vdiv.f32	s15, s14, s12
  75:VoiceEnvelope.h ****                                            (min_attack_time * 9.0f * value / 0.1f));
  51              		.loc 1 75 63 view .LVU9
  52 0022 77EEA67A 		vadd.f32	s15, s15, s13
  53              	.L12:
  77:VoiceEnvelope.h ****         } else {
  78:VoiceEnvelope.h ****             // Normal range from 2ms to 4 seconds
  79:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(0.002f * time_range_2x/8.0f + 
  54              		.loc 1 79 27 view .LVU10
  55 0026 FCEEE77A 		vcvt.u32.f32	s15, s15
  80:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
  81:VoiceEnvelope.h ****         }
  82:VoiceEnvelope.h ****         
  83:VoiceEnvelope.h ****         attack_coefficient = 1.0f / attack_time;
  56              		.loc 1 83 35 view .LVU11
  57 002a F7EE006A 		vmov.f32	s13, #1.0e+0
  58 002e C0ED0D7A 		vstr.32	s15, [r0, #52]	@ int
  59              		.loc 1 83 9 is_stmt 1 view .LVU12
  60              		.loc 1 83 35 is_stmt 0 view .LVU13
  61 0032 F8EE677A 		vcvt.f32.u32	s15, s15
  62 0036 86EEA77A 		vdiv.f32	s14, s13, s15
  63              		.loc 1 83 28 view .LVU14
  64 003a 80ED0B7A 		vstr.32	s14, [r0, #44]
  84:VoiceEnvelope.h ****         
  85:VoiceEnvelope.h ****         // Make curve more exponential for faster attacks
  86:VoiceEnvelope.h ****         if (value < 0.3f) {
  65              		.loc 1 86 9 is_stmt 1 view .LVU15
  66 003e 9FED1A7A 		vldr.32	s14, .L13+4
  67 0042 B4EEC70A 		vcmpe.f32	s0, s14
  68 0046 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  69 004a 27D5     		bpl	.L11
  70              	.LVL1:
  71              	.LBB122:
  72              	.LBI122:
  67:VoiceEnvelope.h ****         // Map 0-1 value to attack time (exponential scaling)
  73              		.loc 1 67 10 view .LVU16
  74              	.LBB123:
  87:VoiceEnvelope.h ****             // More exponential curve for punchy attacks
  88:VoiceEnvelope.h ****             SetAttackCurve(0.7f + (0.3f - value)); // 0.7 to 1.0 range for punchier curve
  75              		.loc 1 88 13 view .LVU17
  76              	.LBB124:
  77              	.LBI124:
  89:VoiceEnvelope.h ****         } else {
  90:VoiceEnvelope.h ****             // Normal curve
  91:VoiceEnvelope.h ****             SetAttackCurve(0.5f);
  92:VoiceEnvelope.h ****         }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 4


  93:VoiceEnvelope.h ****     }
  94:VoiceEnvelope.h ****     
  95:VoiceEnvelope.h ****     void SetReleaseTime(float value) {
  96:VoiceEnvelope.h ****         // Map 0-1 value to release time (exponential scaling)
  97:VoiceEnvelope.h ****         // value³ for finer control at shorter settings
  98:VoiceEnvelope.h ****         float value_cubed = value * value * value;
  99:VoiceEnvelope.h ****         
 100:VoiceEnvelope.h ****         // Release time ranges from min_decay_time_b to 8 seconds
 101:VoiceEnvelope.h ****         decay_time = static_cast<size_t>(min_decay_time_b + 
 102:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 103:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
 104:VoiceEnvelope.h ****         
 105:VoiceEnvelope.h ****         // Use consistent release curve regardless of release time
 106:VoiceEnvelope.h ****         SetReleaseCurve(0.5f);
 107:VoiceEnvelope.h ****     }
 108:VoiceEnvelope.h ****     
 109:VoiceEnvelope.h ****     void SetAttackCurve(float value) {
  78              		.loc 1 109 10 view .LVU18
  79              	.LBB125:
 110:VoiceEnvelope.h ****         float cu = value - 0.5f;
  80              		.loc 1 110 9 view .LVU19
  81              	.LBE125:
  82              	.LBE124:
  88:VoiceEnvelope.h ****         } else {
  83              		.loc 1 88 41 is_stmt 0 view .LVU20
  84 004c 77EE407A 		vsub.f32	s15, s14, s0
  88:VoiceEnvelope.h ****         } else {
  85              		.loc 1 88 27 view .LVU21
  86 0050 9FED167A 		vldr.32	s14, .L13+8
  87 0054 77EE877A 		vadd.f32	s15, s15, s14
  88              	.LVL2:
  89              	.LBB127:
  90              	.LBB126:
  91              		.loc 1 110 15 view .LVU22
  92 0058 B6EE007A 		vmov.f32	s14, #5.0e-1
  93 005c 77EEC77A 		vsub.f32	s15, s15, s14
  94              	.LVL3:
 111:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
  95              		.loc 1 111 9 is_stmt 1 view .LVU23
  96              		.loc 1 111 43 is_stmt 0 view .LVU24
  97 0060 9FED137A 		vldr.32	s14, .L13+12
  98 0064 27EE877A 		vmul.f32	s14, s15, s14
  99              		.loc 1 111 48 view .LVU25
 100 0068 67EE277A 		vmul.f32	s15, s14, s15
 101              	.LVL4:
 102              	.L5:
 103              		.loc 1 111 48 view .LVU26
 104 006c C0ED027A 		vstr.32	s15, [r0, #8]
 105              	.LBE126:
 106              	.LBE127:
 107              	.LBE123:
 108              	.LBE122:
  93:VoiceEnvelope.h ****     
 109              		.loc 1 93 5 view .LVU27
 110 0070 7047     		bx	lr
 111              	.L10:
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 5


 112              		.loc 1 79 13 is_stmt 1 view .LVU28
  70:VoiceEnvelope.h ****         
 113              		.loc 1 70 35 is_stmt 0 view .LVU29
 114 0072 60EE007A 		vmul.f32	s15, s0, s0
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 115              		.loc 1 79 56 view .LVU30
 116 0076 90ED047A 		vldr.32	s14, [r0, #16]
  80:VoiceEnvelope.h ****         }
 117              		.loc 1 80 59 view .LVU31
 118 007a B6EE006A 		vmov.f32	s12, #5.0e-1
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 119              		.loc 1 79 54 view .LVU32
 120 007e DFED0D6A 		vldr.32	s13, .L13+16
  70:VoiceEnvelope.h ****         
 121              		.loc 1 70 15 view .LVU33
 122 0082 67EE807A 		vmul.f32	s15, s15, s0
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 123              		.loc 1 79 54 view .LVU34
 124 0086 67EE266A 		vmul.f32	s13, s14, s13
  80:VoiceEnvelope.h ****         }
 125              		.loc 1 80 59 view .LVU35
 126 008a 27EE067A 		vmul.f32	s14, s14, s12
  80:VoiceEnvelope.h ****         }
 127              		.loc 1 80 66 view .LVU36
 128 008e 67EE877A 		vmul.f32	s15, s15, s14
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 129              		.loc 1 79 75 view .LVU37
 130 0092 B4EE007A 		vmov.f32	s14, #1.25e-1
 131 0096 E6EE877A 		vfma.f32	s15, s13, s14
 132 009a C4E7     		b	.L12
 133              	.L11:
 134              	.LBB128:
 135              	.LBB129:
 136              		.loc 1 111 34 view .LVU38
 137 009c DFED067A 		vldr.32	s15, .L13+20
 138 00a0 E4E7     		b	.L5
 139              	.L14:
 140 00a2 00BF     		.align	2
 141              	.L13:
 142 00a4 CDCCCC3D 		.word	1036831949
 143 00a8 9A99993E 		.word	1050253722
 144 00ac 3333333F 		.word	1060320051
 145 00b0 00000043 		.word	1124073472
 146 00b4 6F12033B 		.word	990057071
 147 00b8 00000000 		.word	0
 148              	.LBE129:
 149              	.LBE128:
 150              		.cfi_endproc
 151              	.LFE5036:
 153              		.section	.text._ZN13VoiceEnvelope14SetReleaseTimeEf,"axG",%progbits,_ZN13VoiceEnvelope14SetRelease
 154              		.align	1
 155              		.weak	_ZN13VoiceEnvelope14SetReleaseTimeEf
 156              		.syntax unified
 157              		.thumb
 158              		.thumb_func
 160              	_ZN13VoiceEnvelope14SetReleaseTimeEf:
 161              	.LVL5:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 6


 162              	.LFB5037:
  95:VoiceEnvelope.h ****         // Map 0-1 value to release time (exponential scaling)
 163              		.loc 1 95 10 is_stmt 1 view -0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              		@ link register save eliminated.
  98:VoiceEnvelope.h ****         
 168              		.loc 1 98 9 view .LVU40
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 169              		.loc 1 101 9 view .LVU41
  98:VoiceEnvelope.h ****         
 170              		.loc 1 98 35 is_stmt 0 view .LVU42
 171 0000 60EE007A 		vmul.f32	s15, s0, s0
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 172              		.loc 1 101 59 view .LVU43
 173 0004 90ED047A 		vldr.32	s14, [r0, #16]
 103:VoiceEnvelope.h ****         
 174              		.loc 1 103 34 view .LVU44
 175 0008 F7EE006A 		vmov.f32	s13, #1.0e+0
 176              	.LBB130:
 177              	.LBB131:
 112:VoiceEnvelope.h ****     }
 113:VoiceEnvelope.h ****     
 114:VoiceEnvelope.h ****     void SetReleaseCurve(float value) {
 115:VoiceEnvelope.h ****         float cu = value - 0.5f;
 116:VoiceEnvelope.h ****         release_curve_coefficient = 128.0f * cu * cu;
 178              		.loc 1 116 35 view .LVU45
 179 000c 0023     		movs	r3, #0
 180              	.LBE131:
 181              	.LBE130:
  98:VoiceEnvelope.h ****         
 182              		.loc 1 98 15 view .LVU46
 183 000e 27EE800A 		vmul.f32	s0, s15, s0
 184              	.LVL6:
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 185              		.loc 1 101 59 view .LVU47
 186 0012 D0ED077A 		vldr.32	s15, [r0, #28]
 187              	.LBB134:
 188              	.LBB132:
 189              		.loc 1 116 35 view .LVU48
 190 0016 C360     		str	r3, [r0, #12]	@ float
 191              	.LBE132:
 192              	.LBE134:
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 193              		.loc 1 101 59 view .LVU49
 194 0018 E7EE007A 		vfma.f32	s15, s14, s0
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 195              		.loc 1 101 22 view .LVU50
 196 001c FCEEE77A 		vcvt.u32.f32	s15, s15
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 197              		.loc 1 101 20 view .LVU51
 198 0020 C0ED0E7A 		vstr.32	s15, [r0, #56]	@ int
 103:VoiceEnvelope.h ****         
 199              		.loc 1 103 9 is_stmt 1 view .LVU52
 103:VoiceEnvelope.h ****         
 200              		.loc 1 103 34 is_stmt 0 view .LVU53
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 7


 201 0024 F8EE677A 		vcvt.f32.u32	s15, s15
 202 0028 86EEA77A 		vdiv.f32	s14, s13, s15
 103:VoiceEnvelope.h ****         
 203              		.loc 1 103 27 view .LVU54
 204 002c 80ED0C7A 		vstr.32	s14, [r0, #48]
 106:VoiceEnvelope.h ****     }
 205              		.loc 1 106 9 is_stmt 1 view .LVU55
 206              	.LVL7:
 207              	.LBB135:
 208              	.LBI130:
 114:VoiceEnvelope.h ****         float cu = value - 0.5f;
 209              		.loc 1 114 10 view .LVU56
 210              	.LBB133:
 115:VoiceEnvelope.h ****         release_curve_coefficient = 128.0f * cu * cu;
 211              		.loc 1 115 9 view .LVU57
 212              		.loc 1 116 9 view .LVU58
 213              		.loc 1 116 9 is_stmt 0 view .LVU59
 214              	.LBE133:
 215              	.LBE135:
 107:VoiceEnvelope.h ****     
 216              		.loc 1 107 5 view .LVU60
 217 0030 7047     		bx	lr
 218              		.cfi_endproc
 219              	.LFE5037:
 221              		.section	.text._ZN13VoiceEnvelope7TriggerEv,"axG",%progbits,_ZN13VoiceEnvelope7TriggerEv,comdat
 222              		.align	1
 223              		.weak	_ZN13VoiceEnvelope7TriggerEv
 224              		.syntax unified
 225              		.thumb
 226              		.thumb_func
 228              	_ZN13VoiceEnvelope7TriggerEv:
 229              	.LVL8:
 230              	.LFB5040:
 117:VoiceEnvelope.h ****     }
 118:VoiceEnvelope.h **** 
 119:VoiceEnvelope.h ****     void Trigger() {
 231              		.loc 1 119 10 is_stmt 1 view -0
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 0
 234              		@ frame_needed = 0, uses_anonymous_args = 0
 235              		@ link register save eliminated.
 120:VoiceEnvelope.h ****         switch (current_state) {
 236              		.loc 1 120 9 view .LVU62
 237              		.loc 1 120 17 is_stmt 0 view .LVU63
 238 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 239              		.loc 1 120 9 view .LVU64
 240 0002 13B1     		cbz	r3, .L17
 241 0004 032B     		cmp	r3, #3
 242 0006 04D0     		beq	.L18
 243 0008 7047     		bx	lr
 244              	.L17:
 121:VoiceEnvelope.h ****             case ENV_IDLE:
 245              		.loc 1 121 13 is_stmt 1 view .LVU65
 122:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 246              		.loc 1 122 17 view .LVU66
 247              		.loc 1 122 31 is_stmt 0 view .LVU67
 248 000a 0122     		movs	r2, #1
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 8


 123:VoiceEnvelope.h ****                 phase = 0;
 249              		.loc 1 123 23 view .LVU68
 250 000c C363     		str	r3, [r0, #60]
 122:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 251              		.loc 1 122 31 view .LVU69
 252 000e 0270     		strb	r2, [r0]
 253              		.loc 1 123 17 is_stmt 1 view .LVU70
 124:VoiceEnvelope.h ****                 break;
 254              		.loc 1 124 17 view .LVU71
 255 0010 7047     		bx	lr
 256              	.L18:
 257              	.LVL9:
 258              	.LBB140:
 259              	.LBI140:
 119:VoiceEnvelope.h ****         switch (current_state) {
 260              		.loc 1 119 10 view .LVU72
 261              	.LBB141:
 125:VoiceEnvelope.h ****             case ENV_DECAY:
 262              		.loc 1 125 13 view .LVU73
 126:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 263              		.loc 1 126 17 view .LVU74
 264              	.LBB142:
 265              	.LBB143:
 127:VoiceEnvelope.h ****                 phase = CalculateAttackPhase(current_value);
 128:VoiceEnvelope.h ****                 break;
 129:VoiceEnvelope.h ****             default:
 130:VoiceEnvelope.h ****                 break;
 131:VoiceEnvelope.h ****         }
 132:VoiceEnvelope.h ****     }
 133:VoiceEnvelope.h **** 
 134:VoiceEnvelope.h ****     void Release() {
 135:VoiceEnvelope.h ****         switch (current_state) {
 136:VoiceEnvelope.h ****             case ENV_ATTACK:
 137:VoiceEnvelope.h ****                 // Preserve the attack curve character when transitioning to release
 138:VoiceEnvelope.h ****                 // This decouples release time from affecting attack punchiness
 139:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(static_cast<float>(phase) * attack_coeffic
 140:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 141:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 142:VoiceEnvelope.h ****                 break;
 143:VoiceEnvelope.h ****             case ENV_SUSTAIN:
 144:VoiceEnvelope.h ****                 phase = 0;
 145:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 146:VoiceEnvelope.h ****                 break;
 147:VoiceEnvelope.h ****             default:
 148:VoiceEnvelope.h ****                 break;
 149:VoiceEnvelope.h ****         }
 150:VoiceEnvelope.h ****     }
 151:VoiceEnvelope.h **** 
 152:VoiceEnvelope.h ****     float Process() {
 153:VoiceEnvelope.h ****         float ph;
 154:VoiceEnvelope.h ****         switch (current_state) {
 155:VoiceEnvelope.h ****             case ENV_IDLE:
 156:VoiceEnvelope.h ****                 current_value = 0.0f;
 157:VoiceEnvelope.h ****                 break;
 158:VoiceEnvelope.h **** 
 159:VoiceEnvelope.h ****             case ENV_ATTACK:
 160:VoiceEnvelope.h ****                 ph = static_cast<float>(phase) * attack_coefficient;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 9


 161:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 162:VoiceEnvelope.h ****                 if (phase >= attack_time) {
 163:VoiceEnvelope.h ****                     current_state = (mode == MODE_AR) ? ENV_DECAY : ENV_SUSTAIN;
 164:VoiceEnvelope.h ****                     phase = 0;
 165:VoiceEnvelope.h ****                 } else {
 166:VoiceEnvelope.h ****                     phase++;
 167:VoiceEnvelope.h ****                 }
 168:VoiceEnvelope.h ****                 break;
 169:VoiceEnvelope.h **** 
 170:VoiceEnvelope.h ****             case ENV_SUSTAIN:
 171:VoiceEnvelope.h ****                 current_value = 1.0f;
 172:VoiceEnvelope.h ****                 break;
 173:VoiceEnvelope.h **** 
 174:VoiceEnvelope.h ****             case ENV_DECAY:
 175:VoiceEnvelope.h ****                 // Use current_value as starting point for decay
 176:VoiceEnvelope.h ****                 // This preserves the correct level from attack phase
 177:VoiceEnvelope.h ****                 ph = static_cast<float>(phase) * decay_coefficient;
 178:VoiceEnvelope.h ****                 if (phase == 0) {
 179:VoiceEnvelope.h ****                     // On first frame, use current value
 180:VoiceEnvelope.h ****                     decay_start_level = current_value;
 181:VoiceEnvelope.h ****                 }
 182:VoiceEnvelope.h ****                 current_value = decay_start_level * (1.0f - ph) / (1.0f + release_curve_coefficient
 183:VoiceEnvelope.h ****                 
 184:VoiceEnvelope.h ****                 if (phase >= decay_time) {
 185:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 186:VoiceEnvelope.h ****                     phase = 0;
 187:VoiceEnvelope.h ****                 } else {
 188:VoiceEnvelope.h ****                     phase++;
 189:VoiceEnvelope.h ****                 }
 190:VoiceEnvelope.h ****                 break;
 191:VoiceEnvelope.h **** 
 192:VoiceEnvelope.h ****             case ENV_RESET:
 193:VoiceEnvelope.h ****                 current_value = reset_target - static_cast<float>(phase) * reset_coefficient;
 194:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 195:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 196:VoiceEnvelope.h ****                     phase = 0;
 197:VoiceEnvelope.h ****                 } else {
 198:VoiceEnvelope.h ****                     phase++;
 199:VoiceEnvelope.h ****                 }
 200:VoiceEnvelope.h ****                 break;
 201:VoiceEnvelope.h ****         }
 202:VoiceEnvelope.h ****         return std::min(std::max(current_value, 0.0f), 1.0f);
 203:VoiceEnvelope.h ****     }
 204:VoiceEnvelope.h **** 
 205:VoiceEnvelope.h ****     void Reset() {
 206:VoiceEnvelope.h ****         if (current_state == ENV_IDLE) return;
 207:VoiceEnvelope.h ****         current_state = ENV_RESET;
 208:VoiceEnvelope.h ****         reset_target = current_value;
 209:VoiceEnvelope.h ****         phase = 0;
 210:VoiceEnvelope.h ****     }
 211:VoiceEnvelope.h **** 
 212:VoiceEnvelope.h ****     bool IsActive() const {
 213:VoiceEnvelope.h ****         return current_state != ENV_IDLE;
 214:VoiceEnvelope.h ****     }
 215:VoiceEnvelope.h **** 
 216:VoiceEnvelope.h **** private:
 217:VoiceEnvelope.h ****     float CalculateAttackAmplitude(float ph) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 10


 218:VoiceEnvelope.h ****         return ph / (1.0f + attack_curve_coefficient * (1.0f - ph));
 219:VoiceEnvelope.h ****     }
 220:VoiceEnvelope.h **** 
 221:VoiceEnvelope.h ****     float CalculateDecayAmplitude(float ph) {
 222:VoiceEnvelope.h ****         return (1.0f - ph) / (1.0f + release_curve_coefficient * ph);
 223:VoiceEnvelope.h ****     }
 224:VoiceEnvelope.h **** 
 225:VoiceEnvelope.h ****     size_t CalculateAttackPhase(float amp) {
 226:VoiceEnvelope.h ****         return static_cast<size_t>(roundf(attack_time * amp * (1.0f + attack_curve_coefficient) / (
 266              		.loc 1 226 69 is_stmt 0 view .LVU75
 267 0012 B7EE007A 		vmov.f32	s14, #1.0e+0
 268              	.LBE143:
 269              	.LBE142:
 127:VoiceEnvelope.h ****                 phase = CalculateAttackPhase(current_value);
 270              		.loc 1 127 45 view .LVU76
 271 0016 D0ED015A 		vldr.32	s11, [r0, #4]
 272              	.LBB147:
 273              	.LBB144:
 274              		.loc 1 226 71 view .LVU77
 275 001a 90ED026A 		vldr.32	s12, [r0, #8]
 276              	.LBE144:
 277              	.LBE147:
 126:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 278              		.loc 1 126 31 view .LVU78
 279 001e 0123     		movs	r3, #1
 280              	.LBB148:
 281              	.LBB145:
 282              		.loc 1 226 55 view .LVU79
 283 0020 D0ED0D7A 		vldr.32	s15, [r0, #52]	@ int
 284              		.loc 1 226 69 view .LVU80
 285 0024 76EE076A 		vadd.f32	s13, s12, s14
 286              	.LBE145:
 287              	.LBE148:
 126:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 288              		.loc 1 126 31 view .LVU81
 289 0028 0370     		strb	r3, [r0]
 127:VoiceEnvelope.h ****                 phase = CalculateAttackPhase(current_value);
 290              		.loc 1 127 17 is_stmt 1 view .LVU82
 291              	.LVL10:
 292              	.LBB149:
 293              	.LBI142:
 225:VoiceEnvelope.h ****         return static_cast<size_t>(roundf(attack_time * amp * (1.0f + attack_curve_coefficient) / (
 294              		.loc 1 225 12 view .LVU83
 295              	.LBB146:
 296              		.loc 1 226 9 view .LVU84
 297              		.loc 1 226 105 is_stmt 0 view .LVU85
 298 002a A5EE867A 		vfma.f32	s14, s11, s12
 299              		.loc 1 226 55 view .LVU86
 300 002e F8EE677A 		vcvt.f32.u32	s15, s15
 301 0032 67EEA57A 		vmul.f32	s15, s15, s11
 302              		.loc 1 226 61 view .LVU87
 303 0036 67EEA67A 		vmul.f32	s15, s15, s13
 304              		.loc 1 226 105 view .LVU88
 305 003a F0EE476A 		vmov.f32	s13, s14
 306              		.loc 1 226 42 view .LVU89
 307 003e 87EEA67A 		vdiv.f32	s14, s15, s13
 308 0042 F8FE477A 		vrinta.f32	s15, s14
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 11


 309              	.LVL11:
 310              		.loc 1 226 139 view .LVU90
 311 0046 FCEEE77A 		vcvt.u32.f32	s15, s15
 312 004a C0ED0F7A 		vstr.32	s15, [r0, #60]	@ int
 313              	.LBE146:
 314              	.LBE149:
 128:VoiceEnvelope.h ****             default:
 315              		.loc 1 128 17 is_stmt 1 view .LVU91
 316              	.LVL12:
 128:VoiceEnvelope.h ****             default:
 317              		.loc 1 128 17 is_stmt 0 view .LVU92
 318              	.LBE141:
 319              	.LBE140:
 132:VoiceEnvelope.h **** 
 320              		.loc 1 132 5 view .LVU93
 321 004e 7047     		bx	lr
 322              		.cfi_endproc
 323              	.LFE5040:
 325              		.section	.text._ZN13VoiceEnvelope7ReleaseEv,"axG",%progbits,_ZN13VoiceEnvelope7ReleaseEv,comdat
 326              		.align	1
 327              		.weak	_ZN13VoiceEnvelope7ReleaseEv
 328              		.syntax unified
 329              		.thumb
 330              		.thumb_func
 332              	_ZN13VoiceEnvelope7ReleaseEv:
 333              	.LVL13:
 334              	.LFB5041:
 134:VoiceEnvelope.h ****         switch (current_state) {
 335              		.loc 1 134 10 is_stmt 1 view -0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339              		@ link register save eliminated.
 135:VoiceEnvelope.h ****             case ENV_ATTACK:
 340              		.loc 1 135 9 view .LVU95
 135:VoiceEnvelope.h ****             case ENV_ATTACK:
 341              		.loc 1 135 17 is_stmt 0 view .LVU96
 342 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 135:VoiceEnvelope.h ****             case ENV_ATTACK:
 343              		.loc 1 135 9 view .LVU97
 344 0002 012B     		cmp	r3, #1
 345 0004 02D0     		beq	.L21
 346 0006 022B     		cmp	r3, #2
 347 0008 14D0     		beq	.L22
 348 000a 7047     		bx	lr
 349              	.L21:
 350              	.LVL14:
 351              	.LBB154:
 352              	.LBI154:
 134:VoiceEnvelope.h ****         switch (current_state) {
 353              		.loc 1 134 10 is_stmt 1 view .LVU98
 354              	.LBB155:
 136:VoiceEnvelope.h ****                 // Preserve the attack curve character when transitioning to release
 355              		.loc 1 136 13 view .LVU99
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 356              		.loc 1 139 17 view .LVU100
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 12


 357              		.loc 1 139 58 is_stmt 0 view .LVU101
 358 000c D0ED0F7A 		vldr.32	s15, [r0, #60]	@ int
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 359              		.loc 1 139 57 view .LVU102
 360 0010 90ED0B7A 		vldr.32	s14, [r0, #44]
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 361              		.loc 1 139 58 view .LVU103
 362 0014 F8EE677A 		vcvt.f32.u32	s15, s15
 363              	.LBB156:
 364              	.LBB157:
 218:VoiceEnvelope.h ****     }
 365              		.loc 1 218 27 view .LVU104
 366 0018 90ED026A 		vldr.32	s12, [r0, #8]
 367              	.LBE157:
 368              	.LBE156:
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 369              		.loc 1 139 57 view .LVU105
 370 001c 67EE877A 		vmul.f32	s15, s15, s14
 371              	.LVL15:
 372              	.LBB159:
 373              	.LBI156:
 217:VoiceEnvelope.h ****         return ph / (1.0f + attack_curve_coefficient * (1.0f - ph));
 374              		.loc 1 217 11 is_stmt 1 view .LVU106
 375              	.LBB158:
 218:VoiceEnvelope.h ****     }
 376              		.loc 1 218 9 view .LVU107
 218:VoiceEnvelope.h ****     }
 377              		.loc 1 218 62 is_stmt 0 view .LVU108
 378 0020 B7EE007A 		vmov.f32	s14, #1.0e+0
 379 0024 77EE676A 		vsub.f32	s13, s14, s15
 218:VoiceEnvelope.h ****     }
 380              		.loc 1 218 27 view .LVU109
 381 0028 A6EE267A 		vfma.f32	s14, s12, s13
 382              	.LVL16:
 218:VoiceEnvelope.h ****     }
 383              		.loc 1 218 67 view .LVU110
 384 002c C7EE876A 		vdiv.f32	s13, s15, s14
 385              	.LBE158:
 386              	.LBE159:
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 387              		.loc 1 139 31 view .LVU111
 388 0030 C0ED016A 		vstr.32	s13, [r0, #4]
 140:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 389              		.loc 1 140 17 is_stmt 1 view .LVU112
 390              	.LVL17:
 391              	.L22:
 140:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 392              		.loc 1 140 17 is_stmt 0 view .LVU113
 393              	.LBE155:
 394              	.LBE154:
 143:VoiceEnvelope.h ****                 phase = 0;
 395              		.loc 1 143 13 is_stmt 1 view .LVU114
 144:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 396              		.loc 1 144 17 view .LVU115
 144:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 397              		.loc 1 144 23 is_stmt 0 view .LVU116
 398 0034 0023     		movs	r3, #0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 13


 399 0036 C363     		str	r3, [r0, #60]
 145:VoiceEnvelope.h ****                 break;
 400              		.loc 1 145 17 is_stmt 1 view .LVU117
 145:VoiceEnvelope.h ****                 break;
 401              		.loc 1 145 31 is_stmt 0 view .LVU118
 402 0038 0323     		movs	r3, #3
 403 003a 0370     		strb	r3, [r0]
 146:VoiceEnvelope.h ****             default:
 404              		.loc 1 146 17 is_stmt 1 view .LVU119
 150:VoiceEnvelope.h **** 
 405              		.loc 1 150 5 is_stmt 0 view .LVU120
 406 003c 7047     		bx	lr
 407              		.cfi_endproc
 408              	.LFE5041:
 410              		.section	.text._ZN13VoiceEnvelope7ProcessEv,"axG",%progbits,_ZN13VoiceEnvelope7ProcessEv,comdat
 411              		.align	1
 412              		.weak	_ZN13VoiceEnvelope7ProcessEv
 413              		.syntax unified
 414              		.thumb
 415              		.thumb_func
 417              	_ZN13VoiceEnvelope7ProcessEv:
 418              	.LVL18:
 419              	.LFB5042:
 152:VoiceEnvelope.h ****         float ph;
 420              		.loc 1 152 11 is_stmt 1 view -0
 421              		.cfi_startproc
 422              		@ args = 0, pretend = 0, frame = 8
 423              		@ frame_needed = 0, uses_anonymous_args = 0
 424              		@ link register save eliminated.
 153:VoiceEnvelope.h ****         switch (current_state) {
 425              		.loc 1 153 9 view .LVU122
 154:VoiceEnvelope.h ****             case ENV_IDLE:
 426              		.loc 1 154 9 view .LVU123
 427 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 428 0002 F7EE007A 		vmov.f32	s15, #1.0e+0
 152:VoiceEnvelope.h ****         float ph;
 429              		.loc 1 152 11 is_stmt 0 view .LVU124
 430 0006 82B0     		sub	sp, sp, #8
 431              		.cfi_def_cfa_offset 8
 432 0008 0022     		movs	r2, #0
 154:VoiceEnvelope.h ****             case ENV_IDLE:
 433              		.loc 1 154 9 view .LVU125
 434 000a 042B     		cmp	r3, #4
 435 000c 05D8     		bhi	.L25
 436 000e DFE803F0 		tbb	[pc, r3]
 437              	.L27:
 438 0012 03       		.byte	(.L31-.L27)/2
 439 0013 1C       		.byte	(.L30-.L27)/2
 440 0014 3D       		.byte	(.L29-.L27)/2
 441 0015 40       		.byte	(.L28-.L27)/2
 442 0016 62       		.byte	(.L26-.L27)/2
 443 0017 00       		.p2align 1
 444              	.L31:
 155:VoiceEnvelope.h ****                 current_value = 0.0f;
 445              		.loc 1 155 13 is_stmt 1 view .LVU126
 156:VoiceEnvelope.h ****                 break;
 446              		.loc 1 156 17 view .LVU127
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 14


 156:VoiceEnvelope.h ****                 break;
 447              		.loc 1 156 31 is_stmt 0 view .LVU128
 448 0018 4260     		str	r2, [r0, #4]	@ float
 157:VoiceEnvelope.h **** 
 449              		.loc 1 157 17 is_stmt 1 view .LVU129
 450              	.L25:
 202:VoiceEnvelope.h ****     }
 451              		.loc 1 202 9 view .LVU130
 452              	.LBB166:
 453              	.LBB167:
 454              		.file 2 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h"
   1:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
   3:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** //
   5:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // any later version.
  10:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  11:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  16:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  20:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  25:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** /*
  26:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  27:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  30:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  38:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  39:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  42:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 15


  47:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  */
  50:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  51:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  */
  55:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  56:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  59:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  73:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** # include <type_traits>
  74:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  75:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus > 201703L
  76:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** # include <compare>
  77:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  78:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  79:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** {
  81:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  83:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /*
  84:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    * A constexpr wrapper for __builtin_memcmp.
  85:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    * @param __num The number of elements of type _Tp (not bytes).
  86:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    */
  87:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Up>
  88:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
  89:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline int
  90:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
  91:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
  92:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  93:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
  94:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  95:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
  96:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
  97:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
  98:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  for(; __num > 0; ++__first1, ++__first2, --__num)
  99:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    if (*__first1 != *__first2)
 100:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      return *__first1 < *__first2 ? -1 : 1;
 101:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return 0;
 102:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 103:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       else
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 16


 104:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 105:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 106:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 107:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 108:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 109:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
 110:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
 111:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
 112:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _BoolType>
 113:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap
 114:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 115:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 116:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static void
 117:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 119:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    _ValueType1;
 121:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
 122:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  *__a = *__b;
 123:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  *__b = __tmp;
 124:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 125:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 126:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 127:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<>
 128:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap<true>
 129:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 130:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 131:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static void
 132:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 133:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 134:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  swap(*__a, *__b);
 135:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 136:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 137:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif // C++03
 138:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 139:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 140:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 141:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 142:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 143:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 144:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   Nothing.
 145:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 146:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 147:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  iterators themselves.
 148:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 149:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 150:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 151:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline void
 152:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 153:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 154:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 155:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 156:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 157:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 158:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 159:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 160:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 17


 161:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 162:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType1;
 163:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 164:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType2;
 165:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 166:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 167:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType2>)
 168:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 169:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType1>)
 170:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 171:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 172:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType1;
 173:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 174:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType2;
 175:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 176:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 177:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 178:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 179:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #else
 180:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 181:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // 187. iter_swap underspecified
 182:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       swap(*__a, *__b);
 183:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 184:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 185:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 186:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 187:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 188:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 189:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 190:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 191:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 192:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 193:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 194:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 195:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 196:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  The ranges must not overlap.
 197:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 198:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 199:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 200:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _ForwardIterator2
 201:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 202:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 203:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 204:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 205:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 206:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 207:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 208:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 209:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 210:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 211:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 212:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 213:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __first2;
 214:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 215:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 216:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 217:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 18


 218:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 219:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 220:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 221:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 222:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 223:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 224:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 225:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 226:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 227:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 228:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 229:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 230:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 231:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 232:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 233:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 234:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 235:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (__b < __a)
 236:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 237:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 238:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 239:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 240:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 241:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 242:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 243:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 244:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 245:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 246:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 247:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 248:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 249:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 250:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 251:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 252:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 253:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 254:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 255:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 256:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 257:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 258:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 259:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (__a < __b)
 455              		.loc 2 259 7 is_stmt 0 view .LVU131
 456 001a 90ED017A 		vldr.32	s14, [r0, #4]
 457              	.LBE167:
 458              	.LBE166:
 202:VoiceEnvelope.h ****     }
 459              		.loc 1 202 49 view .LVU132
 460 001e 0092     		str	r2, [sp]	@ float
 461              	.LVL19:
 462              	.LBB171:
 463              	.LBI166:
 254:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 464              		.loc 2 254 5 is_stmt 1 view .LVU133
 465              	.LBB168:
 466              		.loc 2 259 7 is_stmt 0 view .LVU134
 467 0020 B5EEC07A 		vcmpe.f32	s14, #0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 19


 468              	.LBE168:
 469              	.LBE171:
 202:VoiceEnvelope.h ****     }
 470              		.loc 1 202 56 view .LVU135
 471 0024 CDED017A 		vstr.32	s15, [sp, #4]
 472              	.LBB172:
 473              	.LBB169:
 474              		.loc 2 259 7 view .LVU136
 475 0028 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 476              	.LBE169:
 477              	.LBE172:
 202:VoiceEnvelope.h ****     }
 478              		.loc 1 202 34 view .LVU137
 479 002c 54BF     		ite	pl
 480 002e 0430     		addpl	r0, r0, #4
 481              	.LVL20:
 482              	.LBB173:
 483              	.LBB170:
 260:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 484              		.loc 2 260 9 view .LVU138
 485 0030 6846     		movmi	r0, sp
 486              	.LVL21:
 487              		.loc 2 260 9 view .LVU139
 488              	.LBE170:
 489              	.LBE173:
 490              	.LBB174:
 491              	.LBI174:
 230:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 492              		.loc 2 230 5 is_stmt 1 view .LVU140
 493              	.LBB175:
 235:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 494              		.loc 2 235 7 is_stmt 0 view .LVU141
 495 0032 90ED007A 		vldr.32	s14, [r0]
 496 0036 B4EEE77A 		vcmpe.f32	s14, s15
 497 003a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 236:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 498              		.loc 2 236 9 view .LVU142
 499 003e C8BF     		it	gt
 500 0040 01A8     		addgt	r0, sp, #4
 501              	.LVL22:
 236:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 502              		.loc 2 236 9 view .LVU143
 503              	.LBE175:
 504              	.LBE174:
 203:VoiceEnvelope.h **** 
 505              		.loc 1 203 5 view .LVU144
 506 0042 90ED000A 		vldr.32	s0, [r0]
 507 0046 02B0     		add	sp, sp, #8
 508              		.cfi_remember_state
 509              		.cfi_def_cfa_offset 0
 510              		@ sp needed
 511 0048 7047     		bx	lr
 512              	.LVL23:
 513              	.L30:
 514              		.cfi_restore_state
 159:VoiceEnvelope.h ****                 ph = static_cast<float>(phase) * attack_coefficient;
 515              		.loc 1 159 13 is_stmt 1 view .LVU145
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 20


 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 516              		.loc 1 160 17 view .LVU146
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 517              		.loc 1 160 41 is_stmt 0 view .LVU147
 518 004a C36B     		ldr	r3, [r0, #60]
 519              	.LBB176:
 520              	.LBB177:
 218:VoiceEnvelope.h ****     }
 521              		.loc 1 218 27 view .LVU148
 522 004c B0EE676A 		vmov.f32	s12, s15
 523              	.LBE177:
 524              	.LBE176:
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 525              		.loc 1 160 20 view .LVU149
 526 0050 D0ED0B6A 		vldr.32	s13, [r0, #44]
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 527              		.loc 1 160 22 view .LVU150
 528 0054 07EE103A 		vmov	s14, r3	@ int
 529              	.LBB180:
 530              	.LBB178:
 218:VoiceEnvelope.h ****     }
 531              		.loc 1 218 27 view .LVU151
 532 0058 D0ED025A 		vldr.32	s11, [r0, #8]
 533              	.LBE178:
 534              	.LBE180:
 162:VoiceEnvelope.h ****                     current_state = (mode == MODE_AR) ? ENV_DECAY : ENV_SUSTAIN;
 535              		.loc 1 162 17 view .LVU152
 536 005c 416B     		ldr	r1, [r0, #52]
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 537              		.loc 1 160 22 view .LVU153
 538 005e B8EE477A 		vcvt.f32.u32	s14, s14
 162:VoiceEnvelope.h ****                     current_state = (mode == MODE_AR) ? ENV_DECAY : ENV_SUSTAIN;
 539              		.loc 1 162 17 view .LVU154
 540 0062 8B42     		cmp	r3, r1
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 541              		.loc 1 160 20 view .LVU155
 542 0064 27EE267A 		vmul.f32	s14, s14, s13
 543              	.LVL24:
 161:VoiceEnvelope.h ****                 if (phase >= attack_time) {
 544              		.loc 1 161 17 is_stmt 1 view .LVU156
 545              	.LBB181:
 546              	.LBI176:
 217:VoiceEnvelope.h ****         return ph / (1.0f + attack_curve_coefficient * (1.0f - ph));
 547              		.loc 1 217 11 view .LVU157
 548              	.LBB179:
 218:VoiceEnvelope.h ****     }
 549              		.loc 1 218 9 view .LVU158
 218:VoiceEnvelope.h ****     }
 550              		.loc 1 218 62 is_stmt 0 view .LVU159
 551 0068 77EEC76A 		vsub.f32	s13, s15, s14
 218:VoiceEnvelope.h ****     }
 552              		.loc 1 218 27 view .LVU160
 553 006c A5EEA66A 		vfma.f32	s12, s11, s13
 554              	.LVL25:
 218:VoiceEnvelope.h ****     }
 555              		.loc 1 218 67 view .LVU161
 556 0070 C7EE066A 		vdiv.f32	s13, s14, s12
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 21


 557              	.LBE179:
 558              	.LBE181:
 161:VoiceEnvelope.h ****                 if (phase >= attack_time) {
 559              		.loc 1 161 31 view .LVU162
 560 0074 C0ED016A 		vstr.32	s13, [r0, #4]
 162:VoiceEnvelope.h ****                     current_state = (mode == MODE_AR) ? ENV_DECAY : ENV_SUSTAIN;
 561              		.loc 1 162 17 is_stmt 1 view .LVU163
 562 0078 41D3     		bcc	.L44
 163:VoiceEnvelope.h ****                     phase = 0;
 563              		.loc 1 163 21 view .LVU164
 163:VoiceEnvelope.h ****                     phase = 0;
 564              		.loc 1 163 55 is_stmt 0 view .LVU165
 565 007a 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 566 007c 002B     		cmp	r3, #0
 567 007e 0CBF     		ite	eq
 568 0080 0323     		moveq	r3, #3
 569 0082 0223     		movne	r3, #2
 163:VoiceEnvelope.h ****                     phase = 0;
 570              		.loc 1 163 35 view .LVU166
 571 0084 0370     		strb	r3, [r0]
 164:VoiceEnvelope.h ****                 } else {
 572              		.loc 1 164 21 is_stmt 1 view .LVU167
 164:VoiceEnvelope.h ****                 } else {
 573              		.loc 1 164 27 is_stmt 0 view .LVU168
 574 0086 0023     		movs	r3, #0
 575              	.LVL26:
 576              	.L43:
 198:VoiceEnvelope.h ****                 }
 577              		.loc 1 198 26 view .LVU169
 578 0088 C363     		str	r3, [r0, #60]
 579 008a C6E7     		b	.L25
 580              	.L29:
 170:VoiceEnvelope.h ****                 current_value = 1.0f;
 581              		.loc 1 170 13 is_stmt 1 view .LVU170
 171:VoiceEnvelope.h ****                 break;
 582              		.loc 1 171 17 view .LVU171
 171:VoiceEnvelope.h ****                 break;
 583              		.loc 1 171 31 is_stmt 0 view .LVU172
 584 008c C0ED017A 		vstr.32	s15, [r0, #4]
 172:VoiceEnvelope.h **** 
 585              		.loc 1 172 17 is_stmt 1 view .LVU173
 586 0090 C3E7     		b	.L25
 587              	.L28:
 174:VoiceEnvelope.h ****                 // Use current_value as starting point for decay
 588              		.loc 1 174 13 view .LVU174
 177:VoiceEnvelope.h ****                 if (phase == 0) {
 589              		.loc 1 177 17 view .LVU175
 177:VoiceEnvelope.h ****                 if (phase == 0) {
 590              		.loc 1 177 41 is_stmt 0 view .LVU176
 591 0092 C36B     		ldr	r3, [r0, #60]
 177:VoiceEnvelope.h ****                 if (phase == 0) {
 592              		.loc 1 177 20 view .LVU177
 593 0094 D0ED0C6A 		vldr.32	s13, [r0, #48]
 177:VoiceEnvelope.h ****                 if (phase == 0) {
 594              		.loc 1 177 22 view .LVU178
 595 0098 07EE103A 		vmov	s14, r3	@ int
 596 009c B8EE477A 		vcvt.f32.u32	s14, s14
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 22


 177:VoiceEnvelope.h ****                 if (phase == 0) {
 597              		.loc 1 177 20 view .LVU179
 598 00a0 27EE267A 		vmul.f32	s14, s14, s13
 599              	.LVL27:
 178:VoiceEnvelope.h ****                     // On first frame, use current value
 600              		.loc 1 178 17 is_stmt 1 view .LVU180
 601 00a4 0BB9     		cbnz	r3, .L34
 180:VoiceEnvelope.h ****                 }
 602              		.loc 1 180 21 view .LVU181
 180:VoiceEnvelope.h ****                 }
 603              		.loc 1 180 39 is_stmt 0 view .LVU182
 604 00a6 4168     		ldr	r1, [r0, #4]	@ float
 605 00a8 0164     		str	r1, [r0, #64]	@ float
 606              	.L34:
 182:VoiceEnvelope.h ****                 
 607              		.loc 1 182 17 is_stmt 1 view .LVU183
 182:VoiceEnvelope.h ****                 
 608              		.loc 1 182 59 is_stmt 0 view .LVU184
 609 00aa 77EEC76A 		vsub.f32	s13, s15, s14
 182:VoiceEnvelope.h ****                 
 610              		.loc 1 182 51 view .LVU185
 611 00ae 90ED106A 		vldr.32	s12, [r0, #64]
 182:VoiceEnvelope.h ****                 
 612              		.loc 1 182 73 view .LVU186
 613 00b2 D0ED035A 		vldr.32	s11, [r0, #12]
 184:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 614              		.loc 1 184 17 view .LVU187
 615 00b6 816B     		ldr	r1, [r0, #56]
 182:VoiceEnvelope.h ****                 
 616              		.loc 1 182 51 view .LVU188
 617 00b8 66EE866A 		vmul.f32	s13, s13, s12
 182:VoiceEnvelope.h ****                 
 618              		.loc 1 182 73 view .LVU189
 619 00bc B0EE676A 		vmov.f32	s12, s15
 184:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 620              		.loc 1 184 17 view .LVU190
 621 00c0 8B42     		cmp	r3, r1
 182:VoiceEnvelope.h ****                 
 622              		.loc 1 182 73 view .LVU191
 623 00c2 A5EE876A 		vfma.f32	s12, s11, s14
 182:VoiceEnvelope.h ****                 
 624              		.loc 1 182 65 view .LVU192
 625 00c6 86EE867A 		vdiv.f32	s14, s13, s12
 626              	.LVL28:
 182:VoiceEnvelope.h ****                 
 627              		.loc 1 182 31 view .LVU193
 628 00ca 80ED017A 		vstr.32	s14, [r0, #4]
 184:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 629              		.loc 1 184 17 is_stmt 1 view .LVU194
 630 00ce 16D3     		bcc	.L44
 631              	.LVL29:
 632              	.L36:
 185:VoiceEnvelope.h ****                     phase = 0;
 633              		.loc 1 185 21 view .LVU195
 185:VoiceEnvelope.h ****                     phase = 0;
 634              		.loc 1 185 35 is_stmt 0 view .LVU196
 635 00d0 0023     		movs	r3, #0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 23


 636 00d2 0370     		strb	r3, [r0]
 186:VoiceEnvelope.h ****                 } else {
 637              		.loc 1 186 21 is_stmt 1 view .LVU197
 638 00d4 D8E7     		b	.L43
 639              	.L26:
 192:VoiceEnvelope.h ****                 current_value = reset_target - static_cast<float>(phase) * reset_coefficient;
 640              		.loc 1 192 13 view .LVU198
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 641              		.loc 1 193 17 view .LVU199
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 642              		.loc 1 193 67 is_stmt 0 view .LVU200
 643 00d6 C36B     		ldr	r3, [r0, #60]
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 644              		.loc 1 193 46 view .LVU201
 645 00d8 90ED096A 		vldr.32	s12, [r0, #36]
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 646              		.loc 1 193 48 view .LVU202
 647 00dc 07EE103A 		vmov	s14, r3	@ int
 648 00e0 F8EE476A 		vcvt.f32.u32	s13, s14
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 649              		.loc 1 193 46 view .LVU203
 650 00e4 90ED0A7A 		vldr.32	s14, [r0, #40]
 651 00e8 A6EEC67A 		vfms.f32	s14, s13, s12
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 652              		.loc 1 193 31 view .LVU204
 653 00ec 80ED017A 		vstr.32	s14, [r0, #4]
 194:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 654              		.loc 1 194 17 is_stmt 1 view .LVU205
 655 00f0 90ED087A 		vldr.32	s14, [r0, #32]
 656 00f4 F4EEC76A 		vcmpe.f32	s13, s14
 657 00f8 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 658 00fc E8DA     		bge	.L36
 659              	.L44:
 198:VoiceEnvelope.h ****                 }
 660              		.loc 1 198 21 view .LVU206
 198:VoiceEnvelope.h ****                 }
 661              		.loc 1 198 26 is_stmt 0 view .LVU207
 662 00fe 0133     		adds	r3, r3, #1
 663 0100 C2E7     		b	.L43
 664              		.cfi_endproc
 665              	.LFE5042:
 667              		.section	.text._ZN13VoiceEnvelope5ResetEv,"axG",%progbits,_ZN13VoiceEnvelope5ResetEv,comdat
 668              		.align	1
 669              		.weak	_ZN13VoiceEnvelope5ResetEv
 670              		.syntax unified
 671              		.thumb
 672              		.thumb_func
 674              	_ZN13VoiceEnvelope5ResetEv:
 675              	.LVL30:
 676              	.LFB5043:
 205:VoiceEnvelope.h ****         if (current_state == ENV_IDLE) return;
 677              		.loc 1 205 10 is_stmt 1 view -0
 678              		.cfi_startproc
 679              		@ args = 0, pretend = 0, frame = 0
 680              		@ frame_needed = 0, uses_anonymous_args = 0
 681              		@ link register save eliminated.
 206:VoiceEnvelope.h ****         current_state = ENV_RESET;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 24


 682              		.loc 1 206 9 view .LVU209
 683 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 684 0002 2BB1     		cbz	r3, .L45
 685              	.LVL31:
 686              	.LBB184:
 687              	.LBI184:
 205:VoiceEnvelope.h ****         if (current_state == ENV_IDLE) return;
 688              		.loc 1 205 10 view .LVU210
 689              	.LBB185:
 207:VoiceEnvelope.h ****         reset_target = current_value;
 690              		.loc 1 207 9 view .LVU211
 207:VoiceEnvelope.h ****         reset_target = current_value;
 691              		.loc 1 207 23 is_stmt 0 view .LVU212
 692 0004 0423     		movs	r3, #4
 693 0006 0370     		strb	r3, [r0]
 208:VoiceEnvelope.h ****         phase = 0;
 694              		.loc 1 208 9 is_stmt 1 view .LVU213
 208:VoiceEnvelope.h ****         phase = 0;
 695              		.loc 1 208 22 is_stmt 0 view .LVU214
 696 0008 4368     		ldr	r3, [r0, #4]	@ float
 697 000a 8362     		str	r3, [r0, #40]	@ float
 209:VoiceEnvelope.h ****     }
 698              		.loc 1 209 9 is_stmt 1 view .LVU215
 209:VoiceEnvelope.h ****     }
 699              		.loc 1 209 15 is_stmt 0 view .LVU216
 700 000c 0023     		movs	r3, #0
 701 000e C363     		str	r3, [r0, #60]
 702              	.LVL32:
 703              	.L45:
 209:VoiceEnvelope.h ****     }
 704              		.loc 1 209 15 view .LVU217
 705              	.LBE185:
 706              	.LBE184:
 210:VoiceEnvelope.h **** 
 707              		.loc 1 210 5 view .LVU218
 708 0010 7047     		bx	lr
 709              		.cfi_endproc
 710              	.LFE5043:
 712              		.section	.text._Z13ProcessVoicesv,"ax",%progbits
 713              		.align	1
 714              		.global	_Z13ProcessVoicesv
 715              		.syntax unified
 716              		.thumb
 717              		.thumb_func
 719              	_Z13ProcessVoicesv:
 720              	.LFB5057:
 721              		.file 3 "AudioProcessor.cpp"
   1:AudioProcessor.cpp **** #include "Thaumazein.h"
   2:AudioProcessor.cpp **** #include "mpr121_daisy.h"
   3:AudioProcessor.cpp **** #include <cmath>
   4:AudioProcessor.cpp **** #include <algorithm>
   5:AudioProcessor.cpp **** 
   6:AudioProcessor.cpp **** const float MASTER_VOLUME = 0.7f; // Master output level scaler
   7:AudioProcessor.cpp **** 
   8:AudioProcessor.cpp **** void ProcessControls();
   9:AudioProcessor.cpp **** void ReadKnobValues();
  10:AudioProcessor.cpp **** int  DetermineEngineSettings();
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 25


  11:AudioProcessor.cpp **** void HandleTouchInput(int engineIndex, bool poly_mode, int effective_num_voices);
  12:AudioProcessor.cpp **** void ConfigureDelaySettings();
  13:AudioProcessor.cpp **** void PrepareVoiceParameters(int engineIndex, bool poly_mode, int max_voice_idx);
  14:AudioProcessor.cpp **** void ProcessVoiceEnvelopes(bool poly_mode);
  15:AudioProcessor.cpp **** void ProcessAudioOutput(AudioHandle::InterleavingOutputBuffer out, size_t size, float dry_level);
  16:AudioProcessor.cpp **** void UpdatePerformanceMonitors(size_t size, AudioHandle::InterleavingOutputBuffer out);
  17:AudioProcessor.cpp **** void ResetVoiceStates();
  18:AudioProcessor.cpp **** 
  19:AudioProcessor.cpp **** // Global variables for data sharing between decomposed functions
  20:AudioProcessor.cpp **** float pitch_val, harm_knob_val, timbre_knob_val, morph_knob_val;
  21:AudioProcessor.cpp **** float delay_time_val, delay_mix_feedback_val, delay_mix_val, delay_feedback_val;
  22:AudioProcessor.cpp **** float env_attack_val, env_release_val;
  23:AudioProcessor.cpp **** float attack_time, release_time;
  24:AudioProcessor.cpp **** float mix_buffer_out[BLOCK_SIZE];
  25:AudioProcessor.cpp **** float mix_buffer_aux[BLOCK_SIZE];
  26:AudioProcessor.cpp **** 
  27:AudioProcessor.cpp **** extern VoiceEnvelope voice_envelopes[NUM_VOICES];
  28:AudioProcessor.cpp **** extern float voice_values[NUM_VOICES];
  29:AudioProcessor.cpp **** extern bool voice_active[NUM_VOICES];
  30:AudioProcessor.cpp **** extern Mpr121 touch_sensor;
  31:AudioProcessor.cpp **** extern AnalogControl env_attack_knob;
  32:AudioProcessor.cpp **** 
  33:AudioProcessor.cpp **** // Define the CpuLoadMeter instance
  34:AudioProcessor.cpp **** CpuLoadMeter cpu_meter;
  35:AudioProcessor.cpp **** 
  36:AudioProcessor.cpp **** volatile int current_engine_index = 0; // Global engine index controlled by touch pads
  37:AudioProcessor.cpp **** 
  38:AudioProcessor.cpp **** volatile float adc_raw_values[12] = {0.0f}; // Initialize the array for 12 ADCs
  39:AudioProcessor.cpp **** // ADD: flag to indicate engine change so we can retrigger voices even when notes are held
  40:AudioProcessor.cpp **** volatile bool engine_changed_flag = false;
  41:AudioProcessor.cpp **** // 0 = inactive, 2 = send trigger low this block, 1 = send trigger high next block
  42:AudioProcessor.cpp **** volatile int engine_retrigger_phase = 0;
  43:AudioProcessor.cpp **** 
  44:AudioProcessor.cpp **** void ProcessVoices() {
 722              		.loc 3 44 22 is_stmt 1 view -0
 723              		.cfi_startproc
 724              		@ args = 0, pretend = 0, frame = 0
 725              		@ frame_needed = 0, uses_anonymous_args = 0
  45:AudioProcessor.cpp ****     // Apply cubic response for better control at short settings
  46:AudioProcessor.cpp ****     // For punchier attack, use a stronger non-linear curve at lower attack values
  47:AudioProcessor.cpp ****     float attack_raw = env_attack_val;
 726              		.loc 3 47 5 view .LVU220
  44:AudioProcessor.cpp ****     // Apply cubic response for better control at short settings
 727              		.loc 3 44 22 is_stmt 0 view .LVU221
 728 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 729              		.cfi_def_cfa_offset 24
 730              		.cfi_offset 3, -24
 731              		.cfi_offset 4, -20
 732              		.cfi_offset 5, -16
 733              		.cfi_offset 6, -12
 734              		.cfi_offset 7, -8
 735              		.cfi_offset 14, -4
 736              		.loc 3 47 11 view .LVU222
 737 0002 1F4B     		ldr	r3, .L60
 738              	.LBB186:
  48:AudioProcessor.cpp ****     float attack_value;
  49:AudioProcessor.cpp ****     if (attack_raw < 0.2f) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 26


  50:AudioProcessor.cpp ****         // More exaggerated curve for very short attacks (extra punchy)
  51:AudioProcessor.cpp ****         attack_value = attack_raw * (attack_raw * 0.5f);
  52:AudioProcessor.cpp ****     } else {
  53:AudioProcessor.cpp ****         // Regular cubic response for longer attacks
  54:AudioProcessor.cpp ****         attack_value = attack_raw * attack_raw * attack_raw;
  55:AudioProcessor.cpp ****     }
  56:AudioProcessor.cpp ****     
  57:AudioProcessor.cpp ****     // Normal cubic curve for release
  58:AudioProcessor.cpp ****     float release_value = env_release_val * env_release_val * env_release_val;
  59:AudioProcessor.cpp ****     
  60:AudioProcessor.cpp ****     for(int i = 0; i < NUM_VOICES; i++) {
 739              		.loc 3 60 13 view .LVU223
 740 0004 0025     		movs	r5, #0
 741              	.LBE186:
  49:AudioProcessor.cpp ****         // More exaggerated curve for very short attacks (extra punchy)
 742              		.loc 3 49 5 view .LVU224
 743 0006 DFED1F7A 		vldr.32	s15, .L60+4
  47:AudioProcessor.cpp ****     float attack_value;
 744              		.loc 3 47 11 view .LVU225
 745 000a 93ED000A 		vldr.32	s0, [r3]
 746              	.LVL33:
  48:AudioProcessor.cpp ****     float attack_value;
 747              		.loc 3 48 5 is_stmt 1 view .LVU226
  49:AudioProcessor.cpp ****         // More exaggerated curve for very short attacks (extra punchy)
 748              		.loc 3 49 5 view .LVU227
  58:AudioProcessor.cpp ****     
 749              		.loc 3 58 43 is_stmt 0 view .LVU228
 750 000e 1E4B     		ldr	r3, .L60+8
  49:AudioProcessor.cpp ****         // More exaggerated curve for very short attacks (extra punchy)
 751              		.loc 3 49 5 view .LVU229
 752 0010 B4EEE70A 		vcmpe.f32	s0, s15
 753 0014 1D4C     		ldr	r4, .L60+12
  58:AudioProcessor.cpp ****     
 754              		.loc 3 58 43 view .LVU230
 755 0016 D3ED007A 		vldr.32	s15, [r3]
 756 001a 1D4E     		ldr	r6, .L60+16
  49:AudioProcessor.cpp ****         // More exaggerated curve for very short attacks (extra punchy)
 757              		.loc 3 49 5 view .LVU231
 758 001c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  51:AudioProcessor.cpp ****     } else {
 759              		.loc 3 51 9 is_stmt 1 view .LVU232
 760 0020 1C4F     		ldr	r7, .L60+20
  44:AudioProcessor.cpp ****     // Apply cubic response for better control at short settings
 761              		.loc 3 44 22 is_stmt 0 view .LVU233
 762 0022 2DED028B 		vpush.64	{d8}
 763              		.cfi_def_cfa_offset 32
 764              		.cfi_offset 80, -32
 765              		.cfi_offset 81, -28
  51:AudioProcessor.cpp ****     } else {
 766              		.loc 3 51 49 view .LVU234
 767 0026 4CBF     		ite	mi
 768 0028 B6EE008A 		vmovmi.f32	s16, #5.0e-1
  54:AudioProcessor.cpp ****     }
 769              		.loc 3 54 35 view .LVU235
 770 002c 20EE008A 		vmulpl.f32	s16, s0, s0
  58:AudioProcessor.cpp ****     
 771              		.loc 3 58 43 view .LVU236
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 27


 772 0030 67EEA78A 		vmul.f32	s17, s15, s15
  51:AudioProcessor.cpp ****     } else {
 773              		.loc 3 51 49 view .LVU237
 774 0034 48BF     		it	mi
 775 0036 20EE088A 		vmulmi.f32	s16, s0, s16
  54:AudioProcessor.cpp ****     }
 776              		.loc 3 54 9 is_stmt 1 view .LVU238
  58:AudioProcessor.cpp ****     
 777              		.loc 3 58 11 is_stmt 0 view .LVU239
 778 003a 68EEA78A 		vmul.f32	s17, s17, s15
  54:AudioProcessor.cpp ****     }
 779              		.loc 3 54 22 view .LVU240
 780 003e 28EE008A 		vmul.f32	s16, s16, s0
 781              	.LVL34:
  58:AudioProcessor.cpp ****     
 782              		.loc 3 58 5 is_stmt 1 view .LVU241
 783              		.loc 3 60 5 view .LVU242
 784              	.LBB189:
 785              		.loc 3 60 22 view .LVU243
 786              	.L55:
  61:AudioProcessor.cpp ****         // Update envelope parameters
  62:AudioProcessor.cpp ****         voice_envelopes[i].SetAttackTime(attack_value);
 787              		.loc 3 62 9 view .LVU244
 788              		.loc 3 62 41 is_stmt 0 view .LVU245
 789 0042 B0EE480A 		vmov.f32	s0, s16
 790 0046 2046     		mov	r0, r4
 791 0048 FFF7FEFF 		bl	_ZN13VoiceEnvelope13SetAttackTimeEf
 792              	.LVL35:
  63:AudioProcessor.cpp ****         voice_envelopes[i].SetReleaseTime(release_value);
 793              		.loc 3 63 9 is_stmt 1 view .LVU246
 794              		.loc 3 63 42 is_stmt 0 view .LVU247
 795 004c B0EE680A 		vmov.f32	s0, s17
 796 0050 2046     		mov	r0, r4
 797 0052 FFF7FEFF 		bl	_ZN13VoiceEnvelope14SetReleaseTimeEf
 798              	.LVL36:
  64:AudioProcessor.cpp ****         
  65:AudioProcessor.cpp ****         // Process envelope
  66:AudioProcessor.cpp ****         voice_values[i] = voice_envelopes[i].Process();
 799              		.loc 3 66 9 is_stmt 1 view .LVU248
 800              		.loc 3 66 53 is_stmt 0 view .LVU249
 801 0056 2046     		mov	r0, r4
 802 0058 FFF7FEFF 		bl	_ZN13VoiceEnvelope7ProcessEv
 803              	.LVL37:
  67:AudioProcessor.cpp ****         
  68:AudioProcessor.cpp ****         // Update voice activity based on envelope state
  69:AudioProcessor.cpp ****         if(!voice_active[i] && !voice_envelopes[i].IsActive()) {
 804              		.loc 3 69 27 view .LVU250
 805 005c 17F8013B 		ldrb	r3, [r7], #1	@ zero_extendqisi2
  66:AudioProcessor.cpp ****         
 806              		.loc 3 66 25 view .LVU251
 807 0060 A6EC010A 		vstmia.32	r6!, {s0}
 808              		.loc 3 69 9 is_stmt 1 view .LVU252
 809              		.loc 3 69 29 is_stmt 0 view .LVU253
 810 0064 23B9     		cbnz	r3, .L54
 811              	.LVL38:
 812              	.LBB187:
 813              	.LBI187:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 28


 212:VoiceEnvelope.h ****         return current_state != ENV_IDLE;
 814              		.loc 1 212 10 is_stmt 1 discriminator 1 view .LVU254
 815              	.LBB188:
 213:VoiceEnvelope.h ****     }
 816              		.loc 1 213 9 discriminator 1 view .LVU255
 213:VoiceEnvelope.h ****     }
 817              		.loc 1 213 9 is_stmt 0 discriminator 1 view .LVU256
 818              	.LBE188:
 819              	.LBE187:
 820              		.loc 3 69 29 discriminator 1 view .LVU257
 821 0066 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 822 0068 13B9     		cbnz	r3, .L54
  70:AudioProcessor.cpp ****             voice_values[i] = 0.0f; // Ensure silence when inactive
 823              		.loc 3 70 13 is_stmt 1 view .LVU258
 824              		.loc 3 70 29 is_stmt 0 view .LVU259
 825 006a 0023     		movs	r3, #0
 826 006c 46F8043C 		str	r3, [r6, #-4]	@ float
 827              	.L54:
  60:AudioProcessor.cpp ****         // Update envelope parameters
 828              		.loc 3 60 5 is_stmt 1 discriminator 2 view .LVU260
 829 0070 0135     		adds	r5, r5, #1
 830              	.LVL39:
  60:AudioProcessor.cpp ****         // Update envelope parameters
 831              		.loc 3 60 22 discriminator 2 view .LVU261
 832 0072 4434     		adds	r4, r4, #68
 833 0074 042D     		cmp	r5, #4
 834 0076 E4D1     		bne	.L55
 835              	.LBE189:
  71:AudioProcessor.cpp ****         }
  72:AudioProcessor.cpp ****     }
  73:AudioProcessor.cpp **** }
 836              		.loc 3 73 1 is_stmt 0 view .LVU262
 837 0078 BDEC028B 		vldm	sp!, {d8}
 838              		.cfi_restore 80
 839              		.cfi_restore 81
 840              		.cfi_def_cfa_offset 24
 841              	.LVL40:
 842              		.loc 3 73 1 view .LVU263
 843 007c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 844              	.LVL41:
 845              	.L61:
 846              		.loc 3 73 1 view .LVU264
 847 007e 00BF     		.align	2
 848              	.L60:
 849 0080 00000000 		.word	.LANCHOR0
 850 0084 CDCC4C3E 		.word	1045220557
 851 0088 00000000 		.word	.LANCHOR1
 852 008c 00000000 		.word	voice_envelopes
 853 0090 00000000 		.word	voice_values
 854 0094 00000000 		.word	voice_active
 855              		.cfi_endproc
 856              	.LFE5057:
 858              		.section	.text._Z12ProcessVoiceif,"ax",%progbits
 859              		.align	1
 860              		.global	_Z12ProcessVoiceif
 861              		.syntax unified
 862              		.thumb
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 29


 863              		.thumb_func
 865              	_Z12ProcessVoiceif:
 866              	.LVL42:
 867              	.LFB5058:
  74:AudioProcessor.cpp **** 
  75:AudioProcessor.cpp **** void ProcessVoice(int voice_idx, float envelope_value) {
 868              		.loc 3 75 56 is_stmt 1 view -0
 869              		.cfi_startproc
 870              		@ args = 0, pretend = 0, frame = 0
 871              		@ frame_needed = 0, uses_anonymous_args = 0
 872              		@ link register save eliminated.
  76:AudioProcessor.cpp ****     // Store voice value for LED display
  77:AudioProcessor.cpp ****     voice_values[voice_idx] = envelope_value;
 873              		.loc 3 77 5 view .LVU266
 874              		.loc 3 77 29 is_stmt 0 view .LVU267
 875 0000 024B     		ldr	r3, .L63
 876 0002 03EB8000 		add	r0, r3, r0, lsl #2
 877              	.LVL43:
 878              		.loc 3 77 29 view .LVU268
 879 0006 80ED000A 		vstr.32	s0, [r0]
  78:AudioProcessor.cpp **** }
 880              		.loc 3 78 1 view .LVU269
 881 000a 7047     		bx	lr
 882              	.L64:
 883              		.align	2
 884              	.L63:
 885 000c 00000000 		.word	voice_values
 886              		.cfi_endproc
 887              	.LFE5058:
 889              		.section	.text._Z15ProcessControlsv,"ax",%progbits
 890              		.align	1
 891              		.global	_Z15ProcessControlsv
 892              		.syntax unified
 893              		.thumb
 894              		.thumb_func
 896              	_Z15ProcessControlsv:
 897              	.LFB5060:
  79:AudioProcessor.cpp **** 
  80:AudioProcessor.cpp **** void AudioCallback(AudioHandle::InterleavingInputBuffer in,
  81:AudioProcessor.cpp ****                  AudioHandle::InterleavingOutputBuffer out,
  82:AudioProcessor.cpp ****                  size_t size) {
  83:AudioProcessor.cpp ****     cpu_meter.OnBlockStart(); // Mark the beginning of the audio block
  84:AudioProcessor.cpp ****     
  85:AudioProcessor.cpp ****     // Process controls & read values
  86:AudioProcessor.cpp ****     ProcessControls();
  87:AudioProcessor.cpp ****     ReadKnobValues();
  88:AudioProcessor.cpp ****     
  89:AudioProcessor.cpp ****     // Get touch control value from the shared volatile variable
  90:AudioProcessor.cpp ****     float touch_control = touch_cv_value; 
  91:AudioProcessor.cpp ****     
  92:AudioProcessor.cpp ****     // --- Apply Touch Control Modulation (Averaging knob + touch) ---
  93:AudioProcessor.cpp ****     // Apply touch modulation to selected parameters by averaging knob and touch values
  94:AudioProcessor.cpp ****     float intensity_factor = 0.5f; // 0.0 = knob only, 1.0 = touch only, 0.5 = average
  95:AudioProcessor.cpp **** 
  96:AudioProcessor.cpp ****     // harm_knob_val    = harm_knob_val    * (1.0f - intensity_factor) + touch_control * intensity_
  97:AudioProcessor.cpp ****     morph_knob_val   = morph_knob_val   * (1.0f - intensity_factor) + touch_control * intensity_fac
  98:AudioProcessor.cpp ****     // decay_knob_val   = decay_knob_val   * (1.0f - intensity_factor) + touch_control * intensity_
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 30


  99:AudioProcessor.cpp ****     delay_feedback_val = delay_feedback_val * (1.0f - intensity_factor) + touch_control * intensity
 100:AudioProcessor.cpp ****     // delay_time_val   = delay_time_val   * (1.0f - intensity_factor) + touch_control * intensity_
 101:AudioProcessor.cpp **** 
 102:AudioProcessor.cpp ****     // --- End Touch Control Modulation ---
 103:AudioProcessor.cpp **** 
 104:AudioProcessor.cpp ****     // Add panic button check (long press but not bootloader long)
 105:AudioProcessor.cpp ****     static uint32_t button_press_time = 0;
 106:AudioProcessor.cpp ****     if (button.RisingEdge()) {
 107:AudioProcessor.cpp ****         button_press_time = System::GetNow();
 108:AudioProcessor.cpp ****     }
 109:AudioProcessor.cpp ****     else if (button.Pressed() && button_press_time > 0) {
 110:AudioProcessor.cpp ****         uint32_t held_time = System::GetNow() - button_press_time;
 111:AudioProcessor.cpp ****         // If button held more than 1 second but less than bootloader time (3s)
 112:AudioProcessor.cpp ****         if (held_time > 1000 && held_time < 3000) {
 113:AudioProcessor.cpp ****             ResetVoiceStates();
 114:AudioProcessor.cpp ****             button_press_time = 0; // Reset so it only triggers once
 115:AudioProcessor.cpp ****         }
 116:AudioProcessor.cpp ****     }
 117:AudioProcessor.cpp ****     
 118:AudioProcessor.cpp ****     // Determine engine settings
 119:AudioProcessor.cpp ****     int engineIndex = DetermineEngineSettings();
 120:AudioProcessor.cpp ****     bool poly_mode = (engineIndex <= 3); // First 4 engines are poly
 121:AudioProcessor.cpp ****     int effective_num_voices = poly_mode ? NUM_VOICES : 1;
 122:AudioProcessor.cpp ****     
 123:AudioProcessor.cpp ****     // Process touch input for note handling
 124:AudioProcessor.cpp ****     HandleTouchInput(engineIndex, poly_mode, effective_num_voices);
 125:AudioProcessor.cpp ****     
 126:AudioProcessor.cpp ****     // Configure delay settings
 127:AudioProcessor.cpp ****     ConfigureDelaySettings();
 128:AudioProcessor.cpp ****     
 129:AudioProcessor.cpp ****     // Process voice parameters and render audio
 130:AudioProcessor.cpp ****     // Apply the touch control to modify a parameter (for example, morph)
 131:AudioProcessor.cpp ****     // morph_knob_val = morph_knob_val * 0.6f + touch_control * 0.4f; // OLD METHOD - REMOVED
 132:AudioProcessor.cpp **** 
 133:AudioProcessor.cpp ****     // Alternate options for applying touch control to different parameters:
 134:AudioProcessor.cpp ****     // Uncomment one of these to change which parameter the touch control affects
 135:AudioProcessor.cpp ****     // harm_knob_val = harm_knob_val * 0.6f + touch_control * 0.4f;   // Touch controls harmonics
 136:AudioProcessor.cpp ****     // decay_knob_val = decay_knob_val * 0.6f + touch_control * 0.4f; // Touch controls decay
 137:AudioProcessor.cpp ****     // delay_feedback_val = delay_feedback_val * 0.6f + touch_control * 0.4f; // Touch controls del
 138:AudioProcessor.cpp ****     // delay_time_val = delay_time_val * 0.6f + touch_control * 0.4f; // Touch controls delay time
 139:AudioProcessor.cpp **** 
 140:AudioProcessor.cpp ****     PrepareVoiceParameters(engineIndex, poly_mode, effective_num_voices - 1);
 141:AudioProcessor.cpp ****     
 142:AudioProcessor.cpp ****     // Process envelopes and mix audio
 143:AudioProcessor.cpp ****     ProcessVoiceEnvelopes(poly_mode);
 144:AudioProcessor.cpp ****     
 145:AudioProcessor.cpp ****     // Mix dry/wet and apply delay
 146:AudioProcessor.cpp ****     float dry_level = 1.0f - delay_mix_val;
 147:AudioProcessor.cpp ****     ProcessAudioOutput(out, size, dry_level);
 148:AudioProcessor.cpp ****     
 149:AudioProcessor.cpp ****     // Mark the end of the audio block
 150:AudioProcessor.cpp ****     cpu_meter.OnBlockEnd();
 151:AudioProcessor.cpp ****     
 152:AudioProcessor.cpp ****     // Update other performance monitors (like output level)
 153:AudioProcessor.cpp ****     UpdatePerformanceMonitors(size, out);
 154:AudioProcessor.cpp **** }
 155:AudioProcessor.cpp **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 31


 156:AudioProcessor.cpp **** void ProcessControls() {
 898              		.loc 3 156 24 is_stmt 1 view -0
 899              		.cfi_startproc
 900              		@ args = 0, pretend = 0, frame = 0
 901              		@ frame_needed = 0, uses_anonymous_args = 0
 157:AudioProcessor.cpp ****     button.Debounce();
 902              		.loc 3 157 5 view .LVU271
 156:AudioProcessor.cpp ****     button.Debounce();
 903              		.loc 3 156 24 is_stmt 0 view .LVU272
 904 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 905              		.cfi_def_cfa_offset 24
 906              		.cfi_offset 3, -24
 907              		.cfi_offset 4, -20
 908              		.cfi_offset 5, -16
 909              		.cfi_offset 6, -12
 910              		.cfi_offset 7, -8
 911              		.cfi_offset 14, -4
 912              		.loc 3 157 20 view .LVU273
 913 0002 5B48     		ldr	r0, .L86
 914              	.LBB190:
 158:AudioProcessor.cpp ****     delay_time_knob.Process();        // ADC 0
 159:AudioProcessor.cpp ****     delay_mix_feedback_knob.Process(); // ADC 1
 160:AudioProcessor.cpp ****     env_release_knob.Process();       // ADC 2
 161:AudioProcessor.cpp ****     env_attack_knob.Process();        // ADC 3
 162:AudioProcessor.cpp ****     timbre_knob.Process();            // ADC 4
 163:AudioProcessor.cpp ****     harmonics_knob.Process();         // ADC 5
 164:AudioProcessor.cpp ****     morph_knob.Process();             // ADC 6
 165:AudioProcessor.cpp ****     pitch_knob.Process();             // ADC 7
 166:AudioProcessor.cpp ****     // Process the remaining ADC-based controls
 167:AudioProcessor.cpp ****     arp_pad.Process();            // Process ADC 8: Arpeggiator Toggle Pad
 168:AudioProcessor.cpp ****     model_prev_pad.Process();     // Process ADC 9: Model Select Previous Pad
 169:AudioProcessor.cpp ****     model_next_pad.Process();     // Process ADC 10: Model Select Next Pad
 170:AudioProcessor.cpp ****     mod_wheel.Process();          // Process ADC 11: Mod Wheel Control
 171:AudioProcessor.cpp **** 
 172:AudioProcessor.cpp ****     // Read raw values for ALL 12 ADC channels
 173:AudioProcessor.cpp ****     for(int i = 0; i < 12; ++i) {
 915              		.loc 3 173 13 view .LVU274
 916 0004 0024     		movs	r4, #0
 917              	.LBE190:
 157:AudioProcessor.cpp ****     delay_time_knob.Process();        // ADC 0
 918              		.loc 3 157 20 view .LVU275
 919 0006 FFF7FEFF 		bl	_ZN5daisy6Switch8DebounceEv
 920              	.LVL44:
 158:AudioProcessor.cpp ****     delay_time_knob.Process();        // ADC 0
 921              		.loc 3 158 5 is_stmt 1 view .LVU276
 158:AudioProcessor.cpp ****     delay_time_knob.Process();        // ADC 0
 922              		.loc 3 158 28 is_stmt 0 view .LVU277
 923 000a 5A48     		ldr	r0, .L86+4
 924 000c FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 925              	.LVL45:
 159:AudioProcessor.cpp ****     env_release_knob.Process();       // ADC 2
 926              		.loc 3 159 5 is_stmt 1 view .LVU278
 159:AudioProcessor.cpp ****     env_release_knob.Process();       // ADC 2
 927              		.loc 3 159 36 is_stmt 0 view .LVU279
 928 0010 5948     		ldr	r0, .L86+8
 929 0012 FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 930              	.LVL46:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 32


 160:AudioProcessor.cpp ****     env_attack_knob.Process();        // ADC 3
 931              		.loc 3 160 5 is_stmt 1 view .LVU280
 160:AudioProcessor.cpp ****     env_attack_knob.Process();        // ADC 3
 932              		.loc 3 160 29 is_stmt 0 view .LVU281
 933 0016 5948     		ldr	r0, .L86+12
 934 0018 FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 935              	.LVL47:
 161:AudioProcessor.cpp ****     timbre_knob.Process();            // ADC 4
 936              		.loc 3 161 5 is_stmt 1 view .LVU282
 161:AudioProcessor.cpp ****     timbre_knob.Process();            // ADC 4
 937              		.loc 3 161 28 is_stmt 0 view .LVU283
 938 001c 5848     		ldr	r0, .L86+16
 939 001e FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 940              	.LVL48:
 162:AudioProcessor.cpp ****     harmonics_knob.Process();         // ADC 5
 941              		.loc 3 162 5 is_stmt 1 view .LVU284
 162:AudioProcessor.cpp ****     harmonics_knob.Process();         // ADC 5
 942              		.loc 3 162 24 is_stmt 0 view .LVU285
 943 0022 5848     		ldr	r0, .L86+20
 944 0024 FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 945              	.LVL49:
 163:AudioProcessor.cpp ****     morph_knob.Process();             // ADC 6
 946              		.loc 3 163 5 is_stmt 1 view .LVU286
 163:AudioProcessor.cpp ****     morph_knob.Process();             // ADC 6
 947              		.loc 3 163 27 is_stmt 0 view .LVU287
 948 0028 5748     		ldr	r0, .L86+24
 949 002a FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 950              	.LVL50:
 164:AudioProcessor.cpp ****     pitch_knob.Process();             // ADC 7
 951              		.loc 3 164 5 is_stmt 1 view .LVU288
 164:AudioProcessor.cpp ****     pitch_knob.Process();             // ADC 7
 952              		.loc 3 164 23 is_stmt 0 view .LVU289
 953 002e 5748     		ldr	r0, .L86+28
 954 0030 FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 955              	.LVL51:
 165:AudioProcessor.cpp ****     // Process the remaining ADC-based controls
 956              		.loc 3 165 5 is_stmt 1 view .LVU290
 165:AudioProcessor.cpp ****     // Process the remaining ADC-based controls
 957              		.loc 3 165 23 is_stmt 0 view .LVU291
 958 0034 5648     		ldr	r0, .L86+32
 959 0036 FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 960              	.LVL52:
 167:AudioProcessor.cpp ****     model_prev_pad.Process();     // Process ADC 9: Model Select Previous Pad
 961              		.loc 3 167 5 is_stmt 1 view .LVU292
 167:AudioProcessor.cpp ****     model_prev_pad.Process();     // Process ADC 9: Model Select Previous Pad
 962              		.loc 3 167 20 is_stmt 0 view .LVU293
 963 003a 5648     		ldr	r0, .L86+36
 964 003c FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 965              	.LVL53:
 168:AudioProcessor.cpp ****     model_next_pad.Process();     // Process ADC 10: Model Select Next Pad
 966              		.loc 3 168 5 is_stmt 1 view .LVU294
 168:AudioProcessor.cpp ****     model_next_pad.Process();     // Process ADC 10: Model Select Next Pad
 967              		.loc 3 168 27 is_stmt 0 view .LVU295
 968 0040 5548     		ldr	r0, .L86+40
 969 0042 FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 970              	.LVL54:
 169:AudioProcessor.cpp ****     mod_wheel.Process();          // Process ADC 11: Mod Wheel Control
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 33


 971              		.loc 3 169 5 is_stmt 1 view .LVU296
 169:AudioProcessor.cpp ****     mod_wheel.Process();          // Process ADC 11: Mod Wheel Control
 972              		.loc 3 169 27 is_stmt 0 view .LVU297
 973 0046 5548     		ldr	r0, .L86+44
 974 0048 FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 975              	.LVL55:
 170:AudioProcessor.cpp **** 
 976              		.loc 3 170 5 is_stmt 1 view .LVU298
 170:AudioProcessor.cpp **** 
 977              		.loc 3 170 22 is_stmt 0 view .LVU299
 978 004c 5448     		ldr	r0, .L86+48
 979 004e FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 980              	.LVL56:
 981              		.loc 3 173 5 is_stmt 1 view .LVU300
 982              	.LBB191:
 983              		.loc 3 173 22 view .LVU301
 984              	.L66:
 174:AudioProcessor.cpp ****         adc_raw_values[i] = hw.adc.GetFloat(i);
 985              		.loc 3 174 9 discriminator 2 view .LVU302
 986              		.loc 3 174 44 is_stmt 0 discriminator 2 view .LVU303
 987 0052 E1B2     		uxtb	r1, r4
 988 0054 5348     		ldr	r0, .L86+52
 989 0056 FFF7FEFF 		bl	_ZNK5daisy9AdcHandle8GetFloatEh
 990              	.LVL57:
 991              		.loc 3 174 27 discriminator 2 view .LVU304
 992 005a 534B     		ldr	r3, .L86+56
 993 005c 03EB8403 		add	r3, r3, r4, lsl #2
 173:AudioProcessor.cpp ****         adc_raw_values[i] = hw.adc.GetFloat(i);
 994              		.loc 3 173 5 discriminator 2 view .LVU305
 995 0060 0134     		adds	r4, r4, #1
 996              	.LVL58:
 173:AudioProcessor.cpp ****         adc_raw_values[i] = hw.adc.GetFloat(i);
 997              		.loc 3 173 22 discriminator 2 view .LVU306
 998 0062 0C2C     		cmp	r4, #12
 999              		.loc 3 174 27 discriminator 2 view .LVU307
 1000 0064 83ED000A 		vstr.32	s0, [r3]
 173:AudioProcessor.cpp ****         adc_raw_values[i] = hw.adc.GetFloat(i);
 1001              		.loc 3 173 5 is_stmt 1 discriminator 2 view .LVU308
 1002              	.LVL59:
 173:AudioProcessor.cpp ****         adc_raw_values[i] = hw.adc.GetFloat(i);
 1003              		.loc 3 173 22 discriminator 2 view .LVU309
 1004 0068 F3D1     		bne	.L66
 1005              	.LBE191:
 175:AudioProcessor.cpp ****     }
 176:AudioProcessor.cpp **** 
 177:AudioProcessor.cpp ****     // --- Model selection logic via touch pads ---
 178:AudioProcessor.cpp ****     const float threshold = 0.5f;
 1006              		.loc 3 178 5 view .LVU310
 1007              	.LVL60:
 179:AudioProcessor.cpp ****     static bool prev_model_prev = false;
 1008              		.loc 3 179 5 view .LVU311
 180:AudioProcessor.cpp ****     static bool prev_model_next = false;
 1009              		.loc 3 180 5 view .LVU312
 181:AudioProcessor.cpp ****     bool current_model_prev = model_prev_pad.Value() > threshold;
 1010              		.loc 3 181 5 view .LVU313
 1011              	.LBB192:
 1012              	.LBI192:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 34


 1013              		.file 4 "lib/libdaisy/src/hid/ctrl.h"
   1:lib/libdaisy/src/hid/ctrl.h **** #pragma once
   2:lib/libdaisy/src/hid/ctrl.h **** #ifndef DSY_KNOB_H
   3:lib/libdaisy/src/hid/ctrl.h **** #define DSY_KNOB_H /**< & */
   4:lib/libdaisy/src/hid/ctrl.h **** #include <stdint.h>
   5:lib/libdaisy/src/hid/ctrl.h **** 
   6:lib/libdaisy/src/hid/ctrl.h **** #ifdef __cplusplus
   7:lib/libdaisy/src/hid/ctrl.h **** namespace daisy
   8:lib/libdaisy/src/hid/ctrl.h **** {
   9:lib/libdaisy/src/hid/ctrl.h **** /**
  10:lib/libdaisy/src/hid/ctrl.h ****     @brief Hardware Interface for control inputs \n 
  11:lib/libdaisy/src/hid/ctrl.h ****     Primarily designed for ADC input controls such as \n 
  12:lib/libdaisy/src/hid/ctrl.h ****     potentiometers, and control voltage. \n 
  13:lib/libdaisy/src/hid/ctrl.h ****     @author Stephen Hensley
  14:lib/libdaisy/src/hid/ctrl.h ****     @date November 2019
  15:lib/libdaisy/src/hid/ctrl.h ****     @ingroup controls
  16:lib/libdaisy/src/hid/ctrl.h **** */
  17:lib/libdaisy/src/hid/ctrl.h **** class AnalogControl
  18:lib/libdaisy/src/hid/ctrl.h **** {
  19:lib/libdaisy/src/hid/ctrl.h ****   public:
  20:lib/libdaisy/src/hid/ctrl.h ****     /** Constructor */
  21:lib/libdaisy/src/hid/ctrl.h ****     AnalogControl() {}
  22:lib/libdaisy/src/hid/ctrl.h ****     /** destructor */
  23:lib/libdaisy/src/hid/ctrl.h ****     ~AnalogControl() {}
  24:lib/libdaisy/src/hid/ctrl.h **** 
  25:lib/libdaisy/src/hid/ctrl.h ****     /** 
  26:lib/libdaisy/src/hid/ctrl.h ****     Initializes the control
  27:lib/libdaisy/src/hid/ctrl.h ****     \param *adcptr is a pointer to the raw adc read value -- This can be acquired with dsy_adc_get_
  28:lib/libdaisy/src/hid/ctrl.h ****     \param sr is the samplerate in Hz that the Process function will be called at.
  29:lib/libdaisy/src/hid/ctrl.h ****     \param flip determines whether the input is flipped (i.e. 1.f - input) or not before being proc
  30:lib/libdaisy/src/hid/ctrl.h ****     \param invert determines whether the input is inverted (i.e. -1.f * input) or note before being
  31:lib/libdaisy/src/hid/ctrl.h ****     \param slew_seconds is the slew time in seconds that it takes for the control to change to a ne
  32:lib/libdaisy/src/hid/ctrl.h ****     */
  33:lib/libdaisy/src/hid/ctrl.h ****     void Init(uint16_t *adcptr,
  34:lib/libdaisy/src/hid/ctrl.h ****               float     sr,
  35:lib/libdaisy/src/hid/ctrl.h ****               bool      flip         = false,
  36:lib/libdaisy/src/hid/ctrl.h ****               bool      invert       = false,
  37:lib/libdaisy/src/hid/ctrl.h ****               float     slew_seconds = 0.002f);
  38:lib/libdaisy/src/hid/ctrl.h **** 
  39:lib/libdaisy/src/hid/ctrl.h ****     /** 
  40:lib/libdaisy/src/hid/ctrl.h ****     This Initializes the AnalogControl for a -5V to 5V inverted input
  41:lib/libdaisy/src/hid/ctrl.h ****     All of the Init details are the same otherwise
  42:lib/libdaisy/src/hid/ctrl.h ****     \param *adcptr Pointer to analog digital converter
  43:lib/libdaisy/src/hid/ctrl.h ****     \param sr Audio engine sample rate
  44:lib/libdaisy/src/hid/ctrl.h ****     */
  45:lib/libdaisy/src/hid/ctrl.h ****     void InitBipolarCv(uint16_t *adcptr, float sr);
  46:lib/libdaisy/src/hid/ctrl.h **** 
  47:lib/libdaisy/src/hid/ctrl.h ****     /** 
  48:lib/libdaisy/src/hid/ctrl.h ****     Filters, and transforms a raw ADC read into a normalized range.
  49:lib/libdaisy/src/hid/ctrl.h ****     this should be called at the rate of specified by samplerate at Init time.   
  50:lib/libdaisy/src/hid/ctrl.h ****     Default Initializations will return 0.0 -> 1.0
  51:lib/libdaisy/src/hid/ctrl.h ****     Bi-polar CV inputs will return -1.0 -> 1.0
  52:lib/libdaisy/src/hid/ctrl.h ****     */
  53:lib/libdaisy/src/hid/ctrl.h ****     float Process();
  54:lib/libdaisy/src/hid/ctrl.h **** 
  55:lib/libdaisy/src/hid/ctrl.h ****     /** Returns the current stored value, without reprocessing */
  56:lib/libdaisy/src/hid/ctrl.h ****     inline float Value() const { return val_; }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 35


 1014              		.loc 4 56 18 view .LVU314
 1015              	.LBB193:
 1016              		.loc 4 56 34 view .LVU315
 1017              		.loc 4 56 41 is_stmt 0 view .LVU316
 1018 006a 4B4B     		ldr	r3, .L86+40
 1019              	.LBE193:
 1020              	.LBE192:
 1021              		.loc 3 181 56 view .LVU317
 1022 006c F6EE007A 		vmov.f32	s15, #5.0e-1
 1023 0070 4E48     		ldr	r0, .L86+60
 1024              	.LBB195:
 1025              	.LBB194:
 1026              		.loc 4 56 41 view .LVU318
 1027 0072 D3ED036A 		vldr.32	s13, [r3, #12]
 1028              	.LVL61:
 1029              		.loc 4 56 41 view .LVU319
 1030              	.LBE194:
 1031              	.LBE195:
 1032              	.LBB196:
 1033              	.LBB197:
 1034 0076 494B     		ldr	r3, .L86+44
 1035              	.LBE197:
 1036              	.LBE196:
 1037              		.loc 3 181 56 view .LVU320
 1038 0078 F4EEE76A 		vcmpe.f32	s13, s15
 1039 007c 4C4D     		ldr	r5, .L86+64
 1040              	.LBB200:
 1041              	.LBB198:
 1042              		.loc 4 56 41 view .LVU321
 1043 007e 93ED037A 		vldr.32	s14, [r3, #12]
 1044              	.LBE198:
 1045              	.LBE200:
 182:AudioProcessor.cpp ****     bool current_model_next = model_next_pad.Value() > threshold;
 183:AudioProcessor.cpp **** 
 184:AudioProcessor.cpp ****     // Implement cyclic selection and reverse direction to match physical pad layout
 185:AudioProcessor.cpp ****     // `model_prev_pad` now moves **forward** through the engine list, wrapping at the end.
 186:AudioProcessor.cpp ****     // `model_next_pad` moves **backward**, wrapping at the beginning.
 187:AudioProcessor.cpp ****     const int kNumEngines = MAX_ENGINE_INDEX + 1; // inclusive range 0..MAX_ENGINE_INDEX
 1046              		.loc 3 187 29 view .LVU322
 1047 0082 4C4B     		ldr	r3, .L86+68
 181:AudioProcessor.cpp ****     bool current_model_next = model_next_pad.Value() > threshold;
 1048              		.loc 3 181 56 view .LVU323
 1049 0084 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 182:AudioProcessor.cpp ****     bool current_model_next = model_next_pad.Value() > threshold;
 1050              		.loc 3 182 56 view .LVU324
 1051 0088 B4EEE77A 		vcmpe.f32	s14, s15
 1052              		.loc 3 187 15 view .LVU325
 1053 008c 1B68     		ldr	r3, [r3]
 181:AudioProcessor.cpp ****     bool current_model_next = model_next_pad.Value() > threshold;
 1054              		.loc 3 181 56 view .LVU326
 1055 008e CCBF     		ite	gt
 1056 0090 0126     		movgt	r6, #1
 1057 0092 0026     		movle	r6, #0
 1058              	.LVL62:
 182:AudioProcessor.cpp ****     bool current_model_next = model_next_pad.Value() > threshold;
 1059              		.loc 3 182 5 is_stmt 1 view .LVU327
 1060              	.LBB201:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 36


 1061              	.LBI196:
 1062              		.loc 4 56 18 view .LVU328
 1063              	.LBB199:
 1064              		.loc 4 56 34 view .LVU329
 1065              		.loc 4 56 34 is_stmt 0 view .LVU330
 1066              	.LBE199:
 1067              	.LBE201:
 182:AudioProcessor.cpp ****     bool current_model_next = model_next_pad.Value() > threshold;
 1068              		.loc 3 182 56 view .LVU331
 1069 0094 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1070              		.loc 3 187 15 view .LVU332
 1071 0098 03F10102 		add	r2, r3, #1
 188:AudioProcessor.cpp **** 
 189:AudioProcessor.cpp ****     if(current_model_prev && !prev_model_prev) {
 1072              		.loc 3 189 5 view .LVU333
 1073 009c F4EEE76A 		vcmpe.f32	s13, s15
 182:AudioProcessor.cpp **** 
 1074              		.loc 3 182 56 view .LVU334
 1075 00a0 CCBF     		ite	gt
 1076 00a2 0124     		movgt	r4, #1
 1077              	.LVL63:
 182:AudioProcessor.cpp **** 
 1078              		.loc 3 182 56 view .LVU335
 1079 00a4 0024     		movle	r4, #0
 1080              	.LVL64:
 187:AudioProcessor.cpp **** 
 1081              		.loc 3 187 5 is_stmt 1 view .LVU336
 1082              		.loc 3 189 5 view .LVU337
 1083 00a6 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1084 00aa 0BDD     		ble	.L67
 1085              		.loc 3 189 27 is_stmt 0 discriminator 1 view .LVU338
 1086 00ac 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1087 00ae 4BB9     		cbnz	r3, .L67
 190:AudioProcessor.cpp ****         current_engine_index = (current_engine_index + 1) % kNumEngines;
 1088              		.loc 3 190 9 is_stmt 1 view .LVU339
 1089              		.loc 3 190 33 is_stmt 0 view .LVU340
 1090 00b0 2B68     		ldr	r3, [r5]
 1091              		.loc 3 190 54 view .LVU341
 1092 00b2 0133     		adds	r3, r3, #1
 1093              		.loc 3 190 59 view .LVU342
 1094 00b4 93FBF2F1 		sdiv	r1, r3, r2
 1095 00b8 02FB1133 		mls	r3, r2, r1, r3
 191:AudioProcessor.cpp ****         engine_changed_flag = true;
 1096              		.loc 3 191 29 view .LVU343
 1097 00bc 0121     		movs	r1, #1
 190:AudioProcessor.cpp ****         current_engine_index = (current_engine_index + 1) % kNumEngines;
 1098              		.loc 3 190 30 view .LVU344
 1099 00be 2B60     		str	r3, [r5]
 1100              		.loc 3 191 9 is_stmt 1 view .LVU345
 1101              		.loc 3 191 29 is_stmt 0 view .LVU346
 1102 00c0 3D4B     		ldr	r3, .L86+72
 1103 00c2 1970     		strb	r1, [r3]
 1104              	.L67:
 192:AudioProcessor.cpp ****     }
 193:AudioProcessor.cpp **** 
 194:AudioProcessor.cpp ****     if(current_model_next && !prev_model_next) {
 1105              		.loc 3 194 5 is_stmt 1 view .LVU347
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 37


 1106 00c4 B4EEE77A 		vcmpe.f32	s14, s15
 1107 00c8 3C49     		ldr	r1, .L86+76
 1108 00ca F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1109 00ce 0CDD     		ble	.L69
 1110              		.loc 3 194 27 is_stmt 0 discriminator 1 view .LVU348
 1111 00d0 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 1112 00d2 53B9     		cbnz	r3, .L69
 195:AudioProcessor.cpp ****         current_engine_index = (current_engine_index - 1 + kNumEngines) % kNumEngines;
 1113              		.loc 3 195 9 is_stmt 1 view .LVU349
 1114              		.loc 3 195 33 is_stmt 0 view .LVU350
 1115 00d4 2B68     		ldr	r3, [r5]
 1116              		.loc 3 195 54 view .LVU351
 1117 00d6 013B     		subs	r3, r3, #1
 1118              		.loc 3 195 58 view .LVU352
 1119 00d8 1344     		add	r3, r3, r2
 1120              		.loc 3 195 73 view .LVU353
 1121 00da 93FBF2F7 		sdiv	r7, r3, r2
 1122 00de 02FB1733 		mls	r3, r2, r7, r3
 196:AudioProcessor.cpp ****         engine_changed_flag = true;
 1123              		.loc 3 196 29 view .LVU354
 1124 00e2 0122     		movs	r2, #1
 1125              	.LVL65:
 195:AudioProcessor.cpp ****         current_engine_index = (current_engine_index - 1 + kNumEngines) % kNumEngines;
 1126              		.loc 3 195 30 view .LVU355
 1127 00e4 2B60     		str	r3, [r5]
 1128              		.loc 3 196 9 is_stmt 1 view .LVU356
 1129              		.loc 3 196 29 is_stmt 0 view .LVU357
 1130 00e6 344B     		ldr	r3, .L86+72
 1131 00e8 1A70     		strb	r2, [r3]
 1132              	.L69:
 197:AudioProcessor.cpp ****     }
 198:AudioProcessor.cpp ****     prev_model_prev = current_model_prev;
 1133              		.loc 3 198 5 is_stmt 1 view .LVU358
 1134              		.loc 3 198 21 is_stmt 0 view .LVU359
 1135 00ea 0670     		strb	r6, [r0]
 199:AudioProcessor.cpp ****     prev_model_next = current_model_next;
 1136              		.loc 3 199 5 is_stmt 1 view .LVU360
 1137              	.LBB202:
 200:AudioProcessor.cpp **** 
 201:AudioProcessor.cpp ****     static int prev_engine_for_reset = 0;
 202:AudioProcessor.cpp ****     if(current_engine_index != prev_engine_for_reset) {
 1138              		.loc 3 202 29 is_stmt 0 view .LVU361
 1139 00ec 344E     		ldr	r6, .L86+80
 1140              	.LVL66:
 1141              		.loc 3 202 8 view .LVU362
 1142 00ee 2A68     		ldr	r2, [r5]
 1143              		.loc 3 202 29 view .LVU363
 1144 00f0 3368     		ldr	r3, [r6]
 1145              	.LBE202:
 199:AudioProcessor.cpp ****     prev_model_next = current_model_next;
 1146              		.loc 3 199 21 view .LVU364
 1147 00f2 0C70     		strb	r4, [r1]
 201:AudioProcessor.cpp ****     if(current_engine_index != prev_engine_for_reset) {
 1148              		.loc 3 201 5 is_stmt 1 view .LVU365
 1149              		.loc 3 202 5 view .LVU366
 1150              	.LBB216:
 1151 00f4 9A42     		cmp	r2, r3
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 38


 1152 00f6 17D0     		beq	.L65
 1153              	.LBB203:
 203:AudioProcessor.cpp ****         bool prev_was_poly = (prev_engine_for_reset <= 3);
 1154              		.loc 3 203 9 view .LVU367
 1155              	.LVL67:
 204:AudioProcessor.cpp ****         bool now_poly = (current_engine_index <=3);
 1156              		.loc 3 204 9 view .LVU368
 1157              	.LBB204:
 205:AudioProcessor.cpp ****         if(prev_was_poly != now_poly) {
 1158              		.loc 3 205 9 is_stmt 0 view .LVU369
 1159 00f8 032B     		cmp	r3, #3
 1160              	.LBE204:
 204:AudioProcessor.cpp ****         bool now_poly = (current_engine_index <=3);
 1161              		.loc 3 204 47 view .LVU370
 1162 00fa 2A68     		ldr	r2, [r5]
 1163              	.LVL68:
 1164              		.loc 3 205 9 is_stmt 1 view .LVU371
 1165              	.LBB211:
 1166 00fc CCBF     		ite	gt
 1167 00fe 0020     		movgt	r0, #0
 1168              		.loc 3 205 9 is_stmt 0 view .LVU372
 1169 0100 0120     		movle	r0, #1
 1170 0102 032A     		cmp	r2, #3
 1171 0104 CCBF     		ite	gt
 1172 0106 0021     		movgt	r1, #0
 1173 0108 0121     		movle	r1, #1
 1174 010a 8842     		cmp	r0, r1
 1175 010c 0AD0     		beq	.L73
 1176              	.LBE211:
 1177              	.LBE203:
 1178              	.LBE216:
 206:AudioProcessor.cpp ****             if(prev_was_poly && !now_poly) {
 1179              		.loc 3 206 13 is_stmt 1 view .LVU373
 1180              	.LBB217:
 1181              	.LBB214:
 1182              	.LBB212:
 1183              	.LBB205:
 1184 010e 032B     		cmp	r3, #3
 1185 0110 4FF00001 		mov	r1, #0
 1186 0114 2B4B     		ldr	r3, .L86+84
 1187              	.LVL69:
 1188              		.loc 3 206 13 is_stmt 0 view .LVU374
 1189 0116 01DC     		bgt	.L74
 1190              		.loc 3 206 30 discriminator 1 view .LVU375
 1191 0118 032A     		cmp	r2, #3
 1192 011a 06DC     		bgt	.L75
 1193              	.L74:
 1194              	.LVL70:
 1195              	.LBB206:
 207:AudioProcessor.cpp ****                 // Transitioning from poly to mono while notes may be held.
 208:AudioProcessor.cpp ****                 // Find the first active poly voice and transfer it to voice 0 so sound continues.
 209:AudioProcessor.cpp ****                 int source_voice = -1;
 210:AudioProcessor.cpp ****                 for(int v=0; v<NUM_VOICES; ++v) {
 211:AudioProcessor.cpp ****                     if(voice_active[v]) { source_voice = v; break; }
 212:AudioProcessor.cpp ****                 }
 213:AudioProcessor.cpp **** 
 214:AudioProcessor.cpp ****                 // Clear all voices first
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 39


 215:AudioProcessor.cpp ****                 for(int v=0; v<NUM_VOICES; ++v) {
 216:AudioProcessor.cpp ****                     voice_active[v] = false;
 217:AudioProcessor.cpp ****                 }
 218:AudioProcessor.cpp **** 
 219:AudioProcessor.cpp ****                 if(source_voice != -1) {
 220:AudioProcessor.cpp ****                     voice_active[0] = true;
 221:AudioProcessor.cpp ****                     voice_note[0] = voice_note[source_voice];
 222:AudioProcessor.cpp ****                     // Transfer envelope state to voice 0 so level stays consistent.
 223:AudioProcessor.cpp ****                     voice_envelopes[0] = voice_envelopes[source_voice];
 224:AudioProcessor.cpp ****                     voice_envelopes[source_voice].Reset();
 225:AudioProcessor.cpp ****                 }
 226:AudioProcessor.cpp ****             } else {
 227:AudioProcessor.cpp ****                 // Mono to poly or other transition: simply clear all voices to avoid stuck notes.
 228:AudioProcessor.cpp ****                 for(int v=0; v<NUM_VOICES; ++v) {
 1196              		.loc 3 228 31 is_stmt 1 discriminator 3 view .LVU376
 229:AudioProcessor.cpp ****                     voice_active[v] = false;
 1197              		.loc 3 229 21 discriminator 3 view .LVU377
 1198              		.loc 3 229 37 is_stmt 0 discriminator 3 view .LVU378
 1199 011c 1970     		strb	r1, [r3]
 228:AudioProcessor.cpp ****                     voice_active[v] = false;
 1200              		.loc 3 228 17 is_stmt 1 discriminator 3 view .LVU379
 1201              	.LVL71:
 228:AudioProcessor.cpp ****                     voice_active[v] = false;
 1202              		.loc 3 228 31 discriminator 3 view .LVU380
 1203              		.loc 3 229 21 discriminator 3 view .LVU381
 1204              		.loc 3 229 37 is_stmt 0 discriminator 3 view .LVU382
 1205 011e 5970     		strb	r1, [r3, #1]
 228:AudioProcessor.cpp ****                     voice_active[v] = false;
 1206              		.loc 3 228 17 is_stmt 1 discriminator 3 view .LVU383
 1207              	.LVL72:
 228:AudioProcessor.cpp ****                     voice_active[v] = false;
 1208              		.loc 3 228 31 discriminator 3 view .LVU384
 1209              		.loc 3 229 21 discriminator 3 view .LVU385
 1210              		.loc 3 229 37 is_stmt 0 discriminator 3 view .LVU386
 1211 0120 9970     		strb	r1, [r3, #2]
 228:AudioProcessor.cpp ****                     voice_active[v] = false;
 1212              		.loc 3 228 17 is_stmt 1 discriminator 3 view .LVU387
 1213              	.LVL73:
 228:AudioProcessor.cpp ****                     voice_active[v] = false;
 1214              		.loc 3 228 31 discriminator 3 view .LVU388
 1215              		.loc 3 229 21 discriminator 3 view .LVU389
 1216              		.loc 3 229 37 is_stmt 0 discriminator 3 view .LVU390
 1217 0122 D970     		strb	r1, [r3, #3]
 228:AudioProcessor.cpp ****                     voice_active[v] = false;
 1218              		.loc 3 228 17 is_stmt 1 discriminator 3 view .LVU391
 1219              	.LVL74:
 228:AudioProcessor.cpp ****                     voice_active[v] = false;
 1220              		.loc 3 228 31 discriminator 3 view .LVU392
 1221              	.L73:
 228:AudioProcessor.cpp ****                     voice_active[v] = false;
 1222              		.loc 3 228 31 is_stmt 0 discriminator 3 view .LVU393
 1223              	.LBE206:
 1224              	.LBE205:
 1225              	.LBE212:
 230:AudioProcessor.cpp ****                 }
 231:AudioProcessor.cpp ****             }
 232:AudioProcessor.cpp ****         }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 40


 233:AudioProcessor.cpp ****         prev_engine_for_reset = current_engine_index;
 1226              		.loc 3 233 9 is_stmt 1 view .LVU394
 1227              		.loc 3 233 31 is_stmt 0 view .LVU395
 1228 0124 2B68     		ldr	r3, [r5]
 1229 0126 3360     		str	r3, [r6]
 1230              	.L65:
 1231              		.loc 3 233 31 view .LVU396
 1232              	.LBE214:
 1233              	.LBE217:
 234:AudioProcessor.cpp ****     }
 235:AudioProcessor.cpp **** }
 1234              		.loc 3 235 1 view .LVU397
 1235 0128 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1236              	.LVL75:
 1237              	.L75:
 1238              		.loc 3 235 1 view .LVU398
 1239 012a 1A46     		mov	r2, r3
 1240              	.LVL76:
 1241              	.L77:
 1242              	.LBB218:
 1243              	.LBB215:
 1244              	.LBB213:
 1245              	.LBB210:
 1246              	.LBB207:
 1247              	.LBB208:
 211:AudioProcessor.cpp ****                 }
 1248              		.loc 3 211 21 is_stmt 1 view .LVU399
 211:AudioProcessor.cpp ****                 }
 1249              		.loc 3 211 38 is_stmt 0 view .LVU400
 1250 012c 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 211:AudioProcessor.cpp ****                 }
 1251              		.loc 3 211 21 view .LVU401
 1252 0130 20B9     		cbnz	r0, .L76
 210:AudioProcessor.cpp ****                     if(voice_active[v]) { source_voice = v; break; }
 1253              		.loc 3 210 17 is_stmt 1 discriminator 2 view .LVU402
 1254 0132 0131     		adds	r1, r1, #1
 1255              	.LVL77:
 210:AudioProcessor.cpp ****                     if(voice_active[v]) { source_voice = v; break; }
 1256              		.loc 3 210 31 discriminator 2 view .LVU403
 1257 0134 0429     		cmp	r1, #4
 1258 0136 F9D1     		bne	.L77
 1259              	.LBE208:
 209:AudioProcessor.cpp ****                 for(int v=0; v<NUM_VOICES; ++v) {
 1260              		.loc 3 209 21 is_stmt 0 view .LVU404
 1261 0138 4FF0FF31 		mov	r1, #-1
 1262              	.LVL78:
 1263              	.L76:
 215:AudioProcessor.cpp ****                     voice_active[v] = false;
 1264              		.loc 3 215 17 is_stmt 1 view .LVU405
 1265              	.LBB209:
 215:AudioProcessor.cpp ****                     voice_active[v] = false;
 1266              		.loc 3 215 31 view .LVU406
 216:AudioProcessor.cpp ****                 }
 1267              		.loc 3 216 21 view .LVU407
 216:AudioProcessor.cpp ****                 }
 1268              		.loc 3 216 37 is_stmt 0 view .LVU408
 1269 013c 0022     		movs	r2, #0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 41


 1270 013e 1A70     		strb	r2, [r3]
 215:AudioProcessor.cpp ****                     voice_active[v] = false;
 1271              		.loc 3 215 17 is_stmt 1 view .LVU409
 1272              	.LVL79:
 215:AudioProcessor.cpp ****                     voice_active[v] = false;
 1273              		.loc 3 215 31 view .LVU410
 216:AudioProcessor.cpp ****                 }
 1274              		.loc 3 216 21 view .LVU411
 216:AudioProcessor.cpp ****                 }
 1275              		.loc 3 216 37 is_stmt 0 view .LVU412
 1276 0140 5A70     		strb	r2, [r3, #1]
 215:AudioProcessor.cpp ****                     voice_active[v] = false;
 1277              		.loc 3 215 17 is_stmt 1 view .LVU413
 1278              	.LVL80:
 215:AudioProcessor.cpp ****                     voice_active[v] = false;
 1279              		.loc 3 215 31 view .LVU414
 216:AudioProcessor.cpp ****                 }
 1280              		.loc 3 216 21 view .LVU415
 216:AudioProcessor.cpp ****                 }
 1281              		.loc 3 216 37 is_stmt 0 view .LVU416
 1282 0142 9A70     		strb	r2, [r3, #2]
 215:AudioProcessor.cpp ****                     voice_active[v] = false;
 1283              		.loc 3 215 17 is_stmt 1 view .LVU417
 1284              	.LVL81:
 215:AudioProcessor.cpp ****                     voice_active[v] = false;
 1285              		.loc 3 215 31 view .LVU418
 216:AudioProcessor.cpp ****                 }
 1286              		.loc 3 216 21 view .LVU419
 216:AudioProcessor.cpp ****                 }
 1287              		.loc 3 216 37 is_stmt 0 view .LVU420
 1288 0144 DA70     		strb	r2, [r3, #3]
 215:AudioProcessor.cpp ****                     voice_active[v] = false;
 1289              		.loc 3 215 17 is_stmt 1 view .LVU421
 1290              	.LVL82:
 215:AudioProcessor.cpp ****                     voice_active[v] = false;
 1291              		.loc 3 215 31 view .LVU422
 1292              	.LBE209:
 219:AudioProcessor.cpp ****                     voice_active[0] = true;
 1293              		.loc 3 219 17 view .LVU423
 1294 0146 4A1C     		adds	r2, r1, #1
 1295 0148 ECD0     		beq	.L73
 220:AudioProcessor.cpp ****                     voice_note[0] = voice_note[source_voice];
 1296              		.loc 3 220 21 view .LVU424
 220:AudioProcessor.cpp ****                     voice_note[0] = voice_note[source_voice];
 1297              		.loc 3 220 37 is_stmt 0 view .LVU425
 1298 014a 0122     		movs	r2, #1
 223:AudioProcessor.cpp ****                     voice_envelopes[source_voice].Reset();
 1299              		.loc 3 223 40 view .LVU426
 1300 014c 1E48     		ldr	r0, .L86+88
 220:AudioProcessor.cpp ****                     voice_note[0] = voice_note[source_voice];
 1301              		.loc 3 220 37 view .LVU427
 1302 014e 1A70     		strb	r2, [r3]
 221:AudioProcessor.cpp ****                     // Transfer envelope state to voice 0 so level stays consistent.
 1303              		.loc 3 221 21 is_stmt 1 view .LVU428
 221:AudioProcessor.cpp ****                     // Transfer envelope state to voice 0 so level stays consistent.
 1304              		.loc 3 221 60 is_stmt 0 view .LVU429
 1305 0150 1E4B     		ldr	r3, .L86+92
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 42


 1306 0152 03EB8102 		add	r2, r3, r1, lsl #2
 1307 0156 1268     		ldr	r2, [r2]	@ float
 221:AudioProcessor.cpp ****                     // Transfer envelope state to voice 0 so level stays consistent.
 1308              		.loc 3 221 35 view .LVU430
 1309 0158 1A60     		str	r2, [r3]	@ float
 223:AudioProcessor.cpp ****                     voice_envelopes[source_voice].Reset();
 1310              		.loc 3 223 21 is_stmt 1 view .LVU431
 223:AudioProcessor.cpp ****                     voice_envelopes[source_voice].Reset();
 1311              		.loc 3 223 40 is_stmt 0 view .LVU432
 1312 015a 4422     		movs	r2, #68
 1313 015c 02FB0104 		mla	r4, r2, r1, r0
 1314              	.LVL83:
 223:AudioProcessor.cpp ****                     voice_envelopes[source_voice].Reset();
 1315              		.loc 3 223 40 view .LVU433
 1316 0160 2146     		mov	r1, r4
 1317              	.LVL84:
 223:AudioProcessor.cpp ****                     voice_envelopes[source_voice].Reset();
 1318              		.loc 3 223 40 view .LVU434
 1319 0162 FFF7FEFF 		bl	memcpy
 1320              	.LVL85:
 224:AudioProcessor.cpp ****                 }
 1321              		.loc 3 224 21 is_stmt 1 view .LVU435
 224:AudioProcessor.cpp ****                 }
 1322              		.loc 3 224 56 is_stmt 0 view .LVU436
 1323 0166 2046     		mov	r0, r4
 1324 0168 FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 1325              	.LVL86:
 1326 016c DAE7     		b	.L73
 1327              	.L87:
 1328 016e 00BF     		.align	2
 1329              	.L86:
 1330 0170 00000000 		.word	button
 1331 0174 00000000 		.word	delay_time_knob
 1332 0178 00000000 		.word	delay_mix_feedback_knob
 1333 017c 00000000 		.word	env_release_knob
 1334 0180 00000000 		.word	env_attack_knob
 1335 0184 00000000 		.word	timbre_knob
 1336 0188 00000000 		.word	harmonics_knob
 1337 018c 00000000 		.word	morph_knob
 1338 0190 00000000 		.word	pitch_knob
 1339 0194 00000000 		.word	arp_pad
 1340 0198 00000000 		.word	model_prev_pad
 1341 019c 00000000 		.word	model_next_pad
 1342 01a0 00000000 		.word	mod_wheel
 1343 01a4 18000000 		.word	hw+24
 1344 01a8 00000000 		.word	.LANCHOR2
 1345 01ac 00000000 		.word	.LANCHOR3
 1346 01b0 00000000 		.word	.LANCHOR4
 1347 01b4 00000000 		.word	MAX_ENGINE_INDEX
 1348 01b8 00000000 		.word	.LANCHOR5
 1349 01bc 00000000 		.word	.LANCHOR6
 1350 01c0 00000000 		.word	.LANCHOR7
 1351 01c4 00000000 		.word	voice_active
 1352 01c8 00000000 		.word	voice_envelopes
 1353 01cc 00000000 		.word	voice_note
 1354              	.LBE207:
 1355              	.LBE210:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 43


 1356              	.LBE213:
 1357              	.LBE215:
 1358              	.LBE218:
 1359              		.cfi_endproc
 1360              	.LFE5060:
 1362              		.section	.text._Z14ReadKnobValuesv,"ax",%progbits
 1363              		.align	1
 1364              		.global	_Z14ReadKnobValuesv
 1365              		.syntax unified
 1366              		.thumb
 1367              		.thumb_func
 1369              	_Z14ReadKnobValuesv:
 1370              	.LFB5061:
 236:AudioProcessor.cpp **** 
 237:AudioProcessor.cpp **** void ReadKnobValues() {
 1371              		.loc 3 237 23 is_stmt 1 view -0
 1372              		.cfi_startproc
 1373              		@ args = 0, pretend = 0, frame = 0
 1374              		@ frame_needed = 0, uses_anonymous_args = 0
 1375              		@ link register save eliminated.
 238:AudioProcessor.cpp ****     delay_time_val = delay_time_knob.Value();           // ADC 0
 1376              		.loc 3 238 5 view .LVU438
 1377              	.LVL87:
 1378              	.LBB219:
 1379              	.LBI219:
 1380              		.loc 4 56 18 view .LVU439
 1381              	.LBB220:
 1382              		.loc 4 56 34 view .LVU440
 1383              		.loc 4 56 41 is_stmt 0 view .LVU441
 1384 0000 124B     		ldr	r3, .L89
 1385              	.LBE220:
 1386              	.LBE219:
 1387              		.loc 3 238 20 view .LVU442
 1388 0002 DA68     		ldr	r2, [r3, #12]	@ float
 1389 0004 124B     		ldr	r3, .L89+4
 1390 0006 1A60     		str	r2, [r3]	@ float
 239:AudioProcessor.cpp ****     delay_mix_feedback_val = delay_mix_feedback_knob.Value(); // ADC 1 (Combined)
 1391              		.loc 3 239 5 is_stmt 1 view .LVU443
 1392              	.LVL88:
 1393              	.LBB221:
 1394              	.LBI221:
 1395              		.loc 4 56 18 view .LVU444
 1396              	.LBB222:
 1397              		.loc 4 56 34 view .LVU445
 1398              		.loc 4 56 41 is_stmt 0 view .LVU446
 1399 0008 124B     		ldr	r3, .L89+8
 1400              	.LBE222:
 1401              	.LBE221:
 1402              		.loc 3 239 28 view .LVU447
 1403 000a 134A     		ldr	r2, .L89+12
 1404              	.LBB224:
 1405              	.LBB223:
 1406              		.loc 4 56 41 view .LVU448
 1407 000c DB68     		ldr	r3, [r3, #12]	@ float
 1408              	.LVL89:
 1409              		.loc 4 56 41 view .LVU449
 1410              	.LBE223:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 44


 1411              	.LBE224:
 1412              		.loc 3 239 28 view .LVU450
 1413 000e 1360     		str	r3, [r2]	@ float
 240:AudioProcessor.cpp ****     env_release_val = env_release_knob.Value();       // ADC 2
 1414              		.loc 3 240 5 is_stmt 1 view .LVU451
 1415              	.LVL90:
 1416              	.LBB225:
 1417              	.LBI225:
 1418              		.loc 4 56 18 view .LVU452
 1419              	.LBB226:
 1420              		.loc 4 56 34 view .LVU453
 1421              		.loc 4 56 41 is_stmt 0 view .LVU454
 1422 0010 124A     		ldr	r2, .L89+16
 1423              	.LBE226:
 1424              	.LBE225:
 1425              		.loc 3 240 21 view .LVU455
 1426 0012 D168     		ldr	r1, [r2, #12]	@ float
 1427 0014 124A     		ldr	r2, .L89+20
 1428 0016 1160     		str	r1, [r2]	@ float
 241:AudioProcessor.cpp ****     env_attack_val = env_attack_knob.Value();        // ADC 3
 1429              		.loc 3 241 5 is_stmt 1 view .LVU456
 1430              	.LVL91:
 1431              	.LBB227:
 1432              	.LBI227:
 1433              		.loc 4 56 18 view .LVU457
 1434              	.LBB228:
 1435              		.loc 4 56 34 view .LVU458
 1436              		.loc 4 56 41 is_stmt 0 view .LVU459
 1437 0018 124A     		ldr	r2, .L89+24
 1438              	.LBE228:
 1439              	.LBE227:
 1440              		.loc 3 241 20 view .LVU460
 1441 001a D168     		ldr	r1, [r2, #12]	@ float
 1442 001c 124A     		ldr	r2, .L89+28
 1443 001e 1160     		str	r1, [r2]	@ float
 242:AudioProcessor.cpp ****     timbre_knob_val = timbre_knob.Value();            // ADC 4
 1444              		.loc 3 242 5 is_stmt 1 view .LVU461
 1445              	.LVL92:
 1446              	.LBB229:
 1447              	.LBI229:
 1448              		.loc 4 56 18 view .LVU462
 1449              	.LBB230:
 1450              		.loc 4 56 34 view .LVU463
 1451              		.loc 4 56 41 is_stmt 0 view .LVU464
 1452 0020 124A     		ldr	r2, .L89+32
 1453              	.LBE230:
 1454              	.LBE229:
 1455              		.loc 3 242 21 view .LVU465
 1456 0022 D168     		ldr	r1, [r2, #12]	@ float
 1457 0024 124A     		ldr	r2, .L89+36
 1458 0026 1160     		str	r1, [r2]	@ float
 243:AudioProcessor.cpp ****     harm_knob_val = harmonics_knob.Value();         // ADC 5
 1459              		.loc 3 243 5 is_stmt 1 view .LVU466
 1460              	.LVL93:
 1461              	.LBB231:
 1462              	.LBI231:
 1463              		.loc 4 56 18 view .LVU467
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 45


 1464              	.LBB232:
 1465              		.loc 4 56 34 view .LVU468
 1466              		.loc 4 56 41 is_stmt 0 view .LVU469
 1467 0028 124A     		ldr	r2, .L89+40
 1468              	.LBE232:
 1469              	.LBE231:
 1470              		.loc 3 243 19 view .LVU470
 1471 002a D168     		ldr	r1, [r2, #12]	@ float
 1472 002c 124A     		ldr	r2, .L89+44
 1473 002e 1160     		str	r1, [r2]	@ float
 244:AudioProcessor.cpp ****     morph_knob_val = morph_knob.Value();             // ADC 6
 1474              		.loc 3 244 5 is_stmt 1 view .LVU471
 1475              	.LVL94:
 1476              	.LBB233:
 1477              	.LBI233:
 1478              		.loc 4 56 18 view .LVU472
 1479              	.LBB234:
 1480              		.loc 4 56 34 view .LVU473
 1481              		.loc 4 56 41 is_stmt 0 view .LVU474
 1482 0030 124A     		ldr	r2, .L89+48
 1483              	.LBE234:
 1484              	.LBE233:
 1485              		.loc 3 244 20 view .LVU475
 1486 0032 D168     		ldr	r1, [r2, #12]	@ float
 1487 0034 124A     		ldr	r2, .L89+52
 1488 0036 1160     		str	r1, [r2]	@ float
 245:AudioProcessor.cpp ****     pitch_val = pitch_knob.Value();                 // ADC 7
 1489              		.loc 3 245 5 is_stmt 1 view .LVU476
 1490              	.LVL95:
 1491              	.LBB235:
 1492              	.LBI235:
 1493              		.loc 4 56 18 view .LVU477
 1494              	.LBB236:
 1495              		.loc 4 56 34 view .LVU478
 1496              		.loc 4 56 41 is_stmt 0 view .LVU479
 1497 0038 124A     		ldr	r2, .L89+56
 1498              	.LBE236:
 1499              	.LBE235:
 1500              		.loc 3 245 15 view .LVU480
 1501 003a D168     		ldr	r1, [r2, #12]	@ float
 1502 003c 124A     		ldr	r2, .L89+60
 1503 003e 1160     		str	r1, [r2]	@ float
 246:AudioProcessor.cpp **** 
 247:AudioProcessor.cpp ****     // Derive separate mix and feedback values from the combined knob
 248:AudioProcessor.cpp ****     // Simple approach: use the same value for both
 249:AudioProcessor.cpp ****     delay_mix_val = delay_mix_feedback_val;
 1504              		.loc 3 249 5 is_stmt 1 view .LVU481
 1505              		.loc 3 249 19 is_stmt 0 view .LVU482
 1506 0040 124A     		ldr	r2, .L89+64
 1507 0042 1360     		str	r3, [r2]	@ float
 250:AudioProcessor.cpp ****     delay_feedback_val = delay_mix_feedback_val;
 1508              		.loc 3 250 5 is_stmt 1 view .LVU483
 1509              		.loc 3 250 24 is_stmt 0 view .LVU484
 1510 0044 124A     		ldr	r2, .L89+68
 1511 0046 1360     		str	r3, [r2]	@ float
 251:AudioProcessor.cpp **** }
 1512              		.loc 3 251 1 view .LVU485
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 46


 1513 0048 7047     		bx	lr
 1514              	.L90:
 1515 004a 00BF     		.align	2
 1516              	.L89:
 1517 004c 00000000 		.word	delay_time_knob
 1518 0050 00000000 		.word	.LANCHOR8
 1519 0054 00000000 		.word	delay_mix_feedback_knob
 1520 0058 00000000 		.word	.LANCHOR9
 1521 005c 00000000 		.word	env_release_knob
 1522 0060 00000000 		.word	.LANCHOR1
 1523 0064 00000000 		.word	env_attack_knob
 1524 0068 00000000 		.word	.LANCHOR0
 1525 006c 00000000 		.word	timbre_knob
 1526 0070 00000000 		.word	.LANCHOR10
 1527 0074 00000000 		.word	harmonics_knob
 1528 0078 00000000 		.word	.LANCHOR11
 1529 007c 00000000 		.word	morph_knob
 1530 0080 00000000 		.word	.LANCHOR12
 1531 0084 00000000 		.word	pitch_knob
 1532 0088 00000000 		.word	.LANCHOR13
 1533 008c 00000000 		.word	.LANCHOR14
 1534 0090 00000000 		.word	.LANCHOR15
 1535              		.cfi_endproc
 1536              	.LFE5061:
 1538              		.section	.text._Z16ResetVoiceStatesv,"ax",%progbits
 1539              		.align	1
 1540              		.global	_Z16ResetVoiceStatesv
 1541              		.syntax unified
 1542              		.thumb
 1543              		.thumb_func
 1545              	_Z16ResetVoiceStatesv:
 1546              	.LFB5062:
 252:AudioProcessor.cpp **** 
 253:AudioProcessor.cpp **** void ResetVoiceStates() {
 1547              		.loc 3 253 25 is_stmt 1 view -0
 1548              		.cfi_startproc
 1549              		@ args = 0, pretend = 0, frame = 0
 1550              		@ frame_needed = 0, uses_anonymous_args = 0
 254:AudioProcessor.cpp ****     // Force reset all voice states to prevent stuck notes
 255:AudioProcessor.cpp ****     for (int v = 0; v < NUM_VOICES; v++) {
 1551              		.loc 3 255 5 view .LVU487
 1552              	.LVL96:
 1553              	.LBB237:
 1554              		.loc 3 255 23 view .LVU488
 1555              	.LBE237:
 253:AudioProcessor.cpp ****     // Force reset all voice states to prevent stuck notes
 1556              		.loc 3 253 25 is_stmt 0 view .LVU489
 1557 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1558              		.cfi_def_cfa_offset 24
 1559              		.cfi_offset 3, -24
 1560              		.cfi_offset 4, -20
 1561              		.cfi_offset 5, -16
 1562              		.cfi_offset 6, -12
 1563              		.cfi_offset 7, -8
 1564              		.cfi_offset 14, -4
 1565 0002 0B4E     		ldr	r6, .L94
 1566              	.LBB238:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 47


 1567              		.loc 3 255 14 view .LVU490
 1568 0004 0024     		movs	r4, #0
 1569 0006 0B4F     		ldr	r7, .L94+4
 1570 0008 0B4D     		ldr	r5, .L94+8
 1571              	.LVL97:
 1572              	.L92:
 256:AudioProcessor.cpp ****         // Reset the envelope to IDLE state
 257:AudioProcessor.cpp ****         voice_envelopes[v].Reset();
 1573              		.loc 3 257 9 is_stmt 1 discriminator 2 view .LVU491
 1574              		.loc 3 257 33 is_stmt 0 discriminator 2 view .LVU492
 1575 000a 3046     		mov	r0, r6
 255:AudioProcessor.cpp ****         // Reset the envelope to IDLE state
 1576              		.loc 3 255 5 discriminator 2 view .LVU493
 1577 000c 0134     		adds	r4, r4, #1
 1578              	.LVL98:
 1579              		.loc 3 257 33 discriminator 2 view .LVU494
 1580 000e FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 1581              	.LVL99:
 258:AudioProcessor.cpp ****         
 259:AudioProcessor.cpp ****         // Clear active flag
 260:AudioProcessor.cpp ****         voice_active[v] = false;
 1582              		.loc 3 260 9 is_stmt 1 discriminator 2 view .LVU495
 1583              		.loc 3 260 25 is_stmt 0 discriminator 2 view .LVU496
 1584 0012 0023     		movs	r3, #0
 255:AudioProcessor.cpp ****         // Reset the envelope to IDLE state
 1585              		.loc 3 255 23 discriminator 2 view .LVU497
 1586 0014 042C     		cmp	r4, #4
 1587 0016 06F14406 		add	r6, r6, #68
 1588              		.loc 3 260 25 discriminator 2 view .LVU498
 1589 001a 07F8013B 		strb	r3, [r7], #1
 261:AudioProcessor.cpp ****         
 262:AudioProcessor.cpp ****         // Make sure triggers are off
 263:AudioProcessor.cpp ****         modulations[v].trigger = 0.0f;
 1590              		.loc 3 263 9 is_stmt 1 discriminator 2 view .LVU499
 1591              		.loc 3 263 32 is_stmt 0 discriminator 2 view .LVU500
 1592 001e 4FF00003 		mov	r3, #0
 255:AudioProcessor.cpp ****         // Reset the envelope to IDLE state
 1593              		.loc 3 255 23 discriminator 2 view .LVU501
 1594 0022 05F12805 		add	r5, r5, #40
 1595              		.loc 3 263 32 discriminator 2 view .LVU502
 1596 0026 45F8103C 		str	r3, [r5, #-16]	@ float
 255:AudioProcessor.cpp ****         // Reset the envelope to IDLE state
 1597              		.loc 3 255 5 is_stmt 1 discriminator 2 view .LVU503
 1598              	.LVL100:
 255:AudioProcessor.cpp ****         // Reset the envelope to IDLE state
 1599              		.loc 3 255 23 discriminator 2 view .LVU504
 1600 002a EED1     		bne	.L92
 1601              	.LBE238:
 264:AudioProcessor.cpp ****     }
 265:AudioProcessor.cpp **** }
 1602              		.loc 3 265 1 is_stmt 0 view .LVU505
 1603 002c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1604              	.LVL101:
 1605              	.L95:
 1606              		.loc 3 265 1 view .LVU506
 1607 002e 00BF     		.align	2
 1608              	.L94:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 48


 1609 0030 00000000 		.word	voice_envelopes
 1610 0034 00000000 		.word	voice_active
 1611 0038 00000000 		.word	modulations
 1612              		.cfi_endproc
 1613              	.LFE5062:
 1615              		.section	.text._Z23DetermineEngineSettingsv,"ax",%progbits
 1616              		.align	1
 1617              		.global	_Z23DetermineEngineSettingsv
 1618              		.syntax unified
 1619              		.thumb
 1620              		.thumb_func
 1622              	_Z23DetermineEngineSettingsv:
 1623              	.LFB5063:
 266:AudioProcessor.cpp **** 
 267:AudioProcessor.cpp **** int DetermineEngineSettings() {
 1624              		.loc 3 267 31 is_stmt 1 view -0
 1625              		.cfi_startproc
 1626              		@ args = 0, pretend = 0, frame = 0
 1627              		@ frame_needed = 0, uses_anonymous_args = 0
 1628              		@ link register save eliminated.
 268:AudioProcessor.cpp ****     return current_engine_index;
 1629              		.loc 3 268 5 view .LVU508
 1630              		.loc 3 268 12 is_stmt 0 view .LVU509
 1631 0000 014B     		ldr	r3, .L97
 1632 0002 1868     		ldr	r0, [r3]
 269:AudioProcessor.cpp **** }
 1633              		.loc 3 269 1 view .LVU510
 1634 0004 7047     		bx	lr
 1635              	.L98:
 1636 0006 00BF     		.align	2
 1637              	.L97:
 1638 0008 00000000 		.word	.LANCHOR4
 1639              		.cfi_endproc
 1640              	.LFE5063:
 1642              		.section	.text._Z16HandleTouchInputibi,"ax",%progbits
 1643              		.align	1
 1644              		.global	_Z16HandleTouchInputibi
 1645              		.syntax unified
 1646              		.thumb
 1647              		.thumb_func
 1649              	_Z16HandleTouchInputibi:
 1650              	.LVL102:
 1651              	.LFB5064:
 270:AudioProcessor.cpp **** 
 271:AudioProcessor.cpp **** void HandleTouchInput(int engineIndex, bool poly_mode, int effective_num_voices) {
 1652              		.loc 3 271 82 is_stmt 1 view -0
 1653              		.cfi_startproc
 1654              		@ args = 0, pretend = 0, frame = 0
 1655              		@ frame_needed = 0, uses_anonymous_args = 0
 272:AudioProcessor.cpp ****     // Use the shared volatile variable for current touch state
 273:AudioProcessor.cpp ****     uint16_t local_current_touch_state = current_touch_state;
 1656              		.loc 3 273 5 view .LVU512
 271:AudioProcessor.cpp ****     // Use the shared volatile variable for current touch state
 1657              		.loc 3 271 82 is_stmt 0 view .LVU513
 1658 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1659              		.cfi_def_cfa_offset 32
 1660              		.cfi_offset 3, -32
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 49


 1661              		.cfi_offset 4, -28
 1662              		.cfi_offset 5, -24
 1663              		.cfi_offset 6, -20
 1664              		.cfi_offset 7, -16
 1665              		.cfi_offset 8, -12
 1666              		.cfi_offset 9, -8
 1667              		.cfi_offset 14, -4
 1668              		.loc 3 273 42 view .LVU514
 1669 0004 364B     		ldr	r3, .L124
 271:AudioProcessor.cpp ****     // Use the shared volatile variable for current touch state
 1670              		.loc 3 271 82 view .LVU515
 1671 0006 0D46     		mov	r5, r1
 1672 0008 1746     		mov	r7, r2
 1673              	.LBB239:
 274:AudioProcessor.cpp **** 
 275:AudioProcessor.cpp ****     for (int i = 0; i < 12; ++i) { 
 1674              		.loc 3 275 14 view .LVU516
 1675 000a 0024     		movs	r4, #0
 1676              	.LBE239:
 273:AudioProcessor.cpp **** 
 1677              		.loc 3 273 42 view .LVU517
 1678 000c 1E88     		ldrh	r6, [r3]
 1679 000e B6B2     		uxth	r6, r6
 1680              	.LVL103:
 1681              		.loc 3 275 5 is_stmt 1 view .LVU518
 1682              	.LBB258:
 1683              		.loc 3 275 23 view .LVU519
 1684              	.LBE258:
 271:AudioProcessor.cpp ****     // Use the shared volatile variable for current touch state
 1685              		.loc 3 271 82 is_stmt 0 view .LVU520
 1686 0010 2DED028B 		vpush.64	{d8}
 1687              		.cfi_def_cfa_offset 40
 1688              		.cfi_offset 80, -40
 1689              		.cfi_offset 81, -36
 1690              	.LVL104:
 1691              	.L107:
 1692              	.LBB259:
 1693              	.LBB240:
 276:AudioProcessor.cpp ****         bool pad_currently_pressed = (local_current_touch_state >> i) & 1;
 1694              		.loc 3 276 9 is_stmt 1 view .LVU521
 277:AudioProcessor.cpp ****         bool pad_was_pressed = (last_touch_state >> i) & 1;
 1695              		.loc 3 277 9 view .LVU522
 278:AudioProcessor.cpp ****         float note_for_pad = kTouchMidiNotes[i];
 1696              		.loc 3 278 15 is_stmt 0 view .LVU523
 1697 0014 334A     		ldr	r2, .L124+4
 277:AudioProcessor.cpp ****         bool pad_was_pressed = (last_touch_state >> i) & 1;
 1698              		.loc 3 277 33 view .LVU524
 1699 0016 DFF8E480 		ldr	r8, .L124+28
 1700              		.loc 3 278 15 view .LVU525
 1701 001a 02EB8402 		add	r2, r2, r4, lsl #2
 277:AudioProcessor.cpp ****         bool pad_was_pressed = (last_touch_state >> i) & 1;
 1702              		.loc 3 277 33 view .LVU526
 1703 001e B8F80030 		ldrh	r3, [r8]
 1704              		.loc 3 278 15 view .LVU527
 1705 0022 92ED008A 		vldr.32	s16, [r2]
 276:AudioProcessor.cpp ****         bool pad_currently_pressed = (local_current_touch_state >> i) & 1;
 1706              		.loc 3 276 65 view .LVU528
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 50


 1707 0026 46FA04F2 		asr	r2, r6, r4
 277:AudioProcessor.cpp ****         bool pad_was_pressed = (last_touch_state >> i) & 1;
 1708              		.loc 3 277 50 view .LVU529
 1709 002a 2341     		asrs	r3, r3, r4
 1710              	.LBB241:
 279:AudioProcessor.cpp **** 
 280:AudioProcessor.cpp ****         if (pad_currently_pressed && !pad_was_pressed) { 
 1711              		.loc 3 280 9 view .LVU530
 1712 002c 12F00109 		ands	r9, r2, #1
 1713              	.LBE241:
 277:AudioProcessor.cpp ****         float note_for_pad = kTouchMidiNotes[i];
 1714              		.loc 3 277 56 view .LVU531
 1715 0030 03F00103 		and	r3, r3, #1
 1716              	.LVL105:
 278:AudioProcessor.cpp ****         float note_for_pad = kTouchMidiNotes[i];
 1717              		.loc 3 278 9 is_stmt 1 view .LVU532
 1718              		.loc 3 280 9 view .LVU533
 1719              	.LBB249:
 1720 0034 2AD0     		beq	.L100
 1721              		.loc 3 280 35 is_stmt 0 discriminator 1 view .LVU534
 1722 0036 D3B9     		cbnz	r3, .L102
 1723              	.LBE249:
 1724              	.LBE240:
 1725              	.LBE259:
 281:AudioProcessor.cpp ****             if (poly_mode) {
 1726              		.loc 3 281 13 is_stmt 1 view .LVU535
 1727              	.LBB260:
 1728              	.LBB254:
 1729              	.LBB250:
 1730              	.LBB242:
 1731 0038 15B3     		cbz	r5, .L103
 1732              	.LBB243:
 282:AudioProcessor.cpp ****                 int voice_idx = FindAvailableVoice(effective_num_voices); 
 1733              		.loc 3 282 17 view .LVU536
 1734              		.loc 3 282 51 is_stmt 0 view .LVU537
 1735 003a 3846     		mov	r0, r7
 1736 003c FFF7FEFF 		bl	_Z18FindAvailableVoicei
 1737              	.LVL106:
 283:AudioProcessor.cpp ****                 if (voice_idx != -1) {
 1738              		.loc 3 283 17 is_stmt 1 view .LVU538
 1739 0040 421C     		adds	r2, r0, #1
 1740 0042 14D0     		beq	.L102
 284:AudioProcessor.cpp ****                     voice_note[voice_idx] = note_for_pad;
 1741              		.loc 3 284 21 view .LVU539
 1742              		.loc 3 284 43 is_stmt 0 view .LVU540
 1743 0044 284B     		ldr	r3, .L124+8
 285:AudioProcessor.cpp ****                     voice_active[voice_idx] = true;
 1744              		.loc 3 285 45 view .LVU541
 1745 0046 0122     		movs	r2, #1
 284:AudioProcessor.cpp ****                     voice_note[voice_idx] = note_for_pad;
 1746              		.loc 3 284 43 view .LVU542
 1747 0048 03EB8003 		add	r3, r3, r0, lsl #2
 1748 004c 83ED008A 		vstr.32	s16, [r3]
 1749              		.loc 3 285 21 is_stmt 1 view .LVU543
 1750              		.loc 3 285 45 is_stmt 0 view .LVU544
 1751 0050 264B     		ldr	r3, .L124+12
 1752 0052 1A54     		strb	r2, [r3, r0]
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 51


 286:AudioProcessor.cpp ****                     modulations[voice_idx].trigger = 1.0f; // For initial transient
 1753              		.loc 3 286 21 is_stmt 1 view .LVU545
 1754              		.loc 3 286 52 is_stmt 0 view .LVU546
 1755 0054 2822     		movs	r2, #40
 1756 0056 264B     		ldr	r3, .L124+16
 1757 0058 02FB0033 		mla	r3, r2, r0, r3
 1758 005c 4FF07E52 		mov	r2, #1065353216
 1759 0060 9A61     		str	r2, [r3, #24]	@ float
 287:AudioProcessor.cpp ****                     voice_envelopes[voice_idx].Trigger(); 
 1760              		.loc 3 287 21 is_stmt 1 view .LVU547
 1761              		.loc 3 287 55 is_stmt 0 view .LVU548
 1762 0062 4422     		movs	r2, #68
 1763 0064 234B     		ldr	r3, .L124+20
 1764 0066 02FB0030 		mla	r0, r2, r0, r3
 1765              	.LVL107:
 1766              	.L122:
 1767              		.loc 3 287 55 view .LVU549
 1768              	.LBE243:
 288:AudioProcessor.cpp ****                 }
 289:AudioProcessor.cpp ****             } else { 
 290:AudioProcessor.cpp ****                 AssignMonoNote(note_for_pad);
 291:AudioProcessor.cpp ****                 // NEW: Trigger the mono voice envelope to ensure audio playback
 292:AudioProcessor.cpp ****                 voice_envelopes[0].Trigger();
 1769              		.loc 3 292 43 view .LVU550
 1770 006a FFF7FEFF 		bl	_ZN13VoiceEnvelope7TriggerEv
 1771              	.LVL108:
 1772              	.L102:
 1773              	.LBE242:
 1774              	.LBE250:
 1775              	.LBE254:
 275:AudioProcessor.cpp ****         bool pad_currently_pressed = (local_current_touch_state >> i) & 1;
 1776              		.loc 3 275 5 is_stmt 1 discriminator 2 view .LVU551
 1777 006e 0134     		adds	r4, r4, #1
 1778              	.LVL109:
 275:AudioProcessor.cpp ****         bool pad_currently_pressed = (local_current_touch_state >> i) & 1;
 1779              		.loc 3 275 23 discriminator 2 view .LVU552
 1780 0070 0C2C     		cmp	r4, #12
 1781 0072 CFD1     		bne	.L107
 1782              	.LBE260:
 293:AudioProcessor.cpp ****             }
 294:AudioProcessor.cpp ****         } else if (!pad_currently_pressed && pad_was_pressed) { 
 295:AudioProcessor.cpp ****             if (poly_mode) {
 296:AudioProcessor.cpp ****                  int voice_idx = FindVoice(note_for_pad, effective_num_voices);
 297:AudioProcessor.cpp ****                  if (voice_idx != -1) {
 298:AudioProcessor.cpp ****                      voice_active[voice_idx] = false; // Mark inactive for release
 299:AudioProcessor.cpp ****                      voice_envelopes[voice_idx].Release(); // Start release phase
 300:AudioProcessor.cpp ****                  }
 301:AudioProcessor.cpp ****             } else { 
 302:AudioProcessor.cpp ****                 if (voice_active[0] && fabsf(voice_note[0] - note_for_pad) < 0.1f) {
 303:AudioProcessor.cpp ****                     voice_active[0] = false; // Mark voice 0 inactive
 304:AudioProcessor.cpp ****                     // NEW: Release the mono voice envelope so it decays properly
 305:AudioProcessor.cpp ****                     voice_envelopes[0].Release();
 306:AudioProcessor.cpp ****                 }
 307:AudioProcessor.cpp ****             }
 308:AudioProcessor.cpp ****         }
 309:AudioProcessor.cpp ****     }
 310:AudioProcessor.cpp ****     last_touch_state = local_current_touch_state; // Update last state with the value used in this 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 52


 1783              		.loc 3 310 5 view .LVU553
 311:AudioProcessor.cpp **** }
 1784              		.loc 3 311 1 is_stmt 0 view .LVU554
 1785 0074 BDEC028B 		vldm	sp!, {d8}
 1786              		.cfi_remember_state
 1787              		.cfi_restore 80
 1788              		.cfi_restore 81
 1789              		.cfi_def_cfa_offset 32
 1790              	.LVL110:
 310:AudioProcessor.cpp **** }
 1791              		.loc 3 310 22 view .LVU555
 1792 0078 A8F80060 		strh	r6, [r8]	@ movhi
 1793              		.loc 3 311 1 view .LVU556
 1794 007c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1795              	.LVL111:
 1796              	.L103:
 1797              		.cfi_restore_state
 1798              	.LBB261:
 1799              	.LBB255:
 1800              	.LBB251:
 1801              	.LBB244:
 290:AudioProcessor.cpp ****                 // NEW: Trigger the mono voice envelope to ensure audio playback
 1802              		.loc 3 290 17 is_stmt 1 view .LVU557
 290:AudioProcessor.cpp ****                 // NEW: Trigger the mono voice envelope to ensure audio playback
 1803              		.loc 3 290 31 is_stmt 0 view .LVU558
 1804 0080 B0EE480A 		vmov.f32	s0, s16
 1805 0084 FFF7FEFF 		bl	_Z14AssignMonoNotef
 1806              	.LVL112:
 292:AudioProcessor.cpp ****             }
 1807              		.loc 3 292 17 is_stmt 1 view .LVU559
 292:AudioProcessor.cpp ****             }
 1808              		.loc 3 292 43 is_stmt 0 view .LVU560
 1809 0088 1A48     		ldr	r0, .L124+20
 1810 008a EEE7     		b	.L122
 1811              	.LVL113:
 1812              	.L100:
 292:AudioProcessor.cpp ****             }
 1813              		.loc 3 292 43 view .LVU561
 1814              	.LBE244:
 1815              	.LBE251:
 1816              	.LBE255:
 1817              	.LBE261:
 294:AudioProcessor.cpp ****             if (poly_mode) {
 1818              		.loc 3 294 16 is_stmt 1 discriminator 1 view .LVU562
 1819              	.LBB262:
 1820              	.LBB256:
 1821              	.LBB252:
 1822              	.LBB245:
 294:AudioProcessor.cpp ****             if (poly_mode) {
 1823              		.loc 3 294 43 is_stmt 0 discriminator 1 view .LVU563
 1824 008c 002B     		cmp	r3, #0
 1825 008e EED0     		beq	.L102
 1826              	.LBE245:
 1827              	.LBE252:
 1828              	.LBE256:
 1829              	.LBE262:
 295:AudioProcessor.cpp ****                  int voice_idx = FindVoice(note_for_pad, effective_num_voices);
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 53


 1830              		.loc 3 295 13 is_stmt 1 view .LVU564
 1831              	.LBB263:
 1832              	.LBB257:
 1833              	.LBB253:
 1834              	.LBB248:
 1835              	.LBB246:
 1836 0090 85B1     		cbz	r5, .L105
 1837              	.LBB247:
 296:AudioProcessor.cpp ****                  if (voice_idx != -1) {
 1838              		.loc 3 296 18 view .LVU565
 296:AudioProcessor.cpp ****                  if (voice_idx != -1) {
 1839              		.loc 3 296 43 is_stmt 0 view .LVU566
 1840 0092 B0EE480A 		vmov.f32	s0, s16
 1841 0096 3846     		mov	r0, r7
 1842 0098 FFF7FEFF 		bl	_Z9FindVoicefi
 1843              	.LVL114:
 297:AudioProcessor.cpp ****                      voice_active[voice_idx] = false; // Mark inactive for release
 1844              		.loc 3 297 18 is_stmt 1 view .LVU567
 1845 009c 431C     		adds	r3, r0, #1
 1846 009e E6D0     		beq	.L102
 298:AudioProcessor.cpp ****                      voice_envelopes[voice_idx].Release(); // Start release phase
 1847              		.loc 3 298 22 view .LVU568
 298:AudioProcessor.cpp ****                      voice_envelopes[voice_idx].Release(); // Start release phase
 1848              		.loc 3 298 46 is_stmt 0 view .LVU569
 1849 00a0 124B     		ldr	r3, .L124+12
 299:AudioProcessor.cpp ****                  }
 1850              		.loc 3 299 56 view .LVU570
 1851 00a2 4422     		movs	r2, #68
 298:AudioProcessor.cpp ****                      voice_envelopes[voice_idx].Release(); // Start release phase
 1852              		.loc 3 298 46 view .LVU571
 1853 00a4 03F80090 		strb	r9, [r3, r0]
 299:AudioProcessor.cpp ****                  }
 1854              		.loc 3 299 22 is_stmt 1 view .LVU572
 299:AudioProcessor.cpp ****                  }
 1855              		.loc 3 299 56 is_stmt 0 view .LVU573
 1856 00a8 124B     		ldr	r3, .L124+20
 1857 00aa 02FB0030 		mla	r0, r2, r0, r3
 1858              	.LVL115:
 1859              	.L123:
 299:AudioProcessor.cpp ****                  }
 1860              		.loc 3 299 56 view .LVU574
 1861              	.LBE247:
 305:AudioProcessor.cpp ****                 }
 1862              		.loc 3 305 47 view .LVU575
 1863 00ae FFF7FEFF 		bl	_ZN13VoiceEnvelope7ReleaseEv
 1864              	.LVL116:
 1865 00b2 DCE7     		b	.L102
 1866              	.LVL117:
 1867              	.L105:
 302:AudioProcessor.cpp ****                     voice_active[0] = false; // Mark voice 0 inactive
 1868              		.loc 3 302 17 is_stmt 1 view .LVU576
 302:AudioProcessor.cpp ****                     voice_active[0] = false; // Mark voice 0 inactive
 1869              		.loc 3 302 35 is_stmt 0 view .LVU577
 1870 00b4 0D4B     		ldr	r3, .L124+12
 1871              	.LVL118:
 302:AudioProcessor.cpp ****                     voice_active[0] = false; // Mark voice 0 inactive
 1872              		.loc 3 302 17 view .LVU578
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 54


 1873 00b6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1874 00b8 002A     		cmp	r2, #0
 1875 00ba D8D0     		beq	.L102
 302:AudioProcessor.cpp ****                     voice_active[0] = false; // Mark voice 0 inactive
 1876              		.loc 3 302 58 discriminator 1 view .LVU579
 1877 00bc 0A4A     		ldr	r2, .L124+8
 302:AudioProcessor.cpp ****                     voice_active[0] = false; // Mark voice 0 inactive
 1878              		.loc 3 302 37 discriminator 1 view .LVU580
 1879 00be 9FED0E7A 		vldr.32	s14, .L124+24
 302:AudioProcessor.cpp ****                     voice_active[0] = false; // Mark voice 0 inactive
 1880              		.loc 3 302 60 discriminator 1 view .LVU581
 1881 00c2 D2ED007A 		vldr.32	s15, [r2]
 1882 00c6 77EEC87A 		vsub.f32	s15, s15, s16
 302:AudioProcessor.cpp ****                     voice_active[0] = false; // Mark voice 0 inactive
 1883              		.loc 3 302 45 discriminator 1 view .LVU582
 1884 00ca F0EEE77A 		vabs.f32	s15, s15
 302:AudioProcessor.cpp ****                     voice_active[0] = false; // Mark voice 0 inactive
 1885              		.loc 3 302 37 discriminator 1 view .LVU583
 1886 00ce F4EEC77A 		vcmpe.f32	s15, s14
 1887 00d2 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1888 00d6 CAD5     		bpl	.L102
 303:AudioProcessor.cpp ****                     // NEW: Release the mono voice envelope so it decays properly
 1889              		.loc 3 303 21 is_stmt 1 view .LVU584
 305:AudioProcessor.cpp ****                 }
 1890              		.loc 3 305 47 is_stmt 0 view .LVU585
 1891 00d8 0648     		ldr	r0, .L124+20
 303:AudioProcessor.cpp ****                     // NEW: Release the mono voice envelope so it decays properly
 1892              		.loc 3 303 37 view .LVU586
 1893 00da 1D70     		strb	r5, [r3]
 305:AudioProcessor.cpp ****                 }
 1894              		.loc 3 305 21 is_stmt 1 view .LVU587
 1895 00dc E7E7     		b	.L123
 1896              	.L125:
 1897 00de 00BF     		.align	2
 1898              	.L124:
 1899 00e0 00000000 		.word	current_touch_state
 1900 00e4 00000000 		.word	kTouchMidiNotes
 1901 00e8 00000000 		.word	voice_note
 1902 00ec 00000000 		.word	voice_active
 1903 00f0 00000000 		.word	modulations
 1904 00f4 00000000 		.word	voice_envelopes
 1905 00f8 CDCCCC3D 		.word	1036831949
 1906 00fc 00000000 		.word	last_touch_state
 1907              	.LBE246:
 1908              	.LBE248:
 1909              	.LBE253:
 1910              	.LBE257:
 1911              	.LBE263:
 1912              		.cfi_endproc
 1913              	.LFE5064:
 1915              		.section	.text._Z22ConfigureDelaySettingsv,"ax",%progbits
 1916              		.align	1
 1917              		.global	_Z22ConfigureDelaySettingsv
 1918              		.syntax unified
 1919              		.thumb
 1920              		.thumb_func
 1922              	_Z22ConfigureDelaySettingsv:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 55


 1923              	.LFB5065:
 312:AudioProcessor.cpp **** 
 313:AudioProcessor.cpp **** void ConfigureDelaySettings() {
 1924              		.loc 3 313 31 view -0
 1925              		.cfi_startproc
 1926              		@ args = 0, pretend = 0, frame = 0
 1927              		@ frame_needed = 0, uses_anonymous_args = 0
 1928              		@ link register save eliminated.
 314:AudioProcessor.cpp ****     // Use delay_feedback_val derived from ADC 1
 315:AudioProcessor.cpp ****     delay.SetFeedback(delay_feedback_val * 0.98f); 
 1929              		.loc 3 315 5 view .LVU589
 1930              	.LVL119:
 1931              	.LBB264:
 1932              	.LBI264:
 1933              		.file 5 "Effects/EchoDelay.h"
   1:Effects/EchoDelay.h **** #pragma once
   2:Effects/EchoDelay.h **** #ifndef INFS_ECHODELAY_H
   3:Effects/EchoDelay.h **** #define INFS_ECHODELAY_H
   4:Effects/EchoDelay.h **** 
   5:Effects/EchoDelay.h **** #include <daisysp.h>
   6:Effects/EchoDelay.h **** #include "BiquadFilters.h"
   7:Effects/EchoDelay.h **** #include "DSPUtils.h"
   8:Effects/EchoDelay.h **** 
   9:Effects/EchoDelay.h **** namespace infrasonic {
  10:Effects/EchoDelay.h **** 
  11:Effects/EchoDelay.h **** /**
  12:Effects/EchoDelay.h ****  * @brief
  13:Effects/EchoDelay.h ****  * Tape-ish echo delay.
  14:Effects/EchoDelay.h ****  *   - Feedback is unbounded, but signal is soft-clipped
  15:Effects/EchoDelay.h ****  *   - Output is full-wet, should be mixed with dry signal externally
  16:Effects/EchoDelay.h ****  *
  17:Effects/EchoDelay.h ****  * @tparam MaxLength Max length of delay in samples
  18:Effects/EchoDelay.h ****  */
  19:Effects/EchoDelay.h **** template<size_t MaxLength>
  20:Effects/EchoDelay.h **** class EchoDelay {
  21:Effects/EchoDelay.h **** 
  22:Effects/EchoDelay.h ****     public:
  23:Effects/EchoDelay.h **** 
  24:Effects/EchoDelay.h ****         EchoDelay() {}
  25:Effects/EchoDelay.h ****         ~EchoDelay() {}
  26:Effects/EchoDelay.h **** 
  27:Effects/EchoDelay.h ****         void Init(float sample_rate)
  28:Effects/EchoDelay.h ****         {
  29:Effects/EchoDelay.h ****             sample_rate_ = sample_rate;
  30:Effects/EchoDelay.h ****             delayLine_.Init();
  31:Effects/EchoDelay.h ****             bpf_.Init(sample_rate);
  32:Effects/EchoDelay.h ****             bpf_.SetParams(800.0f, 1.0f);
  33:Effects/EchoDelay.h ****         }
  34:Effects/EchoDelay.h **** 
  35:Effects/EchoDelay.h ****         /**
  36:Effects/EchoDelay.h ****          * @brief Set the approximate lag time (smoothing) for delay time changes, in seconds
  37:Effects/EchoDelay.h ****          */
  38:Effects/EchoDelay.h ****         void SetLagTime(const float time_s)
  39:Effects/EchoDelay.h ****         {
  40:Effects/EchoDelay.h ****             delay_smooth_coef_ = onepole_coef(time_s, sample_rate_);
  41:Effects/EchoDelay.h ****         }
  42:Effects/EchoDelay.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 56


  43:Effects/EchoDelay.h ****         /**
  44:Effects/EchoDelay.h ****          * @brief Set the Delay Time in seconds
  45:Effects/EchoDelay.h ****          *
  46:Effects/EchoDelay.h ****          * @param time_s Delay time in seconds. Will be truncated to MaxLength.
  47:Effects/EchoDelay.h ****          * @param immediately If true, sets delay time immediately with no smoothing.
  48:Effects/EchoDelay.h ****          */
  49:Effects/EchoDelay.h ****         void SetDelayTime(const float time_s, bool immediately = false)
  50:Effects/EchoDelay.h ****         {
  51:Effects/EchoDelay.h ****             delay_time_target_ = time_s;
  52:Effects/EchoDelay.h ****             if (immediately) delay_time_current_ = time_s;
  53:Effects/EchoDelay.h ****         }
  54:Effects/EchoDelay.h **** 
  55:Effects/EchoDelay.h ****         /**
  56:Effects/EchoDelay.h ****          * @brief
  57:Effects/EchoDelay.h ****          * Set the feedback amount (linear multiplier).
  58:Effects/EchoDelay.h ****          * This can be >1 in magnitude for saturated swells, or negative.
  59:Effects/EchoDelay.h ****          *
  60:Effects/EchoDelay.h ****          * NOTE: This is not internally smoothed. Use external smoothing if desired.
  61:Effects/EchoDelay.h ****          *
  62:Effects/EchoDelay.h ****          * @param feedback
  63:Effects/EchoDelay.h ****          */
  64:Effects/EchoDelay.h ****         void SetFeedback(const float feedback)
 1934              		.loc 5 64 14 view .LVU590
 1935              	.LBE264:
 1936              		.loc 3 315 22 is_stmt 0 view .LVU591
 1937 0000 0A4A     		ldr	r2, .L127
 1938 0002 9FED0B7A 		vldr.32	s14, .L127+4
 1939 0006 D2ED007A 		vldr.32	s15, [r2]
 1940              	.LBB267:
 1941              	.LBB265:
  65:Effects/EchoDelay.h ****         {
  66:Effects/EchoDelay.h ****             feedback_ = feedback;
 1942              		.loc 5 66 23 view .LVU592
 1943 000a 0A4B     		ldr	r3, .L127+8
 1944              	.LBE265:
 1945              	.LBE267:
 1946              		.loc 3 315 22 view .LVU593
 1947 000c 67EE877A 		vmul.f32	s15, s15, s14
 1948              	.LVL120:
 316:AudioProcessor.cpp ****     // Use delay_time_val from ADC 0
 317:AudioProcessor.cpp ****     float delay_time_s = 0.01f + delay_time_val * 0.99f; 
 1949              		.loc 3 317 49 view .LVU594
 1950 0010 094A     		ldr	r2, .L127+12
 1951              		.loc 3 317 11 view .LVU595
 1952 0012 9FED0A7A 		vldr.32	s14, .L127+16
 1953 0016 D2ED006A 		vldr.32	s13, [r2]
 1954              	.LBB268:
 1955              	.LBB266:
 1956              		.loc 5 66 23 view .LVU596
 1957 001a C3ED047A 		vstr.32	s15, [r3, #16]
 1958              	.LVL121:
 1959              		.loc 5 66 23 view .LVU597
 1960              	.LBE266:
 1961              	.LBE268:
 1962              		.loc 3 317 5 is_stmt 1 view .LVU598
 1963              		.loc 3 317 11 is_stmt 0 view .LVU599
 1964 001e DFED087A 		vldr.32	s15, .L127+20
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 57


 1965 0022 E6EE877A 		vfma.f32	s15, s13, s14
 1966              	.LVL122:
 318:AudioProcessor.cpp ****     delay.SetDelayTime(delay_time_s);
 1967              		.loc 3 318 5 is_stmt 1 view .LVU600
 1968              	.LBB269:
 1969              	.LBI269:
  49:Effects/EchoDelay.h ****         {
 1970              		.loc 5 49 14 view .LVU601
 1971              	.LBB270:
  51:Effects/EchoDelay.h ****             if (immediately) delay_time_current_ = time_s;
 1972              		.loc 5 51 32 is_stmt 0 view .LVU602
 1973 0026 C3ED027A 		vstr.32	s15, [r3, #8]
 1974              	.LVL123:
  51:Effects/EchoDelay.h ****             if (immediately) delay_time_current_ = time_s;
 1975              		.loc 5 51 32 view .LVU603
 1976              	.LBE270:
 1977              	.LBE269:
 319:AudioProcessor.cpp ****     // Remove delay lag setting (ADC 7 is now Pitch)
 320:AudioProcessor.cpp ****     // float lag_time_s = delay_lag_val * 0.2f; 
 321:AudioProcessor.cpp ****     // delay.SetLagTime(lag_time_s);
 322:AudioProcessor.cpp **** }
 1978              		.loc 3 322 1 view .LVU604
 1979 002a 7047     		bx	lr
 1980              	.L128:
 1981              		.align	2
 1982              	.L127:
 1983 002c 00000000 		.word	.LANCHOR15
 1984 0030 48E17A3F 		.word	1065017672
 1985 0034 00000000 		.word	delay
 1986 0038 00000000 		.word	.LANCHOR8
 1987 003c A4707D3F 		.word	1065185444
 1988 0040 0AD7233C 		.word	1008981770
 1989              		.cfi_endproc
 1990              	.LFE5065:
 1992              		.section	.text._Z22PrepareVoiceParametersibi,"ax",%progbits
 1993              		.align	1
 1994              		.global	_Z22PrepareVoiceParametersibi
 1995              		.syntax unified
 1996              		.thumb
 1997              		.thumb_func
 1999              	_Z22PrepareVoiceParametersibi:
 2000              	.LVL124:
 2001              	.LFB5066:
 323:AudioProcessor.cpp **** 
 324:AudioProcessor.cpp **** void PrepareVoiceParameters(int engineIndex, bool poly_mode, int max_voice_idx) {
 2002              		.loc 3 324 81 is_stmt 1 view -0
 2003              		.cfi_startproc
 2004              		@ args = 0, pretend = 0, frame = 0
 2005              		@ frame_needed = 0, uses_anonymous_args = 0
 325:AudioProcessor.cpp ****     
 326:AudioProcessor.cpp ****     // Update global parameter sources based on new ADC mapping
 327:AudioProcessor.cpp ****     float global_pitch_offset = pitch_val * 24.f - 12.f;     // Pitch is now ADC 7
 2006              		.loc 3 327 5 view .LVU606
 2007              		.loc 3 327 43 is_stmt 0 view .LVU607
 2008 0000 4A4B     		ldr	r3, .L149
 2009              		.loc 3 327 11 view .LVU608
 2010 0002 F3EE087A 		vmov.f32	s15, #2.4e+1
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 58


 324:AudioProcessor.cpp ****     
 2011              		.loc 3 324 81 view .LVU609
 2012 0006 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2013              		.cfi_def_cfa_offset 36
 2014              		.cfi_offset 4, -36
 2015              		.cfi_offset 5, -32
 2016              		.cfi_offset 6, -28
 2017              		.cfi_offset 7, -24
 2018              		.cfi_offset 8, -20
 2019              		.cfi_offset 9, -16
 2020              		.cfi_offset 10, -12
 2021              		.cfi_offset 11, -8
 2022              		.cfi_offset 14, -4
 2023 000a 2DED028B 		vpush.64	{d8}
 2024              		.cfi_def_cfa_offset 44
 2025              		.cfi_offset 80, -44
 2026              		.cfi_offset 81, -40
 2027              		.loc 3 327 11 view .LVU610
 2028 000e BAEE088A 		vmov.f32	s16, #-1.2e+1
 2029 0012 93ED007A 		vldr.32	s14, [r3]
 328:AudioProcessor.cpp ****     float current_global_harmonics = harm_knob_val;          // Harmonics is now ADC 5
 2030              		.loc 3 328 11 view .LVU611
 2031 0016 464B     		ldr	r3, .L149+4
 324:AudioProcessor.cpp ****     
 2032              		.loc 3 324 81 view .LVU612
 2033 0018 83B0     		sub	sp, sp, #12
 2034              		.cfi_def_cfa_offset 56
 324:AudioProcessor.cpp ****     
 2035              		.loc 3 324 81 view .LVU613
 2036 001a 8146     		mov	r9, r0
 2037 001c 8846     		mov	r8, r1
 327:AudioProcessor.cpp ****     float current_global_harmonics = harm_knob_val;          // Harmonics is now ADC 5
 2038              		.loc 3 327 11 view .LVU614
 2039 001e A7EE278A 		vfma.f32	s16, s14, s15
 2040              	.LVL125:
 2041              		.loc 3 328 5 is_stmt 1 view .LVU615
 2042              		.loc 3 328 11 is_stmt 0 view .LVU616
 2043 0022 D3F800B0 		ldr	fp, [r3]	@ float
 2044              	.LVL126:
 329:AudioProcessor.cpp ****     // float current_global_decay = decay_knob_val;            // Removed (Decay knob removed)
 330:AudioProcessor.cpp ****     float current_global_morph = morph_knob_val;            // Morph is now ADC 6
 2045              		.loc 3 330 5 is_stmt 1 view .LVU617
 2046              		.loc 3 330 11 is_stmt 0 view .LVU618
 2047 0026 434B     		ldr	r3, .L149+8
 324:AudioProcessor.cpp ****     
 2048              		.loc 3 324 81 view .LVU619
 2049 0028 1746     		mov	r7, r2
 2050 002a 434D     		ldr	r5, .L149+12
 2051              	.LBB271:
 331:AudioProcessor.cpp **** 
 332:AudioProcessor.cpp ****     // --- Process Effective Voices --- 
 333:AudioProcessor.cpp ****     for (int v = 0; v <= max_voice_idx; ++v) { 
 2052              		.loc 3 333 14 view .LVU620
 2053 002c 0026     		movs	r6, #0
 2054              	.LBE271:
 330:AudioProcessor.cpp **** 
 2055              		.loc 3 330 11 view .LVU621
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 59


 2056 002e D3ED008A 		vldr.32	s17, [r3]
 2057              	.LVL127:
 2058              		.loc 3 333 5 is_stmt 1 view .LVU622
 2059              		.loc 3 333 5 is_stmt 0 view .LVU623
 2060 0032 424C     		ldr	r4, .L149+16
 2061 0034 DFF824A1 		ldr	r10, .L149+48
 2062              	.LVL128:
 2063              	.L134:
 2064              	.LBB272:
 2065              		.loc 3 333 23 is_stmt 1 discriminator 1 view .LVU624
 2066 0038 BE42     		cmp	r6, r7
 2067 003a 4FDC     		bgt	.L130
 334:AudioProcessor.cpp ****         // Update Patch using dedicated knob values
 335:AudioProcessor.cpp ****         patches[v].note = voice_note[v] + global_pitch_offset;
 2068              		.loc 3 335 9 view .LVU625
 336:AudioProcessor.cpp ****         patches[v].engine = engineIndex;                      // Engine index from touch pads
 337:AudioProcessor.cpp ****         patches[v].harmonics = current_global_harmonics;    // ADC 5
 338:AudioProcessor.cpp ****         patches[v].timbre = timbre_knob_val;                  // ADC 4 (Reconnected)
 2069              		.loc 3 338 27 is_stmt 0 view .LVU626
 2070 003c 404B     		ldr	r3, .L149+20
 339:AudioProcessor.cpp ****         patches[v].morph = current_global_morph;            // ADC 6
 340:AudioProcessor.cpp ****         patches[v].lpg_colour = 0.0f;
 341:AudioProcessor.cpp ****         // patches[v].decay = current_global_decay;            // Removed (Decay knob removed)
 342:AudioProcessor.cpp ****         // Ensure decay uses a default or is handled correctly by the engine if needed
 343:AudioProcessor.cpp ****         // Setting a default moderate decay:
 344:AudioProcessor.cpp ****         patches[v].decay = 0.5f; // Default decay value since knob is gone
 345:AudioProcessor.cpp ****         
 346:AudioProcessor.cpp ****         patches[v].frequency_modulation_amount = 0.f;
 347:AudioProcessor.cpp ****         patches[v].timbre_modulation_amount = 0.f;
 348:AudioProcessor.cpp ****         patches[v].morph_modulation_amount = 0.f;
 349:AudioProcessor.cpp **** 
 350:AudioProcessor.cpp ****         // Update Modulations & Handle Trigger 
 351:AudioProcessor.cpp ****         modulations[v].engine = 0; 
 352:AudioProcessor.cpp ****         modulations[v].note = 0.0f; 
 353:AudioProcessor.cpp ****         modulations[v].frequency = 0.0f;
 354:AudioProcessor.cpp ****         modulations[v].harmonics = 0.0f; 
 355:AudioProcessor.cpp ****         modulations[v].timbre = 0.0f;
 356:AudioProcessor.cpp ****         modulations[v].morph = 0.0f; 
 357:AudioProcessor.cpp ****         modulations[v].level = 1.0f; 
 2071              		.loc 3 357 30 view .LVU627
 2072 003e B7EE007A 		vmov.f32	s14, #1.0e+0
 335:AudioProcessor.cpp ****         patches[v].engine = engineIndex;                      // Engine index from touch pads
 2073              		.loc 3 335 39 view .LVU628
 2074 0042 FAEC017A 		vldmia.32	r10!, {s15}
 338:AudioProcessor.cpp ****         patches[v].morph = current_global_morph;            // ADC 6
 2075              		.loc 3 338 27 view .LVU629
 2076 0046 1B68     		ldr	r3, [r3]	@ float
 335:AudioProcessor.cpp ****         patches[v].engine = engineIndex;                      // Engine index from touch pads
 2077              		.loc 3 335 41 view .LVU630
 2078 0048 77EE887A 		vadd.f32	s15, s15, s16
 336:AudioProcessor.cpp ****         patches[v].harmonics = current_global_harmonics;    // ADC 5
 2079              		.loc 3 336 27 view .LVU631
 2080 004c C5F81C90 		str	r9, [r5, #28]
 338:AudioProcessor.cpp ****         patches[v].morph = current_global_morph;            // ADC 6
 2081              		.loc 3 338 27 view .LVU632
 2082 0050 AB60     		str	r3, [r5, #8]	@ float
 344:AudioProcessor.cpp ****         
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 60


 2083              		.loc 3 344 26 view .LVU633
 2084 0052 4FF07C53 		mov	r3, #1056964608
 337:AudioProcessor.cpp ****         patches[v].timbre = timbre_knob_val;                  // ADC 4 (Reconnected)
 2085              		.loc 3 337 30 view .LVU634
 2086 0056 C5F804B0 		str	fp, [r5, #4]	@ float
 335:AudioProcessor.cpp ****         patches[v].engine = engineIndex;                      // Engine index from touch pads
 2087              		.loc 3 335 25 view .LVU635
 2088 005a C5ED007A 		vstr.32	s15, [r5]
 336:AudioProcessor.cpp ****         patches[v].harmonics = current_global_harmonics;    // ADC 5
 2089              		.loc 3 336 9 is_stmt 1 view .LVU636
 337:AudioProcessor.cpp ****         patches[v].timbre = timbre_knob_val;                  // ADC 4 (Reconnected)
 2090              		.loc 3 337 9 view .LVU637
 338:AudioProcessor.cpp ****         patches[v].morph = current_global_morph;            // ADC 6
 2091              		.loc 3 338 9 view .LVU638
 339:AudioProcessor.cpp ****         patches[v].lpg_colour = 0.0f;
 2092              		.loc 3 339 9 view .LVU639
 344:AudioProcessor.cpp ****         
 2093              		.loc 3 344 26 is_stmt 0 view .LVU640
 2094 005e 2B62     		str	r3, [r5, #32]	@ float
 358:AudioProcessor.cpp ****         
 359:AudioProcessor.cpp ****         // MODIFIED: Handle all engines consistently with trigger_patched
 360:AudioProcessor.cpp ****         // This ensures envelopes are properly applied
 361:AudioProcessor.cpp ****         modulations[v].trigger_patched = !poly_mode;  // Only patch trigger for non-poly engines
 2095              		.loc 3 361 42 view .LVU641
 2096 0060 88F00103 		eor	r3, r8, #1
 340:AudioProcessor.cpp ****         // patches[v].decay = current_global_decay;            // Removed (Decay knob removed)
 2097              		.loc 3 340 31 view .LVU642
 2098 0064 DFED377A 		vldr.32	s15, .L149+24
 339:AudioProcessor.cpp ****         patches[v].lpg_colour = 0.0f;
 2099              		.loc 3 339 26 view .LVU643
 2100 0068 C5ED038A 		vstr.32	s17, [r5, #12]
 340:AudioProcessor.cpp ****         // patches[v].decay = current_global_decay;            // Removed (Decay knob removed)
 2101              		.loc 3 340 9 is_stmt 1 view .LVU644
 340:AudioProcessor.cpp ****         // patches[v].decay = current_global_decay;            // Removed (Decay knob removed)
 2102              		.loc 3 340 31 is_stmt 0 view .LVU645
 2103 006c C5ED097A 		vstr.32	s15, [r5, #36]
 344:AudioProcessor.cpp ****         
 2104              		.loc 3 344 9 is_stmt 1 view .LVU646
 346:AudioProcessor.cpp ****         patches[v].timbre_modulation_amount = 0.f;
 2105              		.loc 3 346 9 view .LVU647
 346:AudioProcessor.cpp ****         patches[v].timbre_modulation_amount = 0.f;
 2106              		.loc 3 346 48 is_stmt 0 view .LVU648
 2107 0070 C5ED047A 		vstr.32	s15, [r5, #16]
 347:AudioProcessor.cpp ****         patches[v].morph_modulation_amount = 0.f;
 2108              		.loc 3 347 9 is_stmt 1 view .LVU649
 347:AudioProcessor.cpp ****         patches[v].morph_modulation_amount = 0.f;
 2109              		.loc 3 347 45 is_stmt 0 view .LVU650
 2110 0074 C5ED057A 		vstr.32	s15, [r5, #20]
 348:AudioProcessor.cpp **** 
 2111              		.loc 3 348 9 is_stmt 1 view .LVU651
 348:AudioProcessor.cpp **** 
 2112              		.loc 3 348 44 is_stmt 0 view .LVU652
 2113 0078 C5ED067A 		vstr.32	s15, [r5, #24]
 351:AudioProcessor.cpp ****         modulations[v].note = 0.0f; 
 2114              		.loc 3 351 9 is_stmt 1 view .LVU653
 351:AudioProcessor.cpp ****         modulations[v].note = 0.0f; 
 2115              		.loc 3 351 31 is_stmt 0 view .LVU654
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 61


 2116 007c C4ED007A 		vstr.32	s15, [r4]
 352:AudioProcessor.cpp ****         modulations[v].frequency = 0.0f;
 2117              		.loc 3 352 9 is_stmt 1 view .LVU655
 352:AudioProcessor.cpp ****         modulations[v].frequency = 0.0f;
 2118              		.loc 3 352 29 is_stmt 0 view .LVU656
 2119 0080 C4ED017A 		vstr.32	s15, [r4, #4]
 353:AudioProcessor.cpp ****         modulations[v].harmonics = 0.0f; 
 2120              		.loc 3 353 9 is_stmt 1 view .LVU657
 353:AudioProcessor.cpp ****         modulations[v].harmonics = 0.0f; 
 2121              		.loc 3 353 34 is_stmt 0 view .LVU658
 2122 0084 C4ED027A 		vstr.32	s15, [r4, #8]
 354:AudioProcessor.cpp ****         modulations[v].timbre = 0.0f;
 2123              		.loc 3 354 9 is_stmt 1 view .LVU659
 354:AudioProcessor.cpp ****         modulations[v].timbre = 0.0f;
 2124              		.loc 3 354 34 is_stmt 0 view .LVU660
 2125 0088 C4ED037A 		vstr.32	s15, [r4, #12]
 355:AudioProcessor.cpp ****         modulations[v].morph = 0.0f; 
 2126              		.loc 3 355 9 is_stmt 1 view .LVU661
 355:AudioProcessor.cpp ****         modulations[v].morph = 0.0f; 
 2127              		.loc 3 355 31 is_stmt 0 view .LVU662
 2128 008c C4ED047A 		vstr.32	s15, [r4, #16]
 356:AudioProcessor.cpp ****         modulations[v].level = 1.0f; 
 2129              		.loc 3 356 9 is_stmt 1 view .LVU663
 356:AudioProcessor.cpp ****         modulations[v].level = 1.0f; 
 2130              		.loc 3 356 30 is_stmt 0 view .LVU664
 2131 0090 C4ED057A 		vstr.32	s15, [r4, #20]
 357:AudioProcessor.cpp ****         
 2132              		.loc 3 357 9 is_stmt 1 view .LVU665
 357:AudioProcessor.cpp ****         
 2133              		.loc 3 357 30 is_stmt 0 view .LVU666
 2134 0094 84ED077A 		vstr.32	s14, [r4, #28]
 2135              		.loc 3 361 9 is_stmt 1 view .LVU667
 2136              		.loc 3 361 40 is_stmt 0 view .LVU668
 2137 0098 84F82330 		strb	r3, [r4, #35]
 362:AudioProcessor.cpp ****         
 363:AudioProcessor.cpp ****         if (poly_mode) {
 2138              		.loc 3 363 9 is_stmt 1 view .LVU669
 2139 009c B8F1000F 		cmp	r8, #0
 2140 00a0 06D1     		bne	.L131
 364:AudioProcessor.cpp ****             // For poly engines, we'll handle triggering through voice envelopes
 365:AudioProcessor.cpp ****             // Only set trigger on initial note-on
 366:AudioProcessor.cpp ****             // Don't modify value - already set in HandleTouchInput
 367:AudioProcessor.cpp ****         } else {
 368:AudioProcessor.cpp ****             // For non-poly engines, use direct trigger patching.
 369:AudioProcessor.cpp ****             // When the engine just changed while a note is held, force a low trigger for one block
 370:AudioProcessor.cpp ****             // to generate a fresh rising edge on the next block so percussive engines retrigger.
 371:AudioProcessor.cpp ****             if(engine_changed_flag && voice_active[v]) {
 2141              		.loc 3 371 13 view .LVU670
 2142              		.loc 3 371 16 is_stmt 0 view .LVU671
 2143 00a2 294B     		ldr	r3, .L149+28
 2144 00a4 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2145              		.loc 3 371 53 view .LVU672
 2146 00a6 294B     		ldr	r3, .L149+32
 2147 00a8 F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 2148              		.loc 3 371 36 view .LVU673
 2149 00aa 9AB1     		cbz	r2, .L132
 2150              	.L133:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 62


 372:AudioProcessor.cpp ****                 modulations[v].trigger = 0.0f; // create falling edge this block
 373:AudioProcessor.cpp ****             } else {
 374:AudioProcessor.cpp ****                 modulations[v].trigger = voice_active[v] ? 1.0f : 0.0f;
 2151              		.loc 3 374 40 discriminator 4 view .LVU674
 2152 00ac C4ED067A 		vstr.32	s15, [r4, #24]
 2153              	.L131:
 375:AudioProcessor.cpp ****             }
 376:AudioProcessor.cpp ****         }
 377:AudioProcessor.cpp ****         
 378:AudioProcessor.cpp ****         voices[v].Render(patches[v], modulations[v], output_buffers[v], BLOCK_SIZE);
 2154              		.loc 3 378 9 is_stmt 1 discriminator 2 view .LVU675
 2155              		.loc 3 378 25 is_stmt 0 discriminator 2 view .LVU676
 2156 00b0 1023     		movs	r3, #16
 2157 00b2 4FF45B6C 		mov	ip, #3504
 2158 00b6 2648     		ldr	r0, .L149+36
 2159 00b8 2246     		mov	r2, r4
 2160 00ba 0093     		str	r3, [sp]
 2161 00bc 2946     		mov	r1, r5
 2162 00be 254B     		ldr	r3, .L149+40
 2163 00c0 0CFB0600 		mla	r0, ip, r6, r0
 2164 00c4 2835     		adds	r5, r5, #40
 2165 00c6 2834     		adds	r4, r4, #40
 2166 00c8 03EB8613 		add	r3, r3, r6, lsl #6
 333:AudioProcessor.cpp ****         // Update Patch using dedicated knob values
 2167              		.loc 3 333 5 discriminator 2 view .LVU677
 2168 00cc 0136     		adds	r6, r6, #1
 2169              	.LVL129:
 2170              		.loc 3 378 25 discriminator 2 view .LVU678
 2171 00ce FFF7FEFF 		bl	_ZN6plaits5Voice6RenderERKNS_5PatchERKNS_11ModulationsEPNS0_5FrameEj
 2172              	.LVL130:
 333:AudioProcessor.cpp ****         // Update Patch using dedicated knob values
 2173              		.loc 3 333 5 is_stmt 1 discriminator 2 view .LVU679
 333:AudioProcessor.cpp ****         // Update Patch using dedicated knob values
 2174              		.loc 3 333 5 is_stmt 0 discriminator 2 view .LVU680
 2175 00d2 B1E7     		b	.L134
 2176              	.L132:
 374:AudioProcessor.cpp ****             }
 2177              		.loc 3 374 17 is_stmt 1 view .LVU681
 374:AudioProcessor.cpp ****             }
 2178              		.loc 3 374 58 is_stmt 0 view .LVU682
 2179 00d4 002B     		cmp	r3, #0
 2180 00d6 47FE877A 		vseleq.f32	s15, s15, s14
 2181 00da E7E7     		b	.L133
 2182              	.L130:
 374:AudioProcessor.cpp ****             }
 2183              		.loc 3 374 58 view .LVU683
 2184              	.LBE272:
 379:AudioProcessor.cpp ****     }
 380:AudioProcessor.cpp ****     
 381:AudioProcessor.cpp ****     // Silence unused voices (when switching from poly to mono)
 382:AudioProcessor.cpp ****     int effective_voices = max_voice_idx + 1; // Calculate from max_voice_idx
 2185              		.loc 3 382 5 is_stmt 1 view .LVU684
 2186              		.loc 3 382 9 is_stmt 0 view .LVU685
 2187 00dc 7C1C     		adds	r4, r7, #1
 2188              	.LVL131:
 383:AudioProcessor.cpp ****     for (int v = effective_voices; v < NUM_VOICES; ++v) {
 2189              		.loc 3 383 5 is_stmt 1 view .LVU686
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 63


 2190              	.L136:
 2191              	.LBB273:
 2192              		.loc 3 383 38 discriminator 3 view .LVU687
 2193 00de 042C     		cmp	r4, #4
 2194 00e0 08D0     		beq	.L135
 384:AudioProcessor.cpp ****          memset(output_buffers[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 2195              		.loc 3 384 10 discriminator 2 view .LVU688
 2196              		.loc 3 384 16 is_stmt 0 discriminator 2 view .LVU689
 2197 00e2 1C48     		ldr	r0, .L149+40
 2198 00e4 4022     		movs	r2, #64
 2199 00e6 0021     		movs	r1, #0
 2200 00e8 00EB8410 		add	r0, r0, r4, lsl #6
 383:AudioProcessor.cpp ****     for (int v = effective_voices; v < NUM_VOICES; ++v) {
 2201              		.loc 3 383 5 discriminator 2 view .LVU690
 2202 00ec 0134     		adds	r4, r4, #1
 2203              	.LVL132:
 2204              		.loc 3 384 16 discriminator 2 view .LVU691
 2205 00ee FFF7FEFF 		bl	memset
 2206              	.LVL133:
 383:AudioProcessor.cpp ****     for (int v = effective_voices; v < NUM_VOICES; ++v) {
 2207              		.loc 3 383 5 is_stmt 1 discriminator 2 view .LVU692
 383:AudioProcessor.cpp ****     for (int v = effective_voices; v < NUM_VOICES; ++v) {
 2208              		.loc 3 383 5 is_stmt 0 discriminator 2 view .LVU693
 2209 00f2 F4E7     		b	.L136
 2210              	.L135:
 383:AudioProcessor.cpp ****     for (int v = effective_voices; v < NUM_VOICES; ++v) {
 2211              		.loc 3 383 5 discriminator 2 view .LVU694
 2212              	.LBE273:
 385:AudioProcessor.cpp ****          // Keep voice_active[v] = false and modulations[v].trigger = 0.0f
 386:AudioProcessor.cpp ****     }
 387:AudioProcessor.cpp **** 
 388:AudioProcessor.cpp ****     // If engine changed while notes are active, retrigger envelopes so that the new engine sound i
 389:AudioProcessor.cpp ****     if(engine_changed_flag) {
 2213              		.loc 3 389 5 is_stmt 1 view .LVU695
 2214              	.LBB274:
 2215              		.loc 3 389 8 is_stmt 0 view .LVU696
 2216 00f4 144E     		ldr	r6, .L149+28
 2217              	.LVL134:
 2218              		.loc 3 389 8 view .LVU697
 2219 00f6 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 2220              		.loc 3 389 5 view .LVU698
 2221 00f8 9BB1     		cbz	r3, .L129
 2222 00fa 174C     		ldr	r4, .L149+44
 2223              	.LVL135:
 2224              	.LBB275:
 2225              	.LBB276:
 390:AudioProcessor.cpp ****         for(int v = 0; v <= max_voice_idx; ++v) {
 2226              		.loc 3 390 17 view .LVU699
 2227 00fc 0025     		movs	r5, #0
 2228 00fe DFF84C80 		ldr	r8, .L149+32
 2229              	.L140:
 2230              	.LVL136:
 2231              		.loc 3 390 26 is_stmt 1 discriminator 1 view .LVU700
 2232 0102 BD42     		cmp	r5, r7
 2233 0104 0BDC     		bgt	.L138
 391:AudioProcessor.cpp ****             if(voice_active[v]) {
 2234              		.loc 3 391 13 view .LVU701
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 64


 2235              		.loc 3 391 30 is_stmt 0 view .LVU702
 2236 0106 18F8013B 		ldrb	r3, [r8], #1	@ zero_extendqisi2
 2237              		.loc 3 391 13 view .LVU703
 2238 010a 2BB1     		cbz	r3, .L139
 392:AudioProcessor.cpp ****                 // Reset and immediately trigger the envelope to restart the note with the new engi
 393:AudioProcessor.cpp ****                 voice_envelopes[v].Reset();
 2239              		.loc 3 393 17 is_stmt 1 view .LVU704
 2240              		.loc 3 393 41 is_stmt 0 view .LVU705
 2241 010c 2046     		mov	r0, r4
 2242 010e FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 2243              	.LVL137:
 394:AudioProcessor.cpp ****                 voice_envelopes[v].Trigger();
 2244              		.loc 3 394 17 is_stmt 1 view .LVU706
 2245              		.loc 3 394 43 is_stmt 0 view .LVU707
 2246 0112 2046     		mov	r0, r4
 2247 0114 FFF7FEFF 		bl	_ZN13VoiceEnvelope7TriggerEv
 2248              	.LVL138:
 2249              	.L139:
 390:AudioProcessor.cpp ****             if(voice_active[v]) {
 2250              		.loc 3 390 9 is_stmt 1 discriminator 2 view .LVU708
 2251 0118 0135     		adds	r5, r5, #1
 2252              	.LVL139:
 390:AudioProcessor.cpp ****             if(voice_active[v]) {
 2253              		.loc 3 390 9 is_stmt 0 discriminator 2 view .LVU709
 2254 011a 4434     		adds	r4, r4, #68
 2255 011c F1E7     		b	.L140
 2256              	.L138:
 390:AudioProcessor.cpp ****             if(voice_active[v]) {
 2257              		.loc 3 390 9 discriminator 2 view .LVU710
 2258              	.LBE276:
 395:AudioProcessor.cpp ****             }
 396:AudioProcessor.cpp ****         }
 397:AudioProcessor.cpp ****         engine_changed_flag = false; // Clear flag after handling.
 2259              		.loc 3 397 9 is_stmt 1 view .LVU711
 2260              		.loc 3 397 29 is_stmt 0 view .LVU712
 2261 011e 0023     		movs	r3, #0
 2262 0120 3370     		strb	r3, [r6]
 2263              	.LVL140:
 2264              	.L129:
 2265              		.loc 3 397 29 view .LVU713
 2266              	.LBE275:
 2267              	.LBE274:
 398:AudioProcessor.cpp ****     }
 399:AudioProcessor.cpp **** }
 2268              		.loc 3 399 1 view .LVU714
 2269 0122 03B0     		add	sp, sp, #12
 2270              		.cfi_def_cfa_offset 44
 2271              		@ sp needed
 2272 0124 BDEC028B 		vldm	sp!, {d8}
 2273              		.cfi_restore 80
 2274              		.cfi_restore 81
 2275              		.cfi_def_cfa_offset 36
 2276              	.LVL141:
 2277              		.loc 3 399 1 view .LVU715
 2278 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2279              	.LVL142:
 2280              	.L150:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 65


 2281              		.loc 3 399 1 view .LVU716
 2282              		.align	2
 2283              	.L149:
 2284 012c 00000000 		.word	.LANCHOR13
 2285 0130 00000000 		.word	.LANCHOR11
 2286 0134 00000000 		.word	.LANCHOR12
 2287 0138 00000000 		.word	patches
 2288 013c 00000000 		.word	modulations
 2289 0140 00000000 		.word	.LANCHOR10
 2290 0144 00000000 		.word	0
 2291 0148 00000000 		.word	.LANCHOR5
 2292 014c 00000000 		.word	voice_active
 2293 0150 00000000 		.word	voices
 2294 0154 00000000 		.word	output_buffers
 2295 0158 00000000 		.word	voice_envelopes
 2296 015c 00000000 		.word	voice_note
 2297              		.cfi_endproc
 2298              	.LFE5066:
 2300              		.section	.text._Z21ProcessVoiceEnvelopesb,"ax",%progbits
 2301              		.align	1
 2302              		.global	_Z21ProcessVoiceEnvelopesb
 2303              		.syntax unified
 2304              		.thumb
 2305              		.thumb_func
 2307              	_Z21ProcessVoiceEnvelopesb:
 2308              	.LVL143:
 2309              	.LFB5067:
 400:AudioProcessor.cpp **** 
 401:AudioProcessor.cpp **** void ProcessVoiceEnvelopes(bool poly_mode) {
 2310              		.loc 3 401 44 is_stmt 1 view -0
 2311              		.cfi_startproc
 2312              		@ args = 0, pretend = 0, frame = 0
 2313              		@ frame_needed = 0, uses_anonymous_args = 0
 402:AudioProcessor.cpp ****     memset(mix_buffer_out, 0, sizeof(mix_buffer_out));
 2314              		.loc 3 402 5 view .LVU718
 401:AudioProcessor.cpp ****     memset(mix_buffer_out, 0, sizeof(mix_buffer_out));
 2315              		.loc 3 401 44 is_stmt 0 view .LVU719
 2316 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2317              		.cfi_def_cfa_offset 24
 2318              		.cfi_offset 3, -24
 2319              		.cfi_offset 4, -20
 2320              		.cfi_offset 5, -16
 2321              		.cfi_offset 6, -12
 2322              		.cfi_offset 7, -8
 2323              		.cfi_offset 14, -4
 2324              		.loc 3 402 11 view .LVU720
 2325 0002 4022     		movs	r2, #64
 401:AudioProcessor.cpp ****     memset(mix_buffer_out, 0, sizeof(mix_buffer_out));
 2326              		.loc 3 401 44 view .LVU721
 2327 0004 0446     		mov	r4, r0
 2328              		.loc 3 402 11 view .LVU722
 2329 0006 0021     		movs	r1, #0
 2330 0008 2F48     		ldr	r0, .L164
 2331              	.LVL144:
 2332              		.loc 3 402 11 view .LVU723
 2333 000a 304E     		ldr	r6, .L164+4
 2334              	.LBB277:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 66


 403:AudioProcessor.cpp ****     memset(mix_buffer_aux, 0, sizeof(mix_buffer_aux));
 404:AudioProcessor.cpp ****     
 405:AudioProcessor.cpp ****     // Apply the same punchier attack response
 406:AudioProcessor.cpp ****     float attack_raw = env_attack_val;
 407:AudioProcessor.cpp ****     float attack_value;
 408:AudioProcessor.cpp ****     if (attack_raw < 0.2f) {
 409:AudioProcessor.cpp ****         // More exaggerated curve for very short attacks (extra punchy)
 410:AudioProcessor.cpp ****         attack_value = attack_raw * (attack_raw * 0.5f);
 411:AudioProcessor.cpp ****     } else {
 412:AudioProcessor.cpp ****         // Regular cubic response for longer attacks
 413:AudioProcessor.cpp ****         attack_value = attack_raw * attack_raw * attack_raw;
 414:AudioProcessor.cpp ****     }
 415:AudioProcessor.cpp ****     
 416:AudioProcessor.cpp ****     // Normal cubic curve for release
 417:AudioProcessor.cpp ****     float release_value = env_release_val * env_release_val * env_release_val;
 418:AudioProcessor.cpp ****     
 419:AudioProcessor.cpp ****     // Determine how many voices to process based on mode
 420:AudioProcessor.cpp ****     int voices_to_process = poly_mode ? NUM_VOICES : 1;
 421:AudioProcessor.cpp ****     
 422:AudioProcessor.cpp ****     for (int v = 0; v < voices_to_process; ++v) {
 2335              		.loc 3 422 14 view .LVU724
 2336 000c 0025     		movs	r5, #0
 2337              	.LBE277:
 401:AudioProcessor.cpp ****     memset(mix_buffer_out, 0, sizeof(mix_buffer_out));
 2338              		.loc 3 401 44 view .LVU725
 2339 000e 2DED028B 		vpush.64	{d8}
 2340              		.cfi_def_cfa_offset 32
 2341              		.cfi_offset 80, -32
 2342              		.cfi_offset 81, -28
 402:AudioProcessor.cpp ****     memset(mix_buffer_aux, 0, sizeof(mix_buffer_aux));
 2343              		.loc 3 402 11 view .LVU726
 2344 0012 FFF7FEFF 		bl	memset
 2345              	.LVL145:
 403:AudioProcessor.cpp ****     memset(mix_buffer_aux, 0, sizeof(mix_buffer_aux));
 2346              		.loc 3 403 5 is_stmt 1 view .LVU727
 403:AudioProcessor.cpp ****     memset(mix_buffer_aux, 0, sizeof(mix_buffer_aux));
 2347              		.loc 3 403 11 is_stmt 0 view .LVU728
 2348 0016 4022     		movs	r2, #64
 2349 0018 0021     		movs	r1, #0
 2350 001a 2D48     		ldr	r0, .L164+8
 2351 001c FFF7FEFF 		bl	memset
 2352              	.LVL146:
 406:AudioProcessor.cpp ****     float attack_value;
 2353              		.loc 3 406 5 is_stmt 1 view .LVU729
 406:AudioProcessor.cpp ****     float attack_value;
 2354              		.loc 3 406 11 is_stmt 0 view .LVU730
 2355 0020 2C4B     		ldr	r3, .L164+12
 408:AudioProcessor.cpp ****         // More exaggerated curve for very short attacks (extra punchy)
 2356              		.loc 3 408 5 view .LVU731
 2357 0022 DFED2D7A 		vldr.32	s15, .L164+16
 406:AudioProcessor.cpp ****     float attack_value;
 2358              		.loc 3 406 11 view .LVU732
 2359 0026 93ED000A 		vldr.32	s0, [r3]
 2360              	.LVL147:
 407:AudioProcessor.cpp ****     if (attack_raw < 0.2f) {
 2361              		.loc 3 407 5 is_stmt 1 view .LVU733
 408:AudioProcessor.cpp ****         // More exaggerated curve for very short attacks (extra punchy)
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 67


 2362              		.loc 3 408 5 view .LVU734
 417:AudioProcessor.cpp ****     
 2363              		.loc 3 417 43 is_stmt 0 view .LVU735
 2364 002a 2C4B     		ldr	r3, .L164+20
 408:AudioProcessor.cpp ****         // More exaggerated curve for very short attacks (extra punchy)
 2365              		.loc 3 408 5 view .LVU736
 2366 002c B4EEE70A 		vcmpe.f32	s0, s15
 417:AudioProcessor.cpp ****     
 2367              		.loc 3 417 43 view .LVU737
 2368 0030 D3ED007A 		vldr.32	s15, [r3]
 408:AudioProcessor.cpp ****         // More exaggerated curve for very short attacks (extra punchy)
 2369              		.loc 3 408 5 view .LVU738
 2370 0034 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 410:AudioProcessor.cpp ****     } else {
 2371              		.loc 3 410 9 is_stmt 1 view .LVU739
 417:AudioProcessor.cpp ****     
 2372              		.loc 3 417 43 is_stmt 0 view .LVU740
 2373 0038 67EEA78A 		vmul.f32	s17, s15, s15
 410:AudioProcessor.cpp ****     } else {
 2374              		.loc 3 410 49 view .LVU741
 2375 003c 4CBF     		ite	mi
 2376 003e B6EE008A 		vmovmi.f32	s16, #5.0e-1
 413:AudioProcessor.cpp ****     }
 2377              		.loc 3 413 35 view .LVU742
 2378 0042 20EE008A 		vmulpl.f32	s16, s0, s0
 417:AudioProcessor.cpp ****     
 2379              		.loc 3 417 11 view .LVU743
 2380 0046 68EEA78A 		vmul.f32	s17, s17, s15
 410:AudioProcessor.cpp ****     } else {
 2381              		.loc 3 410 49 view .LVU744
 2382 004a 48BF     		it	mi
 2383 004c 20EE088A 		vmulmi.f32	s16, s0, s16
 413:AudioProcessor.cpp ****     }
 2384              		.loc 3 413 9 is_stmt 1 view .LVU745
 420:AudioProcessor.cpp ****     
 2385              		.loc 3 420 39 is_stmt 0 view .LVU746
 2386 0050 002C     		cmp	r4, #0
 2387 0052 234C     		ldr	r4, .L164+24
 2388 0054 14BF     		ite	ne
 2389 0056 0427     		movne	r7, #4
 2390 0058 0127     		moveq	r7, #1
 413:AudioProcessor.cpp ****     }
 2391              		.loc 3 413 22 view .LVU747
 2392 005a 28EE008A 		vmul.f32	s16, s16, s0
 2393              	.LVL148:
 417:AudioProcessor.cpp ****     
 2394              		.loc 3 417 5 is_stmt 1 view .LVU748
 420:AudioProcessor.cpp ****     
 2395              		.loc 3 420 5 view .LVU749
 2396              		.loc 3 422 5 view .LVU750
 2397              	.LBB281:
 2398              		.loc 3 422 23 view .LVU751
 2399              	.L157:
 2400              	.LBB278:
 423:AudioProcessor.cpp ****         // Set separate attack and release times for all voice envelopes
 424:AudioProcessor.cpp ****         voice_envelopes[v].SetAttackTime(attack_value);
 2401              		.loc 3 424 9 view .LVU752
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 68


 2402              		.loc 3 424 41 is_stmt 0 view .LVU753
 2403 005e B0EE480A 		vmov.f32	s0, s16
 2404 0062 2046     		mov	r0, r4
 2405 0064 FFF7FEFF 		bl	_ZN13VoiceEnvelope13SetAttackTimeEf
 2406              	.LVL149:
 425:AudioProcessor.cpp ****         voice_envelopes[v].SetReleaseTime(release_value);
 2407              		.loc 3 425 9 is_stmt 1 view .LVU754
 2408              		.loc 3 425 42 is_stmt 0 view .LVU755
 2409 0068 B0EE680A 		vmov.f32	s0, s17
 2410 006c 2046     		mov	r0, r4
 2411 006e FFF7FEFF 		bl	_ZN13VoiceEnvelope14SetReleaseTimeEf
 2412              	.LVL150:
 426:AudioProcessor.cpp ****         
 427:AudioProcessor.cpp ****         // Process the envelope
 428:AudioProcessor.cpp ****         float env_value = voice_envelopes[v].Process();
 2413              		.loc 3 428 9 is_stmt 1 view .LVU756
 2414              		.loc 3 428 53 is_stmt 0 view .LVU757
 2415 0072 2046     		mov	r0, r4
 2416 0074 FFF7FEFF 		bl	_ZN13VoiceEnvelope7ProcessEv
 2417              	.LVL151:
 429:AudioProcessor.cpp ****         
 430:AudioProcessor.cpp ****         for (int i = 0; i < BLOCK_SIZE; ++i) {
 2418              		.loc 3 430 9 is_stmt 1 view .LVU758
 2419              	.LBB279:
 2420              		.loc 3 430 27 view .LVU759
 2421 0078 1348     		ldr	r0, .L164
 2422 007a 1549     		ldr	r1, .L164+8
 2423              	.LBE279:
 428:AudioProcessor.cpp ****         
 2424              		.loc 3 428 53 is_stmt 0 view .LVU760
 2425 007c 3346     		mov	r3, r6
 2426              	.LBB280:
 2427              		.loc 3 430 18 view .LVU761
 2428 007e 0022     		movs	r2, #0
 2429              	.LVL152:
 2430              	.L156:
 431:AudioProcessor.cpp ****             mix_buffer_out[i] += output_buffers[v][i].out * env_value;
 2431              		.loc 3 431 13 is_stmt 1 discriminator 2 view .LVU762
 2432              		.loc 3 431 59 is_stmt 0 discriminator 2 view .LVU763
 2433 0080 B3F900C0 		ldrsh	ip, [r3]
 430:AudioProcessor.cpp ****             mix_buffer_out[i] += output_buffers[v][i].out * env_value;
 2434              		.loc 3 430 9 discriminator 2 view .LVU764
 2435 0084 0132     		adds	r2, r2, #1
 2436              	.LVL153:
 2437              		.loc 3 431 31 discriminator 2 view .LVU765
 2438 0086 D0ED007A 		vldr.32	s15, [r0]
 430:AudioProcessor.cpp ****             mix_buffer_out[i] += output_buffers[v][i].out * env_value;
 2439              		.loc 3 430 27 discriminator 2 view .LVU766
 2440 008a 0433     		adds	r3, r3, #4
 2441              		.loc 3 431 59 discriminator 2 view .LVU767
 2442 008c 07EE10CA 		vmov	s14, ip	@ int
 432:AudioProcessor.cpp ****             mix_buffer_aux[i] += output_buffers[v][i].aux * env_value;
 2443              		.loc 3 432 59 discriminator 2 view .LVU768
 2444 0090 33F902CC 		ldrsh	ip, [r3, #-2]
 430:AudioProcessor.cpp ****             mix_buffer_out[i] += output_buffers[v][i].out * env_value;
 2445              		.loc 3 430 27 discriminator 2 view .LVU769
 2446 0094 102A     		cmp	r2, #16
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 69


 431:AudioProcessor.cpp ****             mix_buffer_out[i] += output_buffers[v][i].out * env_value;
 2447              		.loc 3 431 59 discriminator 2 view .LVU770
 2448 0096 B8EEC77A 		vcvt.f32.s32	s14, s14
 431:AudioProcessor.cpp ****             mix_buffer_out[i] += output_buffers[v][i].out * env_value;
 2449              		.loc 3 431 31 discriminator 2 view .LVU771
 2450 009a E7EE007A 		vfma.f32	s15, s14, s0
 2451              		.loc 3 432 59 discriminator 2 view .LVU772
 2452 009e 07EE10CA 		vmov	s14, ip	@ int
 2453 00a2 B8EEC77A 		vcvt.f32.s32	s14, s14
 431:AudioProcessor.cpp ****             mix_buffer_out[i] += output_buffers[v][i].out * env_value;
 2454              		.loc 3 431 31 discriminator 2 view .LVU773
 2455 00a6 E0EC017A 		vstmia.32	r0!, {s15}
 2456              		.loc 3 432 13 is_stmt 1 discriminator 2 view .LVU774
 2457              		.loc 3 432 31 is_stmt 0 discriminator 2 view .LVU775
 2458 00aa D1ED007A 		vldr.32	s15, [r1]
 2459 00ae E7EE007A 		vfma.f32	s15, s14, s0
 2460 00b2 E1EC017A 		vstmia.32	r1!, {s15}
 430:AudioProcessor.cpp ****             mix_buffer_out[i] += output_buffers[v][i].out * env_value;
 2461              		.loc 3 430 9 is_stmt 1 discriminator 2 view .LVU776
 2462              	.LVL154:
 430:AudioProcessor.cpp ****             mix_buffer_out[i] += output_buffers[v][i].out * env_value;
 2463              		.loc 3 430 27 discriminator 2 view .LVU777
 2464 00b6 E3D1     		bne	.L156
 2465              	.LBE280:
 2466              	.LBE278:
 422:AudioProcessor.cpp ****         // Set separate attack and release times for all voice envelopes
 2467              		.loc 3 422 5 discriminator 2 view .LVU778
 2468 00b8 0135     		adds	r5, r5, #1
 2469              	.LVL155:
 422:AudioProcessor.cpp ****         // Set separate attack and release times for all voice envelopes
 2470              		.loc 3 422 23 discriminator 2 view .LVU779
 2471 00ba 4434     		adds	r4, r4, #68
 2472 00bc 4036     		adds	r6, r6, #64
 2473 00be AF42     		cmp	r7, r5
 2474 00c0 CDD1     		bne	.L157
 2475              	.LBE281:
 433:AudioProcessor.cpp ****         }
 434:AudioProcessor.cpp ****     }
 435:AudioProcessor.cpp **** }
 2476              		.loc 3 435 1 is_stmt 0 view .LVU780
 2477 00c2 BDEC028B 		vldm	sp!, {d8}
 2478              		.cfi_restore 80
 2479              		.cfi_restore 81
 2480              		.cfi_def_cfa_offset 24
 2481              	.LVL156:
 2482              		.loc 3 435 1 view .LVU781
 2483 00c6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2484              	.LVL157:
 2485              	.L165:
 2486              		.loc 3 435 1 view .LVU782
 2487              		.align	2
 2488              	.L164:
 2489 00c8 00000000 		.word	.LANCHOR16
 2490 00cc 00000000 		.word	output_buffers
 2491 00d0 00000000 		.word	.LANCHOR17
 2492 00d4 00000000 		.word	.LANCHOR0
 2493 00d8 CDCC4C3E 		.word	1045220557
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 70


 2494 00dc 00000000 		.word	.LANCHOR1
 2495 00e0 00000000 		.word	voice_envelopes
 2496              		.cfi_endproc
 2497              	.LFE5067:
 2499              		.section	.text._Z18ProcessAudioOutputPfjf,"ax",%progbits
 2500              		.align	1
 2501              		.global	_Z18ProcessAudioOutputPfjf
 2502              		.syntax unified
 2503              		.thumb
 2504              		.thumb_func
 2506              	_Z18ProcessAudioOutputPfjf:
 2507              	.LVL158:
 2508              	.LFB5068:
 436:AudioProcessor.cpp **** 
 437:AudioProcessor.cpp **** void ProcessAudioOutput(AudioHandle::InterleavingOutputBuffer out, size_t size, float dry_level) {
 2509              		.loc 3 437 98 is_stmt 1 view -0
 2510              		.cfi_startproc
 2511              		@ args = 0, pretend = 0, frame = 0
 2512              		@ frame_needed = 0, uses_anonymous_args = 0
 438:AudioProcessor.cpp ****     // --- Process Echo Delay & Write Output ---
 439:AudioProcessor.cpp ****     float wet_level = 1.0f - dry_level; 
 2513              		.loc 3 439 5 view .LVU784
 2514              		.loc 3 439 11 is_stmt 0 view .LVU785
 2515 0000 B7EE005A 		vmov.f32	s10, #1.0e+0
 2516 0004 5C4B     		ldr	r3, .L177
 437:AudioProcessor.cpp ****     // --- Process Echo Delay & Write Output ---
 2517              		.loc 3 437 98 view .LVU786
 2518 0006 F0B5     		push	{r4, r5, r6, r7, lr}
 2519              		.cfi_def_cfa_offset 20
 2520              		.cfi_offset 4, -20
 2521              		.cfi_offset 5, -16
 2522              		.cfi_offset 6, -12
 2523              		.cfi_offset 7, -8
 2524              		.cfi_offset 14, -4
 2525              		.loc 3 439 11 view .LVU787
 2526 0008 0024     		movs	r4, #0
 2527 000a 35EE405A 		vsub.f32	s10, s10, s0
 2528              	.LVL159:
 440:AudioProcessor.cpp ****     float norm_factor = (float)NUM_VOICES * 1.0f; // Was 1.5f
 2529              		.loc 3 440 5 is_stmt 1 view .LVU788
 441:AudioProcessor.cpp ****     
 442:AudioProcessor.cpp ****     for (size_t i = 0; i < size; i += 2) {
 2530              		.loc 3 442 5 view .LVU789
 2531              		.loc 3 442 5 is_stmt 0 view .LVU790
 2532 000e D3E90625 		ldrd	r2, r5, [r3, #24]
 2533              	.LBB310:
 2534              		.loc 3 442 17 view .LVU791
 2535 0012 2746     		mov	r7, r4
 2536              	.LVL160:
 2537              	.L169:
 2538              		.loc 3 442 26 is_stmt 1 discriminator 3 view .LVU792
 2539 0014 8F42     		cmp	r7, r1
 2540 0016 80F0AA80 		bcs	.L167
 2541              	.LBB311:
 443:AudioProcessor.cpp ****         // Use mono mix buffer for both channels
 444:AudioProcessor.cpp ****         float sample = mix_buffer_out[i/2] / 32768.f / norm_factor;
 2542              		.loc 3 444 9 discriminator 2 view .LVU793
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 71


 2543              		.loc 3 444 42 is_stmt 0 discriminator 2 view .LVU794
 2544 001a 584D     		ldr	r5, .L177+4
 2545              		.loc 3 444 40 discriminator 2 view .LVU795
 2546 001c 7C08     		lsrs	r4, r7, #1
 2547              		.loc 3 444 44 discriminator 2 view .LVU796
 2548 001e DFED587A 		vldr.32	s15, .L177+8
 2549              	.LBB312:
 2550              	.LBB313:
 2551              	.LBB314:
 2552              	.LBB315:
 2553              		.file 6 "lib/DaisySP/Source/Utility/delayline.h"
   1:lib/DaisySP/Source/Utility/delayline.h **** /*
   2:lib/DaisySP/Source/Utility/delayline.h **** Copyright (c) 2020 Electrosmith, Corp
   3:lib/DaisySP/Source/Utility/delayline.h **** 
   4:lib/DaisySP/Source/Utility/delayline.h **** Use of this source code is governed by an MIT-style
   5:lib/DaisySP/Source/Utility/delayline.h **** license that can be found in the LICENSE file or at
   6:lib/DaisySP/Source/Utility/delayline.h **** https://opensource.org/licenses/MIT.
   7:lib/DaisySP/Source/Utility/delayline.h **** */
   8:lib/DaisySP/Source/Utility/delayline.h **** 
   9:lib/DaisySP/Source/Utility/delayline.h **** #pragma once
  10:lib/DaisySP/Source/Utility/delayline.h **** #ifndef DSY_DELAY_H
  11:lib/DaisySP/Source/Utility/delayline.h **** #define DSY_DELAY_H
  12:lib/DaisySP/Source/Utility/delayline.h **** #include <stdlib.h>
  13:lib/DaisySP/Source/Utility/delayline.h **** #include <stdint.h>
  14:lib/DaisySP/Source/Utility/delayline.h **** namespace daisysp
  15:lib/DaisySP/Source/Utility/delayline.h **** {
  16:lib/DaisySP/Source/Utility/delayline.h **** /** Simple Delay line.
  17:lib/DaisySP/Source/Utility/delayline.h **** November 2019
  18:lib/DaisySP/Source/Utility/delayline.h **** 
  19:lib/DaisySP/Source/Utility/delayline.h **** Converted to Template December 2019
  20:lib/DaisySP/Source/Utility/delayline.h **** 
  21:lib/DaisySP/Source/Utility/delayline.h **** declaration example: (1 second of floats)
  22:lib/DaisySP/Source/Utility/delayline.h **** 
  23:lib/DaisySP/Source/Utility/delayline.h **** DelayLine<float, SAMPLE_RATE> del;
  24:lib/DaisySP/Source/Utility/delayline.h **** 
  25:lib/DaisySP/Source/Utility/delayline.h **** By: shensley
  26:lib/DaisySP/Source/Utility/delayline.h **** */
  27:lib/DaisySP/Source/Utility/delayline.h **** template <typename T, size_t max_size>
  28:lib/DaisySP/Source/Utility/delayline.h **** class DelayLine
  29:lib/DaisySP/Source/Utility/delayline.h **** {
  30:lib/DaisySP/Source/Utility/delayline.h ****   public:
  31:lib/DaisySP/Source/Utility/delayline.h ****     DelayLine() {}
  32:lib/DaisySP/Source/Utility/delayline.h ****     ~DelayLine() {}
  33:lib/DaisySP/Source/Utility/delayline.h ****     /** initializes the delay line by clearing the values within, and setting delay to 1 sample.
  34:lib/DaisySP/Source/Utility/delayline.h ****     */
  35:lib/DaisySP/Source/Utility/delayline.h ****     void Init() { Reset(); }
  36:lib/DaisySP/Source/Utility/delayline.h ****     /** clears buffer, sets write ptr to 0, and delay to 1 sample.
  37:lib/DaisySP/Source/Utility/delayline.h ****     */
  38:lib/DaisySP/Source/Utility/delayline.h ****     void Reset()
  39:lib/DaisySP/Source/Utility/delayline.h ****     {
  40:lib/DaisySP/Source/Utility/delayline.h ****         for(size_t i = 0; i < max_size; i++)
  41:lib/DaisySP/Source/Utility/delayline.h ****         {
  42:lib/DaisySP/Source/Utility/delayline.h ****             line_[i] = T(0);
  43:lib/DaisySP/Source/Utility/delayline.h ****         }
  44:lib/DaisySP/Source/Utility/delayline.h ****         write_ptr_ = 0;
  45:lib/DaisySP/Source/Utility/delayline.h ****         delay_     = 1;
  46:lib/DaisySP/Source/Utility/delayline.h ****     }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 72


  47:lib/DaisySP/Source/Utility/delayline.h **** 
  48:lib/DaisySP/Source/Utility/delayline.h ****     /** sets the delay time in samples
  49:lib/DaisySP/Source/Utility/delayline.h ****         If a float is passed in, a fractional component will be calculated for interpolating the de
  50:lib/DaisySP/Source/Utility/delayline.h ****     */
  51:lib/DaisySP/Source/Utility/delayline.h ****     inline void SetDelay(size_t delay)
  52:lib/DaisySP/Source/Utility/delayline.h ****     {
  53:lib/DaisySP/Source/Utility/delayline.h ****         frac_  = 0.0f;
  54:lib/DaisySP/Source/Utility/delayline.h ****         delay_ = delay < max_size ? delay : max_size - 1;
  55:lib/DaisySP/Source/Utility/delayline.h ****     }
  56:lib/DaisySP/Source/Utility/delayline.h **** 
  57:lib/DaisySP/Source/Utility/delayline.h ****     /** sets the delay time in samples
  58:lib/DaisySP/Source/Utility/delayline.h ****         If a float is passed in, a fractional component will be calculated for interpolating the de
  59:lib/DaisySP/Source/Utility/delayline.h ****     */
  60:lib/DaisySP/Source/Utility/delayline.h ****     inline void SetDelay(float delay)
  61:lib/DaisySP/Source/Utility/delayline.h ****     {
  62:lib/DaisySP/Source/Utility/delayline.h ****         int32_t int_delay = static_cast<int32_t>(delay);
  63:lib/DaisySP/Source/Utility/delayline.h ****         frac_             = delay - static_cast<float>(int_delay);
  64:lib/DaisySP/Source/Utility/delayline.h ****         delay_ = static_cast<size_t>(int_delay) < max_size ? int_delay
  65:lib/DaisySP/Source/Utility/delayline.h ****                                                            : max_size - 1;
  66:lib/DaisySP/Source/Utility/delayline.h ****     }
  67:lib/DaisySP/Source/Utility/delayline.h **** 
  68:lib/DaisySP/Source/Utility/delayline.h ****     /** writes the sample of type T to the delay line, and advances the write ptr
  69:lib/DaisySP/Source/Utility/delayline.h ****     */
  70:lib/DaisySP/Source/Utility/delayline.h ****     inline void Write(const T sample)
  71:lib/DaisySP/Source/Utility/delayline.h ****     {
  72:lib/DaisySP/Source/Utility/delayline.h ****         line_[write_ptr_] = sample;
  73:lib/DaisySP/Source/Utility/delayline.h ****         write_ptr_        = (write_ptr_ - 1 + max_size) % max_size;
  74:lib/DaisySP/Source/Utility/delayline.h ****     }
  75:lib/DaisySP/Source/Utility/delayline.h **** 
  76:lib/DaisySP/Source/Utility/delayline.h ****     /** returns the next sample of type T in the delay line, interpolated if necessary.
  77:lib/DaisySP/Source/Utility/delayline.h ****     */
  78:lib/DaisySP/Source/Utility/delayline.h ****     inline const T Read() const
  79:lib/DaisySP/Source/Utility/delayline.h ****     {
  80:lib/DaisySP/Source/Utility/delayline.h ****         T a = line_[(write_ptr_ + delay_) % max_size];
 2554              		.loc 6 80 43 discriminator 2 view .LVU797
 2555 0022 4BF6803C 		movw	ip, #48000
 2556              	.LBE315:
 2557              	.LBE314:
 2558              	.LBE313:
 2559              	.LBE312:
 2560              		.loc 3 444 42 discriminator 2 view .LVU798
 2561 0026 05EB8404 		add	r4, r5, r4, lsl #2
 2562              	.LBB383:
 2563              	.LBB377:
 2564              	.LBB320:
 2565              	.LBB321:
 2566              		.file 7 "lib/DaisySP/Source/Utility/dsp.h"
   1:lib/DaisySP/Source/Utility/dsp.h **** /*
   2:lib/DaisySP/Source/Utility/dsp.h **** Copyright (c) 2020 Electrosmith, Corp, Emilie Gillet
   3:lib/DaisySP/Source/Utility/dsp.h **** 
   4:lib/DaisySP/Source/Utility/dsp.h **** Use of this source code is governed by an MIT-style
   5:lib/DaisySP/Source/Utility/dsp.h **** license that can be found in the LICENSE file or at
   6:lib/DaisySP/Source/Utility/dsp.h **** https://opensource.org/licenses/MIT.
   7:lib/DaisySP/Source/Utility/dsp.h **** */
   8:lib/DaisySP/Source/Utility/dsp.h **** 
   9:lib/DaisySP/Source/Utility/dsp.h **** /** Helpful defines, functions, and other utilities for use in/with daisysp modules.
  10:lib/DaisySP/Source/Utility/dsp.h **** */
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 73


  11:lib/DaisySP/Source/Utility/dsp.h **** #pragma once
  12:lib/DaisySP/Source/Utility/dsp.h **** #ifndef DSY_CORE_DSP
  13:lib/DaisySP/Source/Utility/dsp.h **** #define DSY_CORE_DSP
  14:lib/DaisySP/Source/Utility/dsp.h **** #include <cassert>
  15:lib/DaisySP/Source/Utility/dsp.h **** #include <cstdint>
  16:lib/DaisySP/Source/Utility/dsp.h **** #include <random>
  17:lib/DaisySP/Source/Utility/dsp.h **** #include <cmath>
  18:lib/DaisySP/Source/Utility/dsp.h **** 
  19:lib/DaisySP/Source/Utility/dsp.h **** /** PIs
  20:lib/DaisySP/Source/Utility/dsp.h **** */
  21:lib/DaisySP/Source/Utility/dsp.h **** #define PI_F 3.1415927410125732421875f
  22:lib/DaisySP/Source/Utility/dsp.h **** #define TWOPI_F (2.0f * PI_F)
  23:lib/DaisySP/Source/Utility/dsp.h **** #define HALFPI_F (PI_F * 0.5f)
  24:lib/DaisySP/Source/Utility/dsp.h **** #define DSY_MIN(in, mn) (in < mn ? in : mn)
  25:lib/DaisySP/Source/Utility/dsp.h **** #define DSY_MAX(in, mx) (in > mx ? in : mx)
  26:lib/DaisySP/Source/Utility/dsp.h **** #define DSY_CLAMP(in, mn, mx) (DSY_MIN(DSY_MAX(in, mn), mx))
  27:lib/DaisySP/Source/Utility/dsp.h **** #define DSY_COUNTOF(_arr) (sizeof(_arr) / sizeof(_arr[0]))
  28:lib/DaisySP/Source/Utility/dsp.h **** 
  29:lib/DaisySP/Source/Utility/dsp.h **** namespace daisysp
  30:lib/DaisySP/Source/Utility/dsp.h **** {
  31:lib/DaisySP/Source/Utility/dsp.h **** //Avoids division for random floats. e.g. rand() * kRandFrac
  32:lib/DaisySP/Source/Utility/dsp.h **** static constexpr float kRandFrac = 1.f / (float)RAND_MAX;
  33:lib/DaisySP/Source/Utility/dsp.h **** 
  34:lib/DaisySP/Source/Utility/dsp.h **** //Convert from semitones to other units. e.g. 2 ^ (kOneTwelfth * x)
  35:lib/DaisySP/Source/Utility/dsp.h **** static constexpr float kOneTwelfth = 1.f / 12.f;
  36:lib/DaisySP/Source/Utility/dsp.h **** 
  37:lib/DaisySP/Source/Utility/dsp.h **** /** efficient floating point min/max
  38:lib/DaisySP/Source/Utility/dsp.h **** c/o stephen mccaul
  39:lib/DaisySP/Source/Utility/dsp.h **** */
  40:lib/DaisySP/Source/Utility/dsp.h **** inline float fmax(float a, float b)
  41:lib/DaisySP/Source/Utility/dsp.h **** {
  42:lib/DaisySP/Source/Utility/dsp.h ****     float r;
  43:lib/DaisySP/Source/Utility/dsp.h **** #ifdef __arm__
  44:lib/DaisySP/Source/Utility/dsp.h ****     asm("vmaxnm.f32 %[d], %[n], %[m]" : [d] "=t"(r) : [n] "t"(a), [m] "t"(b) :);
  45:lib/DaisySP/Source/Utility/dsp.h **** #else
  46:lib/DaisySP/Source/Utility/dsp.h ****     r = (a > b) ? a : b;
  47:lib/DaisySP/Source/Utility/dsp.h **** #endif // __arm__
  48:lib/DaisySP/Source/Utility/dsp.h ****     return r;
  49:lib/DaisySP/Source/Utility/dsp.h **** }
  50:lib/DaisySP/Source/Utility/dsp.h **** 
  51:lib/DaisySP/Source/Utility/dsp.h **** inline float fmin(float a, float b)
  52:lib/DaisySP/Source/Utility/dsp.h **** {
  53:lib/DaisySP/Source/Utility/dsp.h ****     float r;
  54:lib/DaisySP/Source/Utility/dsp.h **** #ifdef __arm__
  55:lib/DaisySP/Source/Utility/dsp.h ****     asm("vminnm.f32 %[d], %[n], %[m]" : [d] "=t"(r) : [n] "t"(a), [m] "t"(b) :);
  56:lib/DaisySP/Source/Utility/dsp.h **** #else
  57:lib/DaisySP/Source/Utility/dsp.h ****     r = (a < b) ? a : b;
  58:lib/DaisySP/Source/Utility/dsp.h **** #endif // __arm__
  59:lib/DaisySP/Source/Utility/dsp.h ****     return r;
  60:lib/DaisySP/Source/Utility/dsp.h **** }
  61:lib/DaisySP/Source/Utility/dsp.h **** 
  62:lib/DaisySP/Source/Utility/dsp.h **** /** quick fp clamp
  63:lib/DaisySP/Source/Utility/dsp.h **** */
  64:lib/DaisySP/Source/Utility/dsp.h **** inline float fclamp(float in, float min, float max)
  65:lib/DaisySP/Source/Utility/dsp.h **** {
  66:lib/DaisySP/Source/Utility/dsp.h ****     return fmin(fmax(in, min), max);
  67:lib/DaisySP/Source/Utility/dsp.h **** }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 74


  68:lib/DaisySP/Source/Utility/dsp.h **** 
  69:lib/DaisySP/Source/Utility/dsp.h **** /** From Musicdsp.org "Fast power and root estimates for 32bit floats)
  70:lib/DaisySP/Source/Utility/dsp.h **** Original code by Stefan Stenzel
  71:lib/DaisySP/Source/Utility/dsp.h **** These are approximations
  72:lib/DaisySP/Source/Utility/dsp.h **** */
  73:lib/DaisySP/Source/Utility/dsp.h **** inline float fastpower(float f, int n)
  74:lib/DaisySP/Source/Utility/dsp.h **** {
  75:lib/DaisySP/Source/Utility/dsp.h ****     long *lp, l;
  76:lib/DaisySP/Source/Utility/dsp.h ****     lp = (long *)(&f);
  77:lib/DaisySP/Source/Utility/dsp.h ****     l  = *lp;
  78:lib/DaisySP/Source/Utility/dsp.h ****     l -= 0x3F800000;
  79:lib/DaisySP/Source/Utility/dsp.h ****     l <<= (n - 1);
  80:lib/DaisySP/Source/Utility/dsp.h ****     l += 0x3F800000;
  81:lib/DaisySP/Source/Utility/dsp.h ****     *lp = l;
  82:lib/DaisySP/Source/Utility/dsp.h ****     return f;
  83:lib/DaisySP/Source/Utility/dsp.h **** }
  84:lib/DaisySP/Source/Utility/dsp.h **** 
  85:lib/DaisySP/Source/Utility/dsp.h **** inline float fastroot(float f, int n)
  86:lib/DaisySP/Source/Utility/dsp.h **** {
  87:lib/DaisySP/Source/Utility/dsp.h ****     long *lp, l;
  88:lib/DaisySP/Source/Utility/dsp.h ****     lp = (long *)(&f);
  89:lib/DaisySP/Source/Utility/dsp.h ****     l  = *lp;
  90:lib/DaisySP/Source/Utility/dsp.h ****     l -= 0x3F800000;
  91:lib/DaisySP/Source/Utility/dsp.h ****     l >>= (n - 1);
  92:lib/DaisySP/Source/Utility/dsp.h ****     l += 0x3F800000;
  93:lib/DaisySP/Source/Utility/dsp.h ****     *lp = l;
  94:lib/DaisySP/Source/Utility/dsp.h ****     return f;
  95:lib/DaisySP/Source/Utility/dsp.h **** }
  96:lib/DaisySP/Source/Utility/dsp.h **** 
  97:lib/DaisySP/Source/Utility/dsp.h **** /** Significantly more efficient than fmodf(x, 1.0f) for calculating
  98:lib/DaisySP/Source/Utility/dsp.h ****  *  the decimal part of a floating point value.
  99:lib/DaisySP/Source/Utility/dsp.h ****  */
 100:lib/DaisySP/Source/Utility/dsp.h **** inline float fastmod1f(float x)
 101:lib/DaisySP/Source/Utility/dsp.h **** {
 102:lib/DaisySP/Source/Utility/dsp.h ****     return x - floorf(x);
 103:lib/DaisySP/Source/Utility/dsp.h **** }
 104:lib/DaisySP/Source/Utility/dsp.h **** 
 105:lib/DaisySP/Source/Utility/dsp.h **** /** From http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
 106:lib/DaisySP/Source/Utility/dsp.h **** No approximation, pow10f(x) gives a 90% speed increase over powf(10.f, x)
 107:lib/DaisySP/Source/Utility/dsp.h **** */
 108:lib/DaisySP/Source/Utility/dsp.h **** inline float pow10f(float f)
 109:lib/DaisySP/Source/Utility/dsp.h **** {
 110:lib/DaisySP/Source/Utility/dsp.h ****     return expf(2.302585092994046f * f);
 111:lib/DaisySP/Source/Utility/dsp.h **** }
 112:lib/DaisySP/Source/Utility/dsp.h **** 
 113:lib/DaisySP/Source/Utility/dsp.h **** /* Original code for fastlog2f by Dr. Paul Beckmann from the ARM community forum, adapted from the 
 114:lib/DaisySP/Source/Utility/dsp.h **** About 25% performance increase over std::log10f
 115:lib/DaisySP/Source/Utility/dsp.h **** */
 116:lib/DaisySP/Source/Utility/dsp.h **** inline float fastlog2f(float f)
 117:lib/DaisySP/Source/Utility/dsp.h **** {
 118:lib/DaisySP/Source/Utility/dsp.h ****     float frac;
 119:lib/DaisySP/Source/Utility/dsp.h ****     int   exp;
 120:lib/DaisySP/Source/Utility/dsp.h ****     frac = frexpf(fabsf(f), &exp);
 121:lib/DaisySP/Source/Utility/dsp.h ****     f    = 1.23149591368684f;
 122:lib/DaisySP/Source/Utility/dsp.h ****     f *= frac;
 123:lib/DaisySP/Source/Utility/dsp.h ****     f += -4.11852516267426f;
 124:lib/DaisySP/Source/Utility/dsp.h ****     f *= frac;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 75


 125:lib/DaisySP/Source/Utility/dsp.h ****     f += 6.02197014179219f;
 126:lib/DaisySP/Source/Utility/dsp.h ****     f *= frac;
 127:lib/DaisySP/Source/Utility/dsp.h ****     f += -3.13396450166353f;
 128:lib/DaisySP/Source/Utility/dsp.h ****     f += exp;
 129:lib/DaisySP/Source/Utility/dsp.h ****     return (f);
 130:lib/DaisySP/Source/Utility/dsp.h **** }
 131:lib/DaisySP/Source/Utility/dsp.h **** 
 132:lib/DaisySP/Source/Utility/dsp.h **** inline float fastlog10f(float f)
 133:lib/DaisySP/Source/Utility/dsp.h **** {
 134:lib/DaisySP/Source/Utility/dsp.h ****     return fastlog2f(f) * 0.3010299956639812f;
 135:lib/DaisySP/Source/Utility/dsp.h **** }
 136:lib/DaisySP/Source/Utility/dsp.h **** 
 137:lib/DaisySP/Source/Utility/dsp.h **** /** Midi to frequency helper
 138:lib/DaisySP/Source/Utility/dsp.h **** */
 139:lib/DaisySP/Source/Utility/dsp.h **** inline float mtof(float m)
 140:lib/DaisySP/Source/Utility/dsp.h **** {
 141:lib/DaisySP/Source/Utility/dsp.h ****     return powf(2, (m - 69.0f) / 12.0f) * 440.0f;
 142:lib/DaisySP/Source/Utility/dsp.h **** }
 143:lib/DaisySP/Source/Utility/dsp.h **** 
 144:lib/DaisySP/Source/Utility/dsp.h **** 
 145:lib/DaisySP/Source/Utility/dsp.h **** /** one pole lpf
 146:lib/DaisySP/Source/Utility/dsp.h **** out is passed by reference, and must be retained between
 147:lib/DaisySP/Source/Utility/dsp.h **** calls to properly filter the signal
 148:lib/DaisySP/Source/Utility/dsp.h **** coeff can be calculated:
 149:lib/DaisySP/Source/Utility/dsp.h **** coeff = 1.0 / (time * sample_rate) ; where time is in seconds
 150:lib/DaisySP/Source/Utility/dsp.h **** */
 151:lib/DaisySP/Source/Utility/dsp.h **** inline void fonepole(float &out, float in, float coeff)
 152:lib/DaisySP/Source/Utility/dsp.h **** {
 153:lib/DaisySP/Source/Utility/dsp.h ****     out += coeff * (in - out);
 2567              		.loc 7 153 24 discriminator 2 view .LVU799
 2568 002a D3ED026A 		vldr.32	s13, [r3, #8]
 2569              		.loc 7 153 9 discriminator 2 view .LVU800
 2570 002e 93ED036A 		vldr.32	s12, [r3, #12]
 2571              	.LBE321:
 2572              	.LBE320:
 2573              	.LBB324:
 2574              	.LBB325:
  64:lib/DaisySP/Source/Utility/delayline.h ****                                                            : max_size - 1;
 2575              		.loc 6 64 60 discriminator 2 view .LVU801
 2576 0032 4BF67F35 		movw	r5, #47999
 2577              	.LBE325:
 2578              	.LBE324:
 2579              	.LBE377:
 2580              	.LBE383:
 2581              		.loc 3 444 44 discriminator 2 view .LVU802
 2582 0036 94ED007A 		vldr.32	s14, [r4]
 2583 003a 27EE277A 		vmul.f32	s14, s14, s15
 2584              		.loc 3 444 15 discriminator 2 view .LVU803
 2585 003e F5EE007A 		vmov.f32	s15, #2.5e-1
 2586 0042 27EE277A 		vmul.f32	s14, s14, s15
 2587              	.LVL161:
 445:AudioProcessor.cpp ****         float wet    = delay.Process(sample);
 2588              		.loc 3 445 9 is_stmt 1 discriminator 2 view .LVU804
 2589              	.LBB384:
 2590              	.LBI312:
  67:Effects/EchoDelay.h ****         }
  68:Effects/EchoDelay.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 76


  69:Effects/EchoDelay.h ****         inline float Process(const float in)
 2591              		.loc 5 69 22 discriminator 2 view .LVU805
 2592              	.LBB378:
 2593              	.LBB328:
 2594              	.LBI320:
 151:lib/DaisySP/Source/Utility/dsp.h **** {
 2595              		.loc 7 151 13 discriminator 2 view .LVU806
 2596              	.LBB322:
 2597              		.loc 7 153 5 discriminator 2 view .LVU807
 2598              		.loc 7 153 9 is_stmt 0 discriminator 2 view .LVU808
 2599 0046 D3ED017A 		vldr.32	s15, [r3, #4]
 2600              		.loc 7 153 24 discriminator 2 view .LVU809
 2601 004a 76EEE76A 		vsub.f32	s13, s13, s15
 2602              		.loc 7 153 9 discriminator 2 view .LVU810
 2603 004e E6EE267A 		vfma.f32	s15, s12, s13
 2604              	.LBE322:
 2605              	.LBE328:
  70:Effects/EchoDelay.h ****         {
  71:Effects/EchoDelay.h ****             float out;
  72:Effects/EchoDelay.h ****             daisysp::fonepole(delay_time_current_, delay_time_target_, delay_smooth_coef_);
  73:Effects/EchoDelay.h ****             delayLine_.SetDelay(delay_time_current_ * sample_rate_);
 2606              		.loc 5 73 32 discriminator 2 view .LVU811
 2607 0052 D3ED006A 		vldr.32	s13, [r3]
 2608              	.LBB329:
 2609              	.LBB323:
 2610              		.loc 7 153 9 discriminator 2 view .LVU812
 2611 0056 C3ED017A 		vstr.32	s15, [r3, #4]
 2612              	.LVL162:
 2613              		.loc 7 153 9 discriminator 2 view .LVU813
 2614              	.LBE323:
 2615              	.LBE329:
 2616              		.loc 5 73 32 discriminator 2 view .LVU814
 2617 005a 67EEA67A 		vmul.f32	s15, s15, s13
 2618              	.LVL163:
 2619              	.LBB330:
 2620              	.LBI324:
  60:lib/DaisySP/Source/Utility/delayline.h ****     {
 2621              		.loc 6 60 17 is_stmt 1 discriminator 2 view .LVU815
 2622              	.LBB326:
  62:lib/DaisySP/Source/Utility/delayline.h ****         frac_             = delay - static_cast<float>(int_delay);
 2623              		.loc 6 62 17 is_stmt 0 discriminator 2 view .LVU816
 2624 005e FDEEE76A 		vcvt.s32.f32	s13, s15
 2625              	.LVL164:
  64:lib/DaisySP/Source/Utility/delayline.h ****                                                            : max_size - 1;
 2626              		.loc 6 64 60 discriminator 2 view .LVU817
 2627 0062 16EE904A 		vmov	r4, s13	@ int
  63:lib/DaisySP/Source/Utility/delayline.h ****         delay_ = static_cast<size_t>(int_delay) < max_size ? int_delay
 2628              		.loc 6 63 37 discriminator 2 view .LVU818
 2629 0066 B8EEE66A 		vcvt.f32.s32	s12, s13
  64:lib/DaisySP/Source/Utility/delayline.h ****                                                            : max_size - 1;
 2630              		.loc 6 64 60 discriminator 2 view .LVU819
 2631 006a AC42     		cmp	r4, r5
  63:lib/DaisySP/Source/Utility/delayline.h ****         delay_ = static_cast<size_t>(int_delay) < max_size ? int_delay
 2632              		.loc 6 63 35 discriminator 2 view .LVU820
 2633 006c 77EEC67A 		vsub.f32	s15, s15, s12
 2634              	.LVL165:
  64:lib/DaisySP/Source/Utility/delayline.h ****                                                            : max_size - 1;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 77


 2635              		.loc 6 64 60 discriminator 2 view .LVU821
 2636 0070 28BF     		it	cs
 2637 0072 2C46     		movcs	r4, r5
 2638 0074 2546     		mov	r5, r4
 2639              	.LVL166:
  64:lib/DaisySP/Source/Utility/delayline.h ****                                                            : max_size - 1;
 2640              		.loc 6 64 60 discriminator 2 view .LVU822
 2641              	.LBE326:
 2642              	.LBE330:
 2643              	.LBB331:
 2644              	.LBI314:
  78:lib/DaisySP/Source/Utility/delayline.h ****     {
 2645              		.loc 6 78 20 is_stmt 1 discriminator 2 view .LVU823
 2646              	.LBB316:
 2647              		.loc 6 80 33 is_stmt 0 discriminator 2 view .LVU824
 2648 0076 1419     		adds	r4, r2, r4
 2649              	.LBE316:
 2650              	.LBE331:
 2651              	.LBB332:
 2652              	.LBB327:
  63:lib/DaisySP/Source/Utility/delayline.h ****         delay_ = static_cast<size_t>(int_delay) < max_size ? int_delay
 2653              		.loc 6 63 27 discriminator 2 view .LVU825
 2654 0078 C3ED057A 		vstr.32	s15, [r3, #20]
 2655              	.LBE327:
 2656              	.LBE332:
 2657              	.LBB333:
 2658              	.LBB317:
 2659              		.loc 6 80 43 discriminator 2 view .LVU826
 2660 007c B4FBFCF6 		udiv	r6, r4, ip
 2661 0080 0CFB1646 		mls	r6, ip, r6, r4
  81:lib/DaisySP/Source/Utility/delayline.h ****         T b = line_[(write_ptr_ + delay_ + 1) % max_size];
 2662              		.loc 6 81 42 discriminator 2 view .LVU827
 2663 0084 0134     		adds	r4, r4, #1
  80:lib/DaisySP/Source/Utility/delayline.h ****         T b = line_[(write_ptr_ + delay_ + 1) % max_size];
 2664              		.loc 6 80 11 discriminator 2 view .LVU828
 2665 0086 03EB8606 		add	r6, r3, r6, lsl #2
 2666 008a D6ED086A 		vldr.32	s13, [r6, #32]
 2667              	.LVL167:
 2668              		.loc 6 81 47 discriminator 2 view .LVU829
 2669 008e B4FBFCF6 		udiv	r6, r4, ip
 2670 0092 0CFB1644 		mls	r4, ip, r6, r4
 2671              		.loc 6 81 11 discriminator 2 view .LVU830
 2672 0096 03EB8404 		add	r4, r3, r4, lsl #2
  82:lib/DaisySP/Source/Utility/delayline.h ****         return a + (b - a) * frac_;
 2673              		.loc 6 82 23 discriminator 2 view .LVU831
 2674 009a 94ED086A 		vldr.32	s12, [r4, #32]
 2675              	.LBE317:
 2676              	.LBE333:
 2677              	.LBB334:
 2678              	.LBB335:
 2679              	.LBB336:
 2680              	.LBB337:
 2681              	.LBB338:
 2682              		.file 8 "Effects/BiquadFilters.h"
   1:Effects/BiquadFilters.h **** #pragma once
   2:Effects/BiquadFilters.h **** #ifndef INFS_BIQUADFILTERS_H
   3:Effects/BiquadFilters.h **** #define INFS_BIQUADFILTERS_H
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 78


   4:Effects/BiquadFilters.h **** 
   5:Effects/BiquadFilters.h **** #include <cassert>
   6:Effects/BiquadFilters.h **** #include <array>
   7:Effects/BiquadFilters.h **** #include <daisysp.h>
   8:Effects/BiquadFilters.h **** 
   9:Effects/BiquadFilters.h **** namespace infrasonic {
  10:Effects/BiquadFilters.h **** 
  11:Effects/BiquadFilters.h **** /**
  12:Effects/BiquadFilters.h ****  *  Single precision 2nd order biquad filter section with support for stereo processing.
  13:Effects/BiquadFilters.h ****  *  NOTE: There are templated filter definitions at the bottom of this file for convenience. 
  14:Effects/BiquadFilters.h ****  */
  15:Effects/BiquadFilters.h **** class BiquadSection {
  16:Effects/BiquadFilters.h **** 
  17:Effects/BiquadFilters.h ****     public:
  18:Effects/BiquadFilters.h **** 
  19:Effects/BiquadFilters.h ****         enum class FilterType {
  20:Effects/BiquadFilters.h ****             LowPass,
  21:Effects/BiquadFilters.h ****             HighPass,
  22:Effects/BiquadFilters.h ****             BandPass
  23:Effects/BiquadFilters.h ****         };
  24:Effects/BiquadFilters.h **** 
  25:Effects/BiquadFilters.h ****         // Assumes normalized coefficients (a0 == 1)
  26:Effects/BiquadFilters.h ****         // Ordering numerator then denominator: {b0, b1, b2, a1, a2}
  27:Effects/BiquadFilters.h ****         using Coefficients = std::array<float, 5>;
  28:Effects/BiquadFilters.h **** 
  29:Effects/BiquadFilters.h ****         static const Coefficients CalculateCoefficients(const FilterType type, 
  30:Effects/BiquadFilters.h ****                                                         const float sample_rate,
  31:Effects/BiquadFilters.h ****                                                         const float cutoff_hz,
  32:Effects/BiquadFilters.h ****                                                         const float q);
  33:Effects/BiquadFilters.h **** 
  34:Effects/BiquadFilters.h ****         BiquadSection() {}
  35:Effects/BiquadFilters.h ****         ~BiquadSection() {}
  36:Effects/BiquadFilters.h **** 
  37:Effects/BiquadFilters.h ****         void SetCoefficients(const Coefficients coefficients) { coefs_ = coefficients; }
  38:Effects/BiquadFilters.h **** 
  39:Effects/BiquadFilters.h ****         inline float Process(const float in, const int channel)
  40:Effects/BiquadFilters.h ****         {
  41:Effects/BiquadFilters.h ****             assert(channel < 2);
  42:Effects/BiquadFilters.h **** 
  43:Effects/BiquadFilters.h ****             // TODO: arm accelerated version
  44:Effects/BiquadFilters.h **** 
  45:Effects/BiquadFilters.h ****             const float &b0 = coefs_[0];
  46:Effects/BiquadFilters.h ****             const float &b1 = coefs_[1];
  47:Effects/BiquadFilters.h ****             const float &b2 = coefs_[2];
  48:Effects/BiquadFilters.h ****             const float &a1 = coefs_[3];
  49:Effects/BiquadFilters.h ****             const float &a2 = coefs_[4];
  50:Effects/BiquadFilters.h **** 
  51:Effects/BiquadFilters.h ****             // Transposed direct form 2
  52:Effects/BiquadFilters.h ****             float y = b0 * in + s1_[channel];
 2683              		.loc 8 52 23 discriminator 2 view .LVU832
 2684 009e 394C     		ldr	r4, .L177+12
 2685              	.LBE338:
 2686              	.LBE337:
 2687              	.LBE336:
 2688              	.LBE335:
 2689              	.LBE334:
 2690              	.LBB351:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 79


 2691              	.LBB318:
 2692              		.loc 6 82 23 discriminator 2 view .LVU833
 2693 00a0 36EE666A 		vsub.f32	s12, s12, s13
 2694              	.LBE318:
 2695              	.LBE351:
 2696              	.LBB352:
 2697              	.LBB348:
 2698              	.LBB345:
 2699              	.LBB342:
 2700              	.LBB339:
  53:Effects/BiquadFilters.h ****             s1_[channel] = s2_[channel] + in * b1 - a1 * y;
 2701              		.loc 8 53 41 discriminator 2 view .LVU834
 2702 00a4 D4ED015A 		vldr.32	s11, [r4, #4]
 2703              	.LBE339:
 2704              	.LBE342:
 2705              	.LBE345:
 2706              	.LBE348:
 2707              	.LBE352:
 2708              	.LBB353:
 2709              	.LBB319:
 2710              		.loc 6 82 30 discriminator 2 view .LVU835
 2711 00a8 E6EE276A 		vfma.f32	s13, s12, s15
 2712              	.LVL168:
 2713              		.loc 6 82 30 discriminator 2 view .LVU836
 2714              	.LBE319:
 2715              	.LBE353:
 2716              	.LBB354:
 2717              	.LBI334:
  54:Effects/BiquadFilters.h ****             s2_[channel] = b2 * in - a2 * y;
  55:Effects/BiquadFilters.h ****             return y;
  56:Effects/BiquadFilters.h ****         }
  57:Effects/BiquadFilters.h **** 
  58:Effects/BiquadFilters.h ****     private:
  59:Effects/BiquadFilters.h ****         // coef
  60:Effects/BiquadFilters.h ****         Coefficients coefs_{0, 0, 0, 0, 0};
  61:Effects/BiquadFilters.h **** 
  62:Effects/BiquadFilters.h ****         // state
  63:Effects/BiquadFilters.h ****         float s1_[2] = {0, 0};
  64:Effects/BiquadFilters.h ****         float s2_[2] = {0, 0};
  65:Effects/BiquadFilters.h **** 
  66:Effects/BiquadFilters.h **** };
  67:Effects/BiquadFilters.h **** 
  68:Effects/BiquadFilters.h **** /// Templated cascaded biquad filter. Filter Order = 2 * NumSections.
  69:Effects/BiquadFilters.h **** /// NOTE: Only supports even-ordered filters.
  70:Effects/BiquadFilters.h **** template<size_t NumSections, BiquadSection::FilterType FilterType>
  71:Effects/BiquadFilters.h **** class BiquadCascade {
  72:Effects/BiquadFilters.h **** 
  73:Effects/BiquadFilters.h ****     static_assert(NumSections > 0, "Must have at least one section");
  74:Effects/BiquadFilters.h **** 
  75:Effects/BiquadFilters.h ****     public:
  76:Effects/BiquadFilters.h ****         BiquadCascade() {}
  77:Effects/BiquadFilters.h ****         ~BiquadCascade() {}
  78:Effects/BiquadFilters.h **** 
  79:Effects/BiquadFilters.h ****         // Individual param update methods recalculate coefficients
  80:Effects/BiquadFilters.h ****         // every time one of them is called. To update everything at once,
  81:Effects/BiquadFilters.h ****         // use SetParams()
  82:Effects/BiquadFilters.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 80


  83:Effects/BiquadFilters.h ****         void Init(const float sample_rate) {
  84:Effects/BiquadFilters.h ****             sample_rate_ = sample_rate;
  85:Effects/BiquadFilters.h ****             cutoff_hz_ = sample_rate * 0.25f;
  86:Effects/BiquadFilters.h ****             SetFlatResponse();
  87:Effects/BiquadFilters.h ****         }
  88:Effects/BiquadFilters.h **** 
  89:Effects/BiquadFilters.h ****         inline void SetCutoff(const float cutoff_hz)
  90:Effects/BiquadFilters.h ****         {
  91:Effects/BiquadFilters.h ****             cutoff_hz_ = daisysp::fclamp(cutoff_hz, 1.f, sample_rate_ * 0.5f);
  92:Effects/BiquadFilters.h ****             updateCoefficients();
  93:Effects/BiquadFilters.h ****         }
  94:Effects/BiquadFilters.h **** 
  95:Effects/BiquadFilters.h ****         inline void SetQ(const float q)
  96:Effects/BiquadFilters.h ****         {
  97:Effects/BiquadFilters.h ****             for (size_t i=0; i<NumSections; i++) {
  98:Effects/BiquadFilters.h ****                 q_[i] = daisysp::fmax(q, 0.1f);
  99:Effects/BiquadFilters.h ****             }
 100:Effects/BiquadFilters.h ****             updateCoefficients();
 101:Effects/BiquadFilters.h ****         }
 102:Effects/BiquadFilters.h **** 
 103:Effects/BiquadFilters.h ****         /// Update params simultaneously, recalculating coefficients only once 
 104:Effects/BiquadFilters.h ****         inline void SetParams(const float cutoff_hz, const float q)
 105:Effects/BiquadFilters.h ****         {
 106:Effects/BiquadFilters.h ****             cutoff_hz_ = daisysp::fclamp(cutoff_hz, 1.f, sample_rate_ * 0.5f);
 107:Effects/BiquadFilters.h ****             for (size_t i=0; i<NumSections; i++) {
 108:Effects/BiquadFilters.h ****                 q_[i] = daisysp::fmax(q, 0.1f);
 109:Effects/BiquadFilters.h ****             }
 110:Effects/BiquadFilters.h ****             updateCoefficients();
 111:Effects/BiquadFilters.h ****         }
 112:Effects/BiquadFilters.h **** 
 113:Effects/BiquadFilters.h ****         /// Sets Q values in each section for a truly "flat" (-3dB cutoff point) response
 114:Effects/BiquadFilters.h ****         /// NOTE: per limitations of this class this only works for even-order filters
 115:Effects/BiquadFilters.h ****         inline void SetFlatResponse()
 116:Effects/BiquadFilters.h ****         {
 117:Effects/BiquadFilters.h ****             const float angleIncrement = 1.f / (4.f * static_cast<float>(NumSections));
 118:Effects/BiquadFilters.h ****             for (size_t i=0; i<NumSections; i++) {
 119:Effects/BiquadFilters.h ****                 q_[i] = 1.f / (2.f * cosf(PI_F * (angleIncrement * (i * 2 + 1))));
 120:Effects/BiquadFilters.h ****             }
 121:Effects/BiquadFilters.h ****             updateCoefficients();
 122:Effects/BiquadFilters.h ****         }
 123:Effects/BiquadFilters.h **** 
 124:Effects/BiquadFilters.h ****         inline float Process(const float in)
 2718              		.loc 8 124 22 is_stmt 1 discriminator 2 view .LVU837
 2719              	.LBB349:
 2720              	.LBB346:
 125:Effects/BiquadFilters.h ****         {
 126:Effects/BiquadFilters.h ****             float out = in;
 127:Effects/BiquadFilters.h ****             for (auto &biquad : biquads_) {
 2721              		.loc 8 127 13 discriminator 2 view .LVU838
 2722              	.LBB343:
 2723              	.LBI337:
  39:Effects/BiquadFilters.h ****         {
 2724              		.loc 8 39 22 discriminator 2 view .LVU839
 2725              	.LBB340:
  41:Effects/BiquadFilters.h **** 
 2726              		.loc 8 41 13 discriminator 2 view .LVU840
  45:Effects/BiquadFilters.h ****             const float &b1 = coefs_[1];
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 81


 2727              		.loc 8 45 13 discriminator 2 view .LVU841
  46:Effects/BiquadFilters.h ****             const float &b2 = coefs_[2];
 2728              		.loc 8 46 13 discriminator 2 view .LVU842
  47:Effects/BiquadFilters.h ****             const float &a1 = coefs_[3];
 2729              		.loc 8 47 13 discriminator 2 view .LVU843
  48:Effects/BiquadFilters.h ****             const float &a2 = coefs_[4];
 2730              		.loc 8 48 13 discriminator 2 view .LVU844
  49:Effects/BiquadFilters.h **** 
 2731              		.loc 8 49 13 discriminator 2 view .LVU845
  52:Effects/BiquadFilters.h ****             s1_[channel] = s2_[channel] + in * b1 - a1 * y;
 2732              		.loc 8 52 13 discriminator 2 view .LVU846
  52:Effects/BiquadFilters.h ****             s1_[channel] = s2_[channel] + in * b1 - a1 * y;
 2733              		.loc 8 52 19 is_stmt 0 discriminator 2 view .LVU847
 2734 00ac 94ED006A 		vldr.32	s12, [r4]
 2735 00b0 D4ED057A 		vldr.32	s15, [r4, #20]
 2736 00b4 E6EE267A 		vfma.f32	s15, s12, s13
 2737              	.LVL169:
  53:Effects/BiquadFilters.h ****             s2_[channel] = b2 * in - a2 * y;
 2738              		.loc 8 53 13 is_stmt 1 discriminator 2 view .LVU848
  53:Effects/BiquadFilters.h ****             s2_[channel] = b2 * in - a2 * y;
 2739              		.loc 8 53 41 is_stmt 0 discriminator 2 view .LVU849
 2740 00b8 94ED076A 		vldr.32	s12, [r4, #28]
 2741 00bc A6EEA56A 		vfma.f32	s12, s13, s11
  53:Effects/BiquadFilters.h ****             s2_[channel] = b2 * in - a2 * y;
 2742              		.loc 8 53 51 discriminator 2 view .LVU850
 2743 00c0 D4ED035A 		vldr.32	s11, [r4, #12]
 2744 00c4 A5EEE76A 		vfms.f32	s12, s11, s15
  54:Effects/BiquadFilters.h ****             return y;
 2745              		.loc 8 54 36 discriminator 2 view .LVU851
 2746 00c8 D4ED025A 		vldr.32	s11, [r4, #8]
  53:Effects/BiquadFilters.h ****             s2_[channel] = b2 * in - a2 * y;
 2747              		.loc 8 53 26 discriminator 2 view .LVU852
 2748 00cc 84ED056A 		vstr.32	s12, [r4, #20]
  54:Effects/BiquadFilters.h ****             return y;
 2749              		.loc 8 54 13 is_stmt 1 discriminator 2 view .LVU853
  54:Effects/BiquadFilters.h ****             return y;
 2750              		.loc 8 54 41 is_stmt 0 discriminator 2 view .LVU854
 2751 00d0 94ED046A 		vldr.32	s12, [r4, #16]
  54:Effects/BiquadFilters.h ****             return y;
 2752              		.loc 8 54 36 discriminator 2 view .LVU855
 2753 00d4 26EE676A 		vnmul.f32	s12, s12, s15
 2754 00d8 A6EEA56A 		vfma.f32	s12, s13, s11
 2755              	.LBE340:
 2756              	.LBE343:
 2757              	.LBE346:
 2758              	.LBE349:
 2759              	.LBE354:
 2760              	.LBB355:
 2761              	.LBB356:
 154:lib/DaisySP/Source/Utility/dsp.h **** }
 155:lib/DaisySP/Source/Utility/dsp.h **** 
 156:lib/DaisySP/Source/Utility/dsp.h **** /** Curves to use with the fmap function */
 157:lib/DaisySP/Source/Utility/dsp.h **** enum class Mapping
 158:lib/DaisySP/Source/Utility/dsp.h **** {
 159:lib/DaisySP/Source/Utility/dsp.h ****     LINEAR,
 160:lib/DaisySP/Source/Utility/dsp.h ****     EXP,
 161:lib/DaisySP/Source/Utility/dsp.h ****     LOG,
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 82


 162:lib/DaisySP/Source/Utility/dsp.h **** };
 163:lib/DaisySP/Source/Utility/dsp.h **** 
 164:lib/DaisySP/Source/Utility/dsp.h **** /** Maps a float between a specified range, using a specified curve.
 165:lib/DaisySP/Source/Utility/dsp.h ****  *
 166:lib/DaisySP/Source/Utility/dsp.h ****  *  \param in a value between 0 to 1 that will be mapped to the new range.
 167:lib/DaisySP/Source/Utility/dsp.h ****  *  \param min the new minimum value
 168:lib/DaisySP/Source/Utility/dsp.h ****  *  \param max the new maxmimum value
 169:lib/DaisySP/Source/Utility/dsp.h ****  *  \param curve a Mapping Value to adjust the response curve of the transformation
 170:lib/DaisySP/Source/Utility/dsp.h ****  *               defaults to Linear. @see Mapping
 171:lib/DaisySP/Source/Utility/dsp.h ****  *
 172:lib/DaisySP/Source/Utility/dsp.h ****  *  When using the log curve min and max, must be greater than zero.
 173:lib/DaisySP/Source/Utility/dsp.h ****  *
 174:lib/DaisySP/Source/Utility/dsp.h ****  *  \retval returns the transformed float within the new range.
 175:lib/DaisySP/Source/Utility/dsp.h **** */
 176:lib/DaisySP/Source/Utility/dsp.h **** inline float
 177:lib/DaisySP/Source/Utility/dsp.h **** fmap(float in, float min, float max, Mapping curve = Mapping::LINEAR)
 178:lib/DaisySP/Source/Utility/dsp.h **** {
 179:lib/DaisySP/Source/Utility/dsp.h ****     switch(curve)
 180:lib/DaisySP/Source/Utility/dsp.h ****     {
 181:lib/DaisySP/Source/Utility/dsp.h ****         case Mapping::EXP:
 182:lib/DaisySP/Source/Utility/dsp.h ****             return fclamp(min + (in * in) * (max - min), min, max);
 183:lib/DaisySP/Source/Utility/dsp.h ****         case Mapping::LOG:
 184:lib/DaisySP/Source/Utility/dsp.h ****         {
 185:lib/DaisySP/Source/Utility/dsp.h ****             const float a = 1.f / log10f(max / min);
 186:lib/DaisySP/Source/Utility/dsp.h ****             return fclamp(min * powf(10, in / a), min, max);
 187:lib/DaisySP/Source/Utility/dsp.h ****         }
 188:lib/DaisySP/Source/Utility/dsp.h ****         case Mapping::LINEAR:
 189:lib/DaisySP/Source/Utility/dsp.h ****         default: return fclamp(min + in * (max - min), min, max);
 190:lib/DaisySP/Source/Utility/dsp.h ****     }
 191:lib/DaisySP/Source/Utility/dsp.h **** }
 192:lib/DaisySP/Source/Utility/dsp.h **** 
 193:lib/DaisySP/Source/Utility/dsp.h **** /** Simple 3-point median filter
 194:lib/DaisySP/Source/Utility/dsp.h **** c/o stephen mccaul
 195:lib/DaisySP/Source/Utility/dsp.h **** */
 196:lib/DaisySP/Source/Utility/dsp.h **** template <typename T>
 197:lib/DaisySP/Source/Utility/dsp.h **** T median(T a, T b, T c)
 198:lib/DaisySP/Source/Utility/dsp.h **** {
 199:lib/DaisySP/Source/Utility/dsp.h ****     return (b < a) ? (b < c) ? (c < a) ? c : a : b
 200:lib/DaisySP/Source/Utility/dsp.h ****                    : (a < c) ? (c < b) ? c : b : a;
 201:lib/DaisySP/Source/Utility/dsp.h **** }
 202:lib/DaisySP/Source/Utility/dsp.h **** 
 203:lib/DaisySP/Source/Utility/dsp.h **** /** Ported from pichenettes/eurorack/plaits/dsp/oscillator/oscillator.h
 204:lib/DaisySP/Source/Utility/dsp.h **** */
 205:lib/DaisySP/Source/Utility/dsp.h **** inline float ThisBlepSample(float t)
 206:lib/DaisySP/Source/Utility/dsp.h **** {
 207:lib/DaisySP/Source/Utility/dsp.h ****     return 0.5f * t * t;
 208:lib/DaisySP/Source/Utility/dsp.h **** }
 209:lib/DaisySP/Source/Utility/dsp.h **** 
 210:lib/DaisySP/Source/Utility/dsp.h **** /** Ported from pichenettes/eurorack/plaits/dsp/oscillator/oscillator.h
 211:lib/DaisySP/Source/Utility/dsp.h **** */
 212:lib/DaisySP/Source/Utility/dsp.h **** inline float NextBlepSample(float t)
 213:lib/DaisySP/Source/Utility/dsp.h **** {
 214:lib/DaisySP/Source/Utility/dsp.h ****     t = 1.0f - t;
 215:lib/DaisySP/Source/Utility/dsp.h ****     return -0.5f * t * t;
 216:lib/DaisySP/Source/Utility/dsp.h **** }
 217:lib/DaisySP/Source/Utility/dsp.h **** 
 218:lib/DaisySP/Source/Utility/dsp.h **** /** Ported from pichenettes/eurorack/plaits/dsp/oscillator/oscillator.h
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 83


 219:lib/DaisySP/Source/Utility/dsp.h **** */
 220:lib/DaisySP/Source/Utility/dsp.h **** inline float NextIntegratedBlepSample(float t)
 221:lib/DaisySP/Source/Utility/dsp.h **** {
 222:lib/DaisySP/Source/Utility/dsp.h ****     const float t1 = 0.5f * t;
 223:lib/DaisySP/Source/Utility/dsp.h ****     const float t2 = t1 * t1;
 224:lib/DaisySP/Source/Utility/dsp.h ****     const float t4 = t2 * t2;
 225:lib/DaisySP/Source/Utility/dsp.h ****     return 0.1875f - t1 + 1.5f * t2 - t4;
 226:lib/DaisySP/Source/Utility/dsp.h **** }
 227:lib/DaisySP/Source/Utility/dsp.h **** 
 228:lib/DaisySP/Source/Utility/dsp.h **** /** Ported from pichenettes/eurorack/plaits/dsp/oscillator/oscillator.h
 229:lib/DaisySP/Source/Utility/dsp.h **** */
 230:lib/DaisySP/Source/Utility/dsp.h **** inline float ThisIntegratedBlepSample(float t)
 231:lib/DaisySP/Source/Utility/dsp.h **** {
 232:lib/DaisySP/Source/Utility/dsp.h ****     return NextIntegratedBlepSample(1.0f - t);
 233:lib/DaisySP/Source/Utility/dsp.h **** }
 234:lib/DaisySP/Source/Utility/dsp.h **** 
 235:lib/DaisySP/Source/Utility/dsp.h **** /** Soft Limiting function ported extracted from pichenettes/stmlib */
 236:lib/DaisySP/Source/Utility/dsp.h **** inline float SoftLimit(float x)
 237:lib/DaisySP/Source/Utility/dsp.h **** {
 238:lib/DaisySP/Source/Utility/dsp.h ****     return x * (27.f + x * x) / (27.f + 9.f * x * x);
 239:lib/DaisySP/Source/Utility/dsp.h **** }
 240:lib/DaisySP/Source/Utility/dsp.h **** 
 241:lib/DaisySP/Source/Utility/dsp.h **** /** Soft Clipping function extracted from pichenettes/stmlib */
 242:lib/DaisySP/Source/Utility/dsp.h **** inline float SoftClip(float x)
 243:lib/DaisySP/Source/Utility/dsp.h **** {
 244:lib/DaisySP/Source/Utility/dsp.h ****     if(x < -3.0f)
 2762              		.loc 7 244 5 discriminator 2 view .LVU856
 2763 00dc F8EE086A 		vmov.f32	s13, #-3.0e+0
 2764              	.LVL170:
 2765              		.loc 7 244 5 discriminator 2 view .LVU857
 2766 00e0 F4EEE67A 		vcmpe.f32	s15, s13
 2767              	.LBE356:
 2768              	.LBE355:
 2769              	.LBB365:
 2770              	.LBB350:
 2771              	.LBB347:
 2772              	.LBB344:
 2773              	.LBB341:
  54:Effects/BiquadFilters.h ****             return y;
 2774              		.loc 8 54 26 discriminator 2 view .LVU858
 2775 00e4 84ED076A 		vstr.32	s12, [r4, #28]
  55:Effects/BiquadFilters.h ****         }
 2776              		.loc 8 55 13 is_stmt 1 discriminator 2 view .LVU859
 2777              	.LVL171:
  55:Effects/BiquadFilters.h ****         }
 2778              		.loc 8 55 13 is_stmt 0 discriminator 2 view .LVU860
 2779              	.LBE341:
 2780              	.LBE344:
 2781              		.loc 8 127 13 is_stmt 1 discriminator 2 view .LVU861
 2782              		.loc 8 127 13 discriminator 2 view .LVU862
 2783              		.loc 8 127 13 is_stmt 0 discriminator 2 view .LVU863
 2784              	.LBE347:
 2785              	.LBE350:
 2786              	.LBE365:
 2787              	.LBB366:
 2788              	.LBI355:
 242:lib/DaisySP/Source/Utility/dsp.h **** {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 84


 2789              		.loc 7 242 14 is_stmt 1 discriminator 2 view .LVU864
 2790              	.LBB363:
 2791              		.loc 7 244 5 discriminator 2 view .LVU865
 2792 00e8 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2793 00ec 39D4     		bmi	.L171
 2794              	.LVL172:
 2795              	.LBB357:
 2796              	.LBI357:
 242:lib/DaisySP/Source/Utility/dsp.h **** {
 2797              		.loc 7 242 14 view .LVU866
 2798              	.LBB358:
 245:lib/DaisySP/Source/Utility/dsp.h ****         return -1.0f;
 246:lib/DaisySP/Source/Utility/dsp.h ****     else if(x > 3.0f)
 2799              		.loc 7 246 10 view .LVU867
 2800 00ee F0EE086A 		vmov.f32	s13, #3.0e+0
 2801 00f2 F4EEE67A 		vcmpe.f32	s15, s13
 2802 00f6 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2803 00fa 35DC     		bgt	.L172
 247:lib/DaisySP/Source/Utility/dsp.h ****         return 1.0f;
 248:lib/DaisySP/Source/Utility/dsp.h ****     else
 249:lib/DaisySP/Source/Utility/dsp.h ****         return SoftLimit(x);
 2804              		.loc 7 249 9 view .LVU868
 2805              	.LVL173:
 2806              	.LBB359:
 2807              	.LBI359:
 236:lib/DaisySP/Source/Utility/dsp.h **** {
 2808              		.loc 7 236 14 view .LVU869
 2809              	.LBB360:
 238:lib/DaisySP/Source/Utility/dsp.h **** }
 2810              		.loc 7 238 5 view .LVU870
 238:lib/DaisySP/Source/Utility/dsp.h **** }
 2811              		.loc 7 238 22 is_stmt 0 view .LVU871
 2812 00fc F3EE0B6A 		vmov.f32	s13, #2.7e+1
 238:lib/DaisySP/Source/Utility/dsp.h **** }
 2813              		.loc 7 238 45 view .LVU872
 2814 0100 F2EE025A 		vmov.f32	s11, #9.0e+0
 238:lib/DaisySP/Source/Utility/dsp.h **** }
 2815              		.loc 7 238 22 view .LVU873
 2816 0104 B0EE666A 		vmov.f32	s12, s13
 238:lib/DaisySP/Source/Utility/dsp.h **** }
 2817              		.loc 7 238 45 view .LVU874
 2818 0108 67EEA55A 		vmul.f32	s11, s15, s11
 238:lib/DaisySP/Source/Utility/dsp.h **** }
 2819              		.loc 7 238 22 view .LVU875
 2820 010c A7EEA76A 		vfma.f32	s12, s15, s15
 238:lib/DaisySP/Source/Utility/dsp.h **** }
 2821              		.loc 7 238 39 view .LVU876
 2822 0110 E5EEA76A 		vfma.f32	s13, s11, s15
 238:lib/DaisySP/Source/Utility/dsp.h **** }
 2823              		.loc 7 238 14 view .LVU877
 2824 0114 26EE276A 		vmul.f32	s12, s12, s15
 238:lib/DaisySP/Source/Utility/dsp.h **** }
 2825              		.loc 7 238 52 view .LVU878
 2826 0118 C6EE267A 		vdiv.f32	s15, s12, s13
 2827              	.LVL174:
 2828              	.L168:
 238:lib/DaisySP/Source/Utility/dsp.h **** }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 85


 2829              		.loc 7 238 52 view .LVU879
 2830              	.LBE360:
 2831              	.LBE359:
 2832              	.LBE358:
 2833              	.LBE357:
 2834              	.LBE363:
 2835              	.LBE366:
  74:Effects/EchoDelay.h ****             out = delayLine_.Read();
  75:Effects/EchoDelay.h ****             out = bpf_.Process(out);
  76:Effects/EchoDelay.h ****             out = daisysp::SoftClip(out);
  77:Effects/EchoDelay.h ****             delayLine_.Write(out * feedback_ + in);
 2836              		.loc 5 77 29 view .LVU880
 2837 011c 93ED046A 		vldr.32	s12, [r3, #16]
 2838              	.LBB367:
 2839              	.LBB368:
  72:lib/DaisySP/Source/Utility/delayline.h ****         write_ptr_        = (write_ptr_ - 1 + max_size) % max_size;
 2840              		.loc 6 72 27 view .LVU881
 2841 0120 03EB8204 		add	r4, r3, r2, lsl #2
 2842              	.LVL175:
  73:lib/DaisySP/Source/Utility/delayline.h ****     }
 2843              		.loc 6 73 45 view .LVU882
 2844 0124 02F53B42 		add	r2, r2, #47872
 2845              	.LBE368:
 2846              	.LBE367:
 2847              	.LBE378:
 2848              	.LBE384:
 2849              	.LBE311:
 442:AudioProcessor.cpp ****         // Use mono mix buffer for both channels
 2850              		.loc 3 442 36 view .LVU883
 2851 0128 0237     		adds	r7, r7, #2
 2852              	.LVL176:
 442:AudioProcessor.cpp ****         // Use mono mix buffer for both channels
 2853              		.loc 3 442 36 view .LVU884
 2854 012a 0830     		adds	r0, r0, #8
 2855              	.LBB389:
 2856              	.LBB385:
 2857              	.LBB379:
 2858              	.LBB372:
 2859              	.LBB369:
  73:lib/DaisySP/Source/Utility/delayline.h ****     }
 2860              		.loc 6 73 45 view .LVU885
 2861 012c 7F32     		adds	r2, r2, #127
 2862              	.LBE369:
 2863              	.LBE372:
 2864              		.loc 5 77 29 view .LVU886
 2865 012e F0EE476A 		vmov.f32	s13, s14
 2866 0132 E6EE276A 		vfma.f32	s13, s12, s15
 2867              	.LVL177:
 2868              	.LBB373:
 2869              	.LBI367:
  70:lib/DaisySP/Source/Utility/delayline.h ****     {
 2870              		.loc 6 70 17 is_stmt 1 view .LVU887
 2871              	.LBE373:
 2872              	.LBE379:
 2873              	.LBE385:
 446:AudioProcessor.cpp ****         float output_val = ((sample * dry_level) + (wet * wet_level)) * MASTER_VOLUME;
 2874              		.loc 3 446 57 is_stmt 0 view .LVU888
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 86


 2875 0136 65EE277A 		vmul.f32	s15, s10, s15
 2876              	.LVL178:
 2877              		.loc 3 446 50 view .LVU889
 2878 013a E0EE077A 		vfma.f32	s15, s0, s14
 2879              		.loc 3 446 15 view .LVU890
 2880 013e 9FED127A 		vldr.32	s14, .L177+16
 2881              	.LVL179:
 2882              	.LBB386:
 2883              	.LBB380:
 2884              	.LBB374:
 2885              	.LBB370:
  72:lib/DaisySP/Source/Utility/delayline.h ****         write_ptr_        = (write_ptr_ - 1 + max_size) % max_size;
 2886              		.loc 6 72 27 view .LVU891
 2887 0142 C4ED086A 		vstr.32	s13, [r4, #32]
  73:lib/DaisySP/Source/Utility/delayline.h ****     }
 2888              		.loc 6 73 57 view .LVU892
 2889 0146 4BF68034 		movw	r4, #48000
 2890 014a B2FBF4F6 		udiv	r6, r2, r4
 2891              	.LBE370:
 2892              	.LBE374:
 2893              	.LBE380:
 2894              	.LBE386:
 2895              		.loc 3 446 15 view .LVU893
 2896 014e 67EE877A 		vmul.f32	s15, s15, s14
 2897              	.LBB387:
 2898              	.LBB381:
 2899              	.LBB375:
 2900              	.LBB371:
  73:lib/DaisySP/Source/Utility/delayline.h ****     }
 2901              		.loc 6 73 57 view .LVU894
 2902 0152 04FB1622 		mls	r2, r4, r6, r2
 2903              	.LVL180:
  73:lib/DaisySP/Source/Utility/delayline.h ****     }
 2904              		.loc 6 73 57 view .LVU895
 2905              	.LBE371:
 2906              	.LBE375:
 2907              	.LBE381:
 2908              	.LBE387:
 2909              		.loc 3 446 9 is_stmt 1 view .LVU896
 447:AudioProcessor.cpp ****         out[i]     = output_val;
 2910              		.loc 3 447 9 view .LVU897
 2911              	.LBE389:
 442:AudioProcessor.cpp ****         // Use mono mix buffer for both channels
 2912              		.loc 3 442 5 is_stmt 0 view .LVU898
 2913 0156 0124     		movs	r4, #1
 2914              	.LBB390:
 2915              		.loc 3 447 20 view .LVU899
 2916 0158 40ED027A 		vstr.32	s15, [r0, #-8]
 2917              	.LVL181:
 448:AudioProcessor.cpp ****         out[i+1]   = output_val;
 2918              		.loc 3 448 9 is_stmt 1 view .LVU900
 2919              		.loc 3 448 20 is_stmt 0 view .LVU901
 2920 015c 40ED017A 		vstr.32	s15, [r0, #-4]
 2921              	.LBE390:
 442:AudioProcessor.cpp ****         // Use mono mix buffer for both channels
 2922              		.loc 3 442 5 is_stmt 1 view .LVU902
 2923              	.LVL182:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 87


 442:AudioProcessor.cpp ****         // Use mono mix buffer for both channels
 2924              		.loc 3 442 5 is_stmt 0 view .LVU903
 2925 0160 58E7     		b	.L169
 2926              	.LVL183:
 2927              	.L171:
 2928              	.LBB391:
 2929              	.LBB388:
 2930              	.LBB382:
 2931              	.LBB376:
 2932              	.LBB364:
 245:lib/DaisySP/Source/Utility/dsp.h ****     else if(x > 3.0f)
 2933              		.loc 7 245 17 view .LVU904
 2934 0162 FFEE007A 		vmov.f32	s15, #-1.0e+0
 2935              	.LVL184:
 245:lib/DaisySP/Source/Utility/dsp.h ****     else if(x > 3.0f)
 2936              		.loc 7 245 17 view .LVU905
 2937 0166 D9E7     		b	.L168
 2938              	.LVL185:
 2939              	.L172:
 2940              	.LBB362:
 2941              	.LBB361:
 247:lib/DaisySP/Source/Utility/dsp.h ****     else
 2942              		.loc 7 247 16 view .LVU906
 2943 0168 F7EE007A 		vmov.f32	s15, #1.0e+0
 2944              	.LVL186:
 247:lib/DaisySP/Source/Utility/dsp.h ****     else
 2945              		.loc 7 247 16 view .LVU907
 2946 016c D6E7     		b	.L168
 2947              	.LVL187:
 2948              	.L167:
 247:lib/DaisySP/Source/Utility/dsp.h ****     else
 2949              		.loc 7 247 16 view .LVU908
 2950 016e 0CB1     		cbz	r4, .L166
 2951 0170 C3E90625 		strd	r2, r5, [r3, #24]
 2952              	.L166:
 2953              	.LBE361:
 2954              	.LBE362:
 2955              	.LBE364:
 2956              	.LBE376:
 2957              	.LBE382:
 2958              	.LBE388:
 2959              	.LBE391:
 2960              	.LBE310:
 449:AudioProcessor.cpp ****     }
 450:AudioProcessor.cpp **** }
 2961              		.loc 3 450 1 view .LVU909
 2962 0174 F0BD     		pop	{r4, r5, r6, r7, pc}
 2963              	.LVL188:
 2964              	.L178:
 2965              		.loc 3 450 1 view .LVU910
 2966 0176 00BF     		.align	2
 2967              	.L177:
 2968 0178 00000000 		.word	delay
 2969 017c 00000000 		.word	.LANCHOR16
 2970 0180 00000038 		.word	939524096
 2971 0184 2CEE0200 		.word	delay+192044
 2972 0188 3333333F 		.word	1060320051
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 88


 2973              		.cfi_endproc
 2974              	.LFE5068:
 2976              		.section	.text._Z25UpdatePerformanceMonitorsjPf,"ax",%progbits
 2977              		.align	1
 2978              		.global	_Z25UpdatePerformanceMonitorsjPf
 2979              		.syntax unified
 2980              		.thumb
 2981              		.thumb_func
 2983              	_Z25UpdatePerformanceMonitorsjPf:
 2984              	.LVL189:
 2985              	.LFB5069:
 451:AudioProcessor.cpp **** 
 452:AudioProcessor.cpp **** void UpdatePerformanceMonitors(size_t size, AudioHandle::InterleavingOutputBuffer out) {
 2986              		.loc 3 452 88 is_stmt 1 view -0
 2987              		.cfi_startproc
 2988              		@ args = 0, pretend = 0, frame = 0
 2989              		@ frame_needed = 0, uses_anonymous_args = 0
 2990              		@ link register save eliminated.
 453:AudioProcessor.cpp ****     // --- Update Output Level Monitoring --- 
 454:AudioProcessor.cpp ****     if (size > 0) { // Ensure block is not empty
 2991              		.loc 3 454 5 view .LVU912
 2992              	.LBB392:
 2993 0000 80B1     		cbz	r0, .L180
 2994              	.LBB393:
 455:AudioProcessor.cpp ****         float current_level = fabsf(out[0]); // Absolute level of first sample
 2995              		.loc 3 455 9 view .LVU913
 2996              	.LVL190:
 456:AudioProcessor.cpp ****         // Apply smoothing (adjust 0.99f/0.01f factor for more/less smoothing)
 457:AudioProcessor.cpp ****         smoothed_output_level = smoothed_output_level * 0.99f + current_level * 0.01f; 
 2997              		.loc 3 457 9 view .LVU914
 455:AudioProcessor.cpp ****         float current_level = fabsf(out[0]); // Absolute level of first sample
 2998              		.loc 3 455 15 is_stmt 0 view .LVU915
 2999 0002 D1ED007A 		vldr.32	s15, [r1]
 3000              		.loc 3 457 79 view .LVU916
 3001 0006 9FED0E7A 		vldr.32	s14, .L186
 455:AudioProcessor.cpp ****         float current_level = fabsf(out[0]); // Absolute level of first sample
 3002              		.loc 3 455 15 view .LVU917
 3003 000a F0EEE77A 		vabs.f32	s15, s15
 3004              	.LVL191:
 3005              		.loc 3 457 33 view .LVU918
 3006 000e 0D4B     		ldr	r3, .L186+4
 3007 0010 D3ED006A 		vldr.32	s13, [r3]
 3008              		.loc 3 457 79 view .LVU919
 3009 0014 67EE877A 		vmul.f32	s15, s15, s14
 3010              	.LVL192:
 3011              		.loc 3 457 63 view .LVU920
 3012 0018 9FED0B7A 		vldr.32	s14, .L186+8
 3013 001c E6EE877A 		vfma.f32	s15, s13, s14
 3014              		.loc 3 457 31 view .LVU921
 3015 0020 C3ED007A 		vstr.32	s15, [r3]
 3016              	.LVL193:
 3017              	.L180:
 3018              		.loc 3 457 31 view .LVU922
 3019              	.LBE393:
 3020              	.LBE392:
 458:AudioProcessor.cpp ****     }
 459:AudioProcessor.cpp **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 89


 460:AudioProcessor.cpp ****     // Signal display update periodically
 461:AudioProcessor.cpp ****     static uint32_t display_counter = 0;
 3021              		.loc 3 461 5 is_stmt 1 view .LVU923
 462:AudioProcessor.cpp ****     if (++display_counter >= 100) { 
 3022              		.loc 3 462 5 view .LVU924
 3023              		.loc 3 462 9 is_stmt 0 view .LVU925
 3024 0024 094A     		ldr	r2, .L186+12
 3025 0026 1368     		ldr	r3, [r2]
 3026 0028 0133     		adds	r3, r3, #1
 3027              		.loc 3 462 5 view .LVU926
 3028 002a 632B     		cmp	r3, #99
 3029 002c 01D8     		bhi	.L181
 3030              		.loc 3 462 27 view .LVU927
 3031 002e 1360     		str	r3, [r2]
 3032 0030 7047     		bx	lr
 3033              	.L181:
 463:AudioProcessor.cpp ****         display_counter = 0;
 3034              		.loc 3 463 9 is_stmt 1 view .LVU928
 3035              		.loc 3 463 25 is_stmt 0 view .LVU929
 3036 0032 0023     		movs	r3, #0
 3037 0034 1360     		str	r3, [r2]
 464:AudioProcessor.cpp ****         update_display = true;
 3038              		.loc 3 464 9 is_stmt 1 view .LVU930
 3039              		.loc 3 464 24 is_stmt 0 view .LVU931
 3040 0036 0122     		movs	r2, #1
 3041 0038 054B     		ldr	r3, .L186+16
 3042 003a 1A70     		strb	r2, [r3]
 465:AudioProcessor.cpp ****     }
 466:AudioProcessor.cpp **** } ...
 3043              		.loc 3 466 1 view .LVU932
 3044 003c 7047     		bx	lr
 3045              	.L187:
 3046 003e 00BF     		.align	2
 3047              	.L186:
 3048 0040 0AD7233C 		.word	1008981770
 3049 0044 00000000 		.word	smoothed_output_level
 3050 0048 A4707D3F 		.word	1065185444
 3051 004c 00000000 		.word	.LANCHOR18
 3052 0050 00000000 		.word	update_display
 3053              		.cfi_endproc
 3054              	.LFE5069:
 3056              		.section	.text._Z13AudioCallbackPKfPfj,"ax",%progbits
 3057              		.align	1
 3058              		.global	_Z13AudioCallbackPKfPfj
 3059              		.syntax unified
 3060              		.thumb
 3061              		.thumb_func
 3063              	_Z13AudioCallbackPKfPfj:
 3064              	.LVL194:
 3065              	.LFB5059:
  82:AudioProcessor.cpp ****                  size_t size) {
 3066              		.loc 3 82 31 is_stmt 1 view -0
 3067              		.cfi_startproc
 3068              		@ args = 0, pretend = 0, frame = 0
 3069              		@ frame_needed = 0, uses_anonymous_args = 0
  83:AudioProcessor.cpp ****     cpu_meter.OnBlockStart(); // Mark the beginning of the audio block
 3070              		.loc 3 83 5 view .LVU934
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 90


 3071              	.LBB405:
 3072              	.LBI405:
 3073              		.file 9 "lib/libdaisy/src/util/CpuLoadMeter.h"
   1:lib/libdaisy/src/util/CpuLoadMeter.h **** #pragma once
   2:lib/libdaisy/src/util/CpuLoadMeter.h **** 
   3:lib/libdaisy/src/util/CpuLoadMeter.h **** #include "sys/system.h"
   4:lib/libdaisy/src/util/CpuLoadMeter.h **** #include <cmath>
   5:lib/libdaisy/src/util/CpuLoadMeter.h **** 
   6:lib/libdaisy/src/util/CpuLoadMeter.h **** namespace daisy
   7:lib/libdaisy/src/util/CpuLoadMeter.h **** {
   8:lib/libdaisy/src/util/CpuLoadMeter.h **** /** @brief CPU load metering
   9:lib/libdaisy/src/util/CpuLoadMeter.h ****  *  @author jelliesen
  10:lib/libdaisy/src/util/CpuLoadMeter.h ****  *  @addtogroup utility
  11:lib/libdaisy/src/util/CpuLoadMeter.h ****  * 
  12:lib/libdaisy/src/util/CpuLoadMeter.h ****  *  To measure the CPU load of your audio processing, create a CpuLoadMeter
  13:lib/libdaisy/src/util/CpuLoadMeter.h ****  *  and initialize it with your block size and sample rate.
  14:lib/libdaisy/src/util/CpuLoadMeter.h ****  *  Then at the beginning of the audio callback, call `OnBlockStart()`, 
  15:lib/libdaisy/src/util/CpuLoadMeter.h ****  *  and at the end of the audio callback, call `OnBlockEnd()`.
  16:lib/libdaisy/src/util/CpuLoadMeter.h ****  *  You can then read out the minimum, maximum and average CPU load.
  17:lib/libdaisy/src/util/CpuLoadMeter.h ****  */
  18:lib/libdaisy/src/util/CpuLoadMeter.h **** class CpuLoadMeter
  19:lib/libdaisy/src/util/CpuLoadMeter.h **** {
  20:lib/libdaisy/src/util/CpuLoadMeter.h ****   public:
  21:lib/libdaisy/src/util/CpuLoadMeter.h ****     CpuLoadMeter(){};
  22:lib/libdaisy/src/util/CpuLoadMeter.h **** 
  23:lib/libdaisy/src/util/CpuLoadMeter.h ****     /** Initializes the CpuLoadMeter for a particular sample rate and block size.
  24:lib/libdaisy/src/util/CpuLoadMeter.h ****      *  @param sampleRateInHz           The sample rate in Hz
  25:lib/libdaisy/src/util/CpuLoadMeter.h ****      *  @param blockSizeInSamples       The block size in samples
  26:lib/libdaisy/src/util/CpuLoadMeter.h ****      *  @param smoothingFilterCutoffHz  The cutoff frequency of the smoothing filter that's used to
  27:lib/libdaisy/src/util/CpuLoadMeter.h ****      *                                  create the average CPU load reading.
  28:lib/libdaisy/src/util/CpuLoadMeter.h ****      */
  29:lib/libdaisy/src/util/CpuLoadMeter.h ****     void Init(float sampleRateInHz,
  30:lib/libdaisy/src/util/CpuLoadMeter.h ****               int   blockSizeInSamples,
  31:lib/libdaisy/src/util/CpuLoadMeter.h ****               float smoothingFilterCutoffHz = 1.0f)
  32:lib/libdaisy/src/util/CpuLoadMeter.h ****     {
  33:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto secPerBlock = float(blockSizeInSamples) / sampleRateInHz;
  34:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto ticksPerS   = float(System::GetTickFreq());
  35:lib/libdaisy/src/util/CpuLoadMeter.h ****         ticksPerBlockInv_      = 1.0f / (ticksPerS * secPerBlock);
  36:lib/libdaisy/src/util/CpuLoadMeter.h **** 
  37:lib/libdaisy/src/util/CpuLoadMeter.h ****         // update filter coefficient for smoothing filter (1pole lowpass)
  38:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto blockRateInHz = sampleRateInHz / float(blockSizeInSamples);
  39:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto cutoffNormalized
  40:lib/libdaisy/src/util/CpuLoadMeter.h ****             = smoothingFilterCutoffHz * 2.0f * 3.141592653f / blockRateInHz;
  41:lib/libdaisy/src/util/CpuLoadMeter.h ****         // according to
  42:lib/libdaisy/src/util/CpuLoadMeter.h ****         // https://en.wikipedia.org/wiki/Low-pass_filter#Simple_infinite_impulse_response_filter
  43:lib/libdaisy/src/util/CpuLoadMeter.h ****         smoothingConstant_ = cutoffNormalized / (cutoffNormalized + 1.0f);
  44:lib/libdaisy/src/util/CpuLoadMeter.h **** 
  45:lib/libdaisy/src/util/CpuLoadMeter.h ****         Reset();
  46:lib/libdaisy/src/util/CpuLoadMeter.h ****     }
  47:lib/libdaisy/src/util/CpuLoadMeter.h **** 
  48:lib/libdaisy/src/util/CpuLoadMeter.h ****     /** Call this at the beginning of your audio callback */
  49:lib/libdaisy/src/util/CpuLoadMeter.h ****     void OnBlockStart() { currentBlockStartTicks_ = System::GetTick(); }
 3074              		.loc 9 49 10 view .LVU935
 3075              	.LBB406:
 3076              		.loc 9 49 27 view .LVU936
 3077              	.LBE406:
 3078              	.LBE405:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 91


  82:AudioProcessor.cpp ****                  size_t size) {
 3079              		.loc 3 82 31 is_stmt 0 view .LVU937
 3080 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3081              		.cfi_def_cfa_offset 32
 3082              		.cfi_offset 3, -32
 3083              		.cfi_offset 4, -28
 3084              		.cfi_offset 5, -24
 3085              		.cfi_offset 6, -20
 3086              		.cfi_offset 7, -16
 3087              		.cfi_offset 8, -12
 3088              		.cfi_offset 9, -8
 3089              		.cfi_offset 14, -4
 3090              	.LBB409:
 3091              	.LBB407:
 3092              		.loc 9 49 51 view .LVU938
 3093 0004 534C     		ldr	r4, .L206
 3094              	.LBE407:
 3095              	.LBE409:
  82:AudioProcessor.cpp ****                  size_t size) {
 3096              		.loc 3 82 31 view .LVU939
 3097 0006 0E46     		mov	r6, r1
 3098 0008 1546     		mov	r5, r2
 3099 000a 2DED028B 		vpush.64	{d8}
 3100              		.cfi_def_cfa_offset 40
 3101              		.cfi_offset 80, -40
 3102              		.cfi_offset 81, -36
 3103              	.LBB410:
 3104              	.LBB408:
 3105              		.loc 9 49 68 view .LVU940
 3106 000e FFF7FEFF 		bl	_ZN5daisy6System7GetTickEv
 3107              	.LVL195:
 3108              		.loc 9 49 51 view .LVU941
 3109 0012 A060     		str	r0, [r4, #8]
 3110              	.LVL196:
 3111              		.loc 9 49 51 view .LVU942
 3112              	.LBE408:
 3113              	.LBE410:
  86:AudioProcessor.cpp ****     ProcessControls();
 3114              		.loc 3 86 5 is_stmt 1 view .LVU943
  86:AudioProcessor.cpp ****     ProcessControls();
 3115              		.loc 3 86 20 is_stmt 0 view .LVU944
 3116 0014 FFF7FEFF 		bl	_Z15ProcessControlsv
 3117              	.LVL197:
  87:AudioProcessor.cpp ****     ReadKnobValues();
 3118              		.loc 3 87 5 is_stmt 1 view .LVU945
  97:AudioProcessor.cpp ****     morph_knob_val   = morph_knob_val   * (1.0f - intensity_factor) + touch_control * intensity_fac
 3119              		.loc 3 97 85 is_stmt 0 view .LVU946
 3120 0018 B6EE007A 		vmov.f32	s14, #5.0e-1
  87:AudioProcessor.cpp ****     ReadKnobValues();
 3121              		.loc 3 87 19 view .LVU947
 3122 001c FFF7FEFF 		bl	_Z14ReadKnobValuesv
 3123              	.LVL198:
  90:AudioProcessor.cpp ****     float touch_control = touch_cv_value; 
 3124              		.loc 3 90 5 is_stmt 1 view .LVU948
  90:AudioProcessor.cpp ****     float touch_control = touch_cv_value; 
 3125              		.loc 3 90 27 is_stmt 0 view .LVU949
 3126 0020 4D4B     		ldr	r3, .L206+4
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 92


 3127 0022 D3ED007A 		vldr.32	s15, [r3]
 3128              	.LVL199:
  94:AudioProcessor.cpp ****     float intensity_factor = 0.5f; // 0.0 = knob only, 1.0 = touch only, 0.5 = average
 3129              		.loc 3 94 5 is_stmt 1 view .LVU950
  97:AudioProcessor.cpp ****     morph_knob_val   = morph_knob_val   * (1.0f - intensity_factor) + touch_control * intensity_fac
 3130              		.loc 3 97 5 view .LVU951
  97:AudioProcessor.cpp ****     morph_knob_val   = morph_knob_val   * (1.0f - intensity_factor) + touch_control * intensity_fac
 3131              		.loc 3 97 41 is_stmt 0 view .LVU952
 3132 0026 4D4B     		ldr	r3, .L206+8
  97:AudioProcessor.cpp ****     morph_knob_val   = morph_knob_val   * (1.0f - intensity_factor) + touch_control * intensity_fac
 3133              		.loc 3 97 85 view .LVU953
 3134 0028 67EE877A 		vmul.f32	s15, s15, s14
 3135              	.LVL200:
  97:AudioProcessor.cpp ****     morph_knob_val   = morph_knob_val   * (1.0f - intensity_factor) + touch_control * intensity_fac
 3136              		.loc 3 97 69 view .LVU954
 3137 002c 93ED006A 		vldr.32	s12, [r3]
 3138 0030 F0EE676A 		vmov.f32	s13, s15
 3139 0034 E6EE076A 		vfma.f32	s13, s12, s14
  97:AudioProcessor.cpp ****     morph_knob_val   = morph_knob_val   * (1.0f - intensity_factor) + touch_control * intensity_fac
 3140              		.loc 3 97 22 view .LVU955
 3141 0038 C3ED006A 		vstr.32	s13, [r3]
  99:AudioProcessor.cpp ****     delay_feedback_val = delay_feedback_val * (1.0f - intensity_factor) + touch_control * intensity
 3142              		.loc 3 99 5 is_stmt 1 view .LVU956
  99:AudioProcessor.cpp ****     delay_feedback_val = delay_feedback_val * (1.0f - intensity_factor) + touch_control * intensity
 3143              		.loc 3 99 45 is_stmt 0 view .LVU957
 3144 003c 484B     		ldr	r3, .L206+12
  99:AudioProcessor.cpp ****     delay_feedback_val = delay_feedback_val * (1.0f - intensity_factor) + touch_control * intensity
 3145              		.loc 3 99 73 view .LVU958
 3146 003e D3ED006A 		vldr.32	s13, [r3]
 3147 0042 E6EE877A 		vfma.f32	s15, s13, s14
  99:AudioProcessor.cpp ****     delay_feedback_val = delay_feedback_val * (1.0f - intensity_factor) + touch_control * intensity
 3148              		.loc 3 99 24 view .LVU959
 3149 0046 C3ED007A 		vstr.32	s15, [r3]
 105:AudioProcessor.cpp ****     static uint32_t button_press_time = 0;
 3150              		.loc 3 105 5 is_stmt 1 view .LVU960
 106:AudioProcessor.cpp ****     if (button.RisingEdge()) {
 3151              		.loc 3 106 5 view .LVU961
 3152              	.LVL201:
 3153              	.LBB411:
 3154              	.LBB412:
 3155              	.LBI412:
 3156              		.file 10 "lib/libdaisy/src/hid/switch.h"
   1:lib/libdaisy/src/hid/switch.h **** #pragma once
   2:lib/libdaisy/src/hid/switch.h **** #ifndef DSY_SWITCH_H
   3:lib/libdaisy/src/hid/switch.h **** #define DSY_SWITCH_H
   4:lib/libdaisy/src/hid/switch.h **** #include "daisy_core.h"
   5:lib/libdaisy/src/hid/switch.h **** #include "per/gpio.h"
   6:lib/libdaisy/src/hid/switch.h **** #include "sys/system.h"
   7:lib/libdaisy/src/hid/switch.h **** 
   8:lib/libdaisy/src/hid/switch.h **** namespace daisy
   9:lib/libdaisy/src/hid/switch.h **** {
  10:lib/libdaisy/src/hid/switch.h **** /** 
  11:lib/libdaisy/src/hid/switch.h ****     Generic Class for handling momentary/latching switches \n 
  12:lib/libdaisy/src/hid/switch.h ****     Inspired/influenced by Mutable Instruments (pichenettes) Switch classes
  13:lib/libdaisy/src/hid/switch.h ****     @author Stephen Hensley
  14:lib/libdaisy/src/hid/switch.h ****     @date December 2019
  15:lib/libdaisy/src/hid/switch.h ****     @ingroup controls
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 93


  16:lib/libdaisy/src/hid/switch.h **** */
  17:lib/libdaisy/src/hid/switch.h **** class Switch
  18:lib/libdaisy/src/hid/switch.h **** {
  19:lib/libdaisy/src/hid/switch.h ****   public:
  20:lib/libdaisy/src/hid/switch.h ****     /** Specifies the expected behavior of the switch */
  21:lib/libdaisy/src/hid/switch.h ****     enum Type
  22:lib/libdaisy/src/hid/switch.h ****     {
  23:lib/libdaisy/src/hid/switch.h ****         TYPE_TOGGLE,    /**< & */
  24:lib/libdaisy/src/hid/switch.h ****         TYPE_MOMENTARY, /**< & */
  25:lib/libdaisy/src/hid/switch.h ****     };
  26:lib/libdaisy/src/hid/switch.h ****     /** Specifies whether the pressed is HIGH or LOW. */
  27:lib/libdaisy/src/hid/switch.h ****     enum Polarity
  28:lib/libdaisy/src/hid/switch.h ****     {
  29:lib/libdaisy/src/hid/switch.h ****         POLARITY_NORMAL,   /**< & */
  30:lib/libdaisy/src/hid/switch.h ****         POLARITY_INVERTED, /**< & */
  31:lib/libdaisy/src/hid/switch.h ****     };
  32:lib/libdaisy/src/hid/switch.h **** 
  33:lib/libdaisy/src/hid/switch.h ****     /** Specifies whether to use built-in Pull Up/Down resistors to hold button at a given state wh
  34:lib/libdaisy/src/hid/switch.h ****     enum Pull
  35:lib/libdaisy/src/hid/switch.h ****     {
  36:lib/libdaisy/src/hid/switch.h ****         PULL_UP,   /**< & */
  37:lib/libdaisy/src/hid/switch.h ****         PULL_DOWN, /**< & */
  38:lib/libdaisy/src/hid/switch.h ****         PULL_NONE, /**< & */
  39:lib/libdaisy/src/hid/switch.h ****     };
  40:lib/libdaisy/src/hid/switch.h **** 
  41:lib/libdaisy/src/hid/switch.h ****     Switch() {}
  42:lib/libdaisy/src/hid/switch.h ****     ~Switch() {}
  43:lib/libdaisy/src/hid/switch.h **** 
  44:lib/libdaisy/src/hid/switch.h ****     /** 
  45:lib/libdaisy/src/hid/switch.h ****     Initializes the switch object with a given port/pin combo.
  46:lib/libdaisy/src/hid/switch.h ****     \param pin port/pin object to tell the switch which hardware pin to use.
  47:lib/libdaisy/src/hid/switch.h ****     \param update_rate Does nothing. Backwards compatibility until next breaking update.
  48:lib/libdaisy/src/hid/switch.h ****     \param t switch type -- Default: TYPE_MOMENTARY
  49:lib/libdaisy/src/hid/switch.h ****     \param pol switch polarity -- Default: POLARITY_INVERTED
  50:lib/libdaisy/src/hid/switch.h ****     \param pu switch pull up/down -- Default: PULL_UP
  51:lib/libdaisy/src/hid/switch.h ****     */
  52:lib/libdaisy/src/hid/switch.h ****     void
  53:lib/libdaisy/src/hid/switch.h ****     Init(dsy_gpio_pin pin, float update_rate, Type t, Polarity pol, Pull pu);
  54:lib/libdaisy/src/hid/switch.h **** 
  55:lib/libdaisy/src/hid/switch.h ****     /**
  56:lib/libdaisy/src/hid/switch.h ****        Simplified Init.
  57:lib/libdaisy/src/hid/switch.h ****        \param pin port/pin object to tell the switch which hardware pin to use.
  58:lib/libdaisy/src/hid/switch.h ****        \param update_rate Left for backwards compatibility until next breaking change.
  59:lib/libdaisy/src/hid/switch.h ****     */
  60:lib/libdaisy/src/hid/switch.h ****     void Init(dsy_gpio_pin pin, float update_rate = 0.f);
  61:lib/libdaisy/src/hid/switch.h **** 
  62:lib/libdaisy/src/hid/switch.h ****     /** 
  63:lib/libdaisy/src/hid/switch.h ****     Called at update_rate to debounce and handle timing for the switch.
  64:lib/libdaisy/src/hid/switch.h ****     In order for events not to be missed, its important that the Edge/Pressed checks
  65:lib/libdaisy/src/hid/switch.h ****     be made at the same rate as the debounce function is being called.
  66:lib/libdaisy/src/hid/switch.h ****     */
  67:lib/libdaisy/src/hid/switch.h ****     void Debounce();
  68:lib/libdaisy/src/hid/switch.h **** 
  69:lib/libdaisy/src/hid/switch.h ****     /** \return true if a button was just pressed. */
  70:lib/libdaisy/src/hid/switch.h ****     inline bool RisingEdge() const { return state_ == 0x7f; }
 3157              		.loc 10 70 17 view .LVU962
 3158              	.LBB413:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 94


 3159              		.loc 10 70 38 view .LVU963
 3160              		.loc 10 70 45 is_stmt 0 view .LVU964
 3161 004a 464B     		ldr	r3, .L206+16
 3162 004c 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 3163              	.LVL202:
 3164              		.loc 10 70 45 view .LVU965
 3165              	.LBE413:
 3166              	.LBE412:
 106:AudioProcessor.cpp ****     if (button.RisingEdge()) {
 3167              		.loc 3 106 5 view .LVU966
 3168 004e 7F2B     		cmp	r3, #127
 3169 0050 4AD1     		bne	.L189
 107:AudioProcessor.cpp ****         button_press_time = System::GetNow();
 3170              		.loc 3 107 9 is_stmt 1 view .LVU967
 107:AudioProcessor.cpp ****         button_press_time = System::GetNow();
 3171              		.loc 3 107 43 is_stmt 0 view .LVU968
 3172 0052 FFF7FEFF 		bl	_ZN5daisy6System6GetNowEv
 3173              	.LVL203:
 107:AudioProcessor.cpp ****         button_press_time = System::GetNow();
 3174              		.loc 3 107 27 view .LVU969
 3175 0056 444B     		ldr	r3, .L206+20
 3176 0058 1860     		str	r0, [r3]
 3177              	.L190:
 3178              	.LBE411:
 119:AudioProcessor.cpp ****     int engineIndex = DetermineEngineSettings();
 3179              		.loc 3 119 5 is_stmt 1 view .LVU970
 3180              	.LBB416:
 3181              	.LBI416:
 267:AudioProcessor.cpp **** int DetermineEngineSettings() {
 3182              		.loc 3 267 5 view .LVU971
 3183              	.LBB417:
 268:AudioProcessor.cpp ****     return current_engine_index;
 3184              		.loc 3 268 5 view .LVU972
 268:AudioProcessor.cpp ****     return current_engine_index;
 3185              		.loc 3 268 12 is_stmt 0 view .LVU973
 3186 005a 444B     		ldr	r3, .L206+24
 3187              	.LBE417:
 3188              	.LBE416:
 146:AudioProcessor.cpp ****     float dry_level = 1.0f - delay_mix_val;
 3189              		.loc 3 146 11 view .LVU974
 3190 005c B7EE008A 		vmov.f32	s16, #1.0e+0
 3191              	.LBB419:
 3192              	.LBB418:
 268:AudioProcessor.cpp ****     return current_engine_index;
 3193              		.loc 3 268 12 view .LVU975
 3194 0060 1F68     		ldr	r7, [r3]
 3195              	.LVL204:
 268:AudioProcessor.cpp ****     return current_engine_index;
 3196              		.loc 3 268 12 view .LVU976
 3197              	.LBE418:
 3198              	.LBE419:
 120:AudioProcessor.cpp ****     bool poly_mode = (engineIndex <= 3); // First 4 engines are poly
 3199              		.loc 3 120 5 is_stmt 1 view .LVU977
 120:AudioProcessor.cpp ****     bool poly_mode = (engineIndex <= 3); // First 4 engines are poly
 3200              		.loc 3 120 10 is_stmt 0 view .LVU978
 3201 0062 032F     		cmp	r7, #3
 124:AudioProcessor.cpp ****     HandleTouchInput(engineIndex, poly_mode, effective_num_voices);
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 95


 3202              		.loc 3 124 21 view .LVU979
 3203 0064 3846     		mov	r0, r7
 120:AudioProcessor.cpp ****     bool poly_mode = (engineIndex <= 3); // First 4 engines are poly
 3204              		.loc 3 120 10 view .LVU980
 3205 0066 CCBF     		ite	gt
 3206 0068 4FF00008 		movgt	r8, #0
 3207 006c 4FF00108 		movle	r8, #1
 3208              	.LVL205:
 121:AudioProcessor.cpp ****     int effective_num_voices = poly_mode ? NUM_VOICES : 1;
 3209              		.loc 3 121 5 is_stmt 1 view .LVU981
 121:AudioProcessor.cpp ****     int effective_num_voices = poly_mode ? NUM_VOICES : 1;
 3210              		.loc 3 121 42 is_stmt 0 view .LVU982
 3211 0070 042F     		cmp	r7, #4
 124:AudioProcessor.cpp ****     HandleTouchInput(engineIndex, poly_mode, effective_num_voices);
 3212              		.loc 3 124 21 view .LVU983
 3213 0072 4146     		mov	r1, r8
 121:AudioProcessor.cpp ****     int effective_num_voices = poly_mode ? NUM_VOICES : 1;
 3214              		.loc 3 121 42 view .LVU984
 3215 0074 B4BF     		ite	lt
 3216 0076 4FF00409 		movlt	r9, #4
 3217 007a 4FF00109 		movge	r9, #1
 3218              	.LVL206:
 124:AudioProcessor.cpp ****     HandleTouchInput(engineIndex, poly_mode, effective_num_voices);
 3219              		.loc 3 124 5 is_stmt 1 view .LVU985
 124:AudioProcessor.cpp ****     HandleTouchInput(engineIndex, poly_mode, effective_num_voices);
 3220              		.loc 3 124 21 is_stmt 0 view .LVU986
 3221 007e 4A46     		mov	r2, r9
 3222 0080 FFF7FEFF 		bl	_Z16HandleTouchInputibi
 3223              	.LVL207:
 127:AudioProcessor.cpp ****     ConfigureDelaySettings();
 3224              		.loc 3 127 5 is_stmt 1 view .LVU987
 140:AudioProcessor.cpp ****     PrepareVoiceParameters(engineIndex, poly_mode, effective_num_voices - 1);
 3225              		.loc 3 140 27 is_stmt 0 view .LVU988
 3226 0084 4146     		mov	r1, r8
 127:AudioProcessor.cpp ****     ConfigureDelaySettings();
 3227              		.loc 3 127 27 view .LVU989
 3228 0086 FFF7FEFF 		bl	_Z22ConfigureDelaySettingsv
 3229              	.LVL208:
 140:AudioProcessor.cpp ****     PrepareVoiceParameters(engineIndex, poly_mode, effective_num_voices - 1);
 3230              		.loc 3 140 5 is_stmt 1 view .LVU990
 140:AudioProcessor.cpp ****     PrepareVoiceParameters(engineIndex, poly_mode, effective_num_voices - 1);
 3231              		.loc 3 140 27 is_stmt 0 view .LVU991
 3232 008a 3846     		mov	r0, r7
 3233 008c 09F1FF32 		add	r2, r9, #-1
 3234 0090 FFF7FEFF 		bl	_Z22PrepareVoiceParametersibi
 3235              	.LVL209:
 143:AudioProcessor.cpp ****     ProcessVoiceEnvelopes(poly_mode);
 3236              		.loc 3 143 5 is_stmt 1 view .LVU992
 143:AudioProcessor.cpp ****     ProcessVoiceEnvelopes(poly_mode);
 3237              		.loc 3 143 26 is_stmt 0 view .LVU993
 3238 0094 4046     		mov	r0, r8
 3239 0096 FFF7FEFF 		bl	_Z21ProcessVoiceEnvelopesb
 3240              	.LVL210:
 146:AudioProcessor.cpp ****     float dry_level = 1.0f - delay_mix_val;
 3241              		.loc 3 146 5 is_stmt 1 view .LVU994
 147:AudioProcessor.cpp ****     ProcessAudioOutput(out, size, dry_level);
 3242              		.loc 3 147 5 view .LVU995
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 96


 146:AudioProcessor.cpp ****     float dry_level = 1.0f - delay_mix_val;
 3243              		.loc 3 146 11 is_stmt 0 view .LVU996
 3244 009a 354B     		ldr	r3, .L206+28
 147:AudioProcessor.cpp ****     ProcessAudioOutput(out, size, dry_level);
 3245              		.loc 3 147 23 view .LVU997
 3246 009c 2946     		mov	r1, r5
 3247 009e 3046     		mov	r0, r6
 146:AudioProcessor.cpp ****     float dry_level = 1.0f - delay_mix_val;
 3248              		.loc 3 146 11 view .LVU998
 3249 00a0 93ED000A 		vldr.32	s0, [r3]
 147:AudioProcessor.cpp ****     ProcessAudioOutput(out, size, dry_level);
 3250              		.loc 3 147 23 view .LVU999
 3251 00a4 38EE400A 		vsub.f32	s0, s16, s0
 3252              	.LVL211:
 147:AudioProcessor.cpp ****     ProcessAudioOutput(out, size, dry_level);
 3253              		.loc 3 147 23 view .LVU1000
 3254 00a8 FFF7FEFF 		bl	_Z18ProcessAudioOutputPfjf
 3255              	.LVL212:
 150:AudioProcessor.cpp ****     cpu_meter.OnBlockEnd();
 3256              		.loc 3 150 5 is_stmt 1 view .LVU1001
 3257              	.LBB420:
 3258              	.LBI420:
  50:lib/libdaisy/src/util/CpuLoadMeter.h **** 
  51:lib/libdaisy/src/util/CpuLoadMeter.h ****     /** Call this at the end of your audio callback */
  52:lib/libdaisy/src/util/CpuLoadMeter.h ****     void OnBlockEnd()
 3259              		.loc 9 52 10 view .LVU1002
 3260              	.LBB421:
  53:lib/libdaisy/src/util/CpuLoadMeter.h ****     {
  54:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto end         = System::GetTick();
 3261              		.loc 9 54 9 view .LVU1003
 3262              		.loc 9 54 49 is_stmt 0 view .LVU1004
 3263 00ac FFF7FEFF 		bl	_ZN5daisy6System7GetTickEv
 3264              	.LVL213:
  55:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto ticksPassed = end - currentBlockStartTicks_;
 3265              		.loc 9 55 9 is_stmt 1 view .LVU1005
  56:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto currentBlockLoad
 3266              		.loc 9 56 9 view .LVU1006
  55:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto ticksPassed = end - currentBlockStartTicks_;
 3267              		.loc 9 55 20 is_stmt 0 view .LVU1007
 3268 00b0 A368     		ldr	r3, [r4, #8]
 3269              		.loc 9 56 20 view .LVU1008
 3270 00b2 94ED017A 		vldr.32	s14, [r4, #4]
  55:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto ticksPassed = end - currentBlockStartTicks_;
 3271              		.loc 9 55 20 view .LVU1009
 3272 00b6 C31A     		subs	r3, r0, r3
 3273              	.LVL214:
  55:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto ticksPassed = end - currentBlockStartTicks_;
 3274              		.loc 9 55 20 view .LVU1010
 3275 00b8 07EE903A 		vmov	s15, r3	@ int
  57:lib/libdaisy/src/util/CpuLoadMeter.h ****             = float(ticksPassed) * ticksPerBlockInv_; // usPassed / usPerBlock
  58:lib/libdaisy/src/util/CpuLoadMeter.h **** 
  59:lib/libdaisy/src/util/CpuLoadMeter.h ****         if(firstCycle_)
 3276              		.loc 9 59 9 view .LVU1011
 3277 00bc 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 3278              	.LVL215:
  57:lib/libdaisy/src/util/CpuLoadMeter.h ****             = float(ticksPassed) * ticksPerBlockInv_; // usPassed / usPerBlock
 3279              		.loc 9 57 15 view .LVU1012
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 97


 3280 00be F8EE677A 		vcvt.f32.u32	s15, s15
 3281              	.LVL216:
  56:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto currentBlockLoad
 3282              		.loc 9 56 20 view .LVU1013
 3283 00c2 67EE877A 		vmul.f32	s15, s15, s14
 3284              	.LVL217:
 3285              		.loc 9 59 9 is_stmt 1 view .LVU1014
 3286 00c6 2BB3     		cbz	r3, .L194
  60:lib/libdaisy/src/util/CpuLoadMeter.h ****         {
  61:lib/libdaisy/src/util/CpuLoadMeter.h ****             max_ = min_ = avg_ = currentBlockLoad;
 3287              		.loc 9 61 13 view .LVU1015
  62:lib/libdaisy/src/util/CpuLoadMeter.h ****             firstCycle_        = false;
 3288              		.loc 9 62 32 is_stmt 0 view .LVU1016
 3289 00c8 0023     		movs	r3, #0
  61:lib/libdaisy/src/util/CpuLoadMeter.h ****             firstCycle_        = false;
 3290              		.loc 9 61 32 view .LVU1017
 3291 00ca C4ED057A 		vstr.32	s15, [r4, #20]
  61:lib/libdaisy/src/util/CpuLoadMeter.h ****             firstCycle_        = false;
 3292              		.loc 9 61 25 view .LVU1018
 3293 00ce C4ED037A 		vstr.32	s15, [r4, #12]
  61:lib/libdaisy/src/util/CpuLoadMeter.h ****             firstCycle_        = false;
 3294              		.loc 9 61 18 view .LVU1019
 3295 00d2 C4ED047A 		vstr.32	s15, [r4, #16]
 3296              		.loc 9 62 13 is_stmt 1 view .LVU1020
 3297              		.loc 9 62 32 is_stmt 0 view .LVU1021
 3298 00d6 2370     		strb	r3, [r4]
 3299              	.L195:
 3300              	.LVL218:
 3301              		.loc 9 62 32 view .LVU1022
 3302              	.LBE421:
 3303              	.LBE420:
 153:AudioProcessor.cpp ****     UpdatePerformanceMonitors(size, out);
 3304              		.loc 3 153 5 is_stmt 1 view .LVU1023
 153:AudioProcessor.cpp ****     UpdatePerformanceMonitors(size, out);
 3305              		.loc 3 153 30 is_stmt 0 view .LVU1024
 3306 00d8 3146     		mov	r1, r6
 3307 00da 2846     		mov	r0, r5
 154:AudioProcessor.cpp **** }
 3308              		.loc 3 154 1 view .LVU1025
 3309 00dc BDEC028B 		vldm	sp!, {d8}
 3310              		.cfi_remember_state
 3311              		.cfi_restore 80
 3312              		.cfi_restore 81
 3313              		.cfi_def_cfa_offset 32
 3314 00e0 BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}
 3315              		.cfi_restore 14
 3316              		.cfi_restore 9
 3317              		.cfi_restore 8
 3318              		.cfi_restore 7
 3319              		.cfi_restore 6
 3320              		.cfi_restore 5
 3321              		.cfi_restore 4
 3322              		.cfi_restore 3
 3323              		.cfi_def_cfa_offset 0
 3324              	.LVL219:
 153:AudioProcessor.cpp ****     UpdatePerformanceMonitors(size, out);
 3325              		.loc 3 153 30 view .LVU1026
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 98


 3326 00e4 FFF7FEBF 		b	_Z25UpdatePerformanceMonitorsjPf
 3327              	.LVL220:
 3328              	.L189:
 3329              		.cfi_restore_state
 109:AudioProcessor.cpp ****     else if (button.Pressed() && button_press_time > 0) {
 3330              		.loc 3 109 10 is_stmt 1 view .LVU1027
  71:lib/libdaisy/src/hid/switch.h **** 
  72:lib/libdaisy/src/hid/switch.h ****     /** \return true if the button was just released */
  73:lib/libdaisy/src/hid/switch.h ****     inline bool FallingEdge() const { return state_ == 0x80; }
  74:lib/libdaisy/src/hid/switch.h **** 
  75:lib/libdaisy/src/hid/switch.h ****     /** \return true if the button is held down (or if the toggle is on) */
  76:lib/libdaisy/src/hid/switch.h ****     inline bool Pressed() const { return state_ == 0xff; }
 3331              		.loc 10 76 35 view .LVU1028
 3332              	.LBB423:
 3333              	.LBB414:
 109:AudioProcessor.cpp ****     else if (button.Pressed() && button_press_time > 0) {
 3334              		.loc 3 109 31 is_stmt 0 view .LVU1029
 3335 00e8 FF2B     		cmp	r3, #255
 3336 00ea B6D1     		bne	.L190
 109:AudioProcessor.cpp ****     else if (button.Pressed() && button_press_time > 0) {
 3337              		.loc 3 109 52 discriminator 1 view .LVU1030
 3338 00ec 1E4F     		ldr	r7, .L206+20
 109:AudioProcessor.cpp ****     else if (button.Pressed() && button_press_time > 0) {
 3339              		.loc 3 109 31 discriminator 1 view .LVU1031
 3340 00ee 3B68     		ldr	r3, [r7]
 3341 00f0 002B     		cmp	r3, #0
 3342 00f2 B2D0     		beq	.L190
 3343              	.LBB415:
 110:AudioProcessor.cpp ****         uint32_t held_time = System::GetNow() - button_press_time;
 3344              		.loc 3 110 9 is_stmt 1 view .LVU1032
 110:AudioProcessor.cpp ****         uint32_t held_time = System::GetNow() - button_press_time;
 3345              		.loc 3 110 44 is_stmt 0 view .LVU1033
 3346 00f4 FFF7FEFF 		bl	_ZN5daisy6System6GetNowEv
 3347              	.LVL221:
 112:AudioProcessor.cpp ****         if (held_time > 1000 && held_time < 3000) {
 3348              		.loc 3 112 9 is_stmt 1 view .LVU1034
 112:AudioProcessor.cpp ****         if (held_time > 1000 && held_time < 3000) {
 3349              		.loc 3 112 30 is_stmt 0 view .LVU1035
 3350 00f8 3B68     		ldr	r3, [r7]
 3351 00fa 6FF47A72 		mvn	r2, #1000
 3352 00fe C31A     		subs	r3, r0, r3
 3353 0100 1344     		add	r3, r3, r2
 112:AudioProcessor.cpp ****         if (held_time > 1000 && held_time < 3000) {
 3354              		.loc 3 112 9 view .LVU1036
 3355 0102 40F2CE72 		movw	r2, #1998
 3356 0106 9342     		cmp	r3, r2
 3357 0108 A7D8     		bhi	.L190
 113:AudioProcessor.cpp ****             ResetVoiceStates();
 3358              		.loc 3 113 13 is_stmt 1 view .LVU1037
 113:AudioProcessor.cpp ****             ResetVoiceStates();
 3359              		.loc 3 113 29 is_stmt 0 view .LVU1038
 3360 010a FFF7FEFF 		bl	_Z16ResetVoiceStatesv
 3361              	.LVL222:
 114:AudioProcessor.cpp ****             button_press_time = 0; // Reset so it only triggers once
 3362              		.loc 3 114 13 is_stmt 1 view .LVU1039
 114:AudioProcessor.cpp ****             button_press_time = 0; // Reset so it only triggers once
 3363              		.loc 3 114 31 is_stmt 0 view .LVU1040
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 99


 3364 010e 0023     		movs	r3, #0
 3365 0110 3B60     		str	r3, [r7]
 3366 0112 A2E7     		b	.L190
 3367              	.LVL223:
 3368              	.L194:
 114:AudioProcessor.cpp ****             button_press_time = 0; // Reset so it only triggers once
 3369              		.loc 3 114 31 view .LVU1041
 3370              	.LBE415:
 3371              	.LBE414:
 3372              	.LBE423:
 3373              	.LBB424:
 3374              	.LBB422:
  63:lib/libdaisy/src/util/CpuLoadMeter.h ****         }
  64:lib/libdaisy/src/util/CpuLoadMeter.h ****         else
  65:lib/libdaisy/src/util/CpuLoadMeter.h ****         {
  66:lib/libdaisy/src/util/CpuLoadMeter.h ****             if(currentBlockLoad > max_)
 3375              		.loc 9 66 13 is_stmt 1 view .LVU1042
 3376 0114 94ED047A 		vldr.32	s14, [r4, #16]
  67:lib/libdaisy/src/util/CpuLoadMeter.h ****                 max_ = currentBlockLoad;
  68:lib/libdaisy/src/util/CpuLoadMeter.h ****             if(currentBlockLoad < min_)
  69:lib/libdaisy/src/util/CpuLoadMeter.h ****                 min_ = currentBlockLoad;
  70:lib/libdaisy/src/util/CpuLoadMeter.h **** 
  71:lib/libdaisy/src/util/CpuLoadMeter.h ****             avg_ = smoothingConstant_ * currentBlockLoad
  72:lib/libdaisy/src/util/CpuLoadMeter.h ****                    + (1.0f - smoothingConstant_) * avg_;
 3377              		.loc 9 72 50 is_stmt 0 view .LVU1043
 3378 0118 D4ED056A 		vldr.32	s13, [r4, #20]
  66:lib/libdaisy/src/util/CpuLoadMeter.h ****                 max_ = currentBlockLoad;
 3379              		.loc 9 66 13 view .LVU1044
 3380 011c F4EEC77A 		vcmpe.f32	s15, s14
  68:lib/libdaisy/src/util/CpuLoadMeter.h ****                 min_ = currentBlockLoad;
 3381              		.loc 9 68 13 view .LVU1045
 3382 0120 94ED037A 		vldr.32	s14, [r4, #12]
  66:lib/libdaisy/src/util/CpuLoadMeter.h ****                 max_ = currentBlockLoad;
 3383              		.loc 9 66 13 view .LVU1046
 3384 0124 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  67:lib/libdaisy/src/util/CpuLoadMeter.h ****                 max_ = currentBlockLoad;
 3385              		.loc 9 67 17 is_stmt 1 view .LVU1047
  68:lib/libdaisy/src/util/CpuLoadMeter.h ****                 min_ = currentBlockLoad;
 3386              		.loc 9 68 13 is_stmt 0 view .LVU1048
 3387 0128 F4EEC77A 		vcmpe.f32	s15, s14
  71:lib/libdaisy/src/util/CpuLoadMeter.h ****                    + (1.0f - smoothingConstant_) * avg_;
 3388              		.loc 9 71 20 view .LVU1049
 3389 012c 94ED067A 		vldr.32	s14, [r4, #24]
 3390              		.loc 9 72 28 view .LVU1050
 3391 0130 38EE478A 		vsub.f32	s16, s16, s14
  67:lib/libdaisy/src/util/CpuLoadMeter.h ****             if(currentBlockLoad < min_)
 3392              		.loc 9 67 22 view .LVU1051
 3393 0134 C8BF     		it	gt
 3394 0136 C4ED047A 		vstrgt.32	s15, [r4, #16]
  68:lib/libdaisy/src/util/CpuLoadMeter.h ****                 min_ = currentBlockLoad;
 3395              		.loc 9 68 13 is_stmt 1 view .LVU1052
 3396 013a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  69:lib/libdaisy/src/util/CpuLoadMeter.h **** 
 3397              		.loc 9 69 17 view .LVU1053
 3398              		.loc 9 72 50 is_stmt 0 view .LVU1054
 3399 013e 28EE268A 		vmul.f32	s16, s16, s13
  69:lib/libdaisy/src/util/CpuLoadMeter.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 100


 3400              		.loc 9 69 22 view .LVU1055
 3401 0142 48BF     		it	mi
 3402 0144 C4ED037A 		vstrmi.32	s15, [r4, #12]
  71:lib/libdaisy/src/util/CpuLoadMeter.h ****                    + (1.0f - smoothingConstant_) * avg_;
 3403              		.loc 9 71 13 is_stmt 1 view .LVU1056
 3404              		.loc 9 72 20 is_stmt 0 view .LVU1057
 3405 0148 A7EE878A 		vfma.f32	s16, s15, s14
  71:lib/libdaisy/src/util/CpuLoadMeter.h ****                    + (1.0f - smoothingConstant_) * avg_;
 3406              		.loc 9 71 18 view .LVU1058
 3407 014c 84ED058A 		vstr.32	s16, [r4, #20]
 3408 0150 C2E7     		b	.L195
 3409              	.L207:
 3410 0152 00BF     		.align	2
 3411              	.L206:
 3412 0154 00000000 		.word	.LANCHOR19
 3413 0158 00000000 		.word	touch_cv_value
 3414 015c 00000000 		.word	.LANCHOR12
 3415 0160 00000000 		.word	.LANCHOR15
 3416 0164 00000000 		.word	button
 3417 0168 00000000 		.word	.LANCHOR20
 3418 016c 00000000 		.word	.LANCHOR4
 3419 0170 00000000 		.word	.LANCHOR14
 3420              	.LBE422:
 3421              	.LBE424:
 3422              		.cfi_endproc
 3423              	.LFE5059:
 3425              		.global	engine_retrigger_phase
 3426              		.global	engine_changed_flag
 3427              		.global	adc_raw_values
 3428              		.global	current_engine_index
 3429              		.global	cpu_meter
 3430              		.global	mix_buffer_aux
 3431              		.global	mix_buffer_out
 3432              		.global	release_time
 3433              		.global	attack_time
 3434              		.global	env_release_val
 3435              		.global	env_attack_val
 3436              		.global	delay_feedback_val
 3437              		.global	delay_mix_val
 3438              		.global	delay_mix_feedback_val
 3439              		.global	delay_time_val
 3440              		.global	morph_knob_val
 3441              		.global	timbre_knob_val
 3442              		.global	harm_knob_val
 3443              		.global	pitch_val
 3444              		.section	.bss._ZZ13AudioCallbackPKfPfjE17button_press_time,"aw",%nobits
 3445              		.align	2
 3446              		.set	.LANCHOR20,. + 0
 3449              	_ZZ13AudioCallbackPKfPfjE17button_press_time:
 3450 0000 00000000 		.space	4
 3451              		.section	.bss._ZZ15ProcessControlsvE15prev_model_next,"aw",%nobits
 3452              		.set	.LANCHOR6,. + 0
 3455              	_ZZ15ProcessControlsvE15prev_model_next:
 3456 0000 00       		.space	1
 3457              		.section	.bss._ZZ15ProcessControlsvE15prev_model_prev,"aw",%nobits
 3458              		.set	.LANCHOR3,. + 0
 3461              	_ZZ15ProcessControlsvE15prev_model_prev:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 101


 3462 0000 00       		.space	1
 3463              		.section	.bss._ZZ15ProcessControlsvE21prev_engine_for_reset,"aw",%nobits
 3464              		.align	2
 3465              		.set	.LANCHOR7,. + 0
 3468              	_ZZ15ProcessControlsvE21prev_engine_for_reset:
 3469 0000 00000000 		.space	4
 3470              		.section	.bss._ZZ25UpdatePerformanceMonitorsjPfE15display_counter,"aw",%nobits
 3471              		.align	2
 3472              		.set	.LANCHOR18,. + 0
 3475              	_ZZ25UpdatePerformanceMonitorsjPfE15display_counter:
 3476 0000 00000000 		.space	4
 3477              		.section	.bss.adc_raw_values,"aw",%nobits
 3478              		.align	2
 3479              		.set	.LANCHOR2,. + 0
 3482              	adc_raw_values:
 3483 0000 00000000 		.space	48
 3483      00000000 
 3483      00000000 
 3483      00000000 
 3483      00000000 
 3484              		.section	.bss.attack_time,"aw",%nobits
 3485              		.align	2
 3488              	attack_time:
 3489 0000 00000000 		.space	4
 3490              		.section	.bss.cpu_meter,"aw",%nobits
 3491              		.align	2
 3492              		.set	.LANCHOR19,. + 0
 3495              	cpu_meter:
 3496 0000 00000000 		.space	28
 3496      00000000 
 3496      00000000 
 3496      00000000 
 3496      00000000 
 3497              		.section	.bss.current_engine_index,"aw",%nobits
 3498              		.align	2
 3499              		.set	.LANCHOR4,. + 0
 3502              	current_engine_index:
 3503 0000 00000000 		.space	4
 3504              		.section	.bss.delay_feedback_val,"aw",%nobits
 3505              		.align	2
 3506              		.set	.LANCHOR15,. + 0
 3509              	delay_feedback_val:
 3510 0000 00000000 		.space	4
 3511              		.section	.bss.delay_mix_feedback_val,"aw",%nobits
 3512              		.align	2
 3513              		.set	.LANCHOR9,. + 0
 3516              	delay_mix_feedback_val:
 3517 0000 00000000 		.space	4
 3518              		.section	.bss.delay_mix_val,"aw",%nobits
 3519              		.align	2
 3520              		.set	.LANCHOR14,. + 0
 3523              	delay_mix_val:
 3524 0000 00000000 		.space	4
 3525              		.section	.bss.delay_time_val,"aw",%nobits
 3526              		.align	2
 3527              		.set	.LANCHOR8,. + 0
 3530              	delay_time_val:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 102


 3531 0000 00000000 		.space	4
 3532              		.section	.bss.engine_changed_flag,"aw",%nobits
 3533              		.set	.LANCHOR5,. + 0
 3536              	engine_changed_flag:
 3537 0000 00       		.space	1
 3538              		.section	.bss.engine_retrigger_phase,"aw",%nobits
 3539              		.align	2
 3542              	engine_retrigger_phase:
 3543 0000 00000000 		.space	4
 3544              		.section	.bss.env_attack_val,"aw",%nobits
 3545              		.align	2
 3546              		.set	.LANCHOR0,. + 0
 3549              	env_attack_val:
 3550 0000 00000000 		.space	4
 3551              		.section	.bss.env_release_val,"aw",%nobits
 3552              		.align	2
 3553              		.set	.LANCHOR1,. + 0
 3556              	env_release_val:
 3557 0000 00000000 		.space	4
 3558              		.section	.bss.harm_knob_val,"aw",%nobits
 3559              		.align	2
 3560              		.set	.LANCHOR11,. + 0
 3563              	harm_knob_val:
 3564 0000 00000000 		.space	4
 3565              		.section	.bss.mix_buffer_aux,"aw",%nobits
 3566              		.align	2
 3567              		.set	.LANCHOR17,. + 0
 3570              	mix_buffer_aux:
 3571 0000 00000000 		.space	64
 3571      00000000 
 3571      00000000 
 3571      00000000 
 3571      00000000 
 3572              		.section	.bss.mix_buffer_out,"aw",%nobits
 3573              		.align	2
 3574              		.set	.LANCHOR16,. + 0
 3577              	mix_buffer_out:
 3578 0000 00000000 		.space	64
 3578      00000000 
 3578      00000000 
 3578      00000000 
 3578      00000000 
 3579              		.section	.bss.morph_knob_val,"aw",%nobits
 3580              		.align	2
 3581              		.set	.LANCHOR12,. + 0
 3584              	morph_knob_val:
 3585 0000 00000000 		.space	4
 3586              		.section	.bss.pitch_val,"aw",%nobits
 3587              		.align	2
 3588              		.set	.LANCHOR13,. + 0
 3591              	pitch_val:
 3592 0000 00000000 		.space	4
 3593              		.section	.bss.release_time,"aw",%nobits
 3594              		.align	2
 3597              	release_time:
 3598 0000 00000000 		.space	4
 3599              		.section	.bss.timbre_knob_val,"aw",%nobits
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 103


 3600              		.align	2
 3601              		.set	.LANCHOR10,. + 0
 3604              	timbre_knob_val:
 3605 0000 00000000 		.space	4
 3606              		.text
 3607              	.Letext0:
 3608              		.file 11 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/machine/_default_types.h"
 3609              		.file 12 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/_stdint.h"
 3610              		.file 13 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdint.h"
 3611              		.file 14 "/Library/DaisyToolchain/0.2.0/arm/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 3612              		.file 15 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cmath"
 3613              		.file 16 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h"
 3614              		.file 17 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdlib"
 3615              		.file 18 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdint"
 3616              		.file 19 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/arm-none-eabi/thumb/v
 3617              		.file 20 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/type_traits"
 3618              		.file 21 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/debug/debug.h"
 3619              		.file 22 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/algorithmfwd.h"
 3620              		.file 23 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h"
 3621              		.file 24 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/exception_ptr.h"
 3622              		.file 25 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdarg"
 3623              		.file 26 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdio"
 3624              		.file 27 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstring"
 3625              		.file 28 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cwchar"
 3626              		.file 29 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/clocale"
 3627              		.file 30 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/basic_string.h"
 3628              		.file 31 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_iterator.h"
 3629              		.file 32 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/array"
 3630              		.file 33 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/predefined_ops.h
 3631              		.file 34 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/_types.h"
 3632              		.file 35 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/reent.h"
 3633              		.file 36 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/lock.h"
 3634              		.file 37 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/math.h"
 3635              		.file 38 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdlib.h"
 3636              		.file 39 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/math.h"
 3637              		.file 40 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/stdlib.h"
 3638              		.file 41 "lib/libdaisy/src/daisy_core.h"
 3639              		.file 42 "lib/libdaisy/src/per/tim.h"
 3640              		.file 43 "lib/libdaisy/src/sys/system.h"
 3641              		.file 44 "lib/libdaisy/src/per/qspi.h"
 3642              		.file 45 "lib/libdaisy/src/per/dac.h"
 3643              		.file 46 "lib/libdaisy/src/per/sai.h"
 3644              		.file 47 "lib/libdaisy/src/hid/audio.h"
 3645              		.file 48 "lib/libdaisy/src/per/adc.h"
 3646              		.file 49 "lib/libdaisy/src/hid/usb.h"
 3647              		.file 50 "lib/libdaisy/src/util/wav_format.h"
 3648              		.file 51 "lib/libdaisy/src/daisy_seed.h"
 3649              		.file 52 "lib/libdaisy/src/per/gpio.h"
 3650              		.file 53 "lib/libdaisy/src/dev/sdram.h"
 3651              		.file 54 "/Library/DaisyToolchain/0.2.0/arm/lib/gcc/arm-none-eabi/10.3.1/include/stdarg.h"
 3652              		.file 55 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdio.h"
 3653              		.file 56 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/string.h"
 3654              		.file 57 "lib/DaisySP/Source/Control/adenv.h"
 3655              		.file 58 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/wchar.h"
 3656              		.file 59 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/locale.h"
 3657              		.file 60 "eurorack/stmlib/stmlib.h"
 3658              		.file 61 "eurorack/stmlib/dsp/filter.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 104


 3659              		.file 62 "eurorack/stmlib/dsp/limiter.h"
 3660              		.file 63 "eurorack/stmlib/utils/buffer_allocator.h"
 3661              		.file 64 "eurorack/stmlib/dsp/hysteresis_quantizer.h"
 3662              		.file 65 "eurorack/plaits/dsp/dsp.h"
 3663              		.file 66 "eurorack/plaits/dsp/engine/engine.h"
 3664              		.file 67 "eurorack/plaits/dsp/engine/additive_engine.h"
 3665              		.file 68 "eurorack/plaits/dsp/oscillator/oscillator.h"
 3666              		.file 69 "eurorack/plaits/dsp/engine/chord_engine.h"
 3667              		.file 70 "eurorack/plaits/dsp/physical_modelling/resonator.h"
 3668              		.file 71 "eurorack/plaits/dsp/engine/particle_engine.h"
 3669              		.file 72 "eurorack/plaits/dsp/physical_modelling/string.h"
 3670              		.file 73 "eurorack/plaits/dsp/engine/string_engine.h"
 3671              		.file 74 "eurorack/plaits/dsp/engine/swarm_engine.h"
 3672              		.file 75 "eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h"
 3673              		.file 76 "eurorack/plaits/dsp/envelope.h"
 3674              		.file 77 "eurorack/plaits/dsp/fx/low_pass_gate.h"
 3675              		.file 78 "eurorack/plaits/dsp/voice.h"
 3676              		.file 79 "eurorack/plaits/dsp/physical_modelling/delay_line.h"
 3677              		.file 80 "mpr121_daisy.h"
 3678              		.file 81 "Thaumazein.h"
 3679              		.file 82 "lib/libdaisy/src/dev/sr_595.h"
 3680              		.file 83 "<built-in>"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 105


DEFINED SYMBOLS
                            *ABS*:0000000000000000 AudioProcessor.cpp
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:19     .text._ZN13VoiceEnvelope13SetAttackTimeEf:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:25     .text._ZN13VoiceEnvelope13SetAttackTimeEf:0000000000000000 _ZN13VoiceEnvelope13SetAttackTimeEf
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:142    .text._ZN13VoiceEnvelope13SetAttackTimeEf:00000000000000a4 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:154    .text._ZN13VoiceEnvelope14SetReleaseTimeEf:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:160    .text._ZN13VoiceEnvelope14SetReleaseTimeEf:0000000000000000 _ZN13VoiceEnvelope14SetReleaseTimeEf
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:222    .text._ZN13VoiceEnvelope7TriggerEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:228    .text._ZN13VoiceEnvelope7TriggerEv:0000000000000000 _ZN13VoiceEnvelope7TriggerEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:326    .text._ZN13VoiceEnvelope7ReleaseEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:332    .text._ZN13VoiceEnvelope7ReleaseEv:0000000000000000 _ZN13VoiceEnvelope7ReleaseEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:411    .text._ZN13VoiceEnvelope7ProcessEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:417    .text._ZN13VoiceEnvelope7ProcessEv:0000000000000000 _ZN13VoiceEnvelope7ProcessEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:438    .text._ZN13VoiceEnvelope7ProcessEv:0000000000000012 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:668    .text._ZN13VoiceEnvelope5ResetEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:674    .text._ZN13VoiceEnvelope5ResetEv:0000000000000000 _ZN13VoiceEnvelope5ResetEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:713    .text._Z13ProcessVoicesv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:719    .text._Z13ProcessVoicesv:0000000000000000 _Z13ProcessVoicesv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:849    .text._Z13ProcessVoicesv:0000000000000080 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:859    .text._Z12ProcessVoiceif:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:865    .text._Z12ProcessVoiceif:0000000000000000 _Z12ProcessVoiceif
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:885    .text._Z12ProcessVoiceif:000000000000000c $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:890    .text._Z15ProcessControlsv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:896    .text._Z15ProcessControlsv:0000000000000000 _Z15ProcessControlsv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:1330   .text._Z15ProcessControlsv:0000000000000170 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:1363   .text._Z14ReadKnobValuesv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:1369   .text._Z14ReadKnobValuesv:0000000000000000 _Z14ReadKnobValuesv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:1517   .text._Z14ReadKnobValuesv:000000000000004c $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:1539   .text._Z16ResetVoiceStatesv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:1545   .text._Z16ResetVoiceStatesv:0000000000000000 _Z16ResetVoiceStatesv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:1609   .text._Z16ResetVoiceStatesv:0000000000000030 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:1616   .text._Z23DetermineEngineSettingsv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:1622   .text._Z23DetermineEngineSettingsv:0000000000000000 _Z23DetermineEngineSettingsv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:1638   .text._Z23DetermineEngineSettingsv:0000000000000008 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:1643   .text._Z16HandleTouchInputibi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:1649   .text._Z16HandleTouchInputibi:0000000000000000 _Z16HandleTouchInputibi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:1899   .text._Z16HandleTouchInputibi:00000000000000e0 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:1916   .text._Z22ConfigureDelaySettingsv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:1922   .text._Z22ConfigureDelaySettingsv:0000000000000000 _Z22ConfigureDelaySettingsv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:1983   .text._Z22ConfigureDelaySettingsv:000000000000002c $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:1993   .text._Z22PrepareVoiceParametersibi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:1999   .text._Z22PrepareVoiceParametersibi:0000000000000000 _Z22PrepareVoiceParametersibi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:2284   .text._Z22PrepareVoiceParametersibi:000000000000012c $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:2301   .text._Z21ProcessVoiceEnvelopesb:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:2307   .text._Z21ProcessVoiceEnvelopesb:0000000000000000 _Z21ProcessVoiceEnvelopesb
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:2489   .text._Z21ProcessVoiceEnvelopesb:00000000000000c8 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:2500   .text._Z18ProcessAudioOutputPfjf:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:2506   .text._Z18ProcessAudioOutputPfjf:0000000000000000 _Z18ProcessAudioOutputPfjf
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:2968   .text._Z18ProcessAudioOutputPfjf:0000000000000178 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:2977   .text._Z25UpdatePerformanceMonitorsjPf:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:2983   .text._Z25UpdatePerformanceMonitorsjPf:0000000000000000 _Z25UpdatePerformanceMonitorsjPf
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3048   .text._Z25UpdatePerformanceMonitorsjPf:0000000000000040 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3057   .text._Z13AudioCallbackPKfPfj:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3063   .text._Z13AudioCallbackPKfPfj:0000000000000000 _Z13AudioCallbackPKfPfj
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3412   .text._Z13AudioCallbackPKfPfj:0000000000000154 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3542   .bss.engine_retrigger_phase:0000000000000000 engine_retrigger_phase
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3536   .bss.engine_changed_flag:0000000000000000 engine_changed_flag
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 106


/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3482   .bss.adc_raw_values:0000000000000000 adc_raw_values
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3502   .bss.current_engine_index:0000000000000000 current_engine_index
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3495   .bss.cpu_meter:0000000000000000 cpu_meter
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3570   .bss.mix_buffer_aux:0000000000000000 mix_buffer_aux
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3577   .bss.mix_buffer_out:0000000000000000 mix_buffer_out
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3597   .bss.release_time:0000000000000000 release_time
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3488   .bss.attack_time:0000000000000000 attack_time
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3556   .bss.env_release_val:0000000000000000 env_release_val
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3549   .bss.env_attack_val:0000000000000000 env_attack_val
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3509   .bss.delay_feedback_val:0000000000000000 delay_feedback_val
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3523   .bss.delay_mix_val:0000000000000000 delay_mix_val
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3516   .bss.delay_mix_feedback_val:0000000000000000 delay_mix_feedback_val
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3530   .bss.delay_time_val:0000000000000000 delay_time_val
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3584   .bss.morph_knob_val:0000000000000000 morph_knob_val
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3604   .bss.timbre_knob_val:0000000000000000 timbre_knob_val
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3563   .bss.harm_knob_val:0000000000000000 harm_knob_val
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3591   .bss.pitch_val:0000000000000000 pitch_val
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3445   .bss._ZZ13AudioCallbackPKfPfjE17button_press_time:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3449   .bss._ZZ13AudioCallbackPKfPfjE17button_press_time:0000000000000000 _ZZ13AudioCallbackPKfPfjE17button_press_time
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3455   .bss._ZZ15ProcessControlsvE15prev_model_next:0000000000000000 _ZZ15ProcessControlsvE15prev_model_next
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3456   .bss._ZZ15ProcessControlsvE15prev_model_next:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3461   .bss._ZZ15ProcessControlsvE15prev_model_prev:0000000000000000 _ZZ15ProcessControlsvE15prev_model_prev
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3462   .bss._ZZ15ProcessControlsvE15prev_model_prev:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3464   .bss._ZZ15ProcessControlsvE21prev_engine_for_reset:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3468   .bss._ZZ15ProcessControlsvE21prev_engine_for_reset:0000000000000000 _ZZ15ProcessControlsvE21prev_engine_for_reset
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3471   .bss._ZZ25UpdatePerformanceMonitorsjPfE15display_counter:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3475   .bss._ZZ25UpdatePerformanceMonitorsjPfE15display_counter:0000000000000000 _ZZ25UpdatePerformanceMonitorsjPfE15display_counter
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3478   .bss.adc_raw_values:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3485   .bss.attack_time:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3491   .bss.cpu_meter:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3498   .bss.current_engine_index:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3505   .bss.delay_feedback_val:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3512   .bss.delay_mix_feedback_val:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3519   .bss.delay_mix_val:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3526   .bss.delay_time_val:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3537   .bss.engine_changed_flag:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3539   .bss.engine_retrigger_phase:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3545   .bss.env_attack_val:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3552   .bss.env_release_val:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3559   .bss.harm_knob_val:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3566   .bss.mix_buffer_aux:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3573   .bss.mix_buffer_out:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3580   .bss.morph_knob_val:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3587   .bss.pitch_val:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3594   .bss.release_time:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:3600   .bss.timbre_knob_val:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:443    .text._ZN13VoiceEnvelope7ProcessEv:0000000000000017 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s:443    .text._ZN13VoiceEnvelope7ProcessEv:0000000000000018 $t

UNDEFINED SYMBOLS
voice_envelopes
voice_values
voice_active
_ZN5daisy6Switch8DebounceEv
_ZN5daisy13AnalogControl7ProcessEv
_ZNK5daisy9AdcHandle8GetFloatEh
memcpy
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc6ISM3F.s 			page 107


button
delay_time_knob
delay_mix_feedback_knob
env_release_knob
env_attack_knob
timbre_knob
harmonics_knob
morph_knob
pitch_knob
arp_pad
model_prev_pad
model_next_pad
mod_wheel
hw
MAX_ENGINE_INDEX
voice_note
modulations
_Z18FindAvailableVoicei
_Z14AssignMonoNotef
_Z9FindVoicefi
current_touch_state
kTouchMidiNotes
last_touch_state
delay
_ZN6plaits5Voice6RenderERKNS_5PatchERKNS_11ModulationsEPNS0_5FrameEj
memset
patches
voices
output_buffers
smoothed_output_level
update_display
_ZN5daisy6System7GetTickEv
_ZN5daisy6System6GetNowEv
touch_cv_value
