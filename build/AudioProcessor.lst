ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"AudioProcessor.cpp"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text._ZN6clouds17GranularProcessorD2Ev,"axG",%progbits,_ZN6clouds17GranularProcessorD5Ev
  19              		.align	1
  20              		.weak	_ZN6clouds17GranularProcessorD2Ev
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	_ZN6clouds17GranularProcessorD2Ev:
  26              	.LVL0:
  27              	.LFB6097:
  28              		.file 1 "eurorack/clouds/dsp/granular_processor.h"
   1:eurorack/clouds/dsp/granular_processor.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/clouds/dsp/granular_processor.h **** //
   3:eurorack/clouds/dsp/granular_processor.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/clouds/dsp/granular_processor.h **** //
   5:eurorack/clouds/dsp/granular_processor.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/clouds/dsp/granular_processor.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/clouds/dsp/granular_processor.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/clouds/dsp/granular_processor.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/clouds/dsp/granular_processor.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/clouds/dsp/granular_processor.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/clouds/dsp/granular_processor.h **** // 
  12:eurorack/clouds/dsp/granular_processor.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/clouds/dsp/granular_processor.h **** // all copies or substantial portions of the Software.
  14:eurorack/clouds/dsp/granular_processor.h **** // 
  15:eurorack/clouds/dsp/granular_processor.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/clouds/dsp/granular_processor.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/clouds/dsp/granular_processor.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/clouds/dsp/granular_processor.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/clouds/dsp/granular_processor.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/clouds/dsp/granular_processor.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/clouds/dsp/granular_processor.h **** // THE SOFTWARE.
  22:eurorack/clouds/dsp/granular_processor.h **** // 
  23:eurorack/clouds/dsp/granular_processor.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/clouds/dsp/granular_processor.h **** //
  25:eurorack/clouds/dsp/granular_processor.h **** // -----------------------------------------------------------------------------
  26:eurorack/clouds/dsp/granular_processor.h **** //
  27:eurorack/clouds/dsp/granular_processor.h **** // Main processing class.
  28:eurorack/clouds/dsp/granular_processor.h **** 
  29:eurorack/clouds/dsp/granular_processor.h **** #ifndef CLOUDS_DSP_GRANULAR_PROCESSOR_H_
  30:eurorack/clouds/dsp/granular_processor.h **** #define CLOUDS_DSP_GRANULAR_PROCESSOR_H_
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 2


  31:eurorack/clouds/dsp/granular_processor.h **** 
  32:eurorack/clouds/dsp/granular_processor.h **** #include "stmlib/stmlib.h"
  33:eurorack/clouds/dsp/granular_processor.h **** #include "stmlib/dsp/filter.h"
  34:eurorack/clouds/dsp/granular_processor.h **** 
  35:eurorack/clouds/dsp/granular_processor.h **** #include "clouds/dsp/correlator.h"
  36:eurorack/clouds/dsp/granular_processor.h **** #include "clouds/dsp/frame.h"
  37:eurorack/clouds/dsp/granular_processor.h **** #include "clouds/dsp/fx/diffuser.h"
  38:eurorack/clouds/dsp/granular_processor.h **** #include "clouds/dsp/fx/pitch_shifter.h"
  39:eurorack/clouds/dsp/granular_processor.h **** #include "clouds/dsp/fx/reverb.h"
  40:eurorack/clouds/dsp/granular_processor.h **** #include "clouds/dsp/granular_processor.h"
  41:eurorack/clouds/dsp/granular_processor.h **** #include "clouds/dsp/granular_sample_player.h"
  42:eurorack/clouds/dsp/granular_processor.h **** #include "clouds/dsp/looping_sample_player.h"
  43:eurorack/clouds/dsp/granular_processor.h **** #include "clouds/dsp/pvoc/phase_vocoder.h"
  44:eurorack/clouds/dsp/granular_processor.h **** #include "clouds/dsp/sample_rate_converter.h"
  45:eurorack/clouds/dsp/granular_processor.h **** #include "clouds/dsp/wsola_sample_player.h"
  46:eurorack/clouds/dsp/granular_processor.h **** 
  47:eurorack/clouds/dsp/granular_processor.h **** namespace clouds {
  48:eurorack/clouds/dsp/granular_processor.h **** 
  49:eurorack/clouds/dsp/granular_processor.h **** const int32_t kDownsamplingFactor = 2;
  50:eurorack/clouds/dsp/granular_processor.h **** 
  51:eurorack/clouds/dsp/granular_processor.h **** enum PlaybackMode {
  52:eurorack/clouds/dsp/granular_processor.h ****   PLAYBACK_MODE_GRANULAR,
  53:eurorack/clouds/dsp/granular_processor.h ****   PLAYBACK_MODE_STRETCH,
  54:eurorack/clouds/dsp/granular_processor.h ****   PLAYBACK_MODE_LOOPING_DELAY,
  55:eurorack/clouds/dsp/granular_processor.h ****   PLAYBACK_MODE_SPECTRAL,
  56:eurorack/clouds/dsp/granular_processor.h ****   PLAYBACK_MODE_LAST
  57:eurorack/clouds/dsp/granular_processor.h **** };
  58:eurorack/clouds/dsp/granular_processor.h **** 
  59:eurorack/clouds/dsp/granular_processor.h **** // State of the recording buffer as saved in one of the 4 sample memories.
  60:eurorack/clouds/dsp/granular_processor.h **** struct PersistentState {
  61:eurorack/clouds/dsp/granular_processor.h ****   int32_t write_head[2];
  62:eurorack/clouds/dsp/granular_processor.h ****   uint8_t quality;
  63:eurorack/clouds/dsp/granular_processor.h ****   uint8_t spectral;
  64:eurorack/clouds/dsp/granular_processor.h **** };
  65:eurorack/clouds/dsp/granular_processor.h **** 
  66:eurorack/clouds/dsp/granular_processor.h **** // Data block as saved in one of the 4 sample memories.
  67:eurorack/clouds/dsp/granular_processor.h **** struct PersistentBlock {
  68:eurorack/clouds/dsp/granular_processor.h ****   uint32_t tag;
  69:eurorack/clouds/dsp/granular_processor.h ****   uint32_t size;
  70:eurorack/clouds/dsp/granular_processor.h ****   void* data;
  71:eurorack/clouds/dsp/granular_processor.h **** };
  72:eurorack/clouds/dsp/granular_processor.h **** 
  73:eurorack/clouds/dsp/granular_processor.h **** class GranularProcessor {
  74:eurorack/clouds/dsp/granular_processor.h ****  public:
  75:eurorack/clouds/dsp/granular_processor.h ****   GranularProcessor() { }
  76:eurorack/clouds/dsp/granular_processor.h ****   ~GranularProcessor() { }
  29              		.loc 1 76 3 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LBB296:
  35              	.LBI296:
  36              		.file 2 "eurorack/clouds/dsp/sample_rate_converter.h"
   1:eurorack/clouds/dsp/sample_rate_converter.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/clouds/dsp/sample_rate_converter.h **** //
   3:eurorack/clouds/dsp/sample_rate_converter.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 3


   4:eurorack/clouds/dsp/sample_rate_converter.h **** //
   5:eurorack/clouds/dsp/sample_rate_converter.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/clouds/dsp/sample_rate_converter.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/clouds/dsp/sample_rate_converter.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/clouds/dsp/sample_rate_converter.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/clouds/dsp/sample_rate_converter.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/clouds/dsp/sample_rate_converter.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/clouds/dsp/sample_rate_converter.h **** // 
  12:eurorack/clouds/dsp/sample_rate_converter.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/clouds/dsp/sample_rate_converter.h **** // all copies or substantial portions of the Software.
  14:eurorack/clouds/dsp/sample_rate_converter.h **** // 
  15:eurorack/clouds/dsp/sample_rate_converter.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/clouds/dsp/sample_rate_converter.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/clouds/dsp/sample_rate_converter.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/clouds/dsp/sample_rate_converter.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/clouds/dsp/sample_rate_converter.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/clouds/dsp/sample_rate_converter.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/clouds/dsp/sample_rate_converter.h **** // THE SOFTWARE.
  22:eurorack/clouds/dsp/sample_rate_converter.h **** // 
  23:eurorack/clouds/dsp/sample_rate_converter.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/clouds/dsp/sample_rate_converter.h **** //
  25:eurorack/clouds/dsp/sample_rate_converter.h **** // -----------------------------------------------------------------------------
  26:eurorack/clouds/dsp/sample_rate_converter.h **** //
  27:eurorack/clouds/dsp/sample_rate_converter.h **** // Sample rate converter
  28:eurorack/clouds/dsp/sample_rate_converter.h **** 
  29:eurorack/clouds/dsp/sample_rate_converter.h **** #ifndef CLOUDS_DSP_SAMPLE_RATE_CONVERTER_H_
  30:eurorack/clouds/dsp/sample_rate_converter.h **** #define CLOUDS_DSP_SAMPLE_RATE_CONVERTER_H_
  31:eurorack/clouds/dsp/sample_rate_converter.h **** 
  32:eurorack/clouds/dsp/sample_rate_converter.h **** #include "stmlib/stmlib.h"
  33:eurorack/clouds/dsp/sample_rate_converter.h **** 
  34:eurorack/clouds/dsp/sample_rate_converter.h **** #include "clouds/dsp/frame.h"
  35:eurorack/clouds/dsp/sample_rate_converter.h **** 
  36:eurorack/clouds/dsp/sample_rate_converter.h **** namespace clouds {
  37:eurorack/clouds/dsp/sample_rate_converter.h **** 
  38:eurorack/clouds/dsp/sample_rate_converter.h **** template<int32_t ratio, int32_t filter_size, const float* coefficients>
  39:eurorack/clouds/dsp/sample_rate_converter.h **** class SampleRateConverter {
  40:eurorack/clouds/dsp/sample_rate_converter.h ****  public:
  41:eurorack/clouds/dsp/sample_rate_converter.h ****   SampleRateConverter() { }
  42:eurorack/clouds/dsp/sample_rate_converter.h ****   ~SampleRateConverter() { }
  37              		.loc 2 42 3 view .LVU1
  38              		.loc 2 42 3 is_stmt 0 view .LVU2
  39              	.LBE296:
  40              	.LBB297:
  41              	.LBI297:
  42              		.loc 2 42 3 is_stmt 1 view .LVU3
  43              		.loc 2 42 3 is_stmt 0 view .LVU4
  44              	.LBE297:
  45              	.LBB298:
  46              	.LBI298:
  47              		.file 3 "eurorack/clouds/dsp/fx/pitch_shifter.h"
   1:eurorack/clouds/dsp/fx/pitch_shifter.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/clouds/dsp/fx/pitch_shifter.h **** //
   3:eurorack/clouds/dsp/fx/pitch_shifter.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/clouds/dsp/fx/pitch_shifter.h **** //
   5:eurorack/clouds/dsp/fx/pitch_shifter.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/clouds/dsp/fx/pitch_shifter.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/clouds/dsp/fx/pitch_shifter.h **** // in the Software without restriction, including without limitation the rights
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 4


   8:eurorack/clouds/dsp/fx/pitch_shifter.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/clouds/dsp/fx/pitch_shifter.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/clouds/dsp/fx/pitch_shifter.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/clouds/dsp/fx/pitch_shifter.h **** // 
  12:eurorack/clouds/dsp/fx/pitch_shifter.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/clouds/dsp/fx/pitch_shifter.h **** // all copies or substantial portions of the Software.
  14:eurorack/clouds/dsp/fx/pitch_shifter.h **** // 
  15:eurorack/clouds/dsp/fx/pitch_shifter.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/clouds/dsp/fx/pitch_shifter.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/clouds/dsp/fx/pitch_shifter.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/clouds/dsp/fx/pitch_shifter.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/clouds/dsp/fx/pitch_shifter.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/clouds/dsp/fx/pitch_shifter.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/clouds/dsp/fx/pitch_shifter.h **** // THE SOFTWARE.
  22:eurorack/clouds/dsp/fx/pitch_shifter.h **** // 
  23:eurorack/clouds/dsp/fx/pitch_shifter.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/clouds/dsp/fx/pitch_shifter.h **** //
  25:eurorack/clouds/dsp/fx/pitch_shifter.h **** // -----------------------------------------------------------------------------
  26:eurorack/clouds/dsp/fx/pitch_shifter.h **** //
  27:eurorack/clouds/dsp/fx/pitch_shifter.h **** // Pitch shifter.
  28:eurorack/clouds/dsp/fx/pitch_shifter.h **** 
  29:eurorack/clouds/dsp/fx/pitch_shifter.h **** #ifndef CLOUDS_DSP_FX_PITCH_SHIFTER_H_
  30:eurorack/clouds/dsp/fx/pitch_shifter.h **** #define CLOUDS_DSP_FX_PITCH_SHIFTER_H_
  31:eurorack/clouds/dsp/fx/pitch_shifter.h **** 
  32:eurorack/clouds/dsp/fx/pitch_shifter.h **** #include "stmlib/stmlib.h"
  33:eurorack/clouds/dsp/fx/pitch_shifter.h **** 
  34:eurorack/clouds/dsp/fx/pitch_shifter.h **** #include "clouds/dsp/frame.h"
  35:eurorack/clouds/dsp/fx/pitch_shifter.h **** #include "clouds/dsp/fx/fx_engine.h"
  36:eurorack/clouds/dsp/fx/pitch_shifter.h **** 
  37:eurorack/clouds/dsp/fx/pitch_shifter.h **** namespace clouds {
  38:eurorack/clouds/dsp/fx/pitch_shifter.h **** 
  39:eurorack/clouds/dsp/fx/pitch_shifter.h **** class PitchShifter {
  40:eurorack/clouds/dsp/fx/pitch_shifter.h ****  public:
  41:eurorack/clouds/dsp/fx/pitch_shifter.h ****   PitchShifter() { }
  42:eurorack/clouds/dsp/fx/pitch_shifter.h ****   ~PitchShifter() { }
  48              		.loc 3 42 3 is_stmt 1 view .LVU5
  49              	.LBB299:
  50              	.LBI299:
  51              		.file 4 "eurorack/clouds/dsp/fx/fx_engine.h"
   1:eurorack/clouds/dsp/fx/fx_engine.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/clouds/dsp/fx/fx_engine.h **** //
   3:eurorack/clouds/dsp/fx/fx_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/clouds/dsp/fx/fx_engine.h **** //
   5:eurorack/clouds/dsp/fx/fx_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/clouds/dsp/fx/fx_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/clouds/dsp/fx/fx_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/clouds/dsp/fx/fx_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/clouds/dsp/fx/fx_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/clouds/dsp/fx/fx_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/clouds/dsp/fx/fx_engine.h **** // 
  12:eurorack/clouds/dsp/fx/fx_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/clouds/dsp/fx/fx_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/clouds/dsp/fx/fx_engine.h **** // 
  15:eurorack/clouds/dsp/fx/fx_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/clouds/dsp/fx/fx_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/clouds/dsp/fx/fx_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/clouds/dsp/fx/fx_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 5


  19:eurorack/clouds/dsp/fx/fx_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/clouds/dsp/fx/fx_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/clouds/dsp/fx/fx_engine.h **** // THE SOFTWARE.
  22:eurorack/clouds/dsp/fx/fx_engine.h **** // 
  23:eurorack/clouds/dsp/fx/fx_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/clouds/dsp/fx/fx_engine.h **** //
  25:eurorack/clouds/dsp/fx/fx_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/clouds/dsp/fx/fx_engine.h **** //
  27:eurorack/clouds/dsp/fx/fx_engine.h **** // Base class for building reverbs.
  28:eurorack/clouds/dsp/fx/fx_engine.h **** 
  29:eurorack/clouds/dsp/fx/fx_engine.h **** #ifndef CLOUDS_DSP_FX_FX_ENGINE_H_
  30:eurorack/clouds/dsp/fx/fx_engine.h **** #define CLOUDS_DSP_FX_FX_ENGINE_H_
  31:eurorack/clouds/dsp/fx/fx_engine.h **** 
  32:eurorack/clouds/dsp/fx/fx_engine.h **** #include <algorithm>
  33:eurorack/clouds/dsp/fx/fx_engine.h **** 
  34:eurorack/clouds/dsp/fx/fx_engine.h **** #include "stmlib/stmlib.h"
  35:eurorack/clouds/dsp/fx/fx_engine.h **** 
  36:eurorack/clouds/dsp/fx/fx_engine.h **** #include "stmlib/dsp/dsp.h"
  37:eurorack/clouds/dsp/fx/fx_engine.h **** #include "stmlib/dsp/cosine_oscillator.h"
  38:eurorack/clouds/dsp/fx/fx_engine.h **** 
  39:eurorack/clouds/dsp/fx/fx_engine.h **** namespace clouds {
  40:eurorack/clouds/dsp/fx/fx_engine.h **** 
  41:eurorack/clouds/dsp/fx/fx_engine.h **** #define TAIL , -1
  42:eurorack/clouds/dsp/fx/fx_engine.h **** 
  43:eurorack/clouds/dsp/fx/fx_engine.h **** enum Format {
  44:eurorack/clouds/dsp/fx/fx_engine.h ****   FORMAT_12_BIT,
  45:eurorack/clouds/dsp/fx/fx_engine.h ****   FORMAT_16_BIT,
  46:eurorack/clouds/dsp/fx/fx_engine.h ****   FORMAT_32_BIT
  47:eurorack/clouds/dsp/fx/fx_engine.h **** };
  48:eurorack/clouds/dsp/fx/fx_engine.h **** 
  49:eurorack/clouds/dsp/fx/fx_engine.h **** enum LFOIndex {
  50:eurorack/clouds/dsp/fx/fx_engine.h ****   LFO_1,
  51:eurorack/clouds/dsp/fx/fx_engine.h ****   LFO_2
  52:eurorack/clouds/dsp/fx/fx_engine.h **** };
  53:eurorack/clouds/dsp/fx/fx_engine.h **** 
  54:eurorack/clouds/dsp/fx/fx_engine.h **** template<Format format>
  55:eurorack/clouds/dsp/fx/fx_engine.h **** struct DataType { };
  56:eurorack/clouds/dsp/fx/fx_engine.h **** 
  57:eurorack/clouds/dsp/fx/fx_engine.h **** template<>
  58:eurorack/clouds/dsp/fx/fx_engine.h **** struct DataType<FORMAT_12_BIT> {
  59:eurorack/clouds/dsp/fx/fx_engine.h ****   typedef uint16_t T;
  60:eurorack/clouds/dsp/fx/fx_engine.h ****   
  61:eurorack/clouds/dsp/fx/fx_engine.h ****   static inline float Decompress(T value) {
  62:eurorack/clouds/dsp/fx/fx_engine.h ****     return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
  63:eurorack/clouds/dsp/fx/fx_engine.h ****   }
  64:eurorack/clouds/dsp/fx/fx_engine.h ****   
  65:eurorack/clouds/dsp/fx/fx_engine.h ****   static inline T Compress(float value) {
  66:eurorack/clouds/dsp/fx/fx_engine.h ****     return static_cast<uint16_t>(
  67:eurorack/clouds/dsp/fx/fx_engine.h ****         stmlib::Clip16(static_cast<int32_t>(value * 4096.0f)));
  68:eurorack/clouds/dsp/fx/fx_engine.h ****   }
  69:eurorack/clouds/dsp/fx/fx_engine.h **** };
  70:eurorack/clouds/dsp/fx/fx_engine.h **** 
  71:eurorack/clouds/dsp/fx/fx_engine.h **** template<>
  72:eurorack/clouds/dsp/fx/fx_engine.h **** struct DataType<FORMAT_16_BIT> {
  73:eurorack/clouds/dsp/fx/fx_engine.h ****   typedef uint16_t T;
  74:eurorack/clouds/dsp/fx/fx_engine.h ****   
  75:eurorack/clouds/dsp/fx/fx_engine.h ****   static inline float Decompress(T value) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 6


  76:eurorack/clouds/dsp/fx/fx_engine.h ****     return static_cast<float>(static_cast<int16_t>(value)) / 32768.0f;
  77:eurorack/clouds/dsp/fx/fx_engine.h ****   }
  78:eurorack/clouds/dsp/fx/fx_engine.h ****   
  79:eurorack/clouds/dsp/fx/fx_engine.h ****   static inline T Compress(float value) {
  80:eurorack/clouds/dsp/fx/fx_engine.h ****     return static_cast<uint16_t>(
  81:eurorack/clouds/dsp/fx/fx_engine.h ****         stmlib::Clip16(static_cast<int32_t>(value * 32768.0f)));
  82:eurorack/clouds/dsp/fx/fx_engine.h ****   }
  83:eurorack/clouds/dsp/fx/fx_engine.h **** };
  84:eurorack/clouds/dsp/fx/fx_engine.h **** 
  85:eurorack/clouds/dsp/fx/fx_engine.h **** template<>
  86:eurorack/clouds/dsp/fx/fx_engine.h **** struct DataType<FORMAT_32_BIT> {
  87:eurorack/clouds/dsp/fx/fx_engine.h ****   typedef float T;
  88:eurorack/clouds/dsp/fx/fx_engine.h ****   
  89:eurorack/clouds/dsp/fx/fx_engine.h ****   static inline float Decompress(T value) {
  90:eurorack/clouds/dsp/fx/fx_engine.h ****     return value;;
  91:eurorack/clouds/dsp/fx/fx_engine.h ****   }
  92:eurorack/clouds/dsp/fx/fx_engine.h ****   
  93:eurorack/clouds/dsp/fx/fx_engine.h ****   static inline T Compress(float value) {
  94:eurorack/clouds/dsp/fx/fx_engine.h ****     return value;
  95:eurorack/clouds/dsp/fx/fx_engine.h ****   }
  96:eurorack/clouds/dsp/fx/fx_engine.h **** };
  97:eurorack/clouds/dsp/fx/fx_engine.h **** 
  98:eurorack/clouds/dsp/fx/fx_engine.h **** template<
  99:eurorack/clouds/dsp/fx/fx_engine.h ****     size_t size,
 100:eurorack/clouds/dsp/fx/fx_engine.h ****     Format format = FORMAT_12_BIT>
 101:eurorack/clouds/dsp/fx/fx_engine.h **** class FxEngine {
 102:eurorack/clouds/dsp/fx/fx_engine.h ****  public:
 103:eurorack/clouds/dsp/fx/fx_engine.h ****   typedef typename DataType<format>::T T;
 104:eurorack/clouds/dsp/fx/fx_engine.h ****   FxEngine() { }
 105:eurorack/clouds/dsp/fx/fx_engine.h ****   ~FxEngine() { }
  52              		.loc 4 105 3 view .LVU6
  53              		.loc 4 105 3 is_stmt 0 view .LVU7
  54              	.LBE299:
  55              	.LBE298:
  56              	.LBB300:
  57              	.LBI300:
  58              		.file 5 "eurorack/clouds/dsp/fx/reverb.h"
   1:eurorack/clouds/dsp/fx/reverb.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/clouds/dsp/fx/reverb.h **** //
   3:eurorack/clouds/dsp/fx/reverb.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/clouds/dsp/fx/reverb.h **** //
   5:eurorack/clouds/dsp/fx/reverb.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/clouds/dsp/fx/reverb.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/clouds/dsp/fx/reverb.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/clouds/dsp/fx/reverb.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/clouds/dsp/fx/reverb.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/clouds/dsp/fx/reverb.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/clouds/dsp/fx/reverb.h **** // 
  12:eurorack/clouds/dsp/fx/reverb.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/clouds/dsp/fx/reverb.h **** // all copies or substantial portions of the Software.
  14:eurorack/clouds/dsp/fx/reverb.h **** // 
  15:eurorack/clouds/dsp/fx/reverb.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/clouds/dsp/fx/reverb.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/clouds/dsp/fx/reverb.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/clouds/dsp/fx/reverb.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/clouds/dsp/fx/reverb.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/clouds/dsp/fx/reverb.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 7


  21:eurorack/clouds/dsp/fx/reverb.h **** // THE SOFTWARE.
  22:eurorack/clouds/dsp/fx/reverb.h **** // 
  23:eurorack/clouds/dsp/fx/reverb.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/clouds/dsp/fx/reverb.h **** //
  25:eurorack/clouds/dsp/fx/reverb.h **** // -----------------------------------------------------------------------------
  26:eurorack/clouds/dsp/fx/reverb.h **** //
  27:eurorack/clouds/dsp/fx/reverb.h **** // Reverb.
  28:eurorack/clouds/dsp/fx/reverb.h **** 
  29:eurorack/clouds/dsp/fx/reverb.h **** #ifndef CLOUDS_DSP_FX_REVERB_H_
  30:eurorack/clouds/dsp/fx/reverb.h **** #define CLOUDS_DSP_FX_REVERB_H_
  31:eurorack/clouds/dsp/fx/reverb.h **** 
  32:eurorack/clouds/dsp/fx/reverb.h **** #include "stmlib/stmlib.h"
  33:eurorack/clouds/dsp/fx/reverb.h **** 
  34:eurorack/clouds/dsp/fx/reverb.h **** #include "clouds/dsp/fx/fx_engine.h"
  35:eurorack/clouds/dsp/fx/reverb.h **** 
  36:eurorack/clouds/dsp/fx/reverb.h **** namespace clouds {
  37:eurorack/clouds/dsp/fx/reverb.h **** 
  38:eurorack/clouds/dsp/fx/reverb.h **** class Reverb {
  39:eurorack/clouds/dsp/fx/reverb.h ****  public:
  40:eurorack/clouds/dsp/fx/reverb.h ****   Reverb() { }
  41:eurorack/clouds/dsp/fx/reverb.h ****   ~Reverb() { }
  59              		.loc 5 41 3 is_stmt 1 view .LVU8
  60              	.LBB301:
  61              	.LBI301:
  62              		.loc 4 105 3 view .LVU9
  63              		.loc 4 105 3 is_stmt 0 view .LVU10
  64              	.LBE301:
  65              	.LBE300:
  66              	.LBB302:
  67              	.LBI302:
  68              		.file 6 "eurorack/clouds/dsp/fx/diffuser.h"
   1:eurorack/clouds/dsp/fx/diffuser.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/clouds/dsp/fx/diffuser.h **** //
   3:eurorack/clouds/dsp/fx/diffuser.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/clouds/dsp/fx/diffuser.h **** //
   5:eurorack/clouds/dsp/fx/diffuser.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/clouds/dsp/fx/diffuser.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/clouds/dsp/fx/diffuser.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/clouds/dsp/fx/diffuser.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/clouds/dsp/fx/diffuser.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/clouds/dsp/fx/diffuser.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/clouds/dsp/fx/diffuser.h **** // 
  12:eurorack/clouds/dsp/fx/diffuser.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/clouds/dsp/fx/diffuser.h **** // all copies or substantial portions of the Software.
  14:eurorack/clouds/dsp/fx/diffuser.h **** // 
  15:eurorack/clouds/dsp/fx/diffuser.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/clouds/dsp/fx/diffuser.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/clouds/dsp/fx/diffuser.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/clouds/dsp/fx/diffuser.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/clouds/dsp/fx/diffuser.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/clouds/dsp/fx/diffuser.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/clouds/dsp/fx/diffuser.h **** // THE SOFTWARE.
  22:eurorack/clouds/dsp/fx/diffuser.h **** // 
  23:eurorack/clouds/dsp/fx/diffuser.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/clouds/dsp/fx/diffuser.h **** //
  25:eurorack/clouds/dsp/fx/diffuser.h **** // -----------------------------------------------------------------------------
  26:eurorack/clouds/dsp/fx/diffuser.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 8


  27:eurorack/clouds/dsp/fx/diffuser.h **** // AP diffusion network.
  28:eurorack/clouds/dsp/fx/diffuser.h **** 
  29:eurorack/clouds/dsp/fx/diffuser.h **** #ifndef CLOUDS_DSP_FX_DIFFUSER_H_
  30:eurorack/clouds/dsp/fx/diffuser.h **** #define CLOUDS_DSP_FX_DIFFUSER_H_
  31:eurorack/clouds/dsp/fx/diffuser.h **** 
  32:eurorack/clouds/dsp/fx/diffuser.h **** #include "stmlib/stmlib.h"
  33:eurorack/clouds/dsp/fx/diffuser.h **** 
  34:eurorack/clouds/dsp/fx/diffuser.h **** #include "clouds/dsp/fx/fx_engine.h"
  35:eurorack/clouds/dsp/fx/diffuser.h **** 
  36:eurorack/clouds/dsp/fx/diffuser.h **** namespace clouds {
  37:eurorack/clouds/dsp/fx/diffuser.h **** 
  38:eurorack/clouds/dsp/fx/diffuser.h **** class Diffuser {
  39:eurorack/clouds/dsp/fx/diffuser.h ****  public:
  40:eurorack/clouds/dsp/fx/diffuser.h ****   Diffuser() { }
  41:eurorack/clouds/dsp/fx/diffuser.h ****   ~Diffuser() { }
  69              		.loc 6 41 3 is_stmt 1 view .LVU11
  70              	.LBB303:
  71              	.LBI303:
  72              		.loc 4 105 3 view .LVU12
  73              		.loc 4 105 3 is_stmt 0 view .LVU13
  74              	.LBE303:
  75              	.LBE302:
  76              	.LBB304:
  77              	.LBI304:
  78              		.file 7 "eurorack/clouds/dsp/pvoc/phase_vocoder.h"
   1:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** //
   3:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** //
   5:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** // 
  12:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** // all copies or substantial portions of the Software.
  14:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** // 
  15:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** // THE SOFTWARE.
  22:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** // 
  23:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** //
  25:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** // -----------------------------------------------------------------------------
  26:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** //
  27:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** // Naive phase vocoder.
  28:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** 
  29:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** #ifndef CLOUDS_DSP_PVOC_PHASE_VOCODER_H_
  30:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** #define CLOUDS_DSP_PVOC_PHASE_VOCODER_H_
  31:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** 
  32:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** #include "stmlib/stmlib.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 9


  33:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** 
  34:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** #include "stmlib/fft/shy_fft.h"
  35:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** 
  36:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** #include "clouds/dsp/frame.h"
  37:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** #include "clouds/dsp/pvoc/stft.h"
  38:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** #include "clouds/dsp/pvoc/frame_transformation.h"
  39:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** 
  40:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** namespace clouds {
  41:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** 
  42:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** struct Parameters;
  43:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** 
  44:eurorack/clouds/dsp/pvoc/phase_vocoder.h **** class PhaseVocoder {
  45:eurorack/clouds/dsp/pvoc/phase_vocoder.h ****  public:
  46:eurorack/clouds/dsp/pvoc/phase_vocoder.h ****   PhaseVocoder() { }
  47:eurorack/clouds/dsp/pvoc/phase_vocoder.h ****   ~PhaseVocoder() { }
  79              		.loc 7 47 3 is_stmt 1 view .LVU14
  80              	.LBB305:
  81              	.LBI305:
  82              		.file 8 "eurorack/stmlib/fft/shy_fft.h"
   1:eurorack/stmlib/fft/shy_fft.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/stmlib/fft/shy_fft.h **** //
   3:eurorack/stmlib/fft/shy_fft.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/fft/shy_fft.h **** //
   5:eurorack/stmlib/fft/shy_fft.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/fft/shy_fft.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/fft/shy_fft.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/fft/shy_fft.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/fft/shy_fft.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/fft/shy_fft.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/fft/shy_fft.h **** // 
  12:eurorack/stmlib/fft/shy_fft.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/fft/shy_fft.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/fft/shy_fft.h **** // 
  15:eurorack/stmlib/fft/shy_fft.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/fft/shy_fft.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/fft/shy_fft.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/fft/shy_fft.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/fft/shy_fft.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/fft/shy_fft.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/fft/shy_fft.h **** // THE SOFTWARE.
  22:eurorack/stmlib/fft/shy_fft.h **** // 
  23:eurorack/stmlib/fft/shy_fft.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/fft/shy_fft.h **** //
  25:eurorack/stmlib/fft/shy_fft.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/fft/shy_fft.h **** //
  27:eurorack/stmlib/fft/shy_fft.h **** // A modest implementation of real FFT for embedded audio applications,
  28:eurorack/stmlib/fft/shy_fft.h **** // largely based on Laurent de Soras' FFTReal.
  29:eurorack/stmlib/fft/shy_fft.h **** //
  30:eurorack/stmlib/fft/shy_fft.h **** // Improvements:
  31:eurorack/stmlib/fft/shy_fft.h **** // * No dynamic allocations.
  32:eurorack/stmlib/fft/shy_fft.h **** // * No additional buffering (can use the input buffer as a workspace).
  33:eurorack/stmlib/fft/shy_fft.h **** // * No big bitrev lookup table.
  34:eurorack/stmlib/fft/shy_fft.h **** // * Keep the fixed size template signature, but also provide method for
  35:eurorack/stmlib/fft/shy_fft.h **** //   variable size (up to the fixed size).
  36:eurorack/stmlib/fft/shy_fft.h **** 
  37:eurorack/stmlib/fft/shy_fft.h **** #ifndef STMLIB_FFT_SHY_FFT_H_
  38:eurorack/stmlib/fft/shy_fft.h **** #define STMLIB_FFT_SHY_FFT_H_
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 10


  39:eurorack/stmlib/fft/shy_fft.h **** 
  40:eurorack/stmlib/fft/shy_fft.h **** #include "stmlib/stmlib.h"
  41:eurorack/stmlib/fft/shy_fft.h **** 
  42:eurorack/stmlib/fft/shy_fft.h **** #include <algorithm>
  43:eurorack/stmlib/fft/shy_fft.h **** #include <cmath>
  44:eurorack/stmlib/fft/shy_fft.h **** 
  45:eurorack/stmlib/fft/shy_fft.h **** namespace stmlib {
  46:eurorack/stmlib/fft/shy_fft.h **** 
  47:eurorack/stmlib/fft/shy_fft.h **** // Compile-time log 2
  48:eurorack/stmlib/fft/shy_fft.h **** template<size_t x>
  49:eurorack/stmlib/fft/shy_fft.h **** struct Log2 {
  50:eurorack/stmlib/fft/shy_fft.h ****   enum {
  51:eurorack/stmlib/fft/shy_fft.h ****     value = Log2<x / 2>::value + 1
  52:eurorack/stmlib/fft/shy_fft.h ****   };
  53:eurorack/stmlib/fft/shy_fft.h ****   typedef char CheckPowerOf2[((x & (x - 1)) == 0 ? 1 : -1)];
  54:eurorack/stmlib/fft/shy_fft.h **** };
  55:eurorack/stmlib/fft/shy_fft.h **** 
  56:eurorack/stmlib/fft/shy_fft.h **** template<>
  57:eurorack/stmlib/fft/shy_fft.h **** struct Log2<1> { enum { value = 0 }; };
  58:eurorack/stmlib/fft/shy_fft.h **** 
  59:eurorack/stmlib/fft/shy_fft.h **** 
  60:eurorack/stmlib/fft/shy_fft.h **** // Bit reversal LUT size.
  61:eurorack/stmlib/fft/shy_fft.h **** template<size_t> struct BitReversalLut { enum { size = 1 }; };
  62:eurorack/stmlib/fft/shy_fft.h **** template<> struct BitReversalLut<3> { enum { size = 2 }; };
  63:eurorack/stmlib/fft/shy_fft.h **** template<> struct BitReversalLut<4> { enum { size = 4 }; };
  64:eurorack/stmlib/fft/shy_fft.h **** template<> struct BitReversalLut<5> { enum { size = 8 }; };
  65:eurorack/stmlib/fft/shy_fft.h **** template<> struct BitReversalLut<6> { enum { size = 16 }; };
  66:eurorack/stmlib/fft/shy_fft.h **** template<> struct BitReversalLut<7> { enum { size = 32 }; };
  67:eurorack/stmlib/fft/shy_fft.h **** template<> struct BitReversalLut<8> { enum { size = 64 }; };
  68:eurorack/stmlib/fft/shy_fft.h **** 
  69:eurorack/stmlib/fft/shy_fft.h **** 
  70:eurorack/stmlib/fft/shy_fft.h **** // Typed math functions and constants.
  71:eurorack/stmlib/fft/shy_fft.h **** template<typename T>
  72:eurorack/stmlib/fft/shy_fft.h **** struct Math {
  73:eurorack/stmlib/fft/shy_fft.h ****   inline T pi() const;
  74:eurorack/stmlib/fft/shy_fft.h ****   inline T sqrt_2_div_2() const;
  75:eurorack/stmlib/fft/shy_fft.h ****   inline T cos(T x);
  76:eurorack/stmlib/fft/shy_fft.h ****   inline T sin(T x);
  77:eurorack/stmlib/fft/shy_fft.h **** };
  78:eurorack/stmlib/fft/shy_fft.h **** 
  79:eurorack/stmlib/fft/shy_fft.h **** template<>
  80:eurorack/stmlib/fft/shy_fft.h **** struct Math<float> {
  81:eurorack/stmlib/fft/shy_fft.h ****   inline float pi() const { return 3.141592653589793f; }
  82:eurorack/stmlib/fft/shy_fft.h ****   inline float sqrt_2_div_2() const { return 0.7071067811865476f; }
  83:eurorack/stmlib/fft/shy_fft.h ****   inline float cos(float x) { return cosf(x); }
  84:eurorack/stmlib/fft/shy_fft.h ****   inline float sin(float x) { return sinf(x); }
  85:eurorack/stmlib/fft/shy_fft.h **** };
  86:eurorack/stmlib/fft/shy_fft.h **** 
  87:eurorack/stmlib/fft/shy_fft.h **** template<>
  88:eurorack/stmlib/fft/shy_fft.h **** struct Math<double> {
  89:eurorack/stmlib/fft/shy_fft.h ****   inline double pi() const { return 3.141592653589793; }
  90:eurorack/stmlib/fft/shy_fft.h ****   inline float sqrt_2_div_2() const { return 0.7071067811865476; }
  91:eurorack/stmlib/fft/shy_fft.h ****   inline double cos(double x) { return std::cos(x); }
  92:eurorack/stmlib/fft/shy_fft.h ****   inline double sin(double x) { return std::sin(x); }
  93:eurorack/stmlib/fft/shy_fft.h **** };
  94:eurorack/stmlib/fft/shy_fft.h **** 
  95:eurorack/stmlib/fft/shy_fft.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 11


  96:eurorack/stmlib/fft/shy_fft.h **** // Look-up table for trigonometric data.
  97:eurorack/stmlib/fft/shy_fft.h **** template<typename T, size_t num_passes>
  98:eurorack/stmlib/fft/shy_fft.h **** class LutPhasor {
  99:eurorack/stmlib/fft/shy_fft.h ****  public:
 100:eurorack/stmlib/fft/shy_fft.h ****   LutPhasor() { }
 101:eurorack/stmlib/fft/shy_fft.h ****   ~LutPhasor() { }
 102:eurorack/stmlib/fft/shy_fft.h ****   
 103:eurorack/stmlib/fft/shy_fft.h ****   void Init() {
 104:eurorack/stmlib/fft/shy_fft.h ****     Math<T> math;
 105:eurorack/stmlib/fft/shy_fft.h ****   
 106:eurorack/stmlib/fft/shy_fft.h ****     for (size_t pass = 3; pass < num_passes; ++pass) {
 107:eurorack/stmlib/fft/shy_fft.h ****       size_t pass_size = 1L << (pass - 1);
 108:eurorack/stmlib/fft/shy_fft.h ****       T* pass_ptr = &trig_lut_[(1L << (pass - 1)) - 4];
 109:eurorack/stmlib/fft/shy_fft.h ****       T increment = math.pi() / (pass_size << 1);
 110:eurorack/stmlib/fft/shy_fft.h ****       T phase = 0.0;
 111:eurorack/stmlib/fft/shy_fft.h ****       for (size_t i = 0; i < pass_size; ++i) {
 112:eurorack/stmlib/fft/shy_fft.h ****         pass_ptr[i] = math.cos(phase);
 113:eurorack/stmlib/fft/shy_fft.h ****         phase += increment;
 114:eurorack/stmlib/fft/shy_fft.h ****       }
 115:eurorack/stmlib/fft/shy_fft.h ****     }
 116:eurorack/stmlib/fft/shy_fft.h ****   }
 117:eurorack/stmlib/fft/shy_fft.h ****   
 118:eurorack/stmlib/fft/shy_fft.h ****   inline void Start(size_t pass) {
 119:eurorack/stmlib/fft/shy_fft.h ****     size_t pass_size = 1 << (pass - 1);
 120:eurorack/stmlib/fft/shy_fft.h ****     cos_ptr_ = &trig_lut_[pass_size - 4 + 1];
 121:eurorack/stmlib/fft/shy_fft.h ****     sin_ptr_ = &trig_lut_[pass_size + pass_size - 4 - 1];
 122:eurorack/stmlib/fft/shy_fft.h ****   }
 123:eurorack/stmlib/fft/shy_fft.h ****   
 124:eurorack/stmlib/fft/shy_fft.h ****   inline void Rotate() {
 125:eurorack/stmlib/fft/shy_fft.h ****     ++cos_ptr_;
 126:eurorack/stmlib/fft/shy_fft.h ****     --sin_ptr_;
 127:eurorack/stmlib/fft/shy_fft.h ****   }
 128:eurorack/stmlib/fft/shy_fft.h ****   
 129:eurorack/stmlib/fft/shy_fft.h ****   inline T cos() const { return *cos_ptr_; }
 130:eurorack/stmlib/fft/shy_fft.h ****   inline T sin() const { return *sin_ptr_; }
 131:eurorack/stmlib/fft/shy_fft.h ****   
 132:eurorack/stmlib/fft/shy_fft.h ****  private:
 133:eurorack/stmlib/fft/shy_fft.h ****   T trig_lut_[(1 << (num_passes - 1)) - 4];
 134:eurorack/stmlib/fft/shy_fft.h ****   T* cos_ptr_;
 135:eurorack/stmlib/fft/shy_fft.h ****   T* sin_ptr_;
 136:eurorack/stmlib/fft/shy_fft.h ****   
 137:eurorack/stmlib/fft/shy_fft.h ****   DISALLOW_COPY_AND_ASSIGN(LutPhasor);
 138:eurorack/stmlib/fft/shy_fft.h **** };
 139:eurorack/stmlib/fft/shy_fft.h **** 
 140:eurorack/stmlib/fft/shy_fft.h **** template<typename T> struct LutPhasor<T, 0> { void Init() { }; };
 141:eurorack/stmlib/fft/shy_fft.h **** template<typename T> struct LutPhasor<T, 1> { void Init() { }; };
 142:eurorack/stmlib/fft/shy_fft.h **** template<typename T> struct LutPhasor<T, 2> { void Init() { }; };
 143:eurorack/stmlib/fft/shy_fft.h **** 
 144:eurorack/stmlib/fft/shy_fft.h **** template<typename T>
 145:eurorack/stmlib/fft/shy_fft.h **** struct LutPhasor<T, 3> {
 146:eurorack/stmlib/fft/shy_fft.h ****   void Init() { };
 147:eurorack/stmlib/fft/shy_fft.h ****   void Start(size_t) { };
 148:eurorack/stmlib/fft/shy_fft.h ****   void Rotate() { };
 149:eurorack/stmlib/fft/shy_fft.h ****   inline T cos() const { return 1.0; }
 150:eurorack/stmlib/fft/shy_fft.h ****   inline T sin() const { return 0.0; }
 151:eurorack/stmlib/fft/shy_fft.h **** };
 152:eurorack/stmlib/fft/shy_fft.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 12


 153:eurorack/stmlib/fft/shy_fft.h **** 
 154:eurorack/stmlib/fft/shy_fft.h **** // Another way of generating roots of unity.
 155:eurorack/stmlib/fft/shy_fft.h **** template<typename T, size_t num_passes>
 156:eurorack/stmlib/fft/shy_fft.h **** class RotationPhasor {
 157:eurorack/stmlib/fft/shy_fft.h ****  public:
 158:eurorack/stmlib/fft/shy_fft.h ****   RotationPhasor() { }
 159:eurorack/stmlib/fft/shy_fft.h ****   ~RotationPhasor() { }
 160:eurorack/stmlib/fft/shy_fft.h ****   
 161:eurorack/stmlib/fft/shy_fft.h ****   void Init() {
 162:eurorack/stmlib/fft/shy_fft.h ****     Math<T> math;
 163:eurorack/stmlib/fft/shy_fft.h ****     for (size_t pass = 3; pass < num_passes; ++pass) {
 164:eurorack/stmlib/fft/shy_fft.h ****       size_t index = (pass - 3) << 1;
 165:eurorack/stmlib/fft/shy_fft.h ****       T angle = math.pi() / (1 << pass);
 166:eurorack/stmlib/fft/shy_fft.h ****       sin_cos_lut_[index] = math.cos(angle);
 167:eurorack/stmlib/fft/shy_fft.h ****       sin_cos_lut_[index + 1] = math.sin(angle);
 168:eurorack/stmlib/fft/shy_fft.h ****     }
 169:eurorack/stmlib/fft/shy_fft.h ****   }
 170:eurorack/stmlib/fft/shy_fft.h ****   
 171:eurorack/stmlib/fft/shy_fft.h ****   inline void Start(size_t pass) {
 172:eurorack/stmlib/fft/shy_fft.h ****     size_t index = (pass - 3) << 1;
 173:eurorack/stmlib/fft/shy_fft.h ****     cos_ = real_ = sin_cos_lut_[index];
 174:eurorack/stmlib/fft/shy_fft.h ****     sin_ = imag_ = sin_cos_lut_[index + 1];
 175:eurorack/stmlib/fft/shy_fft.h ****   }
 176:eurorack/stmlib/fft/shy_fft.h ****   
 177:eurorack/stmlib/fft/shy_fft.h ****   inline void Rotate() {
 178:eurorack/stmlib/fft/shy_fft.h ****     T temp = cos_ * real_ - sin_ * imag_;
 179:eurorack/stmlib/fft/shy_fft.h ****     sin_ = cos_ * imag_ + sin_ * real_;
 180:eurorack/stmlib/fft/shy_fft.h ****     cos_ = temp;
 181:eurorack/stmlib/fft/shy_fft.h ****   }
 182:eurorack/stmlib/fft/shy_fft.h ****   
 183:eurorack/stmlib/fft/shy_fft.h ****   inline T cos() const { return cos_; }
 184:eurorack/stmlib/fft/shy_fft.h ****   inline T sin() const { return sin_; }
 185:eurorack/stmlib/fft/shy_fft.h ****   
 186:eurorack/stmlib/fft/shy_fft.h ****  private:
 187:eurorack/stmlib/fft/shy_fft.h ****   T sin_cos_lut_[(num_passes - 3) << 1];
 188:eurorack/stmlib/fft/shy_fft.h ****   T cos_;
 189:eurorack/stmlib/fft/shy_fft.h ****   T sin_;
 190:eurorack/stmlib/fft/shy_fft.h ****   T real_;
 191:eurorack/stmlib/fft/shy_fft.h ****   T imag_;
 192:eurorack/stmlib/fft/shy_fft.h ****   
 193:eurorack/stmlib/fft/shy_fft.h ****   DISALLOW_COPY_AND_ASSIGN(RotationPhasor);
 194:eurorack/stmlib/fft/shy_fft.h **** };
 195:eurorack/stmlib/fft/shy_fft.h **** 
 196:eurorack/stmlib/fft/shy_fft.h **** template<typename T> struct RotationPhasor<T, 0> { void Init() { }; };
 197:eurorack/stmlib/fft/shy_fft.h **** template<typename T> struct RotationPhasor<T, 1> { void Init() { }; };
 198:eurorack/stmlib/fft/shy_fft.h **** template<typename T> struct RotationPhasor<T, 2> { void Init() { }; };
 199:eurorack/stmlib/fft/shy_fft.h **** 
 200:eurorack/stmlib/fft/shy_fft.h **** template<typename T>
 201:eurorack/stmlib/fft/shy_fft.h **** struct RotationPhasor<T, 3> {
 202:eurorack/stmlib/fft/shy_fft.h ****   void Init() { };
 203:eurorack/stmlib/fft/shy_fft.h ****   void Start(size_t) { };
 204:eurorack/stmlib/fft/shy_fft.h ****   void Rotate() { };
 205:eurorack/stmlib/fft/shy_fft.h ****   inline T cos() const { return 1.0; }
 206:eurorack/stmlib/fft/shy_fft.h ****   inline T sin() const { return 0.0; }
 207:eurorack/stmlib/fft/shy_fft.h **** };
 208:eurorack/stmlib/fft/shy_fft.h **** 
 209:eurorack/stmlib/fft/shy_fft.h **** // Direct transform
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 13


 210:eurorack/stmlib/fft/shy_fft.h **** template<typename T, size_t num_passes, typename Phasor>
 211:eurorack/stmlib/fft/shy_fft.h **** struct DirectTransform {
 212:eurorack/stmlib/fft/shy_fft.h ****  private:
 213:eurorack/stmlib/fft/shy_fft.h ****   enum {
 214:eurorack/stmlib/fft/shy_fft.h ****     size = 1 << num_passes
 215:eurorack/stmlib/fft/shy_fft.h ****   };
 216:eurorack/stmlib/fft/shy_fft.h ****   
 217:eurorack/stmlib/fft/shy_fft.h ****  public:
 218:eurorack/stmlib/fft/shy_fft.h ****   void operator()(
 219:eurorack/stmlib/fft/shy_fft.h ****       T* input,
 220:eurorack/stmlib/fft/shy_fft.h ****       T* output,
 221:eurorack/stmlib/fft/shy_fft.h ****       const uint8_t* bit_rev,
 222:eurorack/stmlib/fft/shy_fft.h ****       Phasor* phasor) {
 223:eurorack/stmlib/fft/shy_fft.h ****     T* s;
 224:eurorack/stmlib/fft/shy_fft.h ****     T* d;
 225:eurorack/stmlib/fft/shy_fft.h ****     Math<T> math;
 226:eurorack/stmlib/fft/shy_fft.h ****     
 227:eurorack/stmlib/fft/shy_fft.h ****     // First and second pass.
 228:eurorack/stmlib/fft/shy_fft.h ****     d = output;
 229:eurorack/stmlib/fft/shy_fft.h ****     for (size_t i = 0; i < size; i += 4) {
 230:eurorack/stmlib/fft/shy_fft.h ****       const T* s = input;
 231:eurorack/stmlib/fft/shy_fft.h ****       size_t r0 = num_passes <= 8
 232:eurorack/stmlib/fft/shy_fft.h ****           ? bit_rev[i >> 2]
 233:eurorack/stmlib/fft/shy_fft.h ****           : ((bit_rev[i & 0xff] << 8) | bit_rev[i >> 8]) >> (16 - num_passes);
 234:eurorack/stmlib/fft/shy_fft.h ****       size_t r1 = r0 + 2 * (size >> 2);
 235:eurorack/stmlib/fft/shy_fft.h ****       size_t r2 = r0 + 1 * (size >> 2);
 236:eurorack/stmlib/fft/shy_fft.h ****       size_t r3 = r0 + 3 * (size >> 2);
 237:eurorack/stmlib/fft/shy_fft.h ****       
 238:eurorack/stmlib/fft/shy_fft.h ****       d[1] = s[r0] - s[r1];
 239:eurorack/stmlib/fft/shy_fft.h ****       d[3] = s[r2] - s[r3];
 240:eurorack/stmlib/fft/shy_fft.h ****       T a = s[r0] + s[r1];
 241:eurorack/stmlib/fft/shy_fft.h ****       T b = s[r2] + s[r3];
 242:eurorack/stmlib/fft/shy_fft.h ****       d[0] = a + b;
 243:eurorack/stmlib/fft/shy_fft.h ****       d[2] = a - b;
 244:eurorack/stmlib/fft/shy_fft.h ****       d += 4;
 245:eurorack/stmlib/fft/shy_fft.h ****     }
 246:eurorack/stmlib/fft/shy_fft.h ****     
 247:eurorack/stmlib/fft/shy_fft.h ****     // Third pass.
 248:eurorack/stmlib/fft/shy_fft.h ****     s = output;
 249:eurorack/stmlib/fft/shy_fft.h ****     d = input;
 250:eurorack/stmlib/fft/shy_fft.h ****     for (size_t i = 0; i < size; i += 8) {
 251:eurorack/stmlib/fft/shy_fft.h ****       T v;
 252:eurorack/stmlib/fft/shy_fft.h **** 
 253:eurorack/stmlib/fft/shy_fft.h ****       d[i] = s[i] + s[i + 4];
 254:eurorack/stmlib/fft/shy_fft.h ****       d[i + 4] = s[i] - s[i + 4];
 255:eurorack/stmlib/fft/shy_fft.h ****       d[i + 2] = s[i + 2];
 256:eurorack/stmlib/fft/shy_fft.h ****       d[i + 6] = s[i + 6];
 257:eurorack/stmlib/fft/shy_fft.h **** 
 258:eurorack/stmlib/fft/shy_fft.h ****       v = (s[i + 5] - s[i + 7]) * math.sqrt_2_div_2();
 259:eurorack/stmlib/fft/shy_fft.h ****       d[i + 1] = s[i + 1] + v;
 260:eurorack/stmlib/fft/shy_fft.h ****       d[i + 3] = s[i + 1] - v;
 261:eurorack/stmlib/fft/shy_fft.h **** 
 262:eurorack/stmlib/fft/shy_fft.h ****       v = (s[i + 5] + s[i + 7]) * math.sqrt_2_div_2();
 263:eurorack/stmlib/fft/shy_fft.h ****       d[i + 5] = v + s[i + 3];
 264:eurorack/stmlib/fft/shy_fft.h ****       d[i + 7] = v - s[i + 3];
 265:eurorack/stmlib/fft/shy_fft.h ****     }
 266:eurorack/stmlib/fft/shy_fft.h ****     
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 14


 267:eurorack/stmlib/fft/shy_fft.h ****     // Remaining passes.
 268:eurorack/stmlib/fft/shy_fft.h ****     for (size_t pass = 3; pass < num_passes; ++pass) {
 269:eurorack/stmlib/fft/shy_fft.h ****       // Flip source and destination pointers
 270:eurorack/stmlib/fft/shy_fft.h ****       {
 271:eurorack/stmlib/fft/shy_fft.h ****         T* tmp = s;
 272:eurorack/stmlib/fft/shy_fft.h ****         s = d;
 273:eurorack/stmlib/fft/shy_fft.h ****         d = tmp;
 274:eurorack/stmlib/fft/shy_fft.h ****       }
 275:eurorack/stmlib/fft/shy_fft.h ****       
 276:eurorack/stmlib/fft/shy_fft.h ****       size_t n = 1 << pass;
 277:eurorack/stmlib/fft/shy_fft.h ****       size_t n_2 = n >> 1;
 278:eurorack/stmlib/fft/shy_fft.h **** 
 279:eurorack/stmlib/fft/shy_fft.h ****       for (size_t i = 0; i < size; i += (n << 1)) {
 280:eurorack/stmlib/fft/shy_fft.h ****         T* s1r = s + i;
 281:eurorack/stmlib/fft/shy_fft.h ****         T* s2r = s1r + n;
 282:eurorack/stmlib/fft/shy_fft.h ****         T* dr = d + i;
 283:eurorack/stmlib/fft/shy_fft.h ****         T* di = dr + n;
 284:eurorack/stmlib/fft/shy_fft.h **** 
 285:eurorack/stmlib/fft/shy_fft.h ****         dr[0] = s1r[0] + s2r[0];
 286:eurorack/stmlib/fft/shy_fft.h ****         di[0] = s1r[0] - s2r[0];
 287:eurorack/stmlib/fft/shy_fft.h ****         dr[n_2] = s1r[n_2];
 288:eurorack/stmlib/fft/shy_fft.h ****         di[n_2] = s2r[n_2];
 289:eurorack/stmlib/fft/shy_fft.h ****         T* s1i = s1r + n_2;
 290:eurorack/stmlib/fft/shy_fft.h ****         T* s2i = s1i + n;
 291:eurorack/stmlib/fft/shy_fft.h ****         phasor->Start(pass);
 292:eurorack/stmlib/fft/shy_fft.h ****         for (size_t j = 1; j < n_2; ++j) {
 293:eurorack/stmlib/fft/shy_fft.h ****           T c = phasor->cos();
 294:eurorack/stmlib/fft/shy_fft.h ****           T s = phasor->sin();
 295:eurorack/stmlib/fft/shy_fft.h ****           T v;
 296:eurorack/stmlib/fft/shy_fft.h **** 
 297:eurorack/stmlib/fft/shy_fft.h ****           v = s2r[j] * c - s2i[j] * s;
 298:eurorack/stmlib/fft/shy_fft.h ****           dr[j] = s1r[j] + v;
 299:eurorack/stmlib/fft/shy_fft.h ****           di[-j] = s1r[j] - v;
 300:eurorack/stmlib/fft/shy_fft.h **** 
 301:eurorack/stmlib/fft/shy_fft.h ****           v = s2r[j] * s + s2i[j] * c;
 302:eurorack/stmlib/fft/shy_fft.h ****           di[j] = v + s1i[j];
 303:eurorack/stmlib/fft/shy_fft.h ****           di[n - j] = v - s1i[j];
 304:eurorack/stmlib/fft/shy_fft.h ****           phasor->Rotate();
 305:eurorack/stmlib/fft/shy_fft.h ****         }
 306:eurorack/stmlib/fft/shy_fft.h ****       }
 307:eurorack/stmlib/fft/shy_fft.h ****     }
 308:eurorack/stmlib/fft/shy_fft.h ****     
 309:eurorack/stmlib/fft/shy_fft.h ****     // Annoying additional data copy step.
 310:eurorack/stmlib/fft/shy_fft.h ****     if (d != output) {
 311:eurorack/stmlib/fft/shy_fft.h ****       std::copy(&d[0], &d[size], &output[0]);
 312:eurorack/stmlib/fft/shy_fft.h ****     }
 313:eurorack/stmlib/fft/shy_fft.h ****   }
 314:eurorack/stmlib/fft/shy_fft.h ****   
 315:eurorack/stmlib/fft/shy_fft.h ****   // The exact same thing but with "num_passes" as a run-time argument.
 316:eurorack/stmlib/fft/shy_fft.h ****   void operator()(
 317:eurorack/stmlib/fft/shy_fft.h ****       T* input,
 318:eurorack/stmlib/fft/shy_fft.h ****       T* output,
 319:eurorack/stmlib/fft/shy_fft.h ****       const uint8_t* bit_rev,
 320:eurorack/stmlib/fft/shy_fft.h ****       Phasor* phasor,
 321:eurorack/stmlib/fft/shy_fft.h ****       size_t rt_num_passes) {
 322:eurorack/stmlib/fft/shy_fft.h ****     T* s;
 323:eurorack/stmlib/fft/shy_fft.h ****     T* d;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 15


 324:eurorack/stmlib/fft/shy_fft.h ****     Math<T> math;
 325:eurorack/stmlib/fft/shy_fft.h ****     size_t rt_size = 1 << rt_num_passes;
 326:eurorack/stmlib/fft/shy_fft.h ****     // First and second pass.
 327:eurorack/stmlib/fft/shy_fft.h ****     d = output;
 328:eurorack/stmlib/fft/shy_fft.h ****     for (size_t i = 0; i < rt_size; i += 4) {
 329:eurorack/stmlib/fft/shy_fft.h ****       const T* s = input;
 330:eurorack/stmlib/fft/shy_fft.h ****       size_t r0 = \
 331:eurorack/stmlib/fft/shy_fft.h ****           ((bit_rev[i & 0xff] << 8) | bit_rev[i >> 8]) >> (16 - rt_num_passes);
 332:eurorack/stmlib/fft/shy_fft.h ****       size_t r1 = r0 + 2 * (rt_size >> 2);
 333:eurorack/stmlib/fft/shy_fft.h ****       size_t r2 = r0 + 1 * (rt_size >> 2);
 334:eurorack/stmlib/fft/shy_fft.h ****       size_t r3 = r0 + 3 * (rt_size >> 2);
 335:eurorack/stmlib/fft/shy_fft.h ****       
 336:eurorack/stmlib/fft/shy_fft.h ****       d[1] = s[r0] - s[r1];
 337:eurorack/stmlib/fft/shy_fft.h ****       d[3] = s[r2] - s[r3];
 338:eurorack/stmlib/fft/shy_fft.h ****       T a = s[r0] + s[r1];
 339:eurorack/stmlib/fft/shy_fft.h ****       T b = s[r2] + s[r3];
 340:eurorack/stmlib/fft/shy_fft.h ****       d[0] = a + b;
 341:eurorack/stmlib/fft/shy_fft.h ****       d[2] = a - b;
 342:eurorack/stmlib/fft/shy_fft.h ****       d += 4;
 343:eurorack/stmlib/fft/shy_fft.h ****     }
 344:eurorack/stmlib/fft/shy_fft.h ****     
 345:eurorack/stmlib/fft/shy_fft.h ****     // Third pass.
 346:eurorack/stmlib/fft/shy_fft.h ****     s = output;
 347:eurorack/stmlib/fft/shy_fft.h ****     d = input;
 348:eurorack/stmlib/fft/shy_fft.h ****     for (size_t i = 0; i < rt_size; i += 8) {
 349:eurorack/stmlib/fft/shy_fft.h ****       T v;
 350:eurorack/stmlib/fft/shy_fft.h **** 
 351:eurorack/stmlib/fft/shy_fft.h ****       d[i] = s[i] + s[i + 4];
 352:eurorack/stmlib/fft/shy_fft.h ****       d[i + 4] = s[i] - s[i + 4];
 353:eurorack/stmlib/fft/shy_fft.h ****       d[i + 2] = s[i + 2];
 354:eurorack/stmlib/fft/shy_fft.h ****       d[i + 6] = s[i + 6];
 355:eurorack/stmlib/fft/shy_fft.h **** 
 356:eurorack/stmlib/fft/shy_fft.h ****       v = (s[i + 5] - s[i + 7]) * math.sqrt_2_div_2();
 357:eurorack/stmlib/fft/shy_fft.h ****       d[i + 1] = s[i + 1] + v;
 358:eurorack/stmlib/fft/shy_fft.h ****       d[i + 3] = s[i + 1] - v;
 359:eurorack/stmlib/fft/shy_fft.h **** 
 360:eurorack/stmlib/fft/shy_fft.h ****       v = (s[i + 5] + s[i + 7]) * math.sqrt_2_div_2();
 361:eurorack/stmlib/fft/shy_fft.h ****       d[i + 5] = v + s[i + 3];
 362:eurorack/stmlib/fft/shy_fft.h ****       d[i + 7] = v - s[i + 3];
 363:eurorack/stmlib/fft/shy_fft.h ****     }
 364:eurorack/stmlib/fft/shy_fft.h ****     
 365:eurorack/stmlib/fft/shy_fft.h ****     // Remaining passes.
 366:eurorack/stmlib/fft/shy_fft.h ****     for (size_t pass = 3; pass < rt_num_passes; ++pass) {
 367:eurorack/stmlib/fft/shy_fft.h ****       // Flip source and destination pointers
 368:eurorack/stmlib/fft/shy_fft.h ****       {
 369:eurorack/stmlib/fft/shy_fft.h ****         T* tmp = s;
 370:eurorack/stmlib/fft/shy_fft.h ****         s = d;
 371:eurorack/stmlib/fft/shy_fft.h ****         d = tmp;
 372:eurorack/stmlib/fft/shy_fft.h ****       }
 373:eurorack/stmlib/fft/shy_fft.h ****       
 374:eurorack/stmlib/fft/shy_fft.h ****       size_t n = 1 << pass;
 375:eurorack/stmlib/fft/shy_fft.h ****       size_t n_2 = n >> 1;
 376:eurorack/stmlib/fft/shy_fft.h **** 
 377:eurorack/stmlib/fft/shy_fft.h ****       for (size_t i = 0; i < rt_size; i += (n << 1)) {
 378:eurorack/stmlib/fft/shy_fft.h ****         T* s1r = s + i;
 379:eurorack/stmlib/fft/shy_fft.h ****         T* s2r = s1r + n;
 380:eurorack/stmlib/fft/shy_fft.h ****         T* dr = d + i;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 16


 381:eurorack/stmlib/fft/shy_fft.h ****         T* di = dr + n;
 382:eurorack/stmlib/fft/shy_fft.h **** 
 383:eurorack/stmlib/fft/shy_fft.h ****         dr[0] = s1r[0] + s2r[0];
 384:eurorack/stmlib/fft/shy_fft.h ****         di[0] = s1r[0] - s2r[0];
 385:eurorack/stmlib/fft/shy_fft.h ****         dr[n_2] = s1r[n_2];
 386:eurorack/stmlib/fft/shy_fft.h ****         di[n_2] = s2r[n_2];
 387:eurorack/stmlib/fft/shy_fft.h ****         T* s1i = s1r + n_2;
 388:eurorack/stmlib/fft/shy_fft.h ****         T* s2i = s1i + n;
 389:eurorack/stmlib/fft/shy_fft.h ****         phasor->Start(pass);
 390:eurorack/stmlib/fft/shy_fft.h ****         for (size_t j = 1; j < n_2; ++j) {
 391:eurorack/stmlib/fft/shy_fft.h ****           T c = phasor->cos();
 392:eurorack/stmlib/fft/shy_fft.h ****           T s = phasor->sin();
 393:eurorack/stmlib/fft/shy_fft.h ****           T v;
 394:eurorack/stmlib/fft/shy_fft.h **** 
 395:eurorack/stmlib/fft/shy_fft.h ****           v = s2r[j] * c - s2i[j] * s;
 396:eurorack/stmlib/fft/shy_fft.h ****           dr[j] = s1r[j] + v;
 397:eurorack/stmlib/fft/shy_fft.h ****           di[-j] = s1r[j] - v;
 398:eurorack/stmlib/fft/shy_fft.h **** 
 399:eurorack/stmlib/fft/shy_fft.h ****           v = s2r[j] * s + s2i[j] * c;
 400:eurorack/stmlib/fft/shy_fft.h ****           di[j] = v + s1i[j];
 401:eurorack/stmlib/fft/shy_fft.h ****           di[n - j] = v - s1i[j];
 402:eurorack/stmlib/fft/shy_fft.h ****           phasor->Rotate();
 403:eurorack/stmlib/fft/shy_fft.h ****         }
 404:eurorack/stmlib/fft/shy_fft.h ****       }
 405:eurorack/stmlib/fft/shy_fft.h ****     }
 406:eurorack/stmlib/fft/shy_fft.h ****     
 407:eurorack/stmlib/fft/shy_fft.h ****     // Annoying additional data copy step.
 408:eurorack/stmlib/fft/shy_fft.h ****     if (d != output) {
 409:eurorack/stmlib/fft/shy_fft.h ****       std::copy(&d[0], &d[rt_size], &output[0]);
 410:eurorack/stmlib/fft/shy_fft.h ****     }
 411:eurorack/stmlib/fft/shy_fft.h ****   }
 412:eurorack/stmlib/fft/shy_fft.h **** };
 413:eurorack/stmlib/fft/shy_fft.h **** 
 414:eurorack/stmlib/fft/shy_fft.h **** template<typename T, typename Phasor>
 415:eurorack/stmlib/fft/shy_fft.h **** struct DirectTransform<T, 0, Phasor> {
 416:eurorack/stmlib/fft/shy_fft.h ****   void operator()(const T* i, T* o, T*, const uint8_t*, Phasor*) {
 417:eurorack/stmlib/fft/shy_fft.h ****     o[0] = i[0];
 418:eurorack/stmlib/fft/shy_fft.h ****   }
 419:eurorack/stmlib/fft/shy_fft.h **** };
 420:eurorack/stmlib/fft/shy_fft.h **** 
 421:eurorack/stmlib/fft/shy_fft.h **** template<typename T, typename Phasor>
 422:eurorack/stmlib/fft/shy_fft.h **** struct DirectTransform<T, 1, Phasor> {
 423:eurorack/stmlib/fft/shy_fft.h ****   void operator()(const T* i, T* o, T*, const uint8_t*, Phasor*) {
 424:eurorack/stmlib/fft/shy_fft.h ****     o[0] = i[0] + i[1];
 425:eurorack/stmlib/fft/shy_fft.h ****     o[1] = i[0] - i[1];
 426:eurorack/stmlib/fft/shy_fft.h ****   }
 427:eurorack/stmlib/fft/shy_fft.h **** };
 428:eurorack/stmlib/fft/shy_fft.h **** 
 429:eurorack/stmlib/fft/shy_fft.h **** template<typename T, typename Phasor>
 430:eurorack/stmlib/fft/shy_fft.h **** struct DirectTransform<T, 2, Phasor> {
 431:eurorack/stmlib/fft/shy_fft.h ****   void operator()(const T* i, T* o, T*, const uint8_t*, Phasor*) {
 432:eurorack/stmlib/fft/shy_fft.h ****     o[1] = i[0] - i[2];
 433:eurorack/stmlib/fft/shy_fft.h ****     o[3] = i[1] - i[3];
 434:eurorack/stmlib/fft/shy_fft.h ****     T a = i[0] + i[2];
 435:eurorack/stmlib/fft/shy_fft.h ****     T b = i[1] + i[3];
 436:eurorack/stmlib/fft/shy_fft.h ****     o[0] = a + b;
 437:eurorack/stmlib/fft/shy_fft.h ****     o[2] = a - b;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 17


 438:eurorack/stmlib/fft/shy_fft.h ****   }
 439:eurorack/stmlib/fft/shy_fft.h **** };
 440:eurorack/stmlib/fft/shy_fft.h **** 
 441:eurorack/stmlib/fft/shy_fft.h **** 
 442:eurorack/stmlib/fft/shy_fft.h **** // Inverse transform
 443:eurorack/stmlib/fft/shy_fft.h **** template<typename T, size_t num_passes, typename Phasor>
 444:eurorack/stmlib/fft/shy_fft.h **** struct InverseTransform {
 445:eurorack/stmlib/fft/shy_fft.h ****  private:
 446:eurorack/stmlib/fft/shy_fft.h ****   enum {
 447:eurorack/stmlib/fft/shy_fft.h ****     size = 1 << num_passes
 448:eurorack/stmlib/fft/shy_fft.h ****   };
 449:eurorack/stmlib/fft/shy_fft.h ****   
 450:eurorack/stmlib/fft/shy_fft.h ****  public:
 451:eurorack/stmlib/fft/shy_fft.h ****   void operator()(
 452:eurorack/stmlib/fft/shy_fft.h ****       T* input,
 453:eurorack/stmlib/fft/shy_fft.h ****       T* output,
 454:eurorack/stmlib/fft/shy_fft.h ****       const uint8_t* bit_rev,
 455:eurorack/stmlib/fft/shy_fft.h ****       Phasor* phasor) {
 456:eurorack/stmlib/fft/shy_fft.h ****     T* s = (T*)(input);
 457:eurorack/stmlib/fft/shy_fft.h ****     T* d = output;
 458:eurorack/stmlib/fft/shy_fft.h ****     Math<T> math;
 459:eurorack/stmlib/fft/shy_fft.h ****     
 460:eurorack/stmlib/fft/shy_fft.h ****     // Remaining passes.
 461:eurorack/stmlib/fft/shy_fft.h ****     for (size_t pass = num_passes - 1; pass >= 3; --pass) {
 462:eurorack/stmlib/fft/shy_fft.h ****       size_t n = 1 << pass;
 463:eurorack/stmlib/fft/shy_fft.h ****       size_t n_2 = n >> 1;
 464:eurorack/stmlib/fft/shy_fft.h ****       
 465:eurorack/stmlib/fft/shy_fft.h ****       for (size_t i = 0; i < size; i += (n << 1)) {
 466:eurorack/stmlib/fft/shy_fft.h ****         T* sr = s + i;
 467:eurorack/stmlib/fft/shy_fft.h ****         T* si = sr + n;
 468:eurorack/stmlib/fft/shy_fft.h ****         T* d1r = d + i;
 469:eurorack/stmlib/fft/shy_fft.h ****         T* d2r = d1r + n;
 470:eurorack/stmlib/fft/shy_fft.h ****         
 471:eurorack/stmlib/fft/shy_fft.h ****         d1r[0] = sr[0] + si[0];
 472:eurorack/stmlib/fft/shy_fft.h ****         d2r[0] = sr[0] - si[0];
 473:eurorack/stmlib/fft/shy_fft.h ****         d1r[n_2] = sr[n_2] * T(2);
 474:eurorack/stmlib/fft/shy_fft.h ****         d2r[n_2] = si[n_2] * T(2);
 475:eurorack/stmlib/fft/shy_fft.h ****       
 476:eurorack/stmlib/fft/shy_fft.h ****         T* d1i = d1r + n_2;
 477:eurorack/stmlib/fft/shy_fft.h ****         T* d2i = d1i + n;
 478:eurorack/stmlib/fft/shy_fft.h ****         phasor->Start(pass);
 479:eurorack/stmlib/fft/shy_fft.h ****         for (size_t j = 1; j < n_2; ++j) {
 480:eurorack/stmlib/fft/shy_fft.h ****           d1r[j] = sr[j] + si[-j];
 481:eurorack/stmlib/fft/shy_fft.h ****           d1i[j] = si[j] - si[n - j];
 482:eurorack/stmlib/fft/shy_fft.h ****           
 483:eurorack/stmlib/fft/shy_fft.h ****           T c = phasor->cos();
 484:eurorack/stmlib/fft/shy_fft.h ****           T s = phasor->sin();
 485:eurorack/stmlib/fft/shy_fft.h ****           T vr = sr[j] - si[-j];
 486:eurorack/stmlib/fft/shy_fft.h ****           T vi = si[j] + si[n - j];
 487:eurorack/stmlib/fft/shy_fft.h ****           
 488:eurorack/stmlib/fft/shy_fft.h ****           d2r[j] = vr * c + vi * s;
 489:eurorack/stmlib/fft/shy_fft.h ****           d2i[j] = vi * c - vr * s;
 490:eurorack/stmlib/fft/shy_fft.h ****           phasor->Rotate();
 491:eurorack/stmlib/fft/shy_fft.h ****         }
 492:eurorack/stmlib/fft/shy_fft.h ****       }
 493:eurorack/stmlib/fft/shy_fft.h **** 
 494:eurorack/stmlib/fft/shy_fft.h ****       // Flip source and destination pointers for the next pass.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 18


 495:eurorack/stmlib/fft/shy_fft.h ****       if (d == output) {
 496:eurorack/stmlib/fft/shy_fft.h ****         s = output;
 497:eurorack/stmlib/fft/shy_fft.h ****         d = input;
 498:eurorack/stmlib/fft/shy_fft.h ****       } else {
 499:eurorack/stmlib/fft/shy_fft.h ****         s = input;
 500:eurorack/stmlib/fft/shy_fft.h ****         d = output;
 501:eurorack/stmlib/fft/shy_fft.h ****       }
 502:eurorack/stmlib/fft/shy_fft.h ****     }
 503:eurorack/stmlib/fft/shy_fft.h ****     
 504:eurorack/stmlib/fft/shy_fft.h ****     // Copy data if necessary.
 505:eurorack/stmlib/fft/shy_fft.h ****     if (d == output) {
 506:eurorack/stmlib/fft/shy_fft.h ****       std::copy(&s[0], &s[size], &output[0]);
 507:eurorack/stmlib/fft/shy_fft.h ****     }
 508:eurorack/stmlib/fft/shy_fft.h ****     
 509:eurorack/stmlib/fft/shy_fft.h ****     s = output;
 510:eurorack/stmlib/fft/shy_fft.h ****     d = input;
 511:eurorack/stmlib/fft/shy_fft.h ****     for (size_t i = 0; i < size; i += 8) {
 512:eurorack/stmlib/fft/shy_fft.h ****       T vr, vi;
 513:eurorack/stmlib/fft/shy_fft.h ****       d[i] = s[i] + s[i + 4];
 514:eurorack/stmlib/fft/shy_fft.h ****       d[i + 4] = s[i] - s[i + 4];
 515:eurorack/stmlib/fft/shy_fft.h ****       d[i + 2] = s[i + 2] * T(2);
 516:eurorack/stmlib/fft/shy_fft.h ****       d[i + 6] = s[i + 6] * T(2);
 517:eurorack/stmlib/fft/shy_fft.h ****       d[i + 1] = s[i + 1] + s[i + 3];
 518:eurorack/stmlib/fft/shy_fft.h ****       d[i + 3] = s[i + 5] - s[i + 7];
 519:eurorack/stmlib/fft/shy_fft.h ****       vr = s[i + 1] - s[i + 3];
 520:eurorack/stmlib/fft/shy_fft.h ****       vi = s[i + 5] + s[i + 7];
 521:eurorack/stmlib/fft/shy_fft.h ****       d[i + 5] = (vr + vi) * math.sqrt_2_div_2();
 522:eurorack/stmlib/fft/shy_fft.h ****       d[i + 7] = (vi - vr) * math.sqrt_2_div_2();
 523:eurorack/stmlib/fft/shy_fft.h ****     }
 524:eurorack/stmlib/fft/shy_fft.h ****     
 525:eurorack/stmlib/fft/shy_fft.h ****     // First and second pass.
 526:eurorack/stmlib/fft/shy_fft.h ****     s = input;
 527:eurorack/stmlib/fft/shy_fft.h ****     d = output;
 528:eurorack/stmlib/fft/shy_fft.h ****     for (size_t i = 0; i < size; i += 4) {
 529:eurorack/stmlib/fft/shy_fft.h ****       size_t r0 = num_passes <= 8
 530:eurorack/stmlib/fft/shy_fft.h ****           ? bit_rev[i >> 2]
 531:eurorack/stmlib/fft/shy_fft.h ****           : ((bit_rev[i & 0xff] << 8) | bit_rev[i >> 8]) >> (16 - num_passes);
 532:eurorack/stmlib/fft/shy_fft.h ****       size_t r1 = r0 + 2 * (size >> 2);
 533:eurorack/stmlib/fft/shy_fft.h ****       size_t r2 = r0 + 1 * (size >> 2);
 534:eurorack/stmlib/fft/shy_fft.h ****       size_t r3 = r0 + 3 * (size >> 2);
 535:eurorack/stmlib/fft/shy_fft.h ****       
 536:eurorack/stmlib/fft/shy_fft.h ****       T b_0 = s[0] + s[2];
 537:eurorack/stmlib/fft/shy_fft.h ****       T b_2 = s[0] - s[2];
 538:eurorack/stmlib/fft/shy_fft.h ****       T b_1 = s[1] * T(2);
 539:eurorack/stmlib/fft/shy_fft.h ****       T b_3 = s[3] * T(2);
 540:eurorack/stmlib/fft/shy_fft.h ****       
 541:eurorack/stmlib/fft/shy_fft.h ****       d[r0] = b_0 + b_1;
 542:eurorack/stmlib/fft/shy_fft.h ****       d[r1] = b_0 - b_1;
 543:eurorack/stmlib/fft/shy_fft.h ****       d[r2] = b_2 + b_3;
 544:eurorack/stmlib/fft/shy_fft.h ****       d[r3] = b_2 - b_3;
 545:eurorack/stmlib/fft/shy_fft.h ****       s += 4;
 546:eurorack/stmlib/fft/shy_fft.h ****     }
 547:eurorack/stmlib/fft/shy_fft.h ****   }
 548:eurorack/stmlib/fft/shy_fft.h ****   
 549:eurorack/stmlib/fft/shy_fft.h ****   void operator()(
 550:eurorack/stmlib/fft/shy_fft.h ****       T* input,
 551:eurorack/stmlib/fft/shy_fft.h ****       T* output,
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 19


 552:eurorack/stmlib/fft/shy_fft.h ****       const uint8_t* bit_rev,
 553:eurorack/stmlib/fft/shy_fft.h ****       Phasor* phasor,
 554:eurorack/stmlib/fft/shy_fft.h ****       size_t rt_num_passes) {
 555:eurorack/stmlib/fft/shy_fft.h ****     T* s = (T*)(input);
 556:eurorack/stmlib/fft/shy_fft.h ****     T* d = output;
 557:eurorack/stmlib/fft/shy_fft.h ****     Math<T> math;
 558:eurorack/stmlib/fft/shy_fft.h ****     
 559:eurorack/stmlib/fft/shy_fft.h ****     size_t rt_size = 1 << rt_num_passes;
 560:eurorack/stmlib/fft/shy_fft.h ****     
 561:eurorack/stmlib/fft/shy_fft.h ****     // Remaining passes.
 562:eurorack/stmlib/fft/shy_fft.h ****     for (size_t pass = rt_num_passes - 1; pass >= 3; --pass) {
 563:eurorack/stmlib/fft/shy_fft.h ****       size_t n = 1 << pass;
 564:eurorack/stmlib/fft/shy_fft.h ****       size_t n_2 = n >> 1;
 565:eurorack/stmlib/fft/shy_fft.h ****       
 566:eurorack/stmlib/fft/shy_fft.h ****       for (size_t i = 0; i < rt_size; i += (n << 1)) {
 567:eurorack/stmlib/fft/shy_fft.h ****         T* sr = s + i;
 568:eurorack/stmlib/fft/shy_fft.h ****         T* si = sr + n;
 569:eurorack/stmlib/fft/shy_fft.h ****         T* d1r = d + i;
 570:eurorack/stmlib/fft/shy_fft.h ****         T* d2r = d1r + n;
 571:eurorack/stmlib/fft/shy_fft.h ****         
 572:eurorack/stmlib/fft/shy_fft.h ****         d1r[0] = sr[0] + si[0];
 573:eurorack/stmlib/fft/shy_fft.h ****         d2r[0] = sr[0] - si[0];
 574:eurorack/stmlib/fft/shy_fft.h ****         d1r[n_2] = sr[n_2] * T(2);
 575:eurorack/stmlib/fft/shy_fft.h ****         d2r[n_2] = si[n_2] * T(2);
 576:eurorack/stmlib/fft/shy_fft.h ****       
 577:eurorack/stmlib/fft/shy_fft.h ****         T* d1i = d1r + n_2;
 578:eurorack/stmlib/fft/shy_fft.h ****         T* d2i = d1i + n;
 579:eurorack/stmlib/fft/shy_fft.h ****         phasor->Start(pass);
 580:eurorack/stmlib/fft/shy_fft.h ****         for (size_t j = 1; j < n_2; ++j) {
 581:eurorack/stmlib/fft/shy_fft.h ****           d1r[j] = sr[j] + si[-j];
 582:eurorack/stmlib/fft/shy_fft.h ****           d1i[j] = si[j] - si[n - j];
 583:eurorack/stmlib/fft/shy_fft.h ****           
 584:eurorack/stmlib/fft/shy_fft.h ****           T c = phasor->cos();
 585:eurorack/stmlib/fft/shy_fft.h ****           T s = phasor->sin();
 586:eurorack/stmlib/fft/shy_fft.h ****           T vr = sr[j] - si[-j];
 587:eurorack/stmlib/fft/shy_fft.h ****           T vi = si[j] + si[n - j];
 588:eurorack/stmlib/fft/shy_fft.h ****           
 589:eurorack/stmlib/fft/shy_fft.h ****           d2r[j] = vr * c + vi * s;
 590:eurorack/stmlib/fft/shy_fft.h ****           d2i[j] = vi * c - vr * s;
 591:eurorack/stmlib/fft/shy_fft.h ****           phasor->Rotate();
 592:eurorack/stmlib/fft/shy_fft.h ****         }
 593:eurorack/stmlib/fft/shy_fft.h ****       }
 594:eurorack/stmlib/fft/shy_fft.h **** 
 595:eurorack/stmlib/fft/shy_fft.h ****       // Flip source and destination pointers for the next pass.
 596:eurorack/stmlib/fft/shy_fft.h ****       if (d == output) {
 597:eurorack/stmlib/fft/shy_fft.h ****         s = output;
 598:eurorack/stmlib/fft/shy_fft.h ****         d = input;
 599:eurorack/stmlib/fft/shy_fft.h ****       } else {
 600:eurorack/stmlib/fft/shy_fft.h ****         s = input;
 601:eurorack/stmlib/fft/shy_fft.h ****         d = output;
 602:eurorack/stmlib/fft/shy_fft.h ****       }
 603:eurorack/stmlib/fft/shy_fft.h ****     }
 604:eurorack/stmlib/fft/shy_fft.h ****     
 605:eurorack/stmlib/fft/shy_fft.h ****     // Copy data if necessary.
 606:eurorack/stmlib/fft/shy_fft.h ****     if (d == output) {
 607:eurorack/stmlib/fft/shy_fft.h ****       std::copy(&s[0], &s[rt_size], &output[0]);
 608:eurorack/stmlib/fft/shy_fft.h ****     }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 20


 609:eurorack/stmlib/fft/shy_fft.h ****     
 610:eurorack/stmlib/fft/shy_fft.h ****     s = output;
 611:eurorack/stmlib/fft/shy_fft.h ****     d = input;
 612:eurorack/stmlib/fft/shy_fft.h ****     for (size_t i = 0; i < rt_size; i += 8) {
 613:eurorack/stmlib/fft/shy_fft.h ****       T vr, vi;
 614:eurorack/stmlib/fft/shy_fft.h ****       d[i] = s[i] + s[i + 4];
 615:eurorack/stmlib/fft/shy_fft.h ****       d[i + 4] = s[i] - s[i + 4];
 616:eurorack/stmlib/fft/shy_fft.h ****       d[i + 2] = s[i + 2] * T(2);
 617:eurorack/stmlib/fft/shy_fft.h ****       d[i + 6] = s[i + 6] * T(2);
 618:eurorack/stmlib/fft/shy_fft.h ****       d[i + 1] = s[i + 1] + s[i + 3];
 619:eurorack/stmlib/fft/shy_fft.h ****       d[i + 3] = s[i + 5] - s[i + 7];
 620:eurorack/stmlib/fft/shy_fft.h ****       vr = s[i + 1] - s[i + 3];
 621:eurorack/stmlib/fft/shy_fft.h ****       vi = s[i + 5] + s[i + 7];
 622:eurorack/stmlib/fft/shy_fft.h ****       d[i + 5] = (vr + vi) * math.sqrt_2_div_2();
 623:eurorack/stmlib/fft/shy_fft.h ****       d[i + 7] = (vi - vr) * math.sqrt_2_div_2();
 624:eurorack/stmlib/fft/shy_fft.h ****     }
 625:eurorack/stmlib/fft/shy_fft.h ****     
 626:eurorack/stmlib/fft/shy_fft.h ****     // First and second pass.
 627:eurorack/stmlib/fft/shy_fft.h ****     s = input;
 628:eurorack/stmlib/fft/shy_fft.h ****     d = output;
 629:eurorack/stmlib/fft/shy_fft.h ****     for (size_t i = 0; i < rt_size; i += 4) {
 630:eurorack/stmlib/fft/shy_fft.h ****       size_t r0 = \
 631:eurorack/stmlib/fft/shy_fft.h ****             ((bit_rev[i & 0xff] << 8) | bit_rev[i >> 8]) >> (16 - rt_num_passes);
 632:eurorack/stmlib/fft/shy_fft.h ****       size_t r1 = r0 + 2 * (rt_size >> 2);
 633:eurorack/stmlib/fft/shy_fft.h ****       size_t r2 = r0 + 1 * (rt_size >> 2);
 634:eurorack/stmlib/fft/shy_fft.h ****       size_t r3 = r0 + 3 * (rt_size >> 2);
 635:eurorack/stmlib/fft/shy_fft.h ****       
 636:eurorack/stmlib/fft/shy_fft.h ****       T b_0 = s[0] + s[2];
 637:eurorack/stmlib/fft/shy_fft.h ****       T b_2 = s[0] - s[2];
 638:eurorack/stmlib/fft/shy_fft.h ****       T b_1 = s[1] * T(2);
 639:eurorack/stmlib/fft/shy_fft.h ****       T b_3 = s[3] * T(2);
 640:eurorack/stmlib/fft/shy_fft.h ****       
 641:eurorack/stmlib/fft/shy_fft.h ****       d[r0] = b_0 + b_1;
 642:eurorack/stmlib/fft/shy_fft.h ****       d[r1] = b_0 - b_1;
 643:eurorack/stmlib/fft/shy_fft.h ****       d[r2] = b_2 + b_3;
 644:eurorack/stmlib/fft/shy_fft.h ****       d[r3] = b_2 - b_3;
 645:eurorack/stmlib/fft/shy_fft.h ****       s += 4;
 646:eurorack/stmlib/fft/shy_fft.h ****     }
 647:eurorack/stmlib/fft/shy_fft.h ****   }
 648:eurorack/stmlib/fft/shy_fft.h **** };
 649:eurorack/stmlib/fft/shy_fft.h **** 
 650:eurorack/stmlib/fft/shy_fft.h **** template<typename T, typename Phasor>
 651:eurorack/stmlib/fft/shy_fft.h **** struct InverseTransform<T, 0, Phasor> {
 652:eurorack/stmlib/fft/shy_fft.h ****   void operator()(const T* i, T* o, T*, const uint8_t*, Phasor*) {
 653:eurorack/stmlib/fft/shy_fft.h ****     o[0] = i[0];
 654:eurorack/stmlib/fft/shy_fft.h ****   }
 655:eurorack/stmlib/fft/shy_fft.h **** };
 656:eurorack/stmlib/fft/shy_fft.h **** 
 657:eurorack/stmlib/fft/shy_fft.h **** template<typename T, typename Phasor>
 658:eurorack/stmlib/fft/shy_fft.h **** struct InverseTransform<T, 1, Phasor> {
 659:eurorack/stmlib/fft/shy_fft.h ****   void operator()(const T* i, T* o, T*, const uint8_t*, Phasor*) {
 660:eurorack/stmlib/fft/shy_fft.h ****     o[0] = i[0] + i[1];
 661:eurorack/stmlib/fft/shy_fft.h ****     o[1] = i[0] - i[1];
 662:eurorack/stmlib/fft/shy_fft.h ****   }
 663:eurorack/stmlib/fft/shy_fft.h **** };
 664:eurorack/stmlib/fft/shy_fft.h **** 
 665:eurorack/stmlib/fft/shy_fft.h **** template<typename T, typename Phasor>
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 21


 666:eurorack/stmlib/fft/shy_fft.h **** struct InverseTransform<T, 2, Phasor> {
 667:eurorack/stmlib/fft/shy_fft.h ****   void operator()(const T* i, T* o, T*, const uint8_t*, Phasor*) {
 668:eurorack/stmlib/fft/shy_fft.h ****     T a = i[0] + i[2];
 669:eurorack/stmlib/fft/shy_fft.h ****     T b = i[0] - i[2];
 670:eurorack/stmlib/fft/shy_fft.h ****     
 671:eurorack/stmlib/fft/shy_fft.h ****     o[0] = a + i[1] * T(2);
 672:eurorack/stmlib/fft/shy_fft.h ****     o[2] = a - i[1] * T(2);
 673:eurorack/stmlib/fft/shy_fft.h ****     o[1] = b + i[3] * T(2);
 674:eurorack/stmlib/fft/shy_fft.h ****     o[3] = b - i[3] * T(2);
 675:eurorack/stmlib/fft/shy_fft.h ****   }
 676:eurorack/stmlib/fft/shy_fft.h **** };
 677:eurorack/stmlib/fft/shy_fft.h **** 
 678:eurorack/stmlib/fft/shy_fft.h **** 
 679:eurorack/stmlib/fft/shy_fft.h **** template<
 680:eurorack/stmlib/fft/shy_fft.h ****     typename T=float,
 681:eurorack/stmlib/fft/shy_fft.h ****     size_t size=16,
 682:eurorack/stmlib/fft/shy_fft.h ****     template <typename, size_t> class Phasor=LutPhasor>
 683:eurorack/stmlib/fft/shy_fft.h **** class ShyFFT {
 684:eurorack/stmlib/fft/shy_fft.h ****  public:
 685:eurorack/stmlib/fft/shy_fft.h ****   enum {
 686:eurorack/stmlib/fft/shy_fft.h ****     num_passes = Log2<size>::value,
 687:eurorack/stmlib/fft/shy_fft.h ****     max_size = size
 688:eurorack/stmlib/fft/shy_fft.h ****   };
 689:eurorack/stmlib/fft/shy_fft.h **** 
 690:eurorack/stmlib/fft/shy_fft.h ****  private:
 691:eurorack/stmlib/fft/shy_fft.h ****   typedef Phasor<T, num_passes> PhasorType;
 692:eurorack/stmlib/fft/shy_fft.h **** 
 693:eurorack/stmlib/fft/shy_fft.h ****  public:
 694:eurorack/stmlib/fft/shy_fft.h ****   ShyFFT() { }
 695:eurorack/stmlib/fft/shy_fft.h ****   ~ShyFFT() { }
  83              		.loc 8 695 3 view .LVU15
  84              	.LBB306:
  85              	.LBI306:
 159:eurorack/stmlib/fft/shy_fft.h ****   
  86              		.loc 8 159 3 view .LVU16
 159:eurorack/stmlib/fft/shy_fft.h ****   
  87              		.loc 8 159 3 is_stmt 0 view .LVU17
  88              	.LBE306:
  89              	.LBE305:
  90              	.LBE304:
  91              	.LBB307:
  92              	.LBI307:
  93              		.file 9 "eurorack/clouds/dsp/looping_sample_player.h"
   1:eurorack/clouds/dsp/looping_sample_player.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/clouds/dsp/looping_sample_player.h **** //
   3:eurorack/clouds/dsp/looping_sample_player.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/clouds/dsp/looping_sample_player.h **** //
   5:eurorack/clouds/dsp/looping_sample_player.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/clouds/dsp/looping_sample_player.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/clouds/dsp/looping_sample_player.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/clouds/dsp/looping_sample_player.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/clouds/dsp/looping_sample_player.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/clouds/dsp/looping_sample_player.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/clouds/dsp/looping_sample_player.h **** // 
  12:eurorack/clouds/dsp/looping_sample_player.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/clouds/dsp/looping_sample_player.h **** // all copies or substantial portions of the Software.
  14:eurorack/clouds/dsp/looping_sample_player.h **** // 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 22


  15:eurorack/clouds/dsp/looping_sample_player.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/clouds/dsp/looping_sample_player.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/clouds/dsp/looping_sample_player.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/clouds/dsp/looping_sample_player.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/clouds/dsp/looping_sample_player.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/clouds/dsp/looping_sample_player.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/clouds/dsp/looping_sample_player.h **** // THE SOFTWARE.
  22:eurorack/clouds/dsp/looping_sample_player.h **** // 
  23:eurorack/clouds/dsp/looping_sample_player.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/clouds/dsp/looping_sample_player.h **** //
  25:eurorack/clouds/dsp/looping_sample_player.h **** // -----------------------------------------------------------------------------
  26:eurorack/clouds/dsp/looping_sample_player.h **** //
  27:eurorack/clouds/dsp/looping_sample_player.h **** // Naive playback of audio stored in a buffer.
  28:eurorack/clouds/dsp/looping_sample_player.h **** 
  29:eurorack/clouds/dsp/looping_sample_player.h **** #ifndef CLOUDS_DSP_LOOPING_SAMPLE_PLAYER_H_
  30:eurorack/clouds/dsp/looping_sample_player.h **** #define CLOUDS_DSP_LOOPING_SAMPLE_PLAYER_H_
  31:eurorack/clouds/dsp/looping_sample_player.h **** 
  32:eurorack/clouds/dsp/looping_sample_player.h **** #include "stmlib/stmlib.h"
  33:eurorack/clouds/dsp/looping_sample_player.h **** 
  34:eurorack/clouds/dsp/looping_sample_player.h **** #include <algorithm>
  35:eurorack/clouds/dsp/looping_sample_player.h **** 
  36:eurorack/clouds/dsp/looping_sample_player.h **** #include "stmlib/dsp/units.h"
  37:eurorack/clouds/dsp/looping_sample_player.h **** 
  38:eurorack/clouds/dsp/looping_sample_player.h **** #include "clouds/dsp/audio_buffer.h"
  39:eurorack/clouds/dsp/looping_sample_player.h **** #include "clouds/dsp/frame.h"
  40:eurorack/clouds/dsp/looping_sample_player.h **** #include "clouds/dsp/parameters.h"
  41:eurorack/clouds/dsp/looping_sample_player.h **** 
  42:eurorack/clouds/dsp/looping_sample_player.h **** #include "clouds/resources.h"
  43:eurorack/clouds/dsp/looping_sample_player.h **** 
  44:eurorack/clouds/dsp/looping_sample_player.h **** namespace clouds {
  45:eurorack/clouds/dsp/looping_sample_player.h **** 
  46:eurorack/clouds/dsp/looping_sample_player.h **** const float kCrossfadeDuration = 64.0f;
  47:eurorack/clouds/dsp/looping_sample_player.h **** 
  48:eurorack/clouds/dsp/looping_sample_player.h **** using namespace stmlib;
  49:eurorack/clouds/dsp/looping_sample_player.h **** 
  50:eurorack/clouds/dsp/looping_sample_player.h **** class LoopingSamplePlayer {
  51:eurorack/clouds/dsp/looping_sample_player.h ****  public:
  52:eurorack/clouds/dsp/looping_sample_player.h ****   LoopingSamplePlayer() { }
  53:eurorack/clouds/dsp/looping_sample_player.h ****   ~LoopingSamplePlayer() { }
  94              		.loc 9 53 3 is_stmt 1 view .LVU18
  95              		.loc 9 53 3 is_stmt 0 view .LVU19
  96              	.LBE307:
  97              	.LBB308:
  98              	.LBI308:
  99              		.file 10 "eurorack/clouds/dsp/wsola_sample_player.h"
   1:eurorack/clouds/dsp/wsola_sample_player.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/clouds/dsp/wsola_sample_player.h **** //
   3:eurorack/clouds/dsp/wsola_sample_player.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/clouds/dsp/wsola_sample_player.h **** //
   5:eurorack/clouds/dsp/wsola_sample_player.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/clouds/dsp/wsola_sample_player.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/clouds/dsp/wsola_sample_player.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/clouds/dsp/wsola_sample_player.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/clouds/dsp/wsola_sample_player.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/clouds/dsp/wsola_sample_player.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/clouds/dsp/wsola_sample_player.h **** // 
  12:eurorack/clouds/dsp/wsola_sample_player.h **** // The above copyright notice and this permission notice shall be included in
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 23


  13:eurorack/clouds/dsp/wsola_sample_player.h **** // all copies or substantial portions of the Software.
  14:eurorack/clouds/dsp/wsola_sample_player.h **** // 
  15:eurorack/clouds/dsp/wsola_sample_player.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/clouds/dsp/wsola_sample_player.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/clouds/dsp/wsola_sample_player.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/clouds/dsp/wsola_sample_player.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/clouds/dsp/wsola_sample_player.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/clouds/dsp/wsola_sample_player.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/clouds/dsp/wsola_sample_player.h **** // THE SOFTWARE.
  22:eurorack/clouds/dsp/wsola_sample_player.h **** // 
  23:eurorack/clouds/dsp/wsola_sample_player.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/clouds/dsp/wsola_sample_player.h **** //
  25:eurorack/clouds/dsp/wsola_sample_player.h **** // -----------------------------------------------------------------------------
  26:eurorack/clouds/dsp/wsola_sample_player.h **** //
  27:eurorack/clouds/dsp/wsola_sample_player.h **** // WSOLA playback.
  28:eurorack/clouds/dsp/wsola_sample_player.h **** 
  29:eurorack/clouds/dsp/wsola_sample_player.h **** #ifndef CLOUDS_DSP_WSOLA_SAMPLE_PLAYER_H_
  30:eurorack/clouds/dsp/wsola_sample_player.h **** #define CLOUDS_DSP_WSOLA_SAMPLE_PLAYER_H_
  31:eurorack/clouds/dsp/wsola_sample_player.h **** 
  32:eurorack/clouds/dsp/wsola_sample_player.h **** #include <algorithm>
  33:eurorack/clouds/dsp/wsola_sample_player.h **** 
  34:eurorack/clouds/dsp/wsola_sample_player.h **** #include <cmath>
  35:eurorack/clouds/dsp/wsola_sample_player.h **** #include <cstdio>
  36:eurorack/clouds/dsp/wsola_sample_player.h **** #include <cstdlib>
  37:eurorack/clouds/dsp/wsola_sample_player.h **** 
  38:eurorack/clouds/dsp/wsola_sample_player.h **** #include "stmlib/stmlib.h"
  39:eurorack/clouds/dsp/wsola_sample_player.h **** #include "stmlib/dsp/units.h"
  40:eurorack/clouds/dsp/wsola_sample_player.h **** 
  41:eurorack/clouds/dsp/wsola_sample_player.h **** #include "clouds/dsp/audio_buffer.h"
  42:eurorack/clouds/dsp/wsola_sample_player.h **** #include "clouds/dsp/correlator.h"
  43:eurorack/clouds/dsp/wsola_sample_player.h **** #include "clouds/dsp/frame.h"
  44:eurorack/clouds/dsp/wsola_sample_player.h **** #include "clouds/dsp/window.h"
  45:eurorack/clouds/dsp/wsola_sample_player.h **** #include "clouds/dsp/parameters.h"
  46:eurorack/clouds/dsp/wsola_sample_player.h **** #include "clouds/resources.h"
  47:eurorack/clouds/dsp/wsola_sample_player.h **** 
  48:eurorack/clouds/dsp/wsola_sample_player.h **** namespace clouds {
  49:eurorack/clouds/dsp/wsola_sample_player.h **** 
  50:eurorack/clouds/dsp/wsola_sample_player.h **** const int32_t kMaxWSOLASize = 4096;
  51:eurorack/clouds/dsp/wsola_sample_player.h **** 
  52:eurorack/clouds/dsp/wsola_sample_player.h **** using namespace stmlib;
  53:eurorack/clouds/dsp/wsola_sample_player.h **** 
  54:eurorack/clouds/dsp/wsola_sample_player.h **** class WSOLASamplePlayer {
  55:eurorack/clouds/dsp/wsola_sample_player.h ****  public:
  56:eurorack/clouds/dsp/wsola_sample_player.h ****   WSOLASamplePlayer() { }
  57:eurorack/clouds/dsp/wsola_sample_player.h ****   ~WSOLASamplePlayer() { }
 100              		.loc 10 57 3 is_stmt 1 view .LVU20
 101              		.loc 10 57 3 is_stmt 0 view .LVU21
 102              	.LBE308:
 103              	.LBB309:
 104              	.LBI309:
 105              		.file 11 "eurorack/clouds/dsp/granular_sample_player.h"
   1:eurorack/clouds/dsp/granular_sample_player.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/clouds/dsp/granular_sample_player.h **** //
   3:eurorack/clouds/dsp/granular_sample_player.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/clouds/dsp/granular_sample_player.h **** //
   5:eurorack/clouds/dsp/granular_sample_player.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/clouds/dsp/granular_sample_player.h **** // of this software and associated documentation files (the "Software"), to deal
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 24


   7:eurorack/clouds/dsp/granular_sample_player.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/clouds/dsp/granular_sample_player.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/clouds/dsp/granular_sample_player.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/clouds/dsp/granular_sample_player.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/clouds/dsp/granular_sample_player.h **** // 
  12:eurorack/clouds/dsp/granular_sample_player.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/clouds/dsp/granular_sample_player.h **** // all copies or substantial portions of the Software.
  14:eurorack/clouds/dsp/granular_sample_player.h **** // 
  15:eurorack/clouds/dsp/granular_sample_player.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/clouds/dsp/granular_sample_player.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/clouds/dsp/granular_sample_player.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/clouds/dsp/granular_sample_player.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/clouds/dsp/granular_sample_player.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/clouds/dsp/granular_sample_player.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/clouds/dsp/granular_sample_player.h **** // THE SOFTWARE.
  22:eurorack/clouds/dsp/granular_sample_player.h **** // 
  23:eurorack/clouds/dsp/granular_sample_player.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/clouds/dsp/granular_sample_player.h **** //
  25:eurorack/clouds/dsp/granular_sample_player.h **** // -----------------------------------------------------------------------------
  26:eurorack/clouds/dsp/granular_sample_player.h **** //
  27:eurorack/clouds/dsp/granular_sample_player.h **** // Granular playback of audio stored in a buffer.
  28:eurorack/clouds/dsp/granular_sample_player.h **** 
  29:eurorack/clouds/dsp/granular_sample_player.h **** #ifndef CLOUDS_DSP_GRANULAR_SAMPLE_PLAYER_H_
  30:eurorack/clouds/dsp/granular_sample_player.h **** #define CLOUDS_DSP_GRANULAR_SAMPLE_PLAYER_H_
  31:eurorack/clouds/dsp/granular_sample_player.h **** 
  32:eurorack/clouds/dsp/granular_sample_player.h **** #include "stmlib/stmlib.h"
  33:eurorack/clouds/dsp/granular_sample_player.h **** 
  34:eurorack/clouds/dsp/granular_sample_player.h **** #include <algorithm>
  35:eurorack/clouds/dsp/granular_sample_player.h **** 
  36:eurorack/clouds/dsp/granular_sample_player.h **** #include "stmlib/dsp/atan.h"
  37:eurorack/clouds/dsp/granular_sample_player.h **** #include "stmlib/dsp/units.h"
  38:eurorack/clouds/dsp/granular_sample_player.h **** #include "stmlib/utils/random.h"
  39:eurorack/clouds/dsp/granular_sample_player.h **** 
  40:eurorack/clouds/dsp/granular_sample_player.h **** #include "clouds/dsp/audio_buffer.h"
  41:eurorack/clouds/dsp/granular_sample_player.h **** #include "clouds/dsp/frame.h"
  42:eurorack/clouds/dsp/granular_sample_player.h **** #include "clouds/dsp/grain.h"
  43:eurorack/clouds/dsp/granular_sample_player.h **** #include "clouds/dsp/parameters.h"
  44:eurorack/clouds/dsp/granular_sample_player.h **** 
  45:eurorack/clouds/dsp/granular_sample_player.h **** #include "clouds/resources.h"
  46:eurorack/clouds/dsp/granular_sample_player.h **** 
  47:eurorack/clouds/dsp/granular_sample_player.h **** namespace clouds {
  48:eurorack/clouds/dsp/granular_sample_player.h **** 
  49:eurorack/clouds/dsp/granular_sample_player.h **** const int32_t kMaxNumGrains = 64;
  50:eurorack/clouds/dsp/granular_sample_player.h **** 
  51:eurorack/clouds/dsp/granular_sample_player.h **** using namespace stmlib;
  52:eurorack/clouds/dsp/granular_sample_player.h **** 
  53:eurorack/clouds/dsp/granular_sample_player.h **** class GranularSamplePlayer {
  54:eurorack/clouds/dsp/granular_sample_player.h ****  public:
  55:eurorack/clouds/dsp/granular_sample_player.h ****   GranularSamplePlayer() { }
  56:eurorack/clouds/dsp/granular_sample_player.h ****   ~GranularSamplePlayer() { }
 106              		.loc 11 56 3 is_stmt 1 view .LVU22
 107              		.loc 11 56 3 is_stmt 0 view .LVU23
 108              	.LBE309:
 109              	.LBB310:
 110              	.LBI310:
 111              		.file 12 "eurorack/clouds/dsp/correlator.h"
   1:eurorack/clouds/dsp/correlator.h **** // Copyright 2014 Emilie Gillet.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 25


   2:eurorack/clouds/dsp/correlator.h **** //
   3:eurorack/clouds/dsp/correlator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/clouds/dsp/correlator.h **** //
   5:eurorack/clouds/dsp/correlator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/clouds/dsp/correlator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/clouds/dsp/correlator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/clouds/dsp/correlator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/clouds/dsp/correlator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/clouds/dsp/correlator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/clouds/dsp/correlator.h **** // 
  12:eurorack/clouds/dsp/correlator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/clouds/dsp/correlator.h **** // all copies or substantial portions of the Software.
  14:eurorack/clouds/dsp/correlator.h **** // 
  15:eurorack/clouds/dsp/correlator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/clouds/dsp/correlator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/clouds/dsp/correlator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/clouds/dsp/correlator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/clouds/dsp/correlator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/clouds/dsp/correlator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/clouds/dsp/correlator.h **** // THE SOFTWARE.
  22:eurorack/clouds/dsp/correlator.h **** // 
  23:eurorack/clouds/dsp/correlator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/clouds/dsp/correlator.h **** //
  25:eurorack/clouds/dsp/correlator.h **** // -----------------------------------------------------------------------------
  26:eurorack/clouds/dsp/correlator.h **** //
  27:eurorack/clouds/dsp/correlator.h **** // Search for stretch/shift splicing points by maximizing correlation.
  28:eurorack/clouds/dsp/correlator.h **** // Correlation is computed by XOR-ing the bit sign of samples - this allows
  29:eurorack/clouds/dsp/correlator.h **** // 32 samples to be matched in one single XOR operation.
  30:eurorack/clouds/dsp/correlator.h **** 
  31:eurorack/clouds/dsp/correlator.h **** #ifndef CLOUDS_DSP_CORRELATOR_H_
  32:eurorack/clouds/dsp/correlator.h **** #define CLOUDS_DSP_CORRELATOR_H_
  33:eurorack/clouds/dsp/correlator.h **** 
  34:eurorack/clouds/dsp/correlator.h **** #include "stmlib/stmlib.h"
  35:eurorack/clouds/dsp/correlator.h **** 
  36:eurorack/clouds/dsp/correlator.h **** namespace clouds {
  37:eurorack/clouds/dsp/correlator.h ****   
  38:eurorack/clouds/dsp/correlator.h **** class Correlator {
  39:eurorack/clouds/dsp/correlator.h ****  public:
  40:eurorack/clouds/dsp/correlator.h ****   Correlator() { }
  41:eurorack/clouds/dsp/correlator.h ****   ~Correlator() { }
 112              		.loc 12 41 3 is_stmt 1 view .LVU24
 113              		.loc 12 41 3 is_stmt 0 view .LVU25
 114              	.LBE310:
 115              		.loc 1 76 26 view .LVU26
 116 0000 7047     		bx	lr
 117              		.cfi_endproc
 118              	.LFE6097:
 120              		.weak	_ZN6clouds17GranularProcessorD1Ev
 121              		.thumb_set _ZN6clouds17GranularProcessorD1Ev,_ZN6clouds17GranularProcessorD2Ev
 122              		.section	.text._Z20ProcessUIAndControlsv,"ax",%progbits
 123              		.align	1
 124              		.global	_Z20ProcessUIAndControlsv
 125              		.syntax unified
 126              		.thumb
 127              		.thumb_func
 129              	_Z20ProcessUIAndControlsv:
 130              	.LFB6116:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 26


 131              		.file 13 "AudioProcessor.cpp"
   1:AudioProcessor.cpp **** #include "Thaumazein.h"
   2:AudioProcessor.cpp **** #include "mpr121_daisy.h"
   3:AudioProcessor.cpp **** // #include "DelayEffect.h"
   4:AudioProcessor.cpp **** #include "Polyphony.h" // Add include for PolyphonyEngine
   5:AudioProcessor.cpp **** #include <cmath>
   6:AudioProcessor.cpp **** #include <algorithm>
   7:AudioProcessor.cpp **** #include <vector> // Add vector for dynamic list
   8:AudioProcessor.cpp **** 
   9:AudioProcessor.cpp **** // const float MASTER_VOLUME = 0.7f; // Master output level scaler // REMOVED - Defined in Thaumaze
  10:AudioProcessor.cpp **** 
  11:AudioProcessor.cpp **** int  DetermineEngineSettings();
  12:AudioProcessor.cpp **** // void ConfigureDelaySettings(); // Ensure this is removed or commented
  13:AudioProcessor.cpp **** // void ProcessAudioOutput(AudioHandle::InterleavingOutputBuffer out, size_t size, float dry_level)
  14:AudioProcessor.cpp **** void UpdatePerformanceMonitors(size_t size, AudioHandle::InterleavingOutputBuffer out);
  15:AudioProcessor.cpp **** 
  16:AudioProcessor.cpp **** // New helper function declarations
  17:AudioProcessor.cpp **** void ProcessUIAndControls();
  18:AudioProcessor.cpp **** void UpdateArpState(int& engineIndex, bool& poly_mode, int& effective_num_voices, bool& arp_on);
  19:AudioProcessor.cpp **** void RenderVoices(int engineIndex, bool poly_mode, int effective_num_voices, bool arp_on);
  20:AudioProcessor.cpp **** void ApplyEffectsAndOutput(AudioHandle::InterleavingOutputBuffer out, size_t size);
  21:AudioProcessor.cpp **** 
  22:AudioProcessor.cpp **** // Global variables for data sharing between decomposed functions
  23:AudioProcessor.cpp **** 
  24:AudioProcessor.cpp **** extern VoiceEnvelope voice_envelopes[NUM_VOICES];
  25:AudioProcessor.cpp **** 
  26:AudioProcessor.cpp **** extern bool voice_active[NUM_VOICES];
  27:AudioProcessor.cpp **** 
  28:AudioProcessor.cpp **** // Define the CpuLoadMeter instance
  29:AudioProcessor.cpp **** // CpuLoadMeter cpu_meter; // Removed: Now defined in Interface.cpp
  30:AudioProcessor.cpp **** 
  31:AudioProcessor.cpp **** 
  32:AudioProcessor.cpp **** static bool was_arp_on = false; // For ARP state change detection
  33:AudioProcessor.cpp **** 
  34:AudioProcessor.cpp **** volatile int current_engine_index = 0; // Global engine index controlled by touch pads
  35:AudioProcessor.cpp **** 
  36:AudioProcessor.cpp **** // ADD: flag to indicate engine change so we can retrigger voices even when notes are held
  37:AudioProcessor.cpp **** volatile bool engine_changed_flag = false;
  38:AudioProcessor.cpp **** // 0 = inactive, 2 = send trigger low this block, 1 = send trigger high next block
  39:AudioProcessor.cpp **** volatile int engine_retrigger_phase = 0;
  40:AudioProcessor.cpp **** 
  41:AudioProcessor.cpp **** // Clouds Integration: Define processor and buffers
  42:AudioProcessor.cpp **** clouds::GranularProcessor clouds_processor;
  43:AudioProcessor.cpp **** uint8_t cloud_buffer[118784]; // Placed in SDRAM via DSY_SDRAM_BSS in .h
  44:AudioProcessor.cpp **** uint8_t cloud_buffer_ccm[65408]; // Placed in DTCM via DSY_DTCM_BSS in .h
  45:AudioProcessor.cpp **** // End Clouds Integration
  46:AudioProcessor.cpp **** 
  47:AudioProcessor.cpp **** void AudioCallback(AudioHandle::InterleavingInputBuffer in,
  48:AudioProcessor.cpp ****                  AudioHandle::InterleavingOutputBuffer out,
  49:AudioProcessor.cpp ****                  size_t size) {
  50:AudioProcessor.cpp ****     // Removed one-off debug print
  51:AudioProcessor.cpp ****     // Process UI controls at 1ms intervals inside audio callback
  52:AudioProcessor.cpp ****     static uint32_t last_ui_time = 0;
  53:AudioProcessor.cpp ****     uint32_t now_ms = hw.system.GetNow();
  54:AudioProcessor.cpp ****     if(now_ms - last_ui_time >= 1) {
  55:AudioProcessor.cpp ****         last_ui_time = now_ms;
  56:AudioProcessor.cpp ****         ProcessUIAndControls();
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 27


  57:AudioProcessor.cpp ****     }
  58:AudioProcessor.cpp ****     cpu_meter.OnBlockStart(); // Mark the beginning of the audio block
  59:AudioProcessor.cpp ****     
  60:AudioProcessor.cpp ****     // Variables to be passed between helper functions
  61:AudioProcessor.cpp ****     int engineIndex;
  62:AudioProcessor.cpp ****     bool poly_mode;
  63:AudioProcessor.cpp ****     int effective_num_voices;
  64:AudioProcessor.cpp ****     bool arp_on;
  65:AudioProcessor.cpp **** 
  66:AudioProcessor.cpp ****     // React to engine change flag by delegating voice migration to DSP layer.
  67:AudioProcessor.cpp ****     static int prev_engine_index_static = 0;
  68:AudioProcessor.cpp ****     if(engine_changed_flag) {
  69:AudioProcessor.cpp ****         poly_engine.OnEngineChange(prev_engine_index_static, current_engine_index);
  70:AudioProcessor.cpp ****         prev_engine_index_static = current_engine_index;
  71:AudioProcessor.cpp ****         engine_changed_flag = false; // Clear flag after handling
  72:AudioProcessor.cpp ****     }
  73:AudioProcessor.cpp **** 
  74:AudioProcessor.cpp ****     UpdateArpState(engineIndex, poly_mode, effective_num_voices, arp_on);
  75:AudioProcessor.cpp ****     RenderVoices(engineIndex, poly_mode, effective_num_voices, arp_on);
  76:AudioProcessor.cpp ****     ApplyEffectsAndOutput(out, size);
  77:AudioProcessor.cpp **** 
  78:AudioProcessor.cpp ****     // Clouds Integration: Call Prepare()
  79:AudioProcessor.cpp ****     clouds_processor.Prepare();
  80:AudioProcessor.cpp ****     // End Clouds Integration
  81:AudioProcessor.cpp **** 
  82:AudioProcessor.cpp ****     cpu_meter.OnBlockEnd(); // Mark the end of the audio block
  83:AudioProcessor.cpp **** }
  84:AudioProcessor.cpp **** 
  85:AudioProcessor.cpp **** void ProcessUIAndControls() {
 132              		.loc 13 85 29 is_stmt 1 view -0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 0, uses_anonymous_args = 0
  86:AudioProcessor.cpp ****     ProcessControls();
 136              		.loc 13 86 5 view .LVU28
  85:AudioProcessor.cpp ****     ProcessControls();
 137              		.loc 13 85 29 is_stmt 0 view .LVU29
 138 0000 08B5     		push	{r3, lr}
 139              		.cfi_def_cfa_offset 8
 140              		.cfi_offset 3, -8
 141              		.cfi_offset 14, -4
 142              		.loc 13 86 20 view .LVU30
 143 0002 FFF7FEFF 		bl	_Z15ProcessControlsv
 144              	.LVL1:
  87:AudioProcessor.cpp ****     ReadKnobValues();
 145              		.loc 13 87 5 is_stmt 1 view .LVU31
 146              		.loc 13 87 19 is_stmt 0 view .LVU32
 147 0006 FFF7FEFF 		bl	_Z14ReadKnobValuesv
 148              	.LVL2:
  88:AudioProcessor.cpp ****     
  89:AudioProcessor.cpp ****     // Tempo control for arpeggiator via timing knob
  90:AudioProcessor.cpp ****     if (arp_enabled) {
 149              		.loc 13 90 5 is_stmt 1 view .LVU33
 150              		.loc 13 90 9 is_stmt 0 view .LVU34
 151 000a 0C4B     		ldr	r3, .L7
 152 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 153              		.loc 13 90 5 view .LVU35
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 28


 154 000e 2BB1     		cbz	r3, .L3
  91:AudioProcessor.cpp ****         arp.SetMainTempoFromKnob(delay_time_val);
 155              		.loc 13 91 9 is_stmt 1 view .LVU36
 156              		.loc 13 91 33 is_stmt 0 view .LVU37
 157 0010 0B4B     		ldr	r3, .L7+4
 158 0012 0C48     		ldr	r0, .L7+8
 159 0014 93ED000A 		vldr.32	s0, [r3]
 160 0018 FFF7FEFF 		bl	_ZN11Arpeggiator20SetMainTempoFromKnobEf
 161              	.LVL3:
 162              	.L3:
  92:AudioProcessor.cpp ****     }
  93:AudioProcessor.cpp **** 
  94:AudioProcessor.cpp ****     float touch_control = touch_cv_value; 
 163              		.loc 13 94 5 is_stmt 1 view .LVU38
 164              		.loc 13 94 27 is_stmt 0 view .LVU39
 165 001c 0A4B     		ldr	r3, .L7+12
  95:AudioProcessor.cpp ****     
  96:AudioProcessor.cpp ****     float intensity_factor = 0.5f;
  97:AudioProcessor.cpp **** 
  98:AudioProcessor.cpp ****     morph_knob_val   = morph_knob_val   * (1.0f - intensity_factor) + touch_control * intensity_fac
 166              		.loc 13 98 85 view .LVU40
 167 001e B6EE007A 		vmov.f32	s14, #5.0e-1
  94:AudioProcessor.cpp ****     
 168              		.loc 13 94 27 view .LVU41
 169 0022 D3ED007A 		vldr.32	s15, [r3]
 170              	.LVL4:
  96:AudioProcessor.cpp **** 
 171              		.loc 13 96 5 is_stmt 1 view .LVU42
 172              		.loc 13 98 5 view .LVU43
 173              		.loc 13 98 41 is_stmt 0 view .LVU44
 174 0026 094B     		ldr	r3, .L7+16
 175              		.loc 13 98 85 view .LVU45
 176 0028 67EE877A 		vmul.f32	s15, s15, s14
 177              	.LVL5:
 178              		.loc 13 98 69 view .LVU46
 179 002c D3ED006A 		vldr.32	s13, [r3]
 180 0030 E6EE877A 		vfma.f32	s15, s13, s14
 181              		.loc 13 98 22 view .LVU47
 182 0034 C3ED007A 		vstr.32	s15, [r3]
  99:AudioProcessor.cpp ****     // delay_feedback_val = delay_feedback_val * (1.0f - intensity_factor) + touch_control * intens
 100:AudioProcessor.cpp **** 
 101:AudioProcessor.cpp **** 
 102:AudioProcessor.cpp **** }
 183              		.loc 13 102 1 view .LVU48
 184 0038 08BD     		pop	{r3, pc}
 185              	.L8:
 186 003a 00BF     		.align	2
 187              	.L7:
 188 003c 00000000 		.word	arp_enabled
 189 0040 00000000 		.word	delay_time_val
 190 0044 00000000 		.word	arp
 191 0048 00000000 		.word	touch_cv_value
 192 004c 00000000 		.word	morph_knob_val
 193              		.cfi_endproc
 194              	.LFE6116:
 196              		.section	.text._Z14UpdateArpStateRiRbS_S0_,"ax",%progbits
 197              		.align	1
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 29


 198              		.global	_Z14UpdateArpStateRiRbS_S0_
 199              		.syntax unified
 200              		.thumb
 201              		.thumb_func
 203              	_Z14UpdateArpStateRiRbS_S0_:
 204              	.LVL6:
 205              	.LFB6117:
 103:AudioProcessor.cpp **** 
 104:AudioProcessor.cpp **** void UpdateArpState(int& engineIndex, bool& poly_mode, int& effective_num_voices, bool& arp_on_out)
 206              		.loc 13 104 101 is_stmt 1 view -0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 8
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 105:AudioProcessor.cpp ****     engineIndex = DetermineEngineSettings();
 210              		.loc 13 105 5 view .LVU50
 211              	.LBB311:
 212              	.LBI311:
 106:AudioProcessor.cpp ****     poly_mode = (engineIndex <= 3);
 107:AudioProcessor.cpp ****     effective_num_voices = poly_mode ? NUM_VOICES : 1;
 108:AudioProcessor.cpp **** 
 109:AudioProcessor.cpp ****     bool current_arp_on = arp_enabled;
 110:AudioProcessor.cpp ****     if (!current_arp_on && was_arp_on) {
 111:AudioProcessor.cpp ****         poly_engine.ResetVoices();
 112:AudioProcessor.cpp ****         for (int v = 0; v < NUM_VOICES; ++v) {
 113:AudioProcessor.cpp ****         }
 114:AudioProcessor.cpp ****         poly_engine.UpdateLastTouchState(0);
 115:AudioProcessor.cpp ****     }
 116:AudioProcessor.cpp ****     was_arp_on = current_arp_on;
 117:AudioProcessor.cpp ****     arp_on_out = current_arp_on;
 118:AudioProcessor.cpp **** 
 119:AudioProcessor.cpp ****     if (current_arp_on) {
 120:AudioProcessor.cpp ****         arp.UpdateHeldNotes(current_touch_state, poly_engine.GetLastTouchState());
 121:AudioProcessor.cpp ****         arp.Process(BLOCK_SIZE);
 122:AudioProcessor.cpp ****     } else {
 123:AudioProcessor.cpp ****         poly_engine.HandleTouchInput(current_touch_state, poly_engine.GetLastTouchState(), engineIn
 124:AudioProcessor.cpp ****     }
 125:AudioProcessor.cpp ****     
 126:AudioProcessor.cpp ****     poly_engine.UpdateLastTouchState(current_touch_state);
 127:AudioProcessor.cpp **** }
 128:AudioProcessor.cpp **** 
 129:AudioProcessor.cpp **** void RenderVoices(int engineIndex, bool poly_mode, int effective_num_voices, bool arp_on) {
 130:AudioProcessor.cpp ****     PolyphonyEngine::RenderParameters params;
 131:AudioProcessor.cpp ****     params.engine_index = engineIndex;
 132:AudioProcessor.cpp ****     params.poly_mode = poly_mode;
 133:AudioProcessor.cpp ****     params.effective_num_voices = effective_num_voices;
 134:AudioProcessor.cpp ****     params.arp_on = arp_on;
 135:AudioProcessor.cpp ****     params.pitch_val = pitch_val;
 136:AudioProcessor.cpp ****     params.harm_knob_val = harm_knob_val;
 137:AudioProcessor.cpp ****     params.morph_knob_val = morph_knob_val;
 138:AudioProcessor.cpp ****     params.timbre_knob_val = timbre_knob_val;
 139:AudioProcessor.cpp ****     params.env_attack_val = env_attack_val;
 140:AudioProcessor.cpp ****     params.env_release_val = env_release_val;
 141:AudioProcessor.cpp ****     params.delay_mix_val = 0.0f;  // Delay removed, set mix to 0
 142:AudioProcessor.cpp ****     params.touch_cv_value = touch_cv_value;
 143:AudioProcessor.cpp ****     
 144:AudioProcessor.cpp ****     poly_engine.RenderBlock(params);
 145:AudioProcessor.cpp **** }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 30


 146:AudioProcessor.cpp **** 
 147:AudioProcessor.cpp **** void ApplyEffectsAndOutput(AudioHandle::InterleavingOutputBuffer out, size_t size) {
 148:AudioProcessor.cpp ****     // Clouds Integration: Prepare input and output buffers for Clouds
 149:AudioProcessor.cpp ****     static clouds::ShortFrame input_frames[BLOCK_SIZE];
 150:AudioProcessor.cpp ****     static clouds::ShortFrame output_frames[BLOCK_SIZE];
 151:AudioProcessor.cpp ****     // End Clouds Integration
 152:AudioProcessor.cpp **** 
 153:AudioProcessor.cpp ****     // Normalized output: average voices and apply master volume
 154:AudioProcessor.cpp ****     const float* buffer = poly_engine.GetMainOutputBuffer();
 155:AudioProcessor.cpp ****     // const float norm = 1.0f / 32768.0f; // Convert int16 range to [-1,1] // Clouds handles this
 156:AudioProcessor.cpp **** 
 157:AudioProcessor.cpp ****     // Clouds Integration: Feed synth output to Clouds input
 158:AudioProcessor.cpp ****     for (size_t i = 0; i < BLOCK_SIZE; ++i) {
 159:AudioProcessor.cpp ****         // Scale down to prevent overflow: average by number of voices and clamp to int16 range
 160:AudioProcessor.cpp ****         float scaled = buffer[i] / static_cast<float>(NUM_VOICES); // keep level similar to origina
 161:AudioProcessor.cpp ****         if (scaled > 32767.f) scaled = 32767.f;
 162:AudioProcessor.cpp ****         if (scaled < -32768.f) scaled = -32768.f;
 163:AudioProcessor.cpp ****         int16_t sample_int = static_cast<int16_t>(scaled);
 164:AudioProcessor.cpp ****         input_frames[i].l = sample_int;
 165:AudioProcessor.cpp ****         input_frames[i].r = sample_int; // Mono input to Clouds
 166:AudioProcessor.cpp ****     }
 167:AudioProcessor.cpp ****     // End Clouds Integration
 168:AudioProcessor.cpp **** 
 169:AudioProcessor.cpp ****     // Clouds Integration: Process audio through Clouds
 170:AudioProcessor.cpp ****     clouds_processor.Process(input_frames, output_frames, BLOCK_SIZE);
 171:AudioProcessor.cpp ****     // End Clouds Integration
 172:AudioProcessor.cpp **** 
 173:AudioProcessor.cpp ****     for (size_t i = 0; i < size; i += 2) {
 174:AudioProcessor.cpp ****         // Clouds Integration: Take output from Clouds
 175:AudioProcessor.cpp ****         float outL = static_cast<float>(output_frames[i/2].l) / 32768.0f;
 176:AudioProcessor.cpp ****         float outR = static_cast<float>(output_frames[i/2].r) / 32768.0f;
 177:AudioProcessor.cpp ****         // End Clouds Integration
 178:AudioProcessor.cpp ****         
 179:AudioProcessor.cpp ****         // float raw = buffer[i/2]; // Original line
 180:AudioProcessor.cpp ****         // Convert to float and average voices
 181:AudioProcessor.cpp ****         // float sample = (raw * norm) / float(NUM_VOICES); // Original line
 182:AudioProcessor.cpp ****         
 183:AudioProcessor.cpp ****         // For now, let's just use the left channel from Clouds and apply master volume.
 184:AudioProcessor.cpp ****         // We might want to sum L+R or handle stereo properly later.
 185:AudioProcessor.cpp ****         float sample = outL; // Using Clouds output
 186:AudioProcessor.cpp ****         
 187:AudioProcessor.cpp ****         // Apply master volume (keep below 1.0)
 188:AudioProcessor.cpp ****         sample *= MASTER_VOLUME;
 189:AudioProcessor.cpp ****         out[i]   = sample;
 190:AudioProcessor.cpp ****         out[i+1] = sample; // Outputting mono for now from Clouds L channel
 191:AudioProcessor.cpp ****     }
 192:AudioProcessor.cpp ****     UpdatePerformanceMonitors(size, out);
 193:AudioProcessor.cpp **** }
 194:AudioProcessor.cpp **** 
 195:AudioProcessor.cpp **** int DetermineEngineSettings() {
 213              		.loc 13 195 5 view .LVU51
 214              	.LBB312:
 196:AudioProcessor.cpp ****     return current_engine_index;
 215              		.loc 13 196 5 view .LVU52
 216              	.LBE312:
 217              	.LBE311:
 104:AudioProcessor.cpp ****     engineIndex = DetermineEngineSettings();
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 31


 218              		.loc 13 104 101 is_stmt 0 view .LVU53
 219 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 220              		.cfi_def_cfa_offset 28
 221              		.cfi_offset 4, -28
 222              		.cfi_offset 5, -24
 223              		.cfi_offset 6, -20
 224              		.cfi_offset 7, -16
 225              		.cfi_offset 8, -12
 226              		.cfi_offset 9, -8
 227              		.cfi_offset 14, -4
 228 0004 9846     		mov	r8, r3
 229              	.LBB315:
 230              	.LBB313:
 231              		.loc 13 196 12 view .LVU54
 232 0006 274B     		ldr	r3, .L18
 233              	.LVL7:
 234              		.loc 13 196 12 view .LVU55
 235              	.LBE313:
 236              	.LBE315:
 104:AudioProcessor.cpp ****     engineIndex = DetermineEngineSettings();
 237              		.loc 13 104 101 view .LVU56
 238 0008 1646     		mov	r6, r2
 239 000a 85B0     		sub	sp, sp, #20
 240              		.cfi_def_cfa_offset 48
 241              	.LBB316:
 242              	.LBB314:
 243              		.loc 13 196 12 view .LVU57
 244 000c 1B68     		ldr	r3, [r3]
 245              	.LBE314:
 246              	.LBE316:
 104:AudioProcessor.cpp ****     engineIndex = DetermineEngineSettings();
 247              		.loc 13 104 101 view .LVU58
 248 000e 0446     		mov	r4, r0
 249 0010 0D46     		mov	r5, r1
 250 0012 DFF8A090 		ldr	r9, .L18+16
 106:AudioProcessor.cpp ****     poly_mode = (engineIndex <= 3);
 251              		.loc 13 106 30 view .LVU59
 252 0016 032B     		cmp	r3, #3
 105:AudioProcessor.cpp ****     poly_mode = (engineIndex <= 3);
 253              		.loc 13 105 17 view .LVU60
 254 0018 0360     		str	r3, [r0]
 106:AudioProcessor.cpp ****     effective_num_voices = poly_mode ? NUM_VOICES : 1;
 255              		.loc 13 106 5 is_stmt 1 view .LVU61
 106:AudioProcessor.cpp ****     effective_num_voices = poly_mode ? NUM_VOICES : 1;
 256              		.loc 13 106 30 is_stmt 0 view .LVU62
 257 001a CCBF     		ite	gt
 258 001c 0022     		movgt	r2, #0
 259              	.LVL8:
 106:AudioProcessor.cpp ****     effective_num_voices = poly_mode ? NUM_VOICES : 1;
 260              		.loc 13 106 30 view .LVU63
 261 001e 0122     		movle	r2, #1
 107:AudioProcessor.cpp **** 
 262              		.loc 13 107 38 view .LVU64
 263 0020 042B     		cmp	r3, #4
 106:AudioProcessor.cpp ****     effective_num_voices = poly_mode ? NUM_VOICES : 1;
 264              		.loc 13 106 30 view .LVU65
 265 0022 0A70     		strb	r2, [r1]
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 32


 107:AudioProcessor.cpp **** 
 266              		.loc 13 107 5 is_stmt 1 view .LVU66
 107:AudioProcessor.cpp **** 
 267              		.loc 13 107 38 is_stmt 0 view .LVU67
 268 0024 B4BF     		ite	lt
 269 0026 0423     		movlt	r3, #4
 270 0028 0123     		movge	r3, #1
 107:AudioProcessor.cpp **** 
 271              		.loc 13 107 26 view .LVU68
 272 002a 3360     		str	r3, [r6]
 109:AudioProcessor.cpp ****     if (!current_arp_on && was_arp_on) {
 273              		.loc 13 109 5 is_stmt 1 view .LVU69
 109:AudioProcessor.cpp ****     if (!current_arp_on && was_arp_on) {
 274              		.loc 13 109 27 is_stmt 0 view .LVU70
 275 002c 1E4B     		ldr	r3, .L18+4
 276 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 277              	.LVL9:
 110:AudioProcessor.cpp ****         poly_engine.ResetVoices();
 278              		.loc 13 110 5 is_stmt 1 view .LVU71
 279              	.LBB317:
 280 0030 03F0FF07 		and	r7, r3, #255
 281 0034 4BB9     		cbnz	r3, .L11
 110:AudioProcessor.cpp ****         poly_engine.ResetVoices();
 282              		.loc 13 110 25 is_stmt 0 discriminator 1 view .LVU72
 283 0036 99F80030 		ldrb	r3, [r9]	@ zero_extendqisi2
 284              	.LVL10:
 110:AudioProcessor.cpp ****         poly_engine.ResetVoices();
 285              		.loc 13 110 25 discriminator 1 view .LVU73
 286 003a 33B1     		cbz	r3, .L11
 287              	.LBB318:
 111:AudioProcessor.cpp ****         for (int v = 0; v < NUM_VOICES; ++v) {
 288              		.loc 13 111 9 is_stmt 1 view .LVU74
 111:AudioProcessor.cpp ****         for (int v = 0; v < NUM_VOICES; ++v) {
 289              		.loc 13 111 32 is_stmt 0 view .LVU75
 290 003c 1B48     		ldr	r0, .L18+8
 291              	.LVL11:
 111:AudioProcessor.cpp ****         for (int v = 0; v < NUM_VOICES; ++v) {
 292              		.loc 13 111 32 view .LVU76
 293 003e FFF7FEFF 		bl	_ZN15PolyphonyEngine11ResetVoicesEv
 294              	.LVL12:
 112:AudioProcessor.cpp ****         }
 295              		.loc 13 112 9 is_stmt 1 view .LVU77
 296              	.LBE318:
 297              	.LBE317:
 112:AudioProcessor.cpp ****         }
 298              		.loc 13 112 27 view .LVU78
 299              	.LBB320:
 300              	.LBB319:
 114:AudioProcessor.cpp ****     }
 301              		.loc 13 114 9 view .LVU79
 114:AudioProcessor.cpp ****     }
 302              		.loc 13 114 41 is_stmt 0 view .LVU80
 303 0042 3946     		mov	r1, r7
 304 0044 1948     		ldr	r0, .L18+8
 305 0046 FFF7FEFF 		bl	_ZN15PolyphonyEngine20UpdateLastTouchStateEt
 306              	.LVL13:
 307              	.L11:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 33


 308              	.LBE319:
 309              	.LBE320:
 116:AudioProcessor.cpp ****     arp_on_out = current_arp_on;
 310              		.loc 13 116 5 is_stmt 1 view .LVU81
 117:AudioProcessor.cpp **** 
 311              		.loc 13 117 16 is_stmt 0 view .LVU82
 312 004a 88F80070 		strb	r7, [r8]
 313 004e DFF86880 		ldr	r8, .L18+20
 314              	.LVL14:
 120:AudioProcessor.cpp ****         arp.Process(BLOCK_SIZE);
 315              		.loc 13 120 28 view .LVU83
 316 0052 1648     		ldr	r0, .L18+8
 317 0054 B8F80010 		ldrh	r1, [r8]
 116:AudioProcessor.cpp ****     arp_on_out = current_arp_on;
 318              		.loc 13 116 16 view .LVU84
 319 0058 89F80070 		strb	r7, [r9]
 117:AudioProcessor.cpp **** 
 320              		.loc 13 117 5 is_stmt 1 view .LVU85
 119:AudioProcessor.cpp ****         arp.UpdateHeldNotes(current_touch_state, poly_engine.GetLastTouchState());
 321              		.loc 13 119 5 view .LVU86
 120:AudioProcessor.cpp ****         arp.Process(BLOCK_SIZE);
 322              		.loc 13 120 28 is_stmt 0 view .LVU87
 323 005c 89B2     		uxth	r1, r1
 324 005e 0391     		str	r1, [sp, #12]
 119:AudioProcessor.cpp ****         arp.UpdateHeldNotes(current_touch_state, poly_engine.GetLastTouchState());
 325              		.loc 13 119 5 view .LVU88
 326 0060 9FB1     		cbz	r7, .L12
 120:AudioProcessor.cpp ****         arp.Process(BLOCK_SIZE);
 327              		.loc 13 120 9 is_stmt 1 view .LVU89
 120:AudioProcessor.cpp ****         arp.Process(BLOCK_SIZE);
 328              		.loc 13 120 28 is_stmt 0 view .LVU90
 329 0062 FFF7FEFF 		bl	_ZNK15PolyphonyEngine17GetLastTouchStateEv
 330              	.LVL15:
 331 0066 0399     		ldr	r1, [sp, #12]
 332 0068 0246     		mov	r2, r0
 333 006a 1148     		ldr	r0, .L18+12
 334 006c FFF7FEFF 		bl	_ZN11Arpeggiator15UpdateHeldNotesEtt
 335              	.LVL16:
 121:AudioProcessor.cpp ****     } else {
 336              		.loc 13 121 9 is_stmt 1 view .LVU91
 121:AudioProcessor.cpp ****     } else {
 337              		.loc 13 121 20 is_stmt 0 view .LVU92
 338 0070 2021     		movs	r1, #32
 339 0072 0F48     		ldr	r0, .L18+12
 340 0074 FFF7FEFF 		bl	_ZN11Arpeggiator7ProcessEj
 341              	.LVL17:
 342              	.L13:
 126:AudioProcessor.cpp **** }
 343              		.loc 13 126 5 is_stmt 1 view .LVU93
 126:AudioProcessor.cpp **** }
 344              		.loc 13 126 37 is_stmt 0 view .LVU94
 345 0078 B8F80010 		ldrh	r1, [r8]
 346 007c 0B48     		ldr	r0, .L18+8
 347 007e 89B2     		uxth	r1, r1
 127:AudioProcessor.cpp **** 
 348              		.loc 13 127 1 view .LVU95
 349 0080 05B0     		add	sp, sp, #20
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 34


 350              		.cfi_remember_state
 351              		.cfi_def_cfa_offset 28
 352              		@ sp needed
 353 0082 BDE8F043 		pop	{r4, r5, r6, r7, r8, r9, lr}
 354              		.cfi_restore 14
 355              		.cfi_restore 9
 356              		.cfi_restore 8
 357              		.cfi_restore 7
 358              		.cfi_restore 6
 359              		.cfi_restore 5
 360              		.cfi_restore 4
 361              		.cfi_def_cfa_offset 0
 362              	.LVL18:
 126:AudioProcessor.cpp **** }
 363              		.loc 13 126 37 view .LVU96
 364 0086 FFF7FEBF 		b	_ZN15PolyphonyEngine20UpdateLastTouchStateEt
 365              	.LVL19:
 366              	.L12:
 367              		.cfi_restore_state
 123:AudioProcessor.cpp ****     }
 368              		.loc 13 123 9 is_stmt 1 view .LVU97
 123:AudioProcessor.cpp ****     }
 369              		.loc 13 123 37 is_stmt 0 view .LVU98
 370 008a FFF7FEFF 		bl	_ZNK15PolyphonyEngine17GetLastTouchStateEv
 371              	.LVL20:
 372 008e 3368     		ldr	r3, [r6]
 373 0090 0246     		mov	r2, r0
 374 0092 0399     		ldr	r1, [sp, #12]
 375 0094 0193     		str	r3, [sp, #4]
 376 0096 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 377 0098 0448     		ldr	r0, .L18+8
 378 009a 0093     		str	r3, [sp]
 379 009c 2368     		ldr	r3, [r4]
 380 009e FFF7FEFF 		bl	_ZN15PolyphonyEngine16HandleTouchInputEttibi
 381              	.LVL21:
 382 00a2 E9E7     		b	.L13
 383              	.L19:
 384              		.align	2
 385              	.L18:
 386 00a4 00000000 		.word	.LANCHOR0
 387 00a8 00000000 		.word	arp_enabled
 388 00ac 00000000 		.word	poly_engine
 389 00b0 00000000 		.word	arp
 390 00b4 00000000 		.word	.LANCHOR1
 391 00b8 00000000 		.word	current_touch_state
 392              		.cfi_endproc
 393              	.LFE6117:
 395              		.section	.text._Z12RenderVoicesibib,"ax",%progbits
 396              		.align	1
 397              		.global	_Z12RenderVoicesibib
 398              		.syntax unified
 399              		.thumb
 400              		.thumb_func
 402              	_Z12RenderVoicesibib:
 403              	.LVL22:
 404              	.LFB6118:
 129:AudioProcessor.cpp ****     PolyphonyEngine::RenderParameters params;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 35


 405              		.loc 13 129 91 is_stmt 1 view -0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 48
 408              		@ frame_needed = 0, uses_anonymous_args = 0
 130:AudioProcessor.cpp ****     params.engine_index = engineIndex;
 409              		.loc 13 130 5 view .LVU100
 131:AudioProcessor.cpp ****     params.poly_mode = poly_mode;
 410              		.loc 13 131 5 view .LVU101
 129:AudioProcessor.cpp ****     PolyphonyEngine::RenderParameters params;
 411              		.loc 13 129 91 is_stmt 0 view .LVU102
 412 0000 00B5     		push	{lr}
 413              		.cfi_def_cfa_offset 4
 414              		.cfi_offset 14, -4
 415 0002 8DB0     		sub	sp, sp, #52
 416              		.cfi_def_cfa_offset 56
 134:AudioProcessor.cpp ****     params.pitch_val = pitch_val;
 417              		.loc 13 134 19 view .LVU103
 418 0004 8DF80C30 		strb	r3, [sp, #12]
 135:AudioProcessor.cpp ****     params.harm_knob_val = harm_knob_val;
 419              		.loc 13 135 22 view .LVU104
 420 0008 104B     		ldr	r3, .L21
 421              	.LVL23:
 131:AudioProcessor.cpp ****     params.poly_mode = poly_mode;
 422              		.loc 13 131 25 view .LVU105
 423 000a 0090     		str	r0, [sp]
 132:AudioProcessor.cpp ****     params.effective_num_voices = effective_num_voices;
 424              		.loc 13 132 5 is_stmt 1 view .LVU106
 135:AudioProcessor.cpp ****     params.harm_knob_val = harm_knob_val;
 425              		.loc 13 135 22 is_stmt 0 view .LVU107
 426 000c 1B68     		ldr	r3, [r3]	@ float
 132:AudioProcessor.cpp ****     params.effective_num_voices = effective_num_voices;
 427              		.loc 13 132 22 view .LVU108
 428 000e 8DF80410 		strb	r1, [sp, #4]
 133:AudioProcessor.cpp ****     params.arp_on = arp_on;
 429              		.loc 13 133 5 is_stmt 1 view .LVU109
 144:AudioProcessor.cpp **** }
 430              		.loc 13 144 28 is_stmt 0 view .LVU110
 431 0012 6946     		mov	r1, sp
 432              	.LVL24:
 135:AudioProcessor.cpp ****     params.harm_knob_val = harm_knob_val;
 433              		.loc 13 135 22 view .LVU111
 434 0014 0493     		str	r3, [sp, #16]	@ float
 136:AudioProcessor.cpp ****     params.morph_knob_val = morph_knob_val;
 435              		.loc 13 136 26 view .LVU112
 436 0016 0E4B     		ldr	r3, .L21+4
 144:AudioProcessor.cpp **** }
 437              		.loc 13 144 28 view .LVU113
 438 0018 0E48     		ldr	r0, .L21+8
 439              	.LVL25:
 136:AudioProcessor.cpp ****     params.morph_knob_val = morph_knob_val;
 440              		.loc 13 136 26 view .LVU114
 441 001a 1B68     		ldr	r3, [r3]	@ float
 133:AudioProcessor.cpp ****     params.arp_on = arp_on;
 442              		.loc 13 133 33 view .LVU115
 443 001c 0292     		str	r2, [sp, #8]
 134:AudioProcessor.cpp ****     params.pitch_val = pitch_val;
 444              		.loc 13 134 5 is_stmt 1 view .LVU116
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 36


 135:AudioProcessor.cpp ****     params.harm_knob_val = harm_knob_val;
 445              		.loc 13 135 5 view .LVU117
 136:AudioProcessor.cpp ****     params.morph_knob_val = morph_knob_val;
 446              		.loc 13 136 5 view .LVU118
 136:AudioProcessor.cpp ****     params.morph_knob_val = morph_knob_val;
 447              		.loc 13 136 26 is_stmt 0 view .LVU119
 448 001e 0593     		str	r3, [sp, #20]	@ float
 137:AudioProcessor.cpp ****     params.timbre_knob_val = timbre_knob_val;
 449              		.loc 13 137 5 is_stmt 1 view .LVU120
 137:AudioProcessor.cpp ****     params.timbre_knob_val = timbre_knob_val;
 450              		.loc 13 137 27 is_stmt 0 view .LVU121
 451 0020 0D4B     		ldr	r3, .L21+12
 452 0022 1B68     		ldr	r3, [r3]	@ float
 453 0024 0693     		str	r3, [sp, #24]	@ float
 138:AudioProcessor.cpp ****     params.env_attack_val = env_attack_val;
 454              		.loc 13 138 5 is_stmt 1 view .LVU122
 138:AudioProcessor.cpp ****     params.env_attack_val = env_attack_val;
 455              		.loc 13 138 28 is_stmt 0 view .LVU123
 456 0026 0D4B     		ldr	r3, .L21+16
 457 0028 1B68     		ldr	r3, [r3]	@ float
 458 002a 0793     		str	r3, [sp, #28]	@ float
 139:AudioProcessor.cpp ****     params.env_release_val = env_release_val;
 459              		.loc 13 139 5 is_stmt 1 view .LVU124
 139:AudioProcessor.cpp ****     params.env_release_val = env_release_val;
 460              		.loc 13 139 27 is_stmt 0 view .LVU125
 461 002c 0C4B     		ldr	r3, .L21+20
 462 002e 1B68     		ldr	r3, [r3]	@ float
 463 0030 0893     		str	r3, [sp, #32]	@ float
 140:AudioProcessor.cpp ****     params.delay_mix_val = 0.0f;  // Delay removed, set mix to 0
 464              		.loc 13 140 5 is_stmt 1 view .LVU126
 140:AudioProcessor.cpp ****     params.delay_mix_val = 0.0f;  // Delay removed, set mix to 0
 465              		.loc 13 140 28 is_stmt 0 view .LVU127
 466 0032 0C4B     		ldr	r3, .L21+24
 467 0034 1B68     		ldr	r3, [r3]	@ float
 468 0036 0993     		str	r3, [sp, #36]	@ float
 141:AudioProcessor.cpp ****     params.touch_cv_value = touch_cv_value;
 469              		.loc 13 141 5 is_stmt 1 view .LVU128
 141:AudioProcessor.cpp ****     params.touch_cv_value = touch_cv_value;
 470              		.loc 13 141 26 is_stmt 0 view .LVU129
 471 0038 0023     		movs	r3, #0
 472 003a 0A93     		str	r3, [sp, #40]	@ float
 142:AudioProcessor.cpp ****     
 473              		.loc 13 142 5 is_stmt 1 view .LVU130
 142:AudioProcessor.cpp ****     
 474              		.loc 13 142 27 is_stmt 0 view .LVU131
 475 003c 0A4B     		ldr	r3, .L21+28
 476 003e 1B68     		ldr	r3, [r3]	@ float
 477 0040 0B93     		str	r3, [sp, #44]	@ float
 144:AudioProcessor.cpp **** }
 478              		.loc 13 144 5 is_stmt 1 view .LVU132
 144:AudioProcessor.cpp **** }
 479              		.loc 13 144 28 is_stmt 0 view .LVU133
 480 0042 FFF7FEFF 		bl	_ZN15PolyphonyEngine11RenderBlockERKNS_16RenderParametersE
 481              	.LVL26:
 145:AudioProcessor.cpp **** 
 482              		.loc 13 145 1 view .LVU134
 483 0046 0DB0     		add	sp, sp, #52
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 37


 484              		.cfi_def_cfa_offset 4
 485              		@ sp needed
 486 0048 5DF804FB 		ldr	pc, [sp], #4
 487              	.L22:
 488              		.align	2
 489              	.L21:
 490 004c 00000000 		.word	pitch_val
 491 0050 00000000 		.word	harm_knob_val
 492 0054 00000000 		.word	poly_engine
 493 0058 00000000 		.word	morph_knob_val
 494 005c 00000000 		.word	timbre_knob_val
 495 0060 00000000 		.word	env_attack_val
 496 0064 00000000 		.word	env_release_val
 497 0068 00000000 		.word	touch_cv_value
 498              		.cfi_endproc
 499              	.LFE6118:
 501              		.section	.text._Z23DetermineEngineSettingsv,"ax",%progbits
 502              		.align	1
 503              		.global	_Z23DetermineEngineSettingsv
 504              		.syntax unified
 505              		.thumb
 506              		.thumb_func
 508              	_Z23DetermineEngineSettingsv:
 509              	.LFB6120:
 195:AudioProcessor.cpp ****     return current_engine_index;
 510              		.loc 13 195 31 is_stmt 1 view -0
 511              		.cfi_startproc
 512              		@ args = 0, pretend = 0, frame = 0
 513              		@ frame_needed = 0, uses_anonymous_args = 0
 514              		@ link register save eliminated.
 515              		.loc 13 196 5 view .LVU136
 516              		.loc 13 196 12 is_stmt 0 view .LVU137
 517 0000 014B     		ldr	r3, .L24
 518 0002 1868     		ldr	r0, [r3]
 197:AudioProcessor.cpp **** }
 519              		.loc 13 197 1 view .LVU138
 520 0004 7047     		bx	lr
 521              	.L25:
 522 0006 00BF     		.align	2
 523              	.L24:
 524 0008 00000000 		.word	.LANCHOR0
 525              		.cfi_endproc
 526              	.LFE6120:
 528              		.section	.text._Z25UpdatePerformanceMonitorsjPf,"ax",%progbits
 529              		.align	1
 530              		.global	_Z25UpdatePerformanceMonitorsjPf
 531              		.syntax unified
 532              		.thumb
 533              		.thumb_func
 535              	_Z25UpdatePerformanceMonitorsjPf:
 536              	.LVL27:
 537              	.LFB6121:
 198:AudioProcessor.cpp **** 
 199:AudioProcessor.cpp **** void UpdatePerformanceMonitors(size_t size, AudioHandle::InterleavingOutputBuffer out) {
 538              		.loc 13 199 88 is_stmt 1 view -0
 539              		.cfi_startproc
 540              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 38


 541              		@ frame_needed = 0, uses_anonymous_args = 0
 200:AudioProcessor.cpp ****     if (size > 0) {
 542              		.loc 13 200 5 view .LVU140
 199:AudioProcessor.cpp ****     if (size > 0) {
 543              		.loc 13 199 88 is_stmt 0 view .LVU141
 544 0000 38B5     		push	{r3, r4, r5, lr}
 545              		.cfi_def_cfa_offset 16
 546              		.cfi_offset 3, -16
 547              		.cfi_offset 4, -12
 548              		.cfi_offset 5, -8
 549              		.cfi_offset 14, -4
 550              	.LBB321:
 551              		.loc 13 200 5 view .LVU142
 552 0002 80B1     		cbz	r0, .L27
 553              	.LBB322:
 201:AudioProcessor.cpp ****         float current_level = fabsf(out[0]);
 554              		.loc 13 201 9 is_stmt 1 view .LVU143
 555              	.LVL28:
 202:AudioProcessor.cpp ****         smoothed_output_level = smoothed_output_level * 0.99f + current_level * 0.01f;
 556              		.loc 13 202 9 view .LVU144
 201:AudioProcessor.cpp ****         float current_level = fabsf(out[0]);
 557              		.loc 13 201 15 is_stmt 0 view .LVU145
 558 0004 D1ED007A 		vldr.32	s15, [r1]
 559              		.loc 13 202 79 view .LVU146
 560 0008 9FED1C7A 		vldr.32	s14, .L38
 201:AudioProcessor.cpp ****         float current_level = fabsf(out[0]);
 561              		.loc 13 201 15 view .LVU147
 562 000c F0EEE77A 		vabs.f32	s15, s15
 563              	.LVL29:
 564              		.loc 13 202 33 view .LVU148
 565 0010 1B4B     		ldr	r3, .L38+4
 566 0012 D3ED006A 		vldr.32	s13, [r3]
 567              		.loc 13 202 79 view .LVU149
 568 0016 67EE877A 		vmul.f32	s15, s15, s14
 569              	.LVL30:
 570              		.loc 13 202 63 view .LVU150
 571 001a 9FED1A7A 		vldr.32	s14, .L38+8
 572 001e E6EE877A 		vfma.f32	s15, s13, s14
 573              		.loc 13 202 31 view .LVU151
 574 0022 C3ED007A 		vstr.32	s15, [r3]
 575              	.LVL31:
 576              	.L27:
 577              		.loc 13 202 31 view .LVU152
 578              	.LBE322:
 579              	.LBE321:
 203:AudioProcessor.cpp ****     }
 204:AudioProcessor.cpp **** 
 205:AudioProcessor.cpp ****     static uint32_t display_counter = 0;
 580              		.loc 13 205 5 is_stmt 1 view .LVU153
 206:AudioProcessor.cpp ****     static const uint32_t display_interval_blocks = (uint32_t)(sample_rate / BLOCK_SIZE * 3.0f);
 581              		.loc 13 206 5 view .LVU154
 582              		.loc 13 206 95 is_stmt 0 view .LVU155
 583 0026 184C     		ldr	r4, .L38+12
 584 0028 184D     		ldr	r5, .L38+16
 585 002a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 586 002c BFF35B8F 		dmb	ish
 587 0030 13F0010F 		tst	r3, #1
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 39


 588 0034 15D1     		bne	.L29
 589              		.loc 13 206 95 discriminator 1 view .LVU156
 590 0036 2046     		mov	r0, r4
 591              	.LVL32:
 592              		.loc 13 206 95 discriminator 1 view .LVU157
 593 0038 FFF7FEFF 		bl	__cxa_guard_acquire
 594              	.LVL33:
 595              		.loc 13 206 95 discriminator 1 view .LVU158
 596 003c 88B1     		cbz	r0, .L29
 597              		.loc 13 206 76 discriminator 2 view .LVU159
 598 003e 144B     		ldr	r3, .L38+20
 599              		.loc 13 206 95 discriminator 2 view .LVU160
 600 0040 2046     		mov	r0, r4
 601              		.loc 13 206 76 discriminator 2 view .LVU161
 602 0042 9FED147A 		vldr.32	s14, .L38+24
 603 0046 D3ED007A 		vldr.32	s15, [r3]
 604 004a 67EE877A 		vmul.f32	s15, s15, s14
 605              		.loc 13 206 89 discriminator 2 view .LVU162
 606 004e B0EE087A 		vmov.f32	s14, #3.0e+0
 607 0052 67EE877A 		vmul.f32	s15, s15, s14
 608              		.loc 13 206 53 discriminator 2 view .LVU163
 609 0056 FCEEE77A 		vcvt.u32.f32	s15, s15
 610 005a C5ED007A 		vstr.32	s15, [r5]	@ int
 611              		.loc 13 206 95 discriminator 2 view .LVU164
 612 005e FFF7FEFF 		bl	__cxa_guard_release
 613              	.LVL34:
 614              	.L29:
 207:AudioProcessor.cpp ****     if (++display_counter >= display_interval_blocks) {
 615              		.loc 13 207 5 is_stmt 1 view .LVU165
 616              		.loc 13 207 9 is_stmt 0 view .LVU166
 617 0062 0D4A     		ldr	r2, .L38+28
 618              		.loc 13 207 5 view .LVU167
 619 0064 2968     		ldr	r1, [r5]
 620              		.loc 13 207 9 view .LVU168
 621 0066 1368     		ldr	r3, [r2]
 622 0068 0133     		adds	r3, r3, #1
 623              		.loc 13 207 5 view .LVU169
 624 006a 8B42     		cmp	r3, r1
 625              		.loc 13 207 27 view .LVU170
 626 006c 1360     		str	r3, [r2]
 627              		.loc 13 207 5 view .LVU171
 628 006e 04D3     		bcc	.L26
 208:AudioProcessor.cpp ****         display_counter = 0;
 629              		.loc 13 208 9 is_stmt 1 view .LVU172
 630              		.loc 13 208 25 is_stmt 0 view .LVU173
 631 0070 0023     		movs	r3, #0
 632 0072 1360     		str	r3, [r2]
 209:AudioProcessor.cpp ****         update_display = true;
 633              		.loc 13 209 9 is_stmt 1 view .LVU174
 634              		.loc 13 209 24 is_stmt 0 view .LVU175
 635 0074 0122     		movs	r2, #1
 636 0076 094B     		ldr	r3, .L38+32
 637 0078 1A70     		strb	r2, [r3]
 638              	.L26:
 210:AudioProcessor.cpp ****     }
 211:AudioProcessor.cpp **** } ...
 639              		.loc 13 211 1 view .LVU176
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 40


 640 007a 38BD     		pop	{r3, r4, r5, pc}
 641              	.L39:
 642              		.align	2
 643              	.L38:
 644 007c 0AD7233C 		.word	1008981770
 645 0080 00000000 		.word	smoothed_output_level
 646 0084 A4707D3F 		.word	1065185444
 647 0088 00000000 		.word	.LANCHOR2
 648 008c 00000000 		.word	.LANCHOR3
 649 0090 00000000 		.word	sample_rate
 650 0094 0000003D 		.word	1023410176
 651 0098 00000000 		.word	.LANCHOR4
 652 009c 00000000 		.word	update_display
 653              		.cfi_endproc
 654              	.LFE6121:
 656              		.section	.text._Z21ApplyEffectsAndOutputPfj,"ax",%progbits
 657              		.align	1
 658              		.global	_Z21ApplyEffectsAndOutputPfj
 659              		.syntax unified
 660              		.thumb
 661              		.thumb_func
 663              	_Z21ApplyEffectsAndOutputPfj:
 664              	.LVL35:
 665              	.LFB6119:
 147:AudioProcessor.cpp **** void ApplyEffectsAndOutput(AudioHandle::InterleavingOutputBuffer out, size_t size) {
 666              		.loc 13 147 84 is_stmt 1 view -0
 667              		.cfi_startproc
 668              		@ args = 0, pretend = 0, frame = 0
 669              		@ frame_needed = 0, uses_anonymous_args = 0
 149:AudioProcessor.cpp ****     static clouds::ShortFrame input_frames[BLOCK_SIZE];
 670              		.loc 13 149 5 view .LVU178
 150:AudioProcessor.cpp ****     static clouds::ShortFrame output_frames[BLOCK_SIZE];
 671              		.loc 13 150 5 view .LVU179
 154:AudioProcessor.cpp ****     const float* buffer = poly_engine.GetMainOutputBuffer();
 672              		.loc 13 154 5 view .LVU180
 673              		.file 14 "Polyphony.h"
   1:Polyphony.h   **** #ifndef POLYPHONY_H
   2:Polyphony.h   **** #define POLYPHONY_H
   3:Polyphony.h   **** 
   4:Polyphony.h   **** // Define global constants needed by this header
   5:Polyphony.h   **** #define NUM_VOICES 4
   6:Polyphony.h   **** #define BLOCK_SIZE 32
   7:Polyphony.h   **** 
   8:Polyphony.h   **** #include "daisy_seed.h"
   9:Polyphony.h   **** #include "plaits/dsp/voice.h"
  10:Polyphony.h   **** #include "VoiceEnvelope.h"
  11:Polyphony.h   **** #include "Thaumazein.h"
  12:Polyphony.h   **** #include "stmlib/utils/buffer_allocator.h"
  13:Polyphony.h   **** 
  14:Polyphony.h   **** namespace stmlib {
  15:Polyphony.h   ****     class MonoBlockAllocator;
  16:Polyphony.h   **** }
  17:Polyphony.h   **** 
  18:Polyphony.h   **** namespace plaits {
  19:Polyphony.h   ****     class Voice;
  20:Polyphony.h   **** }
  21:Polyphony.h   **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 41


  22:Polyphony.h   **** struct PatchParams {
  23:Polyphony.h   ****     int engine_idx;
  24:Polyphony.h   ****     float note;
  25:Polyphony.h   ****     float global_pitch_offset;
  26:Polyphony.h   ****     float harmonics;
  27:Polyphony.h   ****     float timbre;
  28:Polyphony.h   ****     float morph;
  29:Polyphony.h   ****     bool arp_on;
  30:Polyphony.h   ****     float decay;
  31:Polyphony.h   **** };
  32:Polyphony.h   **** 
  33:Polyphony.h   **** class PolyphonyEngine {
  34:Polyphony.h   **** public:
  35:Polyphony.h   ****     struct RenderParameters {
  36:Polyphony.h   ****         int engine_index;
  37:Polyphony.h   ****         bool poly_mode;
  38:Polyphony.h   ****         int effective_num_voices;
  39:Polyphony.h   ****         bool arp_on;
  40:Polyphony.h   ****         float pitch_val;
  41:Polyphony.h   ****         float harm_knob_val;
  42:Polyphony.h   ****         float morph_knob_val;
  43:Polyphony.h   ****         float timbre_knob_val;
  44:Polyphony.h   ****         float env_attack_val;
  45:Polyphony.h   ****         float env_release_val;
  46:Polyphony.h   ****         float delay_mix_val;
  47:Polyphony.h   ****         float touch_cv_value;
  48:Polyphony.h   ****     };
  49:Polyphony.h   **** 
  50:Polyphony.h   ****     PolyphonyEngine();
  51:Polyphony.h   ****     ~PolyphonyEngine();
  52:Polyphony.h   **** 
  53:Polyphony.h   ****     void Init(daisy::DaisySeed* hw);
  54:Polyphony.h   ****     void HandleTouchInput(uint16_t current_touch_state, uint16_t last_touch_state, int engine_index
  55:Polyphony.h   ****     void RenderBlock(const RenderParameters& params);
  56:Polyphony.h   ****     void ResetVoices();
  57:Polyphony.h   ****     
  58:Polyphony.h   ****     const float* GetMainOutputBuffer() const { return mix_buffer_out_; }
 674              		.loc 14 58 48 view .LVU181
 158:AudioProcessor.cpp ****     for (size_t i = 0; i < BLOCK_SIZE; ++i) {
 675              		.loc 13 158 5 view .LVU182
 676              	.LBB323:
 158:AudioProcessor.cpp ****     for (size_t i = 0; i < BLOCK_SIZE; ++i) {
 677              		.loc 13 158 26 view .LVU183
 678              	.LBE323:
 147:AudioProcessor.cpp **** void ApplyEffectsAndOutput(AudioHandle::InterleavingOutputBuffer out, size_t size) {
 679              		.loc 13 147 84 is_stmt 0 view .LVU184
 680 0000 38B5     		push	{r3, r4, r5, lr}
 681              		.cfi_def_cfa_offset 16
 682              		.cfi_offset 3, -16
 683              		.cfi_offset 4, -12
 684              		.cfi_offset 5, -8
 685              		.cfi_offset 14, -4
 147:AudioProcessor.cpp **** void ApplyEffectsAndOutput(AudioHandle::InterleavingOutputBuffer out, size_t size) {
 686              		.loc 13 147 84 view .LVU185
 687 0002 0546     		mov	r5, r0
 688 0004 0C46     		mov	r4, r1
 689 0006 2648     		ldr	r0, .L50
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 42


 690              	.LVL36:
 691              	.LBB327:
 158:AudioProcessor.cpp ****     for (size_t i = 0; i < BLOCK_SIZE; ++i) {
 692              		.loc 13 158 17 view .LVU186
 693 0008 0023     		movs	r3, #0
 694 000a 2649     		ldr	r1, .L50+4
 695              	.LVL37:
 696              	.L43:
 697              	.LBB324:
 160:AudioProcessor.cpp ****         float scaled = buffer[i] / static_cast<float>(NUM_VOICES); // keep level similar to origina
 698              		.loc 13 160 9 is_stmt 1 view .LVU187
 160:AudioProcessor.cpp ****         float scaled = buffer[i] / static_cast<float>(NUM_VOICES); // keep level similar to origina
 699              		.loc 13 160 15 is_stmt 0 view .LVU188
 700 000c B5EE007A 		vmov.f32	s14, #2.5e-1
 160:AudioProcessor.cpp ****         float scaled = buffer[i] / static_cast<float>(NUM_VOICES); // keep level similar to origina
 701              		.loc 13 160 32 view .LVU189
 702 0010 F0EC017A 		vldmia.32	r0!, {s15}
 160:AudioProcessor.cpp ****         float scaled = buffer[i] / static_cast<float>(NUM_VOICES); // keep level similar to origina
 703              		.loc 13 160 15 view .LVU190
 704 0014 67EE877A 		vmul.f32	s15, s15, s14
 705              	.LVL38:
 161:AudioProcessor.cpp ****         if (scaled > 32767.f) scaled = 32767.f;
 706              		.loc 13 161 9 is_stmt 1 view .LVU191
 707 0018 9FED237A 		vldr.32	s14, .L50+8
 708 001c F4EEC77A 		vcmpe.f32	s15, s14
 709 0020 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 710 0024 32DC     		bgt	.L46
 162:AudioProcessor.cpp ****         if (scaled < -32768.f) scaled = -32768.f;
 711              		.loc 13 162 9 view .LVU192
 712 0026 9FED217A 		vldr.32	s14, .L50+12
 162:AudioProcessor.cpp ****         if (scaled < -32768.f) scaled = -32768.f;
 713              		.loc 13 162 39 is_stmt 0 view .LVU193
 714 002a F4EE477A 		vcmp.f32	s15, s14
 715 002e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 716 0032 48BF     		it	mi
 717 0034 F0EE477A 		vmovmi.f32	s15, s14
 718              	.LVL39:
 719              	.L41:
 163:AudioProcessor.cpp ****         int16_t sample_int = static_cast<int16_t>(scaled);
 720              		.loc 13 163 9 is_stmt 1 discriminator 2 view .LVU194
 163:AudioProcessor.cpp ****         int16_t sample_int = static_cast<int16_t>(scaled);
 721              		.loc 13 163 17 is_stmt 0 discriminator 2 view .LVU195
 722 0038 FDEEE77A 		vcvt.s32.f32	s15, s15
 723              	.LVL40:
 163:AudioProcessor.cpp ****         int16_t sample_int = static_cast<int16_t>(scaled);
 724              		.loc 13 163 17 discriminator 2 view .LVU196
 725              	.LBE324:
 158:AudioProcessor.cpp ****     for (size_t i = 0; i < BLOCK_SIZE; ++i) {
 726              		.loc 13 158 5 discriminator 2 view .LVU197
 727 003c 0133     		adds	r3, r3, #1
 728              	.LVL41:
 158:AudioProcessor.cpp ****     for (size_t i = 0; i < BLOCK_SIZE; ++i) {
 729              		.loc 13 158 26 discriminator 2 view .LVU198
 730 003e 0431     		adds	r1, r1, #4
 731 0040 202B     		cmp	r3, #32
 732              	.LBB325:
 163:AudioProcessor.cpp ****         int16_t sample_int = static_cast<int16_t>(scaled);
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 43


 733              		.loc 13 163 17 discriminator 2 view .LVU199
 734 0042 17EE902A 		vmov	r2, s15	@ int
 735 0046 12B2     		sxth	r2, r2
 736              	.LVL42:
 164:AudioProcessor.cpp ****         input_frames[i].l = sample_int;
 737              		.loc 13 164 9 is_stmt 1 discriminator 2 view .LVU200
 164:AudioProcessor.cpp ****         input_frames[i].l = sample_int;
 738              		.loc 13 164 27 is_stmt 0 discriminator 2 view .LVU201
 739 0048 21F8042C 		strh	r2, [r1, #-4]	@ movhi
 165:AudioProcessor.cpp ****         input_frames[i].r = sample_int; // Mono input to Clouds
 740              		.loc 13 165 9 is_stmt 1 discriminator 2 view .LVU202
 165:AudioProcessor.cpp ****         input_frames[i].r = sample_int; // Mono input to Clouds
 741              		.loc 13 165 27 is_stmt 0 discriminator 2 view .LVU203
 742 004c 21F8022C 		strh	r2, [r1, #-2]	@ movhi
 743              	.LBE325:
 158:AudioProcessor.cpp ****     for (size_t i = 0; i < BLOCK_SIZE; ++i) {
 744              		.loc 13 158 5 is_stmt 1 discriminator 2 view .LVU204
 745              	.LVL43:
 158:AudioProcessor.cpp ****     for (size_t i = 0; i < BLOCK_SIZE; ++i) {
 746              		.loc 13 158 26 discriminator 2 view .LVU205
 747 0050 DCD1     		bne	.L43
 748              	.LBE327:
 170:AudioProcessor.cpp ****     clouds_processor.Process(input_frames, output_frames, BLOCK_SIZE);
 749              		.loc 13 170 5 view .LVU206
 170:AudioProcessor.cpp ****     clouds_processor.Process(input_frames, output_frames, BLOCK_SIZE);
 750              		.loc 13 170 29 is_stmt 0 view .LVU207
 751 0052 174A     		ldr	r2, .L50+16
 752              	.LVL44:
 170:AudioProcessor.cpp ****     clouds_processor.Process(input_frames, output_frames, BLOCK_SIZE);
 753              		.loc 13 170 29 view .LVU208
 754 0054 1349     		ldr	r1, .L50+4
 755              	.LVL45:
 170:AudioProcessor.cpp ****     clouds_processor.Process(input_frames, output_frames, BLOCK_SIZE);
 756              		.loc 13 170 29 view .LVU209
 757 0056 1748     		ldr	r0, .L50+20
 758 0058 FFF7FEFF 		bl	_ZN6clouds17GranularProcessor7ProcessEPNS_10ShortFrameES2_j
 759              	.LVL46:
 173:AudioProcessor.cpp ****     for (size_t i = 0; i < size; i += 2) {
 760              		.loc 13 173 5 is_stmt 1 view .LVU210
 173:AudioProcessor.cpp ****     for (size_t i = 0; i < size; i += 2) {
 761              		.loc 13 173 5 is_stmt 0 view .LVU211
 762 005c 2A46     		mov	r2, r5
 763              	.LBB328:
 173:AudioProcessor.cpp ****     for (size_t i = 0; i < size; i += 2) {
 764              		.loc 13 173 17 view .LVU212
 765 005e 0023     		movs	r3, #0
 766              	.LVL47:
 767              	.L45:
 173:AudioProcessor.cpp ****     for (size_t i = 0; i < size; i += 2) {
 768              		.loc 13 173 26 is_stmt 1 discriminator 3 view .LVU213
 769 0060 A342     		cmp	r3, r4
 770 0062 02F10802 		add	r2, r2, #8
 771 0066 14D2     		bcs	.L44
 772              	.LBB329:
 175:AudioProcessor.cpp ****         float outL = static_cast<float>(output_frames[i/2].l) / 32768.0f;
 773              		.loc 13 175 9 discriminator 2 view .LVU214
 774              	.LVL48:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 44


 176:AudioProcessor.cpp ****         float outR = static_cast<float>(output_frames[i/2].r) / 32768.0f;
 775              		.loc 13 176 9 discriminator 2 view .LVU215
 185:AudioProcessor.cpp ****         float sample = outL; // Using Clouds output
 776              		.loc 13 185 9 discriminator 2 view .LVU216
 188:AudioProcessor.cpp ****         sample *= MASTER_VOLUME;
 777              		.loc 13 188 9 discriminator 2 view .LVU217
 175:AudioProcessor.cpp ****         float outL = static_cast<float>(output_frames[i/2].l) / 32768.0f;
 778              		.loc 13 175 56 is_stmt 0 discriminator 2 view .LVU218
 779 0068 5808     		lsrs	r0, r3, #1
 780              	.LVL49:
 175:AudioProcessor.cpp ****         float outL = static_cast<float>(output_frames[i/2].l) / 32768.0f;
 781              		.loc 13 175 22 discriminator 2 view .LVU219
 782 006a 1149     		ldr	r1, .L50+16
 188:AudioProcessor.cpp ****         sample *= MASTER_VOLUME;
 783              		.loc 13 188 16 discriminator 2 view .LVU220
 784 006c 9FED127A 		vldr.32	s14, .L50+24
 785              	.LBE329:
 173:AudioProcessor.cpp ****     for (size_t i = 0; i < size; i += 2) {
 786              		.loc 13 173 36 discriminator 2 view .LVU221
 787 0070 0233     		adds	r3, r3, #2
 788              	.LVL50:
 789              	.LBB330:
 175:AudioProcessor.cpp ****         float outL = static_cast<float>(output_frames[i/2].l) / 32768.0f;
 790              		.loc 13 175 22 discriminator 2 view .LVU222
 791 0072 31F92010 		ldrsh	r1, [r1, r0, lsl #2]
 792 0076 07EE901A 		vmov	s15, r1	@ int
 175:AudioProcessor.cpp ****         float outL = static_cast<float>(output_frames[i/2].l) / 32768.0f;
 793              		.loc 13 175 15 discriminator 2 view .LVU223
 794 007a FAEEE87A 		vcvt.f32.s32	s15, s15, #15
 188:AudioProcessor.cpp ****         sample *= MASTER_VOLUME;
 795              		.loc 13 188 16 discriminator 2 view .LVU224
 796 007e 67EE877A 		vmul.f32	s15, s15, s14
 797              	.LVL51:
 189:AudioProcessor.cpp ****         out[i]   = sample;
 798              		.loc 13 189 9 is_stmt 1 discriminator 2 view .LVU225
 189:AudioProcessor.cpp ****         out[i]   = sample;
 799              		.loc 13 189 18 is_stmt 0 discriminator 2 view .LVU226
 800 0082 42ED027A 		vstr.32	s15, [r2, #-8]
 190:AudioProcessor.cpp ****         out[i+1] = sample; // Outputting mono for now from Clouds L channel
 801              		.loc 13 190 9 is_stmt 1 discriminator 2 view .LVU227
 190:AudioProcessor.cpp ****         out[i+1] = sample; // Outputting mono for now from Clouds L channel
 802              		.loc 13 190 18 is_stmt 0 discriminator 2 view .LVU228
 803 0086 42ED017A 		vstr.32	s15, [r2, #-4]
 804              	.LBE330:
 173:AudioProcessor.cpp ****     for (size_t i = 0; i < size; i += 2) {
 805              		.loc 13 173 5 is_stmt 1 discriminator 2 view .LVU229
 806              	.LVL52:
 173:AudioProcessor.cpp ****     for (size_t i = 0; i < size; i += 2) {
 807              		.loc 13 173 5 is_stmt 0 discriminator 2 view .LVU230
 808 008a E9E7     		b	.L45
 809              	.LVL53:
 810              	.L46:
 173:AudioProcessor.cpp ****     for (size_t i = 0; i < size; i += 2) {
 811              		.loc 13 173 5 discriminator 2 view .LVU231
 812              	.LBE328:
 813              	.LBB331:
 814              	.LBB326:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 45


 161:AudioProcessor.cpp ****         if (scaled > 32767.f) scaled = 32767.f;
 815              		.loc 13 161 38 view .LVU232
 816 008c F0EE477A 		vmov.f32	s15, s14
 817              	.LVL54:
 161:AudioProcessor.cpp ****         if (scaled > 32767.f) scaled = 32767.f;
 818              		.loc 13 161 38 view .LVU233
 819 0090 D2E7     		b	.L41
 820              	.LVL55:
 821              	.L44:
 161:AudioProcessor.cpp ****         if (scaled > 32767.f) scaled = 32767.f;
 822              		.loc 13 161 38 view .LVU234
 823              	.LBE326:
 824              	.LBE331:
 192:AudioProcessor.cpp ****     UpdatePerformanceMonitors(size, out);
 825              		.loc 13 192 5 is_stmt 1 view .LVU235
 192:AudioProcessor.cpp ****     UpdatePerformanceMonitors(size, out);
 826              		.loc 13 192 30 is_stmt 0 view .LVU236
 827 0092 2946     		mov	r1, r5
 828 0094 2046     		mov	r0, r4
 193:AudioProcessor.cpp **** }
 829              		.loc 13 193 1 view .LVU237
 830 0096 BDE83840 		pop	{r3, r4, r5, lr}
 831              		.cfi_restore 14
 832              		.cfi_restore 5
 833              		.cfi_restore 4
 834              		.cfi_restore 3
 835              		.cfi_def_cfa_offset 0
 836              	.LVL56:
 192:AudioProcessor.cpp ****     UpdatePerformanceMonitors(size, out);
 837              		.loc 13 192 30 view .LVU238
 838 009a FFF7FEBF 		b	_Z25UpdatePerformanceMonitorsjPf
 839              	.LVL57:
 840              	.L51:
 192:AudioProcessor.cpp ****     UpdatePerformanceMonitors(size, out);
 841              		.loc 13 192 30 view .LVU239
 842 009e 00BF     		.align	2
 843              	.L50:
 844 00a0 B44A0000 		.word	poly_engine+19124
 845 00a4 00000000 		.word	.LANCHOR5
 846 00a8 00FEFF46 		.word	1191181824
 847 00ac 000000C7 		.word	-956301312
 848 00b0 00000000 		.word	.LANCHOR6
 849 00b4 00000000 		.word	clouds_processor
 850 00b8 3333333F 		.word	1060320051
 851              		.cfi_endproc
 852              	.LFE6119:
 854              		.section	.text._Z13AudioCallbackPKfPfj,"ax",%progbits
 855              		.align	1
 856              		.global	_Z13AudioCallbackPKfPfj
 857              		.syntax unified
 858              		.thumb
 859              		.thumb_func
 861              	_Z13AudioCallbackPKfPfj:
 862              	.LVL58:
 863              	.LFB6115:
  49:AudioProcessor.cpp ****                  size_t size) {
 864              		.loc 13 49 31 is_stmt 1 view -0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 46


 865              		.cfi_startproc
 866              		@ args = 0, pretend = 0, frame = 16
 867              		@ frame_needed = 0, uses_anonymous_args = 0
  52:AudioProcessor.cpp ****     static uint32_t last_ui_time = 0;
 868              		.loc 13 52 5 view .LVU241
  53:AudioProcessor.cpp ****     uint32_t now_ms = hw.system.GetNow();
 869              		.loc 13 53 5 view .LVU242
  49:AudioProcessor.cpp ****                  size_t size) {
 870              		.loc 13 49 31 is_stmt 0 view .LVU243
 871 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 872              		.cfi_def_cfa_offset 28
 873              		.cfi_offset 4, -28
 874              		.cfi_offset 5, -24
 875              		.cfi_offset 6, -20
 876              		.cfi_offset 7, -16
 877              		.cfi_offset 8, -12
 878              		.cfi_offset 9, -8
 879              		.cfi_offset 14, -4
 880 0004 85B0     		sub	sp, sp, #20
 881              		.cfi_def_cfa_offset 48
  49:AudioProcessor.cpp ****                  size_t size) {
 882              		.loc 13 49 31 view .LVU244
 883 0006 1646     		mov	r6, r2
 884 0008 0D46     		mov	r5, r1
  53:AudioProcessor.cpp ****     uint32_t now_ms = hw.system.GetNow();
 885              		.loc 13 53 39 view .LVU245
 886 000a FFF7FEFF 		bl	_ZN5daisy6System6GetNowEv
 887              	.LVL59:
  54:AudioProcessor.cpp ****     if(now_ms - last_ui_time >= 1) {
 888              		.loc 13 54 5 is_stmt 1 view .LVU246
  54:AudioProcessor.cpp ****     if(now_ms - last_ui_time >= 1) {
 889              		.loc 13 54 30 is_stmt 0 view .LVU247
 890 000e 384B     		ldr	r3, .L66
  54:AudioProcessor.cpp ****     if(now_ms - last_ui_time >= 1) {
 891              		.loc 13 54 5 view .LVU248
 892 0010 1A68     		ldr	r2, [r3]
 893 0012 8242     		cmp	r2, r0
 894 0014 02D0     		beq	.L53
  55:AudioProcessor.cpp ****         last_ui_time = now_ms;
 895              		.loc 13 55 9 is_stmt 1 view .LVU249
  55:AudioProcessor.cpp ****         last_ui_time = now_ms;
 896              		.loc 13 55 22 is_stmt 0 view .LVU250
 897 0016 1860     		str	r0, [r3]
  56:AudioProcessor.cpp ****         ProcessUIAndControls();
 898              		.loc 13 56 9 is_stmt 1 view .LVU251
  56:AudioProcessor.cpp ****         ProcessUIAndControls();
 899              		.loc 13 56 29 is_stmt 0 view .LVU252
 900 0018 FFF7FEFF 		bl	_Z20ProcessUIAndControlsv
 901              	.LVL60:
 902              	.L53:
  58:AudioProcessor.cpp ****     cpu_meter.OnBlockStart(); // Mark the beginning of the audio block
 903              		.loc 13 58 5 is_stmt 1 view .LVU253
 904              	.LBB336:
 905              	.LBI336:
 906              		.file 15 "lib/libdaisy/src/util/CpuLoadMeter.h"
   1:lib/libdaisy/src/util/CpuLoadMeter.h **** #pragma once
   2:lib/libdaisy/src/util/CpuLoadMeter.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 47


   3:lib/libdaisy/src/util/CpuLoadMeter.h **** #include "sys/system.h"
   4:lib/libdaisy/src/util/CpuLoadMeter.h **** #include <cmath>
   5:lib/libdaisy/src/util/CpuLoadMeter.h **** 
   6:lib/libdaisy/src/util/CpuLoadMeter.h **** namespace daisy
   7:lib/libdaisy/src/util/CpuLoadMeter.h **** {
   8:lib/libdaisy/src/util/CpuLoadMeter.h **** /** @brief CPU load metering
   9:lib/libdaisy/src/util/CpuLoadMeter.h ****  *  @author jelliesen
  10:lib/libdaisy/src/util/CpuLoadMeter.h ****  *  @addtogroup utility
  11:lib/libdaisy/src/util/CpuLoadMeter.h ****  * 
  12:lib/libdaisy/src/util/CpuLoadMeter.h ****  *  To measure the CPU load of your audio processing, create a CpuLoadMeter
  13:lib/libdaisy/src/util/CpuLoadMeter.h ****  *  and initialize it with your block size and sample rate.
  14:lib/libdaisy/src/util/CpuLoadMeter.h ****  *  Then at the beginning of the audio callback, call `OnBlockStart()`, 
  15:lib/libdaisy/src/util/CpuLoadMeter.h ****  *  and at the end of the audio callback, call `OnBlockEnd()`.
  16:lib/libdaisy/src/util/CpuLoadMeter.h ****  *  You can then read out the minimum, maximum and average CPU load.
  17:lib/libdaisy/src/util/CpuLoadMeter.h ****  */
  18:lib/libdaisy/src/util/CpuLoadMeter.h **** class CpuLoadMeter
  19:lib/libdaisy/src/util/CpuLoadMeter.h **** {
  20:lib/libdaisy/src/util/CpuLoadMeter.h ****   public:
  21:lib/libdaisy/src/util/CpuLoadMeter.h ****     CpuLoadMeter(){};
  22:lib/libdaisy/src/util/CpuLoadMeter.h **** 
  23:lib/libdaisy/src/util/CpuLoadMeter.h ****     /** Initializes the CpuLoadMeter for a particular sample rate and block size.
  24:lib/libdaisy/src/util/CpuLoadMeter.h ****      *  @param sampleRateInHz           The sample rate in Hz
  25:lib/libdaisy/src/util/CpuLoadMeter.h ****      *  @param blockSizeInSamples       The block size in samples
  26:lib/libdaisy/src/util/CpuLoadMeter.h ****      *  @param smoothingFilterCutoffHz  The cutoff frequency of the smoothing filter that's used to
  27:lib/libdaisy/src/util/CpuLoadMeter.h ****      *                                  create the average CPU load reading.
  28:lib/libdaisy/src/util/CpuLoadMeter.h ****      */
  29:lib/libdaisy/src/util/CpuLoadMeter.h ****     void Init(float sampleRateInHz,
  30:lib/libdaisy/src/util/CpuLoadMeter.h ****               int   blockSizeInSamples,
  31:lib/libdaisy/src/util/CpuLoadMeter.h ****               float smoothingFilterCutoffHz = 1.0f)
  32:lib/libdaisy/src/util/CpuLoadMeter.h ****     {
  33:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto secPerBlock = float(blockSizeInSamples) / sampleRateInHz;
  34:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto ticksPerS   = float(System::GetTickFreq());
  35:lib/libdaisy/src/util/CpuLoadMeter.h ****         ticksPerBlockInv_      = 1.0f / (ticksPerS * secPerBlock);
  36:lib/libdaisy/src/util/CpuLoadMeter.h **** 
  37:lib/libdaisy/src/util/CpuLoadMeter.h ****         // update filter coefficient for smoothing filter (1pole lowpass)
  38:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto blockRateInHz = sampleRateInHz / float(blockSizeInSamples);
  39:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto cutoffNormalized
  40:lib/libdaisy/src/util/CpuLoadMeter.h ****             = smoothingFilterCutoffHz * 2.0f * 3.141592653f / blockRateInHz;
  41:lib/libdaisy/src/util/CpuLoadMeter.h ****         // according to
  42:lib/libdaisy/src/util/CpuLoadMeter.h ****         // https://en.wikipedia.org/wiki/Low-pass_filter#Simple_infinite_impulse_response_filter
  43:lib/libdaisy/src/util/CpuLoadMeter.h ****         smoothingConstant_ = cutoffNormalized / (cutoffNormalized + 1.0f);
  44:lib/libdaisy/src/util/CpuLoadMeter.h **** 
  45:lib/libdaisy/src/util/CpuLoadMeter.h ****         Reset();
  46:lib/libdaisy/src/util/CpuLoadMeter.h ****     }
  47:lib/libdaisy/src/util/CpuLoadMeter.h **** 
  48:lib/libdaisy/src/util/CpuLoadMeter.h ****     /** Call this at the beginning of your audio callback */
  49:lib/libdaisy/src/util/CpuLoadMeter.h ****     void OnBlockStart() { currentBlockStartTicks_ = System::GetTick(); }
 907              		.loc 15 49 10 view .LVU254
 908              	.LBB337:
 909              		.loc 15 49 27 view .LVU255
 910              	.LBE337:
 911              	.LBE336:
  68:AudioProcessor.cpp ****     if(engine_changed_flag) {
 912              		.loc 13 68 8 is_stmt 0 view .LVU256
 913 001c 354F     		ldr	r7, .L66+4
 914              	.LBB340:
 915              	.LBB338:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 48


 916              		.loc 15 49 68 view .LVU257
 917 001e FFF7FEFF 		bl	_ZN5daisy6System7GetTickEv
 918              	.LVL61:
 919              		.loc 15 49 51 view .LVU258
 920 0022 354C     		ldr	r4, .L66+8
 921              	.LBE338:
 922              	.LBE340:
  68:AudioProcessor.cpp ****     if(engine_changed_flag) {
 923              		.loc 13 68 8 view .LVU259
 924 0024 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 925              	.LBB341:
 926              	.LBB339:
 927              		.loc 15 49 51 view .LVU260
 928 0026 A060     		str	r0, [r4, #8]
 929              	.LVL62:
 930              		.loc 15 49 51 view .LVU261
 931              	.LBE339:
 932              	.LBE341:
  61:AudioProcessor.cpp ****     int engineIndex;
 933              		.loc 13 61 5 is_stmt 1 view .LVU262
  62:AudioProcessor.cpp ****     bool poly_mode;
 934              		.loc 13 62 5 view .LVU263
  63:AudioProcessor.cpp ****     int effective_num_voices;
 935              		.loc 13 63 5 view .LVU264
  64:AudioProcessor.cpp ****     bool arp_on;
 936              		.loc 13 64 5 view .LVU265
  67:AudioProcessor.cpp ****     static int prev_engine_index_static = 0;
 937              		.loc 13 67 5 view .LVU266
  68:AudioProcessor.cpp ****     if(engine_changed_flag) {
 938              		.loc 13 68 5 view .LVU267
 939 0028 83B1     		cbz	r3, .L54
  69:AudioProcessor.cpp ****         poly_engine.OnEngineChange(prev_engine_index_static, current_engine_index);
 940              		.loc 13 69 9 view .LVU268
  69:AudioProcessor.cpp ****         poly_engine.OnEngineChange(prev_engine_index_static, current_engine_index);
 941              		.loc 13 69 35 is_stmt 0 view .LVU269
 942 002a DFF8D890 		ldr	r9, .L66+20
 943 002e DFF8D880 		ldr	r8, .L66+24
 944 0032 D9F80020 		ldr	r2, [r9]
 945 0036 D8F80010 		ldr	r1, [r8]
 946 003a 3048     		ldr	r0, .L66+12
 947 003c FFF7FEFF 		bl	_ZN15PolyphonyEngine14OnEngineChangeEii
 948              	.LVL63:
  70:AudioProcessor.cpp ****         prev_engine_index_static = current_engine_index;
 949              		.loc 13 70 9 is_stmt 1 view .LVU270
  70:AudioProcessor.cpp ****         prev_engine_index_static = current_engine_index;
 950              		.loc 13 70 34 is_stmt 0 view .LVU271
 951 0040 D9F80030 		ldr	r3, [r9]
 952 0044 C8F80030 		str	r3, [r8]
  71:AudioProcessor.cpp ****         engine_changed_flag = false; // Clear flag after handling
 953              		.loc 13 71 9 is_stmt 1 view .LVU272
  71:AudioProcessor.cpp ****         engine_changed_flag = false; // Clear flag after handling
 954              		.loc 13 71 29 is_stmt 0 view .LVU273
 955 0048 0023     		movs	r3, #0
 956 004a 3B70     		strb	r3, [r7]
 957              	.L54:
  74:AudioProcessor.cpp ****     UpdateArpState(engineIndex, poly_mode, effective_num_voices, arp_on);
 958              		.loc 13 74 5 is_stmt 1 view .LVU274
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 49


  74:AudioProcessor.cpp ****     UpdateArpState(engineIndex, poly_mode, effective_num_voices, arp_on);
 959              		.loc 13 74 19 is_stmt 0 view .LVU275
 960 004c 0DF10703 		add	r3, sp, #7
 961 0050 03AA     		add	r2, sp, #12
 962 0052 0DF10601 		add	r1, sp, #6
 963 0056 02A8     		add	r0, sp, #8
 964 0058 FFF7FEFF 		bl	_Z14UpdateArpStateRiRbS_S0_
 965              	.LVL64:
  75:AudioProcessor.cpp ****     RenderVoices(engineIndex, poly_mode, effective_num_voices, arp_on);
 966              		.loc 13 75 5 is_stmt 1 view .LVU276
  75:AudioProcessor.cpp ****     RenderVoices(engineIndex, poly_mode, effective_num_voices, arp_on);
 967              		.loc 13 75 17 is_stmt 0 view .LVU277
 968 005c 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 969 0060 039A     		ldr	r2, [sp, #12]
 970 0062 9DF80610 		ldrb	r1, [sp, #6]	@ zero_extendqisi2
 971 0066 0298     		ldr	r0, [sp, #8]
 972 0068 FFF7FEFF 		bl	_Z12RenderVoicesibib
 973              	.LVL65:
  76:AudioProcessor.cpp ****     ApplyEffectsAndOutput(out, size);
 974              		.loc 13 76 5 is_stmt 1 view .LVU278
  76:AudioProcessor.cpp ****     ApplyEffectsAndOutput(out, size);
 975              		.loc 13 76 26 is_stmt 0 view .LVU279
 976 006c 3146     		mov	r1, r6
 977 006e 2846     		mov	r0, r5
 978 0070 FFF7FEFF 		bl	_Z21ApplyEffectsAndOutputPfj
 979              	.LVL66:
  79:AudioProcessor.cpp ****     clouds_processor.Prepare();
 980              		.loc 13 79 5 is_stmt 1 view .LVU280
  79:AudioProcessor.cpp ****     clouds_processor.Prepare();
 981              		.loc 13 79 29 is_stmt 0 view .LVU281
 982 0074 2248     		ldr	r0, .L66+16
 983 0076 FFF7FEFF 		bl	_ZN6clouds17GranularProcessor7PrepareEv
 984              	.LVL67:
  82:AudioProcessor.cpp ****     cpu_meter.OnBlockEnd(); // Mark the end of the audio block
 985              		.loc 13 82 5 is_stmt 1 view .LVU282
 986              	.LBB342:
 987              	.LBI342:
  50:lib/libdaisy/src/util/CpuLoadMeter.h **** 
  51:lib/libdaisy/src/util/CpuLoadMeter.h ****     /** Call this at the end of your audio callback */
  52:lib/libdaisy/src/util/CpuLoadMeter.h ****     void OnBlockEnd()
 988              		.loc 15 52 10 view .LVU283
 989              	.LBB343:
  53:lib/libdaisy/src/util/CpuLoadMeter.h ****     {
  54:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto end         = System::GetTick();
 990              		.loc 15 54 9 view .LVU284
 991              		.loc 15 54 49 is_stmt 0 view .LVU285
 992 007a FFF7FEFF 		bl	_ZN5daisy6System7GetTickEv
 993              	.LVL68:
  55:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto ticksPassed = end - currentBlockStartTicks_;
 994              		.loc 15 55 9 is_stmt 1 view .LVU286
  56:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto currentBlockLoad
 995              		.loc 15 56 9 view .LVU287
  55:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto ticksPassed = end - currentBlockStartTicks_;
 996              		.loc 15 55 20 is_stmt 0 view .LVU288
 997 007e A368     		ldr	r3, [r4, #8]
 998              		.loc 15 56 20 view .LVU289
 999 0080 94ED017A 		vldr.32	s14, [r4, #4]
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 50


  55:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto ticksPassed = end - currentBlockStartTicks_;
 1000              		.loc 15 55 20 view .LVU290
 1001 0084 C31A     		subs	r3, r0, r3
 1002 0086 07EE903A 		vmov	s15, r3	@ int
  57:lib/libdaisy/src/util/CpuLoadMeter.h ****             = float(ticksPassed) * ticksPerBlockInv_; // usPassed / usPerBlock
  58:lib/libdaisy/src/util/CpuLoadMeter.h **** 
  59:lib/libdaisy/src/util/CpuLoadMeter.h ****         if(firstCycle_)
 1003              		.loc 15 59 9 view .LVU291
 1004 008a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
  57:lib/libdaisy/src/util/CpuLoadMeter.h ****             = float(ticksPassed) * ticksPerBlockInv_; // usPassed / usPerBlock
 1005              		.loc 15 57 15 view .LVU292
 1006 008c F8EE677A 		vcvt.f32.u32	s15, s15
  56:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto currentBlockLoad
 1007              		.loc 15 56 20 view .LVU293
 1008 0090 67EE877A 		vmul.f32	s15, s15, s14
 1009              	.LVL69:
 1010              		.loc 15 59 9 is_stmt 1 view .LVU294
 1011 0094 53B1     		cbz	r3, .L55
  60:lib/libdaisy/src/util/CpuLoadMeter.h ****         {
  61:lib/libdaisy/src/util/CpuLoadMeter.h ****             max_ = min_ = avg_ = currentBlockLoad;
 1012              		.loc 15 61 13 view .LVU295
  62:lib/libdaisy/src/util/CpuLoadMeter.h ****             firstCycle_        = false;
 1013              		.loc 15 62 32 is_stmt 0 view .LVU296
 1014 0096 0023     		movs	r3, #0
  61:lib/libdaisy/src/util/CpuLoadMeter.h ****             firstCycle_        = false;
 1015              		.loc 15 61 32 view .LVU297
 1016 0098 C4ED057A 		vstr.32	s15, [r4, #20]
  61:lib/libdaisy/src/util/CpuLoadMeter.h ****             firstCycle_        = false;
 1017              		.loc 15 61 25 view .LVU298
 1018 009c C4ED037A 		vstr.32	s15, [r4, #12]
  61:lib/libdaisy/src/util/CpuLoadMeter.h ****             firstCycle_        = false;
 1019              		.loc 15 61 18 view .LVU299
 1020 00a0 C4ED047A 		vstr.32	s15, [r4, #16]
 1021              		.loc 15 62 13 is_stmt 1 view .LVU300
 1022              		.loc 15 62 32 is_stmt 0 view .LVU301
 1023 00a4 2370     		strb	r3, [r4]
 1024              	.LVL70:
 1025              	.L52:
 1026              		.loc 15 62 32 view .LVU302
 1027              	.LBE343:
 1028              	.LBE342:
  83:AudioProcessor.cpp **** }
 1029              		.loc 13 83 1 view .LVU303
 1030 00a6 05B0     		add	sp, sp, #20
 1031              		.cfi_remember_state
 1032              		.cfi_def_cfa_offset 28
 1033              		@ sp needed
 1034 00a8 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1035              	.LVL71:
 1036              	.L55:
 1037              		.cfi_restore_state
 1038              	.LBB345:
 1039              	.LBB344:
  63:lib/libdaisy/src/util/CpuLoadMeter.h ****         }
  64:lib/libdaisy/src/util/CpuLoadMeter.h ****         else
  65:lib/libdaisy/src/util/CpuLoadMeter.h ****         {
  66:lib/libdaisy/src/util/CpuLoadMeter.h ****             if(currentBlockLoad > max_)
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 51


 1040              		.loc 15 66 13 is_stmt 1 view .LVU304
 1041 00ac 94ED047A 		vldr.32	s14, [r4, #16]
  67:lib/libdaisy/src/util/CpuLoadMeter.h ****                 max_ = currentBlockLoad;
  68:lib/libdaisy/src/util/CpuLoadMeter.h ****             if(currentBlockLoad < min_)
  69:lib/libdaisy/src/util/CpuLoadMeter.h ****                 min_ = currentBlockLoad;
  70:lib/libdaisy/src/util/CpuLoadMeter.h **** 
  71:lib/libdaisy/src/util/CpuLoadMeter.h ****             avg_ = smoothingConstant_ * currentBlockLoad
 1042              		.loc 15 71 20 is_stmt 0 view .LVU305
 1043 00b0 D4ED066A 		vldr.32	s13, [r4, #24]
  66:lib/libdaisy/src/util/CpuLoadMeter.h ****                 max_ = currentBlockLoad;
 1044              		.loc 15 66 13 view .LVU306
 1045 00b4 F4EEC77A 		vcmpe.f32	s15, s14
  68:lib/libdaisy/src/util/CpuLoadMeter.h ****                 min_ = currentBlockLoad;
 1046              		.loc 15 68 13 view .LVU307
 1047 00b8 94ED037A 		vldr.32	s14, [r4, #12]
  72:lib/libdaisy/src/util/CpuLoadMeter.h ****                    + (1.0f - smoothingConstant_) * avg_;
 1048              		.loc 15 72 50 view .LVU308
 1049 00bc 94ED056A 		vldr.32	s12, [r4, #20]
  66:lib/libdaisy/src/util/CpuLoadMeter.h ****                 max_ = currentBlockLoad;
 1050              		.loc 15 66 13 view .LVU309
 1051 00c0 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  67:lib/libdaisy/src/util/CpuLoadMeter.h ****             if(currentBlockLoad < min_)
 1052              		.loc 15 67 17 is_stmt 1 view .LVU310
  68:lib/libdaisy/src/util/CpuLoadMeter.h ****                 min_ = currentBlockLoad;
 1053              		.loc 15 68 13 is_stmt 0 view .LVU311
 1054 00c4 F4EEC77A 		vcmpe.f32	s15, s14
 1055              		.loc 15 72 28 view .LVU312
 1056 00c8 B7EE007A 		vmov.f32	s14, #1.0e+0
  67:lib/libdaisy/src/util/CpuLoadMeter.h ****             if(currentBlockLoad < min_)
 1057              		.loc 15 67 22 view .LVU313
 1058 00cc C8BF     		it	gt
 1059 00ce C4ED047A 		vstrgt.32	s15, [r4, #16]
  68:lib/libdaisy/src/util/CpuLoadMeter.h ****                 min_ = currentBlockLoad;
 1060              		.loc 15 68 13 is_stmt 1 view .LVU314
 1061 00d2 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  69:lib/libdaisy/src/util/CpuLoadMeter.h **** 
 1062              		.loc 15 69 17 view .LVU315
 1063              		.loc 15 72 28 is_stmt 0 view .LVU316
 1064 00d6 37EE667A 		vsub.f32	s14, s14, s13
  69:lib/libdaisy/src/util/CpuLoadMeter.h **** 
 1065              		.loc 15 69 22 view .LVU317
 1066 00da 48BF     		it	mi
 1067 00dc C4ED037A 		vstrmi.32	s15, [r4, #12]
  71:lib/libdaisy/src/util/CpuLoadMeter.h ****                    + (1.0f - smoothingConstant_) * avg_;
 1068              		.loc 15 71 13 is_stmt 1 view .LVU318
 1069              		.loc 15 72 50 is_stmt 0 view .LVU319
 1070 00e0 27EE067A 		vmul.f32	s14, s14, s12
 1071              		.loc 15 72 20 view .LVU320
 1072 00e4 A7EEA67A 		vfma.f32	s14, s15, s13
  71:lib/libdaisy/src/util/CpuLoadMeter.h ****                    + (1.0f - smoothingConstant_) * avg_;
 1073              		.loc 15 71 18 view .LVU321
 1074 00e8 84ED057A 		vstr.32	s14, [r4, #20]
 1075              	.LVL72:
  71:lib/libdaisy/src/util/CpuLoadMeter.h ****                    + (1.0f - smoothingConstant_) * avg_;
 1076              		.loc 15 71 18 view .LVU322
 1077              	.LBE344:
 1078              	.LBE345:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 52


  83:AudioProcessor.cpp **** }
 1079              		.loc 13 83 1 view .LVU323
 1080 00ec DBE7     		b	.L52
 1081              	.L67:
 1082 00ee 00BF     		.align	2
 1083              	.L66:
 1084 00f0 00000000 		.word	.LANCHOR7
 1085 00f4 00000000 		.word	.LANCHOR8
 1086 00f8 00000000 		.word	cpu_meter
 1087 00fc 00000000 		.word	poly_engine
 1088 0100 00000000 		.word	clouds_processor
 1089 0104 00000000 		.word	.LANCHOR0
 1090 0108 00000000 		.word	.LANCHOR9
 1091              		.cfi_endproc
 1092              	.LFE6115:
 1094              		.section	.text.startup._GLOBAL__sub_I_current_engine_index,"ax",%progbits
 1095              		.align	1
 1096              		.syntax unified
 1097              		.thumb
 1098              		.thumb_func
 1100              	_GLOBAL__sub_I_current_engine_index:
 1101              	.LFB7011:
 1102              		.loc 13 211 1 is_stmt 1 view -0
 1103              		.cfi_startproc
 1104              		@ args = 0, pretend = 0, frame = 0
 1105              		@ frame_needed = 0, uses_anonymous_args = 0
 1106              		@ link register save eliminated.
 1107              	.LBB392:
 1108              	.LBI392:
 1109              		.loc 13 211 1 view .LVU325
 1110              	.LVL73:
 1111              	.LBB393:
 1112              	.LBB394:
 1113              	.LBI394:
  75:eurorack/clouds/dsp/granular_processor.h ****   ~GranularProcessor() { }
 1114              		.loc 1 75 3 view .LVU326
 1115              	.LBB395:
 1116              	.LBB396:
 1117              	.LBI396:
  40:eurorack/clouds/dsp/correlator.h ****   ~Correlator() { }
 1118              		.loc 12 40 3 view .LVU327
  40:eurorack/clouds/dsp/correlator.h ****   ~Correlator() { }
 1119              		.loc 12 40 3 is_stmt 0 view .LVU328
 1120              	.LBE396:
 1121              	.LBB397:
 1122              	.LBI397:
  55:eurorack/clouds/dsp/granular_sample_player.h ****   ~GranularSamplePlayer() { }
 1123              		.loc 11 55 3 is_stmt 1 view .LVU329
 1124              	.LBE397:
 1125              	.LBE395:
 1126              	.LBE394:
 1127              	.LBE393:
 1128              	.LBE392:
  55:eurorack/clouds/dsp/granular_sample_player.h ****   ~GranularSamplePlayer() { }
 1129              		.loc 11 55 26 view .LVU330
 1130              	.LBB434:
 1131              	.LBB428:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 53


 1132              	.LBB422:
 1133              	.LBB416:
 1134              	.LBB398:
 1135              	.LBI398:
  56:eurorack/clouds/dsp/wsola_sample_player.h ****   ~WSOLASamplePlayer() { }
 1136              		.loc 10 56 3 view .LVU331
 1137              	.LBE398:
 1138              	.LBE416:
 1139              	.LBE422:
 1140              	.LBE428:
 1141              	.LBE434:
  56:eurorack/clouds/dsp/wsola_sample_player.h ****   ~WSOLASamplePlayer() { }
 1142              		.loc 10 56 23 view .LVU332
 1143              	.LBB435:
 1144              	.LBB429:
 1145              	.LBB423:
 1146              	.LBB417:
 1147              	.LBB399:
 1148              	.LBI399:
  52:eurorack/clouds/dsp/looping_sample_player.h ****   ~LoopingSamplePlayer() { }
 1149              		.loc 9 52 3 view .LVU333
  52:eurorack/clouds/dsp/looping_sample_player.h ****   ~LoopingSamplePlayer() { }
 1150              		.loc 9 52 3 is_stmt 0 view .LVU334
 1151              	.LBE399:
 1152              	.LBB400:
 1153              	.LBI400:
  46:eurorack/clouds/dsp/pvoc/phase_vocoder.h ****   ~PhaseVocoder() { }
 1154              		.loc 7 46 3 is_stmt 1 view .LVU335
 1155              	.LBB401:
 1156              	.LBB402:
 1157              	.LBI402:
 694:eurorack/stmlib/fft/shy_fft.h ****   ~ShyFFT() { }
 1158              		.loc 8 694 3 view .LVU336
 1159              	.LBB403:
 1160              	.LBB404:
 1161              	.LBI404:
 158:eurorack/stmlib/fft/shy_fft.h ****   ~RotationPhasor() { }
 1162              		.loc 8 158 3 view .LVU337
 158:eurorack/stmlib/fft/shy_fft.h ****   ~RotationPhasor() { }
 1163              		.loc 8 158 3 is_stmt 0 view .LVU338
 1164              	.LBE404:
 1165              	.LBE403:
 1166              	.LBE402:
 1167              	.LBE401:
 1168              	.LBE400:
 1169              	.LBE417:
 1170              	.LBE423:
 1171              	.LBE429:
 1172              	.LBE435:
  46:eurorack/clouds/dsp/pvoc/phase_vocoder.h ****   ~PhaseVocoder() { }
 1173              		.loc 7 46 18 is_stmt 1 view .LVU339
  46:eurorack/clouds/dsp/pvoc/phase_vocoder.h ****   ~PhaseVocoder() { }
 1174              		.loc 7 46 18 view .LVU340
 1175              	.LBB436:
 1176              	.LBB430:
 1177              	.LBB424:
 1178              	.LBB418:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 54


 1179              	.LBB405:
 1180              	.LBI405:
  40:eurorack/clouds/dsp/fx/diffuser.h ****   ~Diffuser() { }
 1181              		.loc 6 40 3 view .LVU341
 1182              	.LBB406:
 1183              	.LBB407:
 1184              	.LBI407:
 104:eurorack/clouds/dsp/fx/fx_engine.h ****   ~FxEngine() { }
 1185              		.loc 4 104 3 view .LVU342
 1186              	.LBE407:
 1187              	.LBE406:
 1188              	.LBE405:
 1189              	.LBE418:
 1190              	.LBE424:
 1191              	.LBE430:
 1192              	.LBE436:
 104:eurorack/clouds/dsp/fx/fx_engine.h ****   ~FxEngine() { }
 1193              		.loc 4 104 14 view .LVU343
 1194              	.LBB437:
 1195              	.LBB431:
 1196              	.LBB425:
 1197              	.LBB419:
 1198              	.LBB408:
 1199              	.LBI408:
  40:eurorack/clouds/dsp/fx/reverb.h ****   ~Reverb() { }
 1200              		.loc 5 40 3 view .LVU344
 1201              	.LBB409:
 1202              	.LBB410:
 1203              	.LBI410:
 104:eurorack/clouds/dsp/fx/fx_engine.h ****   ~FxEngine() { }
 1204              		.loc 4 104 3 view .LVU345
 1205              	.LBE410:
 1206              	.LBE409:
 1207              	.LBE408:
 1208              	.LBE419:
 1209              	.LBE425:
 1210              	.LBE431:
 1211              	.LBE437:
 104:eurorack/clouds/dsp/fx/fx_engine.h ****   ~FxEngine() { }
 1212              		.loc 4 104 14 view .LVU346
 1213              	.LBB438:
 1214              	.LBB432:
 1215              	.LBB426:
 1216              	.LBB420:
 1217              	.LBB411:
 1218              	.LBI411:
  41:eurorack/clouds/dsp/fx/pitch_shifter.h ****   ~PitchShifter() { }
 1219              		.loc 3 41 3 view .LVU347
 1220              	.LBB412:
 1221              	.LBB413:
 1222              	.LBI413:
 104:eurorack/clouds/dsp/fx/fx_engine.h ****   ~FxEngine() { }
 1223              		.loc 4 104 3 view .LVU348
 1224              	.LBE413:
 1225              	.LBE412:
 1226              	.LBE411:
 1227              	.LBE420:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 55


 1228              	.LBE426:
 1229              	.LBE432:
 1230              	.LBE438:
 104:eurorack/clouds/dsp/fx/fx_engine.h ****   ~FxEngine() { }
 1231              		.loc 4 104 14 view .LVU349
  75:eurorack/clouds/dsp/granular_processor.h ****   ~GranularProcessor() { }
 1232              		.loc 1 75 23 view .LVU350
  75:eurorack/clouds/dsp/granular_processor.h ****   ~GranularProcessor() { }
 1233              		.loc 1 75 23 view .LVU351
  75:eurorack/clouds/dsp/granular_processor.h ****   ~GranularProcessor() { }
 1234              		.loc 1 75 23 view .LVU352
  75:eurorack/clouds/dsp/granular_processor.h ****   ~GranularProcessor() { }
 1235              		.loc 1 75 23 view .LVU353
  75:eurorack/clouds/dsp/granular_processor.h ****   ~GranularProcessor() { }
 1236              		.loc 1 75 23 view .LVU354
 1237              	.LBB439:
 1238              	.LBB433:
 1239              	.LBB427:
 1240              	.LBB421:
 1241              	.LBB414:
 1242              	.LBI414:
  41:eurorack/clouds/dsp/sample_rate_converter.h ****   ~SampleRateConverter() { }
 1243              		.loc 2 41 3 view .LVU355
  41:eurorack/clouds/dsp/sample_rate_converter.h ****   ~SampleRateConverter() { }
 1244              		.loc 2 41 3 is_stmt 0 view .LVU356
 1245              	.LBE414:
 1246              	.LBB415:
 1247              	.LBI415:
  41:eurorack/clouds/dsp/sample_rate_converter.h ****   ~SampleRateConverter() { }
 1248              		.loc 2 41 3 is_stmt 1 view .LVU357
  41:eurorack/clouds/dsp/sample_rate_converter.h ****   ~SampleRateConverter() { }
 1249              		.loc 2 41 3 is_stmt 0 view .LVU358
 1250              	.LBE415:
 1251              	.LBE421:
 1252              	.LBE427:
  42:AudioProcessor.cpp **** clouds::GranularProcessor clouds_processor;
 1253              		.loc 13 42 27 view .LVU359
 1254 0000 024A     		ldr	r2, .L69
 1255 0002 0349     		ldr	r1, .L69+4
 1256 0004 0348     		ldr	r0, .L69+8
 1257 0006 FFF7FEBF 		b	__aeabi_atexit
 1258              	.LVL74:
 1259              	.L70:
 1260 000a 00BF     		.align	2
 1261              	.L69:
 1262 000c 00000000 		.word	__dso_handle
 1263 0010 00000000 		.word	_ZN6clouds17GranularProcessorD1Ev
 1264 0014 00000000 		.word	clouds_processor
 1265              	.LBE433:
 1266              	.LBE439:
 1267              		.cfi_endproc
 1268              	.LFE7011:
 1270              		.section	.init_array,"aw",%init_array
 1271              		.align	2
 1272 0000 00000000 		.word	_GLOBAL__sub_I_current_engine_index(target1)
 1273              		.global	clouds_processor
 1274              		.global	engine_retrigger_phase
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 56


 1275              		.global	engine_changed_flag
 1276              		.global	current_engine_index
 1277              		.global	cloud_buffer_ccm
 1278              		.global	cloud_buffer
 1279              		.section	.bss._ZGVZ25UpdatePerformanceMonitorsjPfE23display_interval_blocks,"aw",%nobits
 1280              		.align	2
 1281              		.set	.LANCHOR2,. + 0
 1284              	_ZGVZ25UpdatePerformanceMonitorsjPfE23display_interval_blocks:
 1285 0000 00000000 		.space	4
 1286              		.section	.bss._ZL10was_arp_on,"aw",%nobits
 1287              		.set	.LANCHOR1,. + 0
 1290              	_ZL10was_arp_on:
 1291 0000 00       		.space	1
 1292              		.section	.bss._ZZ13AudioCallbackPKfPfjE12last_ui_time,"aw",%nobits
 1293              		.align	2
 1294              		.set	.LANCHOR7,. + 0
 1297              	_ZZ13AudioCallbackPKfPfjE12last_ui_time:
 1298 0000 00000000 		.space	4
 1299              		.section	.bss._ZZ13AudioCallbackPKfPfjE24prev_engine_index_static,"aw",%nobits
 1300              		.align	2
 1301              		.set	.LANCHOR9,. + 0
 1304              	_ZZ13AudioCallbackPKfPfjE24prev_engine_index_static:
 1305 0000 00000000 		.space	4
 1306              		.section	.bss._ZZ21ApplyEffectsAndOutputPfjE12input_frames,"aw",%nobits
 1307              		.align	1
 1308              		.set	.LANCHOR5,. + 0
 1311              	_ZZ21ApplyEffectsAndOutputPfjE12input_frames:
 1312 0000 00000000 		.space	128
 1312      00000000 
 1312      00000000 
 1312      00000000 
 1312      00000000 
 1313              		.section	.bss._ZZ21ApplyEffectsAndOutputPfjE13output_frames,"aw",%nobits
 1314              		.align	1
 1315              		.set	.LANCHOR6,. + 0
 1318              	_ZZ21ApplyEffectsAndOutputPfjE13output_frames:
 1319 0000 00000000 		.space	128
 1319      00000000 
 1319      00000000 
 1319      00000000 
 1319      00000000 
 1320              		.section	.bss._ZZ25UpdatePerformanceMonitorsjPfE15display_counter,"aw",%nobits
 1321              		.align	2
 1322              		.set	.LANCHOR4,. + 0
 1325              	_ZZ25UpdatePerformanceMonitorsjPfE15display_counter:
 1326 0000 00000000 		.space	4
 1327              		.section	.bss._ZZ25UpdatePerformanceMonitorsjPfE23display_interval_blocks,"aw",%nobits
 1328              		.align	2
 1329              		.set	.LANCHOR3,. + 0
 1332              	_ZZ25UpdatePerformanceMonitorsjPfE23display_interval_blocks:
 1333 0000 00000000 		.space	4
 1334              		.section	.bss.clouds_processor,"aw",%nobits
 1335              		.align	2
 1338              	clouds_processor:
 1339 0000 00000000 		.space	8424
 1339      00000000 
 1339      00000000 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 57


 1339      00000000 
 1339      00000000 
 1340              		.section	.bss.current_engine_index,"aw",%nobits
 1341              		.align	2
 1342              		.set	.LANCHOR0,. + 0
 1345              	current_engine_index:
 1346 0000 00000000 		.space	4
 1347              		.section	.bss.engine_changed_flag,"aw",%nobits
 1348              		.set	.LANCHOR8,. + 0
 1351              	engine_changed_flag:
 1352 0000 00       		.space	1
 1353              		.section	.bss.engine_retrigger_phase,"aw",%nobits
 1354              		.align	2
 1357              	engine_retrigger_phase:
 1358 0000 00000000 		.space	4
 1359              		.section	.sdram_bss,"aw"
 1362              	cloud_buffer_ccm:
 1363 0000 00000000 		.space	65408
 1363      00000000 
 1363      00000000 
 1363      00000000 
 1363      00000000 
 1366              	cloud_buffer:
 1367 ff80 00000000 		.space	118784
 1367      00000000 
 1367      00000000 
 1367      00000000 
 1367      00000000 
 1368              		.text
 1369              	.Letext0:
 1370              		.file 16 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/machine/_default_types.h"
 1371              		.file 17 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/_stdint.h"
 1372              		.file 18 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdint.h"
 1373              		.file 19 "/Library/DaisyToolchain/0.2.0/arm/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 1374              		.file 20 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cmath"
 1375              		.file 21 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h"
 1376              		.file 22 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdlib"
 1377              		.file 23 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdint"
 1378              		.file 24 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/type_traits"
 1379              		.file 25 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/arm-none-eabi/thumb/v
 1380              		.file 26 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h"
 1381              		.file 27 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/debug/debug.h"
 1382              		.file 28 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/algorithmfwd.h"
 1383              		.file 29 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/exception_ptr.h"
 1384              		.file 30 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdarg"
 1385              		.file 31 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdio"
 1386              		.file 32 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstring"
 1387              		.file 33 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cwchar"
 1388              		.file 34 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/clocale"
 1389              		.file 35 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/basic_string.h"
 1390              		.file 36 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_iterator.h"
 1391              		.file 37 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/uses_allocator.h
 1392              		.file 38 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/tuple"
 1393              		.file 39 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/std_function.h"
 1394              		.file 40 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/functional"
 1395              		.file 41 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/allocator.h"
 1396              		.file 42 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/alloc_traits.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 58


 1397              		.file 43 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_vector.h"
 1398              		.file 44 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/vector.tcc"
 1399              		.file 45 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_function.h"
 1400              		.file 46 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/refwrap.h"
 1401              		.file 47 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/predefined_ops.h
 1402              		.file 48 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/ext/new_allocator.h"
 1403              		.file 49 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/ext/alloc_traits.h"
 1404              		.file 50 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/_types.h"
 1405              		.file 51 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/reent.h"
 1406              		.file 52 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/lock.h"
 1407              		.file 53 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/math.h"
 1408              		.file 54 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdlib.h"
 1409              		.file 55 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/math.h"
 1410              		.file 56 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/stdlib.h"
 1411              		.file 57 "lib/libdaisy/src/daisy_core.h"
 1412              		.file 58 "lib/libdaisy/src/per/tim.h"
 1413              		.file 59 "lib/libdaisy/src/sys/system.h"
 1414              		.file 60 "lib/libdaisy/src/per/qspi.h"
 1415              		.file 61 "lib/libdaisy/src/per/dac.h"
 1416              		.file 62 "lib/libdaisy/src/per/gpio.h"
 1417              		.file 63 "lib/libdaisy/src/per/sai.h"
 1418              		.file 64 "lib/libdaisy/src/hid/audio.h"
 1419              		.file 65 "lib/libdaisy/src/per/adc.h"
 1420              		.file 66 "lib/libdaisy/src/hid/usb.h"
 1421              		.file 67 "lib/libdaisy/src/util/wav_format.h"
 1422              		.file 68 "lib/libdaisy/src/dev/sr_595.h"
 1423              		.file 69 "lib/libdaisy/src/dev/codec_ak4556.h"
 1424              		.file 70 "lib/libdaisy/src/dev/max11300.h"
 1425              		.file 71 "lib/libdaisy/src/daisy_seed.h"
 1426              		.file 72 "lib/libdaisy/src/dev/sdram.h"
 1427              		.file 73 "/Library/DaisyToolchain/0.2.0/arm/lib/gcc/arm-none-eabi/10.3.1/include/stdarg.h"
 1428              		.file 74 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdio.h"
 1429              		.file 75 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/string.h"
 1430              		.file 76 "lib/DaisySP/Source/Control/adenv.h"
 1431              		.file 77 "lib/DaisySP/Source/Utility/dsp.h"
 1432              		.file 78 "lib/DaisySP/Source/Utility/metro.h"
 1433              		.file 79 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/wchar.h"
 1434              		.file 80 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/locale.h"
 1435              		.file 81 "eurorack/stmlib/stmlib.h"
 1436              		.file 82 "eurorack/stmlib/dsp/filter.h"
 1437              		.file 83 "eurorack/stmlib/dsp/limiter.h"
 1438              		.file 84 "eurorack/stmlib/utils/buffer_allocator.h"
 1439              		.file 85 "eurorack/stmlib/dsp/hysteresis_quantizer.h"
 1440              		.file 86 "eurorack/stmlib/dsp/cosine_oscillator.h"
 1441              		.file 87 "eurorack/plaits/dsp/dsp.h"
 1442              		.file 88 "eurorack/plaits/dsp/engine/engine.h"
 1443              		.file 89 "eurorack/plaits/dsp/engine/additive_engine.h"
 1444              		.file 90 "eurorack/plaits/dsp/oscillator/oscillator.h"
 1445              		.file 91 "eurorack/plaits/dsp/engine/chord_engine.h"
 1446              		.file 92 "eurorack/plaits/dsp/physical_modelling/resonator.h"
 1447              		.file 93 "eurorack/plaits/dsp/engine/particle_engine.h"
 1448              		.file 94 "eurorack/plaits/dsp/speech/lpc_speech_synth.h"
 1449              		.file 95 "eurorack/plaits/dsp/speech/lpc_speech_synth_controller.h"
 1450              		.file 96 "eurorack/plaits/dsp/speech/naive_speech_synth.h"
 1451              		.file 97 "eurorack/plaits/dsp/speech/sam_speech_synth.h"
 1452              		.file 98 "eurorack/plaits/dsp/physical_modelling/string.h"
 1453              		.file 99 "eurorack/plaits/dsp/engine/string_engine.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 59


 1454              		.file 100 "eurorack/plaits/dsp/engine/swarm_engine.h"
 1455              		.file 101 "eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h"
 1456              		.file 102 "eurorack/plaits/dsp/envelope.h"
 1457              		.file 103 "eurorack/plaits/dsp/fx/low_pass_gate.h"
 1458              		.file 104 "eurorack/plaits/dsp/voice.h"
 1459              		.file 105 "eurorack/plaits/dsp/physical_modelling/delay_line.h"
 1460              		.file 106 "mpr121_daisy.h"
 1461              		.file 107 "VoiceEnvelope.h"
 1462              		.file 108 "Effects/BiquadFilters.h"
 1463              		.file 109 "Arpeggiator.h"
 1464              		.file 110 "eurorack/clouds/dsp/frame.h"
 1465              		.file 111 "eurorack/clouds/dsp/audio_buffer.h"
 1466              		.file 112 "eurorack/clouds/dsp/grain.h"
 1467              		.file 113 "eurorack/clouds/dsp/parameters.h"
 1468              		.file 114 "eurorack/clouds/dsp/pvoc/stft.h"
 1469              		.file 115 "eurorack/clouds/dsp/pvoc/frame_transformation.h"
 1470              		.file 116 "eurorack/clouds/dsp/window.h"
 1471              		.file 117 "Thaumazein.h"
 1472              		.file 118 "<built-in>"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 60


DEFINED SYMBOLS
                            *ABS*:0000000000000000 AudioProcessor.cpp
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:19     .text._ZN6clouds17GranularProcessorD2Ev:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:25     .text._ZN6clouds17GranularProcessorD2Ev:0000000000000000 _ZN6clouds17GranularProcessorD2Ev
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:25     .text._ZN6clouds17GranularProcessorD2Ev:0000000000000000 _ZN6clouds17GranularProcessorD1Ev
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:123    .text._Z20ProcessUIAndControlsv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:129    .text._Z20ProcessUIAndControlsv:0000000000000000 _Z20ProcessUIAndControlsv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:188    .text._Z20ProcessUIAndControlsv:000000000000003c $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:197    .text._Z14UpdateArpStateRiRbS_S0_:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:203    .text._Z14UpdateArpStateRiRbS_S0_:0000000000000000 _Z14UpdateArpStateRiRbS_S0_
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:386    .text._Z14UpdateArpStateRiRbS_S0_:00000000000000a4 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:396    .text._Z12RenderVoicesibib:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:402    .text._Z12RenderVoicesibib:0000000000000000 _Z12RenderVoicesibib
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:490    .text._Z12RenderVoicesibib:000000000000004c $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:502    .text._Z23DetermineEngineSettingsv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:508    .text._Z23DetermineEngineSettingsv:0000000000000000 _Z23DetermineEngineSettingsv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:524    .text._Z23DetermineEngineSettingsv:0000000000000008 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:529    .text._Z25UpdatePerformanceMonitorsjPf:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:535    .text._Z25UpdatePerformanceMonitorsjPf:0000000000000000 _Z25UpdatePerformanceMonitorsjPf
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:644    .text._Z25UpdatePerformanceMonitorsjPf:000000000000007c $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:657    .text._Z21ApplyEffectsAndOutputPfj:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:663    .text._Z21ApplyEffectsAndOutputPfj:0000000000000000 _Z21ApplyEffectsAndOutputPfj
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:844    .text._Z21ApplyEffectsAndOutputPfj:00000000000000a0 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1338   .bss.clouds_processor:0000000000000000 clouds_processor
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:855    .text._Z13AudioCallbackPKfPfj:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:861    .text._Z13AudioCallbackPKfPfj:0000000000000000 _Z13AudioCallbackPKfPfj
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1084   .text._Z13AudioCallbackPKfPfj:00000000000000f0 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1095   .text.startup._GLOBAL__sub_I_current_engine_index:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1100   .text.startup._GLOBAL__sub_I_current_engine_index:0000000000000000 _GLOBAL__sub_I_current_engine_index
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1262   .text.startup._GLOBAL__sub_I_current_engine_index:000000000000000c $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1271   .init_array:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1357   .bss.engine_retrigger_phase:0000000000000000 engine_retrigger_phase
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1351   .bss.engine_changed_flag:0000000000000000 engine_changed_flag
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1345   .bss.current_engine_index:0000000000000000 current_engine_index
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1362   .sdram_bss:0000000000000000 cloud_buffer_ccm
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1366   .sdram_bss:000000000000ff80 cloud_buffer
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1280   .bss._ZGVZ25UpdatePerformanceMonitorsjPfE23display_interval_blocks:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1284   .bss._ZGVZ25UpdatePerformanceMonitorsjPfE23display_interval_blocks:0000000000000000 _ZGVZ25UpdatePerformanceMonitorsjPfE23display_interval_blocks
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1290   .bss._ZL10was_arp_on:0000000000000000 _ZL10was_arp_on
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1291   .bss._ZL10was_arp_on:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1293   .bss._ZZ13AudioCallbackPKfPfjE12last_ui_time:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1297   .bss._ZZ13AudioCallbackPKfPfjE12last_ui_time:0000000000000000 _ZZ13AudioCallbackPKfPfjE12last_ui_time
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1300   .bss._ZZ13AudioCallbackPKfPfjE24prev_engine_index_static:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1304   .bss._ZZ13AudioCallbackPKfPfjE24prev_engine_index_static:0000000000000000 _ZZ13AudioCallbackPKfPfjE24prev_engine_index_static
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1307   .bss._ZZ21ApplyEffectsAndOutputPfjE12input_frames:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1311   .bss._ZZ21ApplyEffectsAndOutputPfjE12input_frames:0000000000000000 _ZZ21ApplyEffectsAndOutputPfjE12input_frames
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1314   .bss._ZZ21ApplyEffectsAndOutputPfjE13output_frames:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1318   .bss._ZZ21ApplyEffectsAndOutputPfjE13output_frames:0000000000000000 _ZZ21ApplyEffectsAndOutputPfjE13output_frames
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1321   .bss._ZZ25UpdatePerformanceMonitorsjPfE15display_counter:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1325   .bss._ZZ25UpdatePerformanceMonitorsjPfE15display_counter:0000000000000000 _ZZ25UpdatePerformanceMonitorsjPfE15display_counter
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1328   .bss._ZZ25UpdatePerformanceMonitorsjPfE23display_interval_blocks:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1332   .bss._ZZ25UpdatePerformanceMonitorsjPfE23display_interval_blocks:0000000000000000 _ZZ25UpdatePerformanceMonitorsjPfE23display_interval_blocks
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1335   .bss.clouds_processor:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1341   .bss.current_engine_index:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1352   .bss.engine_changed_flag:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1354   .bss.engine_retrigger_phase:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s:1363   .sdram_bss:0000000000000000 $d
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccUtEqJE.s 			page 61


                           .group:0000000000000000 _ZN6clouds17GranularProcessorD5Ev

UNDEFINED SYMBOLS
_Z15ProcessControlsv
_Z14ReadKnobValuesv
_ZN11Arpeggiator20SetMainTempoFromKnobEf
arp_enabled
delay_time_val
arp
touch_cv_value
morph_knob_val
_ZN15PolyphonyEngine11ResetVoicesEv
_ZN15PolyphonyEngine20UpdateLastTouchStateEt
_ZNK15PolyphonyEngine17GetLastTouchStateEv
_ZN11Arpeggiator15UpdateHeldNotesEtt
_ZN11Arpeggiator7ProcessEj
_ZN15PolyphonyEngine16HandleTouchInputEttibi
poly_engine
current_touch_state
_ZN15PolyphonyEngine11RenderBlockERKNS_16RenderParametersE
pitch_val
harm_knob_val
timbre_knob_val
env_attack_val
env_release_val
__cxa_guard_acquire
__cxa_guard_release
smoothed_output_level
sample_rate
update_display
_ZN6clouds17GranularProcessor7ProcessEPNS_10ShortFrameES2_j
_ZN5daisy6System6GetNowEv
_ZN5daisy6System7GetTickEv
_ZN15PolyphonyEngine14OnEngineChangeEii
_ZN6clouds17GranularProcessor7PrepareEv
cpu_meter
__aeabi_atexit
__dso_handle
