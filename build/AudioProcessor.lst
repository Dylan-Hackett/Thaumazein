ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"AudioProcessor.cpp"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text._ZN13VoiceEnvelope13SetAttackTimeEf,"axG",%progbits,_ZN13VoiceEnvelope13SetAttackTi
  19              		.align	1
  20              		.weak	_ZN13VoiceEnvelope13SetAttackTimeEf
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	_ZN13VoiceEnvelope13SetAttackTimeEf:
  26              	.LVL0:
  27              	.LFB5036:
  28              		.file 1 "VoiceEnvelope.h"
   1:VoiceEnvelope.h **** #pragma once
   2:VoiceEnvelope.h **** #include <algorithm>
   3:VoiceEnvelope.h **** 
   4:VoiceEnvelope.h **** // Simple envelope for each polyphonic voice
   5:VoiceEnvelope.h **** class VoiceEnvelope {
   6:VoiceEnvelope.h **** public:
   7:VoiceEnvelope.h ****     enum EnvState {
   8:VoiceEnvelope.h ****         ENV_IDLE,
   9:VoiceEnvelope.h ****         ENV_ATTACK,
  10:VoiceEnvelope.h ****         ENV_SUSTAIN,
  11:VoiceEnvelope.h ****         ENV_DECAY,
  12:VoiceEnvelope.h ****         ENV_RESET
  13:VoiceEnvelope.h ****     };
  14:VoiceEnvelope.h **** 
  15:VoiceEnvelope.h ****     enum EnvMode {
  16:VoiceEnvelope.h ****         MODE_AR,   // Attack-Release
  17:VoiceEnvelope.h ****         MODE_ASR   // Attack-Sustain-Release
  18:VoiceEnvelope.h ****     };
  19:VoiceEnvelope.h **** 
  20:VoiceEnvelope.h ****     VoiceEnvelope() :
  21:VoiceEnvelope.h ****         current_state(ENV_IDLE),
  22:VoiceEnvelope.h ****         current_value(0.0f),
  23:VoiceEnvelope.h ****         mode(MODE_ASR),
  24:VoiceEnvelope.h ****         attack_curve_coefficient(0.5f),
  25:VoiceEnvelope.h ****         release_curve_coefficient(0.5f),
  26:VoiceEnvelope.h ****         phase(0),
  27:VoiceEnvelope.h ****         decay_start_level(0.0f)
  28:VoiceEnvelope.h ****     {}
  29:VoiceEnvelope.h **** 
  30:VoiceEnvelope.h ****     void Init(float sample_rate) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 2


  31:VoiceEnvelope.h ****         time_range_2x = 2.0f * 4.0f * sample_rate;  // 4s max time
  32:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
  33:VoiceEnvelope.h ****         min_decay_time_a = 0.4f * sample_rate;      // 400ms min decay A
  34:VoiceEnvelope.h ****         min_decay_time_b = 0.01f * sample_rate;     // 10ms min decay B
  35:VoiceEnvelope.h ****         reset_time = 0.008f * sample_rate;          // 8ms reset time
  36:VoiceEnvelope.h ****         reset_coefficient = 1.0f / reset_time;
  37:VoiceEnvelope.h ****         
  38:VoiceEnvelope.h ****         // Default curves
  39:VoiceEnvelope.h ****         SetAttackCurve(0.5f);
  40:VoiceEnvelope.h ****         SetReleaseCurve(0.5f);
  41:VoiceEnvelope.h ****     }
  42:VoiceEnvelope.h **** 
  43:VoiceEnvelope.h ****     void SetMode(EnvMode new_mode) {
  44:VoiceEnvelope.h ****         mode = new_mode;
  45:VoiceEnvelope.h ****     }
  46:VoiceEnvelope.h **** 
  47:VoiceEnvelope.h ****     // Original combined shape method for backward compatibility
  48:VoiceEnvelope.h ****     void SetShape(float value) {
  49:VoiceEnvelope.h ****         float curve;
  50:VoiceEnvelope.h ****         if (value < 0.5f) {
  51:VoiceEnvelope.h ****             attack_time = min_attack_time;
  52:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * value * value) + min_decay_time_a;
  53:VoiceEnvelope.h ****             curve = value * 0.15f;
  54:VoiceEnvelope.h ****         } else {
  55:VoiceEnvelope.h ****             float norm_val = 2.0f * value - 1.0f;
  56:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(time_range_2x * norm_val * norm_val) + min_attack_tim
  57:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
  58:VoiceEnvelope.h ****             curve = 0.5f;
  59:VoiceEnvelope.h ****         }
  60:VoiceEnvelope.h ****         attack_coefficient = 1.0f / attack_time;
  61:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
  62:VoiceEnvelope.h ****         SetAttackCurve(curve);
  63:VoiceEnvelope.h ****         SetReleaseCurve(curve);
  64:VoiceEnvelope.h ****     }
  65:VoiceEnvelope.h ****     
  66:VoiceEnvelope.h ****     // New methods for separate attack and release control
  67:VoiceEnvelope.h ****     void SetAttackTime(float value) {
  29              		.loc 1 67 10 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  68:VoiceEnvelope.h ****         // Map 0-1 value to attack time (exponential scaling)
  69:VoiceEnvelope.h ****         // value³ for finer control at shorter settings
  70:VoiceEnvelope.h ****         float value_cubed = value * value * value;
  34              		.loc 1 70 9 view .LVU1
  71:VoiceEnvelope.h ****         
  72:VoiceEnvelope.h ****         // Special handling for super punchy attacks at low values
  73:VoiceEnvelope.h ****         if (value < 0.1f) {
  35              		.loc 1 73 9 view .LVU2
  36 0000 9FED286A 		vldr.32	s12, .L13
  37 0004 B4EEC60A 		vcmpe.f32	s0, s12
  38 0008 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  39 000c 31D5     		bpl	.L10
  74:VoiceEnvelope.h ****             // Extra fast attacks at the beginning of the range
  75:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(min_attack_time + 
  40              		.loc 1 75 13 view .LVU3
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 3


  76:VoiceEnvelope.h ****                                            (min_attack_time * 9.0f * value / 0.1f));
  41              		.loc 1 76 61 is_stmt 0 view .LVU4
  42 000e B2EE027A 		vmov.f32	s14, #9.0e+0
  75:VoiceEnvelope.h ****                                            (min_attack_time * 9.0f * value / 0.1f));
  43              		.loc 1 75 47 view .LVU5
  44 0012 D0ED056A 		vldr.32	s13, [r0, #20]
  45              		.loc 1 76 61 view .LVU6
  46 0016 26EE877A 		vmul.f32	s14, s13, s14
  47              		.loc 1 76 68 view .LVU7
  48 001a 27EE007A 		vmul.f32	s14, s14, s0
  49              		.loc 1 76 76 view .LVU8
  50 001e C7EE067A 		vdiv.f32	s15, s14, s12
  75:VoiceEnvelope.h ****                                            (min_attack_time * 9.0f * value / 0.1f));
  51              		.loc 1 75 63 view .LVU9
  52 0022 77EEA67A 		vadd.f32	s15, s15, s13
  53              	.L12:
  77:VoiceEnvelope.h ****         } else {
  78:VoiceEnvelope.h ****             // Normal range from 2ms to 4 seconds
  79:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(0.002f * time_range_2x/8.0f + 
  54              		.loc 1 79 27 view .LVU10
  55 0026 FCEEE77A 		vcvt.u32.f32	s15, s15
  80:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
  81:VoiceEnvelope.h ****         }
  82:VoiceEnvelope.h ****         
  83:VoiceEnvelope.h ****         attack_coefficient = 1.0f / attack_time;
  56              		.loc 1 83 35 view .LVU11
  57 002a F7EE006A 		vmov.f32	s13, #1.0e+0
  58 002e C0ED0D7A 		vstr.32	s15, [r0, #52]	@ int
  59              		.loc 1 83 9 is_stmt 1 view .LVU12
  60              		.loc 1 83 35 is_stmt 0 view .LVU13
  61 0032 F8EE677A 		vcvt.f32.u32	s15, s15
  62 0036 86EEA77A 		vdiv.f32	s14, s13, s15
  63              		.loc 1 83 28 view .LVU14
  64 003a 80ED0B7A 		vstr.32	s14, [r0, #44]
  84:VoiceEnvelope.h ****         
  85:VoiceEnvelope.h ****         // Make curve more exponential for faster attacks
  86:VoiceEnvelope.h ****         if (value < 0.3f) {
  65              		.loc 1 86 9 is_stmt 1 view .LVU15
  66 003e 9FED1A7A 		vldr.32	s14, .L13+4
  67 0042 B4EEC70A 		vcmpe.f32	s0, s14
  68 0046 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  69 004a 27D5     		bpl	.L11
  70              	.LVL1:
  71              	.LBB135:
  72              	.LBI135:
  67:VoiceEnvelope.h ****         // Map 0-1 value to attack time (exponential scaling)
  73              		.loc 1 67 10 view .LVU16
  74              	.LBB136:
  87:VoiceEnvelope.h ****             // More exponential curve for punchy attacks
  88:VoiceEnvelope.h ****             SetAttackCurve(0.7f + (0.3f - value)); // 0.7 to 1.0 range for punchier curve
  75              		.loc 1 88 13 view .LVU17
  76              	.LBB137:
  77              	.LBI137:
  89:VoiceEnvelope.h ****         } else {
  90:VoiceEnvelope.h ****             // Normal curve
  91:VoiceEnvelope.h ****             SetAttackCurve(0.5f);
  92:VoiceEnvelope.h ****         }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 4


  93:VoiceEnvelope.h ****     }
  94:VoiceEnvelope.h ****     
  95:VoiceEnvelope.h ****     void SetReleaseTime(float value) {
  96:VoiceEnvelope.h ****         // Map 0-1 value to release time (exponential scaling)
  97:VoiceEnvelope.h ****         // value³ for finer control at shorter settings
  98:VoiceEnvelope.h ****         float value_cubed = value * value * value;
  99:VoiceEnvelope.h ****         
 100:VoiceEnvelope.h ****         // Release time ranges from min_decay_time_b to 8 seconds
 101:VoiceEnvelope.h ****         decay_time = static_cast<size_t>(min_decay_time_b + 
 102:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 103:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
 104:VoiceEnvelope.h ****         
 105:VoiceEnvelope.h ****         // Use consistent release curve regardless of release time
 106:VoiceEnvelope.h ****         SetReleaseCurve(0.5f);
 107:VoiceEnvelope.h ****     }
 108:VoiceEnvelope.h ****     
 109:VoiceEnvelope.h ****     void SetAttackCurve(float value) {
  78              		.loc 1 109 10 view .LVU18
  79              	.LBB138:
 110:VoiceEnvelope.h ****         float cu = value - 0.5f;
  80              		.loc 1 110 9 view .LVU19
  81              	.LBE138:
  82              	.LBE137:
  88:VoiceEnvelope.h ****         } else {
  83              		.loc 1 88 41 is_stmt 0 view .LVU20
  84 004c 77EE407A 		vsub.f32	s15, s14, s0
  88:VoiceEnvelope.h ****         } else {
  85              		.loc 1 88 27 view .LVU21
  86 0050 9FED167A 		vldr.32	s14, .L13+8
  87 0054 77EE877A 		vadd.f32	s15, s15, s14
  88              	.LVL2:
  89              	.LBB140:
  90              	.LBB139:
  91              		.loc 1 110 15 view .LVU22
  92 0058 B6EE007A 		vmov.f32	s14, #5.0e-1
  93 005c 77EEC77A 		vsub.f32	s15, s15, s14
  94              	.LVL3:
 111:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
  95              		.loc 1 111 9 is_stmt 1 view .LVU23
  96              		.loc 1 111 43 is_stmt 0 view .LVU24
  97 0060 9FED137A 		vldr.32	s14, .L13+12
  98 0064 27EE877A 		vmul.f32	s14, s15, s14
  99              		.loc 1 111 48 view .LVU25
 100 0068 67EE277A 		vmul.f32	s15, s14, s15
 101              	.LVL4:
 102              	.L5:
 103              		.loc 1 111 48 view .LVU26
 104 006c C0ED027A 		vstr.32	s15, [r0, #8]
 105              	.LBE139:
 106              	.LBE140:
 107              	.LBE136:
 108              	.LBE135:
  93:VoiceEnvelope.h ****     
 109              		.loc 1 93 5 view .LVU27
 110 0070 7047     		bx	lr
 111              	.L10:
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 5


 112              		.loc 1 79 13 is_stmt 1 view .LVU28
  70:VoiceEnvelope.h ****         
 113              		.loc 1 70 35 is_stmt 0 view .LVU29
 114 0072 60EE007A 		vmul.f32	s15, s0, s0
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 115              		.loc 1 79 56 view .LVU30
 116 0076 90ED047A 		vldr.32	s14, [r0, #16]
  80:VoiceEnvelope.h ****         }
 117              		.loc 1 80 59 view .LVU31
 118 007a B6EE006A 		vmov.f32	s12, #5.0e-1
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 119              		.loc 1 79 54 view .LVU32
 120 007e DFED0D6A 		vldr.32	s13, .L13+16
  70:VoiceEnvelope.h ****         
 121              		.loc 1 70 15 view .LVU33
 122 0082 67EE807A 		vmul.f32	s15, s15, s0
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 123              		.loc 1 79 54 view .LVU34
 124 0086 67EE266A 		vmul.f32	s13, s14, s13
  80:VoiceEnvelope.h ****         }
 125              		.loc 1 80 59 view .LVU35
 126 008a 27EE067A 		vmul.f32	s14, s14, s12
  80:VoiceEnvelope.h ****         }
 127              		.loc 1 80 66 view .LVU36
 128 008e 67EE877A 		vmul.f32	s15, s15, s14
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 129              		.loc 1 79 75 view .LVU37
 130 0092 B4EE007A 		vmov.f32	s14, #1.25e-1
 131 0096 E6EE877A 		vfma.f32	s15, s13, s14
 132 009a C4E7     		b	.L12
 133              	.L11:
 134              	.LBB141:
 135              	.LBB142:
 136              		.loc 1 111 34 view .LVU38
 137 009c DFED067A 		vldr.32	s15, .L13+20
 138 00a0 E4E7     		b	.L5
 139              	.L14:
 140 00a2 00BF     		.align	2
 141              	.L13:
 142 00a4 CDCCCC3D 		.word	1036831949
 143 00a8 9A99993E 		.word	1050253722
 144 00ac 3333333F 		.word	1060320051
 145 00b0 00000043 		.word	1124073472
 146 00b4 6F12033B 		.word	990057071
 147 00b8 00000000 		.word	0
 148              	.LBE142:
 149              	.LBE141:
 150              		.cfi_endproc
 151              	.LFE5036:
 153              		.section	.text._ZN13VoiceEnvelope14SetReleaseTimeEf,"axG",%progbits,_ZN13VoiceEnvelope14SetRelease
 154              		.align	1
 155              		.weak	_ZN13VoiceEnvelope14SetReleaseTimeEf
 156              		.syntax unified
 157              		.thumb
 158              		.thumb_func
 160              	_ZN13VoiceEnvelope14SetReleaseTimeEf:
 161              	.LVL5:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 6


 162              	.LFB5037:
  95:VoiceEnvelope.h ****         // Map 0-1 value to release time (exponential scaling)
 163              		.loc 1 95 10 is_stmt 1 view -0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              		@ link register save eliminated.
  98:VoiceEnvelope.h ****         
 168              		.loc 1 98 9 view .LVU40
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 169              		.loc 1 101 9 view .LVU41
  98:VoiceEnvelope.h ****         
 170              		.loc 1 98 35 is_stmt 0 view .LVU42
 171 0000 60EE007A 		vmul.f32	s15, s0, s0
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 172              		.loc 1 101 59 view .LVU43
 173 0004 90ED047A 		vldr.32	s14, [r0, #16]
 103:VoiceEnvelope.h ****         
 174              		.loc 1 103 34 view .LVU44
 175 0008 F7EE006A 		vmov.f32	s13, #1.0e+0
 176              	.LBB143:
 177              	.LBB144:
 112:VoiceEnvelope.h ****     }
 113:VoiceEnvelope.h ****     
 114:VoiceEnvelope.h ****     void SetReleaseCurve(float value) {
 115:VoiceEnvelope.h ****         float cu = value - 0.5f;
 116:VoiceEnvelope.h ****         release_curve_coefficient = 128.0f * cu * cu;
 178              		.loc 1 116 35 view .LVU45
 179 000c 0023     		movs	r3, #0
 180              	.LBE144:
 181              	.LBE143:
  98:VoiceEnvelope.h ****         
 182              		.loc 1 98 15 view .LVU46
 183 000e 27EE800A 		vmul.f32	s0, s15, s0
 184              	.LVL6:
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 185              		.loc 1 101 59 view .LVU47
 186 0012 D0ED077A 		vldr.32	s15, [r0, #28]
 187              	.LBB147:
 188              	.LBB145:
 189              		.loc 1 116 35 view .LVU48
 190 0016 C360     		str	r3, [r0, #12]	@ float
 191              	.LBE145:
 192              	.LBE147:
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 193              		.loc 1 101 59 view .LVU49
 194 0018 E7EE007A 		vfma.f32	s15, s14, s0
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 195              		.loc 1 101 22 view .LVU50
 196 001c FCEEE77A 		vcvt.u32.f32	s15, s15
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 197              		.loc 1 101 20 view .LVU51
 198 0020 C0ED0E7A 		vstr.32	s15, [r0, #56]	@ int
 103:VoiceEnvelope.h ****         
 199              		.loc 1 103 9 is_stmt 1 view .LVU52
 103:VoiceEnvelope.h ****         
 200              		.loc 1 103 34 is_stmt 0 view .LVU53
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 7


 201 0024 F8EE677A 		vcvt.f32.u32	s15, s15
 202 0028 86EEA77A 		vdiv.f32	s14, s13, s15
 103:VoiceEnvelope.h ****         
 203              		.loc 1 103 27 view .LVU54
 204 002c 80ED0C7A 		vstr.32	s14, [r0, #48]
 106:VoiceEnvelope.h ****     }
 205              		.loc 1 106 9 is_stmt 1 view .LVU55
 206              	.LVL7:
 207              	.LBB148:
 208              	.LBI143:
 114:VoiceEnvelope.h ****         float cu = value - 0.5f;
 209              		.loc 1 114 10 view .LVU56
 210              	.LBB146:
 115:VoiceEnvelope.h ****         release_curve_coefficient = 128.0f * cu * cu;
 211              		.loc 1 115 9 view .LVU57
 212              		.loc 1 116 9 view .LVU58
 213              		.loc 1 116 9 is_stmt 0 view .LVU59
 214              	.LBE146:
 215              	.LBE148:
 107:VoiceEnvelope.h ****     
 216              		.loc 1 107 5 view .LVU60
 217 0030 7047     		bx	lr
 218              		.cfi_endproc
 219              	.LFE5037:
 221              		.section	.text._ZN13VoiceEnvelope7TriggerEv,"axG",%progbits,_ZN13VoiceEnvelope7TriggerEv,comdat
 222              		.align	1
 223              		.weak	_ZN13VoiceEnvelope7TriggerEv
 224              		.syntax unified
 225              		.thumb
 226              		.thumb_func
 228              	_ZN13VoiceEnvelope7TriggerEv:
 229              	.LVL8:
 230              	.LFB5040:
 117:VoiceEnvelope.h ****     }
 118:VoiceEnvelope.h **** 
 119:VoiceEnvelope.h ****     void Trigger() {
 231              		.loc 1 119 10 is_stmt 1 view -0
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 0
 234              		@ frame_needed = 0, uses_anonymous_args = 0
 235              		@ link register save eliminated.
 120:VoiceEnvelope.h ****         switch (current_state) {
 236              		.loc 1 120 9 view .LVU62
 237              		.loc 1 120 17 is_stmt 0 view .LVU63
 238 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 239              		.loc 1 120 9 view .LVU64
 240 0002 13B1     		cbz	r3, .L17
 241 0004 032B     		cmp	r3, #3
 242 0006 04D0     		beq	.L18
 243 0008 7047     		bx	lr
 244              	.L17:
 121:VoiceEnvelope.h ****             case ENV_IDLE:
 245              		.loc 1 121 13 is_stmt 1 view .LVU65
 122:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 246              		.loc 1 122 17 view .LVU66
 247              		.loc 1 122 31 is_stmt 0 view .LVU67
 248 000a 0122     		movs	r2, #1
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 8


 123:VoiceEnvelope.h ****                 phase = 0;
 249              		.loc 1 123 23 view .LVU68
 250 000c C363     		str	r3, [r0, #60]
 122:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 251              		.loc 1 122 31 view .LVU69
 252 000e 0270     		strb	r2, [r0]
 253              		.loc 1 123 17 is_stmt 1 view .LVU70
 124:VoiceEnvelope.h ****                 break;
 254              		.loc 1 124 17 view .LVU71
 255 0010 7047     		bx	lr
 256              	.L18:
 257              	.LVL9:
 258              	.LBB153:
 259              	.LBI153:
 119:VoiceEnvelope.h ****         switch (current_state) {
 260              		.loc 1 119 10 view .LVU72
 261              	.LBB154:
 125:VoiceEnvelope.h ****             case ENV_DECAY:
 262              		.loc 1 125 13 view .LVU73
 126:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 263              		.loc 1 126 17 view .LVU74
 264              	.LBB155:
 265              	.LBB156:
 127:VoiceEnvelope.h ****                 phase = CalculateAttackPhase(current_value);
 128:VoiceEnvelope.h ****                 break;
 129:VoiceEnvelope.h ****             default:
 130:VoiceEnvelope.h ****                 break;
 131:VoiceEnvelope.h ****         }
 132:VoiceEnvelope.h ****     }
 133:VoiceEnvelope.h **** 
 134:VoiceEnvelope.h ****     void Release() {
 135:VoiceEnvelope.h ****         switch (current_state) {
 136:VoiceEnvelope.h ****             case ENV_ATTACK:
 137:VoiceEnvelope.h ****                 // Preserve the attack curve character when transitioning to release
 138:VoiceEnvelope.h ****                 // This decouples release time from affecting attack punchiness
 139:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(static_cast<float>(phase) * attack_coeffic
 140:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 141:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 142:VoiceEnvelope.h ****                 break;
 143:VoiceEnvelope.h ****             case ENV_SUSTAIN:
 144:VoiceEnvelope.h ****                 phase = 0;
 145:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 146:VoiceEnvelope.h ****                 break;
 147:VoiceEnvelope.h ****             default:
 148:VoiceEnvelope.h ****                 break;
 149:VoiceEnvelope.h ****         }
 150:VoiceEnvelope.h ****     }
 151:VoiceEnvelope.h **** 
 152:VoiceEnvelope.h ****     float Process() {
 153:VoiceEnvelope.h ****         float ph;
 154:VoiceEnvelope.h ****         switch (current_state) {
 155:VoiceEnvelope.h ****             case ENV_IDLE:
 156:VoiceEnvelope.h ****                 current_value = 0.0f;
 157:VoiceEnvelope.h ****                 break;
 158:VoiceEnvelope.h **** 
 159:VoiceEnvelope.h ****             case ENV_ATTACK:
 160:VoiceEnvelope.h ****                 ph = static_cast<float>(phase) * attack_coefficient;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 9


 161:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 162:VoiceEnvelope.h ****                 if (phase >= attack_time) {
 163:VoiceEnvelope.h ****                     current_state = (mode == MODE_AR) ? ENV_DECAY : ENV_SUSTAIN;
 164:VoiceEnvelope.h ****                     phase = 0;
 165:VoiceEnvelope.h ****                 } else {
 166:VoiceEnvelope.h ****                     phase++;
 167:VoiceEnvelope.h ****                 }
 168:VoiceEnvelope.h ****                 break;
 169:VoiceEnvelope.h **** 
 170:VoiceEnvelope.h ****             case ENV_SUSTAIN:
 171:VoiceEnvelope.h ****                 current_value = 1.0f;
 172:VoiceEnvelope.h ****                 break;
 173:VoiceEnvelope.h **** 
 174:VoiceEnvelope.h ****             case ENV_DECAY:
 175:VoiceEnvelope.h ****                 // Use current_value as starting point for decay
 176:VoiceEnvelope.h ****                 // This preserves the correct level from attack phase
 177:VoiceEnvelope.h ****                 ph = static_cast<float>(phase) * decay_coefficient;
 178:VoiceEnvelope.h ****                 if (phase == 0) {
 179:VoiceEnvelope.h ****                     // On first frame, use current value
 180:VoiceEnvelope.h ****                     decay_start_level = current_value;
 181:VoiceEnvelope.h ****                 }
 182:VoiceEnvelope.h ****                 current_value = decay_start_level * (1.0f - ph) / (1.0f + release_curve_coefficient
 183:VoiceEnvelope.h ****                 
 184:VoiceEnvelope.h ****                 if (phase >= decay_time) {
 185:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 186:VoiceEnvelope.h ****                     phase = 0;
 187:VoiceEnvelope.h ****                 } else {
 188:VoiceEnvelope.h ****                     phase++;
 189:VoiceEnvelope.h ****                 }
 190:VoiceEnvelope.h ****                 break;
 191:VoiceEnvelope.h **** 
 192:VoiceEnvelope.h ****             case ENV_RESET:
 193:VoiceEnvelope.h ****                 current_value = reset_target - static_cast<float>(phase) * reset_coefficient;
 194:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 195:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 196:VoiceEnvelope.h ****                     phase = 0;
 197:VoiceEnvelope.h ****                 } else {
 198:VoiceEnvelope.h ****                     phase++;
 199:VoiceEnvelope.h ****                 }
 200:VoiceEnvelope.h ****                 break;
 201:VoiceEnvelope.h ****         }
 202:VoiceEnvelope.h ****         return std::min(std::max(current_value, 0.0f), 1.0f);
 203:VoiceEnvelope.h ****     }
 204:VoiceEnvelope.h **** 
 205:VoiceEnvelope.h ****     void Reset() {
 206:VoiceEnvelope.h ****         if (current_state == ENV_IDLE) return;
 207:VoiceEnvelope.h ****         current_state = ENV_RESET;
 208:VoiceEnvelope.h ****         reset_target = current_value;
 209:VoiceEnvelope.h ****         phase = 0;
 210:VoiceEnvelope.h ****     }
 211:VoiceEnvelope.h **** 
 212:VoiceEnvelope.h ****     bool IsActive() const {
 213:VoiceEnvelope.h ****         return current_state != ENV_IDLE;
 214:VoiceEnvelope.h ****     }
 215:VoiceEnvelope.h **** 
 216:VoiceEnvelope.h **** private:
 217:VoiceEnvelope.h ****     float CalculateAttackAmplitude(float ph) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 10


 218:VoiceEnvelope.h ****         return ph / (1.0f + attack_curve_coefficient * (1.0f - ph));
 219:VoiceEnvelope.h ****     }
 220:VoiceEnvelope.h **** 
 221:VoiceEnvelope.h ****     float CalculateDecayAmplitude(float ph) {
 222:VoiceEnvelope.h ****         return (1.0f - ph) / (1.0f + release_curve_coefficient * ph);
 223:VoiceEnvelope.h ****     }
 224:VoiceEnvelope.h **** 
 225:VoiceEnvelope.h ****     size_t CalculateAttackPhase(float amp) {
 226:VoiceEnvelope.h ****         return static_cast<size_t>(roundf(attack_time * amp * (1.0f + attack_curve_coefficient) / (
 266              		.loc 1 226 69 is_stmt 0 view .LVU75
 267 0012 B7EE007A 		vmov.f32	s14, #1.0e+0
 268              	.LBE156:
 269              	.LBE155:
 127:VoiceEnvelope.h ****                 phase = CalculateAttackPhase(current_value);
 270              		.loc 1 127 45 view .LVU76
 271 0016 D0ED015A 		vldr.32	s11, [r0, #4]
 272              	.LBB160:
 273              	.LBB157:
 274              		.loc 1 226 71 view .LVU77
 275 001a 90ED026A 		vldr.32	s12, [r0, #8]
 276              	.LBE157:
 277              	.LBE160:
 126:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 278              		.loc 1 126 31 view .LVU78
 279 001e 0123     		movs	r3, #1
 280              	.LBB161:
 281              	.LBB158:
 282              		.loc 1 226 55 view .LVU79
 283 0020 D0ED0D7A 		vldr.32	s15, [r0, #52]	@ int
 284              		.loc 1 226 69 view .LVU80
 285 0024 76EE076A 		vadd.f32	s13, s12, s14
 286              	.LBE158:
 287              	.LBE161:
 126:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 288              		.loc 1 126 31 view .LVU81
 289 0028 0370     		strb	r3, [r0]
 127:VoiceEnvelope.h ****                 phase = CalculateAttackPhase(current_value);
 290              		.loc 1 127 17 is_stmt 1 view .LVU82
 291              	.LVL10:
 292              	.LBB162:
 293              	.LBI155:
 225:VoiceEnvelope.h ****         return static_cast<size_t>(roundf(attack_time * amp * (1.0f + attack_curve_coefficient) / (
 294              		.loc 1 225 12 view .LVU83
 295              	.LBB159:
 296              		.loc 1 226 9 view .LVU84
 297              		.loc 1 226 105 is_stmt 0 view .LVU85
 298 002a A5EE867A 		vfma.f32	s14, s11, s12
 299              		.loc 1 226 55 view .LVU86
 300 002e F8EE677A 		vcvt.f32.u32	s15, s15
 301 0032 67EEA57A 		vmul.f32	s15, s15, s11
 302              		.loc 1 226 61 view .LVU87
 303 0036 67EEA67A 		vmul.f32	s15, s15, s13
 304              		.loc 1 226 105 view .LVU88
 305 003a F0EE476A 		vmov.f32	s13, s14
 306              		.loc 1 226 42 view .LVU89
 307 003e 87EEA67A 		vdiv.f32	s14, s15, s13
 308 0042 F8FE477A 		vrinta.f32	s15, s14
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 11


 309              	.LVL11:
 310              		.loc 1 226 139 view .LVU90
 311 0046 FCEEE77A 		vcvt.u32.f32	s15, s15
 312 004a C0ED0F7A 		vstr.32	s15, [r0, #60]	@ int
 313              	.LBE159:
 314              	.LBE162:
 128:VoiceEnvelope.h ****             default:
 315              		.loc 1 128 17 is_stmt 1 view .LVU91
 316              	.LVL12:
 128:VoiceEnvelope.h ****             default:
 317              		.loc 1 128 17 is_stmt 0 view .LVU92
 318              	.LBE154:
 319              	.LBE153:
 132:VoiceEnvelope.h **** 
 320              		.loc 1 132 5 view .LVU93
 321 004e 7047     		bx	lr
 322              		.cfi_endproc
 323              	.LFE5040:
 325              		.section	.text._ZN13VoiceEnvelope7ReleaseEv,"axG",%progbits,_ZN13VoiceEnvelope7ReleaseEv,comdat
 326              		.align	1
 327              		.weak	_ZN13VoiceEnvelope7ReleaseEv
 328              		.syntax unified
 329              		.thumb
 330              		.thumb_func
 332              	_ZN13VoiceEnvelope7ReleaseEv:
 333              	.LVL13:
 334              	.LFB5041:
 134:VoiceEnvelope.h ****         switch (current_state) {
 335              		.loc 1 134 10 is_stmt 1 view -0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339              		@ link register save eliminated.
 135:VoiceEnvelope.h ****             case ENV_ATTACK:
 340              		.loc 1 135 9 view .LVU95
 135:VoiceEnvelope.h ****             case ENV_ATTACK:
 341              		.loc 1 135 17 is_stmt 0 view .LVU96
 342 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 135:VoiceEnvelope.h ****             case ENV_ATTACK:
 343              		.loc 1 135 9 view .LVU97
 344 0002 012B     		cmp	r3, #1
 345 0004 02D0     		beq	.L21
 346 0006 022B     		cmp	r3, #2
 347 0008 14D0     		beq	.L22
 348 000a 7047     		bx	lr
 349              	.L21:
 350              	.LVL14:
 351              	.LBB167:
 352              	.LBI167:
 134:VoiceEnvelope.h ****         switch (current_state) {
 353              		.loc 1 134 10 is_stmt 1 view .LVU98
 354              	.LBB168:
 136:VoiceEnvelope.h ****                 // Preserve the attack curve character when transitioning to release
 355              		.loc 1 136 13 view .LVU99
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 356              		.loc 1 139 17 view .LVU100
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 12


 357              		.loc 1 139 58 is_stmt 0 view .LVU101
 358 000c D0ED0F7A 		vldr.32	s15, [r0, #60]	@ int
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 359              		.loc 1 139 57 view .LVU102
 360 0010 90ED0B7A 		vldr.32	s14, [r0, #44]
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 361              		.loc 1 139 58 view .LVU103
 362 0014 F8EE677A 		vcvt.f32.u32	s15, s15
 363              	.LBB169:
 364              	.LBB170:
 218:VoiceEnvelope.h ****     }
 365              		.loc 1 218 27 view .LVU104
 366 0018 90ED026A 		vldr.32	s12, [r0, #8]
 367              	.LBE170:
 368              	.LBE169:
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 369              		.loc 1 139 57 view .LVU105
 370 001c 67EE877A 		vmul.f32	s15, s15, s14
 371              	.LVL15:
 372              	.LBB172:
 373              	.LBI169:
 217:VoiceEnvelope.h ****         return ph / (1.0f + attack_curve_coefficient * (1.0f - ph));
 374              		.loc 1 217 11 is_stmt 1 view .LVU106
 375              	.LBB171:
 218:VoiceEnvelope.h ****     }
 376              		.loc 1 218 9 view .LVU107
 218:VoiceEnvelope.h ****     }
 377              		.loc 1 218 62 is_stmt 0 view .LVU108
 378 0020 B7EE007A 		vmov.f32	s14, #1.0e+0
 379 0024 77EE676A 		vsub.f32	s13, s14, s15
 218:VoiceEnvelope.h ****     }
 380              		.loc 1 218 27 view .LVU109
 381 0028 A6EE267A 		vfma.f32	s14, s12, s13
 382              	.LVL16:
 218:VoiceEnvelope.h ****     }
 383              		.loc 1 218 67 view .LVU110
 384 002c C7EE876A 		vdiv.f32	s13, s15, s14
 385              	.LBE171:
 386              	.LBE172:
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 387              		.loc 1 139 31 view .LVU111
 388 0030 C0ED016A 		vstr.32	s13, [r0, #4]
 140:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 389              		.loc 1 140 17 is_stmt 1 view .LVU112
 390              	.LVL17:
 391              	.L22:
 140:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 392              		.loc 1 140 17 is_stmt 0 view .LVU113
 393              	.LBE168:
 394              	.LBE167:
 143:VoiceEnvelope.h ****                 phase = 0;
 395              		.loc 1 143 13 is_stmt 1 view .LVU114
 144:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 396              		.loc 1 144 17 view .LVU115
 144:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 397              		.loc 1 144 23 is_stmt 0 view .LVU116
 398 0034 0023     		movs	r3, #0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 13


 399 0036 C363     		str	r3, [r0, #60]
 145:VoiceEnvelope.h ****                 break;
 400              		.loc 1 145 17 is_stmt 1 view .LVU117
 145:VoiceEnvelope.h ****                 break;
 401              		.loc 1 145 31 is_stmt 0 view .LVU118
 402 0038 0323     		movs	r3, #3
 403 003a 0370     		strb	r3, [r0]
 146:VoiceEnvelope.h ****             default:
 404              		.loc 1 146 17 is_stmt 1 view .LVU119
 150:VoiceEnvelope.h **** 
 405              		.loc 1 150 5 is_stmt 0 view .LVU120
 406 003c 7047     		bx	lr
 407              		.cfi_endproc
 408              	.LFE5041:
 410              		.section	.text._ZN13VoiceEnvelope7ProcessEv,"axG",%progbits,_ZN13VoiceEnvelope7ProcessEv,comdat
 411              		.align	1
 412              		.weak	_ZN13VoiceEnvelope7ProcessEv
 413              		.syntax unified
 414              		.thumb
 415              		.thumb_func
 417              	_ZN13VoiceEnvelope7ProcessEv:
 418              	.LVL18:
 419              	.LFB5042:
 152:VoiceEnvelope.h ****         float ph;
 420              		.loc 1 152 11 is_stmt 1 view -0
 421              		.cfi_startproc
 422              		@ args = 0, pretend = 0, frame = 8
 423              		@ frame_needed = 0, uses_anonymous_args = 0
 424              		@ link register save eliminated.
 153:VoiceEnvelope.h ****         switch (current_state) {
 425              		.loc 1 153 9 view .LVU122
 154:VoiceEnvelope.h ****             case ENV_IDLE:
 426              		.loc 1 154 9 view .LVU123
 427 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 428 0002 F7EE007A 		vmov.f32	s15, #1.0e+0
 152:VoiceEnvelope.h ****         float ph;
 429              		.loc 1 152 11 is_stmt 0 view .LVU124
 430 0006 82B0     		sub	sp, sp, #8
 431              		.cfi_def_cfa_offset 8
 432 0008 0022     		movs	r2, #0
 154:VoiceEnvelope.h ****             case ENV_IDLE:
 433              		.loc 1 154 9 view .LVU125
 434 000a 042B     		cmp	r3, #4
 435 000c 05D8     		bhi	.L25
 436 000e DFE803F0 		tbb	[pc, r3]
 437              	.L27:
 438 0012 03       		.byte	(.L31-.L27)/2
 439 0013 1C       		.byte	(.L30-.L27)/2
 440 0014 3D       		.byte	(.L29-.L27)/2
 441 0015 40       		.byte	(.L28-.L27)/2
 442 0016 62       		.byte	(.L26-.L27)/2
 443 0017 00       		.p2align 1
 444              	.L31:
 155:VoiceEnvelope.h ****                 current_value = 0.0f;
 445              		.loc 1 155 13 is_stmt 1 view .LVU126
 156:VoiceEnvelope.h ****                 break;
 446              		.loc 1 156 17 view .LVU127
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 14


 156:VoiceEnvelope.h ****                 break;
 447              		.loc 1 156 31 is_stmt 0 view .LVU128
 448 0018 4260     		str	r2, [r0, #4]	@ float
 157:VoiceEnvelope.h **** 
 449              		.loc 1 157 17 is_stmt 1 view .LVU129
 450              	.L25:
 202:VoiceEnvelope.h ****     }
 451              		.loc 1 202 9 view .LVU130
 452              	.LBB179:
 453              	.LBB180:
 454              		.file 2 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h"
   1:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
   3:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** //
   5:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // any later version.
  10:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  11:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  16:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  20:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  25:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** /*
  26:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  27:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  30:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  38:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  39:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  42:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 15


  47:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  */
  50:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  51:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  */
  55:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  56:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  59:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  73:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** # include <type_traits>
  74:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  75:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus > 201703L
  76:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** # include <compare>
  77:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  78:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  79:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** {
  81:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  83:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /*
  84:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    * A constexpr wrapper for __builtin_memcmp.
  85:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    * @param __num The number of elements of type _Tp (not bytes).
  86:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    */
  87:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Up>
  88:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
  89:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline int
  90:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
  91:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
  92:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  93:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
  94:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  95:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
  96:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
  97:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
  98:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  for(; __num > 0; ++__first1, ++__first2, --__num)
  99:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    if (*__first1 != *__first2)
 100:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      return *__first1 < *__first2 ? -1 : 1;
 101:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return 0;
 102:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 103:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       else
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 16


 104:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 105:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 106:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 107:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 108:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 109:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
 110:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
 111:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
 112:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _BoolType>
 113:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap
 114:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 115:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 116:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static void
 117:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 119:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    _ValueType1;
 121:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
 122:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  *__a = *__b;
 123:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  *__b = __tmp;
 124:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 125:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 126:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 127:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<>
 128:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap<true>
 129:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 130:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 131:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static void
 132:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 133:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 134:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  swap(*__a, *__b);
 135:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 136:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 137:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif // C++03
 138:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 139:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 140:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 141:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 142:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 143:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 144:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   Nothing.
 145:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 146:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 147:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  iterators themselves.
 148:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 149:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 150:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 151:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline void
 152:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 153:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 154:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 155:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 156:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 157:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 158:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 159:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 160:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 17


 161:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 162:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType1;
 163:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 164:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType2;
 165:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 166:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 167:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType2>)
 168:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 169:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType1>)
 170:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 171:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 172:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType1;
 173:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 174:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType2;
 175:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 176:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 177:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 178:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 179:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #else
 180:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 181:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // 187. iter_swap underspecified
 182:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       swap(*__a, *__b);
 183:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 184:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 185:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 186:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 187:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 188:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 189:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 190:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 191:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 192:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 193:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 194:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 195:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 196:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  The ranges must not overlap.
 197:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 198:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 199:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 200:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _ForwardIterator2
 201:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 202:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 203:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 204:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 205:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 206:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 207:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 208:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 209:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 210:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 211:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 212:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 213:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __first2;
 214:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 215:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 216:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 217:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 18


 218:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 219:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 220:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 221:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 222:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 223:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 224:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 225:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 226:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 227:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 228:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 229:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 230:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 231:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 232:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 233:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 234:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 235:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (__b < __a)
 236:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 237:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 238:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 239:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 240:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 241:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 242:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 243:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 244:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 245:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 246:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 247:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 248:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 249:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 250:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 251:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 252:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 253:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 254:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 255:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 256:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 257:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 258:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 259:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (__a < __b)
 455              		.loc 2 259 7 is_stmt 0 view .LVU131
 456 001a 90ED017A 		vldr.32	s14, [r0, #4]
 457              	.LBE180:
 458              	.LBE179:
 202:VoiceEnvelope.h ****     }
 459              		.loc 1 202 49 view .LVU132
 460 001e 0092     		str	r2, [sp]	@ float
 461              	.LVL19:
 462              	.LBB184:
 463              	.LBI179:
 254:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 464              		.loc 2 254 5 is_stmt 1 view .LVU133
 465              	.LBB181:
 466              		.loc 2 259 7 is_stmt 0 view .LVU134
 467 0020 B5EEC07A 		vcmpe.f32	s14, #0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 19


 468              	.LBE181:
 469              	.LBE184:
 202:VoiceEnvelope.h ****     }
 470              		.loc 1 202 56 view .LVU135
 471 0024 CDED017A 		vstr.32	s15, [sp, #4]
 472              	.LBB185:
 473              	.LBB182:
 474              		.loc 2 259 7 view .LVU136
 475 0028 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 476              	.LBE182:
 477              	.LBE185:
 202:VoiceEnvelope.h ****     }
 478              		.loc 1 202 34 view .LVU137
 479 002c 54BF     		ite	pl
 480 002e 0430     		addpl	r0, r0, #4
 481              	.LVL20:
 482              	.LBB186:
 483              	.LBB183:
 260:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 484              		.loc 2 260 9 view .LVU138
 485 0030 6846     		movmi	r0, sp
 486              	.LVL21:
 487              		.loc 2 260 9 view .LVU139
 488              	.LBE183:
 489              	.LBE186:
 490              	.LBB187:
 491              	.LBI187:
 230:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 492              		.loc 2 230 5 is_stmt 1 view .LVU140
 493              	.LBB188:
 235:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 494              		.loc 2 235 7 is_stmt 0 view .LVU141
 495 0032 90ED007A 		vldr.32	s14, [r0]
 496 0036 B4EEE77A 		vcmpe.f32	s14, s15
 497 003a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 236:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 498              		.loc 2 236 9 view .LVU142
 499 003e C8BF     		it	gt
 500 0040 01A8     		addgt	r0, sp, #4
 501              	.LVL22:
 236:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 502              		.loc 2 236 9 view .LVU143
 503              	.LBE188:
 504              	.LBE187:
 203:VoiceEnvelope.h **** 
 505              		.loc 1 203 5 view .LVU144
 506 0042 90ED000A 		vldr.32	s0, [r0]
 507 0046 02B0     		add	sp, sp, #8
 508              		.cfi_remember_state
 509              		.cfi_def_cfa_offset 0
 510              		@ sp needed
 511 0048 7047     		bx	lr
 512              	.LVL23:
 513              	.L30:
 514              		.cfi_restore_state
 159:VoiceEnvelope.h ****                 ph = static_cast<float>(phase) * attack_coefficient;
 515              		.loc 1 159 13 is_stmt 1 view .LVU145
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 20


 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 516              		.loc 1 160 17 view .LVU146
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 517              		.loc 1 160 41 is_stmt 0 view .LVU147
 518 004a C36B     		ldr	r3, [r0, #60]
 519              	.LBB189:
 520              	.LBB190:
 218:VoiceEnvelope.h ****     }
 521              		.loc 1 218 27 view .LVU148
 522 004c B0EE676A 		vmov.f32	s12, s15
 523              	.LBE190:
 524              	.LBE189:
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 525              		.loc 1 160 20 view .LVU149
 526 0050 D0ED0B6A 		vldr.32	s13, [r0, #44]
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 527              		.loc 1 160 22 view .LVU150
 528 0054 07EE103A 		vmov	s14, r3	@ int
 529              	.LBB193:
 530              	.LBB191:
 218:VoiceEnvelope.h ****     }
 531              		.loc 1 218 27 view .LVU151
 532 0058 D0ED025A 		vldr.32	s11, [r0, #8]
 533              	.LBE191:
 534              	.LBE193:
 162:VoiceEnvelope.h ****                     current_state = (mode == MODE_AR) ? ENV_DECAY : ENV_SUSTAIN;
 535              		.loc 1 162 17 view .LVU152
 536 005c 416B     		ldr	r1, [r0, #52]
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 537              		.loc 1 160 22 view .LVU153
 538 005e B8EE477A 		vcvt.f32.u32	s14, s14
 162:VoiceEnvelope.h ****                     current_state = (mode == MODE_AR) ? ENV_DECAY : ENV_SUSTAIN;
 539              		.loc 1 162 17 view .LVU154
 540 0062 8B42     		cmp	r3, r1
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 541              		.loc 1 160 20 view .LVU155
 542 0064 27EE267A 		vmul.f32	s14, s14, s13
 543              	.LVL24:
 161:VoiceEnvelope.h ****                 if (phase >= attack_time) {
 544              		.loc 1 161 17 is_stmt 1 view .LVU156
 545              	.LBB194:
 546              	.LBI189:
 217:VoiceEnvelope.h ****         return ph / (1.0f + attack_curve_coefficient * (1.0f - ph));
 547              		.loc 1 217 11 view .LVU157
 548              	.LBB192:
 218:VoiceEnvelope.h ****     }
 549              		.loc 1 218 9 view .LVU158
 218:VoiceEnvelope.h ****     }
 550              		.loc 1 218 62 is_stmt 0 view .LVU159
 551 0068 77EEC76A 		vsub.f32	s13, s15, s14
 218:VoiceEnvelope.h ****     }
 552              		.loc 1 218 27 view .LVU160
 553 006c A5EEA66A 		vfma.f32	s12, s11, s13
 554              	.LVL25:
 218:VoiceEnvelope.h ****     }
 555              		.loc 1 218 67 view .LVU161
 556 0070 C7EE066A 		vdiv.f32	s13, s14, s12
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 21


 557              	.LBE192:
 558              	.LBE194:
 161:VoiceEnvelope.h ****                 if (phase >= attack_time) {
 559              		.loc 1 161 31 view .LVU162
 560 0074 C0ED016A 		vstr.32	s13, [r0, #4]
 162:VoiceEnvelope.h ****                     current_state = (mode == MODE_AR) ? ENV_DECAY : ENV_SUSTAIN;
 561              		.loc 1 162 17 is_stmt 1 view .LVU163
 562 0078 41D3     		bcc	.L44
 163:VoiceEnvelope.h ****                     phase = 0;
 563              		.loc 1 163 21 view .LVU164
 163:VoiceEnvelope.h ****                     phase = 0;
 564              		.loc 1 163 55 is_stmt 0 view .LVU165
 565 007a 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 566 007c 002B     		cmp	r3, #0
 567 007e 0CBF     		ite	eq
 568 0080 0323     		moveq	r3, #3
 569 0082 0223     		movne	r3, #2
 163:VoiceEnvelope.h ****                     phase = 0;
 570              		.loc 1 163 35 view .LVU166
 571 0084 0370     		strb	r3, [r0]
 164:VoiceEnvelope.h ****                 } else {
 572              		.loc 1 164 21 is_stmt 1 view .LVU167
 164:VoiceEnvelope.h ****                 } else {
 573              		.loc 1 164 27 is_stmt 0 view .LVU168
 574 0086 0023     		movs	r3, #0
 575              	.LVL26:
 576              	.L43:
 198:VoiceEnvelope.h ****                 }
 577              		.loc 1 198 26 view .LVU169
 578 0088 C363     		str	r3, [r0, #60]
 579 008a C6E7     		b	.L25
 580              	.L29:
 170:VoiceEnvelope.h ****                 current_value = 1.0f;
 581              		.loc 1 170 13 is_stmt 1 view .LVU170
 171:VoiceEnvelope.h ****                 break;
 582              		.loc 1 171 17 view .LVU171
 171:VoiceEnvelope.h ****                 break;
 583              		.loc 1 171 31 is_stmt 0 view .LVU172
 584 008c C0ED017A 		vstr.32	s15, [r0, #4]
 172:VoiceEnvelope.h **** 
 585              		.loc 1 172 17 is_stmt 1 view .LVU173
 586 0090 C3E7     		b	.L25
 587              	.L28:
 174:VoiceEnvelope.h ****                 // Use current_value as starting point for decay
 588              		.loc 1 174 13 view .LVU174
 177:VoiceEnvelope.h ****                 if (phase == 0) {
 589              		.loc 1 177 17 view .LVU175
 177:VoiceEnvelope.h ****                 if (phase == 0) {
 590              		.loc 1 177 41 is_stmt 0 view .LVU176
 591 0092 C36B     		ldr	r3, [r0, #60]
 177:VoiceEnvelope.h ****                 if (phase == 0) {
 592              		.loc 1 177 20 view .LVU177
 593 0094 D0ED0C6A 		vldr.32	s13, [r0, #48]
 177:VoiceEnvelope.h ****                 if (phase == 0) {
 594              		.loc 1 177 22 view .LVU178
 595 0098 07EE103A 		vmov	s14, r3	@ int
 596 009c B8EE477A 		vcvt.f32.u32	s14, s14
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 22


 177:VoiceEnvelope.h ****                 if (phase == 0) {
 597              		.loc 1 177 20 view .LVU179
 598 00a0 27EE267A 		vmul.f32	s14, s14, s13
 599              	.LVL27:
 178:VoiceEnvelope.h ****                     // On first frame, use current value
 600              		.loc 1 178 17 is_stmt 1 view .LVU180
 601 00a4 0BB9     		cbnz	r3, .L34
 180:VoiceEnvelope.h ****                 }
 602              		.loc 1 180 21 view .LVU181
 180:VoiceEnvelope.h ****                 }
 603              		.loc 1 180 39 is_stmt 0 view .LVU182
 604 00a6 4168     		ldr	r1, [r0, #4]	@ float
 605 00a8 0164     		str	r1, [r0, #64]	@ float
 606              	.L34:
 182:VoiceEnvelope.h ****                 
 607              		.loc 1 182 17 is_stmt 1 view .LVU183
 182:VoiceEnvelope.h ****                 
 608              		.loc 1 182 59 is_stmt 0 view .LVU184
 609 00aa 77EEC76A 		vsub.f32	s13, s15, s14
 182:VoiceEnvelope.h ****                 
 610              		.loc 1 182 51 view .LVU185
 611 00ae 90ED106A 		vldr.32	s12, [r0, #64]
 182:VoiceEnvelope.h ****                 
 612              		.loc 1 182 73 view .LVU186
 613 00b2 D0ED035A 		vldr.32	s11, [r0, #12]
 184:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 614              		.loc 1 184 17 view .LVU187
 615 00b6 816B     		ldr	r1, [r0, #56]
 182:VoiceEnvelope.h ****                 
 616              		.loc 1 182 51 view .LVU188
 617 00b8 66EE866A 		vmul.f32	s13, s13, s12
 182:VoiceEnvelope.h ****                 
 618              		.loc 1 182 73 view .LVU189
 619 00bc B0EE676A 		vmov.f32	s12, s15
 184:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 620              		.loc 1 184 17 view .LVU190
 621 00c0 8B42     		cmp	r3, r1
 182:VoiceEnvelope.h ****                 
 622              		.loc 1 182 73 view .LVU191
 623 00c2 A5EE876A 		vfma.f32	s12, s11, s14
 182:VoiceEnvelope.h ****                 
 624              		.loc 1 182 65 view .LVU192
 625 00c6 86EE867A 		vdiv.f32	s14, s13, s12
 626              	.LVL28:
 182:VoiceEnvelope.h ****                 
 627              		.loc 1 182 31 view .LVU193
 628 00ca 80ED017A 		vstr.32	s14, [r0, #4]
 184:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 629              		.loc 1 184 17 is_stmt 1 view .LVU194
 630 00ce 16D3     		bcc	.L44
 631              	.LVL29:
 632              	.L36:
 185:VoiceEnvelope.h ****                     phase = 0;
 633              		.loc 1 185 21 view .LVU195
 185:VoiceEnvelope.h ****                     phase = 0;
 634              		.loc 1 185 35 is_stmt 0 view .LVU196
 635 00d0 0023     		movs	r3, #0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 23


 636 00d2 0370     		strb	r3, [r0]
 186:VoiceEnvelope.h ****                 } else {
 637              		.loc 1 186 21 is_stmt 1 view .LVU197
 638 00d4 D8E7     		b	.L43
 639              	.L26:
 192:VoiceEnvelope.h ****                 current_value = reset_target - static_cast<float>(phase) * reset_coefficient;
 640              		.loc 1 192 13 view .LVU198
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 641              		.loc 1 193 17 view .LVU199
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 642              		.loc 1 193 67 is_stmt 0 view .LVU200
 643 00d6 C36B     		ldr	r3, [r0, #60]
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 644              		.loc 1 193 46 view .LVU201
 645 00d8 90ED096A 		vldr.32	s12, [r0, #36]
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 646              		.loc 1 193 48 view .LVU202
 647 00dc 07EE103A 		vmov	s14, r3	@ int
 648 00e0 F8EE476A 		vcvt.f32.u32	s13, s14
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 649              		.loc 1 193 46 view .LVU203
 650 00e4 90ED0A7A 		vldr.32	s14, [r0, #40]
 651 00e8 A6EEC67A 		vfms.f32	s14, s13, s12
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 652              		.loc 1 193 31 view .LVU204
 653 00ec 80ED017A 		vstr.32	s14, [r0, #4]
 194:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 654              		.loc 1 194 17 is_stmt 1 view .LVU205
 655 00f0 90ED087A 		vldr.32	s14, [r0, #32]
 656 00f4 F4EEC76A 		vcmpe.f32	s13, s14
 657 00f8 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 658 00fc E8DA     		bge	.L36
 659              	.L44:
 198:VoiceEnvelope.h ****                 }
 660              		.loc 1 198 21 view .LVU206
 198:VoiceEnvelope.h ****                 }
 661              		.loc 1 198 26 is_stmt 0 view .LVU207
 662 00fe 0133     		adds	r3, r3, #1
 663 0100 C2E7     		b	.L43
 664              		.cfi_endproc
 665              	.LFE5042:
 667              		.section	.text._ZN13VoiceEnvelope5ResetEv,"axG",%progbits,_ZN13VoiceEnvelope5ResetEv,comdat
 668              		.align	1
 669              		.weak	_ZN13VoiceEnvelope5ResetEv
 670              		.syntax unified
 671              		.thumb
 672              		.thumb_func
 674              	_ZN13VoiceEnvelope5ResetEv:
 675              	.LVL30:
 676              	.LFB5043:
 205:VoiceEnvelope.h ****         if (current_state == ENV_IDLE) return;
 677              		.loc 1 205 10 is_stmt 1 view -0
 678              		.cfi_startproc
 679              		@ args = 0, pretend = 0, frame = 0
 680              		@ frame_needed = 0, uses_anonymous_args = 0
 681              		@ link register save eliminated.
 206:VoiceEnvelope.h ****         current_state = ENV_RESET;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 24


 682              		.loc 1 206 9 view .LVU209
 683 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 684 0002 2BB1     		cbz	r3, .L45
 685              	.LVL31:
 686              	.LBB197:
 687              	.LBI197:
 205:VoiceEnvelope.h ****         if (current_state == ENV_IDLE) return;
 688              		.loc 1 205 10 view .LVU210
 689              	.LBB198:
 207:VoiceEnvelope.h ****         reset_target = current_value;
 690              		.loc 1 207 9 view .LVU211
 207:VoiceEnvelope.h ****         reset_target = current_value;
 691              		.loc 1 207 23 is_stmt 0 view .LVU212
 692 0004 0423     		movs	r3, #4
 693 0006 0370     		strb	r3, [r0]
 208:VoiceEnvelope.h ****         phase = 0;
 694              		.loc 1 208 9 is_stmt 1 view .LVU213
 208:VoiceEnvelope.h ****         phase = 0;
 695              		.loc 1 208 22 is_stmt 0 view .LVU214
 696 0008 4368     		ldr	r3, [r0, #4]	@ float
 697 000a 8362     		str	r3, [r0, #40]	@ float
 209:VoiceEnvelope.h ****     }
 698              		.loc 1 209 9 is_stmt 1 view .LVU215
 209:VoiceEnvelope.h ****     }
 699              		.loc 1 209 15 is_stmt 0 view .LVU216
 700 000c 0023     		movs	r3, #0
 701 000e C363     		str	r3, [r0, #60]
 702              	.LVL32:
 703              	.L45:
 209:VoiceEnvelope.h ****     }
 704              		.loc 1 209 15 view .LVU217
 705              	.LBE198:
 706              	.LBE197:
 210:VoiceEnvelope.h **** 
 707              		.loc 1 210 5 view .LVU218
 708 0010 7047     		bx	lr
 709              		.cfi_endproc
 710              	.LFE5043:
 712              		.section	.text._Z13ProcessVoicesv,"ax",%progbits
 713              		.align	1
 714              		.global	_Z13ProcessVoicesv
 715              		.syntax unified
 716              		.thumb
 717              		.thumb_func
 719              	_Z13ProcessVoicesv:
 720              	.LFB5343:
 721              		.file 3 "AudioProcessor.cpp"
   1:AudioProcessor.cpp **** #include "Thaumazein.h"
   2:AudioProcessor.cpp **** #include "mpr121_daisy.h"
   3:AudioProcessor.cpp **** #include <cmath>
   4:AudioProcessor.cpp **** #include <algorithm>
   5:AudioProcessor.cpp **** 
   6:AudioProcessor.cpp **** const float MASTER_VOLUME = 0.7f; // Master output level scaler
   7:AudioProcessor.cpp **** 
   8:AudioProcessor.cpp **** void ProcessControls();
   9:AudioProcessor.cpp **** void ReadKnobValues();
  10:AudioProcessor.cpp **** int  DetermineEngineSettings();
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 25


  11:AudioProcessor.cpp **** void HandleTouchInput(int engineIndex, bool poly_mode, int effective_num_voices);
  12:AudioProcessor.cpp **** void ConfigureDelaySettings();
  13:AudioProcessor.cpp **** void PrepareVoiceParameters(int engineIndex, bool poly_mode, int max_voice_idx, bool arp_on);
  14:AudioProcessor.cpp **** void ProcessVoiceEnvelopes(bool poly_mode);
  15:AudioProcessor.cpp **** void ProcessAudioOutput(AudioHandle::InterleavingOutputBuffer out, size_t size, float dry_level);
  16:AudioProcessor.cpp **** void UpdatePerformanceMonitors(size_t size, AudioHandle::InterleavingOutputBuffer out);
  17:AudioProcessor.cpp **** void ResetVoiceStates();
  18:AudioProcessor.cpp **** 
  19:AudioProcessor.cpp **** // Global variables for data sharing between decomposed functions
  20:AudioProcessor.cpp **** float pitch_val, harm_knob_val, timbre_knob_val, morph_knob_val;
  21:AudioProcessor.cpp **** float delay_time_val, delay_mix_feedback_val, delay_mix_val, delay_feedback_val;
  22:AudioProcessor.cpp **** float env_attack_val, env_release_val;
  23:AudioProcessor.cpp **** float attack_time, release_time;
  24:AudioProcessor.cpp **** float mix_buffer_out[BLOCK_SIZE];
  25:AudioProcessor.cpp **** float mix_buffer_aux[BLOCK_SIZE];
  26:AudioProcessor.cpp **** 
  27:AudioProcessor.cpp **** extern VoiceEnvelope voice_envelopes[NUM_VOICES];
  28:AudioProcessor.cpp **** extern float voice_values[NUM_VOICES];
  29:AudioProcessor.cpp **** extern bool voice_active[NUM_VOICES];
  30:AudioProcessor.cpp **** extern Mpr121 touch_sensor;
  31:AudioProcessor.cpp **** extern AnalogControl env_attack_knob;
  32:AudioProcessor.cpp **** 
  33:AudioProcessor.cpp **** // Define the CpuLoadMeter instance
  34:AudioProcessor.cpp **** CpuLoadMeter cpu_meter;
  35:AudioProcessor.cpp **** 
  36:AudioProcessor.cpp **** volatile int current_engine_index = 0; // Global engine index controlled by touch pads
  37:AudioProcessor.cpp **** 
  38:AudioProcessor.cpp **** volatile float adc_raw_values[12] = {0.0f}; // Initialize the array for 12 ADCs
  39:AudioProcessor.cpp **** // ADD: flag to indicate engine change so we can retrigger voices even when notes are held
  40:AudioProcessor.cpp **** volatile bool engine_changed_flag = false;
  41:AudioProcessor.cpp **** // 0 = inactive, 2 = send trigger low this block, 1 = send trigger high next block
  42:AudioProcessor.cpp **** volatile int engine_retrigger_phase = 0;
  43:AudioProcessor.cpp **** 
  44:AudioProcessor.cpp **** void ProcessVoices() {
 722              		.loc 3 44 22 is_stmt 1 view -0
 723              		.cfi_startproc
 724              		@ args = 0, pretend = 0, frame = 0
 725              		@ frame_needed = 0, uses_anonymous_args = 0
  45:AudioProcessor.cpp ****     // Apply cubic response for better control at short settings
  46:AudioProcessor.cpp ****     // For punchier attack, use a stronger non-linear curve at lower attack values
  47:AudioProcessor.cpp ****     float attack_raw = env_attack_val;
 726              		.loc 3 47 5 view .LVU220
  44:AudioProcessor.cpp ****     // Apply cubic response for better control at short settings
 727              		.loc 3 44 22 is_stmt 0 view .LVU221
 728 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 729              		.cfi_def_cfa_offset 24
 730              		.cfi_offset 3, -24
 731              		.cfi_offset 4, -20
 732              		.cfi_offset 5, -16
 733              		.cfi_offset 6, -12
 734              		.cfi_offset 7, -8
 735              		.cfi_offset 14, -4
 736              		.loc 3 47 11 view .LVU222
 737 0002 1F4B     		ldr	r3, .L60
 738              	.LBB199:
  48:AudioProcessor.cpp ****     float attack_value;
  49:AudioProcessor.cpp ****     if (attack_raw < 0.2f) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 26


  50:AudioProcessor.cpp ****         // More exaggerated curve for very short attacks (extra punchy)
  51:AudioProcessor.cpp ****         attack_value = attack_raw * (attack_raw * 0.5f);
  52:AudioProcessor.cpp ****     } else {
  53:AudioProcessor.cpp ****         // Regular cubic response for longer attacks
  54:AudioProcessor.cpp ****         attack_value = attack_raw * attack_raw * attack_raw;
  55:AudioProcessor.cpp ****     }
  56:AudioProcessor.cpp ****     
  57:AudioProcessor.cpp ****     // Normal cubic curve for release
  58:AudioProcessor.cpp ****     float release_value = env_release_val * env_release_val * env_release_val;
  59:AudioProcessor.cpp ****     
  60:AudioProcessor.cpp ****     for(int i = 0; i < NUM_VOICES; i++) {
 739              		.loc 3 60 13 view .LVU223
 740 0004 0025     		movs	r5, #0
 741              	.LBE199:
  49:AudioProcessor.cpp ****         // More exaggerated curve for very short attacks (extra punchy)
 742              		.loc 3 49 5 view .LVU224
 743 0006 DFED1F7A 		vldr.32	s15, .L60+4
  47:AudioProcessor.cpp ****     float attack_value;
 744              		.loc 3 47 11 view .LVU225
 745 000a 93ED000A 		vldr.32	s0, [r3]
 746              	.LVL33:
  48:AudioProcessor.cpp ****     float attack_value;
 747              		.loc 3 48 5 is_stmt 1 view .LVU226
  49:AudioProcessor.cpp ****         // More exaggerated curve for very short attacks (extra punchy)
 748              		.loc 3 49 5 view .LVU227
  58:AudioProcessor.cpp ****     
 749              		.loc 3 58 43 is_stmt 0 view .LVU228
 750 000e 1E4B     		ldr	r3, .L60+8
  49:AudioProcessor.cpp ****         // More exaggerated curve for very short attacks (extra punchy)
 751              		.loc 3 49 5 view .LVU229
 752 0010 B4EEE70A 		vcmpe.f32	s0, s15
 753 0014 1D4C     		ldr	r4, .L60+12
  58:AudioProcessor.cpp ****     
 754              		.loc 3 58 43 view .LVU230
 755 0016 D3ED007A 		vldr.32	s15, [r3]
 756 001a 1D4E     		ldr	r6, .L60+16
  49:AudioProcessor.cpp ****         // More exaggerated curve for very short attacks (extra punchy)
 757              		.loc 3 49 5 view .LVU231
 758 001c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  51:AudioProcessor.cpp ****     } else {
 759              		.loc 3 51 9 is_stmt 1 view .LVU232
 760 0020 1C4F     		ldr	r7, .L60+20
  44:AudioProcessor.cpp ****     // Apply cubic response for better control at short settings
 761              		.loc 3 44 22 is_stmt 0 view .LVU233
 762 0022 2DED028B 		vpush.64	{d8}
 763              		.cfi_def_cfa_offset 32
 764              		.cfi_offset 80, -32
 765              		.cfi_offset 81, -28
  51:AudioProcessor.cpp ****     } else {
 766              		.loc 3 51 49 view .LVU234
 767 0026 4CBF     		ite	mi
 768 0028 B6EE008A 		vmovmi.f32	s16, #5.0e-1
  54:AudioProcessor.cpp ****     }
 769              		.loc 3 54 35 view .LVU235
 770 002c 20EE008A 		vmulpl.f32	s16, s0, s0
  58:AudioProcessor.cpp ****     
 771              		.loc 3 58 43 view .LVU236
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 27


 772 0030 67EEA78A 		vmul.f32	s17, s15, s15
  51:AudioProcessor.cpp ****     } else {
 773              		.loc 3 51 49 view .LVU237
 774 0034 48BF     		it	mi
 775 0036 20EE088A 		vmulmi.f32	s16, s0, s16
  54:AudioProcessor.cpp ****     }
 776              		.loc 3 54 9 is_stmt 1 view .LVU238
  58:AudioProcessor.cpp ****     
 777              		.loc 3 58 11 is_stmt 0 view .LVU239
 778 003a 68EEA78A 		vmul.f32	s17, s17, s15
  54:AudioProcessor.cpp ****     }
 779              		.loc 3 54 22 view .LVU240
 780 003e 28EE008A 		vmul.f32	s16, s16, s0
 781              	.LVL34:
  58:AudioProcessor.cpp ****     
 782              		.loc 3 58 5 is_stmt 1 view .LVU241
 783              		.loc 3 60 5 view .LVU242
 784              	.LBB202:
 785              		.loc 3 60 22 view .LVU243
 786              	.L55:
  61:AudioProcessor.cpp ****         // Update envelope parameters
  62:AudioProcessor.cpp ****         voice_envelopes[i].SetAttackTime(attack_value);
 787              		.loc 3 62 9 view .LVU244
 788              		.loc 3 62 41 is_stmt 0 view .LVU245
 789 0042 B0EE480A 		vmov.f32	s0, s16
 790 0046 2046     		mov	r0, r4
 791 0048 FFF7FEFF 		bl	_ZN13VoiceEnvelope13SetAttackTimeEf
 792              	.LVL35:
  63:AudioProcessor.cpp ****         voice_envelopes[i].SetReleaseTime(release_value);
 793              		.loc 3 63 9 is_stmt 1 view .LVU246
 794              		.loc 3 63 42 is_stmt 0 view .LVU247
 795 004c B0EE680A 		vmov.f32	s0, s17
 796 0050 2046     		mov	r0, r4
 797 0052 FFF7FEFF 		bl	_ZN13VoiceEnvelope14SetReleaseTimeEf
 798              	.LVL36:
  64:AudioProcessor.cpp ****         
  65:AudioProcessor.cpp ****         // Process envelope
  66:AudioProcessor.cpp ****         voice_values[i] = voice_envelopes[i].Process();
 799              		.loc 3 66 9 is_stmt 1 view .LVU248
 800              		.loc 3 66 53 is_stmt 0 view .LVU249
 801 0056 2046     		mov	r0, r4
 802 0058 FFF7FEFF 		bl	_ZN13VoiceEnvelope7ProcessEv
 803              	.LVL37:
  67:AudioProcessor.cpp ****         
  68:AudioProcessor.cpp ****         // Update voice activity based on envelope state
  69:AudioProcessor.cpp ****         if(!voice_active[i] && !voice_envelopes[i].IsActive()) {
 804              		.loc 3 69 27 view .LVU250
 805 005c 17F8013B 		ldrb	r3, [r7], #1	@ zero_extendqisi2
  66:AudioProcessor.cpp ****         
 806              		.loc 3 66 25 view .LVU251
 807 0060 A6EC010A 		vstmia.32	r6!, {s0}
 808              		.loc 3 69 9 is_stmt 1 view .LVU252
 809              		.loc 3 69 29 is_stmt 0 view .LVU253
 810 0064 23B9     		cbnz	r3, .L54
 811              	.LVL38:
 812              	.LBB200:
 813              	.LBI200:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 28


 212:VoiceEnvelope.h ****         return current_state != ENV_IDLE;
 814              		.loc 1 212 10 is_stmt 1 discriminator 1 view .LVU254
 815              	.LBB201:
 213:VoiceEnvelope.h ****     }
 816              		.loc 1 213 9 discriminator 1 view .LVU255
 213:VoiceEnvelope.h ****     }
 817              		.loc 1 213 9 is_stmt 0 discriminator 1 view .LVU256
 818              	.LBE201:
 819              	.LBE200:
 820              		.loc 3 69 29 discriminator 1 view .LVU257
 821 0066 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 822 0068 13B9     		cbnz	r3, .L54
  70:AudioProcessor.cpp ****             voice_values[i] = 0.0f; // Ensure silence when inactive
 823              		.loc 3 70 13 is_stmt 1 view .LVU258
 824              		.loc 3 70 29 is_stmt 0 view .LVU259
 825 006a 0023     		movs	r3, #0
 826 006c 46F8043C 		str	r3, [r6, #-4]	@ float
 827              	.L54:
  60:AudioProcessor.cpp ****         // Update envelope parameters
 828              		.loc 3 60 5 is_stmt 1 discriminator 2 view .LVU260
 829 0070 0135     		adds	r5, r5, #1
 830              	.LVL39:
  60:AudioProcessor.cpp ****         // Update envelope parameters
 831              		.loc 3 60 22 discriminator 2 view .LVU261
 832 0072 4434     		adds	r4, r4, #68
 833 0074 042D     		cmp	r5, #4
 834 0076 E4D1     		bne	.L55
 835              	.LBE202:
  71:AudioProcessor.cpp ****         }
  72:AudioProcessor.cpp ****     }
  73:AudioProcessor.cpp **** }
 836              		.loc 3 73 1 is_stmt 0 view .LVU262
 837 0078 BDEC028B 		vldm	sp!, {d8}
 838              		.cfi_restore 80
 839              		.cfi_restore 81
 840              		.cfi_def_cfa_offset 24
 841              	.LVL40:
 842              		.loc 3 73 1 view .LVU263
 843 007c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 844              	.LVL41:
 845              	.L61:
 846              		.loc 3 73 1 view .LVU264
 847 007e 00BF     		.align	2
 848              	.L60:
 849 0080 00000000 		.word	.LANCHOR0
 850 0084 CDCC4C3E 		.word	1045220557
 851 0088 00000000 		.word	.LANCHOR1
 852 008c 00000000 		.word	voice_envelopes
 853 0090 00000000 		.word	voice_values
 854 0094 00000000 		.word	voice_active
 855              		.cfi_endproc
 856              	.LFE5343:
 858              		.section	.text._Z12ProcessVoiceif,"ax",%progbits
 859              		.align	1
 860              		.global	_Z12ProcessVoiceif
 861              		.syntax unified
 862              		.thumb
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 29


 863              		.thumb_func
 865              	_Z12ProcessVoiceif:
 866              	.LVL42:
 867              	.LFB5344:
  74:AudioProcessor.cpp **** 
  75:AudioProcessor.cpp **** void ProcessVoice(int voice_idx, float envelope_value) {
 868              		.loc 3 75 56 is_stmt 1 view -0
 869              		.cfi_startproc
 870              		@ args = 0, pretend = 0, frame = 0
 871              		@ frame_needed = 0, uses_anonymous_args = 0
 872              		@ link register save eliminated.
  76:AudioProcessor.cpp ****     // Store voice value for LED display
  77:AudioProcessor.cpp ****     voice_values[voice_idx] = envelope_value;
 873              		.loc 3 77 5 view .LVU266
 874              		.loc 3 77 29 is_stmt 0 view .LVU267
 875 0000 024B     		ldr	r3, .L63
 876 0002 03EB8000 		add	r0, r3, r0, lsl #2
 877              	.LVL43:
 878              		.loc 3 77 29 view .LVU268
 879 0006 80ED000A 		vstr.32	s0, [r0]
  78:AudioProcessor.cpp **** }
 880              		.loc 3 78 1 view .LVU269
 881 000a 7047     		bx	lr
 882              	.L64:
 883              		.align	2
 884              	.L63:
 885 000c 00000000 		.word	voice_values
 886              		.cfi_endproc
 887              	.LFE5344:
 889              		.section	.text._Z15ProcessControlsv,"ax",%progbits
 890              		.align	1
 891              		.global	_Z15ProcessControlsv
 892              		.syntax unified
 893              		.thumb
 894              		.thumb_func
 896              	_Z15ProcessControlsv:
 897              	.LFB5346:
  79:AudioProcessor.cpp **** 
  80:AudioProcessor.cpp **** void AudioCallback(AudioHandle::InterleavingInputBuffer in,
  81:AudioProcessor.cpp ****                  AudioHandle::InterleavingOutputBuffer out,
  82:AudioProcessor.cpp ****                  size_t size) {
  83:AudioProcessor.cpp ****     cpu_meter.OnBlockStart(); // Mark the beginning of the audio block
  84:AudioProcessor.cpp ****     
  85:AudioProcessor.cpp ****     // Process controls & read values
  86:AudioProcessor.cpp ****     ProcessControls();
  87:AudioProcessor.cpp ****     ReadKnobValues();
  88:AudioProcessor.cpp ****     
  89:AudioProcessor.cpp ****     // Get touch control value from the shared volatile variable
  90:AudioProcessor.cpp ****     float touch_control = touch_cv_value; 
  91:AudioProcessor.cpp ****     
  92:AudioProcessor.cpp ****     // --- Apply Touch Control Modulation (Averaging knob + touch) ---
  93:AudioProcessor.cpp ****     // Apply touch modulation to selected parameters by averaging knob and touch values
  94:AudioProcessor.cpp ****     float intensity_factor = 0.5f; // 0.0 = knob only, 1.0 = touch only, 0.5 = average
  95:AudioProcessor.cpp **** 
  96:AudioProcessor.cpp ****     // harm_knob_val    = harm_knob_val    * (1.0f - intensity_factor) + touch_control * intensity_
  97:AudioProcessor.cpp ****     morph_knob_val   = morph_knob_val   * (1.0f - intensity_factor) + touch_control * intensity_fac
  98:AudioProcessor.cpp ****     // decay_knob_val   = decay_knob_val   * (1.0f - intensity_factor) + touch_control * intensity_
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 30


  99:AudioProcessor.cpp ****     delay_feedback_val = delay_feedback_val * (1.0f - intensity_factor) + touch_control * intensity
 100:AudioProcessor.cpp ****     // delay_time_val   = delay_time_val   * (1.0f - intensity_factor) + touch_control * intensity_
 101:AudioProcessor.cpp **** 
 102:AudioProcessor.cpp ****     // --- End Touch Control Modulation ---
 103:AudioProcessor.cpp **** 
 104:AudioProcessor.cpp ****     // Add panic button check (long press but not bootloader long)
 105:AudioProcessor.cpp ****     static uint32_t button_press_time = 0;
 106:AudioProcessor.cpp ****     if (button.RisingEdge()) {
 107:AudioProcessor.cpp ****         button_press_time = System::GetNow();
 108:AudioProcessor.cpp ****     }
 109:AudioProcessor.cpp ****     else if (button.Pressed() && button_press_time > 0) {
 110:AudioProcessor.cpp ****         uint32_t held_time = System::GetNow() - button_press_time;
 111:AudioProcessor.cpp ****         // If button held more than 1 second but less than bootloader time (3s)
 112:AudioProcessor.cpp ****         if (held_time > 1000 && held_time < 3000) {
 113:AudioProcessor.cpp ****             ResetVoiceStates();
 114:AudioProcessor.cpp ****             button_press_time = 0; // Reset so it only triggers once
 115:AudioProcessor.cpp ****         }
 116:AudioProcessor.cpp ****     }
 117:AudioProcessor.cpp ****     
 118:AudioProcessor.cpp ****     // Determine engine settings
 119:AudioProcessor.cpp ****     int engineIndex = DetermineEngineSettings();
 120:AudioProcessor.cpp ****     bool poly_mode = (engineIndex <= 3); // First 4 engines are poly
 121:AudioProcessor.cpp ****     int effective_num_voices = poly_mode ? NUM_VOICES : 1;
 122:AudioProcessor.cpp **** 
 123:AudioProcessor.cpp ****     // Integrate Arpeggiator: hold ADC8 pad to run arp, release to stop
 124:AudioProcessor.cpp ****     // Tap-to-toggle behaviour on pad 8
 125:AudioProcessor.cpp ****     // --- Arpeggiator toggle pad with hysteresis to avoid double-toggles ---
 126:AudioProcessor.cpp ****     static bool arp_enabled = false;
 127:AudioProcessor.cpp ****     constexpr float kOnThreshold  = 0.30f;   // more sensitive press detection
 128:AudioProcessor.cpp ****     constexpr float kOffThreshold = 0.20f;   // lower release threshold for fast reset
 129:AudioProcessor.cpp **** 
 130:AudioProcessor.cpp ****     static bool pad_pressed = false;          // debounced pad pressed state
 131:AudioProcessor.cpp ****     float pad_read = arp_pad.Value();
 132:AudioProcessor.cpp **** 
 133:AudioProcessor.cpp ****     // Detect state transitions with hysteresis
 134:AudioProcessor.cpp ****     if(!pad_pressed && pad_read > kOnThreshold)
 135:AudioProcessor.cpp ****     {
 136:AudioProcessor.cpp ****         pad_pressed = true;
 137:AudioProcessor.cpp ****         // Rising edge detected -> toggle arp
 138:AudioProcessor.cpp ****         arp_enabled = !arp_enabled;
 139:AudioProcessor.cpp ****         hw.PrintLine(arp_enabled ? "[DEBUG] ARP ON" : "[DEBUG] ARP OFF");
 140:AudioProcessor.cpp ****         if(arp_enabled)
 141:AudioProcessor.cpp ****         {
 142:AudioProcessor.cpp ****             arp.Init(sample_rate);          // restart timing
 143:AudioProcessor.cpp ****         }
 144:AudioProcessor.cpp ****     }
 145:AudioProcessor.cpp ****     else if(pad_pressed && pad_read < kOffThreshold)
 146:AudioProcessor.cpp ****     {
 147:AudioProcessor.cpp ****         // Consider pad released only when it falls well below off threshold
 148:AudioProcessor.cpp ****         pad_pressed = false;
 149:AudioProcessor.cpp ****     }
 150:AudioProcessor.cpp ****     bool arp_on = arp_enabled;
 151:AudioProcessor.cpp ****     static bool was_arp_on = false;
 152:AudioProcessor.cpp ****     if (!arp_on && was_arp_on) {
 153:AudioProcessor.cpp ****         // ARP just turned off: clear all voices and modulation gates
 154:AudioProcessor.cpp ****         ResetVoiceStates();
 155:AudioProcessor.cpp ****         for (int v = 0; v < NUM_VOICES; ++v) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 31


 156:AudioProcessor.cpp ****             modulations[v].trigger = 0.0f;
 157:AudioProcessor.cpp ****             modulations[v].trigger_patched = false;
 158:AudioProcessor.cpp ****         }
 159:AudioProcessor.cpp ****         // Reset touch history so that any keys still held will register as new touches
 160:AudioProcessor.cpp ****         // when we exit ARP mode. This allows immediate playback in non-ARP mode while
 161:AudioProcessor.cpp ****         // pads are kept pressed.
 162:AudioProcessor.cpp ****         last_touch_state = 0;
 163:AudioProcessor.cpp ****     }
 164:AudioProcessor.cpp ****     was_arp_on = arp_on;
 165:AudioProcessor.cpp **** 
 166:AudioProcessor.cpp ****     if (arp_on) {
 167:AudioProcessor.cpp ****         // Collect held pads from touch sensor
 168:AudioProcessor.cpp ****         uint16_t st = current_touch_state;
 169:AudioProcessor.cpp ****         int key_idxs[12];
 170:AudioProcessor.cpp ****         int num_keys = 0;
 171:AudioProcessor.cpp ****         // Collect any MPR121 pads currently held
 172:AudioProcessor.cpp ****         for (int i = 0; i < 12; ++i) {
 173:AudioProcessor.cpp ****             if (st & (1 << i)) {
 174:AudioProcessor.cpp ****                 key_idxs[num_keys++] = i;
 175:AudioProcessor.cpp ****             }
 176:AudioProcessor.cpp ****         }
 177:AudioProcessor.cpp ****         arp.SetNotes(key_idxs, num_keys);
 178:AudioProcessor.cpp ****         // Map ADC0 (delay_time_val) to tempo range 1-15 Hz
 179:AudioProcessor.cpp ****         // Exponential tempo mapping for full knob response: 1 Hz to 30 Hz
 180:AudioProcessor.cpp ****         float min_tempo = 1.0f;
 181:AudioProcessor.cpp ****         float max_tempo = 30.0f;
 182:AudioProcessor.cpp ****         float ratio     = max_tempo / min_tempo;
 183:AudioProcessor.cpp ****         float tempo     = min_tempo * powf(ratio, delay_time_val);
 184:AudioProcessor.cpp ****         arp.SetMainTempo(tempo);
 185:AudioProcessor.cpp ****         // Map mod wheel (ADC 11) to polyrhythm ratio 0.5x to 2.0x
 186:AudioProcessor.cpp ****         {
 187:AudioProcessor.cpp ****             float min_ratio = 0.5f, max_ratio = 2.0f;
 188:AudioProcessor.cpp ****             float mw = mod_wheel.Value();
 189:AudioProcessor.cpp ****             float ratio = min_ratio + mw * (max_ratio - min_ratio);
 190:AudioProcessor.cpp ****             arp.SetPolyrhythmRatio(ratio);
 191:AudioProcessor.cpp ****         }
 192:AudioProcessor.cpp ****         // Process arpeggiator for this block (frames = size/2)
 193:AudioProcessor.cpp ****         arp.Process(size / 2);
 194:AudioProcessor.cpp ****     } else {
 195:AudioProcessor.cpp ****         // Default touch-driven note handling
 196:AudioProcessor.cpp ****         HandleTouchInput(engineIndex, poly_mode, effective_num_voices);
 197:AudioProcessor.cpp ****     }
 198:AudioProcessor.cpp ****     
 199:AudioProcessor.cpp ****     // Configure delay settings
 200:AudioProcessor.cpp ****     ConfigureDelaySettings();
 201:AudioProcessor.cpp ****     
 202:AudioProcessor.cpp ****     // Process voice parameters and render audio
 203:AudioProcessor.cpp ****     // Prepare voice rendering: skip trigger reset in ARP mode
 204:AudioProcessor.cpp ****     if (arp_on) {
 205:AudioProcessor.cpp ****         // Mono ARP: only voice 0, preserve trigger_patched set by callback
 206:AudioProcessor.cpp ****         PrepareVoiceParameters(engineIndex, false, 0, true);
 207:AudioProcessor.cpp ****     } else {
 208:AudioProcessor.cpp ****         // Normal mode: reset triggers per engine
 209:AudioProcessor.cpp ****         PrepareVoiceParameters(engineIndex, poly_mode, effective_num_voices - 1, false);
 210:AudioProcessor.cpp ****     }
 211:AudioProcessor.cpp ****     
 212:AudioProcessor.cpp ****     // Process envelopes and mix audio
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 32


 213:AudioProcessor.cpp ****     ProcessVoiceEnvelopes(poly_mode);
 214:AudioProcessor.cpp ****     
 215:AudioProcessor.cpp ****     // Mix dry/wet and apply delay
 216:AudioProcessor.cpp ****     float dry_level = 1.0f - delay_mix_val;
 217:AudioProcessor.cpp ****     ProcessAudioOutput(out, size, dry_level);
 218:AudioProcessor.cpp ****     
 219:AudioProcessor.cpp ****     // After rendering the ARP pulse, clear triggers so next block can retrigger
 220:AudioProcessor.cpp ****     if (arp_on) {
 221:AudioProcessor.cpp ****         modulations[0].trigger = 0.0f;
 222:AudioProcessor.cpp ****         modulations[0].trigger_patched = 0.0f;
 223:AudioProcessor.cpp ****     }
 224:AudioProcessor.cpp **** 
 225:AudioProcessor.cpp ****     // Mark the end of the audio block
 226:AudioProcessor.cpp ****     cpu_meter.OnBlockEnd();
 227:AudioProcessor.cpp ****     
 228:AudioProcessor.cpp ****     // Update other performance monitors (like output level)
 229:AudioProcessor.cpp ****     UpdatePerformanceMonitors(size, out);
 230:AudioProcessor.cpp **** }
 231:AudioProcessor.cpp **** 
 232:AudioProcessor.cpp **** void ProcessControls() {
 898              		.loc 3 232 24 is_stmt 1 view -0
 899              		.cfi_startproc
 900              		@ args = 0, pretend = 0, frame = 0
 901              		@ frame_needed = 0, uses_anonymous_args = 0
 233:AudioProcessor.cpp ****     button.Debounce();
 902              		.loc 3 233 5 view .LVU271
 232:AudioProcessor.cpp ****     button.Debounce();
 903              		.loc 3 232 24 is_stmt 0 view .LVU272
 904 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 905              		.cfi_def_cfa_offset 24
 906              		.cfi_offset 3, -24
 907              		.cfi_offset 4, -20
 908              		.cfi_offset 5, -16
 909              		.cfi_offset 6, -12
 910              		.cfi_offset 7, -8
 911              		.cfi_offset 14, -4
 912              		.loc 3 233 20 view .LVU273
 913 0002 5B48     		ldr	r0, .L86
 914              	.LBB203:
 234:AudioProcessor.cpp ****     delay_time_knob.Process();        // ADC 0
 235:AudioProcessor.cpp ****     delay_mix_feedback_knob.Process(); // ADC 1
 236:AudioProcessor.cpp ****     env_release_knob.Process();       // ADC 2
 237:AudioProcessor.cpp ****     env_attack_knob.Process();        // ADC 3
 238:AudioProcessor.cpp ****     timbre_knob.Process();            // ADC 4
 239:AudioProcessor.cpp ****     harmonics_knob.Process();         // ADC 5
 240:AudioProcessor.cpp ****     morph_knob.Process();             // ADC 6
 241:AudioProcessor.cpp ****     pitch_knob.Process();             // ADC 7
 242:AudioProcessor.cpp ****     // Process the remaining ADC-based controls
 243:AudioProcessor.cpp ****     arp_pad.Process();            // Process ADC 8: Arpeggiator Toggle Pad
 244:AudioProcessor.cpp ****     model_prev_pad.Process();     // Process ADC 9: Model Select Previous Pad
 245:AudioProcessor.cpp ****     model_next_pad.Process();     // Process ADC 10: Model Select Next Pad
 246:AudioProcessor.cpp ****     mod_wheel.Process();          // Process ADC 11: Mod Wheel Control
 247:AudioProcessor.cpp **** 
 248:AudioProcessor.cpp ****     // Read raw values for ALL 12 ADC channels
 249:AudioProcessor.cpp ****     for(int i = 0; i < 12; ++i) {
 915              		.loc 3 249 13 view .LVU274
 916 0004 0024     		movs	r4, #0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 33


 917              	.LBE203:
 233:AudioProcessor.cpp ****     delay_time_knob.Process();        // ADC 0
 918              		.loc 3 233 20 view .LVU275
 919 0006 FFF7FEFF 		bl	_ZN5daisy6Switch8DebounceEv
 920              	.LVL44:
 234:AudioProcessor.cpp ****     delay_time_knob.Process();        // ADC 0
 921              		.loc 3 234 5 is_stmt 1 view .LVU276
 234:AudioProcessor.cpp ****     delay_time_knob.Process();        // ADC 0
 922              		.loc 3 234 28 is_stmt 0 view .LVU277
 923 000a 5A48     		ldr	r0, .L86+4
 924 000c FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 925              	.LVL45:
 235:AudioProcessor.cpp ****     env_release_knob.Process();       // ADC 2
 926              		.loc 3 235 5 is_stmt 1 view .LVU278
 235:AudioProcessor.cpp ****     env_release_knob.Process();       // ADC 2
 927              		.loc 3 235 36 is_stmt 0 view .LVU279
 928 0010 5948     		ldr	r0, .L86+8
 929 0012 FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 930              	.LVL46:
 236:AudioProcessor.cpp ****     env_attack_knob.Process();        // ADC 3
 931              		.loc 3 236 5 is_stmt 1 view .LVU280
 236:AudioProcessor.cpp ****     env_attack_knob.Process();        // ADC 3
 932              		.loc 3 236 29 is_stmt 0 view .LVU281
 933 0016 5948     		ldr	r0, .L86+12
 934 0018 FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 935              	.LVL47:
 237:AudioProcessor.cpp ****     timbre_knob.Process();            // ADC 4
 936              		.loc 3 237 5 is_stmt 1 view .LVU282
 237:AudioProcessor.cpp ****     timbre_knob.Process();            // ADC 4
 937              		.loc 3 237 28 is_stmt 0 view .LVU283
 938 001c 5848     		ldr	r0, .L86+16
 939 001e FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 940              	.LVL48:
 238:AudioProcessor.cpp ****     harmonics_knob.Process();         // ADC 5
 941              		.loc 3 238 5 is_stmt 1 view .LVU284
 238:AudioProcessor.cpp ****     harmonics_knob.Process();         // ADC 5
 942              		.loc 3 238 24 is_stmt 0 view .LVU285
 943 0022 5848     		ldr	r0, .L86+20
 944 0024 FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 945              	.LVL49:
 239:AudioProcessor.cpp ****     morph_knob.Process();             // ADC 6
 946              		.loc 3 239 5 is_stmt 1 view .LVU286
 239:AudioProcessor.cpp ****     morph_knob.Process();             // ADC 6
 947              		.loc 3 239 27 is_stmt 0 view .LVU287
 948 0028 5748     		ldr	r0, .L86+24
 949 002a FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 950              	.LVL50:
 240:AudioProcessor.cpp ****     pitch_knob.Process();             // ADC 7
 951              		.loc 3 240 5 is_stmt 1 view .LVU288
 240:AudioProcessor.cpp ****     pitch_knob.Process();             // ADC 7
 952              		.loc 3 240 23 is_stmt 0 view .LVU289
 953 002e 5748     		ldr	r0, .L86+28
 954 0030 FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 955              	.LVL51:
 241:AudioProcessor.cpp ****     // Process the remaining ADC-based controls
 956              		.loc 3 241 5 is_stmt 1 view .LVU290
 241:AudioProcessor.cpp ****     // Process the remaining ADC-based controls
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 34


 957              		.loc 3 241 23 is_stmt 0 view .LVU291
 958 0034 5648     		ldr	r0, .L86+32
 959 0036 FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 960              	.LVL52:
 243:AudioProcessor.cpp ****     model_prev_pad.Process();     // Process ADC 9: Model Select Previous Pad
 961              		.loc 3 243 5 is_stmt 1 view .LVU292
 243:AudioProcessor.cpp ****     model_prev_pad.Process();     // Process ADC 9: Model Select Previous Pad
 962              		.loc 3 243 20 is_stmt 0 view .LVU293
 963 003a 5648     		ldr	r0, .L86+36
 964 003c FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 965              	.LVL53:
 244:AudioProcessor.cpp ****     model_next_pad.Process();     // Process ADC 10: Model Select Next Pad
 966              		.loc 3 244 5 is_stmt 1 view .LVU294
 244:AudioProcessor.cpp ****     model_next_pad.Process();     // Process ADC 10: Model Select Next Pad
 967              		.loc 3 244 27 is_stmt 0 view .LVU295
 968 0040 5548     		ldr	r0, .L86+40
 969 0042 FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 970              	.LVL54:
 245:AudioProcessor.cpp ****     mod_wheel.Process();          // Process ADC 11: Mod Wheel Control
 971              		.loc 3 245 5 is_stmt 1 view .LVU296
 245:AudioProcessor.cpp ****     mod_wheel.Process();          // Process ADC 11: Mod Wheel Control
 972              		.loc 3 245 27 is_stmt 0 view .LVU297
 973 0046 5548     		ldr	r0, .L86+44
 974 0048 FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 975              	.LVL55:
 246:AudioProcessor.cpp **** 
 976              		.loc 3 246 5 is_stmt 1 view .LVU298
 246:AudioProcessor.cpp **** 
 977              		.loc 3 246 22 is_stmt 0 view .LVU299
 978 004c 5448     		ldr	r0, .L86+48
 979 004e FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 980              	.LVL56:
 981              		.loc 3 249 5 is_stmt 1 view .LVU300
 982              	.LBB204:
 983              		.loc 3 249 22 view .LVU301
 984              	.L66:
 250:AudioProcessor.cpp ****         adc_raw_values[i] = hw.adc.GetFloat(i);
 985              		.loc 3 250 9 discriminator 2 view .LVU302
 986              		.loc 3 250 44 is_stmt 0 discriminator 2 view .LVU303
 987 0052 E1B2     		uxtb	r1, r4
 988 0054 5348     		ldr	r0, .L86+52
 989 0056 FFF7FEFF 		bl	_ZNK5daisy9AdcHandle8GetFloatEh
 990              	.LVL57:
 991              		.loc 3 250 27 discriminator 2 view .LVU304
 992 005a 534B     		ldr	r3, .L86+56
 993 005c 03EB8403 		add	r3, r3, r4, lsl #2
 249:AudioProcessor.cpp ****         adc_raw_values[i] = hw.adc.GetFloat(i);
 994              		.loc 3 249 5 discriminator 2 view .LVU305
 995 0060 0134     		adds	r4, r4, #1
 996              	.LVL58:
 249:AudioProcessor.cpp ****         adc_raw_values[i] = hw.adc.GetFloat(i);
 997              		.loc 3 249 22 discriminator 2 view .LVU306
 998 0062 0C2C     		cmp	r4, #12
 999              		.loc 3 250 27 discriminator 2 view .LVU307
 1000 0064 83ED000A 		vstr.32	s0, [r3]
 249:AudioProcessor.cpp ****         adc_raw_values[i] = hw.adc.GetFloat(i);
 1001              		.loc 3 249 5 is_stmt 1 discriminator 2 view .LVU308
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 35


 1002              	.LVL59:
 249:AudioProcessor.cpp ****         adc_raw_values[i] = hw.adc.GetFloat(i);
 1003              		.loc 3 249 22 discriminator 2 view .LVU309
 1004 0068 F3D1     		bne	.L66
 1005              	.LBE204:
 251:AudioProcessor.cpp ****     }
 252:AudioProcessor.cpp **** 
 253:AudioProcessor.cpp ****     // --- Model selection logic via touch pads ---
 254:AudioProcessor.cpp ****     const float threshold = 0.5f;
 1006              		.loc 3 254 5 view .LVU310
 1007              	.LVL60:
 255:AudioProcessor.cpp ****     static bool prev_model_prev = false;
 1008              		.loc 3 255 5 view .LVU311
 256:AudioProcessor.cpp ****     static bool prev_model_next = false;
 1009              		.loc 3 256 5 view .LVU312
 257:AudioProcessor.cpp ****     bool current_model_prev = model_prev_pad.Value() > threshold;
 1010              		.loc 3 257 5 view .LVU313
 1011              	.LBB205:
 1012              	.LBI205:
 1013              		.file 4 "lib/libdaisy/src/hid/ctrl.h"
   1:lib/libdaisy/src/hid/ctrl.h **** #pragma once
   2:lib/libdaisy/src/hid/ctrl.h **** #ifndef DSY_KNOB_H
   3:lib/libdaisy/src/hid/ctrl.h **** #define DSY_KNOB_H /**< & */
   4:lib/libdaisy/src/hid/ctrl.h **** #include <stdint.h>
   5:lib/libdaisy/src/hid/ctrl.h **** 
   6:lib/libdaisy/src/hid/ctrl.h **** #ifdef __cplusplus
   7:lib/libdaisy/src/hid/ctrl.h **** namespace daisy
   8:lib/libdaisy/src/hid/ctrl.h **** {
   9:lib/libdaisy/src/hid/ctrl.h **** /**
  10:lib/libdaisy/src/hid/ctrl.h ****     @brief Hardware Interface for control inputs \n 
  11:lib/libdaisy/src/hid/ctrl.h ****     Primarily designed for ADC input controls such as \n 
  12:lib/libdaisy/src/hid/ctrl.h ****     potentiometers, and control voltage. \n 
  13:lib/libdaisy/src/hid/ctrl.h ****     @author Stephen Hensley
  14:lib/libdaisy/src/hid/ctrl.h ****     @date November 2019
  15:lib/libdaisy/src/hid/ctrl.h ****     @ingroup controls
  16:lib/libdaisy/src/hid/ctrl.h **** */
  17:lib/libdaisy/src/hid/ctrl.h **** class AnalogControl
  18:lib/libdaisy/src/hid/ctrl.h **** {
  19:lib/libdaisy/src/hid/ctrl.h ****   public:
  20:lib/libdaisy/src/hid/ctrl.h ****     /** Constructor */
  21:lib/libdaisy/src/hid/ctrl.h ****     AnalogControl() {}
  22:lib/libdaisy/src/hid/ctrl.h ****     /** destructor */
  23:lib/libdaisy/src/hid/ctrl.h ****     ~AnalogControl() {}
  24:lib/libdaisy/src/hid/ctrl.h **** 
  25:lib/libdaisy/src/hid/ctrl.h ****     /** 
  26:lib/libdaisy/src/hid/ctrl.h ****     Initializes the control
  27:lib/libdaisy/src/hid/ctrl.h ****     \param *adcptr is a pointer to the raw adc read value -- This can be acquired with dsy_adc_get_
  28:lib/libdaisy/src/hid/ctrl.h ****     \param sr is the samplerate in Hz that the Process function will be called at.
  29:lib/libdaisy/src/hid/ctrl.h ****     \param flip determines whether the input is flipped (i.e. 1.f - input) or not before being proc
  30:lib/libdaisy/src/hid/ctrl.h ****     \param invert determines whether the input is inverted (i.e. -1.f * input) or note before being
  31:lib/libdaisy/src/hid/ctrl.h ****     \param slew_seconds is the slew time in seconds that it takes for the control to change to a ne
  32:lib/libdaisy/src/hid/ctrl.h ****     */
  33:lib/libdaisy/src/hid/ctrl.h ****     void Init(uint16_t *adcptr,
  34:lib/libdaisy/src/hid/ctrl.h ****               float     sr,
  35:lib/libdaisy/src/hid/ctrl.h ****               bool      flip         = false,
  36:lib/libdaisy/src/hid/ctrl.h ****               bool      invert       = false,
  37:lib/libdaisy/src/hid/ctrl.h ****               float     slew_seconds = 0.002f);
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 36


  38:lib/libdaisy/src/hid/ctrl.h **** 
  39:lib/libdaisy/src/hid/ctrl.h ****     /** 
  40:lib/libdaisy/src/hid/ctrl.h ****     This Initializes the AnalogControl for a -5V to 5V inverted input
  41:lib/libdaisy/src/hid/ctrl.h ****     All of the Init details are the same otherwise
  42:lib/libdaisy/src/hid/ctrl.h ****     \param *adcptr Pointer to analog digital converter
  43:lib/libdaisy/src/hid/ctrl.h ****     \param sr Audio engine sample rate
  44:lib/libdaisy/src/hid/ctrl.h ****     */
  45:lib/libdaisy/src/hid/ctrl.h ****     void InitBipolarCv(uint16_t *adcptr, float sr);
  46:lib/libdaisy/src/hid/ctrl.h **** 
  47:lib/libdaisy/src/hid/ctrl.h ****     /** 
  48:lib/libdaisy/src/hid/ctrl.h ****     Filters, and transforms a raw ADC read into a normalized range.
  49:lib/libdaisy/src/hid/ctrl.h ****     this should be called at the rate of specified by samplerate at Init time.   
  50:lib/libdaisy/src/hid/ctrl.h ****     Default Initializations will return 0.0 -> 1.0
  51:lib/libdaisy/src/hid/ctrl.h ****     Bi-polar CV inputs will return -1.0 -> 1.0
  52:lib/libdaisy/src/hid/ctrl.h ****     */
  53:lib/libdaisy/src/hid/ctrl.h ****     float Process();
  54:lib/libdaisy/src/hid/ctrl.h **** 
  55:lib/libdaisy/src/hid/ctrl.h ****     /** Returns the current stored value, without reprocessing */
  56:lib/libdaisy/src/hid/ctrl.h ****     inline float Value() const { return val_; }
 1014              		.loc 4 56 18 view .LVU314
 1015              	.LBB206:
 1016              		.loc 4 56 34 view .LVU315
 1017              		.loc 4 56 41 is_stmt 0 view .LVU316
 1018 006a 4B4B     		ldr	r3, .L86+40
 1019              	.LBE206:
 1020              	.LBE205:
 1021              		.loc 3 257 56 view .LVU317
 1022 006c F6EE007A 		vmov.f32	s15, #5.0e-1
 1023 0070 4E48     		ldr	r0, .L86+60
 1024              	.LBB208:
 1025              	.LBB207:
 1026              		.loc 4 56 41 view .LVU318
 1027 0072 D3ED036A 		vldr.32	s13, [r3, #12]
 1028              	.LVL61:
 1029              		.loc 4 56 41 view .LVU319
 1030              	.LBE207:
 1031              	.LBE208:
 1032              	.LBB209:
 1033              	.LBB210:
 1034 0076 494B     		ldr	r3, .L86+44
 1035              	.LBE210:
 1036              	.LBE209:
 1037              		.loc 3 257 56 view .LVU320
 1038 0078 F4EEE76A 		vcmpe.f32	s13, s15
 1039 007c 4C4D     		ldr	r5, .L86+64
 1040              	.LBB213:
 1041              	.LBB211:
 1042              		.loc 4 56 41 view .LVU321
 1043 007e 93ED037A 		vldr.32	s14, [r3, #12]
 1044              	.LBE211:
 1045              	.LBE213:
 258:AudioProcessor.cpp ****     bool current_model_next = model_next_pad.Value() > threshold;
 259:AudioProcessor.cpp **** 
 260:AudioProcessor.cpp ****     // Implement cyclic selection and reverse direction to match physical pad layout
 261:AudioProcessor.cpp ****     // `model_prev_pad` now moves **forward** through the engine list, wrapping at the end.
 262:AudioProcessor.cpp ****     // `model_next_pad` moves **backward**, wrapping at the beginning.
 263:AudioProcessor.cpp ****     const int kNumEngines = MAX_ENGINE_INDEX + 1; // inclusive range 0..MAX_ENGINE_INDEX
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 37


 1046              		.loc 3 263 29 view .LVU322
 1047 0082 4C4B     		ldr	r3, .L86+68
 257:AudioProcessor.cpp ****     bool current_model_next = model_next_pad.Value() > threshold;
 1048              		.loc 3 257 56 view .LVU323
 1049 0084 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 258:AudioProcessor.cpp ****     bool current_model_next = model_next_pad.Value() > threshold;
 1050              		.loc 3 258 56 view .LVU324
 1051 0088 B4EEE77A 		vcmpe.f32	s14, s15
 1052              		.loc 3 263 15 view .LVU325
 1053 008c 1B68     		ldr	r3, [r3]
 257:AudioProcessor.cpp ****     bool current_model_next = model_next_pad.Value() > threshold;
 1054              		.loc 3 257 56 view .LVU326
 1055 008e CCBF     		ite	gt
 1056 0090 0126     		movgt	r6, #1
 1057 0092 0026     		movle	r6, #0
 1058              	.LVL62:
 258:AudioProcessor.cpp ****     bool current_model_next = model_next_pad.Value() > threshold;
 1059              		.loc 3 258 5 is_stmt 1 view .LVU327
 1060              	.LBB214:
 1061              	.LBI209:
 1062              		.loc 4 56 18 view .LVU328
 1063              	.LBB212:
 1064              		.loc 4 56 34 view .LVU329
 1065              		.loc 4 56 34 is_stmt 0 view .LVU330
 1066              	.LBE212:
 1067              	.LBE214:
 258:AudioProcessor.cpp ****     bool current_model_next = model_next_pad.Value() > threshold;
 1068              		.loc 3 258 56 view .LVU331
 1069 0094 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1070              		.loc 3 263 15 view .LVU332
 1071 0098 03F10102 		add	r2, r3, #1
 264:AudioProcessor.cpp **** 
 265:AudioProcessor.cpp ****     if(current_model_prev && !prev_model_prev) {
 1072              		.loc 3 265 5 view .LVU333
 1073 009c F4EEE76A 		vcmpe.f32	s13, s15
 258:AudioProcessor.cpp **** 
 1074              		.loc 3 258 56 view .LVU334
 1075 00a0 CCBF     		ite	gt
 1076 00a2 0124     		movgt	r4, #1
 1077              	.LVL63:
 258:AudioProcessor.cpp **** 
 1078              		.loc 3 258 56 view .LVU335
 1079 00a4 0024     		movle	r4, #0
 1080              	.LVL64:
 263:AudioProcessor.cpp **** 
 1081              		.loc 3 263 5 is_stmt 1 view .LVU336
 1082              		.loc 3 265 5 view .LVU337
 1083 00a6 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1084 00aa 0BDD     		ble	.L67
 1085              		.loc 3 265 27 is_stmt 0 discriminator 1 view .LVU338
 1086 00ac 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1087 00ae 4BB9     		cbnz	r3, .L67
 266:AudioProcessor.cpp ****         current_engine_index = (current_engine_index + 1) % kNumEngines;
 1088              		.loc 3 266 9 is_stmt 1 view .LVU339
 1089              		.loc 3 266 33 is_stmt 0 view .LVU340
 1090 00b0 2B68     		ldr	r3, [r5]
 1091              		.loc 3 266 54 view .LVU341
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 38


 1092 00b2 0133     		adds	r3, r3, #1
 1093              		.loc 3 266 59 view .LVU342
 1094 00b4 93FBF2F1 		sdiv	r1, r3, r2
 1095 00b8 02FB1133 		mls	r3, r2, r1, r3
 267:AudioProcessor.cpp ****         engine_changed_flag = true;
 1096              		.loc 3 267 29 view .LVU343
 1097 00bc 0121     		movs	r1, #1
 266:AudioProcessor.cpp ****         current_engine_index = (current_engine_index + 1) % kNumEngines;
 1098              		.loc 3 266 30 view .LVU344
 1099 00be 2B60     		str	r3, [r5]
 1100              		.loc 3 267 9 is_stmt 1 view .LVU345
 1101              		.loc 3 267 29 is_stmt 0 view .LVU346
 1102 00c0 3D4B     		ldr	r3, .L86+72
 1103 00c2 1970     		strb	r1, [r3]
 1104              	.L67:
 268:AudioProcessor.cpp ****     }
 269:AudioProcessor.cpp **** 
 270:AudioProcessor.cpp ****     if(current_model_next && !prev_model_next) {
 1105              		.loc 3 270 5 is_stmt 1 view .LVU347
 1106 00c4 B4EEE77A 		vcmpe.f32	s14, s15
 1107 00c8 3C49     		ldr	r1, .L86+76
 1108 00ca F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1109 00ce 0CDD     		ble	.L69
 1110              		.loc 3 270 27 is_stmt 0 discriminator 1 view .LVU348
 1111 00d0 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 1112 00d2 53B9     		cbnz	r3, .L69
 271:AudioProcessor.cpp ****         current_engine_index = (current_engine_index - 1 + kNumEngines) % kNumEngines;
 1113              		.loc 3 271 9 is_stmt 1 view .LVU349
 1114              		.loc 3 271 33 is_stmt 0 view .LVU350
 1115 00d4 2B68     		ldr	r3, [r5]
 1116              		.loc 3 271 54 view .LVU351
 1117 00d6 013B     		subs	r3, r3, #1
 1118              		.loc 3 271 58 view .LVU352
 1119 00d8 1344     		add	r3, r3, r2
 1120              		.loc 3 271 73 view .LVU353
 1121 00da 93FBF2F7 		sdiv	r7, r3, r2
 1122 00de 02FB1733 		mls	r3, r2, r7, r3
 272:AudioProcessor.cpp ****         engine_changed_flag = true;
 1123              		.loc 3 272 29 view .LVU354
 1124 00e2 0122     		movs	r2, #1
 1125              	.LVL65:
 271:AudioProcessor.cpp ****         current_engine_index = (current_engine_index - 1 + kNumEngines) % kNumEngines;
 1126              		.loc 3 271 30 view .LVU355
 1127 00e4 2B60     		str	r3, [r5]
 1128              		.loc 3 272 9 is_stmt 1 view .LVU356
 1129              		.loc 3 272 29 is_stmt 0 view .LVU357
 1130 00e6 344B     		ldr	r3, .L86+72
 1131 00e8 1A70     		strb	r2, [r3]
 1132              	.L69:
 273:AudioProcessor.cpp ****     }
 274:AudioProcessor.cpp ****     prev_model_prev = current_model_prev;
 1133              		.loc 3 274 5 is_stmt 1 view .LVU358
 1134              		.loc 3 274 21 is_stmt 0 view .LVU359
 1135 00ea 0670     		strb	r6, [r0]
 275:AudioProcessor.cpp ****     prev_model_next = current_model_next;
 1136              		.loc 3 275 5 is_stmt 1 view .LVU360
 1137              	.LBB215:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 39


 276:AudioProcessor.cpp **** 
 277:AudioProcessor.cpp ****     static int prev_engine_for_reset = 0;
 278:AudioProcessor.cpp ****     if(current_engine_index != prev_engine_for_reset) {
 1138              		.loc 3 278 29 is_stmt 0 view .LVU361
 1139 00ec 344E     		ldr	r6, .L86+80
 1140              	.LVL66:
 1141              		.loc 3 278 8 view .LVU362
 1142 00ee 2A68     		ldr	r2, [r5]
 1143              		.loc 3 278 29 view .LVU363
 1144 00f0 3368     		ldr	r3, [r6]
 1145              	.LBE215:
 275:AudioProcessor.cpp ****     prev_model_next = current_model_next;
 1146              		.loc 3 275 21 view .LVU364
 1147 00f2 0C70     		strb	r4, [r1]
 277:AudioProcessor.cpp ****     if(current_engine_index != prev_engine_for_reset) {
 1148              		.loc 3 277 5 is_stmt 1 view .LVU365
 1149              		.loc 3 278 5 view .LVU366
 1150              	.LBB229:
 1151 00f4 9A42     		cmp	r2, r3
 1152 00f6 17D0     		beq	.L65
 1153              	.LBB216:
 279:AudioProcessor.cpp ****         bool prev_was_poly = (prev_engine_for_reset <= 3);
 1154              		.loc 3 279 9 view .LVU367
 1155              	.LVL67:
 280:AudioProcessor.cpp ****         bool now_poly = (current_engine_index <=3);
 1156              		.loc 3 280 9 view .LVU368
 1157              	.LBB217:
 281:AudioProcessor.cpp ****         if(prev_was_poly != now_poly) {
 1158              		.loc 3 281 9 is_stmt 0 view .LVU369
 1159 00f8 032B     		cmp	r3, #3
 1160              	.LBE217:
 280:AudioProcessor.cpp ****         bool now_poly = (current_engine_index <=3);
 1161              		.loc 3 280 47 view .LVU370
 1162 00fa 2A68     		ldr	r2, [r5]
 1163              	.LVL68:
 1164              		.loc 3 281 9 is_stmt 1 view .LVU371
 1165              	.LBB224:
 1166 00fc CCBF     		ite	gt
 1167 00fe 0020     		movgt	r0, #0
 1168              		.loc 3 281 9 is_stmt 0 view .LVU372
 1169 0100 0120     		movle	r0, #1
 1170 0102 032A     		cmp	r2, #3
 1171 0104 CCBF     		ite	gt
 1172 0106 0021     		movgt	r1, #0
 1173 0108 0121     		movle	r1, #1
 1174 010a 8842     		cmp	r0, r1
 1175 010c 0AD0     		beq	.L73
 1176              	.LBE224:
 1177              	.LBE216:
 1178              	.LBE229:
 282:AudioProcessor.cpp ****             if(prev_was_poly && !now_poly) {
 1179              		.loc 3 282 13 is_stmt 1 view .LVU373
 1180              	.LBB230:
 1181              	.LBB227:
 1182              	.LBB225:
 1183              	.LBB218:
 1184 010e 032B     		cmp	r3, #3
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 40


 1185 0110 4FF00001 		mov	r1, #0
 1186 0114 2B4B     		ldr	r3, .L86+84
 1187              	.LVL69:
 1188              		.loc 3 282 13 is_stmt 0 view .LVU374
 1189 0116 01DC     		bgt	.L74
 1190              		.loc 3 282 30 discriminator 1 view .LVU375
 1191 0118 032A     		cmp	r2, #3
 1192 011a 06DC     		bgt	.L75
 1193              	.L74:
 1194              	.LVL70:
 1195              	.LBB219:
 283:AudioProcessor.cpp ****                 // Transitioning from poly to mono while notes may be held.
 284:AudioProcessor.cpp ****                 // Find the first active poly voice and transfer it to voice 0 so sound continues.
 285:AudioProcessor.cpp ****                 int source_voice = -1;
 286:AudioProcessor.cpp ****                 for(int v=0; v<NUM_VOICES; ++v) {
 287:AudioProcessor.cpp ****                     if(voice_active[v]) { source_voice = v; break; }
 288:AudioProcessor.cpp ****                 }
 289:AudioProcessor.cpp **** 
 290:AudioProcessor.cpp ****                 // Clear all voices first
 291:AudioProcessor.cpp ****                 for(int v=0; v<NUM_VOICES; ++v) {
 292:AudioProcessor.cpp ****                     voice_active[v] = false;
 293:AudioProcessor.cpp ****                 }
 294:AudioProcessor.cpp **** 
 295:AudioProcessor.cpp ****                 if(source_voice != -1) {
 296:AudioProcessor.cpp ****                     voice_active[0] = true;
 297:AudioProcessor.cpp ****                     voice_note[0] = voice_note[source_voice];
 298:AudioProcessor.cpp ****                     // Transfer envelope state to voice 0 so level stays consistent.
 299:AudioProcessor.cpp ****                     voice_envelopes[0] = voice_envelopes[source_voice];
 300:AudioProcessor.cpp ****                     voice_envelopes[source_voice].Reset();
 301:AudioProcessor.cpp ****                 }
 302:AudioProcessor.cpp ****             } else {
 303:AudioProcessor.cpp ****                 // Mono to poly or other transition: simply clear all voices to avoid stuck notes.
 304:AudioProcessor.cpp ****                 for(int v=0; v<NUM_VOICES; ++v) {
 1196              		.loc 3 304 31 is_stmt 1 discriminator 3 view .LVU376
 305:AudioProcessor.cpp ****                     voice_active[v] = false;
 1197              		.loc 3 305 21 discriminator 3 view .LVU377
 1198              		.loc 3 305 37 is_stmt 0 discriminator 3 view .LVU378
 1199 011c 1970     		strb	r1, [r3]
 304:AudioProcessor.cpp ****                     voice_active[v] = false;
 1200              		.loc 3 304 17 is_stmt 1 discriminator 3 view .LVU379
 1201              	.LVL71:
 304:AudioProcessor.cpp ****                     voice_active[v] = false;
 1202              		.loc 3 304 31 discriminator 3 view .LVU380
 1203              		.loc 3 305 21 discriminator 3 view .LVU381
 1204              		.loc 3 305 37 is_stmt 0 discriminator 3 view .LVU382
 1205 011e 5970     		strb	r1, [r3, #1]
 304:AudioProcessor.cpp ****                     voice_active[v] = false;
 1206              		.loc 3 304 17 is_stmt 1 discriminator 3 view .LVU383
 1207              	.LVL72:
 304:AudioProcessor.cpp ****                     voice_active[v] = false;
 1208              		.loc 3 304 31 discriminator 3 view .LVU384
 1209              		.loc 3 305 21 discriminator 3 view .LVU385
 1210              		.loc 3 305 37 is_stmt 0 discriminator 3 view .LVU386
 1211 0120 9970     		strb	r1, [r3, #2]
 304:AudioProcessor.cpp ****                     voice_active[v] = false;
 1212              		.loc 3 304 17 is_stmt 1 discriminator 3 view .LVU387
 1213              	.LVL73:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 41


 304:AudioProcessor.cpp ****                     voice_active[v] = false;
 1214              		.loc 3 304 31 discriminator 3 view .LVU388
 1215              		.loc 3 305 21 discriminator 3 view .LVU389
 1216              		.loc 3 305 37 is_stmt 0 discriminator 3 view .LVU390
 1217 0122 D970     		strb	r1, [r3, #3]
 304:AudioProcessor.cpp ****                     voice_active[v] = false;
 1218              		.loc 3 304 17 is_stmt 1 discriminator 3 view .LVU391
 1219              	.LVL74:
 304:AudioProcessor.cpp ****                     voice_active[v] = false;
 1220              		.loc 3 304 31 discriminator 3 view .LVU392
 1221              	.L73:
 304:AudioProcessor.cpp ****                     voice_active[v] = false;
 1222              		.loc 3 304 31 is_stmt 0 discriminator 3 view .LVU393
 1223              	.LBE219:
 1224              	.LBE218:
 1225              	.LBE225:
 306:AudioProcessor.cpp ****                 }
 307:AudioProcessor.cpp ****             }
 308:AudioProcessor.cpp ****         }
 309:AudioProcessor.cpp ****         prev_engine_for_reset = current_engine_index;
 1226              		.loc 3 309 9 is_stmt 1 view .LVU394
 1227              		.loc 3 309 31 is_stmt 0 view .LVU395
 1228 0124 2B68     		ldr	r3, [r5]
 1229 0126 3360     		str	r3, [r6]
 1230              	.L65:
 1231              		.loc 3 309 31 view .LVU396
 1232              	.LBE227:
 1233              	.LBE230:
 310:AudioProcessor.cpp ****     }
 311:AudioProcessor.cpp **** }
 1234              		.loc 3 311 1 view .LVU397
 1235 0128 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1236              	.LVL75:
 1237              	.L75:
 1238              		.loc 3 311 1 view .LVU398
 1239 012a 1A46     		mov	r2, r3
 1240              	.LVL76:
 1241              	.L77:
 1242              	.LBB231:
 1243              	.LBB228:
 1244              	.LBB226:
 1245              	.LBB223:
 1246              	.LBB220:
 1247              	.LBB221:
 287:AudioProcessor.cpp ****                 }
 1248              		.loc 3 287 21 is_stmt 1 view .LVU399
 287:AudioProcessor.cpp ****                 }
 1249              		.loc 3 287 38 is_stmt 0 view .LVU400
 1250 012c 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 287:AudioProcessor.cpp ****                 }
 1251              		.loc 3 287 21 view .LVU401
 1252 0130 20B9     		cbnz	r0, .L76
 286:AudioProcessor.cpp ****                     if(voice_active[v]) { source_voice = v; break; }
 1253              		.loc 3 286 17 is_stmt 1 discriminator 2 view .LVU402
 1254 0132 0131     		adds	r1, r1, #1
 1255              	.LVL77:
 286:AudioProcessor.cpp ****                     if(voice_active[v]) { source_voice = v; break; }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 42


 1256              		.loc 3 286 31 discriminator 2 view .LVU403
 1257 0134 0429     		cmp	r1, #4
 1258 0136 F9D1     		bne	.L77
 1259              	.LBE221:
 285:AudioProcessor.cpp ****                 for(int v=0; v<NUM_VOICES; ++v) {
 1260              		.loc 3 285 21 is_stmt 0 view .LVU404
 1261 0138 4FF0FF31 		mov	r1, #-1
 1262              	.LVL78:
 1263              	.L76:
 291:AudioProcessor.cpp ****                     voice_active[v] = false;
 1264              		.loc 3 291 17 is_stmt 1 view .LVU405
 1265              	.LBB222:
 291:AudioProcessor.cpp ****                     voice_active[v] = false;
 1266              		.loc 3 291 31 view .LVU406
 292:AudioProcessor.cpp ****                 }
 1267              		.loc 3 292 21 view .LVU407
 292:AudioProcessor.cpp ****                 }
 1268              		.loc 3 292 37 is_stmt 0 view .LVU408
 1269 013c 0022     		movs	r2, #0
 1270 013e 1A70     		strb	r2, [r3]
 291:AudioProcessor.cpp ****                     voice_active[v] = false;
 1271              		.loc 3 291 17 is_stmt 1 view .LVU409
 1272              	.LVL79:
 291:AudioProcessor.cpp ****                     voice_active[v] = false;
 1273              		.loc 3 291 31 view .LVU410
 292:AudioProcessor.cpp ****                 }
 1274              		.loc 3 292 21 view .LVU411
 292:AudioProcessor.cpp ****                 }
 1275              		.loc 3 292 37 is_stmt 0 view .LVU412
 1276 0140 5A70     		strb	r2, [r3, #1]
 291:AudioProcessor.cpp ****                     voice_active[v] = false;
 1277              		.loc 3 291 17 is_stmt 1 view .LVU413
 1278              	.LVL80:
 291:AudioProcessor.cpp ****                     voice_active[v] = false;
 1279              		.loc 3 291 31 view .LVU414
 292:AudioProcessor.cpp ****                 }
 1280              		.loc 3 292 21 view .LVU415
 292:AudioProcessor.cpp ****                 }
 1281              		.loc 3 292 37 is_stmt 0 view .LVU416
 1282 0142 9A70     		strb	r2, [r3, #2]
 291:AudioProcessor.cpp ****                     voice_active[v] = false;
 1283              		.loc 3 291 17 is_stmt 1 view .LVU417
 1284              	.LVL81:
 291:AudioProcessor.cpp ****                     voice_active[v] = false;
 1285              		.loc 3 291 31 view .LVU418
 292:AudioProcessor.cpp ****                 }
 1286              		.loc 3 292 21 view .LVU419
 292:AudioProcessor.cpp ****                 }
 1287              		.loc 3 292 37 is_stmt 0 view .LVU420
 1288 0144 DA70     		strb	r2, [r3, #3]
 291:AudioProcessor.cpp ****                     voice_active[v] = false;
 1289              		.loc 3 291 17 is_stmt 1 view .LVU421
 1290              	.LVL82:
 291:AudioProcessor.cpp ****                     voice_active[v] = false;
 1291              		.loc 3 291 31 view .LVU422
 1292              	.LBE222:
 295:AudioProcessor.cpp ****                     voice_active[0] = true;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 43


 1293              		.loc 3 295 17 view .LVU423
 1294 0146 4A1C     		adds	r2, r1, #1
 1295 0148 ECD0     		beq	.L73
 296:AudioProcessor.cpp ****                     voice_note[0] = voice_note[source_voice];
 1296              		.loc 3 296 21 view .LVU424
 296:AudioProcessor.cpp ****                     voice_note[0] = voice_note[source_voice];
 1297              		.loc 3 296 37 is_stmt 0 view .LVU425
 1298 014a 0122     		movs	r2, #1
 299:AudioProcessor.cpp ****                     voice_envelopes[source_voice].Reset();
 1299              		.loc 3 299 40 view .LVU426
 1300 014c 1E48     		ldr	r0, .L86+88
 296:AudioProcessor.cpp ****                     voice_note[0] = voice_note[source_voice];
 1301              		.loc 3 296 37 view .LVU427
 1302 014e 1A70     		strb	r2, [r3]
 297:AudioProcessor.cpp ****                     // Transfer envelope state to voice 0 so level stays consistent.
 1303              		.loc 3 297 21 is_stmt 1 view .LVU428
 297:AudioProcessor.cpp ****                     // Transfer envelope state to voice 0 so level stays consistent.
 1304              		.loc 3 297 60 is_stmt 0 view .LVU429
 1305 0150 1E4B     		ldr	r3, .L86+92
 1306 0152 03EB8102 		add	r2, r3, r1, lsl #2
 1307 0156 1268     		ldr	r2, [r2]	@ float
 297:AudioProcessor.cpp ****                     // Transfer envelope state to voice 0 so level stays consistent.
 1308              		.loc 3 297 35 view .LVU430
 1309 0158 1A60     		str	r2, [r3]	@ float
 299:AudioProcessor.cpp ****                     voice_envelopes[source_voice].Reset();
 1310              		.loc 3 299 21 is_stmt 1 view .LVU431
 299:AudioProcessor.cpp ****                     voice_envelopes[source_voice].Reset();
 1311              		.loc 3 299 40 is_stmt 0 view .LVU432
 1312 015a 4422     		movs	r2, #68
 1313 015c 02FB0104 		mla	r4, r2, r1, r0
 1314              	.LVL83:
 299:AudioProcessor.cpp ****                     voice_envelopes[source_voice].Reset();
 1315              		.loc 3 299 40 view .LVU433
 1316 0160 2146     		mov	r1, r4
 1317              	.LVL84:
 299:AudioProcessor.cpp ****                     voice_envelopes[source_voice].Reset();
 1318              		.loc 3 299 40 view .LVU434
 1319 0162 FFF7FEFF 		bl	memcpy
 1320              	.LVL85:
 300:AudioProcessor.cpp ****                 }
 1321              		.loc 3 300 21 is_stmt 1 view .LVU435
 300:AudioProcessor.cpp ****                 }
 1322              		.loc 3 300 56 is_stmt 0 view .LVU436
 1323 0166 2046     		mov	r0, r4
 1324 0168 FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 1325              	.LVL86:
 1326 016c DAE7     		b	.L73
 1327              	.L87:
 1328 016e 00BF     		.align	2
 1329              	.L86:
 1330 0170 00000000 		.word	button
 1331 0174 00000000 		.word	delay_time_knob
 1332 0178 00000000 		.word	delay_mix_feedback_knob
 1333 017c 00000000 		.word	env_release_knob
 1334 0180 00000000 		.word	env_attack_knob
 1335 0184 00000000 		.word	timbre_knob
 1336 0188 00000000 		.word	harmonics_knob
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 44


 1337 018c 00000000 		.word	morph_knob
 1338 0190 00000000 		.word	pitch_knob
 1339 0194 00000000 		.word	arp_pad
 1340 0198 00000000 		.word	model_prev_pad
 1341 019c 00000000 		.word	model_next_pad
 1342 01a0 00000000 		.word	mod_wheel
 1343 01a4 18000000 		.word	hw+24
 1344 01a8 00000000 		.word	.LANCHOR2
 1345 01ac 00000000 		.word	.LANCHOR3
 1346 01b0 00000000 		.word	.LANCHOR4
 1347 01b4 00000000 		.word	MAX_ENGINE_INDEX
 1348 01b8 00000000 		.word	.LANCHOR5
 1349 01bc 00000000 		.word	.LANCHOR6
 1350 01c0 00000000 		.word	.LANCHOR7
 1351 01c4 00000000 		.word	voice_active
 1352 01c8 00000000 		.word	voice_envelopes
 1353 01cc 00000000 		.word	voice_note
 1354              	.LBE220:
 1355              	.LBE223:
 1356              	.LBE226:
 1357              	.LBE228:
 1358              	.LBE231:
 1359              		.cfi_endproc
 1360              	.LFE5346:
 1362              		.section	.text._Z14ReadKnobValuesv,"ax",%progbits
 1363              		.align	1
 1364              		.global	_Z14ReadKnobValuesv
 1365              		.syntax unified
 1366              		.thumb
 1367              		.thumb_func
 1369              	_Z14ReadKnobValuesv:
 1370              	.LFB5347:
 312:AudioProcessor.cpp **** 
 313:AudioProcessor.cpp **** void ReadKnobValues() {
 1371              		.loc 3 313 23 is_stmt 1 view -0
 1372              		.cfi_startproc
 1373              		@ args = 0, pretend = 0, frame = 0
 1374              		@ frame_needed = 0, uses_anonymous_args = 0
 1375              		@ link register save eliminated.
 314:AudioProcessor.cpp ****     delay_time_val = delay_time_knob.Value();           // ADC 0
 1376              		.loc 3 314 5 view .LVU438
 1377              	.LVL87:
 1378              	.LBB232:
 1379              	.LBI232:
 1380              		.loc 4 56 18 view .LVU439
 1381              	.LBB233:
 1382              		.loc 4 56 34 view .LVU440
 1383              		.loc 4 56 41 is_stmt 0 view .LVU441
 1384 0000 124B     		ldr	r3, .L89
 1385              	.LBE233:
 1386              	.LBE232:
 1387              		.loc 3 314 20 view .LVU442
 1388 0002 DA68     		ldr	r2, [r3, #12]	@ float
 1389 0004 124B     		ldr	r3, .L89+4
 1390 0006 1A60     		str	r2, [r3]	@ float
 315:AudioProcessor.cpp ****     delay_mix_feedback_val = delay_mix_feedback_knob.Value(); // ADC 1 (Combined)
 1391              		.loc 3 315 5 is_stmt 1 view .LVU443
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 45


 1392              	.LVL88:
 1393              	.LBB234:
 1394              	.LBI234:
 1395              		.loc 4 56 18 view .LVU444
 1396              	.LBB235:
 1397              		.loc 4 56 34 view .LVU445
 1398              		.loc 4 56 41 is_stmt 0 view .LVU446
 1399 0008 124B     		ldr	r3, .L89+8
 1400              	.LBE235:
 1401              	.LBE234:
 1402              		.loc 3 315 28 view .LVU447
 1403 000a 134A     		ldr	r2, .L89+12
 1404              	.LBB237:
 1405              	.LBB236:
 1406              		.loc 4 56 41 view .LVU448
 1407 000c DB68     		ldr	r3, [r3, #12]	@ float
 1408              	.LVL89:
 1409              		.loc 4 56 41 view .LVU449
 1410              	.LBE236:
 1411              	.LBE237:
 1412              		.loc 3 315 28 view .LVU450
 1413 000e 1360     		str	r3, [r2]	@ float
 316:AudioProcessor.cpp ****     env_release_val = env_release_knob.Value();       // ADC 2
 1414              		.loc 3 316 5 is_stmt 1 view .LVU451
 1415              	.LVL90:
 1416              	.LBB238:
 1417              	.LBI238:
 1418              		.loc 4 56 18 view .LVU452
 1419              	.LBB239:
 1420              		.loc 4 56 34 view .LVU453
 1421              		.loc 4 56 41 is_stmt 0 view .LVU454
 1422 0010 124A     		ldr	r2, .L89+16
 1423              	.LBE239:
 1424              	.LBE238:
 1425              		.loc 3 316 21 view .LVU455
 1426 0012 D168     		ldr	r1, [r2, #12]	@ float
 1427 0014 124A     		ldr	r2, .L89+20
 1428 0016 1160     		str	r1, [r2]	@ float
 317:AudioProcessor.cpp ****     env_attack_val = env_attack_knob.Value();        // ADC 3
 1429              		.loc 3 317 5 is_stmt 1 view .LVU456
 1430              	.LVL91:
 1431              	.LBB240:
 1432              	.LBI240:
 1433              		.loc 4 56 18 view .LVU457
 1434              	.LBB241:
 1435              		.loc 4 56 34 view .LVU458
 1436              		.loc 4 56 41 is_stmt 0 view .LVU459
 1437 0018 124A     		ldr	r2, .L89+24
 1438              	.LBE241:
 1439              	.LBE240:
 1440              		.loc 3 317 20 view .LVU460
 1441 001a D168     		ldr	r1, [r2, #12]	@ float
 1442 001c 124A     		ldr	r2, .L89+28
 1443 001e 1160     		str	r1, [r2]	@ float
 318:AudioProcessor.cpp ****     timbre_knob_val = timbre_knob.Value();            // ADC 4
 1444              		.loc 3 318 5 is_stmt 1 view .LVU461
 1445              	.LVL92:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 46


 1446              	.LBB242:
 1447              	.LBI242:
 1448              		.loc 4 56 18 view .LVU462
 1449              	.LBB243:
 1450              		.loc 4 56 34 view .LVU463
 1451              		.loc 4 56 41 is_stmt 0 view .LVU464
 1452 0020 124A     		ldr	r2, .L89+32
 1453              	.LBE243:
 1454              	.LBE242:
 1455              		.loc 3 318 21 view .LVU465
 1456 0022 D168     		ldr	r1, [r2, #12]	@ float
 1457 0024 124A     		ldr	r2, .L89+36
 1458 0026 1160     		str	r1, [r2]	@ float
 319:AudioProcessor.cpp ****     harm_knob_val = harmonics_knob.Value();         // ADC 5
 1459              		.loc 3 319 5 is_stmt 1 view .LVU466
 1460              	.LVL93:
 1461              	.LBB244:
 1462              	.LBI244:
 1463              		.loc 4 56 18 view .LVU467
 1464              	.LBB245:
 1465              		.loc 4 56 34 view .LVU468
 1466              		.loc 4 56 41 is_stmt 0 view .LVU469
 1467 0028 124A     		ldr	r2, .L89+40
 1468              	.LBE245:
 1469              	.LBE244:
 1470              		.loc 3 319 19 view .LVU470
 1471 002a D168     		ldr	r1, [r2, #12]	@ float
 1472 002c 124A     		ldr	r2, .L89+44
 1473 002e 1160     		str	r1, [r2]	@ float
 320:AudioProcessor.cpp ****     morph_knob_val = morph_knob.Value();             // ADC 6
 1474              		.loc 3 320 5 is_stmt 1 view .LVU471
 1475              	.LVL94:
 1476              	.LBB246:
 1477              	.LBI246:
 1478              		.loc 4 56 18 view .LVU472
 1479              	.LBB247:
 1480              		.loc 4 56 34 view .LVU473
 1481              		.loc 4 56 41 is_stmt 0 view .LVU474
 1482 0030 124A     		ldr	r2, .L89+48
 1483              	.LBE247:
 1484              	.LBE246:
 1485              		.loc 3 320 20 view .LVU475
 1486 0032 D168     		ldr	r1, [r2, #12]	@ float
 1487 0034 124A     		ldr	r2, .L89+52
 1488 0036 1160     		str	r1, [r2]	@ float
 321:AudioProcessor.cpp ****     pitch_val = pitch_knob.Value();                 // ADC 7
 1489              		.loc 3 321 5 is_stmt 1 view .LVU476
 1490              	.LVL95:
 1491              	.LBB248:
 1492              	.LBI248:
 1493              		.loc 4 56 18 view .LVU477
 1494              	.LBB249:
 1495              		.loc 4 56 34 view .LVU478
 1496              		.loc 4 56 41 is_stmt 0 view .LVU479
 1497 0038 124A     		ldr	r2, .L89+56
 1498              	.LBE249:
 1499              	.LBE248:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 47


 1500              		.loc 3 321 15 view .LVU480
 1501 003a D168     		ldr	r1, [r2, #12]	@ float
 1502 003c 124A     		ldr	r2, .L89+60
 1503 003e 1160     		str	r1, [r2]	@ float
 322:AudioProcessor.cpp **** 
 323:AudioProcessor.cpp ****     // Derive separate mix and feedback values from the combined knob
 324:AudioProcessor.cpp ****     // Simple approach: use the same value for both
 325:AudioProcessor.cpp ****     delay_mix_val = delay_mix_feedback_val;
 1504              		.loc 3 325 5 is_stmt 1 view .LVU481
 1505              		.loc 3 325 19 is_stmt 0 view .LVU482
 1506 0040 124A     		ldr	r2, .L89+64
 1507 0042 1360     		str	r3, [r2]	@ float
 326:AudioProcessor.cpp ****     delay_feedback_val = delay_mix_feedback_val;
 1508              		.loc 3 326 5 is_stmt 1 view .LVU483
 1509              		.loc 3 326 24 is_stmt 0 view .LVU484
 1510 0044 124A     		ldr	r2, .L89+68
 1511 0046 1360     		str	r3, [r2]	@ float
 327:AudioProcessor.cpp **** }
 1512              		.loc 3 327 1 view .LVU485
 1513 0048 7047     		bx	lr
 1514              	.L90:
 1515 004a 00BF     		.align	2
 1516              	.L89:
 1517 004c 00000000 		.word	delay_time_knob
 1518 0050 00000000 		.word	.LANCHOR8
 1519 0054 00000000 		.word	delay_mix_feedback_knob
 1520 0058 00000000 		.word	.LANCHOR9
 1521 005c 00000000 		.word	env_release_knob
 1522 0060 00000000 		.word	.LANCHOR1
 1523 0064 00000000 		.word	env_attack_knob
 1524 0068 00000000 		.word	.LANCHOR0
 1525 006c 00000000 		.word	timbre_knob
 1526 0070 00000000 		.word	.LANCHOR10
 1527 0074 00000000 		.word	harmonics_knob
 1528 0078 00000000 		.word	.LANCHOR11
 1529 007c 00000000 		.word	morph_knob
 1530 0080 00000000 		.word	.LANCHOR12
 1531 0084 00000000 		.word	pitch_knob
 1532 0088 00000000 		.word	.LANCHOR13
 1533 008c 00000000 		.word	.LANCHOR14
 1534 0090 00000000 		.word	.LANCHOR15
 1535              		.cfi_endproc
 1536              	.LFE5347:
 1538              		.section	.text._Z16ResetVoiceStatesv,"ax",%progbits
 1539              		.align	1
 1540              		.global	_Z16ResetVoiceStatesv
 1541              		.syntax unified
 1542              		.thumb
 1543              		.thumb_func
 1545              	_Z16ResetVoiceStatesv:
 1546              	.LFB5348:
 328:AudioProcessor.cpp **** 
 329:AudioProcessor.cpp **** void ResetVoiceStates() {
 1547              		.loc 3 329 25 is_stmt 1 view -0
 1548              		.cfi_startproc
 1549              		@ args = 0, pretend = 0, frame = 0
 1550              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 48


 330:AudioProcessor.cpp ****     // Force reset all voice states to prevent stuck notes
 331:AudioProcessor.cpp ****     for (int v = 0; v < NUM_VOICES; v++) {
 1551              		.loc 3 331 5 view .LVU487
 1552              	.LVL96:
 1553              	.LBB250:
 1554              		.loc 3 331 23 view .LVU488
 1555              	.LBE250:
 329:AudioProcessor.cpp ****     // Force reset all voice states to prevent stuck notes
 1556              		.loc 3 329 25 is_stmt 0 view .LVU489
 1557 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1558              		.cfi_def_cfa_offset 24
 1559              		.cfi_offset 3, -24
 1560              		.cfi_offset 4, -20
 1561              		.cfi_offset 5, -16
 1562              		.cfi_offset 6, -12
 1563              		.cfi_offset 7, -8
 1564              		.cfi_offset 14, -4
 1565 0002 0B4E     		ldr	r6, .L94
 1566              	.LBB251:
 1567              		.loc 3 331 14 view .LVU490
 1568 0004 0024     		movs	r4, #0
 1569 0006 0B4F     		ldr	r7, .L94+4
 1570 0008 0B4D     		ldr	r5, .L94+8
 1571              	.LVL97:
 1572              	.L92:
 332:AudioProcessor.cpp ****         // Reset the envelope to IDLE state
 333:AudioProcessor.cpp ****         voice_envelopes[v].Reset();
 1573              		.loc 3 333 9 is_stmt 1 discriminator 2 view .LVU491
 1574              		.loc 3 333 33 is_stmt 0 discriminator 2 view .LVU492
 1575 000a 3046     		mov	r0, r6
 331:AudioProcessor.cpp ****         // Reset the envelope to IDLE state
 1576              		.loc 3 331 5 discriminator 2 view .LVU493
 1577 000c 0134     		adds	r4, r4, #1
 1578              	.LVL98:
 1579              		.loc 3 333 33 discriminator 2 view .LVU494
 1580 000e FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 1581              	.LVL99:
 334:AudioProcessor.cpp ****         
 335:AudioProcessor.cpp ****         // Clear active flag
 336:AudioProcessor.cpp ****         voice_active[v] = false;
 1582              		.loc 3 336 9 is_stmt 1 discriminator 2 view .LVU495
 1583              		.loc 3 336 25 is_stmt 0 discriminator 2 view .LVU496
 1584 0012 0023     		movs	r3, #0
 331:AudioProcessor.cpp ****         // Reset the envelope to IDLE state
 1585              		.loc 3 331 23 discriminator 2 view .LVU497
 1586 0014 042C     		cmp	r4, #4
 1587 0016 06F14406 		add	r6, r6, #68
 1588              		.loc 3 336 25 discriminator 2 view .LVU498
 1589 001a 07F8013B 		strb	r3, [r7], #1
 337:AudioProcessor.cpp ****         
 338:AudioProcessor.cpp ****         // Make sure triggers are off
 339:AudioProcessor.cpp ****         modulations[v].trigger = 0.0f;
 1590              		.loc 3 339 9 is_stmt 1 discriminator 2 view .LVU499
 1591              		.loc 3 339 32 is_stmt 0 discriminator 2 view .LVU500
 1592 001e 4FF00003 		mov	r3, #0
 331:AudioProcessor.cpp ****         // Reset the envelope to IDLE state
 1593              		.loc 3 331 23 discriminator 2 view .LVU501
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 49


 1594 0022 05F12805 		add	r5, r5, #40
 1595              		.loc 3 339 32 discriminator 2 view .LVU502
 1596 0026 45F8103C 		str	r3, [r5, #-16]	@ float
 331:AudioProcessor.cpp ****         // Reset the envelope to IDLE state
 1597              		.loc 3 331 5 is_stmt 1 discriminator 2 view .LVU503
 1598              	.LVL100:
 331:AudioProcessor.cpp ****         // Reset the envelope to IDLE state
 1599              		.loc 3 331 23 discriminator 2 view .LVU504
 1600 002a EED1     		bne	.L92
 1601              	.LBE251:
 340:AudioProcessor.cpp ****     }
 341:AudioProcessor.cpp **** }
 1602              		.loc 3 341 1 is_stmt 0 view .LVU505
 1603 002c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1604              	.LVL101:
 1605              	.L95:
 1606              		.loc 3 341 1 view .LVU506
 1607 002e 00BF     		.align	2
 1608              	.L94:
 1609 0030 00000000 		.word	voice_envelopes
 1610 0034 00000000 		.word	voice_active
 1611 0038 00000000 		.word	modulations
 1612              		.cfi_endproc
 1613              	.LFE5348:
 1615              		.section	.text._Z23DetermineEngineSettingsv,"ax",%progbits
 1616              		.align	1
 1617              		.global	_Z23DetermineEngineSettingsv
 1618              		.syntax unified
 1619              		.thumb
 1620              		.thumb_func
 1622              	_Z23DetermineEngineSettingsv:
 1623              	.LFB5349:
 342:AudioProcessor.cpp **** 
 343:AudioProcessor.cpp **** int DetermineEngineSettings() {
 1624              		.loc 3 343 31 is_stmt 1 view -0
 1625              		.cfi_startproc
 1626              		@ args = 0, pretend = 0, frame = 0
 1627              		@ frame_needed = 0, uses_anonymous_args = 0
 1628              		@ link register save eliminated.
 344:AudioProcessor.cpp ****     return current_engine_index;
 1629              		.loc 3 344 5 view .LVU508
 1630              		.loc 3 344 12 is_stmt 0 view .LVU509
 1631 0000 014B     		ldr	r3, .L97
 1632 0002 1868     		ldr	r0, [r3]
 345:AudioProcessor.cpp **** }
 1633              		.loc 3 345 1 view .LVU510
 1634 0004 7047     		bx	lr
 1635              	.L98:
 1636 0006 00BF     		.align	2
 1637              	.L97:
 1638 0008 00000000 		.word	.LANCHOR4
 1639              		.cfi_endproc
 1640              	.LFE5349:
 1642              		.section	.text._Z16HandleTouchInputibi,"ax",%progbits
 1643              		.align	1
 1644              		.global	_Z16HandleTouchInputibi
 1645              		.syntax unified
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 50


 1646              		.thumb
 1647              		.thumb_func
 1649              	_Z16HandleTouchInputibi:
 1650              	.LVL102:
 1651              	.LFB5350:
 346:AudioProcessor.cpp **** 
 347:AudioProcessor.cpp **** void HandleTouchInput(int engineIndex, bool poly_mode, int effective_num_voices) {
 1652              		.loc 3 347 82 is_stmt 1 view -0
 1653              		.cfi_startproc
 1654              		@ args = 0, pretend = 0, frame = 0
 1655              		@ frame_needed = 0, uses_anonymous_args = 0
 348:AudioProcessor.cpp ****     // Determine if the selected engine is percussive (uses internal envelope)
 349:AudioProcessor.cpp ****     bool percussiveEngine = engineIndex > 7;
 1656              		.loc 3 349 5 view .LVU512
 347:AudioProcessor.cpp ****     // Determine if the selected engine is percussive (uses internal envelope)
 1657              		.loc 3 347 82 is_stmt 0 view .LVU513
 1658 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1659              		.cfi_def_cfa_offset 40
 1660              		.cfi_offset 3, -40
 1661              		.cfi_offset 4, -36
 1662              		.cfi_offset 5, -32
 1663              		.cfi_offset 6, -28
 1664              		.cfi_offset 7, -24
 1665              		.cfi_offset 8, -20
 1666              		.cfi_offset 9, -16
 1667              		.cfi_offset 10, -12
 1668              		.cfi_offset 11, -8
 1669              		.cfi_offset 14, -4
 350:AudioProcessor.cpp ****     uint16_t local_current_touch_state = current_touch_state;
 1670              		.loc 3 350 42 view .LVU514
 1671 0004 3D4B     		ldr	r3, .L124
 347:AudioProcessor.cpp ****     // Determine if the selected engine is percussive (uses internal envelope)
 1672              		.loc 3 347 82 view .LVU515
 1673 0006 0746     		mov	r7, r0
 1674              	.LVL103:
 1675              		.loc 3 350 5 is_stmt 1 view .LVU516
 347:AudioProcessor.cpp ****     // Determine if the selected engine is percussive (uses internal envelope)
 1676              		.loc 3 347 82 is_stmt 0 view .LVU517
 1677 0008 0D46     		mov	r5, r1
 1678 000a 9046     		mov	r8, r2
 1679              		.loc 3 350 42 view .LVU518
 1680 000c 1E88     		ldrh	r6, [r3]
 1681              	.LBB252:
 351:AudioProcessor.cpp ****     for (int i = 0; i < 12; ++i) {
 1682              		.loc 3 351 14 view .LVU519
 1683 000e 0024     		movs	r4, #0
 1684 0010 DFF800A1 		ldr	r10, .L124+24
 1685              	.LBE252:
 350:AudioProcessor.cpp ****     uint16_t local_current_touch_state = current_touch_state;
 1686              		.loc 3 350 42 view .LVU520
 1687 0014 B6B2     		uxth	r6, r6
 1688              	.LVL104:
 1689              		.loc 3 351 5 is_stmt 1 view .LVU521
 1690              	.LBB271:
 1691              		.loc 3 351 23 view .LVU522
 1692              	.LBE271:
 347:AudioProcessor.cpp ****     // Determine if the selected engine is percussive (uses internal envelope)
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 51


 1693              		.loc 3 347 82 is_stmt 0 view .LVU523
 1694 0016 2DED028B 		vpush.64	{d8}
 1695              		.cfi_def_cfa_offset 48
 1696              		.cfi_offset 80, -48
 1697              		.cfi_offset 81, -44
 1698              	.LVL105:
 1699              	.L108:
 1700              	.LBB272:
 1701              	.LBB253:
 352:AudioProcessor.cpp ****         bool pad_currently_pressed = (local_current_touch_state >> i) & 1;
 1702              		.loc 3 352 9 is_stmt 1 view .LVU524
 353:AudioProcessor.cpp ****         bool pad_was_pressed = (last_touch_state >> i) & 1;
 1703              		.loc 3 353 9 view .LVU525
 1704              		.loc 3 353 33 is_stmt 0 view .LVU526
 1705 001a DFF8FC90 		ldr	r9, .L124+28
 352:AudioProcessor.cpp ****         bool pad_currently_pressed = (local_current_touch_state >> i) & 1;
 1706              		.loc 3 352 65 view .LVU527
 1707 001e 46FA04F2 		asr	r2, r6, r4
 354:AudioProcessor.cpp ****         float note_for_pad = kTouchMidiNotes[i];
 1708              		.loc 3 354 15 view .LVU528
 1709 0022 BAEC018A 		vldmia.32	r10!, {s16}
 353:AudioProcessor.cpp ****         bool pad_was_pressed = (last_touch_state >> i) & 1;
 1710              		.loc 3 353 33 view .LVU529
 1711 0026 B9F80030 		ldrh	r3, [r9]
 1712              	.LBB254:
 355:AudioProcessor.cpp **** 
 356:AudioProcessor.cpp ****         if (pad_currently_pressed && !pad_was_pressed) { 
 1713              		.loc 3 356 9 view .LVU530
 1714 002a 12F0010B 		ands	fp, r2, #1
 1715              	.LBE254:
 353:AudioProcessor.cpp ****         float note_for_pad = kTouchMidiNotes[i];
 1716              		.loc 3 353 50 view .LVU531
 1717 002e 43FA04F3 		asr	r3, r3, r4
 353:AudioProcessor.cpp ****         float note_for_pad = kTouchMidiNotes[i];
 1718              		.loc 3 353 56 view .LVU532
 1719 0032 03F00103 		and	r3, r3, #1
 1720              	.LVL106:
 354:AudioProcessor.cpp ****         float note_for_pad = kTouchMidiNotes[i];
 1721              		.loc 3 354 9 is_stmt 1 view .LVU533
 1722              		.loc 3 356 9 view .LVU534
 1723              	.LBB262:
 1724 0036 38D0     		beq	.L100
 1725              		.loc 3 356 35 is_stmt 0 discriminator 1 view .LVU535
 1726 0038 03BB     		cbnz	r3, .L102
 1727              	.LBE262:
 1728              	.LBE253:
 1729              	.LBE272:
 357:AudioProcessor.cpp ****             if (poly_mode) {
 1730              		.loc 3 357 13 is_stmt 1 view .LVU536
 1731              	.LBB273:
 1732              	.LBB267:
 1733              	.LBB263:
 1734              	.LBB255:
 1735 003a 45B3     		cbz	r5, .L103
 1736              	.LBB256:
 358:AudioProcessor.cpp ****                 int voice_idx = FindAvailableVoice(effective_num_voices); 
 1737              		.loc 3 358 17 view .LVU537
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 52


 1738              		.loc 3 358 51 is_stmt 0 view .LVU538
 1739 003c 4046     		mov	r0, r8
 1740 003e FFF7FEFF 		bl	_Z18FindAvailableVoicei
 1741              	.LVL107:
 359:AudioProcessor.cpp ****                 if (voice_idx != -1) {
 1742              		.loc 3 359 17 view .LVU539
 1743 0042 421C     		adds	r2, r0, #1
 358:AudioProcessor.cpp ****                 int voice_idx = FindAvailableVoice(effective_num_voices); 
 1744              		.loc 3 358 51 view .LVU540
 1745 0044 0346     		mov	r3, r0
 1746              	.LVL108:
 1747              		.loc 3 359 17 is_stmt 1 view .LVU541
 1748 0046 19D0     		beq	.L102
 360:AudioProcessor.cpp ****                     voice_note[voice_idx] = note_for_pad;
 1749              		.loc 3 360 21 view .LVU542
 1750              		.loc 3 360 43 is_stmt 0 view .LVU543
 1751 0048 2D4A     		ldr	r2, .L124+4
 361:AudioProcessor.cpp ****                     voice_active[voice_idx] = true;
 1752              		.loc 3 361 45 view .LVU544
 1753 004a 0121     		movs	r1, #1
 362:AudioProcessor.cpp ****                     modulations[voice_idx].trigger = 1.0f; // For initial transient
 363:AudioProcessor.cpp ****                     // Patch the trigger if this is a percussive engine
 364:AudioProcessor.cpp ****                     if (percussiveEngine) modulations[voice_idx].trigger_patched = true;
 1754              		.loc 3 364 21 view .LVU545
 1755 004c 072F     		cmp	r7, #7
 360:AudioProcessor.cpp ****                     voice_active[voice_idx] = true;
 1756              		.loc 3 360 43 view .LVU546
 1757 004e 02EB8002 		add	r2, r2, r0, lsl #2
 1758 0052 82ED008A 		vstr.32	s16, [r2]
 361:AudioProcessor.cpp ****                     voice_active[voice_idx] = true;
 1759              		.loc 3 361 21 is_stmt 1 view .LVU547
 361:AudioProcessor.cpp ****                     voice_active[voice_idx] = true;
 1760              		.loc 3 361 45 is_stmt 0 view .LVU548
 1761 0056 2B4A     		ldr	r2, .L124+8
 1762 0058 1154     		strb	r1, [r2, r0]
 362:AudioProcessor.cpp ****                     modulations[voice_idx].trigger = 1.0f; // For initial transient
 1763              		.loc 3 362 21 is_stmt 1 view .LVU549
 362:AudioProcessor.cpp ****                     modulations[voice_idx].trigger = 1.0f; // For initial transient
 1764              		.loc 3 362 52 is_stmt 0 view .LVU550
 1765 005a 4FF02800 		mov	r0, #40
 1766              	.LVL109:
 362:AudioProcessor.cpp ****                     modulations[voice_idx].trigger = 1.0f; // For initial transient
 1767              		.loc 3 362 52 view .LVU551
 1768 005e 2A4A     		ldr	r2, .L124+12
 1769 0060 00FB0322 		mla	r2, r0, r3, r2
 1770 0064 4FF07E50 		mov	r0, #1065353216
 1771              		.loc 3 364 82 view .LVU552
 1772 0068 C8BF     		it	gt
 1773 006a 82F82310 		strbgt	r1, [r2, #35]
 362:AudioProcessor.cpp ****                     modulations[voice_idx].trigger = 1.0f; // For initial transient
 1774              		.loc 3 362 52 view .LVU553
 1775 006e 9061     		str	r0, [r2, #24]	@ float
 1776              		.loc 3 364 21 is_stmt 1 view .LVU554
 1777              		.loc 3 364 43 view .LVU555
 365:AudioProcessor.cpp ****                     voice_envelopes[voice_idx].Trigger(); 
 1778              		.loc 3 365 21 view .LVU556
 1779              		.loc 3 365 55 is_stmt 0 view .LVU557
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 53


 1780 0070 4420     		movs	r0, #68
 1781 0072 264A     		ldr	r2, .L124+16
 1782 0074 00FB0320 		mla	r0, r0, r3, r2
 1783 0078 FFF7FEFF 		bl	_ZN13VoiceEnvelope7TriggerEv
 1784              	.LVL110:
 1785              	.L102:
 1786              		.loc 3 365 55 view .LVU558
 1787              	.LBE256:
 1788              	.LBE255:
 1789              	.LBE263:
 1790              	.LBE267:
 351:AudioProcessor.cpp ****         bool pad_currently_pressed = (local_current_touch_state >> i) & 1;
 1791              		.loc 3 351 5 is_stmt 1 discriminator 2 view .LVU559
 1792 007c 0134     		adds	r4, r4, #1
 1793              	.LVL111:
 351:AudioProcessor.cpp ****         bool pad_currently_pressed = (local_current_touch_state >> i) & 1;
 1794              		.loc 3 351 23 discriminator 2 view .LVU560
 1795 007e 0C2C     		cmp	r4, #12
 1796 0080 CBD1     		bne	.L108
 1797              	.LBE273:
 366:AudioProcessor.cpp ****                 }
 367:AudioProcessor.cpp ****             } else { 
 368:AudioProcessor.cpp ****                 AssignMonoNote(note_for_pad);
 369:AudioProcessor.cpp ****                 // NEW: Trigger the mono voice envelope to ensure audio playback
 370:AudioProcessor.cpp ****                 voice_envelopes[0].Trigger();
 371:AudioProcessor.cpp ****                 // Patch the trigger for percussive engines
 372:AudioProcessor.cpp ****                 if (percussiveEngine) modulations[0].trigger_patched = true;
 373:AudioProcessor.cpp ****             }
 374:AudioProcessor.cpp ****         } else if (!pad_currently_pressed && pad_was_pressed) { 
 375:AudioProcessor.cpp ****             if (poly_mode) {
 376:AudioProcessor.cpp ****                  int voice_idx = FindVoice(note_for_pad, effective_num_voices);
 377:AudioProcessor.cpp ****                  if (voice_idx != -1) {
 378:AudioProcessor.cpp ****                      voice_active[voice_idx] = false; // Mark inactive for release
 379:AudioProcessor.cpp ****                      voice_envelopes[voice_idx].Release(); // Start release phase
 380:AudioProcessor.cpp ****                  }
 381:AudioProcessor.cpp ****             } else { 
 382:AudioProcessor.cpp ****                 if (voice_active[0] && fabsf(voice_note[0] - note_for_pad) < 0.1f) {
 383:AudioProcessor.cpp ****                     voice_active[0] = false; // Mark voice 0 inactive
 384:AudioProcessor.cpp ****                     // NEW: Release the mono voice envelope so it decays properly
 385:AudioProcessor.cpp ****                     voice_envelopes[0].Release();
 386:AudioProcessor.cpp ****                 }
 387:AudioProcessor.cpp ****             }
 388:AudioProcessor.cpp ****         }
 389:AudioProcessor.cpp ****     }
 390:AudioProcessor.cpp ****     last_touch_state = local_current_touch_state; // Update last state with the value used in this 
 1798              		.loc 3 390 5 view .LVU561
 391:AudioProcessor.cpp **** }
 1799              		.loc 3 391 1 is_stmt 0 view .LVU562
 1800 0082 BDEC028B 		vldm	sp!, {d8}
 1801              		.cfi_remember_state
 1802              		.cfi_restore 80
 1803              		.cfi_restore 81
 1804              		.cfi_def_cfa_offset 40
 1805              	.LVL112:
 390:AudioProcessor.cpp **** }
 1806              		.loc 3 390 22 view .LVU563
 1807 0086 A9F80060 		strh	r6, [r9]	@ movhi
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 54


 1808              		.loc 3 391 1 view .LVU564
 1809 008a BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1810              	.LVL113:
 1811              	.L103:
 1812              		.cfi_restore_state
 1813              	.LBB274:
 1814              	.LBB268:
 1815              	.LBB264:
 1816              	.LBB257:
 368:AudioProcessor.cpp ****                 // NEW: Trigger the mono voice envelope to ensure audio playback
 1817              		.loc 3 368 17 is_stmt 1 view .LVU565
 368:AudioProcessor.cpp ****                 // NEW: Trigger the mono voice envelope to ensure audio playback
 1818              		.loc 3 368 31 is_stmt 0 view .LVU566
 1819 008e B0EE480A 		vmov.f32	s0, s16
 1820 0092 FFF7FEFF 		bl	_Z14AssignMonoNotef
 1821              	.LVL114:
 370:AudioProcessor.cpp ****                 // Patch the trigger for percussive engines
 1822              		.loc 3 370 17 is_stmt 1 view .LVU567
 370:AudioProcessor.cpp ****                 // Patch the trigger for percussive engines
 1823              		.loc 3 370 43 is_stmt 0 view .LVU568
 1824 0096 1D48     		ldr	r0, .L124+16
 1825 0098 FFF7FEFF 		bl	_ZN13VoiceEnvelope7TriggerEv
 1826              	.LVL115:
 372:AudioProcessor.cpp ****             }
 1827              		.loc 3 372 17 is_stmt 1 view .LVU569
 1828 009c 072F     		cmp	r7, #7
 1829 009e EDDD     		ble	.L102
 372:AudioProcessor.cpp ****             }
 1830              		.loc 3 372 39 discriminator 1 view .LVU570
 372:AudioProcessor.cpp ****             }
 1831              		.loc 3 372 70 is_stmt 0 discriminator 1 view .LVU571
 1832 00a0 194B     		ldr	r3, .L124+12
 1833 00a2 0122     		movs	r2, #1
 1834 00a4 83F82320 		strb	r2, [r3, #35]
 1835 00a8 E8E7     		b	.L102
 1836              	.LVL116:
 1837              	.L100:
 372:AudioProcessor.cpp ****             }
 1838              		.loc 3 372 70 discriminator 1 view .LVU572
 1839              	.LBE257:
 1840              	.LBE264:
 1841              	.LBE268:
 1842              	.LBE274:
 374:AudioProcessor.cpp ****             if (poly_mode) {
 1843              		.loc 3 374 16 is_stmt 1 discriminator 1 view .LVU573
 1844              	.LBB275:
 1845              	.LBB269:
 1846              	.LBB265:
 1847              	.LBB258:
 374:AudioProcessor.cpp ****             if (poly_mode) {
 1848              		.loc 3 374 43 is_stmt 0 discriminator 1 view .LVU574
 1849 00aa 002B     		cmp	r3, #0
 1850 00ac E6D0     		beq	.L102
 1851              	.LBE258:
 1852              	.LBE265:
 1853              	.LBE269:
 1854              	.LBE275:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 55


 375:AudioProcessor.cpp ****                  int voice_idx = FindVoice(note_for_pad, effective_num_voices);
 1855              		.loc 3 375 13 is_stmt 1 view .LVU575
 1856              	.LBB276:
 1857              	.LBB270:
 1858              	.LBB266:
 1859              	.LBB261:
 1860              	.LBB259:
 1861 00ae 85B1     		cbz	r5, .L106
 1862              	.LBB260:
 376:AudioProcessor.cpp ****                  if (voice_idx != -1) {
 1863              		.loc 3 376 18 view .LVU576
 376:AudioProcessor.cpp ****                  if (voice_idx != -1) {
 1864              		.loc 3 376 43 is_stmt 0 view .LVU577
 1865 00b0 B0EE480A 		vmov.f32	s0, s16
 1866 00b4 4046     		mov	r0, r8
 1867 00b6 FFF7FEFF 		bl	_Z9FindVoicefi
 1868              	.LVL117:
 377:AudioProcessor.cpp ****                      voice_active[voice_idx] = false; // Mark inactive for release
 1869              		.loc 3 377 18 is_stmt 1 view .LVU578
 1870 00ba 431C     		adds	r3, r0, #1
 1871 00bc DED0     		beq	.L102
 378:AudioProcessor.cpp ****                      voice_envelopes[voice_idx].Release(); // Start release phase
 1872              		.loc 3 378 22 view .LVU579
 378:AudioProcessor.cpp ****                      voice_envelopes[voice_idx].Release(); // Start release phase
 1873              		.loc 3 378 46 is_stmt 0 view .LVU580
 1874 00be 114B     		ldr	r3, .L124+8
 379:AudioProcessor.cpp ****                  }
 1875              		.loc 3 379 56 view .LVU581
 1876 00c0 4422     		movs	r2, #68
 378:AudioProcessor.cpp ****                      voice_envelopes[voice_idx].Release(); // Start release phase
 1877              		.loc 3 378 46 view .LVU582
 1878 00c2 03F800B0 		strb	fp, [r3, r0]
 379:AudioProcessor.cpp ****                  }
 1879              		.loc 3 379 22 is_stmt 1 view .LVU583
 379:AudioProcessor.cpp ****                  }
 1880              		.loc 3 379 56 is_stmt 0 view .LVU584
 1881 00c6 114B     		ldr	r3, .L124+16
 1882 00c8 02FB0030 		mla	r0, r2, r0, r3
 1883              	.LVL118:
 1884              	.L123:
 379:AudioProcessor.cpp ****                  }
 1885              		.loc 3 379 56 view .LVU585
 1886              	.LBE260:
 385:AudioProcessor.cpp ****                 }
 1887              		.loc 3 385 47 view .LVU586
 1888 00cc FFF7FEFF 		bl	_ZN13VoiceEnvelope7ReleaseEv
 1889              	.LVL119:
 1890 00d0 D4E7     		b	.L102
 1891              	.LVL120:
 1892              	.L106:
 382:AudioProcessor.cpp ****                     voice_active[0] = false; // Mark voice 0 inactive
 1893              		.loc 3 382 17 is_stmt 1 view .LVU587
 382:AudioProcessor.cpp ****                     voice_active[0] = false; // Mark voice 0 inactive
 1894              		.loc 3 382 35 is_stmt 0 view .LVU588
 1895 00d2 0C4B     		ldr	r3, .L124+8
 1896              	.LVL121:
 382:AudioProcessor.cpp ****                     voice_active[0] = false; // Mark voice 0 inactive
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 56


 1897              		.loc 3 382 17 view .LVU589
 1898 00d4 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1899 00d6 002A     		cmp	r2, #0
 1900 00d8 D0D0     		beq	.L102
 382:AudioProcessor.cpp ****                     voice_active[0] = false; // Mark voice 0 inactive
 1901              		.loc 3 382 58 discriminator 1 view .LVU590
 1902 00da 094A     		ldr	r2, .L124+4
 382:AudioProcessor.cpp ****                     voice_active[0] = false; // Mark voice 0 inactive
 1903              		.loc 3 382 37 discriminator 1 view .LVU591
 1904 00dc 9FED0C7A 		vldr.32	s14, .L124+20
 382:AudioProcessor.cpp ****                     voice_active[0] = false; // Mark voice 0 inactive
 1905              		.loc 3 382 60 discriminator 1 view .LVU592
 1906 00e0 D2ED007A 		vldr.32	s15, [r2]
 1907 00e4 77EEC87A 		vsub.f32	s15, s15, s16
 382:AudioProcessor.cpp ****                     voice_active[0] = false; // Mark voice 0 inactive
 1908              		.loc 3 382 45 discriminator 1 view .LVU593
 1909 00e8 F0EEE77A 		vabs.f32	s15, s15
 382:AudioProcessor.cpp ****                     voice_active[0] = false; // Mark voice 0 inactive
 1910              		.loc 3 382 37 discriminator 1 view .LVU594
 1911 00ec F4EEC77A 		vcmpe.f32	s15, s14
 1912 00f0 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1913 00f4 C2D5     		bpl	.L102
 383:AudioProcessor.cpp ****                     // NEW: Release the mono voice envelope so it decays properly
 1914              		.loc 3 383 21 is_stmt 1 view .LVU595
 385:AudioProcessor.cpp ****                 }
 1915              		.loc 3 385 47 is_stmt 0 view .LVU596
 1916 00f6 0548     		ldr	r0, .L124+16
 383:AudioProcessor.cpp ****                     // NEW: Release the mono voice envelope so it decays properly
 1917              		.loc 3 383 37 view .LVU597
 1918 00f8 1D70     		strb	r5, [r3]
 385:AudioProcessor.cpp ****                 }
 1919              		.loc 3 385 21 is_stmt 1 view .LVU598
 1920 00fa E7E7     		b	.L123
 1921              	.L125:
 1922              		.align	2
 1923              	.L124:
 1924 00fc 00000000 		.word	current_touch_state
 1925 0100 00000000 		.word	voice_note
 1926 0104 00000000 		.word	voice_active
 1927 0108 00000000 		.word	modulations
 1928 010c 00000000 		.word	voice_envelopes
 1929 0110 CDCCCC3D 		.word	1036831949
 1930 0114 00000000 		.word	kTouchMidiNotes
 1931 0118 00000000 		.word	last_touch_state
 1932              	.LBE259:
 1933              	.LBE261:
 1934              	.LBE266:
 1935              	.LBE270:
 1936              	.LBE276:
 1937              		.cfi_endproc
 1938              	.LFE5350:
 1940              		.section	.text._Z22ConfigureDelaySettingsv,"ax",%progbits
 1941              		.align	1
 1942              		.global	_Z22ConfigureDelaySettingsv
 1943              		.syntax unified
 1944              		.thumb
 1945              		.thumb_func
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 57


 1947              	_Z22ConfigureDelaySettingsv:
 1948              	.LFB5351:
 392:AudioProcessor.cpp **** 
 393:AudioProcessor.cpp **** void ConfigureDelaySettings() {
 1949              		.loc 3 393 31 view -0
 1950              		.cfi_startproc
 1951              		@ args = 0, pretend = 0, frame = 0
 1952              		@ frame_needed = 0, uses_anonymous_args = 0
 1953              		@ link register save eliminated.
 394:AudioProcessor.cpp ****     // Use delay_feedback_val derived from ADC 1
 395:AudioProcessor.cpp ****     delay.SetFeedback(delay_feedback_val * 0.98f); 
 1954              		.loc 3 395 5 view .LVU600
 1955              	.LVL122:
 1956              	.LBB277:
 1957              	.LBI277:
 1958              		.file 5 "Effects/EchoDelay.h"
   1:Effects/EchoDelay.h **** #pragma once
   2:Effects/EchoDelay.h **** #ifndef INFS_ECHODELAY_H
   3:Effects/EchoDelay.h **** #define INFS_ECHODELAY_H
   4:Effects/EchoDelay.h **** 
   5:Effects/EchoDelay.h **** #include <daisysp.h>
   6:Effects/EchoDelay.h **** #include "BiquadFilters.h"
   7:Effects/EchoDelay.h **** #include "DSPUtils.h"
   8:Effects/EchoDelay.h **** 
   9:Effects/EchoDelay.h **** namespace infrasonic {
  10:Effects/EchoDelay.h **** 
  11:Effects/EchoDelay.h **** /**
  12:Effects/EchoDelay.h ****  * @brief
  13:Effects/EchoDelay.h ****  * Tape-ish echo delay.
  14:Effects/EchoDelay.h ****  *   - Feedback is unbounded, but signal is soft-clipped
  15:Effects/EchoDelay.h ****  *   - Output is full-wet, should be mixed with dry signal externally
  16:Effects/EchoDelay.h ****  *
  17:Effects/EchoDelay.h ****  * @tparam MaxLength Max length of delay in samples
  18:Effects/EchoDelay.h ****  */
  19:Effects/EchoDelay.h **** template<size_t MaxLength>
  20:Effects/EchoDelay.h **** class EchoDelay {
  21:Effects/EchoDelay.h **** 
  22:Effects/EchoDelay.h ****     public:
  23:Effects/EchoDelay.h **** 
  24:Effects/EchoDelay.h ****         EchoDelay() {}
  25:Effects/EchoDelay.h ****         ~EchoDelay() {}
  26:Effects/EchoDelay.h **** 
  27:Effects/EchoDelay.h ****         void Init(float sample_rate)
  28:Effects/EchoDelay.h ****         {
  29:Effects/EchoDelay.h ****             sample_rate_ = sample_rate;
  30:Effects/EchoDelay.h ****             delayLine_.Init();
  31:Effects/EchoDelay.h ****             bpf_.Init(sample_rate);
  32:Effects/EchoDelay.h ****             bpf_.SetParams(800.0f, 1.0f);
  33:Effects/EchoDelay.h ****         }
  34:Effects/EchoDelay.h **** 
  35:Effects/EchoDelay.h ****         /**
  36:Effects/EchoDelay.h ****          * @brief Set the approximate lag time (smoothing) for delay time changes, in seconds
  37:Effects/EchoDelay.h ****          */
  38:Effects/EchoDelay.h ****         void SetLagTime(const float time_s)
  39:Effects/EchoDelay.h ****         {
  40:Effects/EchoDelay.h ****             delay_smooth_coef_ = onepole_coef(time_s, sample_rate_);
  41:Effects/EchoDelay.h ****         }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 58


  42:Effects/EchoDelay.h **** 
  43:Effects/EchoDelay.h ****         /**
  44:Effects/EchoDelay.h ****          * @brief Set the Delay Time in seconds
  45:Effects/EchoDelay.h ****          *
  46:Effects/EchoDelay.h ****          * @param time_s Delay time in seconds. Will be truncated to MaxLength.
  47:Effects/EchoDelay.h ****          * @param immediately If true, sets delay time immediately with no smoothing.
  48:Effects/EchoDelay.h ****          */
  49:Effects/EchoDelay.h ****         void SetDelayTime(const float time_s, bool immediately = false)
  50:Effects/EchoDelay.h ****         {
  51:Effects/EchoDelay.h ****             delay_time_target_ = time_s;
  52:Effects/EchoDelay.h ****             if (immediately) delay_time_current_ = time_s;
  53:Effects/EchoDelay.h ****         }
  54:Effects/EchoDelay.h **** 
  55:Effects/EchoDelay.h ****         /**
  56:Effects/EchoDelay.h ****          * @brief
  57:Effects/EchoDelay.h ****          * Set the feedback amount (linear multiplier).
  58:Effects/EchoDelay.h ****          * This can be >1 in magnitude for saturated swells, or negative.
  59:Effects/EchoDelay.h ****          *
  60:Effects/EchoDelay.h ****          * NOTE: This is not internally smoothed. Use external smoothing if desired.
  61:Effects/EchoDelay.h ****          *
  62:Effects/EchoDelay.h ****          * @param feedback
  63:Effects/EchoDelay.h ****          */
  64:Effects/EchoDelay.h ****         void SetFeedback(const float feedback)
 1959              		.loc 5 64 14 view .LVU601
 1960              	.LBE277:
 1961              		.loc 3 395 22 is_stmt 0 view .LVU602
 1962 0000 0A4A     		ldr	r2, .L127
 1963 0002 9FED0B7A 		vldr.32	s14, .L127+4
 1964 0006 D2ED007A 		vldr.32	s15, [r2]
 1965              	.LBB280:
 1966              	.LBB278:
  65:Effects/EchoDelay.h ****         {
  66:Effects/EchoDelay.h ****             feedback_ = feedback;
 1967              		.loc 5 66 23 view .LVU603
 1968 000a 0A4B     		ldr	r3, .L127+8
 1969              	.LBE278:
 1970              	.LBE280:
 1971              		.loc 3 395 22 view .LVU604
 1972 000c 67EE877A 		vmul.f32	s15, s15, s14
 1973              	.LVL123:
 396:AudioProcessor.cpp ****     // Use delay_time_val from ADC 0
 397:AudioProcessor.cpp ****     float delay_time_s = 0.01f + delay_time_val * 0.99f; 
 1974              		.loc 3 397 49 view .LVU605
 1975 0010 094A     		ldr	r2, .L127+12
 1976              		.loc 3 397 11 view .LVU606
 1977 0012 9FED0A7A 		vldr.32	s14, .L127+16
 1978 0016 D2ED006A 		vldr.32	s13, [r2]
 1979              	.LBB281:
 1980              	.LBB279:
 1981              		.loc 5 66 23 view .LVU607
 1982 001a C3ED047A 		vstr.32	s15, [r3, #16]
 1983              	.LVL124:
 1984              		.loc 5 66 23 view .LVU608
 1985              	.LBE279:
 1986              	.LBE281:
 1987              		.loc 3 397 5 is_stmt 1 view .LVU609
 1988              		.loc 3 397 11 is_stmt 0 view .LVU610
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 59


 1989 001e DFED087A 		vldr.32	s15, .L127+20
 1990 0022 E6EE877A 		vfma.f32	s15, s13, s14
 1991              	.LVL125:
 398:AudioProcessor.cpp ****     delay.SetDelayTime(delay_time_s);
 1992              		.loc 3 398 5 is_stmt 1 view .LVU611
 1993              	.LBB282:
 1994              	.LBI282:
  49:Effects/EchoDelay.h ****         {
 1995              		.loc 5 49 14 view .LVU612
 1996              	.LBB283:
  51:Effects/EchoDelay.h ****             if (immediately) delay_time_current_ = time_s;
 1997              		.loc 5 51 32 is_stmt 0 view .LVU613
 1998 0026 C3ED027A 		vstr.32	s15, [r3, #8]
 1999              	.LVL126:
  51:Effects/EchoDelay.h ****             if (immediately) delay_time_current_ = time_s;
 2000              		.loc 5 51 32 view .LVU614
 2001              	.LBE283:
 2002              	.LBE282:
 399:AudioProcessor.cpp ****     // Remove delay lag setting (ADC 7 is now Pitch)
 400:AudioProcessor.cpp ****     // float lag_time_s = delay_lag_val * 0.2f; 
 401:AudioProcessor.cpp ****     // delay.SetLagTime(lag_time_s);
 402:AudioProcessor.cpp **** }
 2003              		.loc 3 402 1 view .LVU615
 2004 002a 7047     		bx	lr
 2005              	.L128:
 2006              		.align	2
 2007              	.L127:
 2008 002c 00000000 		.word	.LANCHOR15
 2009 0030 48E17A3F 		.word	1065017672
 2010 0034 00000000 		.word	delay
 2011 0038 00000000 		.word	.LANCHOR8
 2012 003c A4707D3F 		.word	1065185444
 2013 0040 0AD7233C 		.word	1008981770
 2014              		.cfi_endproc
 2015              	.LFE5351:
 2017              		.section	.text._Z22PrepareVoiceParametersibib,"ax",%progbits
 2018              		.align	1
 2019              		.global	_Z22PrepareVoiceParametersibib
 2020              		.syntax unified
 2021              		.thumb
 2022              		.thumb_func
 2024              	_Z22PrepareVoiceParametersibib:
 2025              	.LVL127:
 2026              	.LFB5352:
 403:AudioProcessor.cpp **** 
 404:AudioProcessor.cpp **** void PrepareVoiceParameters(int engineIndex, bool poly_mode, int max_voice_idx, bool arp_on) {
 2027              		.loc 3 404 94 is_stmt 1 view -0
 2028              		.cfi_startproc
 2029              		@ args = 0, pretend = 0, frame = 0
 2030              		@ frame_needed = 0, uses_anonymous_args = 0
 405:AudioProcessor.cpp ****     // Compute global parameter sources
 406:AudioProcessor.cpp ****     float global_pitch_offset = pitch_val * 24.f - 12.f;     // Pitch follows ADC 7
 2031              		.loc 3 406 5 view .LVU617
 404:AudioProcessor.cpp ****     // Compute global parameter sources
 2032              		.loc 3 404 94 is_stmt 0 view .LVU618
 2033 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2034              		.cfi_def_cfa_offset 36
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 60


 2035              		.cfi_offset 4, -36
 2036              		.cfi_offset 5, -32
 2037              		.cfi_offset 6, -28
 2038              		.cfi_offset 7, -24
 2039              		.cfi_offset 8, -20
 2040              		.cfi_offset 9, -16
 2041              		.cfi_offset 10, -12
 2042              		.cfi_offset 11, -8
 2043              		.cfi_offset 14, -4
 2044 0004 9046     		mov	r8, r2
 2045              		.loc 3 406 43 view .LVU619
 2046 0006 714A     		ldr	r2, .L165
 2047              	.LVL128:
 2048              		.loc 3 406 11 view .LVU620
 2049 0008 F3EE087A 		vmov.f32	s15, #2.4e+1
 404:AudioProcessor.cpp ****     // Compute global parameter sources
 2050              		.loc 3 404 94 view .LVU621
 2051 000c 8A46     		mov	r10, r1
 2052              		.loc 3 406 11 view .LVU622
 2053 000e 92ED007A 		vldr.32	s14, [r2]
 404:AudioProcessor.cpp ****     // Compute global parameter sources
 2054              		.loc 3 404 94 view .LVU623
 2055 0012 0746     		mov	r7, r0
 407:AudioProcessor.cpp ****     float current_global_harmonics = harm_knob_val;          // Harmonics ADC 5
 2056              		.loc 3 407 11 view .LVU624
 2057 0014 6E4A     		ldr	r2, .L165+4
 2058              	.LBB284:
 408:AudioProcessor.cpp ****     float current_global_morph = morph_knob_val;             // Morph ADC 6
 409:AudioProcessor.cpp **** 
 410:AudioProcessor.cpp ****     // Percussive ARP mode: render voice 0 only with patched trigger
 411:AudioProcessor.cpp ****     if (arp_on && engineIndex > 7) {
 2059              		.loc 3 411 5 view .LVU625
 2060 0016 9946     		mov	r9, r3
 2061 0018 6E49     		ldr	r1, .L165+8
 2062              	.LVL129:
 2063              		.loc 3 411 5 view .LVU626
 2064 001a 6F4D     		ldr	r5, .L165+12
 2065              	.LBE284:
 404:AudioProcessor.cpp ****     // Compute global parameter sources
 2066              		.loc 3 404 94 view .LVU627
 2067 001c 2DED048B 		vpush.64	{d8, d9}
 2068              		.cfi_def_cfa_offset 52
 2069              		.cfi_offset 80, -52
 2070              		.cfi_offset 81, -48
 2071              		.cfi_offset 82, -44
 2072              		.cfi_offset 83, -40
 406:AudioProcessor.cpp ****     float current_global_harmonics = harm_knob_val;          // Harmonics ADC 5
 2073              		.loc 3 406 11 view .LVU628
 2074 0020 BAEE088A 		vmov.f32	s16, #-1.2e+1
 407:AudioProcessor.cpp ****     float current_global_morph = morph_knob_val;             // Morph ADC 6
 2075              		.loc 3 407 11 view .LVU629
 2076 0024 D2ED008A 		vldr.32	s17, [r2]
 408:AudioProcessor.cpp **** 
 2077              		.loc 3 408 11 view .LVU630
 2078 0028 6C4A     		ldr	r2, .L165+16
 404:AudioProcessor.cpp ****     // Compute global parameter sources
 2079              		.loc 3 404 94 view .LVU631
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 61


 2080 002a 83B0     		sub	sp, sp, #12
 2081              		.cfi_def_cfa_offset 64
 406:AudioProcessor.cpp ****     float current_global_harmonics = harm_knob_val;          // Harmonics ADC 5
 2082              		.loc 3 406 11 view .LVU632
 2083 002c A7EE278A 		vfma.f32	s16, s14, s15
 2084              	.LVL130:
 407:AudioProcessor.cpp ****     float current_global_morph = morph_knob_val;             // Morph ADC 6
 2085              		.loc 3 407 5 is_stmt 1 view .LVU633
 408:AudioProcessor.cpp **** 
 2086              		.loc 3 408 5 view .LVU634
 408:AudioProcessor.cpp **** 
 2087              		.loc 3 408 11 is_stmt 0 view .LVU635
 2088 0030 92ED009A 		vldr.32	s18, [r2]
 2089              	.LVL131:
 2090              		.loc 3 411 5 is_stmt 1 view .LVU636
 2091              	.LBB287:
 2092 0034 0BB1     		cbz	r3, .L130
 2093              		.loc 3 411 16 is_stmt 0 discriminator 1 view .LVU637
 2094 0036 0728     		cmp	r0, #7
 2095 0038 43DC     		bgt	.L131
 2096              	.L130:
 2097 003a 664D     		ldr	r5, .L165+8
 2098              	.LBE287:
 404:AudioProcessor.cpp ****     // Compute global parameter sources
 2099              		.loc 3 404 94 discriminator 1 view .LVU638
 2100 003c 0026     		movs	r6, #0
 2101 003e 664C     		ldr	r4, .L165+12
 2102 0040 DFF8B0B1 		ldr	fp, .L165+40
 2103              	.LVL132:
 2104              	.L132:
 2105              	.LBB288:
 412:AudioProcessor.cpp ****         // Update patch for voice 0
 413:AudioProcessor.cpp ****         patches[0].note = voice_note[0] + global_pitch_offset;
 414:AudioProcessor.cpp ****         patches[0].engine = engineIndex;
 415:AudioProcessor.cpp ****         patches[0].harmonics = current_global_harmonics;
 416:AudioProcessor.cpp ****         patches[0].timbre = timbre_knob_val;
 417:AudioProcessor.cpp ****         patches[0].morph = current_global_morph;
 418:AudioProcessor.cpp ****         patches[0].lpg_colour = 0.0f;
 419:AudioProcessor.cpp ****         patches[0].decay = env_release_val; // use release knob as decay
 420:AudioProcessor.cpp ****         patches[0].frequency_modulation_amount = 0.0f;
 421:AudioProcessor.cpp ****         patches[0].timbre_modulation_amount = 0.0f;
 422:AudioProcessor.cpp ****         patches[0].morph_modulation_amount = 0.0f;
 423:AudioProcessor.cpp ****         // Render with ARP callback trigger
 424:AudioProcessor.cpp ****         voices[0].Render(patches[0], modulations[0], output_buffers[0], BLOCK_SIZE);
 425:AudioProcessor.cpp ****         // Silence other voices
 426:AudioProcessor.cpp ****         for (int v = 1; v < NUM_VOICES; ++v) {
 427:AudioProcessor.cpp ****             memset(output_buffers[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 428:AudioProcessor.cpp ****         }
 429:AudioProcessor.cpp ****         // Clear triggers for next block
 430:AudioProcessor.cpp ****         modulations[0].trigger = 0.0f;
 431:AudioProcessor.cpp ****         modulations[0].trigger_patched = false;
 432:AudioProcessor.cpp ****         return;
 433:AudioProcessor.cpp ****     }
 434:AudioProcessor.cpp **** 
 435:AudioProcessor.cpp ****     // --- Process Effective Voices --- 
 436:AudioProcessor.cpp ****     for (int v = 0; v <= max_voice_idx; ++v) { 
 2106              		.loc 3 436 23 is_stmt 1 discriminator 1 view .LVU639
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 62


 2107 0044 4645     		cmp	r6, r8
 2108 0046 00F39B80 		bgt	.L134
 437:AudioProcessor.cpp ****         // Update Patch using dedicated knob values
 438:AudioProcessor.cpp ****         patches[v].note = voice_note[v] + global_pitch_offset;
 2109              		.loc 3 438 9 view .LVU640
 439:AudioProcessor.cpp ****         patches[v].engine = engineIndex;                      // Engine index from touch pads
 440:AudioProcessor.cpp ****         patches[v].harmonics = current_global_harmonics;    // ADC 5
 441:AudioProcessor.cpp ****         patches[v].timbre = timbre_knob_val;                  // ADC 4 (Reconnected)
 2110              		.loc 3 441 27 is_stmt 0 view .LVU641
 2111 004a 654B     		ldr	r3, .L165+20
 438:AudioProcessor.cpp ****         patches[v].engine = engineIndex;                      // Engine index from touch pads
 2112              		.loc 3 438 39 view .LVU642
 2113 004c FBEC017A 		vldmia.32	fp!, {s15}
 2114              		.loc 3 441 27 view .LVU643
 2115 0050 1B68     		ldr	r3, [r3]	@ float
 438:AudioProcessor.cpp ****         patches[v].engine = engineIndex;                      // Engine index from touch pads
 2116              		.loc 3 438 41 view .LVU644
 2117 0052 77EE887A 		vadd.f32	s15, s15, s16
 439:AudioProcessor.cpp ****         patches[v].engine = engineIndex;                      // Engine index from touch pads
 2118              		.loc 3 439 27 view .LVU645
 2119 0056 EF61     		str	r7, [r5, #28]
 2120              		.loc 3 441 27 view .LVU646
 2121 0058 AB60     		str	r3, [r5, #8]	@ float
 442:AudioProcessor.cpp ****         patches[v].morph = current_global_morph;            // ADC 6
 443:AudioProcessor.cpp ****         patches[v].lpg_colour = 0.0f;
 2122              		.loc 3 443 31 view .LVU647
 2123 005a 0023     		movs	r3, #0
 440:AudioProcessor.cpp ****         patches[v].timbre = timbre_knob_val;                  // ADC 4 (Reconnected)
 2124              		.loc 3 440 30 view .LVU648
 2125 005c C5ED018A 		vstr.32	s17, [r5, #4]
 438:AudioProcessor.cpp ****         patches[v].engine = engineIndex;                      // Engine index from touch pads
 2126              		.loc 3 438 25 view .LVU649
 2127 0060 C5ED007A 		vstr.32	s15, [r5]
 439:AudioProcessor.cpp ****         patches[v].harmonics = current_global_harmonics;    // ADC 5
 2128              		.loc 3 439 9 is_stmt 1 view .LVU650
 440:AudioProcessor.cpp ****         patches[v].timbre = timbre_knob_val;                  // ADC 4 (Reconnected)
 2129              		.loc 3 440 9 view .LVU651
 441:AudioProcessor.cpp ****         patches[v].morph = current_global_morph;            // ADC 6
 2130              		.loc 3 441 9 view .LVU652
 442:AudioProcessor.cpp ****         patches[v].lpg_colour = 0.0f;
 2131              		.loc 3 442 9 view .LVU653
 442:AudioProcessor.cpp ****         patches[v].lpg_colour = 0.0f;
 2132              		.loc 3 442 26 is_stmt 0 view .LVU654
 2133 0064 85ED039A 		vstr.32	s18, [r5, #12]
 2134              		.loc 3 443 9 is_stmt 1 view .LVU655
 2135              		.loc 3 443 31 is_stmt 0 view .LVU656
 2136 0068 6B62     		str	r3, [r5, #36]	@ float
 444:AudioProcessor.cpp ****         // Map decay: use release knob when in ARP mode, otherwise a moderate default
 445:AudioProcessor.cpp ****         if (arp_on) {
 2137              		.loc 3 445 9 is_stmt 1 view .LVU657
 2138 006a B9F1000F 		cmp	r9, #0
 2139 006e 5ED0     		beq	.L151
 446:AudioProcessor.cpp ****             // Map Plaits internal decay envelope to release knob for smoother release
 447:AudioProcessor.cpp ****             patches[v].decay = env_release_val;
 2140              		.loc 3 447 13 view .LVU658
 2141              		.loc 3 447 30 is_stmt 0 view .LVU659
 2142 0070 5C4A     		ldr	r2, .L165+24
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 63


 2143 0072 1268     		ldr	r2, [r2]	@ float
 2144              	.L135:
 448:AudioProcessor.cpp ****         } else {
 449:AudioProcessor.cpp ****             patches[v].decay = 0.5f; // moderate default
 450:AudioProcessor.cpp ****         }
 451:AudioProcessor.cpp ****         
 452:AudioProcessor.cpp ****         patches[v].frequency_modulation_amount = 0.f;
 453:AudioProcessor.cpp ****         patches[v].timbre_modulation_amount = 0.f;
 454:AudioProcessor.cpp ****         patches[v].morph_modulation_amount = 0.f;
 455:AudioProcessor.cpp **** 
 456:AudioProcessor.cpp ****         // Update Modulations & Handle Trigger 
 457:AudioProcessor.cpp ****         modulations[v].engine = 0; 
 458:AudioProcessor.cpp ****         modulations[v].note = 0.0f; 
 459:AudioProcessor.cpp ****         modulations[v].frequency = 0.0f;
 460:AudioProcessor.cpp ****         modulations[v].harmonics = 0.0f; 
 461:AudioProcessor.cpp ****         modulations[v].timbre = 0.0f;
 462:AudioProcessor.cpp ****         modulations[v].morph = 0.0f; 
 463:AudioProcessor.cpp ****         modulations[v].level = 1.0f; 
 2145              		.loc 3 463 30 view .LVU660
 2146 0074 F7EE007A 		vmov.f32	s15, #1.0e+0
 2147 0078 2A62     		str	r2, [r5, #32]	@ float
 452:AudioProcessor.cpp ****         patches[v].timbre_modulation_amount = 0.f;
 2148              		.loc 3 452 9 is_stmt 1 view .LVU661
 452:AudioProcessor.cpp ****         patches[v].timbre_modulation_amount = 0.f;
 2149              		.loc 3 452 48 is_stmt 0 view .LVU662
 2150 007a 2B61     		str	r3, [r5, #16]	@ float
 453:AudioProcessor.cpp ****         patches[v].morph_modulation_amount = 0.f;
 2151              		.loc 3 453 9 is_stmt 1 view .LVU663
 453:AudioProcessor.cpp ****         patches[v].morph_modulation_amount = 0.f;
 2152              		.loc 3 453 45 is_stmt 0 view .LVU664
 2153 007c 6B61     		str	r3, [r5, #20]	@ float
 454:AudioProcessor.cpp **** 
 2154              		.loc 3 454 9 is_stmt 1 view .LVU665
 454:AudioProcessor.cpp **** 
 2155              		.loc 3 454 44 is_stmt 0 view .LVU666
 2156 007e AB61     		str	r3, [r5, #24]	@ float
 457:AudioProcessor.cpp ****         modulations[v].note = 0.0f; 
 2157              		.loc 3 457 9 is_stmt 1 view .LVU667
 457:AudioProcessor.cpp ****         modulations[v].note = 0.0f; 
 2158              		.loc 3 457 31 is_stmt 0 view .LVU668
 2159 0080 2360     		str	r3, [r4]	@ float
 458:AudioProcessor.cpp ****         modulations[v].frequency = 0.0f;
 2160              		.loc 3 458 9 is_stmt 1 view .LVU669
 458:AudioProcessor.cpp ****         modulations[v].frequency = 0.0f;
 2161              		.loc 3 458 29 is_stmt 0 view .LVU670
 2162 0082 6360     		str	r3, [r4, #4]	@ float
 459:AudioProcessor.cpp ****         modulations[v].harmonics = 0.0f; 
 2163              		.loc 3 459 9 is_stmt 1 view .LVU671
 459:AudioProcessor.cpp ****         modulations[v].harmonics = 0.0f; 
 2164              		.loc 3 459 34 is_stmt 0 view .LVU672
 2165 0084 A360     		str	r3, [r4, #8]	@ float
 460:AudioProcessor.cpp ****         modulations[v].timbre = 0.0f;
 2166              		.loc 3 460 9 is_stmt 1 view .LVU673
 460:AudioProcessor.cpp ****         modulations[v].timbre = 0.0f;
 2167              		.loc 3 460 34 is_stmt 0 view .LVU674
 2168 0086 E360     		str	r3, [r4, #12]	@ float
 461:AudioProcessor.cpp ****         modulations[v].morph = 0.0f; 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 64


 2169              		.loc 3 461 9 is_stmt 1 view .LVU675
 461:AudioProcessor.cpp ****         modulations[v].morph = 0.0f; 
 2170              		.loc 3 461 31 is_stmt 0 view .LVU676
 2171 0088 2361     		str	r3, [r4, #16]	@ float
 462:AudioProcessor.cpp ****         modulations[v].level = 1.0f; 
 2172              		.loc 3 462 9 is_stmt 1 view .LVU677
 462:AudioProcessor.cpp ****         modulations[v].level = 1.0f; 
 2173              		.loc 3 462 30 is_stmt 0 view .LVU678
 2174 008a 6361     		str	r3, [r4, #20]	@ float
 2175              		.loc 3 463 9 is_stmt 1 view .LVU679
 2176              		.loc 3 463 30 is_stmt 0 view .LVU680
 2177 008c C4ED077A 		vstr.32	s15, [r4, #28]
 464:AudioProcessor.cpp ****         
 465:AudioProcessor.cpp ****         // Only reset trigger_patched when not in ARP mode
 466:AudioProcessor.cpp ****         if (!arp_on) {
 2178              		.loc 3 466 9 is_stmt 1 view .LVU681
 2179 0090 B9F1000F 		cmp	r9, #0
 2180 0094 62D1     		bne	.L137
 467:AudioProcessor.cpp ****             if(engine_changed_flag && voice_active[v]) {
 2181              		.loc 3 467 13 view .LVU682
 2182              		.loc 3 467 16 is_stmt 0 view .LVU683
 2183 0096 5449     		ldr	r1, .L165+28
 2184              		.loc 3 467 53 view .LVU684
 2185 0098 544A     		ldr	r2, .L165+32
 2186              		.loc 3 467 16 view .LVU685
 2187 009a 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 2188              		.loc 3 467 53 view .LVU686
 2189 009c B25C     		ldrb	r2, [r6, r2]	@ zero_extendqisi2
 2190              		.loc 3 467 36 view .LVU687
 2191 009e 0028     		cmp	r0, #0
 2192 00a0 48D0     		beq	.L138
 2193              		.loc 3 467 36 discriminator 1 view .LVU688
 2194 00a2 002A     		cmp	r2, #0
 2195 00a4 4ED0     		beq	.L152
 468:AudioProcessor.cpp ****                 modulations[v].trigger = 0.0f; // falling edge on change
 2196              		.loc 3 468 17 is_stmt 1 view .LVU689
 2197              		.loc 3 468 40 is_stmt 0 view .LVU690
 2198 00a6 A361     		str	r3, [r4, #24]	@ float
 2199              	.L140:
 469:AudioProcessor.cpp ****             } else {
 470:AudioProcessor.cpp ****                 modulations[v].trigger = voice_active[v] ? 1.0f : 0.0f;
 471:AudioProcessor.cpp ****             }
 472:AudioProcessor.cpp ****         }
 473:AudioProcessor.cpp ****         
 474:AudioProcessor.cpp ****         if (poly_mode) {
 2200              		.loc 3 474 9 is_stmt 1 view .LVU691
 2201 00a8 BAF1000F 		cmp	r10, #0
 2202 00ac 56D1     		bne	.L137
 475:AudioProcessor.cpp ****             // For poly engines, we'll handle triggering through voice envelopes
 476:AudioProcessor.cpp ****             // Only set trigger on initial note-on
 477:AudioProcessor.cpp ****             // Don't modify value - already set in HandleTouchInput
 478:AudioProcessor.cpp ****         } else {
 479:AudioProcessor.cpp ****             // In non-poly mode and ARP active, leave trigger from callback; otherwise override
 480:AudioProcessor.cpp ****             if (!arp_on) {
 481:AudioProcessor.cpp ****                 if (engine_changed_flag && voice_active[v]) {
 2203              		.loc 3 481 17 view .LVU692
 2204              		.loc 3 481 21 is_stmt 0 view .LVU693
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 65


 2205 00ae 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 2206              		.loc 3 481 41 view .LVU694
 2207 00b0 0029     		cmp	r1, #0
 2208 00b2 4AD0     		beq	.L141
 2209              		.loc 3 481 41 discriminator 1 view .LVU695
 2210 00b4 002A     		cmp	r2, #0
 2211 00b6 50D1     		bne	.L142
 482:AudioProcessor.cpp ****                     modulations[v].trigger = 0.0f;
 483:AudioProcessor.cpp ****                 } else {
 484:AudioProcessor.cpp ****                     modulations[v].trigger = voice_active[v] ? 1.0f : 0.0f;
 2212              		.loc 3 484 62 view .LVU696
 2213 00b8 DFED4D7A 		vldr.32	s15, .L165+36
 2214              	.L143:
 2215              		.loc 3 484 44 discriminator 4 view .LVU697
 2216 00bc C4ED067A 		vstr.32	s15, [r4, #24]
 2217 00c0 4CE0     		b	.L137
 2218              	.LVL133:
 2219              	.L131:
 2220              		.loc 3 484 44 discriminator 4 view .LVU698
 2221              	.LBE288:
 2222              	.LBB289:
 2223              	.LBB285:
 413:AudioProcessor.cpp ****         patches[0].engine = engineIndex;
 2224              		.loc 3 413 9 is_stmt 1 view .LVU699
 413:AudioProcessor.cpp ****         patches[0].engine = engineIndex;
 2225              		.loc 3 413 41 is_stmt 0 view .LVU700
 2226 00c2 4C4B     		ldr	r3, .L165+40
 2227              	.LVL134:
 418:AudioProcessor.cpp ****         patches[0].decay = env_release_val; // use release knob as decay
 2228              		.loc 3 418 31 view .LVU701
 2229 00c4 0024     		movs	r4, #0
 414:AudioProcessor.cpp ****         patches[0].harmonics = current_global_harmonics;
 2230              		.loc 3 414 27 view .LVU702
 2231 00c6 C861     		str	r0, [r1, #28]
 424:AudioProcessor.cpp ****         // Silence other voices
 2232              		.loc 3 424 25 view .LVU703
 2233 00c8 2A46     		mov	r2, r5
 413:AudioProcessor.cpp ****         patches[0].engine = engineIndex;
 2234              		.loc 3 413 41 view .LVU704
 2235 00ca D3ED007A 		vldr.32	s15, [r3]
 416:AudioProcessor.cpp ****         patches[0].morph = current_global_morph;
 2236              		.loc 3 416 27 view .LVU705
 2237 00ce 444B     		ldr	r3, .L165+20
 413:AudioProcessor.cpp ****         patches[0].engine = engineIndex;
 2238              		.loc 3 413 41 view .LVU706
 2239 00d0 37EE888A 		vadd.f32	s16, s15, s16
 2240              	.LVL135:
 415:AudioProcessor.cpp ****         patches[0].timbre = timbre_knob_val;
 2241              		.loc 3 415 30 view .LVU707
 2242 00d4 C1ED018A 		vstr.32	s17, [r1, #4]
 416:AudioProcessor.cpp ****         patches[0].morph = current_global_morph;
 2243              		.loc 3 416 27 view .LVU708
 2244 00d8 1B68     		ldr	r3, [r3]	@ float
 417:AudioProcessor.cpp ****         patches[0].lpg_colour = 0.0f;
 2245              		.loc 3 417 26 view .LVU709
 2246 00da 81ED039A 		vstr.32	s18, [r1, #12]
 416:AudioProcessor.cpp ****         patches[0].morph = current_global_morph;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 66


 2247              		.loc 3 416 27 view .LVU710
 2248 00de 8B60     		str	r3, [r1, #8]	@ float
 419:AudioProcessor.cpp ****         patches[0].frequency_modulation_amount = 0.0f;
 2249              		.loc 3 419 26 view .LVU711
 2250 00e0 404B     		ldr	r3, .L165+24
 413:AudioProcessor.cpp ****         patches[0].engine = engineIndex;
 2251              		.loc 3 413 25 view .LVU712
 2252 00e2 81ED008A 		vstr.32	s16, [r1]
 414:AudioProcessor.cpp ****         patches[0].harmonics = current_global_harmonics;
 2253              		.loc 3 414 9 is_stmt 1 view .LVU713
 415:AudioProcessor.cpp ****         patches[0].timbre = timbre_knob_val;
 2254              		.loc 3 415 9 view .LVU714
 416:AudioProcessor.cpp ****         patches[0].morph = current_global_morph;
 2255              		.loc 3 416 9 view .LVU715
 417:AudioProcessor.cpp ****         patches[0].lpg_colour = 0.0f;
 2256              		.loc 3 417 9 view .LVU716
 418:AudioProcessor.cpp ****         patches[0].decay = env_release_val; // use release knob as decay
 2257              		.loc 3 418 9 view .LVU717
 419:AudioProcessor.cpp ****         patches[0].frequency_modulation_amount = 0.0f;
 2258              		.loc 3 419 26 is_stmt 0 view .LVU718
 2259 00e6 1B68     		ldr	r3, [r3]	@ float
 418:AudioProcessor.cpp ****         patches[0].decay = env_release_val; // use release knob as decay
 2260              		.loc 3 418 31 view .LVU719
 2261 00e8 4C62     		str	r4, [r1, #36]	@ float
 419:AudioProcessor.cpp ****         patches[0].frequency_modulation_amount = 0.0f;
 2262              		.loc 3 419 9 is_stmt 1 view .LVU720
 419:AudioProcessor.cpp ****         patches[0].frequency_modulation_amount = 0.0f;
 2263              		.loc 3 419 26 is_stmt 0 view .LVU721
 2264 00ea 0B62     		str	r3, [r1, #32]	@ float
 420:AudioProcessor.cpp ****         patches[0].timbre_modulation_amount = 0.0f;
 2265              		.loc 3 420 9 is_stmt 1 view .LVU722
 424:AudioProcessor.cpp ****         // Silence other voices
 2266              		.loc 3 424 25 is_stmt 0 view .LVU723
 2267 00ec 1023     		movs	r3, #16
 420:AudioProcessor.cpp ****         patches[0].timbre_modulation_amount = 0.0f;
 2268              		.loc 3 420 48 view .LVU724
 2269 00ee 0C61     		str	r4, [r1, #16]	@ float
 421:AudioProcessor.cpp ****         patches[0].morph_modulation_amount = 0.0f;
 2270              		.loc 3 421 9 is_stmt 1 view .LVU725
 421:AudioProcessor.cpp ****         patches[0].morph_modulation_amount = 0.0f;
 2271              		.loc 3 421 45 is_stmt 0 view .LVU726
 2272 00f0 4C61     		str	r4, [r1, #20]	@ float
 422:AudioProcessor.cpp ****         // Render with ARP callback trigger
 2273              		.loc 3 422 9 is_stmt 1 view .LVU727
 422:AudioProcessor.cpp ****         // Render with ARP callback trigger
 2274              		.loc 3 422 44 is_stmt 0 view .LVU728
 2275 00f2 8C61     		str	r4, [r1, #24]	@ float
 424:AudioProcessor.cpp ****         // Silence other voices
 2276              		.loc 3 424 9 is_stmt 1 view .LVU729
 424:AudioProcessor.cpp ****         // Silence other voices
 2277              		.loc 3 424 25 is_stmt 0 view .LVU730
 2278 00f4 4048     		ldr	r0, .L165+44
 2279              	.LVL136:
 424:AudioProcessor.cpp ****         // Silence other voices
 2280              		.loc 3 424 25 view .LVU731
 2281 00f6 0093     		str	r3, [sp]
 2282 00f8 404B     		ldr	r3, .L165+48
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 67


 2283 00fa FFF7FEFF 		bl	_ZN6plaits5Voice6RenderERKNS_5PatchERKNS_11ModulationsEPNS0_5FrameEj
 2284              	.LVL137:
 426:AudioProcessor.cpp ****             memset(output_buffers[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 2285              		.loc 3 426 9 is_stmt 1 view .LVU732
 2286              	.LBB286:
 426:AudioProcessor.cpp ****             memset(output_buffers[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 2287              		.loc 3 426 27 view .LVU733
 427:AudioProcessor.cpp ****         }
 2288              		.loc 3 427 13 view .LVU734
 427:AudioProcessor.cpp ****         }
 2289              		.loc 3 427 19 is_stmt 0 view .LVU735
 2290 00fe 4022     		movs	r2, #64
 2291 0100 0021     		movs	r1, #0
 2292 0102 3F48     		ldr	r0, .L165+52
 2293 0104 FFF7FEFF 		bl	memset
 2294              	.LVL138:
 426:AudioProcessor.cpp ****             memset(output_buffers[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 2295              		.loc 3 426 9 is_stmt 1 view .LVU736
 426:AudioProcessor.cpp ****             memset(output_buffers[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 2296              		.loc 3 426 27 view .LVU737
 427:AudioProcessor.cpp ****         }
 2297              		.loc 3 427 13 view .LVU738
 427:AudioProcessor.cpp ****         }
 2298              		.loc 3 427 19 is_stmt 0 view .LVU739
 2299 0108 4022     		movs	r2, #64
 2300 010a 0021     		movs	r1, #0
 2301 010c 3D48     		ldr	r0, .L165+56
 2302 010e FFF7FEFF 		bl	memset
 2303              	.LVL139:
 426:AudioProcessor.cpp ****             memset(output_buffers[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 2304              		.loc 3 426 9 is_stmt 1 view .LVU740
 426:AudioProcessor.cpp ****             memset(output_buffers[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 2305              		.loc 3 426 27 view .LVU741
 427:AudioProcessor.cpp ****         }
 2306              		.loc 3 427 13 view .LVU742
 427:AudioProcessor.cpp ****         }
 2307              		.loc 3 427 19 is_stmt 0 view .LVU743
 2308 0112 4022     		movs	r2, #64
 2309 0114 0021     		movs	r1, #0
 2310 0116 3C48     		ldr	r0, .L165+60
 2311 0118 FFF7FEFF 		bl	memset
 2312              	.LVL140:
 426:AudioProcessor.cpp ****             memset(output_buffers[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 2313              		.loc 3 426 9 is_stmt 1 view .LVU744
 426:AudioProcessor.cpp ****             memset(output_buffers[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 2314              		.loc 3 426 27 view .LVU745
 2315              	.LBE286:
 430:AudioProcessor.cpp ****         modulations[0].trigger_patched = false;
 2316              		.loc 3 430 9 view .LVU746
 431:AudioProcessor.cpp ****         return;
 2317              		.loc 3 431 40 is_stmt 0 view .LVU747
 2318 011c 0023     		movs	r3, #0
 430:AudioProcessor.cpp ****         modulations[0].trigger_patched = false;
 2319              		.loc 3 430 32 view .LVU748
 2320 011e AC61     		str	r4, [r5, #24]	@ float
 431:AudioProcessor.cpp ****         return;
 2321              		.loc 3 431 9 is_stmt 1 view .LVU749
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 68


 431:AudioProcessor.cpp ****         return;
 2322              		.loc 3 431 40 is_stmt 0 view .LVU750
 2323 0120 85F82330 		strb	r3, [r5, #35]
 432:AudioProcessor.cpp ****     }
 2324              		.loc 3 432 9 is_stmt 1 view .LVU751
 2325              	.LVL141:
 2326              	.L129:
 432:AudioProcessor.cpp ****     }
 2327              		.loc 3 432 9 is_stmt 0 view .LVU752
 2328              	.LBE285:
 2329              	.LBE289:
 485:AudioProcessor.cpp ****                 }
 486:AudioProcessor.cpp ****             }
 487:AudioProcessor.cpp ****         }
 488:AudioProcessor.cpp ****         
 489:AudioProcessor.cpp ****         voices[v].Render(patches[v], modulations[v], output_buffers[v], BLOCK_SIZE);
 490:AudioProcessor.cpp ****     }
 491:AudioProcessor.cpp ****     
 492:AudioProcessor.cpp ****     // Silence unused voices (when switching from poly to mono)
 493:AudioProcessor.cpp ****     int effective_voices = max_voice_idx + 1; // Calculate from max_voice_idx
 494:AudioProcessor.cpp ****     for (int v = effective_voices; v < NUM_VOICES; ++v) {
 495:AudioProcessor.cpp ****          memset(output_buffers[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 496:AudioProcessor.cpp ****          // Keep voice_active[v] = false and modulations[v].trigger = 0.0f
 497:AudioProcessor.cpp ****     }
 498:AudioProcessor.cpp **** 
 499:AudioProcessor.cpp ****     // If engine changed while notes are active, retrigger envelopes so that the new engine sound i
 500:AudioProcessor.cpp ****     if(engine_changed_flag) {
 501:AudioProcessor.cpp ****         for(int v = 0; v <= max_voice_idx; ++v) {
 502:AudioProcessor.cpp ****             if(voice_active[v]) {
 503:AudioProcessor.cpp ****                 // Reset and immediately trigger the envelope to restart the note with the new engi
 504:AudioProcessor.cpp ****                 voice_envelopes[v].Reset();
 505:AudioProcessor.cpp ****                 voice_envelopes[v].Trigger();
 506:AudioProcessor.cpp ****             }
 507:AudioProcessor.cpp ****         }
 508:AudioProcessor.cpp ****         engine_changed_flag = false; // Clear flag after handling.
 509:AudioProcessor.cpp ****     }
 510:AudioProcessor.cpp **** }
 2330              		.loc 3 510 1 view .LVU753
 2331 0124 03B0     		add	sp, sp, #12
 2332              		.cfi_remember_state
 2333              		.cfi_def_cfa_offset 52
 2334              		@ sp needed
 2335 0126 BDEC048B 		vldm	sp!, {d8-d9}
 2336              		.cfi_restore 82
 2337              		.cfi_restore 83
 2338              		.cfi_restore 80
 2339              		.cfi_restore 81
 2340              		.cfi_def_cfa_offset 36
 2341              	.LVL142:
 2342              		.loc 3 510 1 view .LVU754
 2343 012a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2344              	.LVL143:
 2345              	.L151:
 2346              		.cfi_restore_state
 2347              	.LBB290:
 449:AudioProcessor.cpp ****         }
 2348              		.loc 3 449 30 view .LVU755
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 69


 2349 012e 4FF07C52 		mov	r2, #1056964608
 2350 0132 9FE7     		b	.L135
 2351              	.L138:
 470:AudioProcessor.cpp ****             }
 2352              		.loc 3 470 17 is_stmt 1 view .LVU756
 470:AudioProcessor.cpp ****             }
 2353              		.loc 3 470 58 is_stmt 0 view .LVU757
 2354 0134 002A     		cmp	r2, #0
 2355 0136 9FED2E7A 		vldr.32	s14, .L165+36
 2356 013a 47FE277A 		vseleq.f32	s15, s14, s15
 2357              	.L139:
 470:AudioProcessor.cpp ****             }
 2358              		.loc 3 470 40 discriminator 4 view .LVU758
 2359 013e C4ED067A 		vstr.32	s15, [r4, #24]
 2360 0142 B1E7     		b	.L140
 2361              	.L152:
 470:AudioProcessor.cpp ****             }
 2362              		.loc 3 470 58 view .LVU759
 2363 0144 DFED2A7A 		vldr.32	s15, .L165+36
 2364 0148 F9E7     		b	.L139
 2365              	.L141:
 484:AudioProcessor.cpp ****                 }
 2366              		.loc 3 484 21 is_stmt 1 view .LVU760
 484:AudioProcessor.cpp ****                 }
 2367              		.loc 3 484 62 is_stmt 0 view .LVU761
 2368 014a B7EE007A 		vmov.f32	s14, #1.0e+0
 2369 014e 002A     		cmp	r2, #0
 2370 0150 DFED277A 		vldr.32	s15, .L165+36
 2371 0154 47FE877A 		vseleq.f32	s15, s15, s14
 2372 0158 B0E7     		b	.L143
 2373              	.L142:
 482:AudioProcessor.cpp ****                 } else {
 2374              		.loc 3 482 21 is_stmt 1 view .LVU762
 482:AudioProcessor.cpp ****                 } else {
 2375              		.loc 3 482 44 is_stmt 0 view .LVU763
 2376 015a A361     		str	r3, [r4, #24]	@ float
 2377              	.L137:
 489:AudioProcessor.cpp ****     }
 2378              		.loc 3 489 9 is_stmt 1 discriminator 2 view .LVU764
 489:AudioProcessor.cpp ****     }
 2379              		.loc 3 489 25 is_stmt 0 discriminator 2 view .LVU765
 2380 015c 1023     		movs	r3, #16
 2381 015e 4FF45B6C 		mov	ip, #3504
 2382 0162 2548     		ldr	r0, .L165+44
 2383 0164 2246     		mov	r2, r4
 2384 0166 0093     		str	r3, [sp]
 2385 0168 2946     		mov	r1, r5
 2386 016a 244B     		ldr	r3, .L165+48
 2387 016c 0CFB0600 		mla	r0, ip, r6, r0
 2388 0170 2835     		adds	r5, r5, #40
 2389 0172 2834     		adds	r4, r4, #40
 2390 0174 03EB8613 		add	r3, r3, r6, lsl #6
 436:AudioProcessor.cpp ****         // Update Patch using dedicated knob values
 2391              		.loc 3 436 5 discriminator 2 view .LVU766
 2392 0178 0136     		adds	r6, r6, #1
 2393              	.LVL144:
 489:AudioProcessor.cpp ****     }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 70


 2394              		.loc 3 489 25 discriminator 2 view .LVU767
 2395 017a FFF7FEFF 		bl	_ZN6plaits5Voice6RenderERKNS_5PatchERKNS_11ModulationsEPNS0_5FrameEj
 2396              	.LVL145:
 436:AudioProcessor.cpp ****         // Update Patch using dedicated knob values
 2397              		.loc 3 436 5 is_stmt 1 discriminator 2 view .LVU768
 436:AudioProcessor.cpp ****         // Update Patch using dedicated knob values
 2398              		.loc 3 436 5 is_stmt 0 discriminator 2 view .LVU769
 2399 017e 61E7     		b	.L132
 2400              	.L134:
 436:AudioProcessor.cpp ****         // Update Patch using dedicated knob values
 2401              		.loc 3 436 5 discriminator 2 view .LVU770
 2402              	.LBE290:
 493:AudioProcessor.cpp ****     for (int v = effective_voices; v < NUM_VOICES; ++v) {
 2403              		.loc 3 493 5 is_stmt 1 view .LVU771
 493:AudioProcessor.cpp ****     for (int v = effective_voices; v < NUM_VOICES; ++v) {
 2404              		.loc 3 493 9 is_stmt 0 view .LVU772
 2405 0180 08F10104 		add	r4, r8, #1
 2406              	.LVL146:
 494:AudioProcessor.cpp ****          memset(output_buffers[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 2407              		.loc 3 494 5 is_stmt 1 view .LVU773
 2408              	.L145:
 2409              	.LBB291:
 494:AudioProcessor.cpp ****          memset(output_buffers[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 2410              		.loc 3 494 38 discriminator 3 view .LVU774
 2411 0184 042C     		cmp	r4, #4
 2412 0186 08D0     		beq	.L144
 495:AudioProcessor.cpp ****          // Keep voice_active[v] = false and modulations[v].trigger = 0.0f
 2413              		.loc 3 495 10 discriminator 2 view .LVU775
 495:AudioProcessor.cpp ****          // Keep voice_active[v] = false and modulations[v].trigger = 0.0f
 2414              		.loc 3 495 16 is_stmt 0 discriminator 2 view .LVU776
 2415 0188 1C48     		ldr	r0, .L165+48
 2416 018a 4022     		movs	r2, #64
 2417 018c 0021     		movs	r1, #0
 2418 018e 00EB8410 		add	r0, r0, r4, lsl #6
 494:AudioProcessor.cpp ****          memset(output_buffers[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 2419              		.loc 3 494 5 discriminator 2 view .LVU777
 2420 0192 0134     		adds	r4, r4, #1
 2421              	.LVL147:
 495:AudioProcessor.cpp ****          // Keep voice_active[v] = false and modulations[v].trigger = 0.0f
 2422              		.loc 3 495 16 discriminator 2 view .LVU778
 2423 0194 FFF7FEFF 		bl	memset
 2424              	.LVL148:
 494:AudioProcessor.cpp ****          memset(output_buffers[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 2425              		.loc 3 494 5 is_stmt 1 discriminator 2 view .LVU779
 494:AudioProcessor.cpp ****          memset(output_buffers[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 2426              		.loc 3 494 5 is_stmt 0 discriminator 2 view .LVU780
 2427 0198 F4E7     		b	.L145
 2428              	.L144:
 494:AudioProcessor.cpp ****          memset(output_buffers[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 2429              		.loc 3 494 5 discriminator 2 view .LVU781
 2430              	.LBE291:
 500:AudioProcessor.cpp ****         for(int v = 0; v <= max_voice_idx; ++v) {
 2431              		.loc 3 500 5 is_stmt 1 view .LVU782
 2432              	.LBB292:
 500:AudioProcessor.cpp ****         for(int v = 0; v <= max_voice_idx; ++v) {
 2433              		.loc 3 500 8 is_stmt 0 view .LVU783
 2434 019a 134E     		ldr	r6, .L165+28
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 71


 2435              	.LVL149:
 500:AudioProcessor.cpp ****         for(int v = 0; v <= max_voice_idx; ++v) {
 2436              		.loc 3 500 8 view .LVU784
 2437 019c 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 500:AudioProcessor.cpp ****         for(int v = 0; v <= max_voice_idx; ++v) {
 2438              		.loc 3 500 5 view .LVU785
 2439 019e 002B     		cmp	r3, #0
 2440 01a0 C0D0     		beq	.L129
 2441 01a2 1A4C     		ldr	r4, .L165+64
 2442              	.LVL150:
 2443              	.LBB293:
 2444              	.LBB294:
 501:AudioProcessor.cpp ****             if(voice_active[v]) {
 2445              		.loc 3 501 17 view .LVU786
 2446 01a4 0025     		movs	r5, #0
 2447 01a6 114F     		ldr	r7, .L165+32
 2448              	.LVL151:
 2449              	.L148:
 501:AudioProcessor.cpp ****             if(voice_active[v]) {
 2450              		.loc 3 501 26 is_stmt 1 discriminator 1 view .LVU787
 2451 01a8 4545     		cmp	r5, r8
 2452 01aa 0BDC     		bgt	.L146
 502:AudioProcessor.cpp ****                 // Reset and immediately trigger the envelope to restart the note with the new engi
 2453              		.loc 3 502 13 view .LVU788
 502:AudioProcessor.cpp ****                 // Reset and immediately trigger the envelope to restart the note with the new engi
 2454              		.loc 3 502 30 is_stmt 0 view .LVU789
 2455 01ac 17F8013B 		ldrb	r3, [r7], #1	@ zero_extendqisi2
 502:AudioProcessor.cpp ****                 // Reset and immediately trigger the envelope to restart the note with the new engi
 2456              		.loc 3 502 13 view .LVU790
 2457 01b0 2BB1     		cbz	r3, .L147
 504:AudioProcessor.cpp ****                 voice_envelopes[v].Trigger();
 2458              		.loc 3 504 17 is_stmt 1 view .LVU791
 504:AudioProcessor.cpp ****                 voice_envelopes[v].Trigger();
 2459              		.loc 3 504 41 is_stmt 0 view .LVU792
 2460 01b2 2046     		mov	r0, r4
 2461 01b4 FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 2462              	.LVL152:
 505:AudioProcessor.cpp ****             }
 2463              		.loc 3 505 17 is_stmt 1 view .LVU793
 505:AudioProcessor.cpp ****             }
 2464              		.loc 3 505 43 is_stmt 0 view .LVU794
 2465 01b8 2046     		mov	r0, r4
 2466 01ba FFF7FEFF 		bl	_ZN13VoiceEnvelope7TriggerEv
 2467              	.LVL153:
 2468              	.L147:
 501:AudioProcessor.cpp ****             if(voice_active[v]) {
 2469              		.loc 3 501 9 is_stmt 1 discriminator 2 view .LVU795
 2470 01be 0135     		adds	r5, r5, #1
 2471              	.LVL154:
 501:AudioProcessor.cpp ****             if(voice_active[v]) {
 2472              		.loc 3 501 9 is_stmt 0 discriminator 2 view .LVU796
 2473 01c0 4434     		adds	r4, r4, #68
 2474 01c2 F1E7     		b	.L148
 2475              	.L146:
 501:AudioProcessor.cpp ****             if(voice_active[v]) {
 2476              		.loc 3 501 9 discriminator 2 view .LVU797
 2477              	.LBE294:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 72


 508:AudioProcessor.cpp ****     }
 2478              		.loc 3 508 9 is_stmt 1 view .LVU798
 508:AudioProcessor.cpp ****     }
 2479              		.loc 3 508 29 is_stmt 0 view .LVU799
 2480 01c4 0023     		movs	r3, #0
 2481 01c6 3370     		strb	r3, [r6]
 2482              	.LBE293:
 2483 01c8 ACE7     		b	.L129
 2484              	.L166:
 2485 01ca 00BF     		.align	2
 2486              	.L165:
 2487 01cc 00000000 		.word	.LANCHOR13
 2488 01d0 00000000 		.word	.LANCHOR11
 2489 01d4 00000000 		.word	patches
 2490 01d8 00000000 		.word	modulations
 2491 01dc 00000000 		.word	.LANCHOR12
 2492 01e0 00000000 		.word	.LANCHOR10
 2493 01e4 00000000 		.word	.LANCHOR1
 2494 01e8 00000000 		.word	.LANCHOR5
 2495 01ec 00000000 		.word	voice_active
 2496 01f0 00000000 		.word	0
 2497 01f4 00000000 		.word	voice_note
 2498 01f8 00000000 		.word	voices
 2499 01fc 00000000 		.word	output_buffers
 2500 0200 40000000 		.word	output_buffers+64
 2501 0204 80000000 		.word	output_buffers+128
 2502 0208 C0000000 		.word	output_buffers+192
 2503 020c 00000000 		.word	voice_envelopes
 2504              	.LBE292:
 2505              		.cfi_endproc
 2506              	.LFE5352:
 2508              		.section	.text._Z21ProcessVoiceEnvelopesb,"ax",%progbits
 2509              		.align	1
 2510              		.global	_Z21ProcessVoiceEnvelopesb
 2511              		.syntax unified
 2512              		.thumb
 2513              		.thumb_func
 2515              	_Z21ProcessVoiceEnvelopesb:
 2516              	.LVL155:
 2517              	.LFB5353:
 511:AudioProcessor.cpp **** 
 512:AudioProcessor.cpp **** void ProcessVoiceEnvelopes(bool poly_mode) {
 2518              		.loc 3 512 44 is_stmt 1 view -0
 2519              		.cfi_startproc
 2520              		@ args = 0, pretend = 0, frame = 8
 2521              		@ frame_needed = 0, uses_anonymous_args = 0
 513:AudioProcessor.cpp ****     // Bypass custom envelope for percussive Plaits engines
 514:AudioProcessor.cpp ****     bool percussiveEngine = (current_engine_index > 7);
 2522              		.loc 3 514 5 view .LVU801
 2523              		.loc 3 514 51 is_stmt 0 view .LVU802
 2524 0000 374B     		ldr	r3, .L182
 515:AudioProcessor.cpp **** 
 516:AudioProcessor.cpp ****     memset(mix_buffer_out, 0, sizeof(mix_buffer_out));
 2525              		.loc 3 516 11 view .LVU803
 2526 0002 4022     		movs	r2, #64
 2527 0004 0021     		movs	r1, #0
 512:AudioProcessor.cpp ****     // Bypass custom envelope for percussive Plaits engines
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 73


 2528              		.loc 3 512 44 view .LVU804
 2529 0006 F0B5     		push	{r4, r5, r6, r7, lr}
 2530              		.cfi_def_cfa_offset 20
 2531              		.cfi_offset 4, -20
 2532              		.cfi_offset 5, -16
 2533              		.cfi_offset 6, -12
 2534              		.cfi_offset 7, -8
 2535              		.cfi_offset 14, -4
 2536 0008 0446     		mov	r4, r0
 2537              		.loc 3 516 11 view .LVU805
 2538 000a 3648     		ldr	r0, .L182+4
 2539              	.LVL156:
 514:AudioProcessor.cpp **** 
 2540              		.loc 3 514 51 view .LVU806
 2541 000c 1E68     		ldr	r6, [r3]
 2542              	.LVL157:
 2543              		.loc 3 516 5 is_stmt 1 view .LVU807
 2544 000e 364D     		ldr	r5, .L182+8
 512:AudioProcessor.cpp ****     // Bypass custom envelope for percussive Plaits engines
 2545              		.loc 3 512 44 is_stmt 0 view .LVU808
 2546 0010 2DED028B 		vpush.64	{d8}
 2547              		.cfi_def_cfa_offset 28
 2548              		.cfi_offset 80, -28
 2549              		.cfi_offset 81, -24
 2550 0014 83B0     		sub	sp, sp, #12
 2551              		.cfi_def_cfa_offset 40
 2552              		.loc 3 516 11 view .LVU809
 2553 0016 FFF7FEFF 		bl	memset
 2554              	.LVL158:
 517:AudioProcessor.cpp ****     memset(mix_buffer_aux, 0, sizeof(mix_buffer_aux));
 2555              		.loc 3 517 5 is_stmt 1 view .LVU810
 2556              		.loc 3 517 11 is_stmt 0 view .LVU811
 2557 001a 4022     		movs	r2, #64
 2558 001c 0021     		movs	r1, #0
 2559 001e 3348     		ldr	r0, .L182+12
 2560 0020 FFF7FEFF 		bl	memset
 2561              	.LVL159:
 518:AudioProcessor.cpp ****     
 519:AudioProcessor.cpp ****     // Apply the same punchier attack response
 520:AudioProcessor.cpp ****     float attack_raw = env_attack_val;
 2562              		.loc 3 520 5 is_stmt 1 view .LVU812
 2563              		.loc 3 520 11 is_stmt 0 view .LVU813
 2564 0024 324B     		ldr	r3, .L182+16
 521:AudioProcessor.cpp ****     float attack_value;
 522:AudioProcessor.cpp ****     if (attack_raw < 0.2f) {
 2565              		.loc 3 522 5 view .LVU814
 2566 0026 DFED337A 		vldr.32	s15, .L182+20
 520:AudioProcessor.cpp ****     float attack_value;
 2567              		.loc 3 520 11 view .LVU815
 2568 002a 93ED000A 		vldr.32	s0, [r3]
 2569              	.LVL160:
 521:AudioProcessor.cpp ****     float attack_value;
 2570              		.loc 3 521 5 is_stmt 1 view .LVU816
 2571              		.loc 3 522 5 view .LVU817
 523:AudioProcessor.cpp ****         // More exaggerated curve for very short attacks (extra punchy)
 524:AudioProcessor.cpp ****         attack_value = attack_raw * (attack_raw * 0.5f);
 525:AudioProcessor.cpp ****     } else {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 74


 526:AudioProcessor.cpp ****         // Regular cubic response for longer attacks
 527:AudioProcessor.cpp ****         attack_value = attack_raw * attack_raw * attack_raw;
 528:AudioProcessor.cpp ****     }
 529:AudioProcessor.cpp ****     
 530:AudioProcessor.cpp ****     // Normal cubic curve for release
 531:AudioProcessor.cpp ****     float release_value = env_release_val * env_release_val * env_release_val;
 2572              		.loc 3 531 43 is_stmt 0 view .LVU818
 2573 002e 324B     		ldr	r3, .L182+24
 522:AudioProcessor.cpp ****         // More exaggerated curve for very short attacks (extra punchy)
 2574              		.loc 3 522 5 view .LVU819
 2575 0030 B4EEE70A 		vcmpe.f32	s0, s15
 2576              		.loc 3 531 43 view .LVU820
 2577 0034 D3ED007A 		vldr.32	s15, [r3]
 522:AudioProcessor.cpp ****         // More exaggerated curve for very short attacks (extra punchy)
 2578              		.loc 3 522 5 view .LVU821
 2579 0038 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 524:AudioProcessor.cpp ****     } else {
 2580              		.loc 3 524 9 is_stmt 1 view .LVU822
 2581              		.loc 3 531 43 is_stmt 0 view .LVU823
 2582 003c 67EEA78A 		vmul.f32	s17, s15, s15
 524:AudioProcessor.cpp ****     } else {
 2583              		.loc 3 524 49 view .LVU824
 2584 0040 4CBF     		ite	mi
 2585 0042 B6EE008A 		vmovmi.f32	s16, #5.0e-1
 527:AudioProcessor.cpp ****     }
 2586              		.loc 3 527 35 view .LVU825
 2587 0046 20EE008A 		vmulpl.f32	s16, s0, s0
 2588              		.loc 3 531 11 view .LVU826
 2589 004a 68EEA78A 		vmul.f32	s17, s17, s15
 524:AudioProcessor.cpp ****     } else {
 2590              		.loc 3 524 49 view .LVU827
 2591 004e 48BF     		it	mi
 2592 0050 20EE088A 		vmulmi.f32	s16, s0, s16
 527:AudioProcessor.cpp ****     }
 2593              		.loc 3 527 9 is_stmt 1 view .LVU828
 532:AudioProcessor.cpp ****     
 533:AudioProcessor.cpp ****     // Determine how many voices to process based on mode
 534:AudioProcessor.cpp ****     int voices_to_process = poly_mode ? NUM_VOICES : 1;
 2594              		.loc 3 534 39 is_stmt 0 view .LVU829
 2595 0054 002C     		cmp	r4, #0
 2596              	.LBB295:
 535:AudioProcessor.cpp ****     
 536:AudioProcessor.cpp ****     for (int v = 0; v < voices_to_process; ++v) {
 2597              		.loc 3 536 14 view .LVU830
 2598 0056 4FF00004 		mov	r4, #0
 2599              	.LBE295:
 534:AudioProcessor.cpp ****     
 2600              		.loc 3 534 39 view .LVU831
 2601 005a 14BF     		ite	ne
 2602 005c 0427     		movne	r7, #4
 2603 005e 0127     		moveq	r7, #1
 527:AudioProcessor.cpp ****     }
 2604              		.loc 3 527 22 view .LVU832
 2605 0060 28EE008A 		vmul.f32	s16, s16, s0
 2606              	.LVL161:
 531:AudioProcessor.cpp ****     
 2607              		.loc 3 531 5 is_stmt 1 view .LVU833
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 75


 534:AudioProcessor.cpp ****     
 2608              		.loc 3 534 5 view .LVU834
 2609              		.loc 3 536 5 view .LVU835
 2610              	.LBB300:
 2611              		.loc 3 536 23 view .LVU836
 2612              	.L174:
 2613              	.LBB296:
 537:AudioProcessor.cpp ****         // Choose envelope value: either custom AR envelope or flat for percussive modes
 538:AudioProcessor.cpp ****         float env_value;
 2614              		.loc 3 538 9 view .LVU837
 539:AudioProcessor.cpp ****         if (!percussiveEngine) {
 2615              		.loc 3 539 9 view .LVU838
 2616 0064 072E     		cmp	r6, #7
 2617 0066 38DC     		bgt	.L176
 540:AudioProcessor.cpp ****             voice_envelopes[v].SetAttackTime(attack_value);
 2618              		.loc 3 540 13 view .LVU839
 2619 0068 4423     		movs	r3, #68
 2620 006a 2448     		ldr	r0, .L182+28
 2621              		.loc 3 540 45 is_stmt 0 view .LVU840
 2622 006c B0EE480A 		vmov.f32	s0, s16
 2623 0070 03FB0400 		mla	r0, r3, r4, r0
 2624 0074 0190     		str	r0, [sp, #4]
 2625 0076 FFF7FEFF 		bl	_ZN13VoiceEnvelope13SetAttackTimeEf
 2626              	.LVL162:
 541:AudioProcessor.cpp ****             voice_envelopes[v].SetReleaseTime(release_value);
 2627              		.loc 3 541 13 is_stmt 1 view .LVU841
 2628              		.loc 3 541 46 is_stmt 0 view .LVU842
 2629 007a 0198     		ldr	r0, [sp, #4]
 2630 007c B0EE680A 		vmov.f32	s0, s17
 2631 0080 FFF7FEFF 		bl	_ZN13VoiceEnvelope14SetReleaseTimeEf
 2632              	.LVL163:
 542:AudioProcessor.cpp ****             env_value = voice_envelopes[v].Process();
 2633              		.loc 3 542 13 is_stmt 1 view .LVU843
 2634              		.loc 3 542 51 is_stmt 0 view .LVU844
 2635 0084 0198     		ldr	r0, [sp, #4]
 2636 0086 FFF7FEFF 		bl	_ZN13VoiceEnvelope7ProcessEv
 2637              	.LVL164:
 2638              	.L172:
 543:AudioProcessor.cpp ****         } else {
 544:AudioProcessor.cpp ****             env_value = 1.0f;
 545:AudioProcessor.cpp ****         }
 546:AudioProcessor.cpp ****         
 547:AudioProcessor.cpp ****         for (int i = 0; i < BLOCK_SIZE; ++i) {
 2639              		.loc 3 547 9 is_stmt 1 view .LVU845
 2640              	.LBB297:
 2641              		.loc 3 547 27 view .LVU846
 2642 008a 1648     		ldr	r0, .L182+4
 2643              	.LBE297:
 544:AudioProcessor.cpp ****         }
 2644              		.loc 3 544 23 is_stmt 0 view .LVU847
 2645 008c 2B46     		mov	r3, r5
 2646 008e 1749     		ldr	r1, .L182+12
 2647              	.LBB298:
 2648              		.loc 3 547 18 view .LVU848
 2649 0090 0022     		movs	r2, #0
 2650              	.LVL165:
 2651              	.L173:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 76


 548:AudioProcessor.cpp ****             mix_buffer_out[i] += output_buffers[v][i].out * env_value;
 2652              		.loc 3 548 13 is_stmt 1 discriminator 2 view .LVU849
 2653              		.loc 3 548 59 is_stmt 0 discriminator 2 view .LVU850
 2654 0092 B3F900C0 		ldrsh	ip, [r3]
 547:AudioProcessor.cpp ****             mix_buffer_out[i] += output_buffers[v][i].out * env_value;
 2655              		.loc 3 547 9 discriminator 2 view .LVU851
 2656 0096 0132     		adds	r2, r2, #1
 2657              	.LVL166:
 2658              		.loc 3 548 31 discriminator 2 view .LVU852
 2659 0098 D0ED007A 		vldr.32	s15, [r0]
 547:AudioProcessor.cpp ****             mix_buffer_out[i] += output_buffers[v][i].out * env_value;
 2660              		.loc 3 547 27 discriminator 2 view .LVU853
 2661 009c 0433     		adds	r3, r3, #4
 2662              		.loc 3 548 59 discriminator 2 view .LVU854
 2663 009e 07EE10CA 		vmov	s14, ip	@ int
 549:AudioProcessor.cpp ****             mix_buffer_aux[i] += output_buffers[v][i].aux * env_value;
 2664              		.loc 3 549 59 discriminator 2 view .LVU855
 2665 00a2 33F902CC 		ldrsh	ip, [r3, #-2]
 547:AudioProcessor.cpp ****             mix_buffer_out[i] += output_buffers[v][i].out * env_value;
 2666              		.loc 3 547 27 discriminator 2 view .LVU856
 2667 00a6 102A     		cmp	r2, #16
 548:AudioProcessor.cpp ****             mix_buffer_out[i] += output_buffers[v][i].out * env_value;
 2668              		.loc 3 548 59 discriminator 2 view .LVU857
 2669 00a8 B8EEC77A 		vcvt.f32.s32	s14, s14
 548:AudioProcessor.cpp ****             mix_buffer_out[i] += output_buffers[v][i].out * env_value;
 2670              		.loc 3 548 31 discriminator 2 view .LVU858
 2671 00ac E7EE007A 		vfma.f32	s15, s14, s0
 2672              		.loc 3 549 59 discriminator 2 view .LVU859
 2673 00b0 07EE10CA 		vmov	s14, ip	@ int
 2674 00b4 B8EEC77A 		vcvt.f32.s32	s14, s14
 548:AudioProcessor.cpp ****             mix_buffer_out[i] += output_buffers[v][i].out * env_value;
 2675              		.loc 3 548 31 discriminator 2 view .LVU860
 2676 00b8 E0EC017A 		vstmia.32	r0!, {s15}
 2677              		.loc 3 549 13 is_stmt 1 discriminator 2 view .LVU861
 2678              		.loc 3 549 31 is_stmt 0 discriminator 2 view .LVU862
 2679 00bc D1ED007A 		vldr.32	s15, [r1]
 2680 00c0 E7EE007A 		vfma.f32	s15, s14, s0
 2681 00c4 E1EC017A 		vstmia.32	r1!, {s15}
 547:AudioProcessor.cpp ****             mix_buffer_out[i] += output_buffers[v][i].out * env_value;
 2682              		.loc 3 547 9 is_stmt 1 discriminator 2 view .LVU863
 2683              	.LVL167:
 547:AudioProcessor.cpp ****             mix_buffer_out[i] += output_buffers[v][i].out * env_value;
 2684              		.loc 3 547 27 discriminator 2 view .LVU864
 2685 00c8 E3D1     		bne	.L173
 2686              	.LBE298:
 2687              	.LBE296:
 536:AudioProcessor.cpp ****         // Choose envelope value: either custom AR envelope or flat for percussive modes
 2688              		.loc 3 536 5 discriminator 2 view .LVU865
 2689 00ca 0134     		adds	r4, r4, #1
 2690              	.LVL168:
 536:AudioProcessor.cpp ****         // Choose envelope value: either custom AR envelope or flat for percussive modes
 2691              		.loc 3 536 23 discriminator 2 view .LVU866
 2692 00cc 4035     		adds	r5, r5, #64
 2693 00ce A742     		cmp	r7, r4
 2694 00d0 C8D1     		bne	.L174
 2695              	.LBE300:
 550:AudioProcessor.cpp ****         }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 77


 551:AudioProcessor.cpp ****     }
 552:AudioProcessor.cpp **** }
 2696              		.loc 3 552 1 is_stmt 0 view .LVU867
 2697 00d2 03B0     		add	sp, sp, #12
 2698              		.cfi_remember_state
 2699              		.cfi_def_cfa_offset 28
 2700              		@ sp needed
 2701 00d4 BDEC028B 		vldm	sp!, {d8}
 2702              		.cfi_restore 80
 2703              		.cfi_restore 81
 2704              		.cfi_def_cfa_offset 20
 2705              	.LVL169:
 2706              		.loc 3 552 1 view .LVU868
 2707 00d8 F0BD     		pop	{r4, r5, r6, r7, pc}
 2708              	.LVL170:
 2709              	.L176:
 2710              		.cfi_restore_state
 2711              	.LBB301:
 2712              	.LBB299:
 544:AudioProcessor.cpp ****         }
 2713              		.loc 3 544 23 view .LVU869
 2714 00da B7EE000A 		vmov.f32	s0, #1.0e+0
 2715 00de D4E7     		b	.L172
 2716              	.L183:
 2717              		.align	2
 2718              	.L182:
 2719 00e0 00000000 		.word	.LANCHOR4
 2720 00e4 00000000 		.word	.LANCHOR16
 2721 00e8 00000000 		.word	output_buffers
 2722 00ec 00000000 		.word	.LANCHOR17
 2723 00f0 00000000 		.word	.LANCHOR0
 2724 00f4 CDCC4C3E 		.word	1045220557
 2725 00f8 00000000 		.word	.LANCHOR1
 2726 00fc 00000000 		.word	voice_envelopes
 2727              	.LBE299:
 2728              	.LBE301:
 2729              		.cfi_endproc
 2730              	.LFE5353:
 2732              		.section	.text._Z18ProcessAudioOutputPfjf,"ax",%progbits
 2733              		.align	1
 2734              		.global	_Z18ProcessAudioOutputPfjf
 2735              		.syntax unified
 2736              		.thumb
 2737              		.thumb_func
 2739              	_Z18ProcessAudioOutputPfjf:
 2740              	.LVL171:
 2741              	.LFB5354:
 553:AudioProcessor.cpp **** 
 554:AudioProcessor.cpp **** void ProcessAudioOutput(AudioHandle::InterleavingOutputBuffer out, size_t size, float dry_level) {
 2742              		.loc 3 554 98 is_stmt 1 view -0
 2743              		.cfi_startproc
 2744              		@ args = 0, pretend = 0, frame = 0
 2745              		@ frame_needed = 0, uses_anonymous_args = 0
 555:AudioProcessor.cpp ****     // --- Process Echo Delay & Write Output ---
 556:AudioProcessor.cpp ****     float wet_level = 1.0f - dry_level; 
 2746              		.loc 3 556 5 view .LVU871
 2747              		.loc 3 556 11 is_stmt 0 view .LVU872
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 78


 2748 0000 B7EE005A 		vmov.f32	s10, #1.0e+0
 2749 0004 5C4B     		ldr	r3, .L195
 554:AudioProcessor.cpp ****     // --- Process Echo Delay & Write Output ---
 2750              		.loc 3 554 98 view .LVU873
 2751 0006 F0B5     		push	{r4, r5, r6, r7, lr}
 2752              		.cfi_def_cfa_offset 20
 2753              		.cfi_offset 4, -20
 2754              		.cfi_offset 5, -16
 2755              		.cfi_offset 6, -12
 2756              		.cfi_offset 7, -8
 2757              		.cfi_offset 14, -4
 2758              		.loc 3 556 11 view .LVU874
 2759 0008 0024     		movs	r4, #0
 2760 000a 35EE405A 		vsub.f32	s10, s10, s0
 2761              	.LVL172:
 557:AudioProcessor.cpp ****     float norm_factor = (float)NUM_VOICES * 1.0f; // Was 1.5f
 2762              		.loc 3 557 5 is_stmt 1 view .LVU875
 558:AudioProcessor.cpp ****     
 559:AudioProcessor.cpp ****     for (size_t i = 0; i < size; i += 2) {
 2763              		.loc 3 559 5 view .LVU876
 2764              		.loc 3 559 5 is_stmt 0 view .LVU877
 2765 000e D3E90625 		ldrd	r2, r5, [r3, #24]
 2766              	.LBB330:
 2767              		.loc 3 559 17 view .LVU878
 2768 0012 2746     		mov	r7, r4
 2769              	.LVL173:
 2770              	.L187:
 2771              		.loc 3 559 26 is_stmt 1 discriminator 3 view .LVU879
 2772 0014 8F42     		cmp	r7, r1
 2773 0016 80F0AA80 		bcs	.L185
 2774              	.LBB331:
 560:AudioProcessor.cpp ****         // Use mono mix buffer for both channels
 561:AudioProcessor.cpp ****         float sample = mix_buffer_out[i/2] / 32768.f / norm_factor;
 2775              		.loc 3 561 9 discriminator 2 view .LVU880
 2776              		.loc 3 561 42 is_stmt 0 discriminator 2 view .LVU881
 2777 001a 584D     		ldr	r5, .L195+4
 2778              		.loc 3 561 40 discriminator 2 view .LVU882
 2779 001c 7C08     		lsrs	r4, r7, #1
 2780              		.loc 3 561 44 discriminator 2 view .LVU883
 2781 001e DFED587A 		vldr.32	s15, .L195+8
 2782              	.LBB332:
 2783              	.LBB333:
 2784              	.LBB334:
 2785              	.LBB335:
 2786              		.file 6 "lib/DaisySP/Source/Utility/delayline.h"
   1:lib/DaisySP/Source/Utility/delayline.h **** /*
   2:lib/DaisySP/Source/Utility/delayline.h **** Copyright (c) 2020 Electrosmith, Corp
   3:lib/DaisySP/Source/Utility/delayline.h **** 
   4:lib/DaisySP/Source/Utility/delayline.h **** Use of this source code is governed by an MIT-style
   5:lib/DaisySP/Source/Utility/delayline.h **** license that can be found in the LICENSE file or at
   6:lib/DaisySP/Source/Utility/delayline.h **** https://opensource.org/licenses/MIT.
   7:lib/DaisySP/Source/Utility/delayline.h **** */
   8:lib/DaisySP/Source/Utility/delayline.h **** 
   9:lib/DaisySP/Source/Utility/delayline.h **** #pragma once
  10:lib/DaisySP/Source/Utility/delayline.h **** #ifndef DSY_DELAY_H
  11:lib/DaisySP/Source/Utility/delayline.h **** #define DSY_DELAY_H
  12:lib/DaisySP/Source/Utility/delayline.h **** #include <stdlib.h>
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 79


  13:lib/DaisySP/Source/Utility/delayline.h **** #include <stdint.h>
  14:lib/DaisySP/Source/Utility/delayline.h **** namespace daisysp
  15:lib/DaisySP/Source/Utility/delayline.h **** {
  16:lib/DaisySP/Source/Utility/delayline.h **** /** Simple Delay line.
  17:lib/DaisySP/Source/Utility/delayline.h **** November 2019
  18:lib/DaisySP/Source/Utility/delayline.h **** 
  19:lib/DaisySP/Source/Utility/delayline.h **** Converted to Template December 2019
  20:lib/DaisySP/Source/Utility/delayline.h **** 
  21:lib/DaisySP/Source/Utility/delayline.h **** declaration example: (1 second of floats)
  22:lib/DaisySP/Source/Utility/delayline.h **** 
  23:lib/DaisySP/Source/Utility/delayline.h **** DelayLine<float, SAMPLE_RATE> del;
  24:lib/DaisySP/Source/Utility/delayline.h **** 
  25:lib/DaisySP/Source/Utility/delayline.h **** By: shensley
  26:lib/DaisySP/Source/Utility/delayline.h **** */
  27:lib/DaisySP/Source/Utility/delayline.h **** template <typename T, size_t max_size>
  28:lib/DaisySP/Source/Utility/delayline.h **** class DelayLine
  29:lib/DaisySP/Source/Utility/delayline.h **** {
  30:lib/DaisySP/Source/Utility/delayline.h ****   public:
  31:lib/DaisySP/Source/Utility/delayline.h ****     DelayLine() {}
  32:lib/DaisySP/Source/Utility/delayline.h ****     ~DelayLine() {}
  33:lib/DaisySP/Source/Utility/delayline.h ****     /** initializes the delay line by clearing the values within, and setting delay to 1 sample.
  34:lib/DaisySP/Source/Utility/delayline.h ****     */
  35:lib/DaisySP/Source/Utility/delayline.h ****     void Init() { Reset(); }
  36:lib/DaisySP/Source/Utility/delayline.h ****     /** clears buffer, sets write ptr to 0, and delay to 1 sample.
  37:lib/DaisySP/Source/Utility/delayline.h ****     */
  38:lib/DaisySP/Source/Utility/delayline.h ****     void Reset()
  39:lib/DaisySP/Source/Utility/delayline.h ****     {
  40:lib/DaisySP/Source/Utility/delayline.h ****         for(size_t i = 0; i < max_size; i++)
  41:lib/DaisySP/Source/Utility/delayline.h ****         {
  42:lib/DaisySP/Source/Utility/delayline.h ****             line_[i] = T(0);
  43:lib/DaisySP/Source/Utility/delayline.h ****         }
  44:lib/DaisySP/Source/Utility/delayline.h ****         write_ptr_ = 0;
  45:lib/DaisySP/Source/Utility/delayline.h ****         delay_     = 1;
  46:lib/DaisySP/Source/Utility/delayline.h ****     }
  47:lib/DaisySP/Source/Utility/delayline.h **** 
  48:lib/DaisySP/Source/Utility/delayline.h ****     /** sets the delay time in samples
  49:lib/DaisySP/Source/Utility/delayline.h ****         If a float is passed in, a fractional component will be calculated for interpolating the de
  50:lib/DaisySP/Source/Utility/delayline.h ****     */
  51:lib/DaisySP/Source/Utility/delayline.h ****     inline void SetDelay(size_t delay)
  52:lib/DaisySP/Source/Utility/delayline.h ****     {
  53:lib/DaisySP/Source/Utility/delayline.h ****         frac_  = 0.0f;
  54:lib/DaisySP/Source/Utility/delayline.h ****         delay_ = delay < max_size ? delay : max_size - 1;
  55:lib/DaisySP/Source/Utility/delayline.h ****     }
  56:lib/DaisySP/Source/Utility/delayline.h **** 
  57:lib/DaisySP/Source/Utility/delayline.h ****     /** sets the delay time in samples
  58:lib/DaisySP/Source/Utility/delayline.h ****         If a float is passed in, a fractional component will be calculated for interpolating the de
  59:lib/DaisySP/Source/Utility/delayline.h ****     */
  60:lib/DaisySP/Source/Utility/delayline.h ****     inline void SetDelay(float delay)
  61:lib/DaisySP/Source/Utility/delayline.h ****     {
  62:lib/DaisySP/Source/Utility/delayline.h ****         int32_t int_delay = static_cast<int32_t>(delay);
  63:lib/DaisySP/Source/Utility/delayline.h ****         frac_             = delay - static_cast<float>(int_delay);
  64:lib/DaisySP/Source/Utility/delayline.h ****         delay_ = static_cast<size_t>(int_delay) < max_size ? int_delay
  65:lib/DaisySP/Source/Utility/delayline.h ****                                                            : max_size - 1;
  66:lib/DaisySP/Source/Utility/delayline.h ****     }
  67:lib/DaisySP/Source/Utility/delayline.h **** 
  68:lib/DaisySP/Source/Utility/delayline.h ****     /** writes the sample of type T to the delay line, and advances the write ptr
  69:lib/DaisySP/Source/Utility/delayline.h ****     */
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 80


  70:lib/DaisySP/Source/Utility/delayline.h ****     inline void Write(const T sample)
  71:lib/DaisySP/Source/Utility/delayline.h ****     {
  72:lib/DaisySP/Source/Utility/delayline.h ****         line_[write_ptr_] = sample;
  73:lib/DaisySP/Source/Utility/delayline.h ****         write_ptr_        = (write_ptr_ - 1 + max_size) % max_size;
  74:lib/DaisySP/Source/Utility/delayline.h ****     }
  75:lib/DaisySP/Source/Utility/delayline.h **** 
  76:lib/DaisySP/Source/Utility/delayline.h ****     /** returns the next sample of type T in the delay line, interpolated if necessary.
  77:lib/DaisySP/Source/Utility/delayline.h ****     */
  78:lib/DaisySP/Source/Utility/delayline.h ****     inline const T Read() const
  79:lib/DaisySP/Source/Utility/delayline.h ****     {
  80:lib/DaisySP/Source/Utility/delayline.h ****         T a = line_[(write_ptr_ + delay_) % max_size];
 2787              		.loc 6 80 43 discriminator 2 view .LVU884
 2788 0022 4BF6803C 		movw	ip, #48000
 2789              	.LBE335:
 2790              	.LBE334:
 2791              	.LBE333:
 2792              	.LBE332:
 2793              		.loc 3 561 42 discriminator 2 view .LVU885
 2794 0026 05EB8404 		add	r4, r5, r4, lsl #2
 2795              	.LBB403:
 2796              	.LBB397:
 2797              	.LBB340:
 2798              	.LBB341:
 2799              		.file 7 "lib/DaisySP/Source/Utility/dsp.h"
   1:lib/DaisySP/Source/Utility/dsp.h **** /*
   2:lib/DaisySP/Source/Utility/dsp.h **** Copyright (c) 2020 Electrosmith, Corp, Emilie Gillet
   3:lib/DaisySP/Source/Utility/dsp.h **** 
   4:lib/DaisySP/Source/Utility/dsp.h **** Use of this source code is governed by an MIT-style
   5:lib/DaisySP/Source/Utility/dsp.h **** license that can be found in the LICENSE file or at
   6:lib/DaisySP/Source/Utility/dsp.h **** https://opensource.org/licenses/MIT.
   7:lib/DaisySP/Source/Utility/dsp.h **** */
   8:lib/DaisySP/Source/Utility/dsp.h **** 
   9:lib/DaisySP/Source/Utility/dsp.h **** /** Helpful defines, functions, and other utilities for use in/with daisysp modules.
  10:lib/DaisySP/Source/Utility/dsp.h **** */
  11:lib/DaisySP/Source/Utility/dsp.h **** #pragma once
  12:lib/DaisySP/Source/Utility/dsp.h **** #ifndef DSY_CORE_DSP
  13:lib/DaisySP/Source/Utility/dsp.h **** #define DSY_CORE_DSP
  14:lib/DaisySP/Source/Utility/dsp.h **** #include <cassert>
  15:lib/DaisySP/Source/Utility/dsp.h **** #include <cstdint>
  16:lib/DaisySP/Source/Utility/dsp.h **** #include <random>
  17:lib/DaisySP/Source/Utility/dsp.h **** #include <cmath>
  18:lib/DaisySP/Source/Utility/dsp.h **** 
  19:lib/DaisySP/Source/Utility/dsp.h **** /** PIs
  20:lib/DaisySP/Source/Utility/dsp.h **** */
  21:lib/DaisySP/Source/Utility/dsp.h **** #define PI_F 3.1415927410125732421875f
  22:lib/DaisySP/Source/Utility/dsp.h **** #define TWOPI_F (2.0f * PI_F)
  23:lib/DaisySP/Source/Utility/dsp.h **** #define HALFPI_F (PI_F * 0.5f)
  24:lib/DaisySP/Source/Utility/dsp.h **** #define DSY_MIN(in, mn) (in < mn ? in : mn)
  25:lib/DaisySP/Source/Utility/dsp.h **** #define DSY_MAX(in, mx) (in > mx ? in : mx)
  26:lib/DaisySP/Source/Utility/dsp.h **** #define DSY_CLAMP(in, mn, mx) (DSY_MIN(DSY_MAX(in, mn), mx))
  27:lib/DaisySP/Source/Utility/dsp.h **** #define DSY_COUNTOF(_arr) (sizeof(_arr) / sizeof(_arr[0]))
  28:lib/DaisySP/Source/Utility/dsp.h **** 
  29:lib/DaisySP/Source/Utility/dsp.h **** namespace daisysp
  30:lib/DaisySP/Source/Utility/dsp.h **** {
  31:lib/DaisySP/Source/Utility/dsp.h **** //Avoids division for random floats. e.g. rand() * kRandFrac
  32:lib/DaisySP/Source/Utility/dsp.h **** static constexpr float kRandFrac = 1.f / (float)RAND_MAX;
  33:lib/DaisySP/Source/Utility/dsp.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 81


  34:lib/DaisySP/Source/Utility/dsp.h **** //Convert from semitones to other units. e.g. 2 ^ (kOneTwelfth * x)
  35:lib/DaisySP/Source/Utility/dsp.h **** static constexpr float kOneTwelfth = 1.f / 12.f;
  36:lib/DaisySP/Source/Utility/dsp.h **** 
  37:lib/DaisySP/Source/Utility/dsp.h **** /** efficient floating point min/max
  38:lib/DaisySP/Source/Utility/dsp.h **** c/o stephen mccaul
  39:lib/DaisySP/Source/Utility/dsp.h **** */
  40:lib/DaisySP/Source/Utility/dsp.h **** inline float fmax(float a, float b)
  41:lib/DaisySP/Source/Utility/dsp.h **** {
  42:lib/DaisySP/Source/Utility/dsp.h ****     float r;
  43:lib/DaisySP/Source/Utility/dsp.h **** #ifdef __arm__
  44:lib/DaisySP/Source/Utility/dsp.h ****     asm("vmaxnm.f32 %[d], %[n], %[m]" : [d] "=t"(r) : [n] "t"(a), [m] "t"(b) :);
  45:lib/DaisySP/Source/Utility/dsp.h **** #else
  46:lib/DaisySP/Source/Utility/dsp.h ****     r = (a > b) ? a : b;
  47:lib/DaisySP/Source/Utility/dsp.h **** #endif // __arm__
  48:lib/DaisySP/Source/Utility/dsp.h ****     return r;
  49:lib/DaisySP/Source/Utility/dsp.h **** }
  50:lib/DaisySP/Source/Utility/dsp.h **** 
  51:lib/DaisySP/Source/Utility/dsp.h **** inline float fmin(float a, float b)
  52:lib/DaisySP/Source/Utility/dsp.h **** {
  53:lib/DaisySP/Source/Utility/dsp.h ****     float r;
  54:lib/DaisySP/Source/Utility/dsp.h **** #ifdef __arm__
  55:lib/DaisySP/Source/Utility/dsp.h ****     asm("vminnm.f32 %[d], %[n], %[m]" : [d] "=t"(r) : [n] "t"(a), [m] "t"(b) :);
  56:lib/DaisySP/Source/Utility/dsp.h **** #else
  57:lib/DaisySP/Source/Utility/dsp.h ****     r = (a < b) ? a : b;
  58:lib/DaisySP/Source/Utility/dsp.h **** #endif // __arm__
  59:lib/DaisySP/Source/Utility/dsp.h ****     return r;
  60:lib/DaisySP/Source/Utility/dsp.h **** }
  61:lib/DaisySP/Source/Utility/dsp.h **** 
  62:lib/DaisySP/Source/Utility/dsp.h **** /** quick fp clamp
  63:lib/DaisySP/Source/Utility/dsp.h **** */
  64:lib/DaisySP/Source/Utility/dsp.h **** inline float fclamp(float in, float min, float max)
  65:lib/DaisySP/Source/Utility/dsp.h **** {
  66:lib/DaisySP/Source/Utility/dsp.h ****     return fmin(fmax(in, min), max);
  67:lib/DaisySP/Source/Utility/dsp.h **** }
  68:lib/DaisySP/Source/Utility/dsp.h **** 
  69:lib/DaisySP/Source/Utility/dsp.h **** /** From Musicdsp.org "Fast power and root estimates for 32bit floats)
  70:lib/DaisySP/Source/Utility/dsp.h **** Original code by Stefan Stenzel
  71:lib/DaisySP/Source/Utility/dsp.h **** These are approximations
  72:lib/DaisySP/Source/Utility/dsp.h **** */
  73:lib/DaisySP/Source/Utility/dsp.h **** inline float fastpower(float f, int n)
  74:lib/DaisySP/Source/Utility/dsp.h **** {
  75:lib/DaisySP/Source/Utility/dsp.h ****     long *lp, l;
  76:lib/DaisySP/Source/Utility/dsp.h ****     lp = (long *)(&f);
  77:lib/DaisySP/Source/Utility/dsp.h ****     l  = *lp;
  78:lib/DaisySP/Source/Utility/dsp.h ****     l -= 0x3F800000;
  79:lib/DaisySP/Source/Utility/dsp.h ****     l <<= (n - 1);
  80:lib/DaisySP/Source/Utility/dsp.h ****     l += 0x3F800000;
  81:lib/DaisySP/Source/Utility/dsp.h ****     *lp = l;
  82:lib/DaisySP/Source/Utility/dsp.h ****     return f;
  83:lib/DaisySP/Source/Utility/dsp.h **** }
  84:lib/DaisySP/Source/Utility/dsp.h **** 
  85:lib/DaisySP/Source/Utility/dsp.h **** inline float fastroot(float f, int n)
  86:lib/DaisySP/Source/Utility/dsp.h **** {
  87:lib/DaisySP/Source/Utility/dsp.h ****     long *lp, l;
  88:lib/DaisySP/Source/Utility/dsp.h ****     lp = (long *)(&f);
  89:lib/DaisySP/Source/Utility/dsp.h ****     l  = *lp;
  90:lib/DaisySP/Source/Utility/dsp.h ****     l -= 0x3F800000;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 82


  91:lib/DaisySP/Source/Utility/dsp.h ****     l >>= (n - 1);
  92:lib/DaisySP/Source/Utility/dsp.h ****     l += 0x3F800000;
  93:lib/DaisySP/Source/Utility/dsp.h ****     *lp = l;
  94:lib/DaisySP/Source/Utility/dsp.h ****     return f;
  95:lib/DaisySP/Source/Utility/dsp.h **** }
  96:lib/DaisySP/Source/Utility/dsp.h **** 
  97:lib/DaisySP/Source/Utility/dsp.h **** /** Significantly more efficient than fmodf(x, 1.0f) for calculating
  98:lib/DaisySP/Source/Utility/dsp.h ****  *  the decimal part of a floating point value.
  99:lib/DaisySP/Source/Utility/dsp.h ****  */
 100:lib/DaisySP/Source/Utility/dsp.h **** inline float fastmod1f(float x)
 101:lib/DaisySP/Source/Utility/dsp.h **** {
 102:lib/DaisySP/Source/Utility/dsp.h ****     return x - floorf(x);
 103:lib/DaisySP/Source/Utility/dsp.h **** }
 104:lib/DaisySP/Source/Utility/dsp.h **** 
 105:lib/DaisySP/Source/Utility/dsp.h **** /** From http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
 106:lib/DaisySP/Source/Utility/dsp.h **** No approximation, pow10f(x) gives a 90% speed increase over powf(10.f, x)
 107:lib/DaisySP/Source/Utility/dsp.h **** */
 108:lib/DaisySP/Source/Utility/dsp.h **** inline float pow10f(float f)
 109:lib/DaisySP/Source/Utility/dsp.h **** {
 110:lib/DaisySP/Source/Utility/dsp.h ****     return expf(2.302585092994046f * f);
 111:lib/DaisySP/Source/Utility/dsp.h **** }
 112:lib/DaisySP/Source/Utility/dsp.h **** 
 113:lib/DaisySP/Source/Utility/dsp.h **** /* Original code for fastlog2f by Dr. Paul Beckmann from the ARM community forum, adapted from the 
 114:lib/DaisySP/Source/Utility/dsp.h **** About 25% performance increase over std::log10f
 115:lib/DaisySP/Source/Utility/dsp.h **** */
 116:lib/DaisySP/Source/Utility/dsp.h **** inline float fastlog2f(float f)
 117:lib/DaisySP/Source/Utility/dsp.h **** {
 118:lib/DaisySP/Source/Utility/dsp.h ****     float frac;
 119:lib/DaisySP/Source/Utility/dsp.h ****     int   exp;
 120:lib/DaisySP/Source/Utility/dsp.h ****     frac = frexpf(fabsf(f), &exp);
 121:lib/DaisySP/Source/Utility/dsp.h ****     f    = 1.23149591368684f;
 122:lib/DaisySP/Source/Utility/dsp.h ****     f *= frac;
 123:lib/DaisySP/Source/Utility/dsp.h ****     f += -4.11852516267426f;
 124:lib/DaisySP/Source/Utility/dsp.h ****     f *= frac;
 125:lib/DaisySP/Source/Utility/dsp.h ****     f += 6.02197014179219f;
 126:lib/DaisySP/Source/Utility/dsp.h ****     f *= frac;
 127:lib/DaisySP/Source/Utility/dsp.h ****     f += -3.13396450166353f;
 128:lib/DaisySP/Source/Utility/dsp.h ****     f += exp;
 129:lib/DaisySP/Source/Utility/dsp.h ****     return (f);
 130:lib/DaisySP/Source/Utility/dsp.h **** }
 131:lib/DaisySP/Source/Utility/dsp.h **** 
 132:lib/DaisySP/Source/Utility/dsp.h **** inline float fastlog10f(float f)
 133:lib/DaisySP/Source/Utility/dsp.h **** {
 134:lib/DaisySP/Source/Utility/dsp.h ****     return fastlog2f(f) * 0.3010299956639812f;
 135:lib/DaisySP/Source/Utility/dsp.h **** }
 136:lib/DaisySP/Source/Utility/dsp.h **** 
 137:lib/DaisySP/Source/Utility/dsp.h **** /** Midi to frequency helper
 138:lib/DaisySP/Source/Utility/dsp.h **** */
 139:lib/DaisySP/Source/Utility/dsp.h **** inline float mtof(float m)
 140:lib/DaisySP/Source/Utility/dsp.h **** {
 141:lib/DaisySP/Source/Utility/dsp.h ****     return powf(2, (m - 69.0f) / 12.0f) * 440.0f;
 142:lib/DaisySP/Source/Utility/dsp.h **** }
 143:lib/DaisySP/Source/Utility/dsp.h **** 
 144:lib/DaisySP/Source/Utility/dsp.h **** 
 145:lib/DaisySP/Source/Utility/dsp.h **** /** one pole lpf
 146:lib/DaisySP/Source/Utility/dsp.h **** out is passed by reference, and must be retained between
 147:lib/DaisySP/Source/Utility/dsp.h **** calls to properly filter the signal
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 83


 148:lib/DaisySP/Source/Utility/dsp.h **** coeff can be calculated:
 149:lib/DaisySP/Source/Utility/dsp.h **** coeff = 1.0 / (time * sample_rate) ; where time is in seconds
 150:lib/DaisySP/Source/Utility/dsp.h **** */
 151:lib/DaisySP/Source/Utility/dsp.h **** inline void fonepole(float &out, float in, float coeff)
 152:lib/DaisySP/Source/Utility/dsp.h **** {
 153:lib/DaisySP/Source/Utility/dsp.h ****     out += coeff * (in - out);
 2800              		.loc 7 153 24 discriminator 2 view .LVU886
 2801 002a D3ED026A 		vldr.32	s13, [r3, #8]
 2802              		.loc 7 153 9 discriminator 2 view .LVU887
 2803 002e 93ED036A 		vldr.32	s12, [r3, #12]
 2804              	.LBE341:
 2805              	.LBE340:
 2806              	.LBB344:
 2807              	.LBB345:
  64:lib/DaisySP/Source/Utility/delayline.h ****                                                            : max_size - 1;
 2808              		.loc 6 64 60 discriminator 2 view .LVU888
 2809 0032 4BF67F35 		movw	r5, #47999
 2810              	.LBE345:
 2811              	.LBE344:
 2812              	.LBE397:
 2813              	.LBE403:
 2814              		.loc 3 561 44 discriminator 2 view .LVU889
 2815 0036 94ED007A 		vldr.32	s14, [r4]
 2816 003a 27EE277A 		vmul.f32	s14, s14, s15
 2817              		.loc 3 561 15 discriminator 2 view .LVU890
 2818 003e F5EE007A 		vmov.f32	s15, #2.5e-1
 2819 0042 27EE277A 		vmul.f32	s14, s14, s15
 2820              	.LVL174:
 562:AudioProcessor.cpp ****         float wet    = delay.Process(sample);
 2821              		.loc 3 562 9 is_stmt 1 discriminator 2 view .LVU891
 2822              	.LBB404:
 2823              	.LBI332:
  67:Effects/EchoDelay.h ****         }
  68:Effects/EchoDelay.h **** 
  69:Effects/EchoDelay.h ****         inline float Process(const float in)
 2824              		.loc 5 69 22 discriminator 2 view .LVU892
 2825              	.LBB398:
 2826              	.LBB348:
 2827              	.LBI340:
 151:lib/DaisySP/Source/Utility/dsp.h **** {
 2828              		.loc 7 151 13 discriminator 2 view .LVU893
 2829              	.LBB342:
 2830              		.loc 7 153 5 discriminator 2 view .LVU894
 2831              		.loc 7 153 9 is_stmt 0 discriminator 2 view .LVU895
 2832 0046 D3ED017A 		vldr.32	s15, [r3, #4]
 2833              		.loc 7 153 24 discriminator 2 view .LVU896
 2834 004a 76EEE76A 		vsub.f32	s13, s13, s15
 2835              		.loc 7 153 9 discriminator 2 view .LVU897
 2836 004e E6EE267A 		vfma.f32	s15, s12, s13
 2837              	.LBE342:
 2838              	.LBE348:
  70:Effects/EchoDelay.h ****         {
  71:Effects/EchoDelay.h ****             float out;
  72:Effects/EchoDelay.h ****             daisysp::fonepole(delay_time_current_, delay_time_target_, delay_smooth_coef_);
  73:Effects/EchoDelay.h ****             delayLine_.SetDelay(delay_time_current_ * sample_rate_);
 2839              		.loc 5 73 32 discriminator 2 view .LVU898
 2840 0052 D3ED006A 		vldr.32	s13, [r3]
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 84


 2841              	.LBB349:
 2842              	.LBB343:
 2843              		.loc 7 153 9 discriminator 2 view .LVU899
 2844 0056 C3ED017A 		vstr.32	s15, [r3, #4]
 2845              	.LVL175:
 2846              		.loc 7 153 9 discriminator 2 view .LVU900
 2847              	.LBE343:
 2848              	.LBE349:
 2849              		.loc 5 73 32 discriminator 2 view .LVU901
 2850 005a 67EEA67A 		vmul.f32	s15, s15, s13
 2851              	.LVL176:
 2852              	.LBB350:
 2853              	.LBI344:
  60:lib/DaisySP/Source/Utility/delayline.h ****     {
 2854              		.loc 6 60 17 is_stmt 1 discriminator 2 view .LVU902
 2855              	.LBB346:
  62:lib/DaisySP/Source/Utility/delayline.h ****         frac_             = delay - static_cast<float>(int_delay);
 2856              		.loc 6 62 17 is_stmt 0 discriminator 2 view .LVU903
 2857 005e FDEEE76A 		vcvt.s32.f32	s13, s15
 2858              	.LVL177:
  64:lib/DaisySP/Source/Utility/delayline.h ****                                                            : max_size - 1;
 2859              		.loc 6 64 60 discriminator 2 view .LVU904
 2860 0062 16EE904A 		vmov	r4, s13	@ int
  63:lib/DaisySP/Source/Utility/delayline.h ****         delay_ = static_cast<size_t>(int_delay) < max_size ? int_delay
 2861              		.loc 6 63 37 discriminator 2 view .LVU905
 2862 0066 B8EEE66A 		vcvt.f32.s32	s12, s13
  64:lib/DaisySP/Source/Utility/delayline.h ****                                                            : max_size - 1;
 2863              		.loc 6 64 60 discriminator 2 view .LVU906
 2864 006a AC42     		cmp	r4, r5
  63:lib/DaisySP/Source/Utility/delayline.h ****         delay_ = static_cast<size_t>(int_delay) < max_size ? int_delay
 2865              		.loc 6 63 35 discriminator 2 view .LVU907
 2866 006c 77EEC67A 		vsub.f32	s15, s15, s12
 2867              	.LVL178:
  64:lib/DaisySP/Source/Utility/delayline.h ****                                                            : max_size - 1;
 2868              		.loc 6 64 60 discriminator 2 view .LVU908
 2869 0070 28BF     		it	cs
 2870 0072 2C46     		movcs	r4, r5
 2871 0074 2546     		mov	r5, r4
 2872              	.LVL179:
  64:lib/DaisySP/Source/Utility/delayline.h ****                                                            : max_size - 1;
 2873              		.loc 6 64 60 discriminator 2 view .LVU909
 2874              	.LBE346:
 2875              	.LBE350:
 2876              	.LBB351:
 2877              	.LBI334:
  78:lib/DaisySP/Source/Utility/delayline.h ****     {
 2878              		.loc 6 78 20 is_stmt 1 discriminator 2 view .LVU910
 2879              	.LBB336:
 2880              		.loc 6 80 33 is_stmt 0 discriminator 2 view .LVU911
 2881 0076 1419     		adds	r4, r2, r4
 2882              	.LBE336:
 2883              	.LBE351:
 2884              	.LBB352:
 2885              	.LBB347:
  63:lib/DaisySP/Source/Utility/delayline.h ****         delay_ = static_cast<size_t>(int_delay) < max_size ? int_delay
 2886              		.loc 6 63 27 discriminator 2 view .LVU912
 2887 0078 C3ED057A 		vstr.32	s15, [r3, #20]
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 85


 2888              	.LBE347:
 2889              	.LBE352:
 2890              	.LBB353:
 2891              	.LBB337:
 2892              		.loc 6 80 43 discriminator 2 view .LVU913
 2893 007c B4FBFCF6 		udiv	r6, r4, ip
 2894 0080 0CFB1646 		mls	r6, ip, r6, r4
  81:lib/DaisySP/Source/Utility/delayline.h ****         T b = line_[(write_ptr_ + delay_ + 1) % max_size];
 2895              		.loc 6 81 42 discriminator 2 view .LVU914
 2896 0084 0134     		adds	r4, r4, #1
  80:lib/DaisySP/Source/Utility/delayline.h ****         T b = line_[(write_ptr_ + delay_ + 1) % max_size];
 2897              		.loc 6 80 11 discriminator 2 view .LVU915
 2898 0086 03EB8606 		add	r6, r3, r6, lsl #2
 2899 008a D6ED086A 		vldr.32	s13, [r6, #32]
 2900              	.LVL180:
 2901              		.loc 6 81 47 discriminator 2 view .LVU916
 2902 008e B4FBFCF6 		udiv	r6, r4, ip
 2903 0092 0CFB1644 		mls	r4, ip, r6, r4
 2904              		.loc 6 81 11 discriminator 2 view .LVU917
 2905 0096 03EB8404 		add	r4, r3, r4, lsl #2
  82:lib/DaisySP/Source/Utility/delayline.h ****         return a + (b - a) * frac_;
 2906              		.loc 6 82 23 discriminator 2 view .LVU918
 2907 009a 94ED086A 		vldr.32	s12, [r4, #32]
 2908              	.LBE337:
 2909              	.LBE353:
 2910              	.LBB354:
 2911              	.LBB355:
 2912              	.LBB356:
 2913              	.LBB357:
 2914              	.LBB358:
 2915              		.file 8 "Effects/BiquadFilters.h"
   1:Effects/BiquadFilters.h **** #pragma once
   2:Effects/BiquadFilters.h **** #ifndef INFS_BIQUADFILTERS_H
   3:Effects/BiquadFilters.h **** #define INFS_BIQUADFILTERS_H
   4:Effects/BiquadFilters.h **** 
   5:Effects/BiquadFilters.h **** #include <cassert>
   6:Effects/BiquadFilters.h **** #include <array>
   7:Effects/BiquadFilters.h **** #include <daisysp.h>
   8:Effects/BiquadFilters.h **** 
   9:Effects/BiquadFilters.h **** namespace infrasonic {
  10:Effects/BiquadFilters.h **** 
  11:Effects/BiquadFilters.h **** /**
  12:Effects/BiquadFilters.h ****  *  Single precision 2nd order biquad filter section with support for stereo processing.
  13:Effects/BiquadFilters.h ****  *  NOTE: There are templated filter definitions at the bottom of this file for convenience. 
  14:Effects/BiquadFilters.h ****  */
  15:Effects/BiquadFilters.h **** class BiquadSection {
  16:Effects/BiquadFilters.h **** 
  17:Effects/BiquadFilters.h ****     public:
  18:Effects/BiquadFilters.h **** 
  19:Effects/BiquadFilters.h ****         enum class FilterType {
  20:Effects/BiquadFilters.h ****             LowPass,
  21:Effects/BiquadFilters.h ****             HighPass,
  22:Effects/BiquadFilters.h ****             BandPass
  23:Effects/BiquadFilters.h ****         };
  24:Effects/BiquadFilters.h **** 
  25:Effects/BiquadFilters.h ****         // Assumes normalized coefficients (a0 == 1)
  26:Effects/BiquadFilters.h ****         // Ordering numerator then denominator: {b0, b1, b2, a1, a2}
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 86


  27:Effects/BiquadFilters.h ****         using Coefficients = std::array<float, 5>;
  28:Effects/BiquadFilters.h **** 
  29:Effects/BiquadFilters.h ****         static const Coefficients CalculateCoefficients(const FilterType type, 
  30:Effects/BiquadFilters.h ****                                                         const float sample_rate,
  31:Effects/BiquadFilters.h ****                                                         const float cutoff_hz,
  32:Effects/BiquadFilters.h ****                                                         const float q);
  33:Effects/BiquadFilters.h **** 
  34:Effects/BiquadFilters.h ****         BiquadSection() {}
  35:Effects/BiquadFilters.h ****         ~BiquadSection() {}
  36:Effects/BiquadFilters.h **** 
  37:Effects/BiquadFilters.h ****         void SetCoefficients(const Coefficients coefficients) { coefs_ = coefficients; }
  38:Effects/BiquadFilters.h **** 
  39:Effects/BiquadFilters.h ****         inline float Process(const float in, const int channel)
  40:Effects/BiquadFilters.h ****         {
  41:Effects/BiquadFilters.h ****             assert(channel < 2);
  42:Effects/BiquadFilters.h **** 
  43:Effects/BiquadFilters.h ****             // TODO: arm accelerated version
  44:Effects/BiquadFilters.h **** 
  45:Effects/BiquadFilters.h ****             const float &b0 = coefs_[0];
  46:Effects/BiquadFilters.h ****             const float &b1 = coefs_[1];
  47:Effects/BiquadFilters.h ****             const float &b2 = coefs_[2];
  48:Effects/BiquadFilters.h ****             const float &a1 = coefs_[3];
  49:Effects/BiquadFilters.h ****             const float &a2 = coefs_[4];
  50:Effects/BiquadFilters.h **** 
  51:Effects/BiquadFilters.h ****             // Transposed direct form 2
  52:Effects/BiquadFilters.h ****             float y = b0 * in + s1_[channel];
 2916              		.loc 8 52 23 discriminator 2 view .LVU919
 2917 009e 394C     		ldr	r4, .L195+12
 2918              	.LBE358:
 2919              	.LBE357:
 2920              	.LBE356:
 2921              	.LBE355:
 2922              	.LBE354:
 2923              	.LBB371:
 2924              	.LBB338:
 2925              		.loc 6 82 23 discriminator 2 view .LVU920
 2926 00a0 36EE666A 		vsub.f32	s12, s12, s13
 2927              	.LBE338:
 2928              	.LBE371:
 2929              	.LBB372:
 2930              	.LBB368:
 2931              	.LBB365:
 2932              	.LBB362:
 2933              	.LBB359:
  53:Effects/BiquadFilters.h ****             s1_[channel] = s2_[channel] + in * b1 - a1 * y;
 2934              		.loc 8 53 41 discriminator 2 view .LVU921
 2935 00a4 D4ED015A 		vldr.32	s11, [r4, #4]
 2936              	.LBE359:
 2937              	.LBE362:
 2938              	.LBE365:
 2939              	.LBE368:
 2940              	.LBE372:
 2941              	.LBB373:
 2942              	.LBB339:
 2943              		.loc 6 82 30 discriminator 2 view .LVU922
 2944 00a8 E6EE276A 		vfma.f32	s13, s12, s15
 2945              	.LVL181:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 87


 2946              		.loc 6 82 30 discriminator 2 view .LVU923
 2947              	.LBE339:
 2948              	.LBE373:
 2949              	.LBB374:
 2950              	.LBI354:
  54:Effects/BiquadFilters.h ****             s2_[channel] = b2 * in - a2 * y;
  55:Effects/BiquadFilters.h ****             return y;
  56:Effects/BiquadFilters.h ****         }
  57:Effects/BiquadFilters.h **** 
  58:Effects/BiquadFilters.h ****     private:
  59:Effects/BiquadFilters.h ****         // coef
  60:Effects/BiquadFilters.h ****         Coefficients coefs_{0, 0, 0, 0, 0};
  61:Effects/BiquadFilters.h **** 
  62:Effects/BiquadFilters.h ****         // state
  63:Effects/BiquadFilters.h ****         float s1_[2] = {0, 0};
  64:Effects/BiquadFilters.h ****         float s2_[2] = {0, 0};
  65:Effects/BiquadFilters.h **** 
  66:Effects/BiquadFilters.h **** };
  67:Effects/BiquadFilters.h **** 
  68:Effects/BiquadFilters.h **** /// Templated cascaded biquad filter. Filter Order = 2 * NumSections.
  69:Effects/BiquadFilters.h **** /// NOTE: Only supports even-ordered filters.
  70:Effects/BiquadFilters.h **** template<size_t NumSections, BiquadSection::FilterType FilterType>
  71:Effects/BiquadFilters.h **** class BiquadCascade {
  72:Effects/BiquadFilters.h **** 
  73:Effects/BiquadFilters.h ****     static_assert(NumSections > 0, "Must have at least one section");
  74:Effects/BiquadFilters.h **** 
  75:Effects/BiquadFilters.h ****     public:
  76:Effects/BiquadFilters.h ****         BiquadCascade() {}
  77:Effects/BiquadFilters.h ****         ~BiquadCascade() {}
  78:Effects/BiquadFilters.h **** 
  79:Effects/BiquadFilters.h ****         // Individual param update methods recalculate coefficients
  80:Effects/BiquadFilters.h ****         // every time one of them is called. To update everything at once,
  81:Effects/BiquadFilters.h ****         // use SetParams()
  82:Effects/BiquadFilters.h **** 
  83:Effects/BiquadFilters.h ****         void Init(const float sample_rate) {
  84:Effects/BiquadFilters.h ****             sample_rate_ = sample_rate;
  85:Effects/BiquadFilters.h ****             cutoff_hz_ = sample_rate * 0.25f;
  86:Effects/BiquadFilters.h ****             SetFlatResponse();
  87:Effects/BiquadFilters.h ****         }
  88:Effects/BiquadFilters.h **** 
  89:Effects/BiquadFilters.h ****         inline void SetCutoff(const float cutoff_hz)
  90:Effects/BiquadFilters.h ****         {
  91:Effects/BiquadFilters.h ****             cutoff_hz_ = daisysp::fclamp(cutoff_hz, 1.f, sample_rate_ * 0.5f);
  92:Effects/BiquadFilters.h ****             updateCoefficients();
  93:Effects/BiquadFilters.h ****         }
  94:Effects/BiquadFilters.h **** 
  95:Effects/BiquadFilters.h ****         inline void SetQ(const float q)
  96:Effects/BiquadFilters.h ****         {
  97:Effects/BiquadFilters.h ****             for (size_t i=0; i<NumSections; i++) {
  98:Effects/BiquadFilters.h ****                 q_[i] = daisysp::fmax(q, 0.1f);
  99:Effects/BiquadFilters.h ****             }
 100:Effects/BiquadFilters.h ****             updateCoefficients();
 101:Effects/BiquadFilters.h ****         }
 102:Effects/BiquadFilters.h **** 
 103:Effects/BiquadFilters.h ****         /// Update params simultaneously, recalculating coefficients only once 
 104:Effects/BiquadFilters.h ****         inline void SetParams(const float cutoff_hz, const float q)
 105:Effects/BiquadFilters.h ****         {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 88


 106:Effects/BiquadFilters.h ****             cutoff_hz_ = daisysp::fclamp(cutoff_hz, 1.f, sample_rate_ * 0.5f);
 107:Effects/BiquadFilters.h ****             for (size_t i=0; i<NumSections; i++) {
 108:Effects/BiquadFilters.h ****                 q_[i] = daisysp::fmax(q, 0.1f);
 109:Effects/BiquadFilters.h ****             }
 110:Effects/BiquadFilters.h ****             updateCoefficients();
 111:Effects/BiquadFilters.h ****         }
 112:Effects/BiquadFilters.h **** 
 113:Effects/BiquadFilters.h ****         /// Sets Q values in each section for a truly "flat" (-3dB cutoff point) response
 114:Effects/BiquadFilters.h ****         /// NOTE: per limitations of this class this only works for even-order filters
 115:Effects/BiquadFilters.h ****         inline void SetFlatResponse()
 116:Effects/BiquadFilters.h ****         {
 117:Effects/BiquadFilters.h ****             const float angleIncrement = 1.f / (4.f * static_cast<float>(NumSections));
 118:Effects/BiquadFilters.h ****             for (size_t i=0; i<NumSections; i++) {
 119:Effects/BiquadFilters.h ****                 q_[i] = 1.f / (2.f * cosf(PI_F * (angleIncrement * (i * 2 + 1))));
 120:Effects/BiquadFilters.h ****             }
 121:Effects/BiquadFilters.h ****             updateCoefficients();
 122:Effects/BiquadFilters.h ****         }
 123:Effects/BiquadFilters.h **** 
 124:Effects/BiquadFilters.h ****         inline float Process(const float in)
 2951              		.loc 8 124 22 is_stmt 1 discriminator 2 view .LVU924
 2952              	.LBB369:
 2953              	.LBB366:
 125:Effects/BiquadFilters.h ****         {
 126:Effects/BiquadFilters.h ****             float out = in;
 127:Effects/BiquadFilters.h ****             for (auto &biquad : biquads_) {
 2954              		.loc 8 127 13 discriminator 2 view .LVU925
 2955              	.LBB363:
 2956              	.LBI357:
  39:Effects/BiquadFilters.h ****         {
 2957              		.loc 8 39 22 discriminator 2 view .LVU926
 2958              	.LBB360:
  41:Effects/BiquadFilters.h **** 
 2959              		.loc 8 41 13 discriminator 2 view .LVU927
  45:Effects/BiquadFilters.h ****             const float &b1 = coefs_[1];
 2960              		.loc 8 45 13 discriminator 2 view .LVU928
  46:Effects/BiquadFilters.h ****             const float &b2 = coefs_[2];
 2961              		.loc 8 46 13 discriminator 2 view .LVU929
  47:Effects/BiquadFilters.h ****             const float &a1 = coefs_[3];
 2962              		.loc 8 47 13 discriminator 2 view .LVU930
  48:Effects/BiquadFilters.h ****             const float &a2 = coefs_[4];
 2963              		.loc 8 48 13 discriminator 2 view .LVU931
  49:Effects/BiquadFilters.h **** 
 2964              		.loc 8 49 13 discriminator 2 view .LVU932
  52:Effects/BiquadFilters.h ****             s1_[channel] = s2_[channel] + in * b1 - a1 * y;
 2965              		.loc 8 52 13 discriminator 2 view .LVU933
  52:Effects/BiquadFilters.h ****             s1_[channel] = s2_[channel] + in * b1 - a1 * y;
 2966              		.loc 8 52 19 is_stmt 0 discriminator 2 view .LVU934
 2967 00ac 94ED006A 		vldr.32	s12, [r4]
 2968 00b0 D4ED057A 		vldr.32	s15, [r4, #20]
 2969 00b4 E6EE267A 		vfma.f32	s15, s12, s13
 2970              	.LVL182:
  53:Effects/BiquadFilters.h ****             s2_[channel] = b2 * in - a2 * y;
 2971              		.loc 8 53 13 is_stmt 1 discriminator 2 view .LVU935
  53:Effects/BiquadFilters.h ****             s2_[channel] = b2 * in - a2 * y;
 2972              		.loc 8 53 41 is_stmt 0 discriminator 2 view .LVU936
 2973 00b8 94ED076A 		vldr.32	s12, [r4, #28]
 2974 00bc A6EEA56A 		vfma.f32	s12, s13, s11
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 89


  53:Effects/BiquadFilters.h ****             s2_[channel] = b2 * in - a2 * y;
 2975              		.loc 8 53 51 discriminator 2 view .LVU937
 2976 00c0 D4ED035A 		vldr.32	s11, [r4, #12]
 2977 00c4 A5EEE76A 		vfms.f32	s12, s11, s15
  54:Effects/BiquadFilters.h ****             return y;
 2978              		.loc 8 54 36 discriminator 2 view .LVU938
 2979 00c8 D4ED025A 		vldr.32	s11, [r4, #8]
  53:Effects/BiquadFilters.h ****             s2_[channel] = b2 * in - a2 * y;
 2980              		.loc 8 53 26 discriminator 2 view .LVU939
 2981 00cc 84ED056A 		vstr.32	s12, [r4, #20]
  54:Effects/BiquadFilters.h ****             return y;
 2982              		.loc 8 54 13 is_stmt 1 discriminator 2 view .LVU940
  54:Effects/BiquadFilters.h ****             return y;
 2983              		.loc 8 54 41 is_stmt 0 discriminator 2 view .LVU941
 2984 00d0 94ED046A 		vldr.32	s12, [r4, #16]
  54:Effects/BiquadFilters.h ****             return y;
 2985              		.loc 8 54 36 discriminator 2 view .LVU942
 2986 00d4 26EE676A 		vnmul.f32	s12, s12, s15
 2987 00d8 A6EEA56A 		vfma.f32	s12, s13, s11
 2988              	.LBE360:
 2989              	.LBE363:
 2990              	.LBE366:
 2991              	.LBE369:
 2992              	.LBE374:
 2993              	.LBB375:
 2994              	.LBB376:
 154:lib/DaisySP/Source/Utility/dsp.h **** }
 155:lib/DaisySP/Source/Utility/dsp.h **** 
 156:lib/DaisySP/Source/Utility/dsp.h **** /** Curves to use with the fmap function */
 157:lib/DaisySP/Source/Utility/dsp.h **** enum class Mapping
 158:lib/DaisySP/Source/Utility/dsp.h **** {
 159:lib/DaisySP/Source/Utility/dsp.h ****     LINEAR,
 160:lib/DaisySP/Source/Utility/dsp.h ****     EXP,
 161:lib/DaisySP/Source/Utility/dsp.h ****     LOG,
 162:lib/DaisySP/Source/Utility/dsp.h **** };
 163:lib/DaisySP/Source/Utility/dsp.h **** 
 164:lib/DaisySP/Source/Utility/dsp.h **** /** Maps a float between a specified range, using a specified curve.
 165:lib/DaisySP/Source/Utility/dsp.h ****  *
 166:lib/DaisySP/Source/Utility/dsp.h ****  *  \param in a value between 0 to 1 that will be mapped to the new range.
 167:lib/DaisySP/Source/Utility/dsp.h ****  *  \param min the new minimum value
 168:lib/DaisySP/Source/Utility/dsp.h ****  *  \param max the new maxmimum value
 169:lib/DaisySP/Source/Utility/dsp.h ****  *  \param curve a Mapping Value to adjust the response curve of the transformation
 170:lib/DaisySP/Source/Utility/dsp.h ****  *               defaults to Linear. @see Mapping
 171:lib/DaisySP/Source/Utility/dsp.h ****  *
 172:lib/DaisySP/Source/Utility/dsp.h ****  *  When using the log curve min and max, must be greater than zero.
 173:lib/DaisySP/Source/Utility/dsp.h ****  *
 174:lib/DaisySP/Source/Utility/dsp.h ****  *  \retval returns the transformed float within the new range.
 175:lib/DaisySP/Source/Utility/dsp.h **** */
 176:lib/DaisySP/Source/Utility/dsp.h **** inline float
 177:lib/DaisySP/Source/Utility/dsp.h **** fmap(float in, float min, float max, Mapping curve = Mapping::LINEAR)
 178:lib/DaisySP/Source/Utility/dsp.h **** {
 179:lib/DaisySP/Source/Utility/dsp.h ****     switch(curve)
 180:lib/DaisySP/Source/Utility/dsp.h ****     {
 181:lib/DaisySP/Source/Utility/dsp.h ****         case Mapping::EXP:
 182:lib/DaisySP/Source/Utility/dsp.h ****             return fclamp(min + (in * in) * (max - min), min, max);
 183:lib/DaisySP/Source/Utility/dsp.h ****         case Mapping::LOG:
 184:lib/DaisySP/Source/Utility/dsp.h ****         {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 90


 185:lib/DaisySP/Source/Utility/dsp.h ****             const float a = 1.f / log10f(max / min);
 186:lib/DaisySP/Source/Utility/dsp.h ****             return fclamp(min * powf(10, in / a), min, max);
 187:lib/DaisySP/Source/Utility/dsp.h ****         }
 188:lib/DaisySP/Source/Utility/dsp.h ****         case Mapping::LINEAR:
 189:lib/DaisySP/Source/Utility/dsp.h ****         default: return fclamp(min + in * (max - min), min, max);
 190:lib/DaisySP/Source/Utility/dsp.h ****     }
 191:lib/DaisySP/Source/Utility/dsp.h **** }
 192:lib/DaisySP/Source/Utility/dsp.h **** 
 193:lib/DaisySP/Source/Utility/dsp.h **** /** Simple 3-point median filter
 194:lib/DaisySP/Source/Utility/dsp.h **** c/o stephen mccaul
 195:lib/DaisySP/Source/Utility/dsp.h **** */
 196:lib/DaisySP/Source/Utility/dsp.h **** template <typename T>
 197:lib/DaisySP/Source/Utility/dsp.h **** T median(T a, T b, T c)
 198:lib/DaisySP/Source/Utility/dsp.h **** {
 199:lib/DaisySP/Source/Utility/dsp.h ****     return (b < a) ? (b < c) ? (c < a) ? c : a : b
 200:lib/DaisySP/Source/Utility/dsp.h ****                    : (a < c) ? (c < b) ? c : b : a;
 201:lib/DaisySP/Source/Utility/dsp.h **** }
 202:lib/DaisySP/Source/Utility/dsp.h **** 
 203:lib/DaisySP/Source/Utility/dsp.h **** /** Ported from pichenettes/eurorack/plaits/dsp/oscillator/oscillator.h
 204:lib/DaisySP/Source/Utility/dsp.h **** */
 205:lib/DaisySP/Source/Utility/dsp.h **** inline float ThisBlepSample(float t)
 206:lib/DaisySP/Source/Utility/dsp.h **** {
 207:lib/DaisySP/Source/Utility/dsp.h ****     return 0.5f * t * t;
 208:lib/DaisySP/Source/Utility/dsp.h **** }
 209:lib/DaisySP/Source/Utility/dsp.h **** 
 210:lib/DaisySP/Source/Utility/dsp.h **** /** Ported from pichenettes/eurorack/plaits/dsp/oscillator/oscillator.h
 211:lib/DaisySP/Source/Utility/dsp.h **** */
 212:lib/DaisySP/Source/Utility/dsp.h **** inline float NextBlepSample(float t)
 213:lib/DaisySP/Source/Utility/dsp.h **** {
 214:lib/DaisySP/Source/Utility/dsp.h ****     t = 1.0f - t;
 215:lib/DaisySP/Source/Utility/dsp.h ****     return -0.5f * t * t;
 216:lib/DaisySP/Source/Utility/dsp.h **** }
 217:lib/DaisySP/Source/Utility/dsp.h **** 
 218:lib/DaisySP/Source/Utility/dsp.h **** /** Ported from pichenettes/eurorack/plaits/dsp/oscillator/oscillator.h
 219:lib/DaisySP/Source/Utility/dsp.h **** */
 220:lib/DaisySP/Source/Utility/dsp.h **** inline float NextIntegratedBlepSample(float t)
 221:lib/DaisySP/Source/Utility/dsp.h **** {
 222:lib/DaisySP/Source/Utility/dsp.h ****     const float t1 = 0.5f * t;
 223:lib/DaisySP/Source/Utility/dsp.h ****     const float t2 = t1 * t1;
 224:lib/DaisySP/Source/Utility/dsp.h ****     const float t4 = t2 * t2;
 225:lib/DaisySP/Source/Utility/dsp.h ****     return 0.1875f - t1 + 1.5f * t2 - t4;
 226:lib/DaisySP/Source/Utility/dsp.h **** }
 227:lib/DaisySP/Source/Utility/dsp.h **** 
 228:lib/DaisySP/Source/Utility/dsp.h **** /** Ported from pichenettes/eurorack/plaits/dsp/oscillator/oscillator.h
 229:lib/DaisySP/Source/Utility/dsp.h **** */
 230:lib/DaisySP/Source/Utility/dsp.h **** inline float ThisIntegratedBlepSample(float t)
 231:lib/DaisySP/Source/Utility/dsp.h **** {
 232:lib/DaisySP/Source/Utility/dsp.h ****     return NextIntegratedBlepSample(1.0f - t);
 233:lib/DaisySP/Source/Utility/dsp.h **** }
 234:lib/DaisySP/Source/Utility/dsp.h **** 
 235:lib/DaisySP/Source/Utility/dsp.h **** /** Soft Limiting function ported extracted from pichenettes/stmlib */
 236:lib/DaisySP/Source/Utility/dsp.h **** inline float SoftLimit(float x)
 237:lib/DaisySP/Source/Utility/dsp.h **** {
 238:lib/DaisySP/Source/Utility/dsp.h ****     return x * (27.f + x * x) / (27.f + 9.f * x * x);
 239:lib/DaisySP/Source/Utility/dsp.h **** }
 240:lib/DaisySP/Source/Utility/dsp.h **** 
 241:lib/DaisySP/Source/Utility/dsp.h **** /** Soft Clipping function extracted from pichenettes/stmlib */
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 91


 242:lib/DaisySP/Source/Utility/dsp.h **** inline float SoftClip(float x)
 243:lib/DaisySP/Source/Utility/dsp.h **** {
 244:lib/DaisySP/Source/Utility/dsp.h ****     if(x < -3.0f)
 2995              		.loc 7 244 5 discriminator 2 view .LVU943
 2996 00dc F8EE086A 		vmov.f32	s13, #-3.0e+0
 2997              	.LVL183:
 2998              		.loc 7 244 5 discriminator 2 view .LVU944
 2999 00e0 F4EEE67A 		vcmpe.f32	s15, s13
 3000              	.LBE376:
 3001              	.LBE375:
 3002              	.LBB385:
 3003              	.LBB370:
 3004              	.LBB367:
 3005              	.LBB364:
 3006              	.LBB361:
  54:Effects/BiquadFilters.h ****             return y;
 3007              		.loc 8 54 26 discriminator 2 view .LVU945
 3008 00e4 84ED076A 		vstr.32	s12, [r4, #28]
  55:Effects/BiquadFilters.h ****         }
 3009              		.loc 8 55 13 is_stmt 1 discriminator 2 view .LVU946
 3010              	.LVL184:
  55:Effects/BiquadFilters.h ****         }
 3011              		.loc 8 55 13 is_stmt 0 discriminator 2 view .LVU947
 3012              	.LBE361:
 3013              	.LBE364:
 3014              		.loc 8 127 13 is_stmt 1 discriminator 2 view .LVU948
 3015              		.loc 8 127 13 discriminator 2 view .LVU949
 3016              		.loc 8 127 13 is_stmt 0 discriminator 2 view .LVU950
 3017              	.LBE367:
 3018              	.LBE370:
 3019              	.LBE385:
 3020              	.LBB386:
 3021              	.LBI375:
 242:lib/DaisySP/Source/Utility/dsp.h **** {
 3022              		.loc 7 242 14 is_stmt 1 discriminator 2 view .LVU951
 3023              	.LBB383:
 3024              		.loc 7 244 5 discriminator 2 view .LVU952
 3025 00e8 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3026 00ec 39D4     		bmi	.L189
 3027              	.LVL185:
 3028              	.LBB377:
 3029              	.LBI377:
 242:lib/DaisySP/Source/Utility/dsp.h **** {
 3030              		.loc 7 242 14 view .LVU953
 3031              	.LBB378:
 245:lib/DaisySP/Source/Utility/dsp.h ****         return -1.0f;
 246:lib/DaisySP/Source/Utility/dsp.h ****     else if(x > 3.0f)
 3032              		.loc 7 246 10 view .LVU954
 3033 00ee F0EE086A 		vmov.f32	s13, #3.0e+0
 3034 00f2 F4EEE67A 		vcmpe.f32	s15, s13
 3035 00f6 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3036 00fa 35DC     		bgt	.L190
 247:lib/DaisySP/Source/Utility/dsp.h ****         return 1.0f;
 248:lib/DaisySP/Source/Utility/dsp.h ****     else
 249:lib/DaisySP/Source/Utility/dsp.h ****         return SoftLimit(x);
 3037              		.loc 7 249 9 view .LVU955
 3038              	.LVL186:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 92


 3039              	.LBB379:
 3040              	.LBI379:
 236:lib/DaisySP/Source/Utility/dsp.h **** {
 3041              		.loc 7 236 14 view .LVU956
 3042              	.LBB380:
 238:lib/DaisySP/Source/Utility/dsp.h **** }
 3043              		.loc 7 238 5 view .LVU957
 238:lib/DaisySP/Source/Utility/dsp.h **** }
 3044              		.loc 7 238 22 is_stmt 0 view .LVU958
 3045 00fc F3EE0B6A 		vmov.f32	s13, #2.7e+1
 238:lib/DaisySP/Source/Utility/dsp.h **** }
 3046              		.loc 7 238 45 view .LVU959
 3047 0100 F2EE025A 		vmov.f32	s11, #9.0e+0
 238:lib/DaisySP/Source/Utility/dsp.h **** }
 3048              		.loc 7 238 22 view .LVU960
 3049 0104 B0EE666A 		vmov.f32	s12, s13
 238:lib/DaisySP/Source/Utility/dsp.h **** }
 3050              		.loc 7 238 45 view .LVU961
 3051 0108 67EEA55A 		vmul.f32	s11, s15, s11
 238:lib/DaisySP/Source/Utility/dsp.h **** }
 3052              		.loc 7 238 22 view .LVU962
 3053 010c A7EEA76A 		vfma.f32	s12, s15, s15
 238:lib/DaisySP/Source/Utility/dsp.h **** }
 3054              		.loc 7 238 39 view .LVU963
 3055 0110 E5EEA76A 		vfma.f32	s13, s11, s15
 238:lib/DaisySP/Source/Utility/dsp.h **** }
 3056              		.loc 7 238 14 view .LVU964
 3057 0114 26EE276A 		vmul.f32	s12, s12, s15
 238:lib/DaisySP/Source/Utility/dsp.h **** }
 3058              		.loc 7 238 52 view .LVU965
 3059 0118 C6EE267A 		vdiv.f32	s15, s12, s13
 3060              	.LVL187:
 3061              	.L186:
 238:lib/DaisySP/Source/Utility/dsp.h **** }
 3062              		.loc 7 238 52 view .LVU966
 3063              	.LBE380:
 3064              	.LBE379:
 3065              	.LBE378:
 3066              	.LBE377:
 3067              	.LBE383:
 3068              	.LBE386:
  74:Effects/EchoDelay.h ****             out = delayLine_.Read();
  75:Effects/EchoDelay.h ****             out = bpf_.Process(out);
  76:Effects/EchoDelay.h ****             out = daisysp::SoftClip(out);
  77:Effects/EchoDelay.h ****             delayLine_.Write(out * feedback_ + in);
 3069              		.loc 5 77 29 view .LVU967
 3070 011c 93ED046A 		vldr.32	s12, [r3, #16]
 3071              	.LBB387:
 3072              	.LBB388:
  72:lib/DaisySP/Source/Utility/delayline.h ****         write_ptr_        = (write_ptr_ - 1 + max_size) % max_size;
 3073              		.loc 6 72 27 view .LVU968
 3074 0120 03EB8204 		add	r4, r3, r2, lsl #2
 3075              	.LVL188:
  73:lib/DaisySP/Source/Utility/delayline.h ****     }
 3076              		.loc 6 73 45 view .LVU969
 3077 0124 02F53B42 		add	r2, r2, #47872
 3078              	.LBE388:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 93


 3079              	.LBE387:
 3080              	.LBE398:
 3081              	.LBE404:
 3082              	.LBE331:
 559:AudioProcessor.cpp ****         // Use mono mix buffer for both channels
 3083              		.loc 3 559 36 view .LVU970
 3084 0128 0237     		adds	r7, r7, #2
 3085              	.LVL189:
 559:AudioProcessor.cpp ****         // Use mono mix buffer for both channels
 3086              		.loc 3 559 36 view .LVU971
 3087 012a 0830     		adds	r0, r0, #8
 3088              	.LBB409:
 3089              	.LBB405:
 3090              	.LBB399:
 3091              	.LBB392:
 3092              	.LBB389:
  73:lib/DaisySP/Source/Utility/delayline.h ****     }
 3093              		.loc 6 73 45 view .LVU972
 3094 012c 7F32     		adds	r2, r2, #127
 3095              	.LBE389:
 3096              	.LBE392:
 3097              		.loc 5 77 29 view .LVU973
 3098 012e F0EE476A 		vmov.f32	s13, s14
 3099 0132 E6EE276A 		vfma.f32	s13, s12, s15
 3100              	.LVL190:
 3101              	.LBB393:
 3102              	.LBI387:
  70:lib/DaisySP/Source/Utility/delayline.h ****     {
 3103              		.loc 6 70 17 is_stmt 1 view .LVU974
 3104              	.LBE393:
 3105              	.LBE399:
 3106              	.LBE405:
 563:AudioProcessor.cpp ****         float output_val = ((sample * dry_level) + (wet * wet_level)) * MASTER_VOLUME;
 3107              		.loc 3 563 57 is_stmt 0 view .LVU975
 3108 0136 65EE277A 		vmul.f32	s15, s10, s15
 3109              	.LVL191:
 3110              		.loc 3 563 50 view .LVU976
 3111 013a E0EE077A 		vfma.f32	s15, s0, s14
 3112              		.loc 3 563 15 view .LVU977
 3113 013e 9FED127A 		vldr.32	s14, .L195+16
 3114              	.LVL192:
 3115              	.LBB406:
 3116              	.LBB400:
 3117              	.LBB394:
 3118              	.LBB390:
  72:lib/DaisySP/Source/Utility/delayline.h ****         write_ptr_        = (write_ptr_ - 1 + max_size) % max_size;
 3119              		.loc 6 72 27 view .LVU978
 3120 0142 C4ED086A 		vstr.32	s13, [r4, #32]
  73:lib/DaisySP/Source/Utility/delayline.h ****     }
 3121              		.loc 6 73 57 view .LVU979
 3122 0146 4BF68034 		movw	r4, #48000
 3123 014a B2FBF4F6 		udiv	r6, r2, r4
 3124              	.LBE390:
 3125              	.LBE394:
 3126              	.LBE400:
 3127              	.LBE406:
 3128              		.loc 3 563 15 view .LVU980
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 94


 3129 014e 67EE877A 		vmul.f32	s15, s15, s14
 3130              	.LBB407:
 3131              	.LBB401:
 3132              	.LBB395:
 3133              	.LBB391:
  73:lib/DaisySP/Source/Utility/delayline.h ****     }
 3134              		.loc 6 73 57 view .LVU981
 3135 0152 04FB1622 		mls	r2, r4, r6, r2
 3136              	.LVL193:
  73:lib/DaisySP/Source/Utility/delayline.h ****     }
 3137              		.loc 6 73 57 view .LVU982
 3138              	.LBE391:
 3139              	.LBE395:
 3140              	.LBE401:
 3141              	.LBE407:
 3142              		.loc 3 563 9 is_stmt 1 view .LVU983
 564:AudioProcessor.cpp ****         out[i]     = output_val;
 3143              		.loc 3 564 9 view .LVU984
 3144              	.LBE409:
 559:AudioProcessor.cpp ****         // Use mono mix buffer for both channels
 3145              		.loc 3 559 5 is_stmt 0 view .LVU985
 3146 0156 0124     		movs	r4, #1
 3147              	.LBB410:
 3148              		.loc 3 564 20 view .LVU986
 3149 0158 40ED027A 		vstr.32	s15, [r0, #-8]
 3150              	.LVL194:
 565:AudioProcessor.cpp ****         out[i+1]   = output_val;
 3151              		.loc 3 565 9 is_stmt 1 view .LVU987
 3152              		.loc 3 565 20 is_stmt 0 view .LVU988
 3153 015c 40ED017A 		vstr.32	s15, [r0, #-4]
 3154              	.LBE410:
 559:AudioProcessor.cpp ****         // Use mono mix buffer for both channels
 3155              		.loc 3 559 5 is_stmt 1 view .LVU989
 3156              	.LVL195:
 559:AudioProcessor.cpp ****         // Use mono mix buffer for both channels
 3157              		.loc 3 559 5 is_stmt 0 view .LVU990
 3158 0160 58E7     		b	.L187
 3159              	.LVL196:
 3160              	.L189:
 3161              	.LBB411:
 3162              	.LBB408:
 3163              	.LBB402:
 3164              	.LBB396:
 3165              	.LBB384:
 245:lib/DaisySP/Source/Utility/dsp.h ****     else if(x > 3.0f)
 3166              		.loc 7 245 17 view .LVU991
 3167 0162 FFEE007A 		vmov.f32	s15, #-1.0e+0
 3168              	.LVL197:
 245:lib/DaisySP/Source/Utility/dsp.h ****     else if(x > 3.0f)
 3169              		.loc 7 245 17 view .LVU992
 3170 0166 D9E7     		b	.L186
 3171              	.LVL198:
 3172              	.L190:
 3173              	.LBB382:
 3174              	.LBB381:
 247:lib/DaisySP/Source/Utility/dsp.h ****     else
 3175              		.loc 7 247 16 view .LVU993
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 95


 3176 0168 F7EE007A 		vmov.f32	s15, #1.0e+0
 3177              	.LVL199:
 247:lib/DaisySP/Source/Utility/dsp.h ****     else
 3178              		.loc 7 247 16 view .LVU994
 3179 016c D6E7     		b	.L186
 3180              	.LVL200:
 3181              	.L185:
 247:lib/DaisySP/Source/Utility/dsp.h ****     else
 3182              		.loc 7 247 16 view .LVU995
 3183 016e 0CB1     		cbz	r4, .L184
 3184 0170 C3E90625 		strd	r2, r5, [r3, #24]
 3185              	.L184:
 3186              	.LBE381:
 3187              	.LBE382:
 3188              	.LBE384:
 3189              	.LBE396:
 3190              	.LBE402:
 3191              	.LBE408:
 3192              	.LBE411:
 3193              	.LBE330:
 566:AudioProcessor.cpp ****     }
 567:AudioProcessor.cpp **** }
 3194              		.loc 3 567 1 view .LVU996
 3195 0174 F0BD     		pop	{r4, r5, r6, r7, pc}
 3196              	.LVL201:
 3197              	.L196:
 3198              		.loc 3 567 1 view .LVU997
 3199 0176 00BF     		.align	2
 3200              	.L195:
 3201 0178 00000000 		.word	delay
 3202 017c 00000000 		.word	.LANCHOR16
 3203 0180 00000038 		.word	939524096
 3204 0184 2CEE0200 		.word	delay+192044
 3205 0188 3333333F 		.word	1060320051
 3206              		.cfi_endproc
 3207              	.LFE5354:
 3209              		.section	.text._Z25UpdatePerformanceMonitorsjPf,"ax",%progbits
 3210              		.align	1
 3211              		.global	_Z25UpdatePerformanceMonitorsjPf
 3212              		.syntax unified
 3213              		.thumb
 3214              		.thumb_func
 3216              	_Z25UpdatePerformanceMonitorsjPf:
 3217              	.LVL202:
 3218              	.LFB5355:
 568:AudioProcessor.cpp **** 
 569:AudioProcessor.cpp **** void UpdatePerformanceMonitors(size_t size, AudioHandle::InterleavingOutputBuffer out) {
 3219              		.loc 3 569 88 is_stmt 1 view -0
 3220              		.cfi_startproc
 3221              		@ args = 0, pretend = 0, frame = 0
 3222              		@ frame_needed = 0, uses_anonymous_args = 0
 3223              		@ link register save eliminated.
 570:AudioProcessor.cpp ****     // --- Update Output Level Monitoring --- 
 571:AudioProcessor.cpp ****     if (size > 0) { // Ensure block is not empty
 3224              		.loc 3 571 5 view .LVU999
 3225              	.LBB412:
 3226 0000 80B1     		cbz	r0, .L198
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 96


 3227              	.LBB413:
 572:AudioProcessor.cpp ****         float current_level = fabsf(out[0]); // Absolute level of first sample
 3228              		.loc 3 572 9 view .LVU1000
 3229              	.LVL203:
 573:AudioProcessor.cpp ****         // Apply smoothing (adjust 0.99f/0.01f factor for more/less smoothing)
 574:AudioProcessor.cpp ****         smoothed_output_level = smoothed_output_level * 0.99f + current_level * 0.01f; 
 3230              		.loc 3 574 9 view .LVU1001
 572:AudioProcessor.cpp ****         float current_level = fabsf(out[0]); // Absolute level of first sample
 3231              		.loc 3 572 15 is_stmt 0 view .LVU1002
 3232 0002 D1ED007A 		vldr.32	s15, [r1]
 3233              		.loc 3 574 79 view .LVU1003
 3234 0006 9FED0E7A 		vldr.32	s14, .L204
 572:AudioProcessor.cpp ****         float current_level = fabsf(out[0]); // Absolute level of first sample
 3235              		.loc 3 572 15 view .LVU1004
 3236 000a F0EEE77A 		vabs.f32	s15, s15
 3237              	.LVL204:
 3238              		.loc 3 574 33 view .LVU1005
 3239 000e 0D4B     		ldr	r3, .L204+4
 3240 0010 D3ED006A 		vldr.32	s13, [r3]
 3241              		.loc 3 574 79 view .LVU1006
 3242 0014 67EE877A 		vmul.f32	s15, s15, s14
 3243              	.LVL205:
 3244              		.loc 3 574 63 view .LVU1007
 3245 0018 9FED0B7A 		vldr.32	s14, .L204+8
 3246 001c E6EE877A 		vfma.f32	s15, s13, s14
 3247              		.loc 3 574 31 view .LVU1008
 3248 0020 C3ED007A 		vstr.32	s15, [r3]
 3249              	.LVL206:
 3250              	.L198:
 3251              		.loc 3 574 31 view .LVU1009
 3252              	.LBE413:
 3253              	.LBE412:
 575:AudioProcessor.cpp ****     }
 576:AudioProcessor.cpp **** 
 577:AudioProcessor.cpp ****     // Signal display update periodically
 578:AudioProcessor.cpp ****     static uint32_t display_counter = 0;
 3254              		.loc 3 578 5 is_stmt 1 view .LVU1010
 579:AudioProcessor.cpp ****     if (++display_counter >= 100) { 
 3255              		.loc 3 579 5 view .LVU1011
 3256              		.loc 3 579 9 is_stmt 0 view .LVU1012
 3257 0024 094A     		ldr	r2, .L204+12
 3258 0026 1368     		ldr	r3, [r2]
 3259 0028 0133     		adds	r3, r3, #1
 3260              		.loc 3 579 5 view .LVU1013
 3261 002a 632B     		cmp	r3, #99
 3262 002c 01D8     		bhi	.L199
 3263              		.loc 3 579 27 view .LVU1014
 3264 002e 1360     		str	r3, [r2]
 3265 0030 7047     		bx	lr
 3266              	.L199:
 580:AudioProcessor.cpp ****         display_counter = 0;
 3267              		.loc 3 580 9 is_stmt 1 view .LVU1015
 3268              		.loc 3 580 25 is_stmt 0 view .LVU1016
 3269 0032 0023     		movs	r3, #0
 3270 0034 1360     		str	r3, [r2]
 581:AudioProcessor.cpp ****         update_display = true;
 3271              		.loc 3 581 9 is_stmt 1 view .LVU1017
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 97


 3272              		.loc 3 581 24 is_stmt 0 view .LVU1018
 3273 0036 0122     		movs	r2, #1
 3274 0038 054B     		ldr	r3, .L204+16
 3275 003a 1A70     		strb	r2, [r3]
 582:AudioProcessor.cpp ****     }
 583:AudioProcessor.cpp **** } ...
 3276              		.loc 3 583 1 view .LVU1019
 3277 003c 7047     		bx	lr
 3278              	.L205:
 3279 003e 00BF     		.align	2
 3280              	.L204:
 3281 0040 0AD7233C 		.word	1008981770
 3282 0044 00000000 		.word	smoothed_output_level
 3283 0048 A4707D3F 		.word	1065185444
 3284 004c 00000000 		.word	.LANCHOR18
 3285 0050 00000000 		.word	update_display
 3286              		.cfi_endproc
 3287              	.LFE5355:
 3289              		.section	.rodata._Z13AudioCallbackPKfPfj.str1.1,"aMS",%progbits,1
 3290              	.LC0:
 3291 0000 5B444542 		.ascii	"[DEBUG] ARP ON\000"
 3291      55475D20 
 3291      41525020 
 3291      4F4E00
 3292              	.LC1:
 3293 000f 5B444542 		.ascii	"[DEBUG] ARP OFF\000"
 3293      55475D20 
 3293      41525020 
 3293      4F464600 
 3294              		.section	.text._Z13AudioCallbackPKfPfj,"ax",%progbits
 3295              		.align	1
 3296              		.global	_Z13AudioCallbackPKfPfj
 3297              		.syntax unified
 3298              		.thumb
 3299              		.thumb_func
 3301              	_Z13AudioCallbackPKfPfj:
 3302              	.LVL207:
 3303              	.LFB5345:
  82:AudioProcessor.cpp ****                  size_t size) {
 3304              		.loc 3 82 31 is_stmt 1 view -0
 3305              		.cfi_startproc
 3306              		@ args = 0, pretend = 0, frame = 48
 3307              		@ frame_needed = 0, uses_anonymous_args = 0
  83:AudioProcessor.cpp ****     cpu_meter.OnBlockStart(); // Mark the beginning of the audio block
 3308              		.loc 3 83 5 view .LVU1021
 3309              	.LBB438:
 3310              	.LBI438:
 3311              		.file 9 "lib/libdaisy/src/util/CpuLoadMeter.h"
   1:lib/libdaisy/src/util/CpuLoadMeter.h **** #pragma once
   2:lib/libdaisy/src/util/CpuLoadMeter.h **** 
   3:lib/libdaisy/src/util/CpuLoadMeter.h **** #include "sys/system.h"
   4:lib/libdaisy/src/util/CpuLoadMeter.h **** #include <cmath>
   5:lib/libdaisy/src/util/CpuLoadMeter.h **** 
   6:lib/libdaisy/src/util/CpuLoadMeter.h **** namespace daisy
   7:lib/libdaisy/src/util/CpuLoadMeter.h **** {
   8:lib/libdaisy/src/util/CpuLoadMeter.h **** /** @brief CPU load metering
   9:lib/libdaisy/src/util/CpuLoadMeter.h ****  *  @author jelliesen
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 98


  10:lib/libdaisy/src/util/CpuLoadMeter.h ****  *  @addtogroup utility
  11:lib/libdaisy/src/util/CpuLoadMeter.h ****  * 
  12:lib/libdaisy/src/util/CpuLoadMeter.h ****  *  To measure the CPU load of your audio processing, create a CpuLoadMeter
  13:lib/libdaisy/src/util/CpuLoadMeter.h ****  *  and initialize it with your block size and sample rate.
  14:lib/libdaisy/src/util/CpuLoadMeter.h ****  *  Then at the beginning of the audio callback, call `OnBlockStart()`, 
  15:lib/libdaisy/src/util/CpuLoadMeter.h ****  *  and at the end of the audio callback, call `OnBlockEnd()`.
  16:lib/libdaisy/src/util/CpuLoadMeter.h ****  *  You can then read out the minimum, maximum and average CPU load.
  17:lib/libdaisy/src/util/CpuLoadMeter.h ****  */
  18:lib/libdaisy/src/util/CpuLoadMeter.h **** class CpuLoadMeter
  19:lib/libdaisy/src/util/CpuLoadMeter.h **** {
  20:lib/libdaisy/src/util/CpuLoadMeter.h ****   public:
  21:lib/libdaisy/src/util/CpuLoadMeter.h ****     CpuLoadMeter(){};
  22:lib/libdaisy/src/util/CpuLoadMeter.h **** 
  23:lib/libdaisy/src/util/CpuLoadMeter.h ****     /** Initializes the CpuLoadMeter for a particular sample rate and block size.
  24:lib/libdaisy/src/util/CpuLoadMeter.h ****      *  @param sampleRateInHz           The sample rate in Hz
  25:lib/libdaisy/src/util/CpuLoadMeter.h ****      *  @param blockSizeInSamples       The block size in samples
  26:lib/libdaisy/src/util/CpuLoadMeter.h ****      *  @param smoothingFilterCutoffHz  The cutoff frequency of the smoothing filter that's used to
  27:lib/libdaisy/src/util/CpuLoadMeter.h ****      *                                  create the average CPU load reading.
  28:lib/libdaisy/src/util/CpuLoadMeter.h ****      */
  29:lib/libdaisy/src/util/CpuLoadMeter.h ****     void Init(float sampleRateInHz,
  30:lib/libdaisy/src/util/CpuLoadMeter.h ****               int   blockSizeInSamples,
  31:lib/libdaisy/src/util/CpuLoadMeter.h ****               float smoothingFilterCutoffHz = 1.0f)
  32:lib/libdaisy/src/util/CpuLoadMeter.h ****     {
  33:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto secPerBlock = float(blockSizeInSamples) / sampleRateInHz;
  34:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto ticksPerS   = float(System::GetTickFreq());
  35:lib/libdaisy/src/util/CpuLoadMeter.h ****         ticksPerBlockInv_      = 1.0f / (ticksPerS * secPerBlock);
  36:lib/libdaisy/src/util/CpuLoadMeter.h **** 
  37:lib/libdaisy/src/util/CpuLoadMeter.h ****         // update filter coefficient for smoothing filter (1pole lowpass)
  38:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto blockRateInHz = sampleRateInHz / float(blockSizeInSamples);
  39:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto cutoffNormalized
  40:lib/libdaisy/src/util/CpuLoadMeter.h ****             = smoothingFilterCutoffHz * 2.0f * 3.141592653f / blockRateInHz;
  41:lib/libdaisy/src/util/CpuLoadMeter.h ****         // according to
  42:lib/libdaisy/src/util/CpuLoadMeter.h ****         // https://en.wikipedia.org/wiki/Low-pass_filter#Simple_infinite_impulse_response_filter
  43:lib/libdaisy/src/util/CpuLoadMeter.h ****         smoothingConstant_ = cutoffNormalized / (cutoffNormalized + 1.0f);
  44:lib/libdaisy/src/util/CpuLoadMeter.h **** 
  45:lib/libdaisy/src/util/CpuLoadMeter.h ****         Reset();
  46:lib/libdaisy/src/util/CpuLoadMeter.h ****     }
  47:lib/libdaisy/src/util/CpuLoadMeter.h **** 
  48:lib/libdaisy/src/util/CpuLoadMeter.h ****     /** Call this at the beginning of your audio callback */
  49:lib/libdaisy/src/util/CpuLoadMeter.h ****     void OnBlockStart() { currentBlockStartTicks_ = System::GetTick(); }
 3312              		.loc 9 49 10 view .LVU1022
 3313              	.LBB439:
 3314              		.loc 9 49 27 view .LVU1023
 3315              	.LBE439:
 3316              	.LBE438:
  82:AudioProcessor.cpp ****                  size_t size) {
 3317              		.loc 3 82 31 is_stmt 0 view .LVU1024
 3318 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3319              		.cfi_def_cfa_offset 36
 3320              		.cfi_offset 4, -36
 3321              		.cfi_offset 5, -32
 3322              		.cfi_offset 6, -28
 3323              		.cfi_offset 7, -24
 3324              		.cfi_offset 8, -20
 3325              		.cfi_offset 9, -16
 3326              		.cfi_offset 10, -12
 3327              		.cfi_offset 11, -8
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 99


 3328              		.cfi_offset 14, -4
 3329              	.LBB442:
 3330              	.LBB440:
 3331              		.loc 9 49 51 view .LVU1025
 3332 0004 9C4C     		ldr	r4, .L254
 3333              	.LBE440:
 3334              	.LBE442:
  82:AudioProcessor.cpp ****                  size_t size) {
 3335              		.loc 3 82 31 view .LVU1026
 3336 0006 8846     		mov	r8, r1
 3337 0008 1646     		mov	r6, r2
 3338 000a 2DED028B 		vpush.64	{d8}
 3339              		.cfi_def_cfa_offset 44
 3340              		.cfi_offset 80, -44
 3341              		.cfi_offset 81, -40
 3342 000e 8DB0     		sub	sp, sp, #52
 3343              		.cfi_def_cfa_offset 96
  97:AudioProcessor.cpp ****     morph_knob_val   = morph_knob_val   * (1.0f - intensity_factor) + touch_control * intensity_fac
 3344              		.loc 3 97 85 view .LVU1027
 3345 0010 B6EE008A 		vmov.f32	s16, #5.0e-1
 3346              	.LBB443:
 3347              	.LBB441:
 3348              		.loc 9 49 68 view .LVU1028
 3349 0014 FFF7FEFF 		bl	_ZN5daisy6System7GetTickEv
 3350              	.LVL208:
 3351              		.loc 9 49 51 view .LVU1029
 3352 0018 A060     		str	r0, [r4, #8]
 3353              	.LVL209:
 3354              		.loc 9 49 51 view .LVU1030
 3355              	.LBE441:
 3356              	.LBE443:
  86:AudioProcessor.cpp ****     ProcessControls();
 3357              		.loc 3 86 5 is_stmt 1 view .LVU1031
  86:AudioProcessor.cpp ****     ProcessControls();
 3358              		.loc 3 86 20 is_stmt 0 view .LVU1032
 3359 001a FFF7FEFF 		bl	_Z15ProcessControlsv
 3360              	.LVL210:
  87:AudioProcessor.cpp ****     ReadKnobValues();
 3361              		.loc 3 87 5 is_stmt 1 view .LVU1033
  87:AudioProcessor.cpp ****     ReadKnobValues();
 3362              		.loc 3 87 19 is_stmt 0 view .LVU1034
 3363 001e FFF7FEFF 		bl	_Z14ReadKnobValuesv
 3364              	.LVL211:
  90:AudioProcessor.cpp ****     float touch_control = touch_cv_value; 
 3365              		.loc 3 90 5 is_stmt 1 view .LVU1035
  90:AudioProcessor.cpp ****     float touch_control = touch_cv_value; 
 3366              		.loc 3 90 27 is_stmt 0 view .LVU1036
 3367 0022 964B     		ldr	r3, .L254+4
 3368 0024 D3ED007A 		vldr.32	s15, [r3]
 3369              	.LVL212:
  94:AudioProcessor.cpp ****     float intensity_factor = 0.5f; // 0.0 = knob only, 1.0 = touch only, 0.5 = average
 3370              		.loc 3 94 5 is_stmt 1 view .LVU1037
  97:AudioProcessor.cpp ****     morph_knob_val   = morph_knob_val   * (1.0f - intensity_factor) + touch_control * intensity_fac
 3371              		.loc 3 97 5 view .LVU1038
  97:AudioProcessor.cpp ****     morph_knob_val   = morph_knob_val   * (1.0f - intensity_factor) + touch_control * intensity_fac
 3372              		.loc 3 97 41 is_stmt 0 view .LVU1039
 3373 0028 954B     		ldr	r3, .L254+8
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 100


  97:AudioProcessor.cpp ****     morph_knob_val   = morph_knob_val   * (1.0f - intensity_factor) + touch_control * intensity_fac
 3374              		.loc 3 97 85 view .LVU1040
 3375 002a 67EE887A 		vmul.f32	s15, s15, s16
 3376              	.LVL213:
  97:AudioProcessor.cpp ****     morph_knob_val   = morph_knob_val   * (1.0f - intensity_factor) + touch_control * intensity_fac
 3377              		.loc 3 97 69 view .LVU1041
 3378 002e D3ED006A 		vldr.32	s13, [r3]
 3379 0032 B0EE677A 		vmov.f32	s14, s15
 3380 0036 A6EE887A 		vfma.f32	s14, s13, s16
  97:AudioProcessor.cpp ****     morph_knob_val   = morph_knob_val   * (1.0f - intensity_factor) + touch_control * intensity_fac
 3381              		.loc 3 97 22 view .LVU1042
 3382 003a 83ED007A 		vstr.32	s14, [r3]
  99:AudioProcessor.cpp ****     delay_feedback_val = delay_feedback_val * (1.0f - intensity_factor) + touch_control * intensity
 3383              		.loc 3 99 5 is_stmt 1 view .LVU1043
  99:AudioProcessor.cpp ****     delay_feedback_val = delay_feedback_val * (1.0f - intensity_factor) + touch_control * intensity
 3384              		.loc 3 99 45 is_stmt 0 view .LVU1044
 3385 003e 914B     		ldr	r3, .L254+12
  99:AudioProcessor.cpp ****     delay_feedback_val = delay_feedback_val * (1.0f - intensity_factor) + touch_control * intensity
 3386              		.loc 3 99 73 view .LVU1045
 3387 0040 93ED007A 		vldr.32	s14, [r3]
 3388 0044 E7EE087A 		vfma.f32	s15, s14, s16
  99:AudioProcessor.cpp ****     delay_feedback_val = delay_feedback_val * (1.0f - intensity_factor) + touch_control * intensity
 3389              		.loc 3 99 24 view .LVU1046
 3390 0048 C3ED007A 		vstr.32	s15, [r3]
 105:AudioProcessor.cpp ****     static uint32_t button_press_time = 0;
 3391              		.loc 3 105 5 is_stmt 1 view .LVU1047
 106:AudioProcessor.cpp ****     if (button.RisingEdge()) {
 3392              		.loc 3 106 5 view .LVU1048
 3393              	.LVL214:
 3394              	.LBB444:
 3395              	.LBB445:
 3396              	.LBI445:
 3397              		.file 10 "lib/libdaisy/src/hid/switch.h"
   1:lib/libdaisy/src/hid/switch.h **** #pragma once
   2:lib/libdaisy/src/hid/switch.h **** #ifndef DSY_SWITCH_H
   3:lib/libdaisy/src/hid/switch.h **** #define DSY_SWITCH_H
   4:lib/libdaisy/src/hid/switch.h **** #include "daisy_core.h"
   5:lib/libdaisy/src/hid/switch.h **** #include "per/gpio.h"
   6:lib/libdaisy/src/hid/switch.h **** #include "sys/system.h"
   7:lib/libdaisy/src/hid/switch.h **** 
   8:lib/libdaisy/src/hid/switch.h **** namespace daisy
   9:lib/libdaisy/src/hid/switch.h **** {
  10:lib/libdaisy/src/hid/switch.h **** /** 
  11:lib/libdaisy/src/hid/switch.h ****     Generic Class for handling momentary/latching switches \n 
  12:lib/libdaisy/src/hid/switch.h ****     Inspired/influenced by Mutable Instruments (pichenettes) Switch classes
  13:lib/libdaisy/src/hid/switch.h ****     @author Stephen Hensley
  14:lib/libdaisy/src/hid/switch.h ****     @date December 2019
  15:lib/libdaisy/src/hid/switch.h ****     @ingroup controls
  16:lib/libdaisy/src/hid/switch.h **** */
  17:lib/libdaisy/src/hid/switch.h **** class Switch
  18:lib/libdaisy/src/hid/switch.h **** {
  19:lib/libdaisy/src/hid/switch.h ****   public:
  20:lib/libdaisy/src/hid/switch.h ****     /** Specifies the expected behavior of the switch */
  21:lib/libdaisy/src/hid/switch.h ****     enum Type
  22:lib/libdaisy/src/hid/switch.h ****     {
  23:lib/libdaisy/src/hid/switch.h ****         TYPE_TOGGLE,    /**< & */
  24:lib/libdaisy/src/hid/switch.h ****         TYPE_MOMENTARY, /**< & */
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 101


  25:lib/libdaisy/src/hid/switch.h ****     };
  26:lib/libdaisy/src/hid/switch.h ****     /** Specifies whether the pressed is HIGH or LOW. */
  27:lib/libdaisy/src/hid/switch.h ****     enum Polarity
  28:lib/libdaisy/src/hid/switch.h ****     {
  29:lib/libdaisy/src/hid/switch.h ****         POLARITY_NORMAL,   /**< & */
  30:lib/libdaisy/src/hid/switch.h ****         POLARITY_INVERTED, /**< & */
  31:lib/libdaisy/src/hid/switch.h ****     };
  32:lib/libdaisy/src/hid/switch.h **** 
  33:lib/libdaisy/src/hid/switch.h ****     /** Specifies whether to use built-in Pull Up/Down resistors to hold button at a given state wh
  34:lib/libdaisy/src/hid/switch.h ****     enum Pull
  35:lib/libdaisy/src/hid/switch.h ****     {
  36:lib/libdaisy/src/hid/switch.h ****         PULL_UP,   /**< & */
  37:lib/libdaisy/src/hid/switch.h ****         PULL_DOWN, /**< & */
  38:lib/libdaisy/src/hid/switch.h ****         PULL_NONE, /**< & */
  39:lib/libdaisy/src/hid/switch.h ****     };
  40:lib/libdaisy/src/hid/switch.h **** 
  41:lib/libdaisy/src/hid/switch.h ****     Switch() {}
  42:lib/libdaisy/src/hid/switch.h ****     ~Switch() {}
  43:lib/libdaisy/src/hid/switch.h **** 
  44:lib/libdaisy/src/hid/switch.h ****     /** 
  45:lib/libdaisy/src/hid/switch.h ****     Initializes the switch object with a given port/pin combo.
  46:lib/libdaisy/src/hid/switch.h ****     \param pin port/pin object to tell the switch which hardware pin to use.
  47:lib/libdaisy/src/hid/switch.h ****     \param update_rate Does nothing. Backwards compatibility until next breaking update.
  48:lib/libdaisy/src/hid/switch.h ****     \param t switch type -- Default: TYPE_MOMENTARY
  49:lib/libdaisy/src/hid/switch.h ****     \param pol switch polarity -- Default: POLARITY_INVERTED
  50:lib/libdaisy/src/hid/switch.h ****     \param pu switch pull up/down -- Default: PULL_UP
  51:lib/libdaisy/src/hid/switch.h ****     */
  52:lib/libdaisy/src/hid/switch.h ****     void
  53:lib/libdaisy/src/hid/switch.h ****     Init(dsy_gpio_pin pin, float update_rate, Type t, Polarity pol, Pull pu);
  54:lib/libdaisy/src/hid/switch.h **** 
  55:lib/libdaisy/src/hid/switch.h ****     /**
  56:lib/libdaisy/src/hid/switch.h ****        Simplified Init.
  57:lib/libdaisy/src/hid/switch.h ****        \param pin port/pin object to tell the switch which hardware pin to use.
  58:lib/libdaisy/src/hid/switch.h ****        \param update_rate Left for backwards compatibility until next breaking change.
  59:lib/libdaisy/src/hid/switch.h ****     */
  60:lib/libdaisy/src/hid/switch.h ****     void Init(dsy_gpio_pin pin, float update_rate = 0.f);
  61:lib/libdaisy/src/hid/switch.h **** 
  62:lib/libdaisy/src/hid/switch.h ****     /** 
  63:lib/libdaisy/src/hid/switch.h ****     Called at update_rate to debounce and handle timing for the switch.
  64:lib/libdaisy/src/hid/switch.h ****     In order for events not to be missed, its important that the Edge/Pressed checks
  65:lib/libdaisy/src/hid/switch.h ****     be made at the same rate as the debounce function is being called.
  66:lib/libdaisy/src/hid/switch.h ****     */
  67:lib/libdaisy/src/hid/switch.h ****     void Debounce();
  68:lib/libdaisy/src/hid/switch.h **** 
  69:lib/libdaisy/src/hid/switch.h ****     /** \return true if a button was just pressed. */
  70:lib/libdaisy/src/hid/switch.h ****     inline bool RisingEdge() const { return state_ == 0x7f; }
 3398              		.loc 10 70 17 view .LVU1049
 3399              	.LBB446:
 3400              		.loc 10 70 38 view .LVU1050
 3401              		.loc 10 70 45 is_stmt 0 view .LVU1051
 3402 004c 8E4B     		ldr	r3, .L254+16
 3403 004e 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 3404              	.LVL215:
 3405              		.loc 10 70 45 view .LVU1052
 3406              	.LBE446:
 3407              	.LBE445:
 106:AudioProcessor.cpp ****     if (button.RisingEdge()) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 102


 3408              		.loc 3 106 5 view .LVU1053
 3409 0050 7F2B     		cmp	r3, #127
 3410 0052 40F0C480 		bne	.L207
 107:AudioProcessor.cpp ****         button_press_time = System::GetNow();
 3411              		.loc 3 107 9 is_stmt 1 view .LVU1054
 107:AudioProcessor.cpp ****         button_press_time = System::GetNow();
 3412              		.loc 3 107 43 is_stmt 0 view .LVU1055
 3413 0056 FFF7FEFF 		bl	_ZN5daisy6System6GetNowEv
 3414              	.LVL216:
 107:AudioProcessor.cpp ****         button_press_time = System::GetNow();
 3415              		.loc 3 107 27 view .LVU1056
 3416 005a 8C4B     		ldr	r3, .L254+20
 3417 005c 1860     		str	r0, [r3]
 3418              	.L208:
 3419              	.LBE444:
 119:AudioProcessor.cpp ****     int engineIndex = DetermineEngineSettings();
 3420              		.loc 3 119 5 is_stmt 1 view .LVU1057
 3421              	.LBB449:
 3422              	.LBI449:
 343:AudioProcessor.cpp **** int DetermineEngineSettings() {
 3423              		.loc 3 343 5 view .LVU1058
 3424              	.LBB450:
 344:AudioProcessor.cpp ****     return current_engine_index;
 3425              		.loc 3 344 5 view .LVU1059
 344:AudioProcessor.cpp ****     return current_engine_index;
 3426              		.loc 3 344 12 is_stmt 0 view .LVU1060
 3427 005e 8C4B     		ldr	r3, .L254+24
 3428              	.LBE450:
 3429              	.LBE449:
 134:AudioProcessor.cpp ****     if(!pad_pressed && pad_read > kOnThreshold)
 3430              		.loc 3 134 8 view .LVU1061
 3431 0060 8C4A     		ldr	r2, .L254+28
 3432              	.LBB452:
 3433              	.LBB451:
 344:AudioProcessor.cpp ****     return current_engine_index;
 3434              		.loc 3 344 12 view .LVU1062
 3435 0062 1F68     		ldr	r7, [r3]
 3436              	.LVL217:
 344:AudioProcessor.cpp ****     return current_engine_index;
 3437              		.loc 3 344 12 view .LVU1063
 3438              	.LBE451:
 3439              	.LBE452:
 120:AudioProcessor.cpp ****     bool poly_mode = (engineIndex <= 3); // First 4 engines are poly
 3440              		.loc 3 120 5 is_stmt 1 view .LVU1064
 3441              	.LBB453:
 3442              	.LBB454:
 3443              		.loc 4 56 41 is_stmt 0 view .LVU1065
 3444 0064 8C4B     		ldr	r3, .L254+32
 3445              	.LBE454:
 3446              	.LBE453:
 120:AudioProcessor.cpp ****     bool poly_mode = (engineIndex <= 3); // First 4 engines are poly
 3447              		.loc 3 120 10 view .LVU1066
 3448 0066 032F     		cmp	r7, #3
 3449 0068 8C4D     		ldr	r5, .L254+36
 3450              	.LBB457:
 3451              	.LBB455:
 3452              		.loc 4 56 41 view .LVU1067
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 103


 3453 006a D3ED037A 		vldr.32	s15, [r3, #12]
 3454              	.LBE455:
 3455              	.LBE457:
 120:AudioProcessor.cpp ****     bool poly_mode = (engineIndex <= 3); // First 4 engines are poly
 3456              		.loc 3 120 10 view .LVU1068
 3457 006e CCBF     		ite	gt
 3458 0070 4FF00009 		movgt	r9, #0
 3459 0074 4FF00109 		movle	r9, #1
 3460              	.LVL218:
 121:AudioProcessor.cpp ****     int effective_num_voices = poly_mode ? NUM_VOICES : 1;
 3461              		.loc 3 121 5 is_stmt 1 view .LVU1069
 134:AudioProcessor.cpp ****     if(!pad_pressed && pad_read > kOnThreshold)
 3462              		.loc 3 134 5 is_stmt 0 view .LVU1070
 3463 0078 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 121:AudioProcessor.cpp ****     int effective_num_voices = poly_mode ? NUM_VOICES : 1;
 3464              		.loc 3 121 42 view .LVU1071
 3465 007a 042F     		cmp	r7, #4
 3466 007c B4BF     		ite	lt
 3467 007e 4FF0040A 		movlt	r10, #4
 3468 0082 4FF0010A 		movge	r10, #1
 3469              	.LVL219:
 126:AudioProcessor.cpp ****     static bool arp_enabled = false;
 3470              		.loc 3 126 5 is_stmt 1 view .LVU1072
 127:AudioProcessor.cpp ****     constexpr float kOnThreshold  = 0.30f;   // more sensitive press detection
 3471              		.loc 3 127 5 view .LVU1073
 128:AudioProcessor.cpp ****     constexpr float kOffThreshold = 0.20f;   // lower release threshold for fast reset
 3472              		.loc 3 128 5 view .LVU1074
 130:AudioProcessor.cpp ****     static bool pad_pressed = false;          // debounced pad pressed state
 3473              		.loc 3 130 5 view .LVU1075
 131:AudioProcessor.cpp ****     float pad_read = arp_pad.Value();
 3474              		.loc 3 131 5 view .LVU1076
 3475              	.LBB458:
 3476              	.LBI453:
 3477              		.loc 4 56 18 view .LVU1077
 3478              	.LBB456:
 3479              		.loc 4 56 34 view .LVU1078
 3480              		.loc 4 56 34 is_stmt 0 view .LVU1079
 3481              	.LBE456:
 3482              	.LBE458:
 134:AudioProcessor.cpp ****     if(!pad_pressed && pad_read > kOnThreshold)
 3483              		.loc 3 134 5 is_stmt 1 view .LVU1080
 3484 0086 002B     		cmp	r3, #0
 3485 0088 40F0C280 		bne	.L212
 134:AudioProcessor.cpp ****     if(!pad_pressed && pad_read > kOnThreshold)
 3486              		.loc 3 134 21 is_stmt 0 discriminator 1 view .LVU1081
 3487 008c 9FED847A 		vldr.32	s14, .L254+40
 3488 0090 F4EEC77A 		vcmpe.f32	s15, s14
 3489 0094 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3490 0098 13DD     		ble	.L214
 138:AudioProcessor.cpp ****         arp_enabled = !arp_enabled;
 3491              		.loc 3 138 23 view .LVU1082
 3492 009a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 136:AudioProcessor.cpp ****         pad_pressed = true;
 3493              		.loc 3 136 9 is_stmt 1 view .LVU1083
 136:AudioProcessor.cpp ****         pad_pressed = true;
 3494              		.loc 3 136 21 is_stmt 0 view .LVU1084
 3495 009c 0121     		movs	r1, #1
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 104


 3496              	.LBB459:
 3497              	.LBB460:
 3498              		.file 11 "lib/libdaisy/src/daisy_seed.h"
   1:lib/libdaisy/src/daisy_seed.h **** #pragma once
   2:lib/libdaisy/src/daisy_seed.h **** #ifndef DSY_SEED_H
   3:lib/libdaisy/src/daisy_seed.h **** #define DSY_SEED_H
   4:lib/libdaisy/src/daisy_seed.h **** 
   5:lib/libdaisy/src/daisy_seed.h **** #include "daisy.h"
   6:lib/libdaisy/src/daisy_seed.h **** 
   7:lib/libdaisy/src/daisy_seed.h **** //Uncomment this out if you're still using the rev2 hardware
   8:lib/libdaisy/src/daisy_seed.h **** //#define SEED_REV2
   9:lib/libdaisy/src/daisy_seed.h **** 
  10:lib/libdaisy/src/daisy_seed.h **** namespace daisy
  11:lib/libdaisy/src/daisy_seed.h **** {
  12:lib/libdaisy/src/daisy_seed.h **** /**
  13:lib/libdaisy/src/daisy_seed.h ****    @brief This is the higher-level interface for the Daisy board. \n 
  14:lib/libdaisy/src/daisy_seed.h ****     All basic peripheral configuration/initialization is setup here. \n
  15:lib/libdaisy/src/daisy_seed.h **** 
  16:lib/libdaisy/src/daisy_seed.h ****    @ingroup boards
  17:lib/libdaisy/src/daisy_seed.h **** */
  18:lib/libdaisy/src/daisy_seed.h **** class DaisySeed
  19:lib/libdaisy/src/daisy_seed.h **** {
  20:lib/libdaisy/src/daisy_seed.h ****   public:
  21:lib/libdaisy/src/daisy_seed.h ****     DaisySeed() {}
  22:lib/libdaisy/src/daisy_seed.h ****     ~DaisySeed() {}
  23:lib/libdaisy/src/daisy_seed.h **** 
  24:lib/libdaisy/src/daisy_seed.h ****     /** This function used to provide a pre-initialization configuraiton 
  25:lib/libdaisy/src/daisy_seed.h ****      *  it has since been deprecated, and does nothing.
  26:lib/libdaisy/src/daisy_seed.h ****      */
  27:lib/libdaisy/src/daisy_seed.h ****     void Configure();
  28:lib/libdaisy/src/daisy_seed.h **** 
  29:lib/libdaisy/src/daisy_seed.h ****     /** 
  30:lib/libdaisy/src/daisy_seed.h ****     Initializes the Daisy Seed and the following peripherals:
  31:lib/libdaisy/src/daisy_seed.h ****     SDRAM, QSPI, 24-bit 48kHz Audio via AK4556, Internal USB,
  32:lib/libdaisy/src/daisy_seed.h ****     as well as the built-in LED and Testpoint.
  33:lib/libdaisy/src/daisy_seed.h **** 
  34:lib/libdaisy/src/daisy_seed.h ****     ADCs, DACs, and other special peripherals (such as I2C, SPI, etc.)
  35:lib/libdaisy/src/daisy_seed.h ****     can be initialized using their specific initializers within libdaisy
  36:lib/libdaisy/src/daisy_seed.h ****     for a specific application.
  37:lib/libdaisy/src/daisy_seed.h ****     */
  38:lib/libdaisy/src/daisy_seed.h ****     void Init(bool boost = false);
  39:lib/libdaisy/src/daisy_seed.h **** 
  40:lib/libdaisy/src/daisy_seed.h ****     /** 
  41:lib/libdaisy/src/daisy_seed.h ****     Deinitializes all peripherals automatically handled by `Init`.
  42:lib/libdaisy/src/daisy_seed.h ****     */
  43:lib/libdaisy/src/daisy_seed.h ****     void DeInit();
  44:lib/libdaisy/src/daisy_seed.h **** 
  45:lib/libdaisy/src/daisy_seed.h ****     /** 
  46:lib/libdaisy/src/daisy_seed.h ****     Wait some ms before going on.
  47:lib/libdaisy/src/daisy_seed.h ****     \param del Delay time in ms.
  48:lib/libdaisy/src/daisy_seed.h ****     */
  49:lib/libdaisy/src/daisy_seed.h ****     void DelayMs(size_t del);
  50:lib/libdaisy/src/daisy_seed.h **** 
  51:lib/libdaisy/src/daisy_seed.h ****     /** 
  52:lib/libdaisy/src/daisy_seed.h ****     Returns the gpio_pin corresponding to the index 0-31.
  53:lib/libdaisy/src/daisy_seed.h ****     For the given GPIO on the Daisy Seed (labeled 1-32 in docs).
  54:lib/libdaisy/src/daisy_seed.h ****     */
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 105


  55:lib/libdaisy/src/daisy_seed.h ****     static dsy_gpio_pin GetPin(uint8_t pin_idx);
  56:lib/libdaisy/src/daisy_seed.h **** 
  57:lib/libdaisy/src/daisy_seed.h ****     /** Begins the audio for the seeds builtin audio.
  58:lib/libdaisy/src/daisy_seed.h ****     the specified callback will get called whenever
  59:lib/libdaisy/src/daisy_seed.h ****     new data is ready to be prepared.
  60:lib/libdaisy/src/daisy_seed.h ****     */
  61:lib/libdaisy/src/daisy_seed.h ****     void StartAudio(AudioHandle::InterleavingAudioCallback cb);
  62:lib/libdaisy/src/daisy_seed.h **** 
  63:lib/libdaisy/src/daisy_seed.h ****     /** Begins the audio for the seeds builtin audio.
  64:lib/libdaisy/src/daisy_seed.h ****     the specified callback will get called whenever
  65:lib/libdaisy/src/daisy_seed.h ****     new data is ready to be prepared.
  66:lib/libdaisy/src/daisy_seed.h ****     This will use the newer non-interleaved callback.
  67:lib/libdaisy/src/daisy_seed.h ****     */
  68:lib/libdaisy/src/daisy_seed.h ****     void StartAudio(AudioHandle::AudioCallback cb);
  69:lib/libdaisy/src/daisy_seed.h **** 
  70:lib/libdaisy/src/daisy_seed.h ****     /** Changes to a new interleaved callback
  71:lib/libdaisy/src/daisy_seed.h ****      */
  72:lib/libdaisy/src/daisy_seed.h ****     void ChangeAudioCallback(AudioHandle::InterleavingAudioCallback cb);
  73:lib/libdaisy/src/daisy_seed.h **** 
  74:lib/libdaisy/src/daisy_seed.h ****     /** Changes to a new multichannel callback
  75:lib/libdaisy/src/daisy_seed.h ****      */
  76:lib/libdaisy/src/daisy_seed.h ****     void ChangeAudioCallback(AudioHandle::AudioCallback cb);
  77:lib/libdaisy/src/daisy_seed.h **** 
  78:lib/libdaisy/src/daisy_seed.h ****     /** Stops the audio if it is running. */
  79:lib/libdaisy/src/daisy_seed.h ****     void StopAudio();
  80:lib/libdaisy/src/daisy_seed.h **** 
  81:lib/libdaisy/src/daisy_seed.h ****     /** Updates the Audio Sample Rate, and reinitializes.
  82:lib/libdaisy/src/daisy_seed.h ****      ** Audio must be stopped for this to work.
  83:lib/libdaisy/src/daisy_seed.h ****      */
  84:lib/libdaisy/src/daisy_seed.h ****     void SetAudioSampleRate(SaiHandle::Config::SampleRate samplerate);
  85:lib/libdaisy/src/daisy_seed.h **** 
  86:lib/libdaisy/src/daisy_seed.h ****     /** Returns the audio sample rate in Hz as a floating point number.
  87:lib/libdaisy/src/daisy_seed.h ****      */
  88:lib/libdaisy/src/daisy_seed.h ****     float AudioSampleRate();
  89:lib/libdaisy/src/daisy_seed.h **** 
  90:lib/libdaisy/src/daisy_seed.h ****     /** Sets the number of samples processed per channel by the audio callback.
  91:lib/libdaisy/src/daisy_seed.h ****      */
  92:lib/libdaisy/src/daisy_seed.h ****     void SetAudioBlockSize(size_t blocksize);
  93:lib/libdaisy/src/daisy_seed.h **** 
  94:lib/libdaisy/src/daisy_seed.h ****     /** Returns the number of samples per channel in a block of audio. */
  95:lib/libdaisy/src/daisy_seed.h ****     size_t AudioBlockSize();
  96:lib/libdaisy/src/daisy_seed.h **** 
  97:lib/libdaisy/src/daisy_seed.h ****     /** Returns the rate in Hz that the Audio callback is called */
  98:lib/libdaisy/src/daisy_seed.h ****     float AudioCallbackRate() const;
  99:lib/libdaisy/src/daisy_seed.h **** 
 100:lib/libdaisy/src/daisy_seed.h ****     /** Sets the state of the built in LED
 101:lib/libdaisy/src/daisy_seed.h ****      */
 102:lib/libdaisy/src/daisy_seed.h ****     void SetLed(bool state);
 103:lib/libdaisy/src/daisy_seed.h **** 
 104:lib/libdaisy/src/daisy_seed.h ****     /** Sets the state of the test point near pin 10
 105:lib/libdaisy/src/daisy_seed.h ****      */
 106:lib/libdaisy/src/daisy_seed.h ****     void SetTestPoint(bool state);
 107:lib/libdaisy/src/daisy_seed.h **** 
 108:lib/libdaisy/src/daisy_seed.h ****     /** Print formatted debug log message
 109:lib/libdaisy/src/daisy_seed.h ****      */
 110:lib/libdaisy/src/daisy_seed.h ****     template <typename... VA>
 111:lib/libdaisy/src/daisy_seed.h ****     static void Print(const char* format, VA... va)
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 106


 112:lib/libdaisy/src/daisy_seed.h ****     {
 113:lib/libdaisy/src/daisy_seed.h ****         Log::Print(format, va...);
 114:lib/libdaisy/src/daisy_seed.h ****     }
 115:lib/libdaisy/src/daisy_seed.h **** 
 116:lib/libdaisy/src/daisy_seed.h ****     /** Print formatted debug log message with automatic line termination
 117:lib/libdaisy/src/daisy_seed.h ****     */
 118:lib/libdaisy/src/daisy_seed.h ****     template <typename... VA>
 119:lib/libdaisy/src/daisy_seed.h ****     static void PrintLine(const char* format, VA... va)
 120:lib/libdaisy/src/daisy_seed.h ****     {
 121:lib/libdaisy/src/daisy_seed.h ****         Log::PrintLine(format, va...);
 3499              		.loc 11 121 23 view .LVU1085
 3500 009e 8148     		ldr	r0, .L254+44
 3501              	.LBE460:
 3502              	.LBE459:
 138:AudioProcessor.cpp ****         arp_enabled = !arp_enabled;
 3503              		.loc 3 138 23 view .LVU1086
 3504 00a0 4B40     		eors	r3, r3, r1
 136:AudioProcessor.cpp ****         pad_pressed = true;
 3505              		.loc 3 136 21 view .LVU1087
 3506 00a2 1170     		strb	r1, [r2]
 138:AudioProcessor.cpp ****         arp_enabled = !arp_enabled;
 3507              		.loc 3 138 9 is_stmt 1 view .LVU1088
 3508              	.LBB463:
 3509              	.LBB461:
 3510              		.loc 11 121 23 is_stmt 0 view .LVU1089
 3511 00a4 804A     		ldr	r2, .L254+48
 3512              	.LBE461:
 3513              	.LBE463:
 138:AudioProcessor.cpp ****         arp_enabled = !arp_enabled;
 3514              		.loc 3 138 21 view .LVU1090
 3515 00a6 2B70     		strb	r3, [r5]
 139:AudioProcessor.cpp ****         hw.PrintLine(arp_enabled ? "[DEBUG] ARP ON" : "[DEBUG] ARP OFF");
 3516              		.loc 3 139 9 is_stmt 1 view .LVU1091
 3517              	.LVL220:
 3518              	.LBB464:
 3519              	.LBI459:
 119:lib/libdaisy/src/daisy_seed.h ****     {
 3520              		.loc 11 119 17 view .LVU1092
 3521              	.LBB462:
 3522              		.loc 11 121 23 is_stmt 0 view .LVU1093
 3523 00a8 002B     		cmp	r3, #0
 3524 00aa 08BF     		it	eq
 3525 00ac 1046     		moveq	r0, r2
 3526              	.LVL221:
 3527              		.loc 11 121 23 view .LVU1094
 3528 00ae FFF7FEFF 		bl	_ZN5daisy6LoggerILNS_17LoggerDestinationE1EE9PrintLineEPKcz
 3529              	.LVL222:
 3530              		.loc 11 121 23 view .LVU1095
 3531              	.LBE462:
 3532              	.LBE464:
 140:AudioProcessor.cpp ****         if(arp_enabled)
 3533              		.loc 3 140 9 is_stmt 1 view .LVU1096
 3534 00b2 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 3535 00b4 2BB1     		cbz	r3, .L214
 142:AudioProcessor.cpp ****             arp.Init(sample_rate);          // restart timing
 3536              		.loc 3 142 13 view .LVU1097
 142:AudioProcessor.cpp ****             arp.Init(sample_rate);          // restart timing
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 107


 3537              		.loc 3 142 21 is_stmt 0 view .LVU1098
 3538 00b6 7D4B     		ldr	r3, .L254+52
 3539 00b8 7D48     		ldr	r0, .L254+56
 3540 00ba 93ED000A 		vldr.32	s0, [r3]
 3541 00be FFF7FEFF 		bl	_ZN11Arpeggiator4InitEf
 3542              	.LVL223:
 3543              	.L214:
 150:AudioProcessor.cpp ****     bool arp_on = arp_enabled;
 3544              		.loc 3 150 5 is_stmt 1 view .LVU1099
 150:AudioProcessor.cpp ****     bool arp_on = arp_enabled;
 3545              		.loc 3 150 10 is_stmt 0 view .LVU1100
 3546 00c2 2D78     		ldrb	r5, [r5]	@ zero_extendqisi2
 3547              	.LVL224:
 151:AudioProcessor.cpp ****     static bool was_arp_on = false;
 3548              		.loc 3 151 5 is_stmt 1 view .LVU1101
 152:AudioProcessor.cpp ****     if (!arp_on && was_arp_on) {
 3549              		.loc 3 152 5 view .LVU1102
 3550 00c4 DFF808B2 		ldr	fp, .L254+88
 3551              	.LBB465:
 3552 00c8 ADB9     		cbnz	r5, .L218
 3553              	.LVL225:
 152:AudioProcessor.cpp ****     if (!arp_on && was_arp_on) {
 3554              		.loc 3 152 17 is_stmt 0 discriminator 1 view .LVU1103
 3555 00ca 9BF80030 		ldrb	r3, [fp]	@ zero_extendqisi2
 3556 00ce 93B1     		cbz	r3, .L218
 3557              	.LBB466:
 154:AudioProcessor.cpp ****         ResetVoiceStates();
 3558              		.loc 3 154 9 is_stmt 1 view .LVU1104
 154:AudioProcessor.cpp ****         ResetVoiceStates();
 3559              		.loc 3 154 25 is_stmt 0 view .LVU1105
 3560 00d0 FFF7FEFF 		bl	_Z16ResetVoiceStatesv
 3561              	.LVL226:
 155:AudioProcessor.cpp ****         for (int v = 0; v < NUM_VOICES; ++v) {
 3562              		.loc 3 155 9 is_stmt 1 view .LVU1106
 3563              	.LBB467:
 155:AudioProcessor.cpp ****         for (int v = 0; v < NUM_VOICES; ++v) {
 3564              		.loc 3 155 27 view .LVU1107
 156:AudioProcessor.cpp ****             modulations[v].trigger = 0.0f;
 3565              		.loc 3 156 13 view .LVU1108
 156:AudioProcessor.cpp ****             modulations[v].trigger = 0.0f;
 3566              		.loc 3 156 36 is_stmt 0 view .LVU1109
 3567 00d4 774B     		ldr	r3, .L254+60
 3568 00d6 0022     		movs	r2, #0
 157:AudioProcessor.cpp ****             modulations[v].trigger_patched = false;
 3569              		.loc 3 157 44 view .LVU1110
 3570 00d8 83F82350 		strb	r5, [r3, #35]
 156:AudioProcessor.cpp ****             modulations[v].trigger = 0.0f;
 3571              		.loc 3 156 36 view .LVU1111
 3572 00dc 9A61     		str	r2, [r3, #24]	@ float
 157:AudioProcessor.cpp ****             modulations[v].trigger_patched = false;
 3573              		.loc 3 157 13 is_stmt 1 view .LVU1112
 155:AudioProcessor.cpp ****         for (int v = 0; v < NUM_VOICES; ++v) {
 3574              		.loc 3 155 9 view .LVU1113
 3575              	.LVL227:
 155:AudioProcessor.cpp ****         for (int v = 0; v < NUM_VOICES; ++v) {
 3576              		.loc 3 155 27 view .LVU1114
 156:AudioProcessor.cpp ****             modulations[v].trigger = 0.0f;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 108


 3577              		.loc 3 156 13 view .LVU1115
 156:AudioProcessor.cpp ****             modulations[v].trigger = 0.0f;
 3578              		.loc 3 156 36 is_stmt 0 view .LVU1116
 3579 00de 1A64     		str	r2, [r3, #64]	@ float
 157:AudioProcessor.cpp ****             modulations[v].trigger_patched = false;
 3580              		.loc 3 157 13 is_stmt 1 view .LVU1117
 157:AudioProcessor.cpp ****             modulations[v].trigger_patched = false;
 3581              		.loc 3 157 44 is_stmt 0 view .LVU1118
 3582 00e0 83F84B50 		strb	r5, [r3, #75]
 155:AudioProcessor.cpp ****         for (int v = 0; v < NUM_VOICES; ++v) {
 3583              		.loc 3 155 9 is_stmt 1 view .LVU1119
 3584              	.LVL228:
 155:AudioProcessor.cpp ****         for (int v = 0; v < NUM_VOICES; ++v) {
 3585              		.loc 3 155 27 view .LVU1120
 156:AudioProcessor.cpp ****             modulations[v].trigger = 0.0f;
 3586              		.loc 3 156 13 view .LVU1121
 156:AudioProcessor.cpp ****             modulations[v].trigger = 0.0f;
 3587              		.loc 3 156 36 is_stmt 0 view .LVU1122
 3588 00e4 9A66     		str	r2, [r3, #104]	@ float
 157:AudioProcessor.cpp ****             modulations[v].trigger_patched = false;
 3589              		.loc 3 157 13 is_stmt 1 view .LVU1123
 157:AudioProcessor.cpp ****             modulations[v].trigger_patched = false;
 3590              		.loc 3 157 44 is_stmt 0 view .LVU1124
 3591 00e6 83F87350 		strb	r5, [r3, #115]
 155:AudioProcessor.cpp ****         for (int v = 0; v < NUM_VOICES; ++v) {
 3592              		.loc 3 155 9 is_stmt 1 view .LVU1125
 3593              	.LVL229:
 155:AudioProcessor.cpp ****         for (int v = 0; v < NUM_VOICES; ++v) {
 3594              		.loc 3 155 27 view .LVU1126
 156:AudioProcessor.cpp ****             modulations[v].trigger = 0.0f;
 3595              		.loc 3 156 13 view .LVU1127
 156:AudioProcessor.cpp ****             modulations[v].trigger = 0.0f;
 3596              		.loc 3 156 36 is_stmt 0 view .LVU1128
 3597 00ea C3F89020 		str	r2, [r3, #144]	@ float
 157:AudioProcessor.cpp ****             modulations[v].trigger_patched = false;
 3598              		.loc 3 157 13 is_stmt 1 view .LVU1129
 157:AudioProcessor.cpp ****             modulations[v].trigger_patched = false;
 3599              		.loc 3 157 44 is_stmt 0 view .LVU1130
 3600 00ee 83F89B50 		strb	r5, [r3, #155]
 155:AudioProcessor.cpp ****         for (int v = 0; v < NUM_VOICES; ++v) {
 3601              		.loc 3 155 9 is_stmt 1 view .LVU1131
 3602              	.LVL230:
 155:AudioProcessor.cpp ****         for (int v = 0; v < NUM_VOICES; ++v) {
 3603              		.loc 3 155 27 view .LVU1132
 3604              	.LBE467:
 162:AudioProcessor.cpp ****         last_touch_state = 0;
 3605              		.loc 3 162 9 view .LVU1133
 162:AudioProcessor.cpp ****         last_touch_state = 0;
 3606              		.loc 3 162 26 is_stmt 0 view .LVU1134
 3607 00f2 714B     		ldr	r3, .L254+64
 3608 00f4 1D80     		strh	r5, [r3]	@ movhi
 3609              	.LVL231:
 3610              	.L218:
 162:AudioProcessor.cpp ****         last_touch_state = 0;
 3611              		.loc 3 162 26 view .LVU1135
 3612              	.LBE466:
 3613              	.LBE465:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 109


 164:AudioProcessor.cpp ****     was_arp_on = arp_on;
 3614              		.loc 3 164 5 is_stmt 1 view .LVU1136
 164:AudioProcessor.cpp ****     was_arp_on = arp_on;
 3615              		.loc 3 164 16 is_stmt 0 view .LVU1137
 3616 00f6 8BF80050 		strb	r5, [fp]
 166:AudioProcessor.cpp ****     if (arp_on) {
 3617              		.loc 3 166 5 is_stmt 1 view .LVU1138
 3618              	.LBB468:
 3619 00fa 002D     		cmp	r5, #0
 3620 00fc 00F09280 		beq	.L219
 3621              	.LBB469:
 168:AudioProcessor.cpp ****         uint16_t st = current_touch_state;
 3622              		.loc 3 168 9 view .LVU1139
 168:AudioProcessor.cpp ****         uint16_t st = current_touch_state;
 3623              		.loc 3 168 23 is_stmt 0 view .LVU1140
 3624 0100 6E4B     		ldr	r3, .L254+68
 3625 0102 1988     		ldrh	r1, [r3]
 3626              	.LBB470:
 172:AudioProcessor.cpp ****         for (int i = 0; i < 12; ++i) {
 3627              		.loc 3 172 18 view .LVU1141
 3628 0104 0023     		movs	r3, #0
 3629              	.LBE470:
 168:AudioProcessor.cpp ****         uint16_t st = current_touch_state;
 3630              		.loc 3 168 23 view .LVU1142
 3631 0106 89B2     		uxth	r1, r1
 3632              	.LVL232:
 169:AudioProcessor.cpp ****         int key_idxs[12];
 3633              		.loc 3 169 9 is_stmt 1 view .LVU1143
 170:AudioProcessor.cpp ****         int num_keys = 0;
 3634              		.loc 3 170 9 view .LVU1144
 172:AudioProcessor.cpp ****         for (int i = 0; i < 12; ++i) {
 3635              		.loc 3 172 9 view .LVU1145
 3636              	.LBB471:
 172:AudioProcessor.cpp ****         for (int i = 0; i < 12; ++i) {
 3637              		.loc 3 172 27 view .LVU1146
 3638              	.LBE471:
 170:AudioProcessor.cpp ****         int num_keys = 0;
 3639              		.loc 3 170 13 is_stmt 0 view .LVU1147
 3640 0108 1A46     		mov	r2, r3
 3641              	.LVL233:
 3642              	.L221:
 3643              	.LBB472:
 173:AudioProcessor.cpp ****             if (st & (1 << i)) {
 3644              		.loc 3 173 13 is_stmt 1 view .LVU1148
 173:AudioProcessor.cpp ****             if (st & (1 << i)) {
 3645              		.loc 3 173 20 is_stmt 0 view .LVU1149
 3646 010a 41FA03F0 		asr	r0, r1, r3
 173:AudioProcessor.cpp ****             if (st & (1 << i)) {
 3647              		.loc 3 173 13 view .LVU1150
 3648 010e C007     		lsls	r0, r0, #31
 174:AudioProcessor.cpp ****                 key_idxs[num_keys++] = i;
 3649              		.loc 3 174 17 is_stmt 1 view .LVU1151
 3650              	.LVL234:
 174:AudioProcessor.cpp ****                 key_idxs[num_keys++] = i;
 3651              		.loc 3 174 38 is_stmt 0 view .LVU1152
 3652 0110 41BF     		itttt	mi
 3653 0112 0CA8     		addmi	r0, sp, #48
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 110


 3654 0114 00EB8200 		addmi	r0, r0, r2, lsl #2
 174:AudioProcessor.cpp ****                 key_idxs[num_keys++] = i;
 3655              		.loc 3 174 34 view .LVU1153
 3656 0118 0132     		addmi	r2, r2, #1
 3657              	.LVL235:
 172:AudioProcessor.cpp ****         for (int i = 0; i < 12; ++i) {
 3658              		.loc 3 172 9 is_stmt 1 view .LVU1154
 174:AudioProcessor.cpp ****                 key_idxs[num_keys++] = i;
 3659              		.loc 3 174 38 is_stmt 0 view .LVU1155
 3660 011a 40F8303C 		strmi	r3, [r0, #-48]
 172:AudioProcessor.cpp ****         for (int i = 0; i < 12; ++i) {
 3661              		.loc 3 172 9 view .LVU1156
 3662 011e 0133     		adds	r3, r3, #1
 3663              	.LVL236:
 172:AudioProcessor.cpp ****         for (int i = 0; i < 12; ++i) {
 3664              		.loc 3 172 27 is_stmt 1 view .LVU1157
 3665 0120 0C2B     		cmp	r3, #12
 3666 0122 F2D1     		bne	.L221
 3667              	.LBE472:
 177:AudioProcessor.cpp ****         arp.SetNotes(key_idxs, num_keys);
 3668              		.loc 3 177 9 view .LVU1158
 177:AudioProcessor.cpp ****         arp.SetNotes(key_idxs, num_keys);
 3669              		.loc 3 177 21 is_stmt 0 view .LVU1159
 3670 0124 6946     		mov	r1, sp
 3671              	.LVL237:
 177:AudioProcessor.cpp ****         arp.SetNotes(key_idxs, num_keys);
 3672              		.loc 3 177 21 view .LVU1160
 3673 0126 6248     		ldr	r0, .L254+56
 3674 0128 FFF7FEFF 		bl	_ZN11Arpeggiator8SetNotesEPii
 3675              	.LVL238:
 180:AudioProcessor.cpp ****         float min_tempo = 1.0f;
 3676              		.loc 3 180 9 is_stmt 1 view .LVU1161
 181:AudioProcessor.cpp ****         float max_tempo = 30.0f;
 3677              		.loc 3 181 9 view .LVU1162
 182:AudioProcessor.cpp ****         float ratio     = max_tempo / min_tempo;
 3678              		.loc 3 182 9 view .LVU1163
 183:AudioProcessor.cpp ****         float tempo     = min_tempo * powf(ratio, delay_time_val);
 3679              		.loc 3 183 9 view .LVU1164
 183:AudioProcessor.cpp ****         float tempo     = min_tempo * powf(ratio, delay_time_val);
 3680              		.loc 3 183 43 is_stmt 0 view .LVU1165
 3681 012c 644B     		ldr	r3, .L254+72
 3682 012e B3EE0E0A 		vmov.f32	s0, #3.0e+1
 3683 0132 D3ED000A 		vldr.32	s1, [r3]
 3684 0136 FFF7FEFF 		bl	powf
 3685              	.LVL239:
 184:AudioProcessor.cpp ****         arp.SetMainTempo(tempo);
 3686              		.loc 3 184 9 is_stmt 1 view .LVU1166
 184:AudioProcessor.cpp ****         arp.SetMainTempo(tempo);
 3687              		.loc 3 184 25 is_stmt 0 view .LVU1167
 3688 013a 5D48     		ldr	r0, .L254+56
 3689 013c FFF7FEFF 		bl	_ZN11Arpeggiator12SetMainTempoEf
 3690              	.LVL240:
 186:AudioProcessor.cpp ****         {
 3691              		.loc 3 186 9 is_stmt 1 view .LVU1168
 3692              	.LBB473:
 187:AudioProcessor.cpp ****             float min_ratio = 0.5f, max_ratio = 2.0f;
 3693              		.loc 3 187 13 view .LVU1169
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 111


 188:AudioProcessor.cpp ****             float mw = mod_wheel.Value();
 3694              		.loc 3 188 13 view .LVU1170
 3695              	.LBB474:
 3696              	.LBI474:
 3697              		.loc 4 56 18 view .LVU1171
 3698              	.LBB475:
 3699              		.loc 4 56 34 view .LVU1172
 3700              		.loc 4 56 34 is_stmt 0 view .LVU1173
 3701              	.LBE475:
 3702              	.LBE474:
 189:AudioProcessor.cpp ****             float ratio = min_ratio + mw * (max_ratio - min_ratio);
 3703              		.loc 3 189 13 is_stmt 1 view .LVU1174
 3704              	.LBB477:
 3705              	.LBB476:
 3706              		.loc 4 56 41 is_stmt 0 view .LVU1175
 3707 0140 604B     		ldr	r3, .L254+76
 3708              	.LBE476:
 3709              	.LBE477:
 190:AudioProcessor.cpp ****             arp.SetPolyrhythmRatio(ratio);
 3710              		.loc 3 190 35 view .LVU1176
 3711 0142 F7EE087A 		vmov.f32	s15, #1.5e+0
 3712 0146 5A48     		ldr	r0, .L254+56
 3713 0148 B0EE480A 		vmov.f32	s0, s16
 189:AudioProcessor.cpp ****             float ratio = min_ratio + mw * (max_ratio - min_ratio);
 3714              		.loc 3 189 19 view .LVU1177
 3715 014c 93ED037A 		vldr.32	s14, [r3, #12]
 3716              	.LVL241:
 190:AudioProcessor.cpp ****             arp.SetPolyrhythmRatio(ratio);
 3717              		.loc 3 190 13 is_stmt 1 view .LVU1178
 190:AudioProcessor.cpp ****             arp.SetPolyrhythmRatio(ratio);
 3718              		.loc 3 190 35 is_stmt 0 view .LVU1179
 3719 0150 A7EE270A 		vfma.f32	s0, s14, s15
 3720              	.LVL242:
 190:AudioProcessor.cpp ****             arp.SetPolyrhythmRatio(ratio);
 3721              		.loc 3 190 35 view .LVU1180
 3722 0154 FFF7FEFF 		bl	_ZN11Arpeggiator18SetPolyrhythmRatioEf
 3723              	.LVL243:
 190:AudioProcessor.cpp ****             arp.SetPolyrhythmRatio(ratio);
 3724              		.loc 3 190 35 view .LVU1181
 3725              	.LBE473:
 193:AudioProcessor.cpp ****         arp.Process(size / 2);
 3726              		.loc 3 193 9 is_stmt 1 view .LVU1182
 193:AudioProcessor.cpp ****         arp.Process(size / 2);
 3727              		.loc 3 193 20 is_stmt 0 view .LVU1183
 3728 0158 5548     		ldr	r0, .L254+56
 3729 015a 7108     		lsrs	r1, r6, #1
 3730 015c FFF7FEFF 		bl	_ZN11Arpeggiator7ProcessEj
 3731              	.LVL244:
 3732              	.L222:
 193:AudioProcessor.cpp ****         arp.Process(size / 2);
 3733              		.loc 3 193 20 view .LVU1184
 3734              	.LBE469:
 3735              	.LBE468:
 200:AudioProcessor.cpp ****     ConfigureDelaySettings();
 3736              		.loc 3 200 5 is_stmt 1 view .LVU1185
 200:AudioProcessor.cpp ****     ConfigureDelaySettings();
 3737              		.loc 3 200 27 is_stmt 0 view .LVU1186
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 112


 3738 0160 FFF7FEFF 		bl	_Z22ConfigureDelaySettingsv
 3739              	.LVL245:
 204:AudioProcessor.cpp ****     if (arp_on) {
 3740              		.loc 3 204 5 is_stmt 1 view .LVU1187
 3741 0164 002D     		cmp	r5, #0
 3742 0166 63D0     		beq	.L223
 206:AudioProcessor.cpp ****         PrepareVoiceParameters(engineIndex, false, 0, true);
 3743              		.loc 3 206 9 view .LVU1188
 206:AudioProcessor.cpp ****         PrepareVoiceParameters(engineIndex, false, 0, true);
 3744              		.loc 3 206 31 is_stmt 0 view .LVU1189
 3745 0168 0022     		movs	r2, #0
 3746 016a 0123     		movs	r3, #1
 3747 016c 1146     		mov	r1, r2
 3748              	.L253:
 209:AudioProcessor.cpp ****         PrepareVoiceParameters(engineIndex, poly_mode, effective_num_voices - 1, false);
 3749              		.loc 3 209 31 view .LVU1190
 3750 016e 3846     		mov	r0, r7
 216:AudioProcessor.cpp ****     float dry_level = 1.0f - delay_mix_val;
 3751              		.loc 3 216 11 view .LVU1191
 3752 0170 B7EE008A 		vmov.f32	s16, #1.0e+0
 209:AudioProcessor.cpp ****         PrepareVoiceParameters(engineIndex, poly_mode, effective_num_voices - 1, false);
 3753              		.loc 3 209 31 view .LVU1192
 3754 0174 FFF7FEFF 		bl	_Z22PrepareVoiceParametersibib
 3755              	.LVL246:
 213:AudioProcessor.cpp ****     ProcessVoiceEnvelopes(poly_mode);
 3756              		.loc 3 213 5 is_stmt 1 view .LVU1193
 213:AudioProcessor.cpp ****     ProcessVoiceEnvelopes(poly_mode);
 3757              		.loc 3 213 26 is_stmt 0 view .LVU1194
 3758 0178 4846     		mov	r0, r9
 3759 017a FFF7FEFF 		bl	_Z21ProcessVoiceEnvelopesb
 3760              	.LVL247:
 216:AudioProcessor.cpp ****     float dry_level = 1.0f - delay_mix_val;
 3761              		.loc 3 216 5 is_stmt 1 view .LVU1195
 217:AudioProcessor.cpp ****     ProcessAudioOutput(out, size, dry_level);
 3762              		.loc 3 217 5 view .LVU1196
 216:AudioProcessor.cpp ****     float dry_level = 1.0f - delay_mix_val;
 3763              		.loc 3 216 11 is_stmt 0 view .LVU1197
 3764 017e 524B     		ldr	r3, .L254+80
 217:AudioProcessor.cpp ****     ProcessAudioOutput(out, size, dry_level);
 3765              		.loc 3 217 23 view .LVU1198
 3766 0180 3146     		mov	r1, r6
 3767 0182 4046     		mov	r0, r8
 216:AudioProcessor.cpp ****     float dry_level = 1.0f - delay_mix_val;
 3768              		.loc 3 216 11 view .LVU1199
 3769 0184 93ED000A 		vldr.32	s0, [r3]
 217:AudioProcessor.cpp ****     ProcessAudioOutput(out, size, dry_level);
 3770              		.loc 3 217 23 view .LVU1200
 3771 0188 38EE400A 		vsub.f32	s0, s16, s0
 3772              	.LVL248:
 217:AudioProcessor.cpp ****     ProcessAudioOutput(out, size, dry_level);
 3773              		.loc 3 217 23 view .LVU1201
 3774 018c FFF7FEFF 		bl	_Z18ProcessAudioOutputPfjf
 3775              	.LVL249:
 220:AudioProcessor.cpp ****     if (arp_on) {
 3776              		.loc 3 220 5 is_stmt 1 view .LVU1202
 3777 0190 2DB1     		cbz	r5, .L225
 3778              	.LVL250:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 113


 221:AudioProcessor.cpp ****         modulations[0].trigger = 0.0f;
 3779              		.loc 3 221 9 view .LVU1203
 221:AudioProcessor.cpp ****         modulations[0].trigger = 0.0f;
 3780              		.loc 3 221 32 is_stmt 0 view .LVU1204
 3781 0192 484B     		ldr	r3, .L254+60
 3782 0194 0022     		movs	r2, #0
 3783 0196 9A61     		str	r2, [r3, #24]	@ float
 222:AudioProcessor.cpp ****         modulations[0].trigger_patched = 0.0f;
 3784              		.loc 3 222 9 is_stmt 1 view .LVU1205
 222:AudioProcessor.cpp ****         modulations[0].trigger_patched = 0.0f;
 3785              		.loc 3 222 40 is_stmt 0 view .LVU1206
 3786 0198 0022     		movs	r2, #0
 3787 019a 83F82320 		strb	r2, [r3, #35]
 3788              	.LVL251:
 3789              	.L225:
 226:AudioProcessor.cpp ****     cpu_meter.OnBlockEnd();
 3790              		.loc 3 226 5 is_stmt 1 view .LVU1207
 3791              	.LBB478:
 3792              	.LBI478:
  50:lib/libdaisy/src/util/CpuLoadMeter.h **** 
  51:lib/libdaisy/src/util/CpuLoadMeter.h ****     /** Call this at the end of your audio callback */
  52:lib/libdaisy/src/util/CpuLoadMeter.h ****     void OnBlockEnd()
 3793              		.loc 9 52 10 view .LVU1208
 3794              	.LBB479:
  53:lib/libdaisy/src/util/CpuLoadMeter.h ****     {
  54:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto end         = System::GetTick();
 3795              		.loc 9 54 9 view .LVU1209
 3796              		.loc 9 54 49 is_stmt 0 view .LVU1210
 3797 019e FFF7FEFF 		bl	_ZN5daisy6System7GetTickEv
 3798              	.LVL252:
  55:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto ticksPassed = end - currentBlockStartTicks_;
 3799              		.loc 9 55 9 is_stmt 1 view .LVU1211
  56:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto currentBlockLoad
 3800              		.loc 9 56 9 view .LVU1212
  55:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto ticksPassed = end - currentBlockStartTicks_;
 3801              		.loc 9 55 20 is_stmt 0 view .LVU1213
 3802 01a2 A368     		ldr	r3, [r4, #8]
 3803              		.loc 9 56 20 view .LVU1214
 3804 01a4 94ED017A 		vldr.32	s14, [r4, #4]
  55:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto ticksPassed = end - currentBlockStartTicks_;
 3805              		.loc 9 55 20 view .LVU1215
 3806 01a8 C31A     		subs	r3, r0, r3
 3807              	.LVL253:
  55:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto ticksPassed = end - currentBlockStartTicks_;
 3808              		.loc 9 55 20 view .LVU1216
 3809 01aa 07EE903A 		vmov	s15, r3	@ int
  57:lib/libdaisy/src/util/CpuLoadMeter.h ****             = float(ticksPassed) * ticksPerBlockInv_; // usPassed / usPerBlock
  58:lib/libdaisy/src/util/CpuLoadMeter.h **** 
  59:lib/libdaisy/src/util/CpuLoadMeter.h ****         if(firstCycle_)
 3810              		.loc 9 59 9 view .LVU1217
 3811 01ae 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 3812              	.LVL254:
  57:lib/libdaisy/src/util/CpuLoadMeter.h ****             = float(ticksPassed) * ticksPerBlockInv_; // usPassed / usPerBlock
 3813              		.loc 9 57 15 view .LVU1218
 3814 01b0 F8EE677A 		vcvt.f32.u32	s15, s15
 3815              	.LVL255:
  56:lib/libdaisy/src/util/CpuLoadMeter.h ****         const auto currentBlockLoad
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 114


 3816              		.loc 9 56 20 view .LVU1219
 3817 01b4 67EE877A 		vmul.f32	s15, s15, s14
 3818              	.LVL256:
 3819              		.loc 9 59 9 is_stmt 1 view .LVU1220
 3820 01b8 002B     		cmp	r3, #0
 3821 01ba 3ED0     		beq	.L226
  60:lib/libdaisy/src/util/CpuLoadMeter.h ****         {
  61:lib/libdaisy/src/util/CpuLoadMeter.h ****             max_ = min_ = avg_ = currentBlockLoad;
 3822              		.loc 9 61 13 view .LVU1221
  62:lib/libdaisy/src/util/CpuLoadMeter.h ****             firstCycle_        = false;
 3823              		.loc 9 62 32 is_stmt 0 view .LVU1222
 3824 01bc 0023     		movs	r3, #0
  61:lib/libdaisy/src/util/CpuLoadMeter.h ****             firstCycle_        = false;
 3825              		.loc 9 61 32 view .LVU1223
 3826 01be C4ED057A 		vstr.32	s15, [r4, #20]
  61:lib/libdaisy/src/util/CpuLoadMeter.h ****             firstCycle_        = false;
 3827              		.loc 9 61 25 view .LVU1224
 3828 01c2 C4ED037A 		vstr.32	s15, [r4, #12]
  61:lib/libdaisy/src/util/CpuLoadMeter.h ****             firstCycle_        = false;
 3829              		.loc 9 61 18 view .LVU1225
 3830 01c6 C4ED047A 		vstr.32	s15, [r4, #16]
 3831              		.loc 9 62 13 is_stmt 1 view .LVU1226
 3832              		.loc 9 62 32 is_stmt 0 view .LVU1227
 3833 01ca 2370     		strb	r3, [r4]
 3834              	.L227:
 3835              	.LVL257:
 3836              		.loc 9 62 32 view .LVU1228
 3837              	.LBE479:
 3838              	.LBE478:
 229:AudioProcessor.cpp ****     UpdatePerformanceMonitors(size, out);
 3839              		.loc 3 229 5 is_stmt 1 view .LVU1229
 229:AudioProcessor.cpp ****     UpdatePerformanceMonitors(size, out);
 3840              		.loc 3 229 30 is_stmt 0 view .LVU1230
 3841 01cc 4146     		mov	r1, r8
 3842 01ce 3046     		mov	r0, r6
 230:AudioProcessor.cpp **** }
 3843              		.loc 3 230 1 view .LVU1231
 3844 01d0 0DB0     		add	sp, sp, #52
 3845              		.cfi_remember_state
 3846              		.cfi_def_cfa_offset 44
 3847              		@ sp needed
 3848 01d2 BDEC028B 		vldm	sp!, {d8}
 3849              		.cfi_restore 80
 3850              		.cfi_restore 81
 3851              		.cfi_def_cfa_offset 36
 3852 01d6 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3853              		.cfi_restore 14
 3854              		.cfi_restore 11
 3855              		.cfi_restore 10
 3856              		.cfi_restore 9
 3857              		.cfi_restore 8
 3858              		.cfi_restore 7
 3859              		.cfi_restore 6
 3860              		.cfi_restore 5
 3861              		.cfi_restore 4
 3862              		.cfi_def_cfa_offset 0
 3863              	.LVL258:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 115


 229:AudioProcessor.cpp ****     UpdatePerformanceMonitors(size, out);
 3864              		.loc 3 229 30 view .LVU1232
 3865 01da FFF7FEBF 		b	_Z25UpdatePerformanceMonitorsjPf
 3866              	.LVL259:
 3867              	.L207:
 3868              		.cfi_restore_state
 109:AudioProcessor.cpp ****     else if (button.Pressed() && button_press_time > 0) {
 3869              		.loc 3 109 10 is_stmt 1 view .LVU1233
  71:lib/libdaisy/src/hid/switch.h **** 
  72:lib/libdaisy/src/hid/switch.h ****     /** \return true if the button was just released */
  73:lib/libdaisy/src/hid/switch.h ****     inline bool FallingEdge() const { return state_ == 0x80; }
  74:lib/libdaisy/src/hid/switch.h **** 
  75:lib/libdaisy/src/hid/switch.h ****     /** \return true if the button is held down (or if the toggle is on) */
  76:lib/libdaisy/src/hid/switch.h ****     inline bool Pressed() const { return state_ == 0xff; }
 3870              		.loc 10 76 35 view .LVU1234
 3871              	.LBB481:
 3872              	.LBB447:
 109:AudioProcessor.cpp ****     else if (button.Pressed() && button_press_time > 0) {
 3873              		.loc 3 109 31 is_stmt 0 view .LVU1235
 3874 01de FF2B     		cmp	r3, #255
 3875 01e0 7FF43DAF 		bne	.L208
 109:AudioProcessor.cpp ****     else if (button.Pressed() && button_press_time > 0) {
 3876              		.loc 3 109 52 discriminator 1 view .LVU1236
 3877 01e4 294D     		ldr	r5, .L254+20
 109:AudioProcessor.cpp ****     else if (button.Pressed() && button_press_time > 0) {
 3878              		.loc 3 109 31 discriminator 1 view .LVU1237
 3879 01e6 2B68     		ldr	r3, [r5]
 3880 01e8 002B     		cmp	r3, #0
 3881 01ea 3FF438AF 		beq	.L208
 3882              	.LBB448:
 110:AudioProcessor.cpp ****         uint32_t held_time = System::GetNow() - button_press_time;
 3883              		.loc 3 110 9 is_stmt 1 view .LVU1238
 110:AudioProcessor.cpp ****         uint32_t held_time = System::GetNow() - button_press_time;
 3884              		.loc 3 110 44 is_stmt 0 view .LVU1239
 3885 01ee FFF7FEFF 		bl	_ZN5daisy6System6GetNowEv
 3886              	.LVL260:
 112:AudioProcessor.cpp ****         if (held_time > 1000 && held_time < 3000) {
 3887              		.loc 3 112 9 is_stmt 1 view .LVU1240
 112:AudioProcessor.cpp ****         if (held_time > 1000 && held_time < 3000) {
 3888              		.loc 3 112 30 is_stmt 0 view .LVU1241
 3889 01f2 2B68     		ldr	r3, [r5]
 3890 01f4 6FF47A77 		mvn	r7, #1000
 3891 01f8 C01A     		subs	r0, r0, r3
 3892              	.LVL261:
 112:AudioProcessor.cpp ****         if (held_time > 1000 && held_time < 3000) {
 3893              		.loc 3 112 9 view .LVU1242
 3894 01fa 40F2CE73 		movw	r3, #1998
 112:AudioProcessor.cpp ****         if (held_time > 1000 && held_time < 3000) {
 3895              		.loc 3 112 30 view .LVU1243
 3896 01fe 3844     		add	r0, r0, r7
 112:AudioProcessor.cpp ****         if (held_time > 1000 && held_time < 3000) {
 3897              		.loc 3 112 9 view .LVU1244
 3898 0200 9842     		cmp	r0, r3
 3899 0202 3FF62CAF 		bhi	.L208
 113:AudioProcessor.cpp ****             ResetVoiceStates();
 3900              		.loc 3 113 13 is_stmt 1 view .LVU1245
 113:AudioProcessor.cpp ****             ResetVoiceStates();
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 116


 3901              		.loc 3 113 29 is_stmt 0 view .LVU1246
 3902 0206 FFF7FEFF 		bl	_Z16ResetVoiceStatesv
 3903              	.LVL262:
 114:AudioProcessor.cpp ****             button_press_time = 0; // Reset so it only triggers once
 3904              		.loc 3 114 13 is_stmt 1 view .LVU1247
 114:AudioProcessor.cpp ****             button_press_time = 0; // Reset so it only triggers once
 3905              		.loc 3 114 31 is_stmt 0 view .LVU1248
 3906 020a 0023     		movs	r3, #0
 3907 020c 2B60     		str	r3, [r5]
 3908 020e 26E7     		b	.L208
 3909              	.LVL263:
 3910              	.L212:
 114:AudioProcessor.cpp ****             button_press_time = 0; // Reset so it only triggers once
 3911              		.loc 3 114 31 view .LVU1249
 3912              	.LBE448:
 3913              	.LBE447:
 3914              	.LBE481:
 145:AudioProcessor.cpp ****     else if(pad_pressed && pad_read < kOffThreshold)
 3915              		.loc 3 145 10 is_stmt 1 discriminator 1 view .LVU1250
 145:AudioProcessor.cpp ****     else if(pad_pressed && pad_read < kOffThreshold)
 3916              		.loc 3 145 25 is_stmt 0 discriminator 1 view .LVU1251
 3917 0210 9FED2E7A 		vldr.32	s14, .L254+84
 3918 0214 F4EEC77A 		vcmpe.f32	s15, s14
 3919 0218 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 148:AudioProcessor.cpp ****         pad_pressed = false;
 3920              		.loc 3 148 9 is_stmt 1 discriminator 1 view .LVU1252
 148:AudioProcessor.cpp ****         pad_pressed = false;
 3921              		.loc 3 148 21 is_stmt 0 discriminator 1 view .LVU1253
 3922 021c 44BF     		itt	mi
 3923 021e 0023     		movmi	r3, #0
 3924 0220 1370     		strbmi	r3, [r2]
 3925 0222 4EE7     		b	.L214
 3926              	.LVL264:
 3927              	.L219:
 3928              	.LBB482:
 196:AudioProcessor.cpp ****         HandleTouchInput(engineIndex, poly_mode, effective_num_voices);
 3929              		.loc 3 196 9 is_stmt 1 view .LVU1254
 196:AudioProcessor.cpp ****         HandleTouchInput(engineIndex, poly_mode, effective_num_voices);
 3930              		.loc 3 196 25 is_stmt 0 view .LVU1255
 3931 0224 5246     		mov	r2, r10
 3932 0226 4946     		mov	r1, r9
 3933 0228 3846     		mov	r0, r7
 3934 022a FFF7FEFF 		bl	_Z16HandleTouchInputibi
 3935              	.LVL265:
 3936 022e 97E7     		b	.L222
 3937              	.L223:
 196:AudioProcessor.cpp ****         HandleTouchInput(engineIndex, poly_mode, effective_num_voices);
 3938              		.loc 3 196 25 view .LVU1256
 3939              	.LBE482:
 209:AudioProcessor.cpp ****         PrepareVoiceParameters(engineIndex, poly_mode, effective_num_voices - 1, false);
 3940              		.loc 3 209 9 is_stmt 1 view .LVU1257
 209:AudioProcessor.cpp ****         PrepareVoiceParameters(engineIndex, poly_mode, effective_num_voices - 1, false);
 3941              		.loc 3 209 31 is_stmt 0 view .LVU1258
 3942 0230 2B46     		mov	r3, r5
 3943 0232 0AF1FF32 		add	r2, r10, #-1
 3944 0236 4946     		mov	r1, r9
 3945 0238 99E7     		b	.L253
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 117


 3946              	.LVL266:
 3947              	.L226:
 3948              	.LBB483:
 3949              	.LBB480:
  63:lib/libdaisy/src/util/CpuLoadMeter.h ****         }
  64:lib/libdaisy/src/util/CpuLoadMeter.h ****         else
  65:lib/libdaisy/src/util/CpuLoadMeter.h ****         {
  66:lib/libdaisy/src/util/CpuLoadMeter.h ****             if(currentBlockLoad > max_)
 3950              		.loc 9 66 13 is_stmt 1 view .LVU1259
 3951 023a 94ED047A 		vldr.32	s14, [r4, #16]
  67:lib/libdaisy/src/util/CpuLoadMeter.h ****                 max_ = currentBlockLoad;
  68:lib/libdaisy/src/util/CpuLoadMeter.h ****             if(currentBlockLoad < min_)
  69:lib/libdaisy/src/util/CpuLoadMeter.h ****                 min_ = currentBlockLoad;
  70:lib/libdaisy/src/util/CpuLoadMeter.h **** 
  71:lib/libdaisy/src/util/CpuLoadMeter.h ****             avg_ = smoothingConstant_ * currentBlockLoad
  72:lib/libdaisy/src/util/CpuLoadMeter.h ****                    + (1.0f - smoothingConstant_) * avg_;
 3952              		.loc 9 72 50 is_stmt 0 view .LVU1260
 3953 023e D4ED056A 		vldr.32	s13, [r4, #20]
  66:lib/libdaisy/src/util/CpuLoadMeter.h ****                 max_ = currentBlockLoad;
 3954              		.loc 9 66 13 view .LVU1261
 3955 0242 F4EEC77A 		vcmpe.f32	s15, s14
  68:lib/libdaisy/src/util/CpuLoadMeter.h ****                 min_ = currentBlockLoad;
 3956              		.loc 9 68 13 view .LVU1262
 3957 0246 94ED037A 		vldr.32	s14, [r4, #12]
  66:lib/libdaisy/src/util/CpuLoadMeter.h ****                 max_ = currentBlockLoad;
 3958              		.loc 9 66 13 view .LVU1263
 3959 024a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  67:lib/libdaisy/src/util/CpuLoadMeter.h ****                 max_ = currentBlockLoad;
 3960              		.loc 9 67 17 is_stmt 1 view .LVU1264
  68:lib/libdaisy/src/util/CpuLoadMeter.h ****                 min_ = currentBlockLoad;
 3961              		.loc 9 68 13 is_stmt 0 view .LVU1265
 3962 024e F4EEC77A 		vcmpe.f32	s15, s14
  71:lib/libdaisy/src/util/CpuLoadMeter.h ****                    + (1.0f - smoothingConstant_) * avg_;
 3963              		.loc 9 71 20 view .LVU1266
 3964 0252 94ED067A 		vldr.32	s14, [r4, #24]
 3965              		.loc 9 72 28 view .LVU1267
 3966 0256 38EE478A 		vsub.f32	s16, s16, s14
  67:lib/libdaisy/src/util/CpuLoadMeter.h ****             if(currentBlockLoad < min_)
 3967              		.loc 9 67 22 view .LVU1268
 3968 025a C8BF     		it	gt
 3969 025c C4ED047A 		vstrgt.32	s15, [r4, #16]
  68:lib/libdaisy/src/util/CpuLoadMeter.h ****                 min_ = currentBlockLoad;
 3970              		.loc 9 68 13 is_stmt 1 view .LVU1269
 3971 0260 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  69:lib/libdaisy/src/util/CpuLoadMeter.h **** 
 3972              		.loc 9 69 17 view .LVU1270
 3973              		.loc 9 72 50 is_stmt 0 view .LVU1271
 3974 0264 28EE268A 		vmul.f32	s16, s16, s13
  69:lib/libdaisy/src/util/CpuLoadMeter.h **** 
 3975              		.loc 9 69 22 view .LVU1272
 3976 0268 48BF     		it	mi
 3977 026a C4ED037A 		vstrmi.32	s15, [r4, #12]
  71:lib/libdaisy/src/util/CpuLoadMeter.h ****                    + (1.0f - smoothingConstant_) * avg_;
 3978              		.loc 9 71 13 is_stmt 1 view .LVU1273
 3979              		.loc 9 72 20 is_stmt 0 view .LVU1274
 3980 026e A7EE878A 		vfma.f32	s16, s15, s14
  71:lib/libdaisy/src/util/CpuLoadMeter.h ****                    + (1.0f - smoothingConstant_) * avg_;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 118


 3981              		.loc 9 71 18 view .LVU1275
 3982 0272 84ED058A 		vstr.32	s16, [r4, #20]
 3983 0276 A9E7     		b	.L227
 3984              	.L255:
 3985              		.align	2
 3986              	.L254:
 3987 0278 00000000 		.word	.LANCHOR19
 3988 027c 00000000 		.word	touch_cv_value
 3989 0280 00000000 		.word	.LANCHOR12
 3990 0284 00000000 		.word	.LANCHOR15
 3991 0288 00000000 		.word	button
 3992 028c 00000000 		.word	.LANCHOR20
 3993 0290 00000000 		.word	.LANCHOR4
 3994 0294 00000000 		.word	.LANCHOR21
 3995 0298 00000000 		.word	arp_pad
 3996 029c 00000000 		.word	.LANCHOR22
 3997 02a0 9A99993E 		.word	1050253722
 3998 02a4 00000000 		.word	.LC0
 3999 02a8 0F000000 		.word	.LC1
 4000 02ac 00000000 		.word	sample_rate
 4001 02b0 00000000 		.word	arp
 4002 02b4 00000000 		.word	modulations
 4003 02b8 00000000 		.word	last_touch_state
 4004 02bc 00000000 		.word	current_touch_state
 4005 02c0 00000000 		.word	.LANCHOR8
 4006 02c4 00000000 		.word	mod_wheel
 4007 02c8 00000000 		.word	.LANCHOR14
 4008 02cc CDCC4C3E 		.word	1045220557
 4009 02d0 00000000 		.word	.LANCHOR23
 4010              	.LBE480:
 4011              	.LBE483:
 4012              		.cfi_endproc
 4013              	.LFE5345:
 4015              		.global	engine_retrigger_phase
 4016              		.global	engine_changed_flag
 4017              		.global	adc_raw_values
 4018              		.global	current_engine_index
 4019              		.global	cpu_meter
 4020              		.global	mix_buffer_aux
 4021              		.global	mix_buffer_out
 4022              		.global	release_time
 4023              		.global	attack_time
 4024              		.global	env_release_val
 4025              		.global	env_attack_val
 4026              		.global	delay_feedback_val
 4027              		.global	delay_mix_val
 4028              		.global	delay_mix_feedback_val
 4029              		.global	delay_time_val
 4030              		.global	morph_knob_val
 4031              		.global	timbre_knob_val
 4032              		.global	harm_knob_val
 4033              		.global	pitch_val
 4034              		.section	.bss._ZZ13AudioCallbackPKfPfjE10was_arp_on,"aw",%nobits
 4035              		.set	.LANCHOR23,. + 0
 4038              	_ZZ13AudioCallbackPKfPfjE10was_arp_on:
 4039 0000 00       		.space	1
 4040              		.section	.bss._ZZ13AudioCallbackPKfPfjE11arp_enabled,"aw",%nobits
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 119


 4041              		.set	.LANCHOR22,. + 0
 4044              	_ZZ13AudioCallbackPKfPfjE11arp_enabled:
 4045 0000 00       		.space	1
 4046              		.section	.bss._ZZ13AudioCallbackPKfPfjE11pad_pressed,"aw",%nobits
 4047              		.set	.LANCHOR21,. + 0
 4050              	_ZZ13AudioCallbackPKfPfjE11pad_pressed:
 4051 0000 00       		.space	1
 4052              		.section	.bss._ZZ13AudioCallbackPKfPfjE17button_press_time,"aw",%nobits
 4053              		.align	2
 4054              		.set	.LANCHOR20,. + 0
 4057              	_ZZ13AudioCallbackPKfPfjE17button_press_time:
 4058 0000 00000000 		.space	4
 4059              		.section	.bss._ZZ15ProcessControlsvE15prev_model_next,"aw",%nobits
 4060              		.set	.LANCHOR6,. + 0
 4063              	_ZZ15ProcessControlsvE15prev_model_next:
 4064 0000 00       		.space	1
 4065              		.section	.bss._ZZ15ProcessControlsvE15prev_model_prev,"aw",%nobits
 4066              		.set	.LANCHOR3,. + 0
 4069              	_ZZ15ProcessControlsvE15prev_model_prev:
 4070 0000 00       		.space	1
 4071              		.section	.bss._ZZ15ProcessControlsvE21prev_engine_for_reset,"aw",%nobits
 4072              		.align	2
 4073              		.set	.LANCHOR7,. + 0
 4076              	_ZZ15ProcessControlsvE21prev_engine_for_reset:
 4077 0000 00000000 		.space	4
 4078              		.section	.bss._ZZ25UpdatePerformanceMonitorsjPfE15display_counter,"aw",%nobits
 4079              		.align	2
 4080              		.set	.LANCHOR18,. + 0
 4083              	_ZZ25UpdatePerformanceMonitorsjPfE15display_counter:
 4084 0000 00000000 		.space	4
 4085              		.section	.bss.adc_raw_values,"aw",%nobits
 4086              		.align	2
 4087              		.set	.LANCHOR2,. + 0
 4090              	adc_raw_values:
 4091 0000 00000000 		.space	48
 4091      00000000 
 4091      00000000 
 4091      00000000 
 4091      00000000 
 4092              		.section	.bss.attack_time,"aw",%nobits
 4093              		.align	2
 4096              	attack_time:
 4097 0000 00000000 		.space	4
 4098              		.section	.bss.cpu_meter,"aw",%nobits
 4099              		.align	2
 4100              		.set	.LANCHOR19,. + 0
 4103              	cpu_meter:
 4104 0000 00000000 		.space	28
 4104      00000000 
 4104      00000000 
 4104      00000000 
 4104      00000000 
 4105              		.section	.bss.current_engine_index,"aw",%nobits
 4106              		.align	2
 4107              		.set	.LANCHOR4,. + 0
 4110              	current_engine_index:
 4111 0000 00000000 		.space	4
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 120


 4112              		.section	.bss.delay_feedback_val,"aw",%nobits
 4113              		.align	2
 4114              		.set	.LANCHOR15,. + 0
 4117              	delay_feedback_val:
 4118 0000 00000000 		.space	4
 4119              		.section	.bss.delay_mix_feedback_val,"aw",%nobits
 4120              		.align	2
 4121              		.set	.LANCHOR9,. + 0
 4124              	delay_mix_feedback_val:
 4125 0000 00000000 		.space	4
 4126              		.section	.bss.delay_mix_val,"aw",%nobits
 4127              		.align	2
 4128              		.set	.LANCHOR14,. + 0
 4131              	delay_mix_val:
 4132 0000 00000000 		.space	4
 4133              		.section	.bss.delay_time_val,"aw",%nobits
 4134              		.align	2
 4135              		.set	.LANCHOR8,. + 0
 4138              	delay_time_val:
 4139 0000 00000000 		.space	4
 4140              		.section	.bss.engine_changed_flag,"aw",%nobits
 4141              		.set	.LANCHOR5,. + 0
 4144              	engine_changed_flag:
 4145 0000 00       		.space	1
 4146              		.section	.bss.engine_retrigger_phase,"aw",%nobits
 4147              		.align	2
 4150              	engine_retrigger_phase:
 4151 0000 00000000 		.space	4
 4152              		.section	.bss.env_attack_val,"aw",%nobits
 4153              		.align	2
 4154              		.set	.LANCHOR0,. + 0
 4157              	env_attack_val:
 4158 0000 00000000 		.space	4
 4159              		.section	.bss.env_release_val,"aw",%nobits
 4160              		.align	2
 4161              		.set	.LANCHOR1,. + 0
 4164              	env_release_val:
 4165 0000 00000000 		.space	4
 4166              		.section	.bss.harm_knob_val,"aw",%nobits
 4167              		.align	2
 4168              		.set	.LANCHOR11,. + 0
 4171              	harm_knob_val:
 4172 0000 00000000 		.space	4
 4173              		.section	.bss.mix_buffer_aux,"aw",%nobits
 4174              		.align	2
 4175              		.set	.LANCHOR17,. + 0
 4178              	mix_buffer_aux:
 4179 0000 00000000 		.space	64
 4179      00000000 
 4179      00000000 
 4179      00000000 
 4179      00000000 
 4180              		.section	.bss.mix_buffer_out,"aw",%nobits
 4181              		.align	2
 4182              		.set	.LANCHOR16,. + 0
 4185              	mix_buffer_out:
 4186 0000 00000000 		.space	64
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 121


 4186      00000000 
 4186      00000000 
 4186      00000000 
 4186      00000000 
 4187              		.section	.bss.morph_knob_val,"aw",%nobits
 4188              		.align	2
 4189              		.set	.LANCHOR12,. + 0
 4192              	morph_knob_val:
 4193 0000 00000000 		.space	4
 4194              		.section	.bss.pitch_val,"aw",%nobits
 4195              		.align	2
 4196              		.set	.LANCHOR13,. + 0
 4199              	pitch_val:
 4200 0000 00000000 		.space	4
 4201              		.section	.bss.release_time,"aw",%nobits
 4202              		.align	2
 4205              	release_time:
 4206 0000 00000000 		.space	4
 4207              		.section	.bss.timbre_knob_val,"aw",%nobits
 4208              		.align	2
 4209              		.set	.LANCHOR10,. + 0
 4212              	timbre_knob_val:
 4213 0000 00000000 		.space	4
 4214              		.text
 4215              	.Letext0:
 4216              		.file 12 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/machine/_default_types.h"
 4217              		.file 13 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/_stdint.h"
 4218              		.file 14 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdint.h"
 4219              		.file 15 "/Library/DaisyToolchain/0.2.0/arm/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 4220              		.file 16 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cmath"
 4221              		.file 17 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h"
 4222              		.file 18 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdlib"
 4223              		.file 19 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdint"
 4224              		.file 20 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/arm-none-eabi/thumb/v
 4225              		.file 21 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/type_traits"
 4226              		.file 22 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/debug/debug.h"
 4227              		.file 23 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/algorithmfwd.h"
 4228              		.file 24 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h"
 4229              		.file 25 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/exception_ptr.h"
 4230              		.file 26 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdarg"
 4231              		.file 27 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdio"
 4232              		.file 28 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstring"
 4233              		.file 29 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cwchar"
 4234              		.file 30 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/clocale"
 4235              		.file 31 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/basic_string.h"
 4236              		.file 32 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_iterator.h"
 4237              		.file 33 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/array"
 4238              		.file 34 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/uses_allocator.h
 4239              		.file 35 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/tuple"
 4240              		.file 36 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/std_function.h"
 4241              		.file 37 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/functional"
 4242              		.file 38 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_function.h"
 4243              		.file 39 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/refwrap.h"
 4244              		.file 40 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/predefined_ops.h
 4245              		.file 41 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/_types.h"
 4246              		.file 42 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/reent.h"
 4247              		.file 43 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/lock.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 122


 4248              		.file 44 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/math.h"
 4249              		.file 45 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdlib.h"
 4250              		.file 46 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/math.h"
 4251              		.file 47 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/stdlib.h"
 4252              		.file 48 "lib/libdaisy/src/daisy_core.h"
 4253              		.file 49 "lib/libdaisy/src/per/tim.h"
 4254              		.file 50 "lib/libdaisy/src/sys/system.h"
 4255              		.file 51 "lib/libdaisy/src/per/qspi.h"
 4256              		.file 52 "lib/libdaisy/src/per/dac.h"
 4257              		.file 53 "lib/libdaisy/src/per/sai.h"
 4258              		.file 54 "lib/libdaisy/src/hid/audio.h"
 4259              		.file 55 "lib/libdaisy/src/per/adc.h"
 4260              		.file 56 "lib/libdaisy/src/hid/usb.h"
 4261              		.file 57 "lib/libdaisy/src/hid/logger_impl.h"
 4262              		.file 58 "lib/libdaisy/src/util/wav_format.h"
 4263              		.file 59 "lib/libdaisy/src/hid/logger.h"
 4264              		.file 60 "lib/libdaisy/src/per/gpio.h"
 4265              		.file 61 "lib/libdaisy/src/dev/sdram.h"
 4266              		.file 62 "/Library/DaisyToolchain/0.2.0/arm/lib/gcc/arm-none-eabi/10.3.1/include/stdarg.h"
 4267              		.file 63 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdio.h"
 4268              		.file 64 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/string.h"
 4269              		.file 65 "lib/DaisySP/Source/Control/adenv.h"
 4270              		.file 66 "lib/DaisySP/Source/Utility/metro.h"
 4271              		.file 67 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/wchar.h"
 4272              		.file 68 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/locale.h"
 4273              		.file 69 "eurorack/stmlib/stmlib.h"
 4274              		.file 70 "eurorack/stmlib/dsp/filter.h"
 4275              		.file 71 "eurorack/stmlib/dsp/limiter.h"
 4276              		.file 72 "eurorack/stmlib/utils/buffer_allocator.h"
 4277              		.file 73 "eurorack/stmlib/dsp/hysteresis_quantizer.h"
 4278              		.file 74 "eurorack/plaits/dsp/dsp.h"
 4279              		.file 75 "eurorack/plaits/dsp/engine/engine.h"
 4280              		.file 76 "eurorack/plaits/dsp/engine/additive_engine.h"
 4281              		.file 77 "eurorack/plaits/dsp/oscillator/oscillator.h"
 4282              		.file 78 "eurorack/plaits/dsp/engine/chord_engine.h"
 4283              		.file 79 "eurorack/plaits/dsp/physical_modelling/resonator.h"
 4284              		.file 80 "eurorack/plaits/dsp/engine/particle_engine.h"
 4285              		.file 81 "eurorack/plaits/dsp/physical_modelling/string.h"
 4286              		.file 82 "eurorack/plaits/dsp/engine/string_engine.h"
 4287              		.file 83 "eurorack/plaits/dsp/engine/swarm_engine.h"
 4288              		.file 84 "eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h"
 4289              		.file 85 "eurorack/plaits/dsp/envelope.h"
 4290              		.file 86 "eurorack/plaits/dsp/fx/low_pass_gate.h"
 4291              		.file 87 "eurorack/plaits/dsp/voice.h"
 4292              		.file 88 "eurorack/plaits/dsp/physical_modelling/delay_line.h"
 4293              		.file 89 "mpr121_daisy.h"
 4294              		.file 90 "Arpeggiator.h"
 4295              		.file 91 "Thaumazein.h"
 4296              		.file 92 "lib/libdaisy/src/dev/sr_595.h"
 4297              		.file 93 "<built-in>"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 123


DEFINED SYMBOLS
                            *ABS*:0000000000000000 AudioProcessor.cpp
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:19     .text._ZN13VoiceEnvelope13SetAttackTimeEf:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:25     .text._ZN13VoiceEnvelope13SetAttackTimeEf:0000000000000000 _ZN13VoiceEnvelope13SetAttackTimeEf
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:142    .text._ZN13VoiceEnvelope13SetAttackTimeEf:00000000000000a4 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:154    .text._ZN13VoiceEnvelope14SetReleaseTimeEf:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:160    .text._ZN13VoiceEnvelope14SetReleaseTimeEf:0000000000000000 _ZN13VoiceEnvelope14SetReleaseTimeEf
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:222    .text._ZN13VoiceEnvelope7TriggerEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:228    .text._ZN13VoiceEnvelope7TriggerEv:0000000000000000 _ZN13VoiceEnvelope7TriggerEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:326    .text._ZN13VoiceEnvelope7ReleaseEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:332    .text._ZN13VoiceEnvelope7ReleaseEv:0000000000000000 _ZN13VoiceEnvelope7ReleaseEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:411    .text._ZN13VoiceEnvelope7ProcessEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:417    .text._ZN13VoiceEnvelope7ProcessEv:0000000000000000 _ZN13VoiceEnvelope7ProcessEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:438    .text._ZN13VoiceEnvelope7ProcessEv:0000000000000012 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:668    .text._ZN13VoiceEnvelope5ResetEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:674    .text._ZN13VoiceEnvelope5ResetEv:0000000000000000 _ZN13VoiceEnvelope5ResetEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:713    .text._Z13ProcessVoicesv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:719    .text._Z13ProcessVoicesv:0000000000000000 _Z13ProcessVoicesv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:849    .text._Z13ProcessVoicesv:0000000000000080 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:859    .text._Z12ProcessVoiceif:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:865    .text._Z12ProcessVoiceif:0000000000000000 _Z12ProcessVoiceif
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:885    .text._Z12ProcessVoiceif:000000000000000c $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:890    .text._Z15ProcessControlsv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:896    .text._Z15ProcessControlsv:0000000000000000 _Z15ProcessControlsv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:1330   .text._Z15ProcessControlsv:0000000000000170 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:1363   .text._Z14ReadKnobValuesv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:1369   .text._Z14ReadKnobValuesv:0000000000000000 _Z14ReadKnobValuesv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:1517   .text._Z14ReadKnobValuesv:000000000000004c $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:1539   .text._Z16ResetVoiceStatesv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:1545   .text._Z16ResetVoiceStatesv:0000000000000000 _Z16ResetVoiceStatesv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:1609   .text._Z16ResetVoiceStatesv:0000000000000030 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:1616   .text._Z23DetermineEngineSettingsv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:1622   .text._Z23DetermineEngineSettingsv:0000000000000000 _Z23DetermineEngineSettingsv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:1638   .text._Z23DetermineEngineSettingsv:0000000000000008 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:1643   .text._Z16HandleTouchInputibi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:1649   .text._Z16HandleTouchInputibi:0000000000000000 _Z16HandleTouchInputibi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:1924   .text._Z16HandleTouchInputibi:00000000000000fc $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:1941   .text._Z22ConfigureDelaySettingsv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:1947   .text._Z22ConfigureDelaySettingsv:0000000000000000 _Z22ConfigureDelaySettingsv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:2008   .text._Z22ConfigureDelaySettingsv:000000000000002c $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:2018   .text._Z22PrepareVoiceParametersibib:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:2024   .text._Z22PrepareVoiceParametersibib:0000000000000000 _Z22PrepareVoiceParametersibib
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:2487   .text._Z22PrepareVoiceParametersibib:00000000000001cc $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:2509   .text._Z21ProcessVoiceEnvelopesb:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:2515   .text._Z21ProcessVoiceEnvelopesb:0000000000000000 _Z21ProcessVoiceEnvelopesb
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:2719   .text._Z21ProcessVoiceEnvelopesb:00000000000000e0 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:2733   .text._Z18ProcessAudioOutputPfjf:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:2739   .text._Z18ProcessAudioOutputPfjf:0000000000000000 _Z18ProcessAudioOutputPfjf
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:3201   .text._Z18ProcessAudioOutputPfjf:0000000000000178 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:3210   .text._Z25UpdatePerformanceMonitorsjPf:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:3216   .text._Z25UpdatePerformanceMonitorsjPf:0000000000000000 _Z25UpdatePerformanceMonitorsjPf
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:3281   .text._Z25UpdatePerformanceMonitorsjPf:0000000000000040 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:3295   .text._Z13AudioCallbackPKfPfj:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:3301   .text._Z13AudioCallbackPKfPfj:0000000000000000 _Z13AudioCallbackPKfPfj
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:3987   .text._Z13AudioCallbackPKfPfj:0000000000000278 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4150   .bss.engine_retrigger_phase:0000000000000000 engine_retrigger_phase
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4144   .bss.engine_changed_flag:0000000000000000 engine_changed_flag
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 124


/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4090   .bss.adc_raw_values:0000000000000000 adc_raw_values
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4110   .bss.current_engine_index:0000000000000000 current_engine_index
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4103   .bss.cpu_meter:0000000000000000 cpu_meter
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4178   .bss.mix_buffer_aux:0000000000000000 mix_buffer_aux
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4185   .bss.mix_buffer_out:0000000000000000 mix_buffer_out
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4205   .bss.release_time:0000000000000000 release_time
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4096   .bss.attack_time:0000000000000000 attack_time
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4164   .bss.env_release_val:0000000000000000 env_release_val
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4157   .bss.env_attack_val:0000000000000000 env_attack_val
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4117   .bss.delay_feedback_val:0000000000000000 delay_feedback_val
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4131   .bss.delay_mix_val:0000000000000000 delay_mix_val
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4124   .bss.delay_mix_feedback_val:0000000000000000 delay_mix_feedback_val
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4138   .bss.delay_time_val:0000000000000000 delay_time_val
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4192   .bss.morph_knob_val:0000000000000000 morph_knob_val
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4212   .bss.timbre_knob_val:0000000000000000 timbre_knob_val
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4171   .bss.harm_knob_val:0000000000000000 harm_knob_val
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4199   .bss.pitch_val:0000000000000000 pitch_val
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4038   .bss._ZZ13AudioCallbackPKfPfjE10was_arp_on:0000000000000000 _ZZ13AudioCallbackPKfPfjE10was_arp_on
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4039   .bss._ZZ13AudioCallbackPKfPfjE10was_arp_on:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4044   .bss._ZZ13AudioCallbackPKfPfjE11arp_enabled:0000000000000000 _ZZ13AudioCallbackPKfPfjE11arp_enabled
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4045   .bss._ZZ13AudioCallbackPKfPfjE11arp_enabled:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4050   .bss._ZZ13AudioCallbackPKfPfjE11pad_pressed:0000000000000000 _ZZ13AudioCallbackPKfPfjE11pad_pressed
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4051   .bss._ZZ13AudioCallbackPKfPfjE11pad_pressed:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4053   .bss._ZZ13AudioCallbackPKfPfjE17button_press_time:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4057   .bss._ZZ13AudioCallbackPKfPfjE17button_press_time:0000000000000000 _ZZ13AudioCallbackPKfPfjE17button_press_time
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4063   .bss._ZZ15ProcessControlsvE15prev_model_next:0000000000000000 _ZZ15ProcessControlsvE15prev_model_next
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4064   .bss._ZZ15ProcessControlsvE15prev_model_next:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4069   .bss._ZZ15ProcessControlsvE15prev_model_prev:0000000000000000 _ZZ15ProcessControlsvE15prev_model_prev
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4070   .bss._ZZ15ProcessControlsvE15prev_model_prev:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4072   .bss._ZZ15ProcessControlsvE21prev_engine_for_reset:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4076   .bss._ZZ15ProcessControlsvE21prev_engine_for_reset:0000000000000000 _ZZ15ProcessControlsvE21prev_engine_for_reset
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4079   .bss._ZZ25UpdatePerformanceMonitorsjPfE15display_counter:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4083   .bss._ZZ25UpdatePerformanceMonitorsjPfE15display_counter:0000000000000000 _ZZ25UpdatePerformanceMonitorsjPfE15display_counter
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4086   .bss.adc_raw_values:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4093   .bss.attack_time:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4099   .bss.cpu_meter:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4106   .bss.current_engine_index:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4113   .bss.delay_feedback_val:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4120   .bss.delay_mix_feedback_val:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4127   .bss.delay_mix_val:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4134   .bss.delay_time_val:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4145   .bss.engine_changed_flag:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4147   .bss.engine_retrigger_phase:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4153   .bss.env_attack_val:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4160   .bss.env_release_val:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4167   .bss.harm_knob_val:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4174   .bss.mix_buffer_aux:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4181   .bss.mix_buffer_out:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4188   .bss.morph_knob_val:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4195   .bss.pitch_val:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4202   .bss.release_time:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:4208   .bss.timbre_knob_val:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:443    .text._ZN13VoiceEnvelope7ProcessEv:0000000000000017 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s:443    .text._ZN13VoiceEnvelope7ProcessEv:0000000000000018 $t

UNDEFINED SYMBOLS
voice_envelopes
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccG69NvO.s 			page 125


voice_values
voice_active
_ZN5daisy6Switch8DebounceEv
_ZN5daisy13AnalogControl7ProcessEv
_ZNK5daisy9AdcHandle8GetFloatEh
memcpy
button
delay_time_knob
delay_mix_feedback_knob
env_release_knob
env_attack_knob
timbre_knob
harmonics_knob
morph_knob
pitch_knob
arp_pad
model_prev_pad
model_next_pad
mod_wheel
hw
MAX_ENGINE_INDEX
voice_note
modulations
_Z18FindAvailableVoicei
_Z14AssignMonoNotef
_Z9FindVoicefi
current_touch_state
kTouchMidiNotes
last_touch_state
delay
_ZN6plaits5Voice6RenderERKNS_5PatchERKNS_11ModulationsEPNS0_5FrameEj
memset
patches
voices
output_buffers
smoothed_output_level
update_display
_ZN5daisy6System7GetTickEv
_ZN5daisy6System6GetNowEv
_ZN5daisy6LoggerILNS_17LoggerDestinationE1EE9PrintLineEPKcz
_ZN11Arpeggiator4InitEf
_ZN11Arpeggiator8SetNotesEPii
powf
_ZN11Arpeggiator12SetMainTempoEf
_ZN11Arpeggiator18SetPolyrhythmRatioEf
_ZN11Arpeggiator7ProcessEj
touch_cv_value
sample_rate
arp
