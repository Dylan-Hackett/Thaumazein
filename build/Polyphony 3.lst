ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"Polyphony.cpp"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text._ZN15PolyphonyEngineD2Ev,"ax",%progbits
  19              		.align	1
  20              		.global	_ZN15PolyphonyEngineD2Ev
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	_ZN15PolyphonyEngineD2Ev:
  26              	.LVL0:
  27              	.LFB5800:
  28              		.file 1 "Polyphony.cpp"
   1:Polyphony.cpp **** #include "Thaumazein.h"
   2:Polyphony.cpp **** #include "Polyphony.h"
   3:Polyphony.cpp **** #include "stmlib/utils/buffer_allocator.h"
   4:Polyphony.cpp **** 
   5:Polyphony.cpp **** DSY_SDRAM_BSS char shared_buffer[262144];
   6:Polyphony.cpp **** 
   7:Polyphony.cpp **** const int MAX_ENGINE_INDEX = 12;
   8:Polyphony.cpp **** 
   9:Polyphony.cpp **** 
  10:Polyphony.cpp **** PolyphonyEngine poly_engine;
  11:Polyphony.cpp **** 
  12:Polyphony.cpp **** const float PolyphonyEngine::kTouchMidiNotes_[12] = {
  13:Polyphony.cpp ****     40.0f, 41.0f, 43.0f, 45.0f, 47.0f, 48.0f, // E2, F2, G2, A2, B2, C3
  14:Polyphony.cpp ****     50.0f, 52.0f, 53.0f, 55.0f, 57.0f, 59.0f  // D3, E3, F3, G3, A3, B3
  15:Polyphony.cpp **** };
  16:Polyphony.cpp **** 
  17:Polyphony.cpp **** PolyphonyEngine::PolyphonyEngine() : allocator_(nullptr), hw_ptr_(nullptr), engine_changed_flag_(fa
  18:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
  19:Polyphony.cpp ****     memset(voice_note_, 0, sizeof(voice_note_));
  20:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
  21:Polyphony.cpp ****     memset(mix_buffer_aux_, 0, sizeof(mix_buffer_aux_));
  22:Polyphony.cpp **** }
  23:Polyphony.cpp **** 
  24:Polyphony.cpp **** PolyphonyEngine::~PolyphonyEngine() {
  29              		.loc 1 24 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LBB1052:
  25:Polyphony.cpp ****     if (allocator_) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 2


  34              		.loc 1 25 5 view .LVU1
  35              		.loc 1 25 9 is_stmt 0 view .LVU2
  36 0000 00F54053 		add	r3, r0, #12288
  37              	.LBE1052:
  24:Polyphony.cpp ****     if (allocator_) {
  38              		.loc 1 24 1 view .LVU3
  39 0004 10B5     		push	{r4, lr}
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 4, -8
  42              		.cfi_offset 14, -4
  24:Polyphony.cpp ****     if (allocator_) {
  43              		.loc 1 24 1 view .LVU4
  44 0006 0446     		mov	r4, r0
  45              	.LBB1054:
  46              		.loc 1 25 9 view .LVU5
  47 0008 D3F8240D 		ldr	r0, [r3, #3364]
  48              	.LVL1:
  49              		.loc 1 25 5 view .LVU6
  50 000c 10B1     		cbz	r0, .L2
  26:Polyphony.cpp ****         delete allocator_;
  51              		.loc 1 26 9 is_stmt 1 view .LVU7
  52              	.LVL2:
  53              	.LBB1053:
  54              	.LBI1053:
  55              		.file 2 "eurorack/stmlib/utils/buffer_allocator.h"
   1:eurorack/stmlib/utils/buffer_allocator.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/stmlib/utils/buffer_allocator.h **** //
   3:eurorack/stmlib/utils/buffer_allocator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/utils/buffer_allocator.h **** //
   5:eurorack/stmlib/utils/buffer_allocator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/utils/buffer_allocator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/utils/buffer_allocator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/utils/buffer_allocator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/utils/buffer_allocator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/utils/buffer_allocator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/utils/buffer_allocator.h **** // 
  12:eurorack/stmlib/utils/buffer_allocator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/utils/buffer_allocator.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/utils/buffer_allocator.h **** // 
  15:eurorack/stmlib/utils/buffer_allocator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/utils/buffer_allocator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/utils/buffer_allocator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/utils/buffer_allocator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/utils/buffer_allocator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/utils/buffer_allocator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/utils/buffer_allocator.h **** // THE SOFTWARE.
  22:eurorack/stmlib/utils/buffer_allocator.h **** // 
  23:eurorack/stmlib/utils/buffer_allocator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/utils/buffer_allocator.h **** //
  25:eurorack/stmlib/utils/buffer_allocator.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/utils/buffer_allocator.h **** //
  27:eurorack/stmlib/utils/buffer_allocator.h **** // Stream buffer for serialization.
  28:eurorack/stmlib/utils/buffer_allocator.h **** 
  29:eurorack/stmlib/utils/buffer_allocator.h **** #ifndef STMLIB_UTILS_BUFFER_ALLOCATOR_H_
  30:eurorack/stmlib/utils/buffer_allocator.h **** #define STMLIB_UTILS_BUFFER_ALLOCATOR_H_
  31:eurorack/stmlib/utils/buffer_allocator.h **** 
  32:eurorack/stmlib/utils/buffer_allocator.h **** #include "stmlib/stmlib.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 3


  33:eurorack/stmlib/utils/buffer_allocator.h **** 
  34:eurorack/stmlib/utils/buffer_allocator.h **** namespace stmlib {
  35:eurorack/stmlib/utils/buffer_allocator.h **** 
  36:eurorack/stmlib/utils/buffer_allocator.h **** class BufferAllocator {
  37:eurorack/stmlib/utils/buffer_allocator.h ****  public:
  38:eurorack/stmlib/utils/buffer_allocator.h ****   BufferAllocator() { }
  39:eurorack/stmlib/utils/buffer_allocator.h ****   ~BufferAllocator() { }
  56              		.loc 2 39 3 view .LVU8
  57              		.loc 2 39 3 is_stmt 0 view .LVU9
  58              	.LBE1053:
  59              		.loc 1 26 16 view .LVU10
  60 000e 1021     		movs	r1, #16
  61 0010 FFF7FEFF 		bl	_ZdlPvj
  62              	.LVL3:
  27:Polyphony.cpp ****         allocator_ = nullptr;
  63              		.loc 1 27 9 is_stmt 1 view .LVU11
  64              	.L2:
  65              	.LBE1054:
  28:Polyphony.cpp ****     }
  29:Polyphony.cpp **** }
  66              		.loc 1 29 1 is_stmt 0 view .LVU12
  67 0014 2046     		mov	r0, r4
  68 0016 10BD     		pop	{r4, pc}
  69              		.loc 1 29 1 view .LVU13
  70              		.cfi_endproc
  71              	.LFE5800:
  73              		.global	_ZN15PolyphonyEngineD1Ev
  74              		.thumb_set _ZN15PolyphonyEngineD1Ev,_ZN15PolyphonyEngineD2Ev
  75              		.section	.text._ZN13VoiceEnvelope7TriggerEv,"axG",%progbits,_ZN13VoiceEnvelope7TriggerEv,comdat
  76              		.align	1
  77              		.weak	_ZN13VoiceEnvelope7TriggerEv
  78              		.syntax unified
  79              		.thumb
  80              		.thumb_func
  82              	_ZN13VoiceEnvelope7TriggerEv:
  83              	.LVL4:
  84              	.LFB5476:
  85              		.file 3 "VoiceEnvelope.h"
   1:VoiceEnvelope.h **** #pragma once
   2:VoiceEnvelope.h **** #include <algorithm>
   3:VoiceEnvelope.h **** 
   4:VoiceEnvelope.h **** // Simple envelope for each polyphonic voice
   5:VoiceEnvelope.h **** class VoiceEnvelope {
   6:VoiceEnvelope.h **** public:
   7:VoiceEnvelope.h ****     enum EnvState {
   8:VoiceEnvelope.h ****         ENV_IDLE,
   9:VoiceEnvelope.h ****         ENV_ATTACK,
  10:VoiceEnvelope.h ****         ENV_SUSTAIN,
  11:VoiceEnvelope.h ****         ENV_DECAY,
  12:VoiceEnvelope.h ****         ENV_RESET
  13:VoiceEnvelope.h ****     };
  14:VoiceEnvelope.h **** 
  15:VoiceEnvelope.h ****     enum EnvMode {
  16:VoiceEnvelope.h ****         MODE_AR,   // Attack-Release
  17:VoiceEnvelope.h ****         MODE_ASR   // Attack-Sustain-Release
  18:VoiceEnvelope.h ****     };
  19:VoiceEnvelope.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 4


  20:VoiceEnvelope.h ****     VoiceEnvelope() :
  21:VoiceEnvelope.h ****         current_state(ENV_IDLE),
  22:VoiceEnvelope.h ****         mode(MODE_ASR),
  23:VoiceEnvelope.h ****         current_value(0.0f),
  24:VoiceEnvelope.h ****         attack_curve_coefficient(0.5f),
  25:VoiceEnvelope.h ****         release_curve_coefficient(0.5f),
  26:VoiceEnvelope.h ****         phase(0),
  27:VoiceEnvelope.h ****         decay_start_level(0.0f)
  28:VoiceEnvelope.h ****     {}
  29:VoiceEnvelope.h **** 
  30:VoiceEnvelope.h ****     void Init(float sample_rate) {
  31:VoiceEnvelope.h ****         time_range_2x = 2.0f * 4.0f * sample_rate;  // 4s max time
  32:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
  33:VoiceEnvelope.h ****         min_decay_time_a = 0.4f * sample_rate;      // 400ms min decay A
  34:VoiceEnvelope.h ****         min_decay_time_b = 0.0001f * sample_rate;    // 0.1ms min decay B (pulse-like release)
  35:VoiceEnvelope.h ****         reset_time = 0.008f * sample_rate;          // 8ms reset time
  36:VoiceEnvelope.h ****         reset_coefficient = 1.0f / reset_time;
  37:VoiceEnvelope.h ****         
  38:VoiceEnvelope.h ****         // Default curves
  39:VoiceEnvelope.h ****         SetAttackCurve(0.5f);
  40:VoiceEnvelope.h ****         SetReleaseCurve(0.5f);
  41:VoiceEnvelope.h ****     }
  42:VoiceEnvelope.h **** 
  43:VoiceEnvelope.h ****     void SetMode(EnvMode new_mode) {
  44:VoiceEnvelope.h ****         mode = new_mode;
  45:VoiceEnvelope.h ****     }
  46:VoiceEnvelope.h **** 
  47:VoiceEnvelope.h ****     // Original combined shape method for backward compatibility
  48:VoiceEnvelope.h ****     void SetShape(float value) {
  49:VoiceEnvelope.h ****         float curve;
  50:VoiceEnvelope.h ****         if (value < 0.5f) {
  51:VoiceEnvelope.h ****             attack_time = min_attack_time;
  52:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * value * value) + min_decay_time_a;
  53:VoiceEnvelope.h ****             curve = value * 0.15f;
  54:VoiceEnvelope.h ****         } else {
  55:VoiceEnvelope.h ****             float norm_val = 2.0f * value - 1.0f;
  56:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(time_range_2x * norm_val * norm_val) + min_attack_tim
  57:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
  58:VoiceEnvelope.h ****             curve = 0.5f;
  59:VoiceEnvelope.h ****         }
  60:VoiceEnvelope.h ****         attack_coefficient = 1.0f / attack_time;
  61:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
  62:VoiceEnvelope.h ****         SetAttackCurve(curve);
  63:VoiceEnvelope.h ****         SetReleaseCurve(curve);
  64:VoiceEnvelope.h ****     }
  65:VoiceEnvelope.h ****     
  66:VoiceEnvelope.h ****     // New methods for separate attack and release control
  67:VoiceEnvelope.h ****     void SetAttackTime(float value) {
  68:VoiceEnvelope.h ****         // Map 0-1 value to attack time (exponential scaling)
  69:VoiceEnvelope.h ****         // value³ for finer control at shorter settings
  70:VoiceEnvelope.h ****         float value_cubed = value * value * value;
  71:VoiceEnvelope.h ****         
  72:VoiceEnvelope.h ****         // Special handling for super punchy attacks at low values
  73:VoiceEnvelope.h ****         if (value < 0.1f) {
  74:VoiceEnvelope.h ****             // Extra fast attacks at the beginning of the range
  75:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(min_attack_time + 
  76:VoiceEnvelope.h ****                                            (min_attack_time * 9.0f * value / 0.1f));
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 5


  77:VoiceEnvelope.h ****         } else {
  78:VoiceEnvelope.h ****             // Normal range from 2ms to 4 seconds
  79:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(0.002f * time_range_2x/8.0f + 
  80:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
  81:VoiceEnvelope.h ****         }
  82:VoiceEnvelope.h ****         
  83:VoiceEnvelope.h ****         attack_coefficient = 1.0f / attack_time;
  84:VoiceEnvelope.h ****         
  85:VoiceEnvelope.h ****         // Make curve more exponential for faster attacks
  86:VoiceEnvelope.h ****         if (value < 0.3f) {
  87:VoiceEnvelope.h ****             // More exponential curve for punchy attacks
  88:VoiceEnvelope.h ****             SetAttackCurve(0.7f + (0.3f - value)); // 0.7 to 1.0 range for punchier curve
  89:VoiceEnvelope.h ****         } else {
  90:VoiceEnvelope.h ****             // Normal curve
  91:VoiceEnvelope.h ****             SetAttackCurve(0.5f);
  92:VoiceEnvelope.h ****         }
  93:VoiceEnvelope.h ****     }
  94:VoiceEnvelope.h ****     
  95:VoiceEnvelope.h ****     void SetReleaseTime(float value) {
  96:VoiceEnvelope.h ****         // Map 0-1 value to release time (exponential scaling)
  97:VoiceEnvelope.h ****         // value³ for finer control at shorter settings
  98:VoiceEnvelope.h ****         float value_cubed = value * value * value;
  99:VoiceEnvelope.h ****         
 100:VoiceEnvelope.h ****         // Release time ranges from min_decay_time_b to 8 seconds
 101:VoiceEnvelope.h ****         decay_time = static_cast<size_t>(min_decay_time_b + 
 102:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 103:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
 104:VoiceEnvelope.h ****         
 105:VoiceEnvelope.h ****         // Use consistent release curve regardless of release time
 106:VoiceEnvelope.h ****         SetReleaseCurve(0.5f);
 107:VoiceEnvelope.h ****     }
 108:VoiceEnvelope.h ****     
 109:VoiceEnvelope.h ****     void SetAttackCurve(float value) {
 110:VoiceEnvelope.h ****         float cu = value - 0.5f;
 111:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
 112:VoiceEnvelope.h ****     }
 113:VoiceEnvelope.h ****     
 114:VoiceEnvelope.h ****     void SetReleaseCurve(float value) {
 115:VoiceEnvelope.h ****         float cu = value - 0.5f;
 116:VoiceEnvelope.h ****         release_curve_coefficient = 128.0f * cu * cu;
 117:VoiceEnvelope.h ****     }
 118:VoiceEnvelope.h **** 
 119:VoiceEnvelope.h ****     void Trigger() {
  86              		.loc 3 119 10 is_stmt 1 view -0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              		@ link register save eliminated.
 120:VoiceEnvelope.h ****         switch (current_state) {
  91              		.loc 3 120 9 view .LVU15
  92              		.loc 3 120 17 is_stmt 0 view .LVU16
  93 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
  94              		.loc 3 120 9 view .LVU17
  95 0002 13B1     		cbz	r3, .L7
  96 0004 032B     		cmp	r3, #3
  97 0006 04D0     		beq	.L8
  98 0008 7047     		bx	lr
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 6


  99              	.L7:
 121:VoiceEnvelope.h ****             case ENV_IDLE:
 100              		.loc 3 121 13 is_stmt 1 view .LVU18
 122:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 101              		.loc 3 122 17 view .LVU19
 102              		.loc 3 122 31 is_stmt 0 view .LVU20
 103 000a 0122     		movs	r2, #1
 123:VoiceEnvelope.h ****                 phase = 0;
 104              		.loc 3 123 23 view .LVU21
 105 000c C363     		str	r3, [r0, #60]
 122:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 106              		.loc 3 122 31 view .LVU22
 107 000e 0270     		strb	r2, [r0]
 108              		.loc 3 123 17 is_stmt 1 view .LVU23
 124:VoiceEnvelope.h ****                 break;
 109              		.loc 3 124 17 view .LVU24
 110 0010 7047     		bx	lr
 111              	.L8:
 112              	.LVL5:
 113              	.LBB1059:
 114              	.LBI1059:
 119:VoiceEnvelope.h ****         switch (current_state) {
 115              		.loc 3 119 10 view .LVU25
 116              	.LBB1060:
 125:VoiceEnvelope.h ****             case ENV_DECAY:
 117              		.loc 3 125 13 view .LVU26
 126:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 118              		.loc 3 126 17 view .LVU27
 119              	.LBB1061:
 120              	.LBB1062:
 127:VoiceEnvelope.h ****                 phase = CalculateAttackPhase(current_value);
 128:VoiceEnvelope.h ****                 break;
 129:VoiceEnvelope.h ****             default:
 130:VoiceEnvelope.h ****                 break;
 131:VoiceEnvelope.h ****         }
 132:VoiceEnvelope.h ****     }
 133:VoiceEnvelope.h **** 
 134:VoiceEnvelope.h ****     void Release() {
 135:VoiceEnvelope.h ****         switch (current_state) {
 136:VoiceEnvelope.h ****             case ENV_ATTACK:
 137:VoiceEnvelope.h ****                 // Preserve the attack curve character when transitioning to release
 138:VoiceEnvelope.h ****                 // This decouples release time from affecting attack punchiness
 139:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(static_cast<float>(phase) * attack_coeffic
 140:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 141:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 142:VoiceEnvelope.h ****                 break;
 143:VoiceEnvelope.h ****             case ENV_SUSTAIN:
 144:VoiceEnvelope.h ****                 phase = 0;
 145:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 146:VoiceEnvelope.h ****                 break;
 147:VoiceEnvelope.h ****             default:
 148:VoiceEnvelope.h ****                 break;
 149:VoiceEnvelope.h ****         }
 150:VoiceEnvelope.h ****     }
 151:VoiceEnvelope.h **** 
 152:VoiceEnvelope.h ****     float Process() {
 153:VoiceEnvelope.h ****         float ph;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 7


 154:VoiceEnvelope.h ****         switch (current_state) {
 155:VoiceEnvelope.h ****             case ENV_IDLE:
 156:VoiceEnvelope.h ****                 current_value = 0.0f;
 157:VoiceEnvelope.h ****                 break;
 158:VoiceEnvelope.h **** 
 159:VoiceEnvelope.h ****             case ENV_ATTACK:
 160:VoiceEnvelope.h ****                 ph = static_cast<float>(phase) * attack_coefficient;
 161:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 162:VoiceEnvelope.h ****                 if (phase >= attack_time) {
 163:VoiceEnvelope.h ****                     current_state = (mode == MODE_AR) ? ENV_DECAY : ENV_SUSTAIN;
 164:VoiceEnvelope.h ****                     phase = 0;
 165:VoiceEnvelope.h ****                 } else {
 166:VoiceEnvelope.h ****                     phase++;
 167:VoiceEnvelope.h ****                 }
 168:VoiceEnvelope.h ****                 break;
 169:VoiceEnvelope.h **** 
 170:VoiceEnvelope.h ****             case ENV_SUSTAIN:
 171:VoiceEnvelope.h ****                 current_value = 1.0f;
 172:VoiceEnvelope.h ****                 break;
 173:VoiceEnvelope.h **** 
 174:VoiceEnvelope.h ****             case ENV_DECAY:
 175:VoiceEnvelope.h ****                 // Use current_value as starting point for decay
 176:VoiceEnvelope.h ****                 // This preserves the correct level from attack phase
 177:VoiceEnvelope.h ****                 ph = static_cast<float>(phase) * decay_coefficient;
 178:VoiceEnvelope.h ****                 if (phase == 0) {
 179:VoiceEnvelope.h ****                     // On first frame, use current value
 180:VoiceEnvelope.h ****                     decay_start_level = current_value;
 181:VoiceEnvelope.h ****                 }
 182:VoiceEnvelope.h ****                 current_value = decay_start_level * (1.0f - ph) / (1.0f + release_curve_coefficient
 183:VoiceEnvelope.h ****                 
 184:VoiceEnvelope.h ****                 if (phase >= decay_time) {
 185:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 186:VoiceEnvelope.h ****                     phase = 0;
 187:VoiceEnvelope.h ****                 } else {
 188:VoiceEnvelope.h ****                     phase++;
 189:VoiceEnvelope.h ****                 }
 190:VoiceEnvelope.h ****                 break;
 191:VoiceEnvelope.h **** 
 192:VoiceEnvelope.h ****             case ENV_RESET:
 193:VoiceEnvelope.h ****                 current_value = reset_target - static_cast<float>(phase) * reset_coefficient;
 194:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 195:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 196:VoiceEnvelope.h ****                     phase = 0;
 197:VoiceEnvelope.h ****                 } else {
 198:VoiceEnvelope.h ****                     phase++;
 199:VoiceEnvelope.h ****                 }
 200:VoiceEnvelope.h ****                 break;
 201:VoiceEnvelope.h ****         }
 202:VoiceEnvelope.h ****         return std::min(std::max(current_value, 0.0f), 1.0f);
 203:VoiceEnvelope.h ****     }
 204:VoiceEnvelope.h **** 
 205:VoiceEnvelope.h ****     void Reset() {
 206:VoiceEnvelope.h ****         if (current_state == ENV_IDLE) return;
 207:VoiceEnvelope.h ****         current_state = ENV_RESET;
 208:VoiceEnvelope.h ****         reset_target = current_value;
 209:VoiceEnvelope.h ****         phase = 0;
 210:VoiceEnvelope.h ****     }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 8


 211:VoiceEnvelope.h **** 
 212:VoiceEnvelope.h ****     bool IsActive() const {
 213:VoiceEnvelope.h ****         return current_state != ENV_IDLE;
 214:VoiceEnvelope.h ****     }
 215:VoiceEnvelope.h **** 
 216:VoiceEnvelope.h **** private:
 217:VoiceEnvelope.h ****     float CalculateAttackAmplitude(float ph) {
 218:VoiceEnvelope.h ****         return ph / (1.0f + attack_curve_coefficient * (1.0f - ph));
 219:VoiceEnvelope.h ****     }
 220:VoiceEnvelope.h **** 
 221:VoiceEnvelope.h ****     float CalculateDecayAmplitude(float ph) {
 222:VoiceEnvelope.h ****         return (1.0f - ph) / (1.0f + release_curve_coefficient * ph);
 223:VoiceEnvelope.h ****     }
 224:VoiceEnvelope.h **** 
 225:VoiceEnvelope.h ****     size_t CalculateAttackPhase(float amp) {
 226:VoiceEnvelope.h ****         return static_cast<size_t>(roundf(attack_time * amp * (1.0f + attack_curve_coefficient) / (
 121              		.loc 3 226 69 is_stmt 0 view .LVU28
 122 0012 B7EE007A 		vmov.f32	s14, #1.0e+0
 123              	.LBE1062:
 124              	.LBE1061:
 127:VoiceEnvelope.h ****                 phase = CalculateAttackPhase(current_value);
 125              		.loc 3 127 45 view .LVU29
 126 0016 D0ED015A 		vldr.32	s11, [r0, #4]
 127              	.LBB1066:
 128              	.LBB1063:
 129              		.loc 3 226 71 view .LVU30
 130 001a 90ED026A 		vldr.32	s12, [r0, #8]
 131              	.LBE1063:
 132              	.LBE1066:
 126:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 133              		.loc 3 126 31 view .LVU31
 134 001e 0123     		movs	r3, #1
 135              	.LBB1067:
 136              	.LBB1064:
 137              		.loc 3 226 55 view .LVU32
 138 0020 D0ED0D7A 		vldr.32	s15, [r0, #52]	@ int
 139              		.loc 3 226 69 view .LVU33
 140 0024 76EE076A 		vadd.f32	s13, s12, s14
 141              	.LBE1064:
 142              	.LBE1067:
 126:VoiceEnvelope.h ****                 current_state = ENV_ATTACK;
 143              		.loc 3 126 31 view .LVU34
 144 0028 0370     		strb	r3, [r0]
 127:VoiceEnvelope.h ****                 phase = CalculateAttackPhase(current_value);
 145              		.loc 3 127 17 is_stmt 1 view .LVU35
 146              	.LVL6:
 147              	.LBB1068:
 148              	.LBI1061:
 225:VoiceEnvelope.h ****         return static_cast<size_t>(roundf(attack_time * amp * (1.0f + attack_curve_coefficient) / (
 149              		.loc 3 225 12 view .LVU36
 150              	.LBB1065:
 151              		.loc 3 226 9 view .LVU37
 152              		.loc 3 226 105 is_stmt 0 view .LVU38
 153 002a A5EE867A 		vfma.f32	s14, s11, s12
 154              		.loc 3 226 55 view .LVU39
 155 002e F8EE677A 		vcvt.f32.u32	s15, s15
 156 0032 67EEA57A 		vmul.f32	s15, s15, s11
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 9


 157              		.loc 3 226 61 view .LVU40
 158 0036 67EEA67A 		vmul.f32	s15, s15, s13
 159              		.loc 3 226 105 view .LVU41
 160 003a F0EE476A 		vmov.f32	s13, s14
 161              		.loc 3 226 42 view .LVU42
 162 003e 87EEA67A 		vdiv.f32	s14, s15, s13
 163 0042 F8FE477A 		vrinta.f32	s15, s14
 164              	.LVL7:
 165              		.loc 3 226 139 view .LVU43
 166 0046 FCEEE77A 		vcvt.u32.f32	s15, s15
 167 004a C0ED0F7A 		vstr.32	s15, [r0, #60]	@ int
 168              	.LBE1065:
 169              	.LBE1068:
 128:VoiceEnvelope.h ****             default:
 170              		.loc 3 128 17 is_stmt 1 view .LVU44
 171              	.LVL8:
 128:VoiceEnvelope.h ****             default:
 172              		.loc 3 128 17 is_stmt 0 view .LVU45
 173              	.LBE1060:
 174              	.LBE1059:
 132:VoiceEnvelope.h **** 
 175              		.loc 3 132 5 view .LVU46
 176 004e 7047     		bx	lr
 177              		.cfi_endproc
 178              	.LFE5476:
 180              		.section	.text._ZN13VoiceEnvelope7ReleaseEv,"axG",%progbits,_ZN13VoiceEnvelope7ReleaseEv,comdat
 181              		.align	1
 182              		.weak	_ZN13VoiceEnvelope7ReleaseEv
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 187              	_ZN13VoiceEnvelope7ReleaseEv:
 188              	.LVL9:
 189              	.LFB5477:
 134:VoiceEnvelope.h ****         switch (current_state) {
 190              		.loc 3 134 10 is_stmt 1 view -0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              		@ link register save eliminated.
 135:VoiceEnvelope.h ****             case ENV_ATTACK:
 195              		.loc 3 135 9 view .LVU48
 135:VoiceEnvelope.h ****             case ENV_ATTACK:
 196              		.loc 3 135 17 is_stmt 0 view .LVU49
 197 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 135:VoiceEnvelope.h ****             case ENV_ATTACK:
 198              		.loc 3 135 9 view .LVU50
 199 0002 012B     		cmp	r3, #1
 200 0004 02D0     		beq	.L11
 201 0006 022B     		cmp	r3, #2
 202 0008 14D0     		beq	.L12
 203 000a 7047     		bx	lr
 204              	.L11:
 205              	.LVL10:
 206              	.LBB1073:
 207              	.LBI1073:
 134:VoiceEnvelope.h ****         switch (current_state) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 10


 208              		.loc 3 134 10 is_stmt 1 view .LVU51
 209              	.LBB1074:
 136:VoiceEnvelope.h ****                 // Preserve the attack curve character when transitioning to release
 210              		.loc 3 136 13 view .LVU52
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 211              		.loc 3 139 17 view .LVU53
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 212              		.loc 3 139 58 is_stmt 0 view .LVU54
 213 000c D0ED0F7A 		vldr.32	s15, [r0, #60]	@ int
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 214              		.loc 3 139 57 view .LVU55
 215 0010 90ED0B7A 		vldr.32	s14, [r0, #44]
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 216              		.loc 3 139 58 view .LVU56
 217 0014 F8EE677A 		vcvt.f32.u32	s15, s15
 218              	.LBB1075:
 219              	.LBB1076:
 218:VoiceEnvelope.h ****     }
 220              		.loc 3 218 27 view .LVU57
 221 0018 90ED026A 		vldr.32	s12, [r0, #8]
 222              	.LBE1076:
 223              	.LBE1075:
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 224              		.loc 3 139 57 view .LVU58
 225 001c 67EE877A 		vmul.f32	s15, s15, s14
 226              	.LVL11:
 227              	.LBB1078:
 228              	.LBI1075:
 217:VoiceEnvelope.h ****         return ph / (1.0f + attack_curve_coefficient * (1.0f - ph));
 229              		.loc 3 217 11 is_stmt 1 view .LVU59
 230              	.LBB1077:
 218:VoiceEnvelope.h ****     }
 231              		.loc 3 218 9 view .LVU60
 218:VoiceEnvelope.h ****     }
 232              		.loc 3 218 62 is_stmt 0 view .LVU61
 233 0020 B7EE007A 		vmov.f32	s14, #1.0e+0
 234 0024 77EE676A 		vsub.f32	s13, s14, s15
 218:VoiceEnvelope.h ****     }
 235              		.loc 3 218 27 view .LVU62
 236 0028 A6EE267A 		vfma.f32	s14, s12, s13
 237              	.LVL12:
 218:VoiceEnvelope.h ****     }
 238              		.loc 3 218 67 view .LVU63
 239 002c C7EE876A 		vdiv.f32	s13, s15, s14
 240              	.LBE1077:
 241              	.LBE1078:
 139:VoiceEnvelope.h ****                 phase = 0; // Always start release from beginning, preserving the current level
 242              		.loc 3 139 31 view .LVU64
 243 0030 C0ED016A 		vstr.32	s13, [r0, #4]
 140:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 244              		.loc 3 140 17 is_stmt 1 view .LVU65
 245              	.LVL13:
 246              	.L12:
 140:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 247              		.loc 3 140 17 is_stmt 0 view .LVU66
 248              	.LBE1074:
 249              	.LBE1073:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 11


 143:VoiceEnvelope.h ****                 phase = 0;
 250              		.loc 3 143 13 is_stmt 1 view .LVU67
 144:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 251              		.loc 3 144 17 view .LVU68
 144:VoiceEnvelope.h ****                 current_state = ENV_DECAY;
 252              		.loc 3 144 23 is_stmt 0 view .LVU69
 253 0034 0023     		movs	r3, #0
 254 0036 C363     		str	r3, [r0, #60]
 145:VoiceEnvelope.h ****                 break;
 255              		.loc 3 145 17 is_stmt 1 view .LVU70
 145:VoiceEnvelope.h ****                 break;
 256              		.loc 3 145 31 is_stmt 0 view .LVU71
 257 0038 0323     		movs	r3, #3
 258 003a 0370     		strb	r3, [r0]
 146:VoiceEnvelope.h ****             default:
 259              		.loc 3 146 17 is_stmt 1 view .LVU72
 150:VoiceEnvelope.h **** 
 260              		.loc 3 150 5 is_stmt 0 view .LVU73
 261 003c 7047     		bx	lr
 262              		.cfi_endproc
 263              	.LFE5477:
 265              		.section	.text._ZN13VoiceEnvelope5ResetEv,"axG",%progbits,_ZN13VoiceEnvelope5ResetEv,comdat
 266              		.align	1
 267              		.weak	_ZN13VoiceEnvelope5ResetEv
 268              		.syntax unified
 269              		.thumb
 270              		.thumb_func
 272              	_ZN13VoiceEnvelope5ResetEv:
 273              	.LVL14:
 274              	.LFB5479:
 205:VoiceEnvelope.h ****         if (current_state == ENV_IDLE) return;
 275              		.loc 3 205 10 is_stmt 1 view -0
 276              		.cfi_startproc
 277              		@ args = 0, pretend = 0, frame = 0
 278              		@ frame_needed = 0, uses_anonymous_args = 0
 279              		@ link register save eliminated.
 206:VoiceEnvelope.h ****         current_state = ENV_RESET;
 280              		.loc 3 206 9 view .LVU75
 281 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 282 0002 2BB1     		cbz	r3, .L14
 283              	.LVL15:
 284              	.LBB1081:
 285              	.LBI1081:
 205:VoiceEnvelope.h ****         if (current_state == ENV_IDLE) return;
 286              		.loc 3 205 10 view .LVU76
 287              	.LBB1082:
 207:VoiceEnvelope.h ****         reset_target = current_value;
 288              		.loc 3 207 9 view .LVU77
 207:VoiceEnvelope.h ****         reset_target = current_value;
 289              		.loc 3 207 23 is_stmt 0 view .LVU78
 290 0004 0423     		movs	r3, #4
 291 0006 0370     		strb	r3, [r0]
 208:VoiceEnvelope.h ****         phase = 0;
 292              		.loc 3 208 9 is_stmt 1 view .LVU79
 208:VoiceEnvelope.h ****         phase = 0;
 293              		.loc 3 208 22 is_stmt 0 view .LVU80
 294 0008 4368     		ldr	r3, [r0, #4]	@ float
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 12


 295 000a 8362     		str	r3, [r0, #40]	@ float
 209:VoiceEnvelope.h ****     }
 296              		.loc 3 209 9 is_stmt 1 view .LVU81
 209:VoiceEnvelope.h ****     }
 297              		.loc 3 209 15 is_stmt 0 view .LVU82
 298 000c 0023     		movs	r3, #0
 299 000e C363     		str	r3, [r0, #60]
 300              	.LVL16:
 301              	.L14:
 209:VoiceEnvelope.h ****     }
 302              		.loc 3 209 15 view .LVU83
 303              	.LBE1082:
 304              	.LBE1081:
 210:VoiceEnvelope.h **** 
 305              		.loc 3 210 5 view .LVU84
 306 0010 7047     		bx	lr
 307              		.cfi_endproc
 308              	.LFE5479:
 310              		.section	.text._ZN15PolyphonyEngineC2Ev,"ax",%progbits
 311              		.align	1
 312              		.global	_ZN15PolyphonyEngineC2Ev
 313              		.syntax unified
 314              		.thumb
 315              		.thumb_func
 317              	_ZN15PolyphonyEngineC2Ev:
 318              	.LVL17:
 319              	.LFB5797:
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 320              		.loc 1 17 1 is_stmt 1 view -0
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 0
 323              		@ frame_needed = 0, uses_anonymous_args = 0
 324              	.LBB1277:
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 325              		.loc 1 17 103 view .LVU86
 326              	.LBE1277:
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 327              		.loc 1 17 1 is_stmt 0 view .LVU87
 328 0000 38B5     		push	{r3, r4, r5, lr}
 329              		.cfi_def_cfa_offset 16
 330              		.cfi_offset 3, -16
 331              		.cfi_offset 4, -12
 332              		.cfi_offset 5, -8
 333              		.cfi_offset 14, -4
 334 0002 00F55F52 		add	r2, r0, #14272
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 335              		.loc 1 17 1 view .LVU88
 336 0006 0446     		mov	r4, r0
 337 0008 0346     		mov	r3, r0
 338              	.L20:
 339              	.LVL18:
 340              	.LBB1387:
 341              	.LBB1278:
 342              	.LBI1278:
 343              		.file 4 "eurorack/plaits/dsp/voice.h"
   1:eurorack/plaits/dsp/voice.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/voice.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 13


   3:eurorack/plaits/dsp/voice.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/voice.h **** //
   5:eurorack/plaits/dsp/voice.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/voice.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/voice.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/voice.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/voice.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/voice.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/voice.h **** // 
  12:eurorack/plaits/dsp/voice.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/voice.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/voice.h **** // 
  15:eurorack/plaits/dsp/voice.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/voice.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/voice.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/voice.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/voice.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/voice.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/voice.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/voice.h **** // 
  23:eurorack/plaits/dsp/voice.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/voice.h **** //
  25:eurorack/plaits/dsp/voice.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/voice.h **** //
  27:eurorack/plaits/dsp/voice.h **** // Main synthesis voice.
  28:eurorack/plaits/dsp/voice.h **** 
  29:eurorack/plaits/dsp/voice.h **** #ifndef PLAITS_DSP_VOICE_H_
  30:eurorack/plaits/dsp/voice.h **** #define PLAITS_DSP_VOICE_H_
  31:eurorack/plaits/dsp/voice.h **** 
  32:eurorack/plaits/dsp/voice.h **** #include "stmlib/stmlib.h"
  33:eurorack/plaits/dsp/voice.h **** 
  34:eurorack/plaits/dsp/voice.h **** #include "stmlib/dsp/filter.h"
  35:eurorack/plaits/dsp/voice.h **** #include "stmlib/dsp/limiter.h"
  36:eurorack/plaits/dsp/voice.h **** #include "stmlib/utils/buffer_allocator.h"
  37:eurorack/plaits/dsp/voice.h **** 
  38:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/additive_engine.h"
  39:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/bass_drum_engine.h"
  40:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/chord_engine.h"
  41:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/engine.h"
  42:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/fm_engine.h"
  43:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/grain_engine.h"
  44:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/hi_hat_engine.h"
  45:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/modal_engine.h"
  46:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/noise_engine.h"
  47:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/particle_engine.h"
  48:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/snare_drum_engine.h"
  49:eurorack/plaits/dsp/voice.h **** // #include "plaits/dsp/engine/speech_engine.h"
  50:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/string_engine.h"
  51:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/swarm_engine.h"
  52:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/virtual_analog_engine.h"
  53:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/engine/waveshaping_engine.h"
  54:eurorack/plaits/dsp/voice.h **** // #include "plaits/dsp/engine/wavetable_engine.h"
  55:eurorack/plaits/dsp/voice.h **** 
  56:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/envelope.h"
  57:eurorack/plaits/dsp/voice.h **** 
  58:eurorack/plaits/dsp/voice.h **** #include "plaits/dsp/fx/low_pass_gate.h"
  59:eurorack/plaits/dsp/voice.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 14


  60:eurorack/plaits/dsp/voice.h **** namespace plaits {
  61:eurorack/plaits/dsp/voice.h **** 
  62:eurorack/plaits/dsp/voice.h **** const int kMaxEngines = 16;
  63:eurorack/plaits/dsp/voice.h **** const int kMaxTriggerDelay = 8;
  64:eurorack/plaits/dsp/voice.h **** const int kTriggerDelay = 5;
  65:eurorack/plaits/dsp/voice.h **** 
  66:eurorack/plaits/dsp/voice.h **** class ChannelPostProcessor {
  67:eurorack/plaits/dsp/voice.h ****  public:
  68:eurorack/plaits/dsp/voice.h ****   ChannelPostProcessor() { }
  69:eurorack/plaits/dsp/voice.h ****   ~ChannelPostProcessor() { }
  70:eurorack/plaits/dsp/voice.h ****   
  71:eurorack/plaits/dsp/voice.h ****   void Init() {
  72:eurorack/plaits/dsp/voice.h ****     lpg_.Init();
  73:eurorack/plaits/dsp/voice.h ****     Reset();
  74:eurorack/plaits/dsp/voice.h ****   }
  75:eurorack/plaits/dsp/voice.h ****   
  76:eurorack/plaits/dsp/voice.h ****   void Reset() {
  77:eurorack/plaits/dsp/voice.h ****     limiter_.Init();
  78:eurorack/plaits/dsp/voice.h ****   }
  79:eurorack/plaits/dsp/voice.h ****   
  80:eurorack/plaits/dsp/voice.h ****   void Process(
  81:eurorack/plaits/dsp/voice.h ****       float gain,
  82:eurorack/plaits/dsp/voice.h ****       bool bypass_lpg,
  83:eurorack/plaits/dsp/voice.h ****       float low_pass_gate_gain,
  84:eurorack/plaits/dsp/voice.h ****       float low_pass_gate_frequency,
  85:eurorack/plaits/dsp/voice.h ****       float low_pass_gate_hf_bleed,
  86:eurorack/plaits/dsp/voice.h ****       float* in,
  87:eurorack/plaits/dsp/voice.h ****       short* out,
  88:eurorack/plaits/dsp/voice.h ****       size_t size,
  89:eurorack/plaits/dsp/voice.h ****       size_t stride) {
  90:eurorack/plaits/dsp/voice.h ****     if (gain < 0.0f) {
  91:eurorack/plaits/dsp/voice.h ****       limiter_.Process(-gain, in, size);
  92:eurorack/plaits/dsp/voice.h ****     }
  93:eurorack/plaits/dsp/voice.h ****     const float post_gain = (gain < 0.0f ? 1.0f : gain) * -32767.0f;
  94:eurorack/plaits/dsp/voice.h ****     if (!bypass_lpg) {
  95:eurorack/plaits/dsp/voice.h ****       lpg_.Process(
  96:eurorack/plaits/dsp/voice.h ****           post_gain * low_pass_gate_gain,
  97:eurorack/plaits/dsp/voice.h ****           low_pass_gate_frequency,
  98:eurorack/plaits/dsp/voice.h ****           low_pass_gate_hf_bleed,
  99:eurorack/plaits/dsp/voice.h ****           in,
 100:eurorack/plaits/dsp/voice.h ****           out,
 101:eurorack/plaits/dsp/voice.h ****           size,
 102:eurorack/plaits/dsp/voice.h ****           stride);
 103:eurorack/plaits/dsp/voice.h ****     } else {
 104:eurorack/plaits/dsp/voice.h ****       while (size--) {
 105:eurorack/plaits/dsp/voice.h ****         *out = stmlib::Clip16(1 + static_cast<int32_t>(*in++ * post_gain));
 106:eurorack/plaits/dsp/voice.h ****         out += stride;
 107:eurorack/plaits/dsp/voice.h ****       }
 108:eurorack/plaits/dsp/voice.h ****     }
 109:eurorack/plaits/dsp/voice.h ****   }
 110:eurorack/plaits/dsp/voice.h ****   
 111:eurorack/plaits/dsp/voice.h ****  private:
 112:eurorack/plaits/dsp/voice.h ****   stmlib::Limiter limiter_;
 113:eurorack/plaits/dsp/voice.h ****   LowPassGate lpg_;
 114:eurorack/plaits/dsp/voice.h ****   
 115:eurorack/plaits/dsp/voice.h ****   DISALLOW_COPY_AND_ASSIGN(ChannelPostProcessor);
 116:eurorack/plaits/dsp/voice.h **** };
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 15


 117:eurorack/plaits/dsp/voice.h **** 
 118:eurorack/plaits/dsp/voice.h **** struct Patch {
 119:eurorack/plaits/dsp/voice.h ****   float note;
 120:eurorack/plaits/dsp/voice.h ****   float harmonics;
 121:eurorack/plaits/dsp/voice.h ****   float timbre;
 122:eurorack/plaits/dsp/voice.h ****   float morph;
 123:eurorack/plaits/dsp/voice.h ****   float frequency_modulation_amount;
 124:eurorack/plaits/dsp/voice.h ****   float timbre_modulation_amount;
 125:eurorack/plaits/dsp/voice.h ****   float morph_modulation_amount;
 126:eurorack/plaits/dsp/voice.h **** 
 127:eurorack/plaits/dsp/voice.h ****   int engine;
 128:eurorack/plaits/dsp/voice.h ****   float decay;
 129:eurorack/plaits/dsp/voice.h ****   float lpg_colour;
 130:eurorack/plaits/dsp/voice.h **** };
 131:eurorack/plaits/dsp/voice.h **** 
 132:eurorack/plaits/dsp/voice.h **** struct Modulations {
 133:eurorack/plaits/dsp/voice.h ****   float engine;
 134:eurorack/plaits/dsp/voice.h ****   float note;
 135:eurorack/plaits/dsp/voice.h ****   float frequency;
 136:eurorack/plaits/dsp/voice.h ****   float harmonics;
 137:eurorack/plaits/dsp/voice.h ****   float timbre;
 138:eurorack/plaits/dsp/voice.h ****   float morph;
 139:eurorack/plaits/dsp/voice.h ****   float trigger;
 140:eurorack/plaits/dsp/voice.h ****   float level;
 141:eurorack/plaits/dsp/voice.h **** 
 142:eurorack/plaits/dsp/voice.h ****   bool frequency_patched;
 143:eurorack/plaits/dsp/voice.h ****   bool timbre_patched;
 144:eurorack/plaits/dsp/voice.h ****   bool morph_patched;
 145:eurorack/plaits/dsp/voice.h ****   bool trigger_patched;
 146:eurorack/plaits/dsp/voice.h ****   bool level_patched;
 147:eurorack/plaits/dsp/voice.h **** };
 148:eurorack/plaits/dsp/voice.h **** 
 149:eurorack/plaits/dsp/voice.h **** class Voice {
 150:eurorack/plaits/dsp/voice.h ****  public:
 151:eurorack/plaits/dsp/voice.h ****   Voice() { }
 344              		.loc 4 151 3 is_stmt 1 view .LVU89
 345              	.LBB1279:
 346              	.LBI1279:
 347              		.file 5 "eurorack/plaits/dsp/engine/additive_engine.h"
   1:eurorack/plaits/dsp/engine/additive_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/additive_engine.h **** //
   3:eurorack/plaits/dsp/engine/additive_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/additive_engine.h **** //
   5:eurorack/plaits/dsp/engine/additive_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/additive_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/additive_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/additive_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/additive_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/additive_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/additive_engine.h **** // 
  12:eurorack/plaits/dsp/engine/additive_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/additive_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/additive_engine.h **** // 
  15:eurorack/plaits/dsp/engine/additive_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/additive_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/additive_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/additive_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 16


  19:eurorack/plaits/dsp/engine/additive_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/additive_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/additive_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/additive_engine.h **** // 
  23:eurorack/plaits/dsp/engine/additive_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/additive_engine.h **** //
  25:eurorack/plaits/dsp/engine/additive_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/additive_engine.h **** //
  27:eurorack/plaits/dsp/engine/additive_engine.h **** // Additive synthesis with 24+8 partials.
  28:eurorack/plaits/dsp/engine/additive_engine.h **** 
  29:eurorack/plaits/dsp/engine/additive_engine.h **** #ifndef PLAITS_DSP_ENGINE_ADDITIVE_ENGINE_H_
  30:eurorack/plaits/dsp/engine/additive_engine.h **** #define PLAITS_DSP_ENGINE_ADDITIVE_ENGINE_H_
  31:eurorack/plaits/dsp/engine/additive_engine.h **** 
  32:eurorack/plaits/dsp/engine/additive_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/additive_engine.h **** #include "plaits/dsp/oscillator/harmonic_oscillator.h"
  34:eurorack/plaits/dsp/engine/additive_engine.h **** 
  35:eurorack/plaits/dsp/engine/additive_engine.h **** namespace plaits {
  36:eurorack/plaits/dsp/engine/additive_engine.h ****   
  37:eurorack/plaits/dsp/engine/additive_engine.h **** const int kHarmonicBatchSize = 12;
  38:eurorack/plaits/dsp/engine/additive_engine.h **** const int kNumHarmonics = 36;
  39:eurorack/plaits/dsp/engine/additive_engine.h **** const int kNumHarmonicOscillators = kNumHarmonics / kHarmonicBatchSize;
  40:eurorack/plaits/dsp/engine/additive_engine.h **** 
  41:eurorack/plaits/dsp/engine/additive_engine.h **** class AdditiveEngine : public Engine {
  42:eurorack/plaits/dsp/engine/additive_engine.h ****  public:
  43:eurorack/plaits/dsp/engine/additive_engine.h ****   AdditiveEngine() { }
 348              		.loc 5 43 3 view .LVU90
 349              	.LBB1280:
 350              	.LBB1281:
 351              	.LBI1281:
 352              		.file 6 "eurorack/plaits/dsp/engine/engine.h"
   1:eurorack/plaits/dsp/engine/engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/engine.h **** //
   3:eurorack/plaits/dsp/engine/engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/engine.h **** //
   5:eurorack/plaits/dsp/engine/engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/engine.h **** // 
  12:eurorack/plaits/dsp/engine/engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/engine.h **** // 
  15:eurorack/plaits/dsp/engine/engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/engine.h **** // 
  23:eurorack/plaits/dsp/engine/engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/engine.h **** //
  25:eurorack/plaits/dsp/engine/engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/engine.h **** //
  27:eurorack/plaits/dsp/engine/engine.h **** // Base class for all engines.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 17


  28:eurorack/plaits/dsp/engine/engine.h **** 
  29:eurorack/plaits/dsp/engine/engine.h **** #ifndef PLAITS_DSP_ENGINE_ENGINE_H_
  30:eurorack/plaits/dsp/engine/engine.h **** #define PLAITS_DSP_ENGINE_ENGINE_H_
  31:eurorack/plaits/dsp/engine/engine.h **** 
  32:eurorack/plaits/dsp/engine/engine.h **** #include "plaits/dsp/dsp.h"
  33:eurorack/plaits/dsp/engine/engine.h **** 
  34:eurorack/plaits/dsp/engine/engine.h **** #include "stmlib/dsp/units.h"
  35:eurorack/plaits/dsp/engine/engine.h **** #include "stmlib/utils/buffer_allocator.h"
  36:eurorack/plaits/dsp/engine/engine.h **** 
  37:eurorack/plaits/dsp/engine/engine.h **** namespace plaits {
  38:eurorack/plaits/dsp/engine/engine.h **** 
  39:eurorack/plaits/dsp/engine/engine.h **** inline float NoteToFrequency(float midi_note) {
  40:eurorack/plaits/dsp/engine/engine.h ****   midi_note -= 9.0f;
  41:eurorack/plaits/dsp/engine/engine.h ****   CONSTRAIN(midi_note, -128.0f, 127.0f);
  42:eurorack/plaits/dsp/engine/engine.h ****   return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
  43:eurorack/plaits/dsp/engine/engine.h **** }
  44:eurorack/plaits/dsp/engine/engine.h **** 
  45:eurorack/plaits/dsp/engine/engine.h **** enum TriggerState {
  46:eurorack/plaits/dsp/engine/engine.h ****   TRIGGER_LOW = 0,
  47:eurorack/plaits/dsp/engine/engine.h ****   TRIGGER_RISING_EDGE = 1,
  48:eurorack/plaits/dsp/engine/engine.h ****   TRIGGER_UNPATCHED = 2,
  49:eurorack/plaits/dsp/engine/engine.h ****   TRIGGER_UNPATCHED_AUTOTRIGGED = 3,
  50:eurorack/plaits/dsp/engine/engine.h **** };
  51:eurorack/plaits/dsp/engine/engine.h **** 
  52:eurorack/plaits/dsp/engine/engine.h **** struct EngineParameters {
  53:eurorack/plaits/dsp/engine/engine.h ****   TriggerState trigger;
  54:eurorack/plaits/dsp/engine/engine.h ****   float note;
  55:eurorack/plaits/dsp/engine/engine.h ****   float timbre;
  56:eurorack/plaits/dsp/engine/engine.h ****   float morph;
  57:eurorack/plaits/dsp/engine/engine.h ****   float harmonics;
  58:eurorack/plaits/dsp/engine/engine.h ****   float accent;
  59:eurorack/plaits/dsp/engine/engine.h **** };
  60:eurorack/plaits/dsp/engine/engine.h **** 
  61:eurorack/plaits/dsp/engine/engine.h **** struct PostProcessingSettings {
  62:eurorack/plaits/dsp/engine/engine.h ****   // A negative value indicates that a limiter must be used.
  63:eurorack/plaits/dsp/engine/engine.h ****   float out_gain;
  64:eurorack/plaits/dsp/engine/engine.h ****   float aux_gain;
  65:eurorack/plaits/dsp/engine/engine.h ****   
  66:eurorack/plaits/dsp/engine/engine.h ****   // When this flag is set to true, the engine declares that it will 
  67:eurorack/plaits/dsp/engine/engine.h ****   // render a signal that already has an envelope (eg: modal drum, 808 kick).
  68:eurorack/plaits/dsp/engine/engine.h ****   // By reporting this information, the synthesis voice upstream will
  69:eurorack/plaits/dsp/engine/engine.h ****   // bypass the internal envelope/LPG.
  70:eurorack/plaits/dsp/engine/engine.h ****   //
  71:eurorack/plaits/dsp/engine/engine.h ****   // This parameter can be changed on a per-call basis when calling Render()
  72:eurorack/plaits/dsp/engine/engine.h ****   // This is used by the speech synthesis engine, which renders either
  73:eurorack/plaits/dsp/engine/engine.h ****   // a continuous vowel sound (which needs to be enveloped by the LPG)
  74:eurorack/plaits/dsp/engine/engine.h ****   // or a word/sentence (which is already enveloped).
  75:eurorack/plaits/dsp/engine/engine.h ****   bool already_enveloped;
  76:eurorack/plaits/dsp/engine/engine.h **** };
  77:eurorack/plaits/dsp/engine/engine.h **** 
  78:eurorack/plaits/dsp/engine/engine.h **** class Engine {
  79:eurorack/plaits/dsp/engine/engine.h ****  public:
  80:eurorack/plaits/dsp/engine/engine.h ****   Engine() { }
 353              		.loc 6 80 3 view .LVU91
 354              		.loc 6 80 3 is_stmt 0 view .LVU92
 355              	.LBE1281:
 356              		.loc 5 43 20 view .LVU93
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 18


 357 000a 3449     		ldr	r1, .L24
 358 000c 1960     		str	r1, [r3]
 359              		.loc 5 43 20 is_stmt 1 view .LVU94
 360              	.LVL19:
 361              		.loc 5 43 20 is_stmt 0 view .LVU95
 362              	.LBE1280:
 363              	.LBE1279:
 364              	.LBB1282:
 365              	.LBI1282:
 366              		.file 7 "eurorack/plaits/dsp/engine/bass_drum_engine.h"
   1:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/bass_drum_engine.h **** //
   3:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/bass_drum_engine.h **** //
   5:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // 
  12:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // 
  15:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // 
  23:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/bass_drum_engine.h **** //
  25:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/bass_drum_engine.h **** //
  27:eurorack/plaits/dsp/engine/bass_drum_engine.h **** // 808 and synthetic bass drum generators.
  28:eurorack/plaits/dsp/engine/bass_drum_engine.h **** 
  29:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #ifndef PLAITS_DSP_ENGINE_BASS_DRUM_ENGINE_H_
  30:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #define PLAITS_DSP_ENGINE_BASS_DRUM_ENGINE_H_
  31:eurorack/plaits/dsp/engine/bass_drum_engine.h **** 
  32:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/drums/analog_bass_drum.h"
  33:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/drums/synthetic_bass_drum.h"
  34:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/fx/overdrive.h"
  36:eurorack/plaits/dsp/engine/bass_drum_engine.h **** #include "plaits/dsp/fx/sample_rate_reducer.h"
  37:eurorack/plaits/dsp/engine/bass_drum_engine.h **** 
  38:eurorack/plaits/dsp/engine/bass_drum_engine.h **** namespace plaits {
  39:eurorack/plaits/dsp/engine/bass_drum_engine.h ****   
  40:eurorack/plaits/dsp/engine/bass_drum_engine.h **** class BassDrumEngine : public Engine {
  41:eurorack/plaits/dsp/engine/bass_drum_engine.h ****  public:
  42:eurorack/plaits/dsp/engine/bass_drum_engine.h ****   BassDrumEngine() { }
 367              		.loc 7 42 3 is_stmt 1 view .LVU96
 368              	.LBB1283:
 369              	.LBB1284:
 370              	.LBI1284:
 371              		.loc 6 80 3 view .LVU97
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 19


 372              		.loc 6 80 3 is_stmt 0 view .LVU98
 373              	.LBE1284:
 374              		.loc 7 42 20 view .LVU99
 375 000e 3449     		ldr	r1, .L24+4
 376 0010 C3F84811 		str	r1, [r3, #328]
 377              	.LVL20:
 378              	.LBB1285:
 379              	.LBI1285:
 380              		.file 8 "eurorack/plaits/dsp/drums/analog_bass_drum.h"
   1:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/analog_bass_drum.h **** //
   3:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/analog_bass_drum.h **** //
   5:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // 
  12:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // 
  15:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // 
  23:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/analog_bass_drum.h **** //
  25:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/analog_bass_drum.h **** //
  27:eurorack/plaits/dsp/drums/analog_bass_drum.h **** // 808 bass drum model, revisited.
  28:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  29:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #ifndef PLAITS_DSP_DRUMS_ANALOG_BASS_DRUM_H_
  30:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #define PLAITS_DSP_DRUMS_ANALOG_BASS_DRUM_H_
  31:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  32:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include <algorithm>
  33:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  34:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "stmlib/dsp/filter.h"
  36:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "stmlib/dsp/parameter_interpolator.h"
  37:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "stmlib/dsp/units.h"
  38:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  39:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "plaits/dsp/dsp.h"
  40:eurorack/plaits/dsp/drums/analog_bass_drum.h **** #include "plaits/dsp/oscillator/sine_oscillator.h"
  41:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  42:eurorack/plaits/dsp/drums/analog_bass_drum.h **** namespace plaits {
  43:eurorack/plaits/dsp/drums/analog_bass_drum.h **** 
  44:eurorack/plaits/dsp/drums/analog_bass_drum.h **** class AnalogBassDrum {
  45:eurorack/plaits/dsp/drums/analog_bass_drum.h ****  public:
  46:eurorack/plaits/dsp/drums/analog_bass_drum.h ****   AnalogBassDrum() { }
 381              		.loc 8 46 3 is_stmt 1 view .LVU100
 382              	.LBB1286:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 20


 383              	.LBI1286:
 384              		.file 9 "eurorack/stmlib/dsp/filter.h"
   1:eurorack/stmlib/dsp/filter.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/stmlib/dsp/filter.h **** //
   3:eurorack/stmlib/dsp/filter.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/dsp/filter.h **** //
   5:eurorack/stmlib/dsp/filter.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/dsp/filter.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/dsp/filter.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/dsp/filter.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/dsp/filter.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/dsp/filter.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/dsp/filter.h **** // 
  12:eurorack/stmlib/dsp/filter.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/dsp/filter.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/dsp/filter.h **** // 
  15:eurorack/stmlib/dsp/filter.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/dsp/filter.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/dsp/filter.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/dsp/filter.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/dsp/filter.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/dsp/filter.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/dsp/filter.h **** // THE SOFTWARE.
  22:eurorack/stmlib/dsp/filter.h **** // 
  23:eurorack/stmlib/dsp/filter.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/dsp/filter.h **** //
  25:eurorack/stmlib/dsp/filter.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/dsp/filter.h **** //
  27:eurorack/stmlib/dsp/filter.h **** // Zero-delay-feedback filters (one pole and SVF).
  28:eurorack/stmlib/dsp/filter.h **** // Naive SVF.
  29:eurorack/stmlib/dsp/filter.h **** 
  30:eurorack/stmlib/dsp/filter.h **** #ifndef STMLIB_DSP_FILTER_H_
  31:eurorack/stmlib/dsp/filter.h **** #define STMLIB_DSP_FILTER_H_
  32:eurorack/stmlib/dsp/filter.h **** 
  33:eurorack/stmlib/dsp/filter.h **** #include "stmlib/stmlib.h"
  34:eurorack/stmlib/dsp/filter.h **** 
  35:eurorack/stmlib/dsp/filter.h **** #include <cmath>
  36:eurorack/stmlib/dsp/filter.h **** #include <algorithm>
  37:eurorack/stmlib/dsp/filter.h **** 
  38:eurorack/stmlib/dsp/filter.h **** namespace stmlib {
  39:eurorack/stmlib/dsp/filter.h **** 
  40:eurorack/stmlib/dsp/filter.h **** enum FilterMode {
  41:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_LOW_PASS,
  42:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_BAND_PASS,
  43:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_BAND_PASS_NORMALIZED,
  44:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_HIGH_PASS
  45:eurorack/stmlib/dsp/filter.h **** };
  46:eurorack/stmlib/dsp/filter.h **** 
  47:eurorack/stmlib/dsp/filter.h **** enum FrequencyApproximation {
  48:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_EXACT,
  49:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_ACCURATE,
  50:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_FAST,
  51:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_DIRTY
  52:eurorack/stmlib/dsp/filter.h **** };
  53:eurorack/stmlib/dsp/filter.h **** 
  54:eurorack/stmlib/dsp/filter.h **** #define M_PI_F float(M_PI)
  55:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_2 M_PI * M_PI
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 21


  56:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_3 M_PI_POW_2 * M_PI
  57:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_5 M_PI_POW_3 * M_PI_POW_2
  58:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_7 M_PI_POW_5 * M_PI_POW_2
  59:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_9 M_PI_POW_7 * M_PI_POW_2
  60:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_11 M_PI_POW_9 * M_PI_POW_2
  61:eurorack/stmlib/dsp/filter.h **** 
  62:eurorack/stmlib/dsp/filter.h **** class DCBlocker {
  63:eurorack/stmlib/dsp/filter.h ****  public:
  64:eurorack/stmlib/dsp/filter.h ****   DCBlocker() { }
  65:eurorack/stmlib/dsp/filter.h ****   ~DCBlocker() { }
  66:eurorack/stmlib/dsp/filter.h ****   
  67:eurorack/stmlib/dsp/filter.h ****   void Init(float pole) {
  68:eurorack/stmlib/dsp/filter.h ****     x_ = 0.0f;
  69:eurorack/stmlib/dsp/filter.h ****     y_ = 0.0f;
  70:eurorack/stmlib/dsp/filter.h ****     pole_ = pole;
  71:eurorack/stmlib/dsp/filter.h ****   }
  72:eurorack/stmlib/dsp/filter.h ****   
  73:eurorack/stmlib/dsp/filter.h ****   inline void Process(float* in_out, size_t size) {
  74:eurorack/stmlib/dsp/filter.h ****     float x = x_;
  75:eurorack/stmlib/dsp/filter.h ****     float y = y_;
  76:eurorack/stmlib/dsp/filter.h ****     const float pole = pole_;
  77:eurorack/stmlib/dsp/filter.h ****     while (size--) {
  78:eurorack/stmlib/dsp/filter.h ****       float old_x = x;
  79:eurorack/stmlib/dsp/filter.h ****       x = *in_out;
  80:eurorack/stmlib/dsp/filter.h ****       *in_out++ = y = y * pole + x - old_x;
  81:eurorack/stmlib/dsp/filter.h ****     }
  82:eurorack/stmlib/dsp/filter.h ****     x_ = x;
  83:eurorack/stmlib/dsp/filter.h ****     y_ = y;
  84:eurorack/stmlib/dsp/filter.h ****   }
  85:eurorack/stmlib/dsp/filter.h ****   
  86:eurorack/stmlib/dsp/filter.h ****  private:
  87:eurorack/stmlib/dsp/filter.h ****   float pole_;
  88:eurorack/stmlib/dsp/filter.h ****   float x_;
  89:eurorack/stmlib/dsp/filter.h ****   float y_;
  90:eurorack/stmlib/dsp/filter.h **** };
  91:eurorack/stmlib/dsp/filter.h **** 
  92:eurorack/stmlib/dsp/filter.h **** class OnePole {
  93:eurorack/stmlib/dsp/filter.h ****  public:
  94:eurorack/stmlib/dsp/filter.h ****   OnePole() { }
  95:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
  96:eurorack/stmlib/dsp/filter.h ****   
  97:eurorack/stmlib/dsp/filter.h ****   void Init() {
  98:eurorack/stmlib/dsp/filter.h ****     set_f<FREQUENCY_DIRTY>(0.01f);
  99:eurorack/stmlib/dsp/filter.h ****     Reset();
 100:eurorack/stmlib/dsp/filter.h ****   }
 101:eurorack/stmlib/dsp/filter.h ****   
 102:eurorack/stmlib/dsp/filter.h ****   void Reset() {
 103:eurorack/stmlib/dsp/filter.h ****     state_ = 0.0f;
 104:eurorack/stmlib/dsp/filter.h ****   }
 105:eurorack/stmlib/dsp/filter.h ****   
 106:eurorack/stmlib/dsp/filter.h ****   template<FrequencyApproximation approximation>
 107:eurorack/stmlib/dsp/filter.h ****   static inline float tan(float f) {
 108:eurorack/stmlib/dsp/filter.h ****     if (approximation == FREQUENCY_EXACT) {
 109:eurorack/stmlib/dsp/filter.h ****       // Clip coefficient to about 100.
 110:eurorack/stmlib/dsp/filter.h ****       f = f < 0.497f ? f : 0.497f;
 111:eurorack/stmlib/dsp/filter.h ****       return tanf(M_PI_F * f);
 112:eurorack/stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_DIRTY) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 22


 113:eurorack/stmlib/dsp/filter.h ****       // Optimized for frequencies below 8kHz.
 114:eurorack/stmlib/dsp/filter.h ****       const float a = 3.736e-01f * M_PI_POW_3;
 115:eurorack/stmlib/dsp/filter.h ****       return f * (M_PI_F + a * f * f);
 116:eurorack/stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_FAST) {
 117:eurorack/stmlib/dsp/filter.h ****       // The usual tangent approximation uses 3.1755e-01 and 2.033e-01, but
 118:eurorack/stmlib/dsp/filter.h ****       // the coefficients used here are optimized to minimize error for the
 119:eurorack/stmlib/dsp/filter.h ****       // 16Hz to 16kHz range, with a sample rate of 48kHz.
 120:eurorack/stmlib/dsp/filter.h ****       const float a = 3.260e-01f * M_PI_POW_3;
 121:eurorack/stmlib/dsp/filter.h ****       const float b = 1.823e-01f * M_PI_POW_5;
 122:eurorack/stmlib/dsp/filter.h ****       float f2 = f * f;
 123:eurorack/stmlib/dsp/filter.h ****       return f * (M_PI_F + f2 * (a + b * f2));
 124:eurorack/stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_ACCURATE) {
 125:eurorack/stmlib/dsp/filter.h ****       // These coefficients don't need to be tweaked for the audio range.
 126:eurorack/stmlib/dsp/filter.h ****       const float a = 3.333314036e-01f * M_PI_POW_3;
 127:eurorack/stmlib/dsp/filter.h ****       const float b = 1.333923995e-01f * M_PI_POW_5;
 128:eurorack/stmlib/dsp/filter.h ****       const float c = 5.33740603e-02f * M_PI_POW_7;
 129:eurorack/stmlib/dsp/filter.h ****       const float d = 2.900525e-03f * M_PI_POW_9;
 130:eurorack/stmlib/dsp/filter.h ****       const float e = 9.5168091e-03f * M_PI_POW_11;
 131:eurorack/stmlib/dsp/filter.h ****       float f2 = f * f;
 132:eurorack/stmlib/dsp/filter.h ****       return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
 133:eurorack/stmlib/dsp/filter.h ****     }
 134:eurorack/stmlib/dsp/filter.h ****   }
 135:eurorack/stmlib/dsp/filter.h ****   
 136:eurorack/stmlib/dsp/filter.h ****   // Set frequency and resonance from true units. Various approximations
 137:eurorack/stmlib/dsp/filter.h ****   // are available to avoid the cost of tanf.
 138:eurorack/stmlib/dsp/filter.h ****   template<FrequencyApproximation approximation>
 139:eurorack/stmlib/dsp/filter.h ****   inline void set_f(float f) {
 140:eurorack/stmlib/dsp/filter.h ****     g_ = tan<approximation>(f);
 141:eurorack/stmlib/dsp/filter.h ****     gi_ = 1.0f / (1.0f + g_);
 142:eurorack/stmlib/dsp/filter.h ****   }
 143:eurorack/stmlib/dsp/filter.h ****   
 144:eurorack/stmlib/dsp/filter.h ****   template<FilterMode mode>
 145:eurorack/stmlib/dsp/filter.h ****   inline float Process(float in) {
 146:eurorack/stmlib/dsp/filter.h ****     float lp;
 147:eurorack/stmlib/dsp/filter.h ****     lp = (g_ * in + state_) * gi_;
 148:eurorack/stmlib/dsp/filter.h ****     state_ = g_ * (in - lp) + lp;
 149:eurorack/stmlib/dsp/filter.h **** 
 150:eurorack/stmlib/dsp/filter.h ****     if (mode == FILTER_MODE_LOW_PASS) {
 151:eurorack/stmlib/dsp/filter.h ****       return lp;
 152:eurorack/stmlib/dsp/filter.h ****     } else if (mode == FILTER_MODE_HIGH_PASS) {
 153:eurorack/stmlib/dsp/filter.h ****       return in - lp;
 154:eurorack/stmlib/dsp/filter.h ****     } else {
 155:eurorack/stmlib/dsp/filter.h ****       return 0.0f;
 156:eurorack/stmlib/dsp/filter.h ****     }
 157:eurorack/stmlib/dsp/filter.h ****   }
 158:eurorack/stmlib/dsp/filter.h ****   
 159:eurorack/stmlib/dsp/filter.h ****   template<FilterMode mode>
 160:eurorack/stmlib/dsp/filter.h ****   inline void Process(float* in_out, size_t size) {
 161:eurorack/stmlib/dsp/filter.h ****     while (size--) {
 162:eurorack/stmlib/dsp/filter.h ****       *in_out = Process<mode>(*in_out);
 163:eurorack/stmlib/dsp/filter.h ****       ++in_out;
 164:eurorack/stmlib/dsp/filter.h ****     }
 165:eurorack/stmlib/dsp/filter.h ****   }
 166:eurorack/stmlib/dsp/filter.h ****   
 167:eurorack/stmlib/dsp/filter.h ****  private:
 168:eurorack/stmlib/dsp/filter.h ****   float g_;
 169:eurorack/stmlib/dsp/filter.h ****   float gi_;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 23


 170:eurorack/stmlib/dsp/filter.h ****   float state_;
 171:eurorack/stmlib/dsp/filter.h ****   
 172:eurorack/stmlib/dsp/filter.h ****   DISALLOW_COPY_AND_ASSIGN(OnePole);
 173:eurorack/stmlib/dsp/filter.h **** };
 174:eurorack/stmlib/dsp/filter.h **** 
 175:eurorack/stmlib/dsp/filter.h **** 
 176:eurorack/stmlib/dsp/filter.h **** 
 177:eurorack/stmlib/dsp/filter.h **** class Svf {
 178:eurorack/stmlib/dsp/filter.h ****  public:
 179:eurorack/stmlib/dsp/filter.h ****   Svf() { }
 385              		.loc 9 179 3 view .LVU101
 386              		.loc 9 179 3 is_stmt 0 view .LVU102
 387              	.LBE1286:
 388              	.LBB1287:
 389              	.LBI1287:
 390              		.file 10 "eurorack/plaits/dsp/oscillator/sine_oscillator.h"
   1:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // Simple sine oscillator (wavetable) + fast sine oscillator (magic circle).
  28:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** //
  29:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // The fast implementation might glitch a bit under heavy modulations of the
  30:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** // frequency.
  31:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  32:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_SINE_OSCILLATOR_H_
  33:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #define PLAITS_DSP_OSCILLATOR_SINE_OSCILLATOR_H_
  34:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  35:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #include "stmlib/dsp/dsp.h"
  36:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  37:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #include "stmlib/dsp/rsqrt.h"
  38:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  39:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** #include "plaits/resources.h"
  40:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  41:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** namespace plaits {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 24


  42:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** 
  43:eurorack/plaits/dsp/oscillator/sine_oscillator.h **** class SineOscillator {
  44:eurorack/plaits/dsp/oscillator/sine_oscillator.h ****  public:
  45:eurorack/plaits/dsp/oscillator/sine_oscillator.h ****   SineOscillator() { }
 391              		.loc 10 45 3 is_stmt 1 view .LVU103
 392              		.loc 10 45 3 is_stmt 0 view .LVU104
 393              	.LBE1287:
 394              	.LBE1285:
 395              	.LBB1288:
 396              	.LBI1288:
 397              		.file 11 "eurorack/plaits/dsp/drums/synthetic_bass_drum.h"
   1:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** //
   3:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** //
   5:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // 
  12:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // 
  15:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // 
  23:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** //
  25:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** //
  27:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Naive bass drum model (modulated oscillator with FM + envelope).
  28:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** // Inadvertently 909-ish.
  29:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  30:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #ifndef PLAITS_DSP_DRUMS_SYNTHETIC_BASS_DRUM_H_
  31:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #define PLAITS_DSP_DRUMS_SYNTHETIC_BASS_DRUM_H_
  32:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  33:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "stmlib/dsp/dsp.h"
  34:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "stmlib/dsp/units.h"
  35:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "stmlib/utils/random.h"
  36:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  37:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "plaits/dsp/dsp.h"
  38:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** #include "plaits/resources.h"
  39:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  40:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** namespace plaits {
  41:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  42:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** class SyntheticBassDrumClick {
  43:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  public:
  44:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   SyntheticBassDrumClick() { }
  45:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumClick() { }
  46:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 25


  47:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   void Init() {
  48:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     lp_ = 0.0f;
  49:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     hp_ = 0.0f;
  50:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     filter_.Init();
  51:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  52:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   }
  53:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  54:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float Process(float in) {
  55:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     SLOPE(lp_, in, 0.5f, 0.1f);
  56:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     ONE_POLE(hp_, lp_, 0.04f);
  57:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     return filter_.Process<stmlib::FILTER_MODE_LOW_PASS>(lp_ - hp_);
  58:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   }
  59:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  60:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  private:
  61:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float lp_;
  62:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float hp_;
  63:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   stmlib::Svf filter_;
  64:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  65:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   DISALLOW_COPY_AND_ASSIGN(SyntheticBassDrumClick);
  66:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** };
  67:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  68:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** class SyntheticBassDrumAttackNoise {
  69:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  public:
  70:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   SyntheticBassDrumAttackNoise() { }
  71:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumAttackNoise() { }
  72:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  73:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   void Init() {
  74:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     lp_ = 0.0f;
  75:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     hp_ = 0.0f;
  76:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   }
  77:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  78:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float Render() {
  79:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     float sample = stmlib::Random::GetFloat();
  80:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     ONE_POLE(lp_, sample, 0.05f);
  81:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     ONE_POLE(hp_, lp_, 0.005f);
  82:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****     return lp_ - hp_;
  83:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   }
  84:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  85:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  private:
  86:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float lp_;
  87:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   float hp_;
  88:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   
  89:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   DISALLOW_COPY_AND_ASSIGN(SyntheticBassDrumAttackNoise);
  90:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** };
  91:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** 
  92:eurorack/plaits/dsp/drums/synthetic_bass_drum.h **** class SyntheticBassDrum {
  93:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****  public:
  94:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   SyntheticBassDrum() { }
 398              		.loc 11 94 3 is_stmt 1 view .LVU105
 399              	.LBB1289:
 400              	.LBI1289:
  44:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumClick() { }
 401              		.loc 11 44 3 view .LVU106
 402              	.LBB1290:
 403              	.LBI1290:
 404              		.loc 9 179 3 view .LVU107
 405              		.loc 9 179 3 is_stmt 0 view .LVU108
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 26


 406              	.LBE1290:
 407              	.LBE1289:
 408              	.LBB1291:
 409              	.LBI1291:
  70:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumAttackNoise() { }
 410              		.loc 11 70 3 is_stmt 1 view .LVU109
  70:eurorack/plaits/dsp/drums/synthetic_bass_drum.h ****   ~SyntheticBassDrumAttackNoise() { }
 411              		.loc 11 70 3 is_stmt 0 view .LVU110
 412              	.LBE1291:
 413              	.LBE1288:
 414              	.LBB1292:
 415              	.LBI1292:
 416              		.file 12 "eurorack/plaits/dsp/fx/overdrive.h"
   1:eurorack/plaits/dsp/fx/overdrive.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/plaits/dsp/fx/overdrive.h **** //
   3:eurorack/plaits/dsp/fx/overdrive.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/fx/overdrive.h **** //
   5:eurorack/plaits/dsp/fx/overdrive.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/fx/overdrive.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/fx/overdrive.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/fx/overdrive.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/fx/overdrive.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/fx/overdrive.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/fx/overdrive.h **** // 
  12:eurorack/plaits/dsp/fx/overdrive.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/fx/overdrive.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/fx/overdrive.h **** // 
  15:eurorack/plaits/dsp/fx/overdrive.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/fx/overdrive.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/fx/overdrive.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/fx/overdrive.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/fx/overdrive.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/fx/overdrive.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/fx/overdrive.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/fx/overdrive.h **** // 
  23:eurorack/plaits/dsp/fx/overdrive.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/fx/overdrive.h **** //
  25:eurorack/plaits/dsp/fx/overdrive.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/fx/overdrive.h **** //
  27:eurorack/plaits/dsp/fx/overdrive.h **** // Distortion/overdrive.
  28:eurorack/plaits/dsp/fx/overdrive.h **** 
  29:eurorack/plaits/dsp/fx/overdrive.h **** #ifndef PLAITS_DSP_FX_OVERDRIVE_H_
  30:eurorack/plaits/dsp/fx/overdrive.h **** #define PLAITS_DSP_FX_OVERDRIVE_H_
  31:eurorack/plaits/dsp/fx/overdrive.h **** 
  32:eurorack/plaits/dsp/fx/overdrive.h **** #include <algorithm>
  33:eurorack/plaits/dsp/fx/overdrive.h **** 
  34:eurorack/plaits/dsp/fx/overdrive.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/fx/overdrive.h **** #include "stmlib/dsp/parameter_interpolator.h"
  36:eurorack/plaits/dsp/fx/overdrive.h **** 
  37:eurorack/plaits/dsp/fx/overdrive.h **** namespace plaits {
  38:eurorack/plaits/dsp/fx/overdrive.h ****   
  39:eurorack/plaits/dsp/fx/overdrive.h **** class Overdrive {
  40:eurorack/plaits/dsp/fx/overdrive.h ****  public:
  41:eurorack/plaits/dsp/fx/overdrive.h ****   Overdrive() { }
 417              		.loc 12 41 3 is_stmt 1 view .LVU111
 418              		.loc 12 41 3 is_stmt 0 view .LVU112
 419              	.LBE1292:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 27


 420              	.LBE1283:
 421              	.LBE1282:
 422              	.LBB1293:
 423              	.LBI1293:
 424              		.file 13 "eurorack/plaits/dsp/engine/fm_engine.h"
   1:eurorack/plaits/dsp/engine/fm_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/fm_engine.h **** //
   3:eurorack/plaits/dsp/engine/fm_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/fm_engine.h **** //
   5:eurorack/plaits/dsp/engine/fm_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/fm_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/fm_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/fm_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/fm_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/fm_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/fm_engine.h **** // 
  12:eurorack/plaits/dsp/engine/fm_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/fm_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/fm_engine.h **** // 
  15:eurorack/plaits/dsp/engine/fm_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/fm_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/fm_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/fm_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/fm_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/fm_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/fm_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/fm_engine.h **** // 
  23:eurorack/plaits/dsp/engine/fm_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/fm_engine.h **** //
  25:eurorack/plaits/dsp/engine/fm_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/fm_engine.h **** //
  27:eurorack/plaits/dsp/engine/fm_engine.h **** // Classic 2-op FM, as found in Braids, Rings and Elements.
  28:eurorack/plaits/dsp/engine/fm_engine.h **** 
  29:eurorack/plaits/dsp/engine/fm_engine.h **** #ifndef PLAITS_DSP_ENGINE_FM_ENGINE_H_
  30:eurorack/plaits/dsp/engine/fm_engine.h **** #define PLAITS_DSP_ENGINE_FM_ENGINE_H_
  31:eurorack/plaits/dsp/engine/fm_engine.h **** 
  32:eurorack/plaits/dsp/engine/fm_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/fm_engine.h **** 
  34:eurorack/plaits/dsp/engine/fm_engine.h **** namespace plaits {
  35:eurorack/plaits/dsp/engine/fm_engine.h ****   
  36:eurorack/plaits/dsp/engine/fm_engine.h **** class FMEngine : public Engine {
  37:eurorack/plaits/dsp/engine/fm_engine.h ****  public:
  38:eurorack/plaits/dsp/engine/fm_engine.h ****   FMEngine() { }
 425              		.loc 13 38 3 is_stmt 1 view .LVU113
 426              	.LBB1294:
 427              	.LBB1295:
 428              	.LBI1295:
 429              		.loc 6 80 3 view .LVU114
 430              		.loc 6 80 3 is_stmt 0 view .LVU115
 431              	.LBE1295:
 432              		.loc 13 38 14 view .LVU116
 433 0014 3349     		ldr	r1, .L24+8
 434 0016 C3F80012 		str	r1, [r3, #512]
 435              	.LVL21:
 436              		.loc 13 38 14 view .LVU117
 437              	.LBE1294:
 438              	.LBE1293:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 28


 439              	.LBB1296:
 440              	.LBI1296:
 441              		.file 14 "eurorack/plaits/dsp/engine/grain_engine.h"
   1:eurorack/plaits/dsp/engine/grain_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/grain_engine.h **** //
   3:eurorack/plaits/dsp/engine/grain_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/grain_engine.h **** //
   5:eurorack/plaits/dsp/engine/grain_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/grain_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/grain_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/grain_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/grain_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/grain_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/grain_engine.h **** // 
  12:eurorack/plaits/dsp/engine/grain_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/grain_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/grain_engine.h **** // 
  15:eurorack/plaits/dsp/engine/grain_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/grain_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/grain_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/grain_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/grain_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/grain_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/grain_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/grain_engine.h **** // 
  23:eurorack/plaits/dsp/engine/grain_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/grain_engine.h **** //
  25:eurorack/plaits/dsp/engine/grain_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/grain_engine.h **** //
  27:eurorack/plaits/dsp/engine/grain_engine.h **** // Windowed sine segments.
  28:eurorack/plaits/dsp/engine/grain_engine.h **** 
  29:eurorack/plaits/dsp/engine/grain_engine.h **** #ifndef PLAITS_DSP_ENGINE_GRAIN_ENGINE_H_
  30:eurorack/plaits/dsp/engine/grain_engine.h **** #define PLAITS_DSP_ENGINE_GRAIN_ENGINE_H_
  31:eurorack/plaits/dsp/engine/grain_engine.h **** 
  32:eurorack/plaits/dsp/engine/grain_engine.h **** #include "stmlib/dsp/filter.h"
  33:eurorack/plaits/dsp/engine/grain_engine.h **** 
  34:eurorack/plaits/dsp/engine/grain_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/grain_engine.h **** #include "plaits/dsp/oscillator/grainlet_oscillator.h"
  36:eurorack/plaits/dsp/engine/grain_engine.h **** #include "plaits/dsp/oscillator/vosim_oscillator.h"
  37:eurorack/plaits/dsp/engine/grain_engine.h **** #include "plaits/dsp/oscillator/z_oscillator.h"
  38:eurorack/plaits/dsp/engine/grain_engine.h **** 
  39:eurorack/plaits/dsp/engine/grain_engine.h **** namespace plaits {
  40:eurorack/plaits/dsp/engine/grain_engine.h ****   
  41:eurorack/plaits/dsp/engine/grain_engine.h **** class GrainEngine : public Engine {
  42:eurorack/plaits/dsp/engine/grain_engine.h ****  public:
  43:eurorack/plaits/dsp/engine/grain_engine.h ****   GrainEngine() { }
 442              		.loc 14 43 3 is_stmt 1 view .LVU118
 443              	.LBB1297:
 444              	.LBB1298:
 445              	.LBI1298:
 446              		.loc 6 80 3 view .LVU119
 447              		.loc 6 80 3 is_stmt 0 view .LVU120
 448              	.LBE1298:
 449              		.loc 14 43 17 view .LVU121
 450 001a 3349     		ldr	r1, .L24+12
 451 001c C3F83812 		str	r1, [r3, #568]
 452              		.loc 14 43 17 is_stmt 1 view .LVU122
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 29


 453              	.LVL22:
 454              	.LBB1299:
 455              	.LBI1299:
 456              		.file 15 "eurorack/plaits/dsp/oscillator/z_oscillator.h"
   1:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/z_oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/z_oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/z_oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/z_oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/z_oscillator.h **** // Sinewave multiplied by and sync'ed to a carrier.
  28:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  29:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_Z_OSCILLATOR_H_
  30:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #define PLAITS_DSP_OSCILLATOR_Z_OSCILLATOR_H_
  31:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  32:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include <algorithm>
  33:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  34:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  36:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include "stmlib/dsp/polyblep.h"
  37:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  38:eurorack/plaits/dsp/oscillator/z_oscillator.h **** #include "plaits/resources.h"
  39:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  40:eurorack/plaits/dsp/oscillator/z_oscillator.h **** namespace plaits {
  41:eurorack/plaits/dsp/oscillator/z_oscillator.h **** 
  42:eurorack/plaits/dsp/oscillator/z_oscillator.h **** class ZOscillator {
  43:eurorack/plaits/dsp/oscillator/z_oscillator.h ****  public:
  44:eurorack/plaits/dsp/oscillator/z_oscillator.h ****   ZOscillator() { }
 457              		.loc 15 44 3 view .LVU123
 458              		.loc 15 44 3 is_stmt 0 view .LVU124
 459              	.LBE1299:
 460              		.loc 14 43 17 is_stmt 1 view .LVU125
 461              		.loc 14 43 17 is_stmt 0 view .LVU126
 462              	.LBE1297:
 463              	.LBE1296:
 464              	.LBB1300:
 465              	.LBI1300:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 30


 466              		.file 16 "eurorack/plaits/dsp/engine/hi_hat_engine.h"
   1:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/hi_hat_engine.h **** //
   3:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/hi_hat_engine.h **** //
   5:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // 
  12:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // 
  15:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // 
  23:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/hi_hat_engine.h **** //
  25:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/hi_hat_engine.h **** //
  27:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // 808-style HH with two noise sources - one faithful to the original, the other
  28:eurorack/plaits/dsp/engine/hi_hat_engine.h **** // more metallic.
  29:eurorack/plaits/dsp/engine/hi_hat_engine.h **** 
  30:eurorack/plaits/dsp/engine/hi_hat_engine.h **** #ifndef PLAITS_DSP_ENGINE_HI_HAT_ENGINE_H_
  31:eurorack/plaits/dsp/engine/hi_hat_engine.h **** #define PLAITS_DSP_ENGINE_HI_HAT_ENGINE_H_
  32:eurorack/plaits/dsp/engine/hi_hat_engine.h **** 
  33:eurorack/plaits/dsp/engine/hi_hat_engine.h **** #include "plaits/dsp/drums/hi_hat.h"
  34:eurorack/plaits/dsp/engine/hi_hat_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/hi_hat_engine.h **** 
  36:eurorack/plaits/dsp/engine/hi_hat_engine.h **** namespace plaits {
  37:eurorack/plaits/dsp/engine/hi_hat_engine.h ****   
  38:eurorack/plaits/dsp/engine/hi_hat_engine.h **** class HiHatEngine : public Engine {
  39:eurorack/plaits/dsp/engine/hi_hat_engine.h ****  public:
  40:eurorack/plaits/dsp/engine/hi_hat_engine.h ****   HiHatEngine() { }
 467              		.loc 16 40 3 is_stmt 1 view .LVU127
 468              	.LBB1301:
 469              	.LBB1302:
 470              	.LBI1302:
 471              		.loc 6 80 3 view .LVU128
 472              		.loc 6 80 3 is_stmt 0 view .LVU129
 473              	.LBE1302:
 474              		.loc 16 40 17 view .LVU130
 475 0020 3249     		ldr	r1, .L24+16
 476 0022 C3F8BC12 		str	r1, [r3, #700]
 477              	.LVL23:
 478              	.LBB1303:
 479              	.LBI1303:
 480              		.file 17 "eurorack/plaits/dsp/drums/hi_hat.h"
   1:eurorack/plaits/dsp/drums/hi_hat.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/hi_hat.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 31


   3:eurorack/plaits/dsp/drums/hi_hat.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/hi_hat.h **** //
   5:eurorack/plaits/dsp/drums/hi_hat.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/hi_hat.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/hi_hat.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/hi_hat.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/hi_hat.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/hi_hat.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/hi_hat.h **** // 
  12:eurorack/plaits/dsp/drums/hi_hat.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/hi_hat.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/hi_hat.h **** // 
  15:eurorack/plaits/dsp/drums/hi_hat.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/hi_hat.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/hi_hat.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/hi_hat.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/hi_hat.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/hi_hat.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/hi_hat.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/hi_hat.h **** // 
  23:eurorack/plaits/dsp/drums/hi_hat.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/hi_hat.h **** //
  25:eurorack/plaits/dsp/drums/hi_hat.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/hi_hat.h **** //
  27:eurorack/plaits/dsp/drums/hi_hat.h **** // 808 HH, with a few extra parameters to push things to the CY territory...
  28:eurorack/plaits/dsp/drums/hi_hat.h **** // The template parameter MetallicNoiseSource allows another kind of "metallic
  29:eurorack/plaits/dsp/drums/hi_hat.h **** // noise" to be used, for results which are more similar to KR-55 or FM hi-hats.
  30:eurorack/plaits/dsp/drums/hi_hat.h **** 
  31:eurorack/plaits/dsp/drums/hi_hat.h **** #ifndef PLAITS_DSP_DRUMS_HI_HAT_H_
  32:eurorack/plaits/dsp/drums/hi_hat.h **** #define PLAITS_DSP_DRUMS_HI_HAT_H_
  33:eurorack/plaits/dsp/drums/hi_hat.h **** 
  34:eurorack/plaits/dsp/drums/hi_hat.h **** #include <algorithm>
  35:eurorack/plaits/dsp/drums/hi_hat.h **** 
  36:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/dsp/dsp.h"
  37:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/dsp/filter.h"
  38:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/dsp/parameter_interpolator.h"
  39:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/dsp/units.h"
  40:eurorack/plaits/dsp/drums/hi_hat.h **** #include "stmlib/utils/random.h"
  41:eurorack/plaits/dsp/drums/hi_hat.h **** 
  42:eurorack/plaits/dsp/drums/hi_hat.h **** #include "plaits/dsp/dsp.h"
  43:eurorack/plaits/dsp/drums/hi_hat.h **** #include "plaits/dsp/oscillator/oscillator.h"
  44:eurorack/plaits/dsp/drums/hi_hat.h **** 
  45:eurorack/plaits/dsp/drums/hi_hat.h **** namespace plaits {
  46:eurorack/plaits/dsp/drums/hi_hat.h **** 
  47:eurorack/plaits/dsp/drums/hi_hat.h **** // 808 style "metallic noise" with 6 square oscillators.
  48:eurorack/plaits/dsp/drums/hi_hat.h **** class SquareNoise {
  49:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
  50:eurorack/plaits/dsp/drums/hi_hat.h ****   SquareNoise() { }
  51:eurorack/plaits/dsp/drums/hi_hat.h ****   ~SquareNoise() { }
  52:eurorack/plaits/dsp/drums/hi_hat.h **** 
  53:eurorack/plaits/dsp/drums/hi_hat.h ****   void Init() {
  54:eurorack/plaits/dsp/drums/hi_hat.h ****     std::fill(&phase_[0], &phase_[6], 0);
  55:eurorack/plaits/dsp/drums/hi_hat.h ****   }
  56:eurorack/plaits/dsp/drums/hi_hat.h ****     
  57:eurorack/plaits/dsp/drums/hi_hat.h ****   void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
  58:eurorack/plaits/dsp/drums/hi_hat.h ****     const float ratios[6] = {
  59:eurorack/plaits/dsp/drums/hi_hat.h ****         // Nominal f0: 414 Hz
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 32


  60:eurorack/plaits/dsp/drums/hi_hat.h ****         1.0f, 1.304f, 1.466f, 1.787f, 1.932f, 2.536f
  61:eurorack/plaits/dsp/drums/hi_hat.h ****     };
  62:eurorack/plaits/dsp/drums/hi_hat.h ****   
  63:eurorack/plaits/dsp/drums/hi_hat.h ****     uint32_t increment[6];
  64:eurorack/plaits/dsp/drums/hi_hat.h ****     uint32_t phase[6];
  65:eurorack/plaits/dsp/drums/hi_hat.h ****     for (int i = 0; i < 6; ++i) {
  66:eurorack/plaits/dsp/drums/hi_hat.h ****       float f = f0 * ratios[i];
  67:eurorack/plaits/dsp/drums/hi_hat.h ****       if (f >= 0.499f) f = 0.499f;
  68:eurorack/plaits/dsp/drums/hi_hat.h ****       increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
  69:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[i] = phase_[i];
  70:eurorack/plaits/dsp/drums/hi_hat.h ****     }
  71:eurorack/plaits/dsp/drums/hi_hat.h **** 
  72:eurorack/plaits/dsp/drums/hi_hat.h ****     while (size--) {
  73:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[0] += increment[0];
  74:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[1] += increment[1];
  75:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[2] += increment[2];
  76:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[3] += increment[3];
  77:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[4] += increment[4];
  78:eurorack/plaits/dsp/drums/hi_hat.h ****       phase[5] += increment[5];
  79:eurorack/plaits/dsp/drums/hi_hat.h ****       uint32_t noise = 0;
  80:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[0] >> 31);
  81:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[1] >> 31);
  82:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[2] >> 31);
  83:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[3] >> 31);
  84:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[4] >> 31);
  85:eurorack/plaits/dsp/drums/hi_hat.h ****       noise += (phase[5] >> 31);
  86:eurorack/plaits/dsp/drums/hi_hat.h ****       *out++ = 0.33f * static_cast<float>(noise) - 1.0f;
  87:eurorack/plaits/dsp/drums/hi_hat.h ****     }
  88:eurorack/plaits/dsp/drums/hi_hat.h ****   
  89:eurorack/plaits/dsp/drums/hi_hat.h ****     for (int i = 0; i < 6; ++i) {
  90:eurorack/plaits/dsp/drums/hi_hat.h ****       phase_[i] = phase[i];
  91:eurorack/plaits/dsp/drums/hi_hat.h ****     }
  92:eurorack/plaits/dsp/drums/hi_hat.h ****   }
  93:eurorack/plaits/dsp/drums/hi_hat.h **** 
  94:eurorack/plaits/dsp/drums/hi_hat.h ****  private:
  95:eurorack/plaits/dsp/drums/hi_hat.h ****   uint32_t phase_[6];
  96:eurorack/plaits/dsp/drums/hi_hat.h **** 
  97:eurorack/plaits/dsp/drums/hi_hat.h ****   DISALLOW_COPY_AND_ASSIGN(SquareNoise);
  98:eurorack/plaits/dsp/drums/hi_hat.h **** };
  99:eurorack/plaits/dsp/drums/hi_hat.h **** 
 100:eurorack/plaits/dsp/drums/hi_hat.h **** class RingModNoise {
 101:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
 102:eurorack/plaits/dsp/drums/hi_hat.h ****   RingModNoise() { }
 103:eurorack/plaits/dsp/drums/hi_hat.h ****   ~RingModNoise() { }
 104:eurorack/plaits/dsp/drums/hi_hat.h **** 
 105:eurorack/plaits/dsp/drums/hi_hat.h ****   void Init() {
 106:eurorack/plaits/dsp/drums/hi_hat.h ****     for (int i = 0; i < 6; ++i) {
 107:eurorack/plaits/dsp/drums/hi_hat.h ****       oscillator_[i].Init();
 108:eurorack/plaits/dsp/drums/hi_hat.h ****     }
 109:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 110:eurorack/plaits/dsp/drums/hi_hat.h ****   
 111:eurorack/plaits/dsp/drums/hi_hat.h ****   void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
 112:eurorack/plaits/dsp/drums/hi_hat.h ****     const float ratio = f0 / (0.01f + f0);
 113:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f1a = 200.0f / kSampleRate * ratio;
 114:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f1b = 7530.0f / kSampleRate * ratio;
 115:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f2a = 510.0f / kSampleRate * ratio;
 116:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f2b = 8075.0f / kSampleRate * ratio;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 33


 117:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f3a = 730.0f / kSampleRate * ratio;
 118:eurorack/plaits/dsp/drums/hi_hat.h ****     const float f3b = 10500.0f / kSampleRate * ratio;
 119:eurorack/plaits/dsp/drums/hi_hat.h ****     
 120:eurorack/plaits/dsp/drums/hi_hat.h ****     std::fill(&out[0], &out[size], 0.0f);
 121:eurorack/plaits/dsp/drums/hi_hat.h ****     
 122:eurorack/plaits/dsp/drums/hi_hat.h ****     RenderPair(&oscillator_[0], f1a, f1b, temp_1, temp_2, out, size);
 123:eurorack/plaits/dsp/drums/hi_hat.h ****     RenderPair(&oscillator_[2], f2a, f2b, temp_1, temp_2, out, size);
 124:eurorack/plaits/dsp/drums/hi_hat.h ****     RenderPair(&oscillator_[4], f3a, f3b, temp_1, temp_2, out, size);
 125:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 126:eurorack/plaits/dsp/drums/hi_hat.h **** 
 127:eurorack/plaits/dsp/drums/hi_hat.h ****  private:
 128:eurorack/plaits/dsp/drums/hi_hat.h ****   void RenderPair(
 129:eurorack/plaits/dsp/drums/hi_hat.h ****       Oscillator* osc,
 130:eurorack/plaits/dsp/drums/hi_hat.h ****       float f1,
 131:eurorack/plaits/dsp/drums/hi_hat.h ****       float f2,
 132:eurorack/plaits/dsp/drums/hi_hat.h ****       float* temp_1,
 133:eurorack/plaits/dsp/drums/hi_hat.h ****       float* temp_2,
 134:eurorack/plaits/dsp/drums/hi_hat.h ****       float* out,
 135:eurorack/plaits/dsp/drums/hi_hat.h ****       size_t size) {
 136:eurorack/plaits/dsp/drums/hi_hat.h ****     osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
 137:eurorack/plaits/dsp/drums/hi_hat.h ****     osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
 138:eurorack/plaits/dsp/drums/hi_hat.h ****     while (size--) {
 139:eurorack/plaits/dsp/drums/hi_hat.h ****       *out++ += *temp_1++ * *temp_2++;
 140:eurorack/plaits/dsp/drums/hi_hat.h ****     }
 141:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 142:eurorack/plaits/dsp/drums/hi_hat.h ****   Oscillator oscillator_[6];
 143:eurorack/plaits/dsp/drums/hi_hat.h ****   
 144:eurorack/plaits/dsp/drums/hi_hat.h ****   DISALLOW_COPY_AND_ASSIGN(RingModNoise);
 145:eurorack/plaits/dsp/drums/hi_hat.h **** };
 146:eurorack/plaits/dsp/drums/hi_hat.h **** 
 147:eurorack/plaits/dsp/drums/hi_hat.h **** class SwingVCA {
 148:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
 149:eurorack/plaits/dsp/drums/hi_hat.h ****   float operator()(float s, float gain) {
 150:eurorack/plaits/dsp/drums/hi_hat.h ****    s *= s > 0.0f ? 10.0f : 0.1f;
 151:eurorack/plaits/dsp/drums/hi_hat.h ****    s = s / (1.0f + fabsf(s));
 152:eurorack/plaits/dsp/drums/hi_hat.h ****    return (s + 1.0f) * gain;
 153:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 154:eurorack/plaits/dsp/drums/hi_hat.h **** };
 155:eurorack/plaits/dsp/drums/hi_hat.h **** 
 156:eurorack/plaits/dsp/drums/hi_hat.h **** class LinearVCA {
 157:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
 158:eurorack/plaits/dsp/drums/hi_hat.h ****   float operator()(float s, float gain) {
 159:eurorack/plaits/dsp/drums/hi_hat.h ****    return s * gain;
 160:eurorack/plaits/dsp/drums/hi_hat.h ****   }
 161:eurorack/plaits/dsp/drums/hi_hat.h **** };
 162:eurorack/plaits/dsp/drums/hi_hat.h **** 
 163:eurorack/plaits/dsp/drums/hi_hat.h **** template<typename MetallicNoiseSource, typename VCA, bool resonance>
 164:eurorack/plaits/dsp/drums/hi_hat.h **** class HiHat {
 165:eurorack/plaits/dsp/drums/hi_hat.h ****  public:
 166:eurorack/plaits/dsp/drums/hi_hat.h ****   HiHat() { }
 481              		.loc 17 166 3 is_stmt 1 view .LVU131
 482              	.LBB1304:
 483              	.LBI1304:
  50:eurorack/plaits/dsp/drums/hi_hat.h ****   ~SquareNoise() { }
 484              		.loc 17 50 3 view .LVU132
  50:eurorack/plaits/dsp/drums/hi_hat.h ****   ~SquareNoise() { }
 485              		.loc 17 50 3 is_stmt 0 view .LVU133
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 34


 486              	.LBE1304:
 487              	.LBB1305:
 488              	.LBI1305:
 489              		.loc 9 179 3 is_stmt 1 view .LVU134
 490              		.loc 9 179 3 is_stmt 0 view .LVU135
 491              	.LBE1305:
 492              	.LBB1306:
 493              	.LBI1306:
 494              		.loc 9 179 3 is_stmt 1 view .LVU136
 495              		.loc 9 179 3 is_stmt 0 view .LVU137
 496              	.LBE1306:
 497              	.LBE1303:
 498              	.LBB1307:
 499              	.LBI1307:
 500              		.loc 17 166 3 is_stmt 1 view .LVU138
 501              	.LBB1308:
 502              	.LBI1308:
 102:eurorack/plaits/dsp/drums/hi_hat.h ****   ~RingModNoise() { }
 503              		.loc 17 102 3 view .LVU139
 504              	.LBE1308:
 505              	.LBE1307:
 506              	.LBE1301:
 507              	.LBE1300:
 508              	.LBE1278:
 509              	.LBE1387:
 102:eurorack/plaits/dsp/drums/hi_hat.h ****   ~RingModNoise() { }
 510              		.loc 17 102 18 view .LVU140
 511              	.LBB1388:
 512              	.LBB1378:
 513              	.LBB1313:
 514              	.LBB1312:
 515              	.LBB1311:
 516              	.LBB1309:
 517              	.LBI1309:
 518              		.loc 9 179 3 view .LVU141
 519              		.loc 9 179 3 is_stmt 0 view .LVU142
 520              	.LBE1309:
 521              	.LBB1310:
 522              	.LBI1310:
 523              		.loc 9 179 3 is_stmt 1 view .LVU143
 524              		.loc 9 179 3 is_stmt 0 view .LVU144
 525              	.LBE1310:
 526              	.LBE1311:
 527              	.LBE1312:
 528              	.LBE1313:
 529              	.LBB1314:
 530              	.LBI1314:
 531              		.file 18 "eurorack/plaits/dsp/engine/modal_engine.h"
   1:eurorack/plaits/dsp/engine/modal_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/modal_engine.h **** //
   3:eurorack/plaits/dsp/engine/modal_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/modal_engine.h **** //
   5:eurorack/plaits/dsp/engine/modal_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/modal_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/modal_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/modal_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/modal_engine.h **** // copies of the Software, and to permit persons to whom the Software is
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 35


  10:eurorack/plaits/dsp/engine/modal_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/modal_engine.h **** // 
  12:eurorack/plaits/dsp/engine/modal_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/modal_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/modal_engine.h **** // 
  15:eurorack/plaits/dsp/engine/modal_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/modal_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/modal_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/modal_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/modal_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/modal_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/modal_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/modal_engine.h **** // 
  23:eurorack/plaits/dsp/engine/modal_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/modal_engine.h **** //
  25:eurorack/plaits/dsp/engine/modal_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/modal_engine.h **** //
  27:eurorack/plaits/dsp/engine/modal_engine.h **** // One voice of modal synthesis.
  28:eurorack/plaits/dsp/engine/modal_engine.h **** 
  29:eurorack/plaits/dsp/engine/modal_engine.h **** #ifndef PLAITS_DSP_ENGINE_MODAL_ENGINE_H_
  30:eurorack/plaits/dsp/engine/modal_engine.h **** #define PLAITS_DSP_ENGINE_MODAL_ENGINE_H_
  31:eurorack/plaits/dsp/engine/modal_engine.h **** 
  32:eurorack/plaits/dsp/engine/modal_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/modal_engine.h **** #include "plaits/dsp/physical_modelling/modal_voice.h"
  34:eurorack/plaits/dsp/engine/modal_engine.h **** 
  35:eurorack/plaits/dsp/engine/modal_engine.h **** namespace plaits {
  36:eurorack/plaits/dsp/engine/modal_engine.h **** 
  37:eurorack/plaits/dsp/engine/modal_engine.h **** class ModalEngine : public Engine {
  38:eurorack/plaits/dsp/engine/modal_engine.h ****  public:
  39:eurorack/plaits/dsp/engine/modal_engine.h ****   ModalEngine() { }
 532              		.loc 18 39 3 is_stmt 1 view .LVU145
 533              	.LBB1315:
 534              	.LBB1316:
 535              	.LBI1316:
 536              		.loc 6 80 3 view .LVU146
 537              		.loc 6 80 3 is_stmt 0 view .LVU147
 538              	.LBE1316:
 539              		.loc 18 39 17 view .LVU148
 540 0026 3249     		ldr	r1, .L24+20
 541 0028 C3F80414 		str	r1, [r3, #1028]
 542              	.LVL24:
 543              	.LBB1317:
 544              	.LBI1317:
 545              		.file 19 "eurorack/plaits/dsp/physical_modelling/modal_voice.h"
   1:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** //
   3:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** //
   5:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // 
  12:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // all copies or substantial portions of the Software.
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 36


  14:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // 
  15:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // 
  23:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** //
  25:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** //
  27:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // Simple modal synthesis voice with a mallet exciter:
  28:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // click -> LPF -> resonator.
  29:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // 
  30:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // The click is replaced by continuous white noise when the trigger input
  31:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** // of the module is not patched.
  32:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** 
  33:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** #ifndef PLAITS_DSP_PHYSICAL_MODELLING_MODAL_VOICE_H_
  34:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** #define PLAITS_DSP_PHYSICAL_MODELLING_MODAL_VOICE_H_
  35:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** 
  36:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** #include "plaits/dsp/physical_modelling/resonator.h"
  37:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** 
  38:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** namespace plaits {
  39:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** 
  40:eurorack/plaits/dsp/physical_modelling/modal_voice.h **** class ModalVoice {
  41:eurorack/plaits/dsp/physical_modelling/modal_voice.h ****  public:
  42:eurorack/plaits/dsp/physical_modelling/modal_voice.h ****   ModalVoice() { }
 546              		.loc 19 42 3 is_stmt 1 view .LVU149
 547              	.LBB1318:
 548              	.LBI1318:
 549              		.file 20 "eurorack/plaits/dsp/physical_modelling/resonator.h"
   1:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
   3:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
   5:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/physical_modelling/resonator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/physical_modelling/resonator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/physical_modelling/resonator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/physical_modelling/resonator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/physical_modelling/resonator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/physical_modelling/resonator.h **** // 
  12:eurorack/plaits/dsp/physical_modelling/resonator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/physical_modelling/resonator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/physical_modelling/resonator.h **** // 
  15:eurorack/plaits/dsp/physical_modelling/resonator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/physical_modelling/resonator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/physical_modelling/resonator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/physical_modelling/resonator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/physical_modelling/resonator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/physical_modelling/resonator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/physical_modelling/resonator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/physical_modelling/resonator.h **** // 
  23:eurorack/plaits/dsp/physical_modelling/resonator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 37


  25:eurorack/plaits/dsp/physical_modelling/resonator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
  27:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Resonator, taken from Rings' code but with fixed position.
  28:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  29:eurorack/plaits/dsp/physical_modelling/resonator.h **** #ifndef PLAITS_DSP_PHYSICAL_MODELLING_RESONATOR_H_
  30:eurorack/plaits/dsp/physical_modelling/resonator.h **** #define PLAITS_DSP_PHYSICAL_MODELLING_RESONATOR_H_
  31:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  32:eurorack/plaits/dsp/physical_modelling/resonator.h **** #include "stmlib/dsp/filter.h"
  33:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  34:eurorack/plaits/dsp/physical_modelling/resonator.h **** namespace plaits {
  35:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  36:eurorack/plaits/dsp/physical_modelling/resonator.h **** const int kMaxNumModes = 24;
  37:eurorack/plaits/dsp/physical_modelling/resonator.h **** const int kModeBatchSize = 4;
  38:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  39:eurorack/plaits/dsp/physical_modelling/resonator.h **** // We render 4 modes simultaneously since there are enough registers to hold
  40:eurorack/plaits/dsp/physical_modelling/resonator.h **** // all state variables.
  41:eurorack/plaits/dsp/physical_modelling/resonator.h **** template<int batch_size>
  42:eurorack/plaits/dsp/physical_modelling/resonator.h **** class ResonatorSvf {
  43:eurorack/plaits/dsp/physical_modelling/resonator.h ****  public:
  44:eurorack/plaits/dsp/physical_modelling/resonator.h ****   ResonatorSvf() { }
 550              		.loc 20 44 3 view .LVU150
 551              		.loc 20 44 3 is_stmt 0 view .LVU151
 552              	.LBE1318:
 553              	.LBB1319:
 554              	.LBI1319:
  45:eurorack/plaits/dsp/physical_modelling/resonator.h ****   ~ResonatorSvf() { }
  46:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
  47:eurorack/plaits/dsp/physical_modelling/resonator.h ****   void Init() {
  48:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
  49:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1_[i] = state_2_[i] = 0.0f;
  50:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  51:eurorack/plaits/dsp/physical_modelling/resonator.h ****   }
  52:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
  53:eurorack/plaits/dsp/physical_modelling/resonator.h ****   template<stmlib::FilterMode mode, bool add>
  54:eurorack/plaits/dsp/physical_modelling/resonator.h ****   void Process(
  55:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* f,
  56:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* q,
  57:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* gain,
  58:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* in,
  59:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float* out,
  60:eurorack/plaits/dsp/physical_modelling/resonator.h ****       size_t size) {
  61:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float g[batch_size];
  62:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float r[batch_size];
  63:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float r_plus_g[batch_size];
  64:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float h[batch_size];
  65:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float state_1[batch_size];
  66:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float state_2[batch_size];
  67:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float gains[batch_size];
  68:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
  69:eurorack/plaits/dsp/physical_modelling/resonator.h ****       g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
  70:eurorack/plaits/dsp/physical_modelling/resonator.h ****       r[i] = 1.0f / q[i];
  71:eurorack/plaits/dsp/physical_modelling/resonator.h ****       h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
  72:eurorack/plaits/dsp/physical_modelling/resonator.h ****       r_plus_g[i] = r[i] + g[i];
  73:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1[i] = state_1_[i];
  74:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_2[i] = state_2_[i];
  75:eurorack/plaits/dsp/physical_modelling/resonator.h ****       gains[i] = gain[i];
  76:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 38


  77:eurorack/plaits/dsp/physical_modelling/resonator.h ****     
  78:eurorack/plaits/dsp/physical_modelling/resonator.h ****     while (size--) {
  79:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float s_in = *in++;
  80:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float s_out = 0.0f;
  81:eurorack/plaits/dsp/physical_modelling/resonator.h ****       for (int i = 0; i < batch_size; ++i) {
  82:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
  83:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float bp = g[i] * hp + state_1[i];
  84:eurorack/plaits/dsp/physical_modelling/resonator.h ****         state_1[i] = g[i] * hp + bp;
  85:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float lp = g[i] * bp + state_2[i];
  86:eurorack/plaits/dsp/physical_modelling/resonator.h ****         state_2[i] = g[i] * bp + lp;
  87:eurorack/plaits/dsp/physical_modelling/resonator.h ****         s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
  88:eurorack/plaits/dsp/physical_modelling/resonator.h ****       }
  89:eurorack/plaits/dsp/physical_modelling/resonator.h ****       if (add) {
  90:eurorack/plaits/dsp/physical_modelling/resonator.h ****         *out++ += s_out;
  91:eurorack/plaits/dsp/physical_modelling/resonator.h ****       } else {
  92:eurorack/plaits/dsp/physical_modelling/resonator.h ****         *out++ = s_out;
  93:eurorack/plaits/dsp/physical_modelling/resonator.h ****       }
  94:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  95:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
  96:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1_[i] = state_1[i];
  97:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_2_[i] = state_2[i];
  98:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  99:eurorack/plaits/dsp/physical_modelling/resonator.h ****   }
 100:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
 101:eurorack/plaits/dsp/physical_modelling/resonator.h ****  private:
 102:eurorack/plaits/dsp/physical_modelling/resonator.h ****   float state_1_[batch_size];
 103:eurorack/plaits/dsp/physical_modelling/resonator.h ****   float state_2_[batch_size];
 104:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
 105:eurorack/plaits/dsp/physical_modelling/resonator.h ****   DISALLOW_COPY_AND_ASSIGN(ResonatorSvf);
 106:eurorack/plaits/dsp/physical_modelling/resonator.h **** };
 107:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
 108:eurorack/plaits/dsp/physical_modelling/resonator.h **** class Resonator {
 109:eurorack/plaits/dsp/physical_modelling/resonator.h ****  public:
 110:eurorack/plaits/dsp/physical_modelling/resonator.h ****   Resonator() { }
 555              		.loc 20 110 3 is_stmt 1 view .LVU152
 556              	.LBE1319:
 557              	.LBE1317:
 558              	.LBE1315:
 559              	.LBE1314:
 560              	.LBE1378:
 561              	.LBE1388:
 562              		.loc 20 110 15 view .LVU153
 563              	.LBB1389:
 564              	.LBB1379:
 565              	.LBB1320:
 566              	.LBI1320:
 567              		.file 21 "eurorack/plaits/dsp/engine/noise_engine.h"
   1:eurorack/plaits/dsp/engine/noise_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/noise_engine.h **** //
   3:eurorack/plaits/dsp/engine/noise_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/noise_engine.h **** //
   5:eurorack/plaits/dsp/engine/noise_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/noise_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/noise_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/noise_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/noise_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/noise_engine.h **** // furnished to do so, subject to the following conditions:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 39


  11:eurorack/plaits/dsp/engine/noise_engine.h **** // 
  12:eurorack/plaits/dsp/engine/noise_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/noise_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/noise_engine.h **** // 
  15:eurorack/plaits/dsp/engine/noise_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/noise_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/noise_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/noise_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/noise_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/noise_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/noise_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/noise_engine.h **** // 
  23:eurorack/plaits/dsp/engine/noise_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/noise_engine.h **** //
  25:eurorack/plaits/dsp/engine/noise_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/noise_engine.h **** //
  27:eurorack/plaits/dsp/engine/noise_engine.h **** // Clocked noise processed by a multimode filter.
  28:eurorack/plaits/dsp/engine/noise_engine.h **** 
  29:eurorack/plaits/dsp/engine/noise_engine.h **** #ifndef PLAITS_DSP_ENGINE_NOISE_ENGINE_H_
  30:eurorack/plaits/dsp/engine/noise_engine.h **** #define PLAITS_DSP_ENGINE_NOISE_ENGINE_H_
  31:eurorack/plaits/dsp/engine/noise_engine.h **** 
  32:eurorack/plaits/dsp/engine/noise_engine.h **** #include "stmlib/dsp/filter.h"
  33:eurorack/plaits/dsp/engine/noise_engine.h **** 
  34:eurorack/plaits/dsp/engine/noise_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/noise_engine.h **** #include "plaits/dsp/noise/clocked_noise.h"
  36:eurorack/plaits/dsp/engine/noise_engine.h **** 
  37:eurorack/plaits/dsp/engine/noise_engine.h **** namespace plaits {
  38:eurorack/plaits/dsp/engine/noise_engine.h **** 
  39:eurorack/plaits/dsp/engine/noise_engine.h **** class NoiseEngine : public Engine {
  40:eurorack/plaits/dsp/engine/noise_engine.h ****  public:
  41:eurorack/plaits/dsp/engine/noise_engine.h ****   NoiseEngine() { }
 568              		.loc 21 41 3 view .LVU154
 569              	.LBB1321:
 570              	.LBB1322:
 571              	.LBI1322:
 572              		.loc 6 80 3 view .LVU155
 573              		.loc 6 80 3 is_stmt 0 view .LVU156
 574              	.LBE1322:
 575              		.loc 21 41 17 view .LVU157
 576 002c 3149     		ldr	r1, .L24+24
 577 002e C3F84815 		str	r1, [r3, #1352]
 578              		.loc 21 41 17 is_stmt 1 view .LVU158
 579              	.LVL25:
 580              	.LBB1323:
 581              	.LBI1323:
 582              		.loc 9 179 3 view .LVU159
 583              		.loc 9 179 3 is_stmt 0 view .LVU160
 584              	.LBE1323:
 585              		.loc 21 41 17 is_stmt 1 view .LVU161
 586              		.loc 21 41 17 is_stmt 0 view .LVU162
 587              	.LBE1321:
 588              	.LBE1320:
 589              	.LBB1324:
 590              	.LBI1324:
 591              		.file 22 "eurorack/plaits/dsp/engine/particle_engine.h"
   1:eurorack/plaits/dsp/engine/particle_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/particle_engine.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 40


   3:eurorack/plaits/dsp/engine/particle_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/particle_engine.h **** //
   5:eurorack/plaits/dsp/engine/particle_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/particle_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/particle_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/particle_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/particle_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/particle_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/particle_engine.h **** // 
  12:eurorack/plaits/dsp/engine/particle_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/particle_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/particle_engine.h **** // 
  15:eurorack/plaits/dsp/engine/particle_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/particle_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/particle_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/particle_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/particle_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/particle_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/particle_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/particle_engine.h **** // 
  23:eurorack/plaits/dsp/engine/particle_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/particle_engine.h **** //
  25:eurorack/plaits/dsp/engine/particle_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/particle_engine.h **** //
  27:eurorack/plaits/dsp/engine/particle_engine.h **** // Filtered random pulses.
  28:eurorack/plaits/dsp/engine/particle_engine.h **** 
  29:eurorack/plaits/dsp/engine/particle_engine.h **** #ifndef PLAITS_DSP_ENGINE_PARTICLE_ENGINE_H_
  30:eurorack/plaits/dsp/engine/particle_engine.h **** #define PLAITS_DSP_ENGINE_PARTICLE_ENGINE_H_
  31:eurorack/plaits/dsp/engine/particle_engine.h **** 
  32:eurorack/plaits/dsp/engine/particle_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/particle_engine.h **** #include "plaits/dsp/fx/diffuser.h"
  34:eurorack/plaits/dsp/engine/particle_engine.h **** #include "plaits/dsp/noise/particle.h"
  35:eurorack/plaits/dsp/engine/particle_engine.h **** 
  36:eurorack/plaits/dsp/engine/particle_engine.h **** namespace plaits {
  37:eurorack/plaits/dsp/engine/particle_engine.h **** 
  38:eurorack/plaits/dsp/engine/particle_engine.h **** const int kNumParticles = 6;
  39:eurorack/plaits/dsp/engine/particle_engine.h **** 
  40:eurorack/plaits/dsp/engine/particle_engine.h **** class ParticleEngine : public Engine {
  41:eurorack/plaits/dsp/engine/particle_engine.h ****  public:
  42:eurorack/plaits/dsp/engine/particle_engine.h ****   ParticleEngine() { }
 592              		.loc 22 42 3 is_stmt 1 view .LVU163
 593              	.LBB1325:
 594              	.LBB1326:
 595              	.LBI1326:
 596              		.loc 6 80 3 view .LVU164
 597              		.loc 6 80 3 is_stmt 0 view .LVU165
 598              	.LBE1326:
 599              		.loc 22 42 20 view .LVU166
 600 0032 3149     		ldr	r1, .L24+28
 601 0034 C3F8C815 		str	r1, [r3, #1480]
 602              		.loc 22 42 20 is_stmt 1 view .LVU167
 603              	.LVL26:
 604              	.LBB1327:
 605              	.LBI1327:
 606              		.file 23 "eurorack/plaits/dsp/fx/diffuser.h"
   1:eurorack/plaits/dsp/fx/diffuser.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/fx/diffuser.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 41


   3:eurorack/plaits/dsp/fx/diffuser.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/fx/diffuser.h **** //
   5:eurorack/plaits/dsp/fx/diffuser.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/fx/diffuser.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/fx/diffuser.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/fx/diffuser.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/fx/diffuser.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/fx/diffuser.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/fx/diffuser.h **** // 
  12:eurorack/plaits/dsp/fx/diffuser.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/fx/diffuser.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/fx/diffuser.h **** // 
  15:eurorack/plaits/dsp/fx/diffuser.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/fx/diffuser.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/fx/diffuser.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/fx/diffuser.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/fx/diffuser.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/fx/diffuser.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/fx/diffuser.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/fx/diffuser.h **** // 
  23:eurorack/plaits/dsp/fx/diffuser.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/fx/diffuser.h **** //
  25:eurorack/plaits/dsp/fx/diffuser.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/fx/diffuser.h **** //
  27:eurorack/plaits/dsp/fx/diffuser.h **** // Granular diffuser.
  28:eurorack/plaits/dsp/fx/diffuser.h **** 
  29:eurorack/plaits/dsp/fx/diffuser.h **** #ifndef PLAITS_DSP_FX_DIFFUSER_H_
  30:eurorack/plaits/dsp/fx/diffuser.h **** #define PLAITS_DSP_FX_DIFFUSER_H_
  31:eurorack/plaits/dsp/fx/diffuser.h **** 
  32:eurorack/plaits/dsp/fx/diffuser.h **** #include "stmlib/stmlib.h"
  33:eurorack/plaits/dsp/fx/diffuser.h **** 
  34:eurorack/plaits/dsp/fx/diffuser.h **** #include "plaits/dsp/fx/fx_engine.h"
  35:eurorack/plaits/dsp/fx/diffuser.h **** 
  36:eurorack/plaits/dsp/fx/diffuser.h **** namespace plaits {
  37:eurorack/plaits/dsp/fx/diffuser.h **** 
  38:eurorack/plaits/dsp/fx/diffuser.h **** class Diffuser {
  39:eurorack/plaits/dsp/fx/diffuser.h ****  public:
  40:eurorack/plaits/dsp/fx/diffuser.h ****   Diffuser() { }
 607              		.loc 23 40 3 view .LVU168
 608              	.LBB1328:
 609              	.LBI1328:
 610              		.file 24 "eurorack/plaits/dsp/fx/fx_engine.h"
   1:eurorack/plaits/dsp/fx/fx_engine.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/plaits/dsp/fx/fx_engine.h **** //
   3:eurorack/plaits/dsp/fx/fx_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/fx/fx_engine.h **** //
   5:eurorack/plaits/dsp/fx/fx_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/fx/fx_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/fx/fx_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/fx/fx_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/fx/fx_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/fx/fx_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/fx/fx_engine.h **** // 
  12:eurorack/plaits/dsp/fx/fx_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/fx/fx_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/fx/fx_engine.h **** // 
  15:eurorack/plaits/dsp/fx/fx_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 42


  16:eurorack/plaits/dsp/fx/fx_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/fx/fx_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/fx/fx_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/fx/fx_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/fx/fx_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/fx/fx_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/fx/fx_engine.h **** // 
  23:eurorack/plaits/dsp/fx/fx_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/fx/fx_engine.h **** //
  25:eurorack/plaits/dsp/fx/fx_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/fx/fx_engine.h **** //
  27:eurorack/plaits/dsp/fx/fx_engine.h **** // Base class for building reverbs.
  28:eurorack/plaits/dsp/fx/fx_engine.h **** 
  29:eurorack/plaits/dsp/fx/fx_engine.h **** #ifndef PLAITS_DSP_FX_FX_ENGINE_H_
  30:eurorack/plaits/dsp/fx/fx_engine.h **** #define PLAITS_DSP_FX_FX_ENGINE_H_
  31:eurorack/plaits/dsp/fx/fx_engine.h **** 
  32:eurorack/plaits/dsp/fx/fx_engine.h **** #include <algorithm>
  33:eurorack/plaits/dsp/fx/fx_engine.h **** 
  34:eurorack/plaits/dsp/fx/fx_engine.h **** #include "stmlib/stmlib.h"
  35:eurorack/plaits/dsp/fx/fx_engine.h **** 
  36:eurorack/plaits/dsp/fx/fx_engine.h **** #include "stmlib/dsp/dsp.h"
  37:eurorack/plaits/dsp/fx/fx_engine.h **** #include "stmlib/dsp/cosine_oscillator.h"
  38:eurorack/plaits/dsp/fx/fx_engine.h **** 
  39:eurorack/plaits/dsp/fx/fx_engine.h **** namespace plaits {
  40:eurorack/plaits/dsp/fx/fx_engine.h **** 
  41:eurorack/plaits/dsp/fx/fx_engine.h **** #define TAIL , -1
  42:eurorack/plaits/dsp/fx/fx_engine.h **** 
  43:eurorack/plaits/dsp/fx/fx_engine.h **** enum Format {
  44:eurorack/plaits/dsp/fx/fx_engine.h ****   FORMAT_12_BIT,
  45:eurorack/plaits/dsp/fx/fx_engine.h ****   FORMAT_16_BIT,
  46:eurorack/plaits/dsp/fx/fx_engine.h ****   FORMAT_32_BIT
  47:eurorack/plaits/dsp/fx/fx_engine.h **** };
  48:eurorack/plaits/dsp/fx/fx_engine.h **** 
  49:eurorack/plaits/dsp/fx/fx_engine.h **** enum LFOIndex {
  50:eurorack/plaits/dsp/fx/fx_engine.h ****   LFO_1,
  51:eurorack/plaits/dsp/fx/fx_engine.h ****   LFO_2
  52:eurorack/plaits/dsp/fx/fx_engine.h **** };
  53:eurorack/plaits/dsp/fx/fx_engine.h **** 
  54:eurorack/plaits/dsp/fx/fx_engine.h **** template<Format format>
  55:eurorack/plaits/dsp/fx/fx_engine.h **** struct DataType { };
  56:eurorack/plaits/dsp/fx/fx_engine.h **** 
  57:eurorack/plaits/dsp/fx/fx_engine.h **** template<>
  58:eurorack/plaits/dsp/fx/fx_engine.h **** struct DataType<FORMAT_12_BIT> {
  59:eurorack/plaits/dsp/fx/fx_engine.h ****   typedef uint16_t T;
  60:eurorack/plaits/dsp/fx/fx_engine.h ****   
  61:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline float Decompress(T value) {
  62:eurorack/plaits/dsp/fx/fx_engine.h ****     return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
  63:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  64:eurorack/plaits/dsp/fx/fx_engine.h ****   
  65:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline T Compress(float value) {
  66:eurorack/plaits/dsp/fx/fx_engine.h ****     return static_cast<uint16_t>(
  67:eurorack/plaits/dsp/fx/fx_engine.h ****         stmlib::Clip16(static_cast<int32_t>(value * 4096.0f)));
  68:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  69:eurorack/plaits/dsp/fx/fx_engine.h **** };
  70:eurorack/plaits/dsp/fx/fx_engine.h **** 
  71:eurorack/plaits/dsp/fx/fx_engine.h **** template<>
  72:eurorack/plaits/dsp/fx/fx_engine.h **** struct DataType<FORMAT_16_BIT> {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 43


  73:eurorack/plaits/dsp/fx/fx_engine.h ****   typedef uint16_t T;
  74:eurorack/plaits/dsp/fx/fx_engine.h ****   
  75:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline float Decompress(T value) {
  76:eurorack/plaits/dsp/fx/fx_engine.h ****     return static_cast<float>(static_cast<int16_t>(value)) / 32768.0f;
  77:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  78:eurorack/plaits/dsp/fx/fx_engine.h ****   
  79:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline T Compress(float value) {
  80:eurorack/plaits/dsp/fx/fx_engine.h ****     return static_cast<uint16_t>(
  81:eurorack/plaits/dsp/fx/fx_engine.h ****         stmlib::Clip16(static_cast<int32_t>(value * 32768.0f)));
  82:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  83:eurorack/plaits/dsp/fx/fx_engine.h **** };
  84:eurorack/plaits/dsp/fx/fx_engine.h **** 
  85:eurorack/plaits/dsp/fx/fx_engine.h **** template<>
  86:eurorack/plaits/dsp/fx/fx_engine.h **** struct DataType<FORMAT_32_BIT> {
  87:eurorack/plaits/dsp/fx/fx_engine.h ****   typedef float T;
  88:eurorack/plaits/dsp/fx/fx_engine.h ****   
  89:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline float Decompress(T value) {
  90:eurorack/plaits/dsp/fx/fx_engine.h ****     return value;;
  91:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  92:eurorack/plaits/dsp/fx/fx_engine.h ****   
  93:eurorack/plaits/dsp/fx/fx_engine.h ****   static inline T Compress(float value) {
  94:eurorack/plaits/dsp/fx/fx_engine.h ****     return value;
  95:eurorack/plaits/dsp/fx/fx_engine.h ****   }
  96:eurorack/plaits/dsp/fx/fx_engine.h **** };
  97:eurorack/plaits/dsp/fx/fx_engine.h **** 
  98:eurorack/plaits/dsp/fx/fx_engine.h **** template<
  99:eurorack/plaits/dsp/fx/fx_engine.h ****     size_t size,
 100:eurorack/plaits/dsp/fx/fx_engine.h ****     Format format = FORMAT_12_BIT>
 101:eurorack/plaits/dsp/fx/fx_engine.h **** class FxEngine {
 102:eurorack/plaits/dsp/fx/fx_engine.h ****  public:
 103:eurorack/plaits/dsp/fx/fx_engine.h ****   typedef typename DataType<format>::T T;
 104:eurorack/plaits/dsp/fx/fx_engine.h ****   FxEngine() { }
 611              		.loc 24 104 3 view .LVU169
 612              	.LBE1328:
 613              	.LBE1327:
 614              	.LBE1325:
 615              	.LBE1324:
 616              	.LBE1379:
 617              	.LBE1389:
 618              		.loc 24 104 14 view .LVU170
 619              	.LBB1390:
 620              	.LBB1380:
 621              	.LBB1331:
 622              	.LBB1330:
 623              	.LBB1329:
 624              	.LBI1329:
 625              		.loc 9 179 3 view .LVU171
 626              		.loc 9 179 3 is_stmt 0 view .LVU172
 627              	.LBE1329:
 628              	.LBE1330:
 629              	.LBE1331:
 630              	.LBB1332:
 631              	.LBI1332:
 632              		.file 25 "eurorack/plaits/dsp/engine/snare_drum_engine.h"
   1:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/snare_drum_engine.h **** //
   3:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 44


   4:eurorack/plaits/dsp/engine/snare_drum_engine.h **** //
   5:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // 
  12:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // 
  15:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // 
  23:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/snare_drum_engine.h **** //
  25:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/snare_drum_engine.h **** //
  27:eurorack/plaits/dsp/engine/snare_drum_engine.h **** // 808 and synthetic snare drum generators.
  28:eurorack/plaits/dsp/engine/snare_drum_engine.h **** 
  29:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #ifndef PLAITS_DSP_ENGINE_SNARE_DRUM_ENGINE_H_
  30:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #define PLAITS_DSP_ENGINE_SNARE_DRUM_ENGINE_H_
  31:eurorack/plaits/dsp/engine/snare_drum_engine.h **** 
  32:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #include "plaits/dsp/drums/analog_snare_drum.h"
  33:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #include "plaits/dsp/drums/synthetic_snare_drum.h"
  34:eurorack/plaits/dsp/engine/snare_drum_engine.h **** #include "plaits/dsp/engine/engine.h"
  35:eurorack/plaits/dsp/engine/snare_drum_engine.h **** 
  36:eurorack/plaits/dsp/engine/snare_drum_engine.h **** namespace plaits {
  37:eurorack/plaits/dsp/engine/snare_drum_engine.h ****   
  38:eurorack/plaits/dsp/engine/snare_drum_engine.h **** class SnareDrumEngine : public Engine {
  39:eurorack/plaits/dsp/engine/snare_drum_engine.h ****  public:
  40:eurorack/plaits/dsp/engine/snare_drum_engine.h ****   SnareDrumEngine() { }
 633              		.loc 25 40 3 is_stmt 1 view .LVU173
 634              	.LBB1333:
 635              	.LBB1334:
 636              	.LBI1334:
 637              		.loc 6 80 3 view .LVU174
 638              		.loc 6 80 3 is_stmt 0 view .LVU175
 639              	.LBE1334:
 640              		.loc 25 40 21 view .LVU176
 641 0038 3049     		ldr	r1, .L24+32
 642 003a C3F8A816 		str	r1, [r3, #1704]
 643              	.LVL27:
 644              	.LBB1335:
 645              	.LBI1335:
 646              		.file 26 "eurorack/plaits/dsp/drums/analog_snare_drum.h"
   1:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/analog_snare_drum.h **** //
   3:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/analog_snare_drum.h **** //
   5:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // of this software and associated documentation files (the "Software"), to deal
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 45


   7:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // 
  12:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // 
  15:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // 
  23:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/analog_snare_drum.h **** //
  25:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/analog_snare_drum.h **** //
  27:eurorack/plaits/dsp/drums/analog_snare_drum.h **** // 808 snare drum model, revisited.
  28:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  29:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #ifndef PLAITS_DSP_DRUMS_ANALOG_SNARE_DRUM_H_
  30:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #define PLAITS_DSP_DRUMS_ANALOG_SNARE_DRUM_H_
  31:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  32:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include <algorithm>
  33:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  34:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/dsp/filter.h"
  36:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/dsp/parameter_interpolator.h"
  37:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/dsp/units.h"
  38:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "stmlib/utils/random.h"
  39:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  40:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "plaits/dsp/dsp.h"
  41:eurorack/plaits/dsp/drums/analog_snare_drum.h **** #include "plaits/dsp/oscillator/sine_oscillator.h"
  42:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  43:eurorack/plaits/dsp/drums/analog_snare_drum.h **** namespace plaits {
  44:eurorack/plaits/dsp/drums/analog_snare_drum.h **** 
  45:eurorack/plaits/dsp/drums/analog_snare_drum.h **** class AnalogSnareDrum {
  46:eurorack/plaits/dsp/drums/analog_snare_drum.h ****  public:
  47:eurorack/plaits/dsp/drums/analog_snare_drum.h ****   AnalogSnareDrum() { }
 647              		.loc 26 47 3 is_stmt 1 view .LVU177
 648              	.LBE1335:
 649              	.LBE1333:
 650              	.LBE1332:
 651              	.LBE1380:
 652              	.LBE1390:
 653              		.loc 26 47 21 view .LVU178
 654              	.LBB1391:
 655              	.LBB1381:
 656              	.LBB1344:
 657              	.LBB1342:
 658              	.LBB1337:
 659              	.LBB1336:
 660              	.LBI1336:
 661              		.loc 9 179 3 view .LVU179
 662              		.loc 9 179 3 is_stmt 0 view .LVU180
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 46


 663              	.LBE1336:
 664              	.LBE1337:
 665              	.LBE1342:
 666              	.LBE1344:
 667              	.LBE1381:
 668              	.LBE1391:
 669              		.loc 26 47 21 is_stmt 1 view .LVU181
 670              	.LBB1392:
 671              	.LBB1382:
 672              	.LBB1345:
 673              	.LBB1343:
 674              	.LBB1338:
 675              	.LBI1338:
 676              		.file 27 "eurorack/plaits/dsp/drums/synthetic_snare_drum.h"
   1:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** //
   3:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** //
   5:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // 
  12:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // 
  15:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // 
  23:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** //
  25:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** //
  27:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Naive snare drum model (two modulated oscillators + filtered noise).
  28:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // Uses a few magic numbers taken from the 909 schematics:
  29:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // - Ratio between the two modes of the drum set to 1.47.
  30:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // - Funky coupling between the two modes.
  31:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** // - Noise coloration filters and envelope shapes for the snare.
  32:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  33:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #ifndef PLAITS_DSP_DRUMS_SYNTHETIC_SNARE_DRUM_H_
  34:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #define PLAITS_DSP_DRUMS_SYNTHETIC_SNARE_DRUM_H_
  35:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  36:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include <algorithm>
  37:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  38:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include "stmlib/dsp/dsp.h"
  39:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include "stmlib/dsp/parameter_interpolator.h"
  40:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include "stmlib/dsp/units.h"
  41:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  42:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** #include "plaits/dsp/dsp.h"
  43:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 47


  44:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** namespace plaits {
  45:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** 
  46:eurorack/plaits/dsp/drums/synthetic_snare_drum.h **** class SyntheticSnareDrum {
  47:eurorack/plaits/dsp/drums/synthetic_snare_drum.h ****  public:
  48:eurorack/plaits/dsp/drums/synthetic_snare_drum.h ****   SyntheticSnareDrum() { }
 677              		.loc 27 48 3 view .LVU182
 678              	.LBB1339:
 679              	.LBI1339:
  94:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
 680              		.loc 9 94 3 view .LVU183
  94:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
 681              		.loc 9 94 3 is_stmt 0 view .LVU184
 682              	.LBE1339:
 683              	.LBB1340:
 684              	.LBI1340:
  94:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
 685              		.loc 9 94 3 is_stmt 1 view .LVU185
  94:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
 686              		.loc 9 94 3 is_stmt 0 view .LVU186
 687              	.LBE1340:
 688              	.LBB1341:
 689              	.LBI1341:
 690              		.loc 9 179 3 is_stmt 1 view .LVU187
 691              		.loc 9 179 3 is_stmt 0 view .LVU188
 692              	.LBE1341:
 693              	.LBE1338:
 694              	.LBE1343:
 695              	.LBE1345:
 696              	.LBB1346:
 697              	.LBI1346:
 698              		.file 28 "eurorack/plaits/dsp/engine/string_engine.h"
   1:eurorack/plaits/dsp/engine/string_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/string_engine.h **** //
   3:eurorack/plaits/dsp/engine/string_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/string_engine.h **** //
   5:eurorack/plaits/dsp/engine/string_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/string_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/string_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/string_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/string_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/string_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/string_engine.h **** // 
  12:eurorack/plaits/dsp/engine/string_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/string_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/string_engine.h **** // 
  15:eurorack/plaits/dsp/engine/string_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/string_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/string_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/string_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/string_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/string_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/string_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/string_engine.h **** // 
  23:eurorack/plaits/dsp/engine/string_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/string_engine.h **** //
  25:eurorack/plaits/dsp/engine/string_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/string_engine.h **** //
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 48


  27:eurorack/plaits/dsp/engine/string_engine.h **** // Three voices of string synthesis.
  28:eurorack/plaits/dsp/engine/string_engine.h **** 
  29:eurorack/plaits/dsp/engine/string_engine.h **** #ifndef PLAITS_DSP_ENGINE_STRING_ENGINE_H_
  30:eurorack/plaits/dsp/engine/string_engine.h **** #define PLAITS_DSP_ENGINE_STRING_ENGINE_H_
  31:eurorack/plaits/dsp/engine/string_engine.h **** 
  32:eurorack/plaits/dsp/engine/string_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/string_engine.h **** #include "plaits/dsp/physical_modelling/string_voice.h"
  34:eurorack/plaits/dsp/engine/string_engine.h **** 
  35:eurorack/plaits/dsp/engine/string_engine.h **** namespace plaits {
  36:eurorack/plaits/dsp/engine/string_engine.h **** 
  37:eurorack/plaits/dsp/engine/string_engine.h **** const int kNumStrings = 3;
  38:eurorack/plaits/dsp/engine/string_engine.h **** 
  39:eurorack/plaits/dsp/engine/string_engine.h **** class StringEngine : public Engine {
  40:eurorack/plaits/dsp/engine/string_engine.h ****  public:
  41:eurorack/plaits/dsp/engine/string_engine.h ****   StringEngine() { }
 699              		.loc 28 41 3 is_stmt 1 view .LVU189
 700              	.LBB1347:
 701              	.LBB1348:
 702              	.LBI1348:
 703              		.loc 6 80 3 view .LVU190
 704              		.loc 6 80 3 is_stmt 0 view .LVU191
 705              	.LBE1348:
 706              		.loc 28 41 18 view .LVU192
 707 003e 3049     		ldr	r1, .L24+36
 708 0040 C3F8CC17 		str	r1, [r3, #1996]
 709              		.loc 28 41 18 is_stmt 1 view .LVU193
 710              	.LVL28:
 711              	.LBB1349:
 712              	.LBI1349:
 713              		.file 29 "eurorack/plaits/dsp/physical_modelling/delay_line.h"
   1:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/plaits/dsp/physical_modelling/delay_line.h **** //
   3:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/physical_modelling/delay_line.h **** //
   5:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // 
  12:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // 
  15:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // 
  23:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/physical_modelling/delay_line.h **** //
  25:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/physical_modelling/delay_line.h **** //
  27:eurorack/plaits/dsp/physical_modelling/delay_line.h **** // Delay line (same implementation as from stmlib, but does not own its buffer).
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 49


  28:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  29:eurorack/plaits/dsp/physical_modelling/delay_line.h **** #ifndef PLAITS_DSP_PHYSICAL_MODELLING_DELAY_LINE_H_
  30:eurorack/plaits/dsp/physical_modelling/delay_line.h **** #define PLAITS_DSP_PHYSICAL_MODELLING_DELAY_LINE_H_
  31:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  32:eurorack/plaits/dsp/physical_modelling/delay_line.h **** #include <algorithm>
  33:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  34:eurorack/plaits/dsp/physical_modelling/delay_line.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  36:eurorack/plaits/dsp/physical_modelling/delay_line.h **** namespace plaits {
  37:eurorack/plaits/dsp/physical_modelling/delay_line.h **** 
  38:eurorack/plaits/dsp/physical_modelling/delay_line.h **** template<typename T, size_t max_delay>
  39:eurorack/plaits/dsp/physical_modelling/delay_line.h **** class DelayLine {
  40:eurorack/plaits/dsp/physical_modelling/delay_line.h ****  public:
  41:eurorack/plaits/dsp/physical_modelling/delay_line.h ****   DelayLine() { }
 714              		.loc 29 41 3 view .LVU194
 715              		.loc 29 41 3 is_stmt 0 view .LVU195
 716              	.LBE1349:
 717              	.LBE1347:
 718              	.LBE1346:
 719              	.LBB1350:
 720              	.LBI1350:
 721              		.file 30 "eurorack/plaits/dsp/engine/swarm_engine.h"
   1:eurorack/plaits/dsp/engine/swarm_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/swarm_engine.h **** //
   3:eurorack/plaits/dsp/engine/swarm_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/swarm_engine.h **** //
   5:eurorack/plaits/dsp/engine/swarm_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/swarm_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/swarm_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/swarm_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/swarm_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/swarm_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/swarm_engine.h **** // 
  12:eurorack/plaits/dsp/engine/swarm_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/swarm_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/swarm_engine.h **** // 
  15:eurorack/plaits/dsp/engine/swarm_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/swarm_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/swarm_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/swarm_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/swarm_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/swarm_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/swarm_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/swarm_engine.h **** // 
  23:eurorack/plaits/dsp/engine/swarm_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/swarm_engine.h **** //
  25:eurorack/plaits/dsp/engine/swarm_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/swarm_engine.h **** //
  27:eurorack/plaits/dsp/engine/swarm_engine.h **** // Swarm of sawtooths and sines.
  28:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  29:eurorack/plaits/dsp/engine/swarm_engine.h **** #ifndef PLAITS_DSP_ENGINE_SWARM_ENGINE_H_
  30:eurorack/plaits/dsp/engine/swarm_engine.h **** #define PLAITS_DSP_ENGINE_SWARM_ENGINE_H_
  31:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  32:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "stmlib/dsp/polyblep.h"
  33:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "stmlib/dsp/units.h"
  34:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "stmlib/utils/random.h"
  35:eurorack/plaits/dsp/engine/swarm_engine.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 50


  36:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/dsp/engine/engine.h"
  37:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/dsp/oscillator/oscillator.h"
  38:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/dsp/oscillator/string_synth_oscillator.h"
  39:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/dsp/oscillator/sine_oscillator.h"
  40:eurorack/plaits/dsp/engine/swarm_engine.h **** #include "plaits/resources.h"
  41:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  42:eurorack/plaits/dsp/engine/swarm_engine.h **** namespace plaits {
  43:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  44:eurorack/plaits/dsp/engine/swarm_engine.h **** const int kNumSwarmVoices = 8;
  45:eurorack/plaits/dsp/engine/swarm_engine.h **** 
  46:eurorack/plaits/dsp/engine/swarm_engine.h **** class GrainEnvelope {
  47:eurorack/plaits/dsp/engine/swarm_engine.h ****  public:
  48:eurorack/plaits/dsp/engine/swarm_engine.h ****   GrainEnvelope() { }
  49:eurorack/plaits/dsp/engine/swarm_engine.h ****   ~GrainEnvelope() { }
  50:eurorack/plaits/dsp/engine/swarm_engine.h ****   
  51:eurorack/plaits/dsp/engine/swarm_engine.h ****   void Init() {
  52:eurorack/plaits/dsp/engine/swarm_engine.h ****     from_ = 0.0f;
  53:eurorack/plaits/dsp/engine/swarm_engine.h ****     interval_ = 1.0f;
  54:eurorack/plaits/dsp/engine/swarm_engine.h ****     phase_ = 1.0f;
  55:eurorack/plaits/dsp/engine/swarm_engine.h ****     fm_ = 0.0f;
  56:eurorack/plaits/dsp/engine/swarm_engine.h ****     amplitude_ = 0.5f;
  57:eurorack/plaits/dsp/engine/swarm_engine.h ****     previous_size_ratio_ = 0.0f;
  58:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
  59:eurorack/plaits/dsp/engine/swarm_engine.h ****   
  60:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline void Step(float rate, bool burst_mode, bool start_burst) {
  61:eurorack/plaits/dsp/engine/swarm_engine.h ****     bool randomize = false;
  62:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (start_burst) {
  63:eurorack/plaits/dsp/engine/swarm_engine.h ****       phase_ = 0.5f;
  64:eurorack/plaits/dsp/engine/swarm_engine.h ****       fm_ = 16.0f;
  65:eurorack/plaits/dsp/engine/swarm_engine.h ****       randomize = true;
  66:eurorack/plaits/dsp/engine/swarm_engine.h ****     } else {
  67:eurorack/plaits/dsp/engine/swarm_engine.h ****       phase_ += rate * fm_;
  68:eurorack/plaits/dsp/engine/swarm_engine.h ****       if (phase_ >= 1.0f) {
  69:eurorack/plaits/dsp/engine/swarm_engine.h ****         phase_ -= static_cast<float>(static_cast<int>(phase_));
  70:eurorack/plaits/dsp/engine/swarm_engine.h ****         randomize = true;
  71:eurorack/plaits/dsp/engine/swarm_engine.h ****       }
  72:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
  73:eurorack/plaits/dsp/engine/swarm_engine.h ****     
  74:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (randomize) {
  75:eurorack/plaits/dsp/engine/swarm_engine.h ****       from_ += interval_;
  76:eurorack/plaits/dsp/engine/swarm_engine.h ****       interval_ = stmlib::Random::GetFloat() - from_;
  77:eurorack/plaits/dsp/engine/swarm_engine.h ****       // Randomize the duration of the grain.
  78:eurorack/plaits/dsp/engine/swarm_engine.h ****       if (burst_mode) {
  79:eurorack/plaits/dsp/engine/swarm_engine.h ****         fm_ *= 0.8f + 0.2f * stmlib::Random::GetFloat();
  80:eurorack/plaits/dsp/engine/swarm_engine.h ****       } else {
  81:eurorack/plaits/dsp/engine/swarm_engine.h ****         fm_ = 0.5f + 1.5f * stmlib::Random::GetFloat();
  82:eurorack/plaits/dsp/engine/swarm_engine.h ****       }
  83:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
  84:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
  85:eurorack/plaits/dsp/engine/swarm_engine.h ****   
  86:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline float frequency(float size_ratio) const {
  87:eurorack/plaits/dsp/engine/swarm_engine.h ****     // We approximate two overlapping grains of frequencies f1 and f2
  88:eurorack/plaits/dsp/engine/swarm_engine.h ****     // By a continuous tone ramping from f1 to f2. This allows a continuous
  89:eurorack/plaits/dsp/engine/swarm_engine.h ****     // transition between the "grain cloud" and "swarm of glissandi" textures.
  90:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (size_ratio < 1.0f) {
  91:eurorack/plaits/dsp/engine/swarm_engine.h ****       return 2.0f * (from_ + interval_ * phase_) - 1.0f;
  92:eurorack/plaits/dsp/engine/swarm_engine.h ****     } else {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 51


  93:eurorack/plaits/dsp/engine/swarm_engine.h ****       return from_;
  94:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
  95:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
  96:eurorack/plaits/dsp/engine/swarm_engine.h ****   
  97:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline float amplitude(float size_ratio) {
  98:eurorack/plaits/dsp/engine/swarm_engine.h ****     float target_amplitude = 1.0f;
  99:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (size_ratio >= 1.0f) {
 100:eurorack/plaits/dsp/engine/swarm_engine.h ****       float phase = (phase_ - 0.5f) * size_ratio;
 101:eurorack/plaits/dsp/engine/swarm_engine.h ****       CONSTRAIN(phase, -1.0f, 1.0f);
 102:eurorack/plaits/dsp/engine/swarm_engine.h ****       float e = stmlib::InterpolateWrap(
 103:eurorack/plaits/dsp/engine/swarm_engine.h ****           lut_sine, 0.5f * phase + 1.25f, 1024.0f);
 104:eurorack/plaits/dsp/engine/swarm_engine.h ****       target_amplitude = 0.5f * (e + 1.0f);
 105:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
 106:eurorack/plaits/dsp/engine/swarm_engine.h ****     
 107:eurorack/plaits/dsp/engine/swarm_engine.h ****     if ((size_ratio >= 1.0f) ^ (previous_size_ratio_ >= 1.0f)) {
 108:eurorack/plaits/dsp/engine/swarm_engine.h ****       filter_coefficient_ = 0.5f;
 109:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
 110:eurorack/plaits/dsp/engine/swarm_engine.h ****     filter_coefficient_ *= 0.95f;
 111:eurorack/plaits/dsp/engine/swarm_engine.h ****     
 112:eurorack/plaits/dsp/engine/swarm_engine.h ****     previous_size_ratio_ = size_ratio;
 113:eurorack/plaits/dsp/engine/swarm_engine.h ****     ONE_POLE(amplitude_, target_amplitude, 0.5f - filter_coefficient_);
 114:eurorack/plaits/dsp/engine/swarm_engine.h ****     return amplitude_;
 115:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
 116:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 117:eurorack/plaits/dsp/engine/swarm_engine.h ****  private:
 118:eurorack/plaits/dsp/engine/swarm_engine.h ****   float from_;
 119:eurorack/plaits/dsp/engine/swarm_engine.h ****   float interval_;
 120:eurorack/plaits/dsp/engine/swarm_engine.h ****   float phase_;
 121:eurorack/plaits/dsp/engine/swarm_engine.h ****   float fm_;
 122:eurorack/plaits/dsp/engine/swarm_engine.h ****   float amplitude_;
 123:eurorack/plaits/dsp/engine/swarm_engine.h ****   float previous_size_ratio_;
 124:eurorack/plaits/dsp/engine/swarm_engine.h ****   float filter_coefficient_;
 125:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 126:eurorack/plaits/dsp/engine/swarm_engine.h ****   DISALLOW_COPY_AND_ASSIGN(GrainEnvelope);
 127:eurorack/plaits/dsp/engine/swarm_engine.h **** };
 128:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 129:eurorack/plaits/dsp/engine/swarm_engine.h **** class AdditiveSawOscillator {
 130:eurorack/plaits/dsp/engine/swarm_engine.h ****  public:
 131:eurorack/plaits/dsp/engine/swarm_engine.h ****   AdditiveSawOscillator() { }
 132:eurorack/plaits/dsp/engine/swarm_engine.h ****   ~AdditiveSawOscillator() { }
 133:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 134:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline void Init() {
 135:eurorack/plaits/dsp/engine/swarm_engine.h ****     phase_ = 0.0f;
 136:eurorack/plaits/dsp/engine/swarm_engine.h ****     next_sample_ = 0.0f;
 137:eurorack/plaits/dsp/engine/swarm_engine.h ****     frequency_ = 0.01f;
 138:eurorack/plaits/dsp/engine/swarm_engine.h ****     gain_ = 0.0f;
 139:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
 140:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 141:eurorack/plaits/dsp/engine/swarm_engine.h ****   inline void Render(
 142:eurorack/plaits/dsp/engine/swarm_engine.h ****       float frequency,
 143:eurorack/plaits/dsp/engine/swarm_engine.h ****       float level,
 144:eurorack/plaits/dsp/engine/swarm_engine.h ****       float* out,
 145:eurorack/plaits/dsp/engine/swarm_engine.h ****       size_t size) {
 146:eurorack/plaits/dsp/engine/swarm_engine.h ****     if (frequency >= kMaxFrequency) {
 147:eurorack/plaits/dsp/engine/swarm_engine.h ****       frequency = kMaxFrequency;
 148:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
 149:eurorack/plaits/dsp/engine/swarm_engine.h ****     stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 52


 150:eurorack/plaits/dsp/engine/swarm_engine.h ****     stmlib::ParameterInterpolator gain(&gain_, level, size);
 151:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 152:eurorack/plaits/dsp/engine/swarm_engine.h ****     float next_sample = next_sample_;
 153:eurorack/plaits/dsp/engine/swarm_engine.h ****     float phase = phase_;
 154:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 155:eurorack/plaits/dsp/engine/swarm_engine.h ****     while (size--) {
 156:eurorack/plaits/dsp/engine/swarm_engine.h ****       float this_sample = next_sample;
 157:eurorack/plaits/dsp/engine/swarm_engine.h ****       next_sample = 0.0f;
 158:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 159:eurorack/plaits/dsp/engine/swarm_engine.h ****       const float frequency = fm.Next();
 160:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 161:eurorack/plaits/dsp/engine/swarm_engine.h ****       phase += frequency;
 162:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 163:eurorack/plaits/dsp/engine/swarm_engine.h ****       if (phase >= 1.0f) {
 164:eurorack/plaits/dsp/engine/swarm_engine.h ****         phase -= 1.0f;
 165:eurorack/plaits/dsp/engine/swarm_engine.h ****         float t = phase / frequency;
 166:eurorack/plaits/dsp/engine/swarm_engine.h ****         this_sample -= stmlib::ThisBlepSample(t);
 167:eurorack/plaits/dsp/engine/swarm_engine.h ****         next_sample -= stmlib::NextBlepSample(t);
 168:eurorack/plaits/dsp/engine/swarm_engine.h ****       }
 169:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 170:eurorack/plaits/dsp/engine/swarm_engine.h ****       next_sample += phase;
 171:eurorack/plaits/dsp/engine/swarm_engine.h ****       *out++ += (2.0f * this_sample - 1.0f) * gain.Next();
 172:eurorack/plaits/dsp/engine/swarm_engine.h ****     }
 173:eurorack/plaits/dsp/engine/swarm_engine.h ****     phase_ = phase;
 174:eurorack/plaits/dsp/engine/swarm_engine.h ****     next_sample_ = next_sample;
 175:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
 176:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 177:eurorack/plaits/dsp/engine/swarm_engine.h ****  private:
 178:eurorack/plaits/dsp/engine/swarm_engine.h ****   // Oscillator state.
 179:eurorack/plaits/dsp/engine/swarm_engine.h ****   float phase_;
 180:eurorack/plaits/dsp/engine/swarm_engine.h ****   float next_sample_;
 181:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 182:eurorack/plaits/dsp/engine/swarm_engine.h ****   // For interpolation of parameters.
 183:eurorack/plaits/dsp/engine/swarm_engine.h ****   float frequency_;
 184:eurorack/plaits/dsp/engine/swarm_engine.h ****   float gain_;
 185:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 186:eurorack/plaits/dsp/engine/swarm_engine.h ****   DISALLOW_COPY_AND_ASSIGN(AdditiveSawOscillator);
 187:eurorack/plaits/dsp/engine/swarm_engine.h **** };
 188:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 189:eurorack/plaits/dsp/engine/swarm_engine.h **** class SwarmVoice {
 190:eurorack/plaits/dsp/engine/swarm_engine.h ****  public:
 191:eurorack/plaits/dsp/engine/swarm_engine.h ****   SwarmVoice() { }
 192:eurorack/plaits/dsp/engine/swarm_engine.h ****   ~SwarmVoice() { }
 193:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 194:eurorack/plaits/dsp/engine/swarm_engine.h ****   void Init(float rank) {
 195:eurorack/plaits/dsp/engine/swarm_engine.h ****     rank_ = rank;
 196:eurorack/plaits/dsp/engine/swarm_engine.h ****     envelope_.Init();
 197:eurorack/plaits/dsp/engine/swarm_engine.h ****     saw_.Init();
 198:eurorack/plaits/dsp/engine/swarm_engine.h ****     sine_.Init();
 199:eurorack/plaits/dsp/engine/swarm_engine.h ****   }
 200:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 201:eurorack/plaits/dsp/engine/swarm_engine.h ****   void Render(
 202:eurorack/plaits/dsp/engine/swarm_engine.h ****       float f0,
 203:eurorack/plaits/dsp/engine/swarm_engine.h ****       float density,
 204:eurorack/plaits/dsp/engine/swarm_engine.h ****       bool burst_mode,
 205:eurorack/plaits/dsp/engine/swarm_engine.h ****       bool start_burst,
 206:eurorack/plaits/dsp/engine/swarm_engine.h ****       float spread,
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 53


 207:eurorack/plaits/dsp/engine/swarm_engine.h ****       float size_ratio,
 208:eurorack/plaits/dsp/engine/swarm_engine.h ****       float* saw,
 209:eurorack/plaits/dsp/engine/swarm_engine.h ****       float* sine,
 210:eurorack/plaits/dsp/engine/swarm_engine.h ****       size_t size) {
 211:eurorack/plaits/dsp/engine/swarm_engine.h ****     envelope_.Step(density, burst_mode, start_burst);
 212:eurorack/plaits/dsp/engine/swarm_engine.h ****     
 213:eurorack/plaits/dsp/engine/swarm_engine.h ****     const float scale = 1.0f / kNumSwarmVoices;
 214:eurorack/plaits/dsp/engine/swarm_engine.h ****     const float amplitude = envelope_.amplitude(size_ratio) * scale;
 215:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 216:eurorack/plaits/dsp/engine/swarm_engine.h ****     const float expo_amount = envelope_.frequency(size_ratio);
 217:eurorack/plaits/dsp/engine/swarm_engine.h ****     f0 *= stmlib::SemitonesToRatio(48.0f * expo_amount * spread * rank_);
 218:eurorack/plaits/dsp/engine/swarm_engine.h ****     
 219:eurorack/plaits/dsp/engine/swarm_engine.h ****     const float linear_amount = rank_ * (rank_ + 0.01f) * spread * 0.25f;
 220:eurorack/plaits/dsp/engine/swarm_engine.h ****     f0 *= 1.0f + linear_amount;
 221:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 222:eurorack/plaits/dsp/engine/swarm_engine.h ****     saw_.Render(f0, amplitude, saw, size);
 223:eurorack/plaits/dsp/engine/swarm_engine.h ****     sine_.Render(f0, amplitude, sine, size);
 224:eurorack/plaits/dsp/engine/swarm_engine.h ****   };
 225:eurorack/plaits/dsp/engine/swarm_engine.h ****   
 226:eurorack/plaits/dsp/engine/swarm_engine.h ****  private:
 227:eurorack/plaits/dsp/engine/swarm_engine.h ****   float rank_;
 228:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 229:eurorack/plaits/dsp/engine/swarm_engine.h ****   GrainEnvelope envelope_;
 230:eurorack/plaits/dsp/engine/swarm_engine.h ****   AdditiveSawOscillator saw_;
 231:eurorack/plaits/dsp/engine/swarm_engine.h ****   FastSineOscillator sine_;
 232:eurorack/plaits/dsp/engine/swarm_engine.h **** };
 233:eurorack/plaits/dsp/engine/swarm_engine.h **** 
 234:eurorack/plaits/dsp/engine/swarm_engine.h **** class SwarmEngine : public Engine {
 235:eurorack/plaits/dsp/engine/swarm_engine.h ****  public:
 236:eurorack/plaits/dsp/engine/swarm_engine.h ****   SwarmEngine() { }
 722              		.loc 30 236 3 is_stmt 1 view .LVU196
 723              	.LBB1351:
 724              	.LBB1352:
 725              	.LBI1352:
 726              		.loc 6 80 3 view .LVU197
 727              		.loc 6 80 3 is_stmt 0 view .LVU198
 728              	.LBE1352:
 729              		.loc 30 236 17 view .LVU199
 730 0044 2F49     		ldr	r1, .L24+40
 731 0046 C3F81819 		str	r1, [r3, #2328]
 732              		.loc 30 236 17 is_stmt 1 view .LVU200
 733              	.LVL29:
 734              		.loc 30 236 17 is_stmt 0 view .LVU201
 735              	.LBE1351:
 736              	.LBE1350:
 737              	.LBB1353:
 738              	.LBI1353:
 739              		.file 31 "eurorack/plaits/dsp/engine/virtual_analog_engine.h"
   1:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** //
   3:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** //
   5:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // copies of the Software, and to permit persons to whom the Software is
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 54


  10:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // 
  12:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // 
  15:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // 
  23:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** //
  25:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** //
  27:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** // 2 variable shape oscillators with sync and crossfading.
  28:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** 
  29:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #ifndef PLAITS_DSP_ENGINE_VIRTUAL_ANALOG_ENGINE_H_
  30:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #define PLAITS_DSP_ENGINE_VIRTUAL_ANALOG_ENGINE_H_
  31:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** 
  32:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #include "plaits/dsp/oscillator/variable_saw_oscillator.h"
  34:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #include "plaits/dsp/oscillator/variable_shape_oscillator.h"
  35:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** 
  36:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** #define VA_VARIANT 2
  37:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** 
  38:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** namespace plaits {
  39:eurorack/plaits/dsp/engine/virtual_analog_engine.h ****   
  40:eurorack/plaits/dsp/engine/virtual_analog_engine.h **** class VirtualAnalogEngine : public Engine {
  41:eurorack/plaits/dsp/engine/virtual_analog_engine.h ****  public:
  42:eurorack/plaits/dsp/engine/virtual_analog_engine.h ****   VirtualAnalogEngine() { }
 740              		.loc 31 42 3 is_stmt 1 view .LVU202
 741              	.LBB1354:
 742              	.LBB1355:
 743              	.LBI1355:
 744              		.loc 6 80 3 view .LVU203
 745              		.loc 6 80 3 is_stmt 0 view .LVU204
 746              	.LBE1355:
 747              		.loc 31 42 25 view .LVU205
 748 004a 2F49     		ldr	r1, .L24+44
 749 004c C3F8281B 		str	r1, [r3, #2856]
 750              	.LVL30:
 751              	.LBB1356:
 752              	.LBI1356:
 753              		.file 32 "eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h"
   1:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // furnished to do so, subject to the following conditions:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 55


  11:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // Continuously variable waveform: triangle > saw > square. Both square and
  28:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // triangle have variable slope / pulse-width. Additionally, the phase resets
  29:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** // can be locked to a master frequency.
  30:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  31:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_VARIABLE_SHAPE_OSCILLATOR_H_
  32:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #define PLAITS_DSP_OSCILLATOR_VARIABLE_SHAPE_OSCILLATOR_H_
  33:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  34:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  36:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #include "stmlib/dsp/polyblep.h"
  37:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  38:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** #include <algorithm>
  39:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  40:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** namespace plaits {
  41:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** 
  42:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h **** class VariableShapeOscillator {
  43:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h ****  public:
  44:eurorack/plaits/dsp/oscillator/variable_shape_oscillator.h ****   VariableShapeOscillator() { }
 754              		.loc 32 44 3 is_stmt 1 view .LVU206
 755              		.loc 32 44 3 is_stmt 0 view .LVU207
 756              	.LBE1356:
 757              	.LBB1357:
 758              	.LBI1357:
 759              		.loc 32 44 3 is_stmt 1 view .LVU208
 760              		.loc 32 44 3 is_stmt 0 view .LVU209
 761              	.LBE1357:
 762              	.LBB1358:
 763              	.LBI1358:
 764              		.loc 32 44 3 is_stmt 1 view .LVU210
 765              		.loc 32 44 3 is_stmt 0 view .LVU211
 766              	.LBE1358:
 767              	.LBB1359:
 768              	.LBI1359:
 769              		.file 33 "eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h"
   1:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // in the Software without restriction, including without limitation the rights
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 56


   8:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // 
  15:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** // Saw with variable slope or notch
  28:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  29:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_VARIABLE_SAW_OSCILLATOR_H_
  30:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #define PLAITS_DSP_OSCILLATOR_VARIABLE_SAW_OSCILLATOR_H_
  31:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  32:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include "stmlib/dsp/dsp.h"
  33:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  34:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include "stmlib/dsp/polyblep.h"
  35:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  36:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include <algorithm>
  37:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  38:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** #include "plaits/dsp/oscillator/oscillator.h"
  39:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  40:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** namespace plaits {
  41:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  42:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** const float kVariableSawNotchDepth = 0.2f;
  43:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** 
  44:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h **** class VariableSawOscillator {
  45:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h ****  public:
  46:eurorack/plaits/dsp/oscillator/variable_saw_oscillator.h ****   VariableSawOscillator() { }
 770              		.loc 33 46 3 is_stmt 1 view .LVU212
 771              		.loc 33 46 3 is_stmt 0 view .LVU213
 772              	.LBE1359:
 773              	.LBE1354:
 774              	.LBE1353:
 775              	.LBB1360:
 776              	.LBI1360:
 777              		.file 34 "eurorack/plaits/dsp/engine/waveshaping_engine.h"
   1:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/engine/waveshaping_engine.h **** //
   3:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/engine/waveshaping_engine.h **** //
   5:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // furnished to do so, subject to the following conditions:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 57


  11:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // 
  12:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // 
  15:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // 
  23:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/engine/waveshaping_engine.h **** //
  25:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/engine/waveshaping_engine.h **** //
  27:eurorack/plaits/dsp/engine/waveshaping_engine.h **** // Slope -> Waveshaper -> Wavefolder.
  28:eurorack/plaits/dsp/engine/waveshaping_engine.h **** 
  29:eurorack/plaits/dsp/engine/waveshaping_engine.h **** #ifndef PLAITS_DSP_ENGINE_WAVESHAPING_ENGINE_H_
  30:eurorack/plaits/dsp/engine/waveshaping_engine.h **** #define PLAITS_DSP_ENGINE_WAVESHAPING_ENGINE_H_
  31:eurorack/plaits/dsp/engine/waveshaping_engine.h **** 
  32:eurorack/plaits/dsp/engine/waveshaping_engine.h **** #include "plaits/dsp/engine/engine.h"
  33:eurorack/plaits/dsp/engine/waveshaping_engine.h **** #include "plaits/dsp/oscillator/oscillator.h"
  34:eurorack/plaits/dsp/engine/waveshaping_engine.h **** 
  35:eurorack/plaits/dsp/engine/waveshaping_engine.h **** namespace plaits {
  36:eurorack/plaits/dsp/engine/waveshaping_engine.h ****   
  37:eurorack/plaits/dsp/engine/waveshaping_engine.h **** class WaveshapingEngine : public Engine {
  38:eurorack/plaits/dsp/engine/waveshaping_engine.h ****  public:
  39:eurorack/plaits/dsp/engine/waveshaping_engine.h ****   WaveshapingEngine() { }
 778              		.loc 34 39 3 is_stmt 1 view .LVU214
 779              	.LBB1361:
 780              	.LBB1362:
 781              	.LBI1362:
 782              		.loc 6 80 3 view .LVU215
 783              		.loc 6 80 3 is_stmt 0 view .LVU216
 784              	.LBE1362:
 785              		.loc 34 39 23 view .LVU217
 786 0050 2E49     		ldr	r1, .L24+48
 787 0052 C3F8CC1B 		str	r1, [r3, #3020]
 788              	.LVL31:
 789              	.LBB1363:
 790              	.LBI1363:
 791              		.file 35 "eurorack/plaits/dsp/oscillator/oscillator.h"
   1:eurorack/plaits/dsp/oscillator/oscillator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/oscillator/oscillator.h **** //
   3:eurorack/plaits/dsp/oscillator/oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/oscillator/oscillator.h **** //
   5:eurorack/plaits/dsp/oscillator/oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/oscillator/oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/oscillator/oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/oscillator/oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/oscillator/oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/oscillator/oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/oscillator/oscillator.h **** // 
  12:eurorack/plaits/dsp/oscillator/oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/oscillator/oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/oscillator/oscillator.h **** // 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 58


  15:eurorack/plaits/dsp/oscillator/oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/oscillator/oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/oscillator/oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/oscillator/oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/oscillator/oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/oscillator/oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/oscillator/oscillator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/oscillator/oscillator.h **** // 
  23:eurorack/plaits/dsp/oscillator/oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/oscillator/oscillator.h **** //
  25:eurorack/plaits/dsp/oscillator/oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/oscillator/oscillator.h **** //
  27:eurorack/plaits/dsp/oscillator/oscillator.h **** // Single waveform oscillator. Can optionally do audio-rate linear FM, with
  28:eurorack/plaits/dsp/oscillator/oscillator.h **** // through-zero capabilities (negative frequencies).
  29:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  30:eurorack/plaits/dsp/oscillator/oscillator.h **** #ifndef PLAITS_DSP_OSCILLATOR_OSCILLATOR_H_
  31:eurorack/plaits/dsp/oscillator/oscillator.h **** #define PLAITS_DSP_OSCILLATOR_OSCILLATOR_H_
  32:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  33:eurorack/plaits/dsp/oscillator/oscillator.h **** #include "stmlib/dsp/dsp.h"
  34:eurorack/plaits/dsp/oscillator/oscillator.h **** #include "stmlib/dsp/parameter_interpolator.h"
  35:eurorack/plaits/dsp/oscillator/oscillator.h **** #include "stmlib/dsp/polyblep.h"
  36:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  37:eurorack/plaits/dsp/oscillator/oscillator.h **** namespace plaits {
  38:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  39:eurorack/plaits/dsp/oscillator/oscillator.h **** enum OscillatorShape {
  40:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_IMPULSE_TRAIN,
  41:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SAW,
  42:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_TRIANGLE,
  43:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SLOPE,
  44:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SQUARE,
  45:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SQUARE_BRIGHT,
  46:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SQUARE_DARK,
  47:eurorack/plaits/dsp/oscillator/oscillator.h ****   OSCILLATOR_SHAPE_SQUARE_TRIANGLE
  48:eurorack/plaits/dsp/oscillator/oscillator.h **** };
  49:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  50:eurorack/plaits/dsp/oscillator/oscillator.h **** const float kMaxFrequency = 0.25f;
  51:eurorack/plaits/dsp/oscillator/oscillator.h **** const float kMinFrequency = 0.000001f;
  52:eurorack/plaits/dsp/oscillator/oscillator.h **** 
  53:eurorack/plaits/dsp/oscillator/oscillator.h **** class Oscillator {
  54:eurorack/plaits/dsp/oscillator/oscillator.h ****  public:
  55:eurorack/plaits/dsp/oscillator/oscillator.h ****   Oscillator() { }
 792              		.loc 35 55 3 is_stmt 1 view .LVU218
 793              		.loc 35 55 3 is_stmt 0 view .LVU219
 794              	.LBE1363:
 795              	.LBB1364:
 796              	.LBI1364:
 797              		.loc 35 55 3 is_stmt 1 view .LVU220
 798              		.loc 35 55 3 is_stmt 0 view .LVU221
 799              	.LBE1364:
 800              	.LBE1361:
 801              	.LBE1360:
 802              	.LBB1365:
 803              	.LBI1365:
 804              		.file 36 "eurorack/stmlib/dsp/hysteresis_quantizer.h"
   1:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // Copyright 2015 Emilie Gillet.
   2:eurorack/stmlib/dsp/hysteresis_quantizer.h **** //
   3:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 59


   4:eurorack/stmlib/dsp/hysteresis_quantizer.h **** //
   5:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // 
  12:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // 
  15:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // THE SOFTWARE.
  22:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // 
  23:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/dsp/hysteresis_quantizer.h **** //
  25:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/dsp/hysteresis_quantizer.h **** //
  27:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // Quantize a float in [0, 1] to an integer in [0, num_steps[. Apply hysteresis
  28:eurorack/stmlib/dsp/hysteresis_quantizer.h **** // to prevent jumps near the decision boundary.
  29:eurorack/stmlib/dsp/hysteresis_quantizer.h **** 
  30:eurorack/stmlib/dsp/hysteresis_quantizer.h **** #ifndef STMLIB_DSP_HYSTERESIS_QUANTIZER_H_
  31:eurorack/stmlib/dsp/hysteresis_quantizer.h **** #define STMLIB_DSP_HYSTERESIS_QUANTIZER_H_
  32:eurorack/stmlib/dsp/hysteresis_quantizer.h **** 
  33:eurorack/stmlib/dsp/hysteresis_quantizer.h **** #include "stmlib/stmlib.h"
  34:eurorack/stmlib/dsp/hysteresis_quantizer.h **** 
  35:eurorack/stmlib/dsp/hysteresis_quantizer.h **** namespace stmlib {
  36:eurorack/stmlib/dsp/hysteresis_quantizer.h **** 
  37:eurorack/stmlib/dsp/hysteresis_quantizer.h **** class HysteresisQuantizer {
  38:eurorack/stmlib/dsp/hysteresis_quantizer.h ****  public:
  39:eurorack/stmlib/dsp/hysteresis_quantizer.h ****   HysteresisQuantizer() { }
 805              		.loc 36 39 3 is_stmt 1 view .LVU222
 806              		.loc 36 39 3 is_stmt 0 view .LVU223
 807              	.LBE1365:
 808              	.LBB1366:
 809              	.LBI1366:
 810              		.file 37 "eurorack/plaits/dsp/envelope.h"
   1:eurorack/plaits/dsp/envelope.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/envelope.h **** //
   3:eurorack/plaits/dsp/envelope.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/envelope.h **** //
   5:eurorack/plaits/dsp/envelope.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/envelope.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/envelope.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/envelope.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/envelope.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/envelope.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/envelope.h **** // 
  12:eurorack/plaits/dsp/envelope.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/envelope.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/envelope.h **** // 
  15:eurorack/plaits/dsp/envelope.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 60


  16:eurorack/plaits/dsp/envelope.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/envelope.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/envelope.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/envelope.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/envelope.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/envelope.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/envelope.h **** // 
  23:eurorack/plaits/dsp/envelope.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/envelope.h **** //
  25:eurorack/plaits/dsp/envelope.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/envelope.h **** //
  27:eurorack/plaits/dsp/envelope.h **** // Envelope for the internal LPG.
  28:eurorack/plaits/dsp/envelope.h **** 
  29:eurorack/plaits/dsp/envelope.h **** #ifndef PLAITS_DSP_ENVELOPE_H_
  30:eurorack/plaits/dsp/envelope.h **** #define PLAITS_DSP_ENVELOPE_H_
  31:eurorack/plaits/dsp/envelope.h **** 
  32:eurorack/plaits/dsp/envelope.h **** #include "stmlib/stmlib.h"
  33:eurorack/plaits/dsp/envelope.h **** 
  34:eurorack/plaits/dsp/envelope.h **** namespace plaits {
  35:eurorack/plaits/dsp/envelope.h **** 
  36:eurorack/plaits/dsp/envelope.h **** class LPGEnvelope {
  37:eurorack/plaits/dsp/envelope.h ****  public:
  38:eurorack/plaits/dsp/envelope.h ****   LPGEnvelope() { }
  39:eurorack/plaits/dsp/envelope.h ****   ~LPGEnvelope() { }
  40:eurorack/plaits/dsp/envelope.h ****   
  41:eurorack/plaits/dsp/envelope.h ****   inline void Init() {
  42:eurorack/plaits/dsp/envelope.h ****     vactrol_state_ = 0.0f;
  43:eurorack/plaits/dsp/envelope.h ****     gain_ = 1.0f;
  44:eurorack/plaits/dsp/envelope.h ****     frequency_ = 0.5f;
  45:eurorack/plaits/dsp/envelope.h ****     hf_bleed_ = 0.0f;
  46:eurorack/plaits/dsp/envelope.h ****   }
  47:eurorack/plaits/dsp/envelope.h ****   
  48:eurorack/plaits/dsp/envelope.h ****   inline void Trigger() {
  49:eurorack/plaits/dsp/envelope.h ****     ramp_up_ = true;
  50:eurorack/plaits/dsp/envelope.h ****   }
  51:eurorack/plaits/dsp/envelope.h ****   
  52:eurorack/plaits/dsp/envelope.h ****   inline void ProcessPing(
  53:eurorack/plaits/dsp/envelope.h ****       float attack,
  54:eurorack/plaits/dsp/envelope.h ****       float short_decay,
  55:eurorack/plaits/dsp/envelope.h ****       float decay_tail,
  56:eurorack/plaits/dsp/envelope.h ****       float hf) {
  57:eurorack/plaits/dsp/envelope.h ****     if (ramp_up_) {
  58:eurorack/plaits/dsp/envelope.h ****       vactrol_state_ += attack;
  59:eurorack/plaits/dsp/envelope.h ****       if (vactrol_state_ >= 1.0f) {
  60:eurorack/plaits/dsp/envelope.h ****         vactrol_state_ = 1.0f;
  61:eurorack/plaits/dsp/envelope.h ****         ramp_up_ = false;
  62:eurorack/plaits/dsp/envelope.h ****       }
  63:eurorack/plaits/dsp/envelope.h ****     }
  64:eurorack/plaits/dsp/envelope.h ****     ProcessLP(ramp_up_ ? vactrol_state_ : 0.0f, short_decay, decay_tail, hf);
  65:eurorack/plaits/dsp/envelope.h ****   }
  66:eurorack/plaits/dsp/envelope.h ****   
  67:eurorack/plaits/dsp/envelope.h ****   inline void ProcessLP(
  68:eurorack/plaits/dsp/envelope.h ****       float level,
  69:eurorack/plaits/dsp/envelope.h ****       float short_decay,
  70:eurorack/plaits/dsp/envelope.h ****       float decay_tail,
  71:eurorack/plaits/dsp/envelope.h ****       float hf) {
  72:eurorack/plaits/dsp/envelope.h ****     float vactrol_input = level;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 61


  73:eurorack/plaits/dsp/envelope.h ****     float vactrol_error = (vactrol_input - vactrol_state_);
  74:eurorack/plaits/dsp/envelope.h ****     float vactrol_state_2 = vactrol_state_ * vactrol_state_;
  75:eurorack/plaits/dsp/envelope.h ****     float vactrol_state_4 = vactrol_state_2 * vactrol_state_2;
  76:eurorack/plaits/dsp/envelope.h ****     float tail = 1.0f - vactrol_state_;
  77:eurorack/plaits/dsp/envelope.h ****     float tail_2 = tail * tail;
  78:eurorack/plaits/dsp/envelope.h ****     float vactrol_coefficient = (vactrol_error > 0.0f)
  79:eurorack/plaits/dsp/envelope.h ****         ? 0.6f
  80:eurorack/plaits/dsp/envelope.h ****         : short_decay + (1.0f - vactrol_state_4) * decay_tail;
  81:eurorack/plaits/dsp/envelope.h ****     vactrol_state_ += vactrol_coefficient * vactrol_error;
  82:eurorack/plaits/dsp/envelope.h ****     
  83:eurorack/plaits/dsp/envelope.h ****     gain_ = vactrol_state_;
  84:eurorack/plaits/dsp/envelope.h ****     frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
  85:eurorack/plaits/dsp/envelope.h ****     hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
  86:eurorack/plaits/dsp/envelope.h ****   }
  87:eurorack/plaits/dsp/envelope.h ****   
  88:eurorack/plaits/dsp/envelope.h ****   inline float gain() const { return gain_; }
  89:eurorack/plaits/dsp/envelope.h ****   inline float frequency() const { return frequency_; }
  90:eurorack/plaits/dsp/envelope.h ****   inline float hf_bleed() const { return hf_bleed_; }
  91:eurorack/plaits/dsp/envelope.h ****   
  92:eurorack/plaits/dsp/envelope.h ****  private:
  93:eurorack/plaits/dsp/envelope.h ****   float vactrol_state_;
  94:eurorack/plaits/dsp/envelope.h ****   float gain_;
  95:eurorack/plaits/dsp/envelope.h ****   float frequency_;
  96:eurorack/plaits/dsp/envelope.h ****   float hf_bleed_;
  97:eurorack/plaits/dsp/envelope.h ****   bool ramp_up_;
  98:eurorack/plaits/dsp/envelope.h ****   
  99:eurorack/plaits/dsp/envelope.h ****   DISALLOW_COPY_AND_ASSIGN(LPGEnvelope);
 100:eurorack/plaits/dsp/envelope.h **** };
 101:eurorack/plaits/dsp/envelope.h **** 
 102:eurorack/plaits/dsp/envelope.h **** class DecayEnvelope {
 103:eurorack/plaits/dsp/envelope.h ****  public:
 104:eurorack/plaits/dsp/envelope.h ****   DecayEnvelope() { }
 811              		.loc 37 104 3 is_stmt 1 view .LVU224
 812              		.loc 37 104 3 is_stmt 0 view .LVU225
 813              	.LBE1366:
 814              	.LBB1367:
 815              	.LBI1367:
  38:eurorack/plaits/dsp/envelope.h ****   ~LPGEnvelope() { }
 816              		.loc 37 38 3 is_stmt 1 view .LVU226
  38:eurorack/plaits/dsp/envelope.h ****   ~LPGEnvelope() { }
 817              		.loc 37 38 3 is_stmt 0 view .LVU227
 818              	.LBE1367:
 819              	.LBB1368:
 820              	.LBI1368:
 821              		.loc 29 41 3 is_stmt 1 view .LVU228
 822              		.loc 29 41 3 is_stmt 0 view .LVU229
 823              	.LBE1368:
 824              	.LBB1369:
 825              	.LBI1369:
  68:eurorack/plaits/dsp/voice.h ****   ~ChannelPostProcessor() { }
 826              		.loc 4 68 3 is_stmt 1 view .LVU230
 827              	.LBB1370:
 828              	.LBI1370:
 829              		.file 38 "eurorack/stmlib/dsp/limiter.h"
   1:eurorack/stmlib/dsp/limiter.h **** // Copyright 2015 Emilie Gillet.
   2:eurorack/stmlib/dsp/limiter.h **** //
   3:eurorack/stmlib/dsp/limiter.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 62


   4:eurorack/stmlib/dsp/limiter.h **** //
   5:eurorack/stmlib/dsp/limiter.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/dsp/limiter.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/dsp/limiter.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/dsp/limiter.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/dsp/limiter.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/dsp/limiter.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/dsp/limiter.h **** // 
  12:eurorack/stmlib/dsp/limiter.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/dsp/limiter.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/dsp/limiter.h **** // 
  15:eurorack/stmlib/dsp/limiter.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/dsp/limiter.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/dsp/limiter.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/dsp/limiter.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/dsp/limiter.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/dsp/limiter.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/dsp/limiter.h **** // THE SOFTWARE.
  22:eurorack/stmlib/dsp/limiter.h **** // 
  23:eurorack/stmlib/dsp/limiter.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/dsp/limiter.h **** //
  25:eurorack/stmlib/dsp/limiter.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/dsp/limiter.h **** //
  27:eurorack/stmlib/dsp/limiter.h **** // Limiter.
  28:eurorack/stmlib/dsp/limiter.h **** 
  29:eurorack/stmlib/dsp/limiter.h **** #ifndef STMLIB_DSP_LIMITER_H_
  30:eurorack/stmlib/dsp/limiter.h **** #define STMLIB_DSP_LIMITER_H_
  31:eurorack/stmlib/dsp/limiter.h **** 
  32:eurorack/stmlib/dsp/limiter.h **** #include "stmlib/stmlib.h"
  33:eurorack/stmlib/dsp/limiter.h **** 
  34:eurorack/stmlib/dsp/limiter.h **** #include <algorithm>
  35:eurorack/stmlib/dsp/limiter.h **** 
  36:eurorack/stmlib/dsp/limiter.h **** #include "stmlib/dsp/dsp.h"
  37:eurorack/stmlib/dsp/limiter.h **** #include "stmlib/dsp/filter.h"
  38:eurorack/stmlib/dsp/limiter.h **** 
  39:eurorack/stmlib/dsp/limiter.h **** namespace stmlib {
  40:eurorack/stmlib/dsp/limiter.h **** 
  41:eurorack/stmlib/dsp/limiter.h **** class Limiter {
  42:eurorack/stmlib/dsp/limiter.h ****  public:
  43:eurorack/stmlib/dsp/limiter.h ****   Limiter() { }
 830              		.loc 38 43 3 view .LVU231
 831              		.loc 38 43 3 is_stmt 0 view .LVU232
 832              	.LBE1370:
 833              	.LBB1371:
 834              	.LBI1371:
 835              		.file 39 "eurorack/plaits/dsp/fx/low_pass_gate.h"
   1:eurorack/plaits/dsp/fx/low_pass_gate.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/plaits/dsp/fx/low_pass_gate.h **** //
   3:eurorack/plaits/dsp/fx/low_pass_gate.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/fx/low_pass_gate.h **** //
   5:eurorack/plaits/dsp/fx/low_pass_gate.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/fx/low_pass_gate.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/fx/low_pass_gate.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/fx/low_pass_gate.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/fx/low_pass_gate.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/fx/low_pass_gate.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/fx/low_pass_gate.h **** // 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 63


  12:eurorack/plaits/dsp/fx/low_pass_gate.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/fx/low_pass_gate.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/fx/low_pass_gate.h **** // 
  15:eurorack/plaits/dsp/fx/low_pass_gate.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/fx/low_pass_gate.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/fx/low_pass_gate.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/fx/low_pass_gate.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/fx/low_pass_gate.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/fx/low_pass_gate.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/fx/low_pass_gate.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/fx/low_pass_gate.h **** // 
  23:eurorack/plaits/dsp/fx/low_pass_gate.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/fx/low_pass_gate.h **** //
  25:eurorack/plaits/dsp/fx/low_pass_gate.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/fx/low_pass_gate.h **** //
  27:eurorack/plaits/dsp/fx/low_pass_gate.h **** // Approximative low pass gate.
  28:eurorack/plaits/dsp/fx/low_pass_gate.h **** 
  29:eurorack/plaits/dsp/fx/low_pass_gate.h **** #ifndef PLAITS_DSP_FX_LOW_PASS_GATE_H_
  30:eurorack/plaits/dsp/fx/low_pass_gate.h **** #define PLAITS_DSP_FX_LOW_PASS_GATE_H_
  31:eurorack/plaits/dsp/fx/low_pass_gate.h **** 
  32:eurorack/plaits/dsp/fx/low_pass_gate.h **** #include <algorithm>
  33:eurorack/plaits/dsp/fx/low_pass_gate.h **** 
  34:eurorack/plaits/dsp/fx/low_pass_gate.h **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/fx/low_pass_gate.h **** #include "stmlib/dsp/filter.h"
  36:eurorack/plaits/dsp/fx/low_pass_gate.h **** #include "stmlib/dsp/parameter_interpolator.h"
  37:eurorack/plaits/dsp/fx/low_pass_gate.h **** 
  38:eurorack/plaits/dsp/fx/low_pass_gate.h **** namespace plaits {
  39:eurorack/plaits/dsp/fx/low_pass_gate.h ****   
  40:eurorack/plaits/dsp/fx/low_pass_gate.h **** class LowPassGate {
  41:eurorack/plaits/dsp/fx/low_pass_gate.h ****  public:
  42:eurorack/plaits/dsp/fx/low_pass_gate.h ****   LowPassGate() { }
 836              		.loc 39 42 3 is_stmt 1 view .LVU233
 837              	.LBB1372:
 838              	.LBI1372:
 839              		.loc 9 179 3 view .LVU234
 840              		.loc 9 179 3 is_stmt 0 view .LVU235
 841              	.LBE1372:
 842              	.LBE1371:
 843              	.LBE1369:
 844              	.LBB1373:
 845              	.LBI1373:
  68:eurorack/plaits/dsp/voice.h ****   ~ChannelPostProcessor() { }
 846              		.loc 4 68 3 is_stmt 1 view .LVU236
 847              	.LBB1374:
 848              	.LBI1374:
 849              		.loc 38 43 3 view .LVU237
 850              		.loc 38 43 3 is_stmt 0 view .LVU238
 851              	.LBE1374:
 852              	.LBB1375:
 853              	.LBI1375:
 854              		.loc 39 42 3 is_stmt 1 view .LVU239
 855              	.LBB1376:
 856              	.LBI1376:
 857              		.loc 9 179 3 view .LVU240
 858              		.loc 9 179 3 is_stmt 0 view .LVU241
 859              	.LBE1376:
 860              	.LBE1375:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 64


 861              	.LBE1373:
 862              	.LBB1377:
 863              	.LBI1377:
  81:eurorack/plaits/dsp/engine/engine.h ****   ~Engine() { }
  82:eurorack/plaits/dsp/engine/engine.h ****   virtual void Init(stmlib::BufferAllocator* allocator) = 0;
  83:eurorack/plaits/dsp/engine/engine.h ****   virtual void Reset() = 0;
  84:eurorack/plaits/dsp/engine/engine.h ****   virtual void Render(
  85:eurorack/plaits/dsp/engine/engine.h ****       const EngineParameters& parameters,
  86:eurorack/plaits/dsp/engine/engine.h ****       float* out,
  87:eurorack/plaits/dsp/engine/engine.h ****       float* aux,
  88:eurorack/plaits/dsp/engine/engine.h ****       size_t size,
  89:eurorack/plaits/dsp/engine/engine.h ****       bool* already_enveloped) = 0;
  90:eurorack/plaits/dsp/engine/engine.h ****   PostProcessingSettings post_processing_settings;
  91:eurorack/plaits/dsp/engine/engine.h **** };
  92:eurorack/plaits/dsp/engine/engine.h **** 
  93:eurorack/plaits/dsp/engine/engine.h **** template<int max_size>
  94:eurorack/plaits/dsp/engine/engine.h **** class EngineRegistry {
  95:eurorack/plaits/dsp/engine/engine.h ****  public:
  96:eurorack/plaits/dsp/engine/engine.h ****   EngineRegistry() { }
 864              		.loc 6 96 3 is_stmt 1 view .LVU242
 865              		.loc 6 96 3 is_stmt 0 view .LVU243
 866              	.LBE1377:
 867              	.LBE1382:
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 868              		.loc 1 17 103 is_stmt 1 view .LVU244
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 869              		.loc 1 17 103 view .LVU245
 870 0056 03F55F63 		add	r3, r3, #3568
 871 005a 9342     		cmp	r3, r2
 872 005c D5D1     		bne	.L20
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 873              		.loc 1 17 103 discriminator 2 view .LVU246
 874 005e 04F56852 		add	r2, r4, #14848
 875 0062 04F56453 		add	r3, r4, #14592
 876 0066 1032     		adds	r2, r2, #16
 877              	.LVL32:
 878              	.L21:
 879              	.LBB1383:
 880              	.LBI1383:
  20:VoiceEnvelope.h ****         current_state(ENV_IDLE),
 881              		.loc 3 20 5 view .LVU247
 882              	.LBB1384:
  27:VoiceEnvelope.h ****     {}
 883              		.loc 3 27 31 is_stmt 0 view .LVU248
 884 0068 0121     		movs	r1, #1
 885 006a 0025     		movs	r5, #0
 886 006c 4FF07C50 		mov	r0, #1056964608
 887              	.LBE1384:
 888              	.LBE1383:
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 889              		.loc 1 17 103 view .LVU249
 890 0070 4433     		adds	r3, r3, #68
 891              	.LVL33:
 892              	.LBB1386:
 893              	.LBB1385:
  27:VoiceEnvelope.h ****     {}
 894              		.loc 3 27 31 view .LVU250
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 65


 895 0072 03F8431C 		strb	r1, [r3, #-67]
 896 0076 0021     		movs	r1, #0
 897 0078 03F8445C 		strb	r5, [r3, #-68]
 898 007c 43F8401C 		str	r1, [r3, #-64]	@ float
 899 0080 43F83C0C 		str	r0, [r3, #-60]	@ float
 900 0084 43F8380C 		str	r0, [r3, #-56]	@ float
 901 0088 43F8085C 		str	r5, [r3, #-8]
 902 008c 43F8041C 		str	r1, [r3, #-4]	@ float
 903              	.LVL34:
  27:VoiceEnvelope.h ****     {}
 904              		.loc 3 27 31 view .LVU251
 905              	.LBE1385:
 906              	.LBE1386:
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 907              		.loc 1 17 103 is_stmt 1 view .LVU252
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 908              		.loc 1 17 103 view .LVU253
 909 0090 9342     		cmp	r3, r2
 910 0092 E9D1     		bne	.L21
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 911              		.loc 1 17 103 is_stmt 0 discriminator 6 view .LVU254
 912 0094 04F54053 		add	r3, r4, #12288
  19:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
 913              		.loc 1 19 11 discriminator 6 view .LVU255
 914 0098 04F56850 		add	r0, r4, #14848
 915 009c 2946     		mov	r1, r5
 916 009e 1022     		movs	r2, #16
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 917              		.loc 1 17 103 discriminator 6 view .LVU256
 918 00a0 C3F8245D 		str	r5, [r3, #3364]
  19:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
 919              		.loc 1 19 11 discriminator 6 view .LVU257
 920 00a4 1430     		adds	r0, r0, #20
  17:Polyphony.cpp ****     memset(voice_active_, 0, sizeof(voice_active_));
 921              		.loc 1 17 103 discriminator 6 view .LVU258
 922 00a6 C3F8285D 		str	r5, [r3, #3368]
 923 00aa 83F82C5D 		strb	r5, [r3, #3372]
 924 00ae A3F82E5D 		strh	r5, [r3, #3374]	@ movhi
  18:Polyphony.cpp ****     memset(voice_note_, 0, sizeof(voice_note_));
 925              		.loc 1 18 5 is_stmt 1 discriminator 6 view .LVU259
  18:Polyphony.cpp ****     memset(voice_note_, 0, sizeof(voice_note_));
 926              		.loc 1 18 11 is_stmt 0 discriminator 6 view .LVU260
 927 00b2 43F61023 		movw	r3, #14864
 928 00b6 E550     		str	r5, [r4, r3]	@ unaligned
  19:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
 929              		.loc 1 19 5 is_stmt 1 discriminator 6 view .LVU261
  19:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
 930              		.loc 1 19 11 is_stmt 0 discriminator 6 view .LVU262
 931 00b8 FFF7FEFF 		bl	memset
 932              	.LVL35:
  20:Polyphony.cpp ****     memset(mix_buffer_aux_, 0, sizeof(mix_buffer_aux_));
 933              		.loc 1 20 5 is_stmt 1 discriminator 6 view .LVU263
  20:Polyphony.cpp ****     memset(mix_buffer_aux_, 0, sizeof(mix_buffer_aux_));
 934              		.loc 1 20 11 is_stmt 0 discriminator 6 view .LVU264
 935 00bc 04F57050 		add	r0, r4, #15360
 936 00c0 2946     		mov	r1, r5
 937 00c2 8022     		movs	r2, #128
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 66


 938 00c4 2430     		adds	r0, r0, #36
 939 00c6 FFF7FEFF 		bl	memset
 940              	.LVL36:
  21:Polyphony.cpp **** }
 941              		.loc 1 21 5 is_stmt 1 discriminator 6 view .LVU265
  21:Polyphony.cpp **** }
 942              		.loc 1 21 11 is_stmt 0 discriminator 6 view .LVU266
 943 00ca 04F57250 		add	r0, r4, #15488
 944 00ce 8022     		movs	r2, #128
 945 00d0 2946     		mov	r1, r5
 946 00d2 2430     		adds	r0, r0, #36
 947 00d4 FFF7FEFF 		bl	memset
 948              	.LVL37:
 949              	.LBE1392:
  22:Polyphony.cpp **** 
 950              		.loc 1 22 1 discriminator 6 view .LVU267
 951 00d8 2046     		mov	r0, r4
 952 00da 38BD     		pop	{r3, r4, r5, pc}
 953              	.LVL38:
 954              	.L25:
  22:Polyphony.cpp **** 
 955              		.loc 1 22 1 discriminator 6 view .LVU268
 956              		.align	2
 957              	.L24:
 958 00dc 08000000 		.word	_ZTVN6plaits14AdditiveEngineE+8
 959 00e0 08000000 		.word	_ZTVN6plaits14BassDrumEngineE+8
 960 00e4 08000000 		.word	_ZTVN6plaits8FMEngineE+8
 961 00e8 08000000 		.word	_ZTVN6plaits11GrainEngineE+8
 962 00ec 08000000 		.word	_ZTVN6plaits11HiHatEngineE+8
 963 00f0 08000000 		.word	_ZTVN6plaits11ModalEngineE+8
 964 00f4 08000000 		.word	_ZTVN6plaits11NoiseEngineE+8
 965 00f8 08000000 		.word	_ZTVN6plaits14ParticleEngineE+8
 966 00fc 08000000 		.word	_ZTVN6plaits15SnareDrumEngineE+8
 967 0100 08000000 		.word	_ZTVN6plaits12StringEngineE+8
 968 0104 08000000 		.word	_ZTVN6plaits11SwarmEngineE+8
 969 0108 08000000 		.word	_ZTVN6plaits19VirtualAnalogEngineE+8
 970 010c 08000000 		.word	_ZTVN6plaits17WaveshapingEngineE+8
 971              		.cfi_endproc
 972              	.LFE5797:
 974              		.global	_ZN15PolyphonyEngineC1Ev
 975              		.thumb_set _ZN15PolyphonyEngineC1Ev,_ZN15PolyphonyEngineC2Ev
 976              		.section	.text._ZN15PolyphonyEngine11ResetVoicesEv,"ax",%progbits
 977              		.align	1
 978              		.global	_ZN15PolyphonyEngine11ResetVoicesEv
 979              		.syntax unified
 980              		.thumb
 981              		.thumb_func
 983              	_ZN15PolyphonyEngine11ResetVoicesEv:
 984              	.LVL39:
 985              	.LFB5805:
  30:Polyphony.cpp **** 
  31:Polyphony.cpp **** void PolyphonyEngine::Init(daisy::DaisySeed* hw) {
  32:Polyphony.cpp ****     hw_ptr_ = hw;
  33:Polyphony.cpp ****     AllocateVoices(); 
  34:Polyphony.cpp ****     InitVoiceParameters(); 
  35:Polyphony.cpp **** }
  36:Polyphony.cpp **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 67


  37:Polyphony.cpp **** void PolyphonyEngine::HandleTouchInput(uint16_t current_touch_state_param, uint16_t last_touch_stat
  38:Polyphony.cpp ****     bool percussive_engine = (engine_index > 7);
  39:Polyphony.cpp **** 
  40:Polyphony.cpp ****     for (int i = 0; i < 12; ++i) {
  41:Polyphony.cpp ****         bool pad_currently_pressed = (current_touch_state_param >> i) & 1;
  42:Polyphony.cpp ****         bool pad_was_pressed = (last_touch_state_param >> i) & 1; 
  43:Polyphony.cpp ****         float note_for_pad = PolyphonyEngine::kTouchMidiNotes_[i];
  44:Polyphony.cpp **** 
  45:Polyphony.cpp ****         if (pad_currently_pressed && !pad_was_pressed) { // Note ON
  46:Polyphony.cpp ****             if (poly_mode) {
  47:Polyphony.cpp ****                 int voice_idx = FindFreeVoice(effective_num_voices); 
  48:Polyphony.cpp ****                 if (voice_idx != -1) {
  49:Polyphony.cpp ****                     voice_note_[voice_idx] = note_for_pad;
  50:Polyphony.cpp ****                     voice_active_[voice_idx] = true;
  51:Polyphony.cpp ****                     modulations_[voice_idx].trigger = 1.0f; 
  52:Polyphony.cpp ****                     if (percussive_engine) {
  53:Polyphony.cpp ****                         modulations_[voice_idx].trigger_patched = true;
  54:Polyphony.cpp ****                     } else {
  55:Polyphony.cpp ****                         modulations_[voice_idx].trigger_patched = false;
  56:Polyphony.cpp ****                     }
  57:Polyphony.cpp ****                     voice_envelopes_[voice_idx].Trigger(); 
  58:Polyphony.cpp ****                 }
  59:Polyphony.cpp ****             } else { // Mono mode
  60:Polyphony.cpp ****                 AssignMonoNote(note_for_pad, percussive_engine);
  61:Polyphony.cpp ****             }
  62:Polyphony.cpp ****         } else if (!pad_currently_pressed && pad_was_pressed) { // Note OFF
  63:Polyphony.cpp ****             if (poly_mode) {
  64:Polyphony.cpp ****                  int voice_idx = FindVoiceForNote(note_for_pad, engine_index, poly_mode, effective_
  65:Polyphony.cpp ****                  if (voice_idx != -1) {
  66:Polyphony.cpp ****                      voice_active_[voice_idx] = false; 
  67:Polyphony.cpp ****                      voice_envelopes_[voice_idx].Release(); 
  68:Polyphony.cpp ****                      modulations_[voice_idx].trigger_patched = false; 
  69:Polyphony.cpp ****                  }
  70:Polyphony.cpp ****             } else { // Mono mode
  71:Polyphony.cpp ****                 if (voice_active_[0] && fabsf(voice_note_[0] - note_for_pad) < 0.1f) {
  72:Polyphony.cpp ****                     voice_active_[0] = false; 
  73:Polyphony.cpp ****                     voice_envelopes_[0].Release();
  74:Polyphony.cpp ****                     modulations_[0].trigger_patched = false;
  75:Polyphony.cpp ****                 }
  76:Polyphony.cpp ****             }
  77:Polyphony.cpp ****         }
  78:Polyphony.cpp ****     }
  79:Polyphony.cpp **** }
  80:Polyphony.cpp **** 
  81:Polyphony.cpp **** void PolyphonyEngine::RenderBlock(const RenderParameters& params) {
  82:Polyphony.cpp ****     PrepVoiceParams(params);
  83:Polyphony.cpp ****     
  84:Polyphony.cpp ****     ProcessEnvelopes(params.poly_mode);
  85:Polyphony.cpp **** 
  86:Polyphony.cpp ****     if (params.arp_on) {
  87:Polyphony.cpp ****         modulations_[0].trigger = 0.0f;
  88:Polyphony.cpp ****         modulations_[0].trigger_patched = false; 
  89:Polyphony.cpp ****     }
  90:Polyphony.cpp **** }
  91:Polyphony.cpp **** 
  92:Polyphony.cpp **** void PolyphonyEngine::ResetVoices() {
 986              		.loc 1 92 37 is_stmt 1 view -0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 68


 987              		.cfi_startproc
 988              		@ args = 0, pretend = 0, frame = 0
 989              		@ frame_needed = 0, uses_anonymous_args = 0
  93:Polyphony.cpp ****     for (int v = 0; v < NUM_VOICES; v++) {
 990              		.loc 1 93 5 view .LVU270
 991              	.LBB1393:
 992              		.loc 1 93 23 view .LVU271
 993              	.LBE1393:
  92:Polyphony.cpp ****     for (int v = 0; v < NUM_VOICES; v++) {
 994              		.loc 1 92 37 is_stmt 0 view .LVU272
 995 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 996              		.cfi_def_cfa_offset 24
 997              		.cfi_offset 3, -24
 998              		.cfi_offset 4, -20
 999              		.cfi_offset 5, -16
 1000              		.cfi_offset 6, -12
 1001              		.cfi_offset 7, -8
 1002              		.cfi_offset 14, -4
 1003 0002 00F56856 		add	r6, r0, #14848
 1004 0006 00F56155 		add	r5, r0, #14400
 1005 000a 00F56854 		add	r4, r0, #14848
 1006 000e 00F56457 		add	r7, r0, #14592
 1007 0012 1036     		adds	r6, r6, #16
 1008 0014 3835     		adds	r5, r5, #56
 1009 0016 1434     		adds	r4, r4, #20
 1010              	.LVL40:
 1011              	.L27:
 1012              	.LBB1394:
  94:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 1013              		.loc 1 94 9 is_stmt 1 discriminator 2 view .LVU273
 1014              		.loc 1 94 34 is_stmt 0 discriminator 2 view .LVU274
 1015 0018 3846     		mov	r0, r7
  93:Polyphony.cpp ****     for (int v = 0; v < NUM_VOICES; v++) {
 1016              		.loc 1 93 23 discriminator 2 view .LVU275
 1017 001a 2835     		adds	r5, r5, #40
 1018              		.loc 1 94 34 discriminator 2 view .LVU276
 1019 001c FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 1020              	.LVL41:
  95:Polyphony.cpp ****         voice_active_[v] = false;
 1021              		.loc 1 95 9 is_stmt 1 discriminator 2 view .LVU277
 1022              		.loc 1 95 26 is_stmt 0 discriminator 2 view .LVU278
 1023 0020 0023     		movs	r3, #0
  96:Polyphony.cpp ****         modulations_[v].trigger = 0.0f;
 1024              		.loc 1 96 33 discriminator 2 view .LVU279
 1025 0022 0022     		movs	r2, #0
  93:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 1026              		.loc 1 93 23 discriminator 2 view .LVU280
 1027 0024 4437     		adds	r7, r7, #68
  95:Polyphony.cpp ****         voice_active_[v] = false;
 1028              		.loc 1 95 26 discriminator 2 view .LVU281
 1029 0026 06F8013B 		strb	r3, [r6], #1
 1030              	.LVL42:
 1031              		.loc 1 96 9 is_stmt 1 discriminator 2 view .LVU282
  93:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 1032              		.loc 1 93 23 is_stmt 0 discriminator 2 view .LVU283
 1033 002a A642     		cmp	r6, r4
 1034              		.loc 1 96 33 discriminator 2 view .LVU284
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 69


 1035 002c 45F8282C 		str	r2, [r5, #-40]	@ float
  97:Polyphony.cpp ****         modulations_[v].trigger_patched = false; 
 1036              		.loc 1 97 9 is_stmt 1 discriminator 2 view .LVU285
 1037              		.loc 1 97 41 is_stmt 0 discriminator 2 view .LVU286
 1038 0030 05F81D3C 		strb	r3, [r5, #-29]
  98:Polyphony.cpp ****         modulations_[v].level_patched = false;  
 1039              		.loc 1 98 9 is_stmt 1 discriminator 2 view .LVU287
 1040              		.loc 1 98 39 is_stmt 0 discriminator 2 view .LVU288
 1041 0034 05F81C3C 		strb	r3, [r5, #-28]
  93:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 1042              		.loc 1 93 5 is_stmt 1 discriminator 2 view .LVU289
 1043              	.LVL43:
  93:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 1044              		.loc 1 93 23 discriminator 2 view .LVU290
 1045 0038 EED1     		bne	.L27
 1046              	.LBE1394:
  99:Polyphony.cpp ****     }
 100:Polyphony.cpp **** }
 1047              		.loc 1 100 1 is_stmt 0 view .LVU291
 1048 003a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1049              		.loc 1 100 1 view .LVU292
 1050              		.cfi_endproc
 1051              	.LFE5805:
 1053              		.section	.text._ZN15PolyphonyEngine14AllocateVoicesEv,"ax",%progbits
 1054              		.align	1
 1055              		.global	_ZN15PolyphonyEngine14AllocateVoicesEv
 1056              		.syntax unified
 1057              		.thumb
 1058              		.thumb_func
 1060              	_ZN15PolyphonyEngine14AllocateVoicesEv:
 1061              	.LVL44:
 1062              	.LFB5806:
 101:Polyphony.cpp **** 
 102:Polyphony.cpp **** void PolyphonyEngine::AllocateVoices() {
 1063              		.loc 1 102 40 is_stmt 1 view -0
 1064              		.cfi_startproc
 1065              		@ args = 0, pretend = 0, frame = 0
 1066              		@ frame_needed = 0, uses_anonymous_args = 0
 103:Polyphony.cpp ****     if (!allocator_) {
 1067              		.loc 1 103 5 view .LVU294
 102:Polyphony.cpp ****     if (!allocator_) {
 1068              		.loc 1 102 40 is_stmt 0 view .LVU295
 1069 0000 70B5     		push	{r4, r5, r6, lr}
 1070              		.cfi_def_cfa_offset 16
 1071              		.cfi_offset 4, -16
 1072              		.cfi_offset 5, -12
 1073              		.cfi_offset 6, -8
 1074              		.cfi_offset 14, -4
 1075              		.loc 1 103 10 view .LVU296
 1076 0002 00F54055 		add	r5, r0, #12288
 102:Polyphony.cpp ****     if (!allocator_) {
 1077              		.loc 1 102 40 view .LVU297
 1078 0006 0446     		mov	r4, r0
 1079              		.loc 1 103 5 view .LVU298
 1080 0008 D5F8243D 		ldr	r3, [r5, #3364]
 1081 000c 5BB9     		cbnz	r3, .L30
 104:Polyphony.cpp ****         allocator_ = new stmlib::BufferAllocator(shared_buffer, sizeof(shared_buffer));
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 70


 1082              		.loc 1 104 9 is_stmt 1 view .LVU299
 1083              		.loc 1 104 86 is_stmt 0 view .LVU300
 1084 000e 1020     		movs	r0, #16
 1085              	.LVL45:
 1086              		.loc 1 104 86 view .LVU301
 1087 0010 FFF7FEFF 		bl	_Znwj
 1088              	.LVL46:
 1089              	.LBB1395:
 1090              	.LBI1395:
  40:eurorack/stmlib/utils/buffer_allocator.h ****   
  41:eurorack/stmlib/utils/buffer_allocator.h ****   BufferAllocator(void* buffer, size_t size) {
 1091              		.loc 2 41 3 is_stmt 1 view .LVU302
 1092              	.LBE1395:
  42:eurorack/stmlib/utils/buffer_allocator.h ****     Init(buffer, size);
 1093              		.loc 2 42 5 view .LVU303
 1094              	.LBB1402:
 1095              	.LBB1396:
 1096              	.LBI1396:
  43:eurorack/stmlib/utils/buffer_allocator.h ****   }
  44:eurorack/stmlib/utils/buffer_allocator.h ****   
  45:eurorack/stmlib/utils/buffer_allocator.h ****   inline void Init(void* buffer, size_t size) {
 1097              		.loc 2 45 15 view .LVU304
 1098              	.LBB1397:
  46:eurorack/stmlib/utils/buffer_allocator.h ****     buffer_ = static_cast<uint8_t*>(buffer);
 1099              		.loc 2 46 5 view .LVU305
 1100              		.loc 2 46 13 is_stmt 0 view .LVU306
 1101 0014 0A4A     		ldr	r2, .L33
  47:eurorack/stmlib/utils/buffer_allocator.h ****     size_ = size;
 1102              		.loc 2 47 11 view .LVU307
 1103 0016 4FF48023 		mov	r3, #262144
 1104              	.LBE1397:
 1105              	.LBE1396:
 1106              	.LBE1402:
 1107              		.loc 1 104 20 view .LVU308
 1108 001a C5F8240D 		str	r0, [r5, #3364]
 1109              	.LBB1403:
 1110              	.LBB1401:
 1111              	.LBB1400:
  46:eurorack/stmlib/utils/buffer_allocator.h ****     buffer_ = static_cast<uint8_t*>(buffer);
 1112              		.loc 2 46 13 view .LVU309
 1113 001e 4260     		str	r2, [r0, #4]
 1114              		.loc 2 47 5 is_stmt 1 view .LVU310
 1115              		.loc 2 47 11 is_stmt 0 view .LVU311
 1116 0020 C360     		str	r3, [r0, #12]
  48:eurorack/stmlib/utils/buffer_allocator.h ****     Free();
 1117              		.loc 2 48 5 is_stmt 1 view .LVU312
 1118              	.LVL47:
 1119              	.LBB1398:
 1120              	.LBI1398:
  49:eurorack/stmlib/utils/buffer_allocator.h ****   }
  50:eurorack/stmlib/utils/buffer_allocator.h **** 
  51:eurorack/stmlib/utils/buffer_allocator.h ****   template<typename T>
  52:eurorack/stmlib/utils/buffer_allocator.h ****   inline T* Allocate() {
  53:eurorack/stmlib/utils/buffer_allocator.h ****     return Allocate<T>(1);
  54:eurorack/stmlib/utils/buffer_allocator.h ****   }
  55:eurorack/stmlib/utils/buffer_allocator.h ****   
  56:eurorack/stmlib/utils/buffer_allocator.h ****   template<typename T>
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 71


  57:eurorack/stmlib/utils/buffer_allocator.h ****   inline T* Allocate(size_t size) {
  58:eurorack/stmlib/utils/buffer_allocator.h ****     size_t size_bytes = sizeof(T) * size;
  59:eurorack/stmlib/utils/buffer_allocator.h ****     if (size_bytes <= free_) {
  60:eurorack/stmlib/utils/buffer_allocator.h ****       T* start = static_cast<T*>(static_cast<void*>(next_));
  61:eurorack/stmlib/utils/buffer_allocator.h ****       next_ += size_bytes;
  62:eurorack/stmlib/utils/buffer_allocator.h ****       free_ -= size_bytes;
  63:eurorack/stmlib/utils/buffer_allocator.h ****       return start;
  64:eurorack/stmlib/utils/buffer_allocator.h ****     } else {
  65:eurorack/stmlib/utils/buffer_allocator.h ****       return NULL;
  66:eurorack/stmlib/utils/buffer_allocator.h ****     }
  67:eurorack/stmlib/utils/buffer_allocator.h ****   }
  68:eurorack/stmlib/utils/buffer_allocator.h ****   
  69:eurorack/stmlib/utils/buffer_allocator.h ****   inline void Free() {
 1121              		.loc 2 69 15 view .LVU313
 1122              	.LBB1399:
  70:eurorack/stmlib/utils/buffer_allocator.h ****     next_ = buffer_;
 1123              		.loc 2 70 5 view .LVU314
 1124              		.loc 2 70 11 is_stmt 0 view .LVU315
 1125 0022 0260     		str	r2, [r0]
  71:eurorack/stmlib/utils/buffer_allocator.h ****     free_ = size_;
 1126              		.loc 2 71 5 is_stmt 1 view .LVU316
 1127              		.loc 2 71 11 is_stmt 0 view .LVU317
 1128 0024 8360     		str	r3, [r0, #8]
 1129              	.LVL48:
 1130              	.L30:
 1131              		.loc 2 71 11 view .LVU318
 1132 0026 04F55F56 		add	r6, r4, #14272
 1133              	.LVL49:
 1134              	.L31:
 1135              		.loc 2 71 11 view .LVU319
 1136              	.LBE1399:
 1137              	.LBE1398:
 1138              	.LBE1400:
 1139              	.LBE1401:
 1140              	.LBE1403:
 1141              	.LBB1404:
 105:Polyphony.cpp ****     }
 106:Polyphony.cpp **** 
 107:Polyphony.cpp ****     for (int i = 0; i < NUM_VOICES; ++i) {
 108:Polyphony.cpp ****         voices_[i].Init(allocator_);
 1142              		.loc 1 108 9 is_stmt 1 discriminator 2 view .LVU320
 1143              		.loc 1 108 24 is_stmt 0 discriminator 2 view .LVU321
 1144 002a 2046     		mov	r0, r4
 107:Polyphony.cpp ****         voices_[i].Init(allocator_);
 1145              		.loc 1 107 23 discriminator 2 view .LVU322
 1146 002c 04F55F64 		add	r4, r4, #3568
 1147              		.loc 1 108 24 discriminator 2 view .LVU323
 1148 0030 D5F8241D 		ldr	r1, [r5, #3364]
 1149 0034 FFF7FEFF 		bl	_ZN6plaits5Voice4InitEPN6stmlib15BufferAllocatorE
 1150              	.LVL50:
 107:Polyphony.cpp ****         voices_[i].Init(allocator_);
 1151              		.loc 1 107 5 is_stmt 1 discriminator 2 view .LVU324
 107:Polyphony.cpp ****         voices_[i].Init(allocator_);
 1152              		.loc 1 107 23 discriminator 2 view .LVU325
 1153 0038 B442     		cmp	r4, r6
 1154 003a F6D1     		bne	.L31
 1155              	.LBE1404:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 72


 109:Polyphony.cpp ****     }
 110:Polyphony.cpp **** }
 1156              		.loc 1 110 1 is_stmt 0 view .LVU326
 1157 003c 70BD     		pop	{r4, r5, r6, pc}
 1158              	.LVL51:
 1159              	.L34:
 1160              		.loc 1 110 1 view .LVU327
 1161 003e 00BF     		.align	2
 1162              	.L33:
 1163 0040 00000000 		.word	shared_buffer
 1164              		.cfi_endproc
 1165              	.LFE5806:
 1167              		.section	.text._ZN15PolyphonyEngine19InitVoiceParametersEv,"ax",%progbits
 1168              		.align	1
 1169              		.global	_ZN15PolyphonyEngine19InitVoiceParametersEv
 1170              		.syntax unified
 1171              		.thumb
 1172              		.thumb_func
 1174              	_ZN15PolyphonyEngine19InitVoiceParametersEv:
 1175              	.LVL52:
 1176              	.LFB5807:
 111:Polyphony.cpp **** 
 112:Polyphony.cpp **** void PolyphonyEngine::InitVoiceParameters() {
 1177              		.loc 1 112 45 is_stmt 1 view -0
 1178              		.cfi_startproc
 1179              		@ args = 0, pretend = 0, frame = 0
 1180              		@ frame_needed = 0, uses_anonymous_args = 0
 113:Polyphony.cpp ****     float sample_rate_val = SAMPLE_RATE;
 1181              		.loc 1 113 5 view .LVU329
 1182              		.loc 1 113 11 is_stmt 0 view .LVU330
 1183 0000 4D4B     		ldr	r3, .L38
 112:Polyphony.cpp ****     float sample_rate_val = SAMPLE_RATE;
 1184              		.loc 1 112 45 view .LVU331
 1185 0002 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1186              		.cfi_def_cfa_offset 24
 1187              		.cfi_offset 4, -24
 1188              		.cfi_offset 5, -20
 1189              		.cfi_offset 6, -16
 1190              		.cfi_offset 7, -12
 1191              		.cfi_offset 8, -8
 1192              		.cfi_offset 14, -4
 1193 0006 2DED0C8B 		vpush.64	{d8, d9, d10, d11, d12, d13}
 1194              		.cfi_def_cfa_offset 72
 1195              		.cfi_offset 80, -72
 1196              		.cfi_offset 81, -68
 1197              		.cfi_offset 82, -64
 1198              		.cfi_offset 83, -60
 1199              		.cfi_offset 84, -56
 1200              		.cfi_offset 85, -52
 1201              		.cfi_offset 86, -48
 1202              		.cfi_offset 87, -44
 1203              		.cfi_offset 88, -40
 1204              		.cfi_offset 89, -36
 1205              		.cfi_offset 90, -32
 1206              		.cfi_offset 91, -28
 1207              	.LBB1422:
 1208              	.LBB1423:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 73


 1209              	.LBB1424:
  31:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
 1210              		.loc 3 31 37 view .LVU332
 1211 000a B2EE00AA 		vmov.f32	s20, #8.0e+0
 1212              	.LBE1424:
 1213              	.LBE1423:
 1214              	.LBE1422:
 1215              		.loc 1 113 11 view .LVU333
 1216 000e D3ED007A 		vldr.32	s15, [r3]
 1217              	.LVL53:
 114:Polyphony.cpp **** 
 115:Polyphony.cpp ****     for (int i = 0; i < NUM_VOICES; ++i) {
 1218              		.loc 1 115 5 is_stmt 1 view .LVU334
 1219              	.LBB1475:
 1220              		.loc 1 115 23 view .LVU335
 1221              	.LBB1436:
 1222              	.LBB1437:
 1223              	.LBB1438:
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 1224              		.loc 3 56 61 is_stmt 0 view .LVU336
 1225 0012 DFED4A9A 		vldr.32	s19, .L38+4
  57:VoiceEnvelope.h ****             curve = 0.5f;
 1226              		.loc 3 57 60 view .LVU337
 1227 0016 B6EE088A 		vmov.f32	s16, #7.5e-1
 1228              	.LBE1438:
 1229              	.LBE1437:
 1230              	.LBE1436:
 1231              	.LBB1455:
 1232              	.LBB1429:
  32:VoiceEnvelope.h ****         min_decay_time_a = 0.4f * sample_rate;      // 400ms min decay A
 1233              		.loc 3 32 35 view .LVU338
 1234 001a 9FED49BA 		vldr.32	s22, .L38+8
 1235 001e 00F56857 		add	r7, r0, #14848
  31:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
 1236              		.loc 3 31 37 view .LVU339
 1237 0022 27EE8AAA 		vmul.f32	s20, s15, s20
  34:VoiceEnvelope.h ****         reset_time = 0.008f * sample_rate;          // 8ms reset time
 1238              		.loc 3 34 36 view .LVU340
 1239 0026 DFED47AA 		vldr.32	s21, .L38+12
  32:VoiceEnvelope.h ****         min_decay_time_a = 0.4f * sample_rate;      // 400ms min decay A
 1240              		.loc 3 32 35 view .LVU341
 1241 002a 27EE8BBA 		vmul.f32	s22, s15, s22
  33:VoiceEnvelope.h ****         min_decay_time_b = 0.0001f * sample_rate;    // 0.1ms min decay B (pulse-like release)
 1242              		.loc 3 33 33 view .LVU342
 1243 002e DFED46BA 		vldr.32	s23, .L38+16
  34:VoiceEnvelope.h ****         reset_time = 0.008f * sample_rate;          // 8ms reset time
 1244              		.loc 3 34 36 view .LVU343
 1245 0032 67EEAAAA 		vmul.f32	s21, s15, s21
  35:VoiceEnvelope.h ****         reset_coefficient = 1.0f / reset_time;
 1246              		.loc 3 35 29 view .LVU344
 1247 0036 9FED459A 		vldr.32	s18, .L38+20
 1248              	.LBE1429:
 1249              	.LBE1455:
 1250              	.LBB1456:
 1251              	.LBB1446:
 1252              	.LBB1439:
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 74


 1253              		.loc 3 56 61 view .LVU345
 1254 003a 6AEE298A 		vmul.f32	s17, s20, s19
 1255 003e 00F55F55 		add	r5, r0, #14272
  57:VoiceEnvelope.h ****             curve = 0.5f;
 1256              		.loc 3 57 60 view .LVU346
 1257 0042 2AEE088A 		vmul.f32	s16, s20, s16
 1258 0046 00F56856 		add	r6, r0, #14848
 1259              	.LBE1439:
 1260              	.LBE1446:
 1261              	.LBE1456:
 1262              	.LBB1457:
 1263              	.LBB1430:
  35:VoiceEnvelope.h ****         reset_coefficient = 1.0f / reset_time;
 1264              		.loc 3 35 29 view .LVU347
 1265 004a 27EE899A 		vmul.f32	s18, s15, s18
 1266 004e 1437     		adds	r7, r7, #20
 1267              	.LBE1430:
 1268              	.LBE1457:
 1269              	.LBB1458:
 1270              	.LBB1447:
 1271              	.LBB1440:
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 1272              		.loc 3 56 72 view .LVU348
 1273 0050 68EEA98A 		vmul.f32	s17, s17, s19
 1274 0054 00F56454 		add	r4, r0, #14592
  57:VoiceEnvelope.h ****             curve = 0.5f;
 1275              		.loc 3 57 26 view .LVU349
 1276 0058 BCEEC88A 		vcvt.u32.f32	s16, s16
 1277 005c 00F56853 		add	r3, r0, #14848
 1278              	.LBE1440:
 1279              	.LBE1447:
 1280              	.LBE1458:
 1281              	.LBB1459:
 1282              	.LBB1431:
  33:VoiceEnvelope.h ****         min_decay_time_b = 0.0001f * sample_rate;    // 0.1ms min decay B (pulse-like release)
 1283              		.loc 3 33 33 view .LVU350
 1284 0060 67EEABBA 		vmul.f32	s23, s15, s23
 1285 0064 1C35     		adds	r5, r5, #28
 1286              	.LBE1431:
 1287              	.LBE1459:
 1288              	.LBB1460:
 1289              	.LBB1448:
 1290              	.LBB1441:
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 1291              		.loc 3 56 27 view .LVU351
 1292 0066 FCEEE88A 		vcvt.u32.f32	s17, s17
 1293 006a 1036     		adds	r6, r6, #16
  57:VoiceEnvelope.h ****             curve = 0.5f;
 1294              		.loc 3 57 86 view .LVU352
 1295 006c B8EE488A 		vcvt.f32.u32	s16, s16
 1296 0070 0134     		adds	r4, r4, #1
 1297              	.LBE1441:
 1298              	.LBE1448:
 1299              	.LBE1460:
 1300              	.LBB1461:
 1301              	.LBB1432:
  36:VoiceEnvelope.h ****         
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 75


 1302              		.loc 3 36 34 view .LVU353
 1303 0072 F7EE007A 		vmov.f32	s15, #1.0e+0
 1304              	.LVL54:
  36:VoiceEnvelope.h ****         
 1305              		.loc 3 36 34 view .LVU354
 1306 0076 2433     		adds	r3, r3, #36
 1307              	.LBE1432:
 1308              	.LBE1461:
 1309              	.LBB1462:
 1310              	.LBB1449:
 1311              	.LBB1442:
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 1312              		.loc 3 56 84 view .LVU355
 1313 0078 F8EE688A 		vcvt.f32.u32	s17, s17
 1314 007c B846     		mov	r8, r7
  57:VoiceEnvelope.h ****             curve = 0.5f;
 1315              		.loc 3 57 86 view .LVU356
 1316 007e 38EE2A8A 		vadd.f32	s16, s16, s21
 1317              	.LBE1442:
 1318              	.LBE1449:
 1319              	.LBE1462:
 1320              	.LBB1463:
 1321              	.LBB1433:
  36:VoiceEnvelope.h ****         
 1322              		.loc 3 36 34 view .LVU357
 1323 0082 87EE89DA 		vdiv.f32	s26, s15, s18
 1324              	.LBE1433:
 1325              	.LBE1463:
 1326              	.LBB1464:
 1327              	.LBB1450:
 1328              	.LBB1443:
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 1329              		.loc 3 56 84 view .LVU358
 1330 0086 78EE8B8A 		vadd.f32	s17, s17, s22
  57:VoiceEnvelope.h ****             curve = 0.5f;
 1331              		.loc 3 57 24 view .LVU359
 1332 008a BCEEC88A 		vcvt.u32.f32	s16, s16
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 1333              		.loc 3 56 25 view .LVU360
 1334 008e FCEEE88A 		vcvt.u32.f32	s17, s17
 1335              	.LBE1443:
  60:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
 1336              		.loc 3 60 35 view .LVU361
 1337 0092 B8EE687A 		vcvt.f32.u32	s14, s17
 1338 0096 C7EE87CA 		vdiv.f32	s25, s15, s14
  61:VoiceEnvelope.h ****         SetAttackCurve(curve);
 1339              		.loc 3 61 34 view .LVU362
 1340 009a B8EE487A 		vcvt.f32.u32	s14, s16
 1341 009e 87EE87CA 		vdiv.f32	s24, s15, s14
 1342              	.LVL55:
 1343              	.L36:
  61:VoiceEnvelope.h ****         SetAttackCurve(curve);
 1344              		.loc 3 61 34 view .LVU363
 1345              	.LBE1450:
 1346              	.LBE1464:
 116:Polyphony.cpp ****         patches_[i].engine = 0;      
 1347              		.loc 1 116 9 is_stmt 1 discriminator 2 view .LVU364
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 76


 1348              		.loc 1 116 28 is_stmt 0 discriminator 2 view .LVU365
 1349 00a2 0021     		movs	r1, #0
 1350              	.LBB1465:
 1351              	.LBB1434:
  31:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
 1352              		.loc 3 31 23 discriminator 2 view .LVU366
 1353 00a4 04F10F02 		add	r2, r4, #15
 1354              	.LBE1434:
 1355              	.LBE1465:
 117:Polyphony.cpp ****         modulations_[i].engine = 0; 
 1356              		.loc 1 117 32 discriminator 2 view .LVU367
 1357 00a8 C5ED219A 		vstr.32	s19, [r5, #132]
 118:Polyphony.cpp ****         modulations_[i].trigger = 0.0f;
 119:Polyphony.cpp ****         modulations_[i].level_patched = false;
 120:Polyphony.cpp ****         voice_active_[i] = false;
 121:Polyphony.cpp ****         voice_note_[i] = 0.0f;
 122:Polyphony.cpp ****         
 123:Polyphony.cpp ****         voice_envelopes_[i].Init(sample_rate_val); 
 124:Polyphony.cpp ****         voice_envelopes_[i].SetMode(VoiceEnvelope::MODE_AR);
 125:Polyphony.cpp ****         voice_envelopes_[i].SetShape(0.5f);
 126:Polyphony.cpp **** 
 127:Polyphony.cpp ****         memset(output_buffers_[i], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 1358              		.loc 1 127 15 discriminator 2 view .LVU368
 1359 00ac 1846     		mov	r0, r3
 116:Polyphony.cpp ****         modulations_[i].engine = 0; 
 1360              		.loc 1 116 28 discriminator 2 view .LVU369
 1361 00ae 2960     		str	r1, [r5]
 117:Polyphony.cpp ****         modulations_[i].engine = 0; 
 1362              		.loc 1 117 9 is_stmt 1 discriminator 2 view .LVU370
 118:Polyphony.cpp ****         modulations_[i].trigger = 0.0f;
 1363              		.loc 1 118 9 discriminator 2 view .LVU371
 115:Polyphony.cpp ****         patches_[i].engine = 0;      
 1364              		.loc 1 115 23 is_stmt 0 discriminator 2 view .LVU372
 1365 00b0 2835     		adds	r5, r5, #40
 118:Polyphony.cpp ****         modulations_[i].trigger = 0.0f;
 1366              		.loc 1 118 33 discriminator 2 view .LVU373
 1367 00b2 C5ED1D9A 		vstr.32	s19, [r5, #116]
 119:Polyphony.cpp ****         voice_active_[i] = false;
 1368              		.loc 1 119 9 is_stmt 1 discriminator 2 view .LVU374
 119:Polyphony.cpp ****         voice_active_[i] = false;
 1369              		.loc 1 119 39 is_stmt 0 discriminator 2 view .LVU375
 1370 00b6 85F88010 		strb	r1, [r5, #128]
 120:Polyphony.cpp ****         voice_note_[i] = 0.0f;
 1371              		.loc 1 120 9 is_stmt 1 discriminator 2 view .LVU376
 120:Polyphony.cpp ****         voice_note_[i] = 0.0f;
 1372              		.loc 1 120 26 is_stmt 0 discriminator 2 view .LVU377
 1373 00ba 06F8011B 		strb	r1, [r6], #1
 1374              	.LVL56:
 121:Polyphony.cpp ****         
 1375              		.loc 1 121 9 is_stmt 1 discriminator 2 view .LVU378
 121:Polyphony.cpp ****         
 1376              		.loc 1 121 24 is_stmt 0 discriminator 2 view .LVU379
 1377 00be E7EC019A 		vstmia.32	r7!, {s19}
 123:Polyphony.cpp ****         voice_envelopes_[i].SetMode(VoiceEnvelope::MODE_AR);
 1378              		.loc 1 123 9 is_stmt 1 discriminator 2 view .LVU380
 1379              	.LVL57:
 1380              	.LBB1466:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 77


 1381              	.LBI1423:
  30:VoiceEnvelope.h ****         time_range_2x = 2.0f * 4.0f * sample_rate;  // 4s max time
 1382              		.loc 3 30 10 discriminator 2 view .LVU381
 1383              	.LBB1435:
  31:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
 1384              		.loc 3 31 9 discriminator 2 view .LVU382
  31:VoiceEnvelope.h ****         min_attack_time = 0.0002f * sample_rate;    // 0.2ms min attack (much faster for punchiness
 1385              		.loc 3 31 23 is_stmt 0 discriminator 2 view .LVU383
 1386 00c2 82ED00AA 		vstr.32	s20, [r2]
  32:VoiceEnvelope.h ****         min_decay_time_a = 0.4f * sample_rate;      // 400ms min decay A
 1387              		.loc 3 32 9 is_stmt 1 discriminator 2 view .LVU384
  32:VoiceEnvelope.h ****         min_decay_time_a = 0.4f * sample_rate;      // 400ms min decay A
 1388              		.loc 3 32 25 is_stmt 0 discriminator 2 view .LVU385
 1389 00c6 04F11302 		add	r2, r4, #19
 1390 00ca 82ED00BA 		vstr.32	s22, [r2]
  33:VoiceEnvelope.h ****         min_decay_time_b = 0.0001f * sample_rate;    // 0.1ms min decay B (pulse-like release)
 1391              		.loc 3 33 9 is_stmt 1 discriminator 2 view .LVU386
  33:VoiceEnvelope.h ****         min_decay_time_b = 0.0001f * sample_rate;    // 0.1ms min decay B (pulse-like release)
 1392              		.loc 3 33 26 is_stmt 0 discriminator 2 view .LVU387
 1393 00ce 04F11702 		add	r2, r4, #23
 1394 00d2 C2ED00BA 		vstr.32	s23, [r2]
  34:VoiceEnvelope.h ****         reset_time = 0.008f * sample_rate;          // 8ms reset time
 1395              		.loc 3 34 9 is_stmt 1 discriminator 2 view .LVU388
  34:VoiceEnvelope.h ****         reset_time = 0.008f * sample_rate;          // 8ms reset time
 1396              		.loc 3 34 26 is_stmt 0 discriminator 2 view .LVU389
 1397 00d6 04F11B02 		add	r2, r4, #27
 1398 00da C2ED00AA 		vstr.32	s21, [r2]
  35:VoiceEnvelope.h ****         reset_coefficient = 1.0f / reset_time;
 1399              		.loc 3 35 9 is_stmt 1 discriminator 2 view .LVU390
  35:VoiceEnvelope.h ****         reset_coefficient = 1.0f / reset_time;
 1400              		.loc 3 35 20 is_stmt 0 discriminator 2 view .LVU391
 1401 00de 04F11F02 		add	r2, r4, #31
 1402 00e2 82ED009A 		vstr.32	s18, [r2]
  36:VoiceEnvelope.h ****         
 1403              		.loc 3 36 9 is_stmt 1 discriminator 2 view .LVU392
  36:VoiceEnvelope.h ****         
 1404              		.loc 3 36 27 is_stmt 0 discriminator 2 view .LVU393
 1405 00e6 04F12302 		add	r2, r4, #35
 1406 00ea 82ED00DA 		vstr.32	s26, [r2]
  39:VoiceEnvelope.h ****         SetReleaseCurve(0.5f);
 1407              		.loc 3 39 9 is_stmt 1 discriminator 2 view .LVU394
 1408              	.LVL58:
 1409              	.LBB1425:
 1410              	.LBI1425:
 109:VoiceEnvelope.h ****         float cu = value - 0.5f;
 1411              		.loc 3 109 10 discriminator 2 view .LVU395
 1412              	.LBB1426:
 110:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
 1413              		.loc 3 110 9 discriminator 2 view .LVU396
 111:VoiceEnvelope.h ****     }
 1414              		.loc 3 111 9 discriminator 2 view .LVU397
 111:VoiceEnvelope.h ****     }
 1415              		.loc 3 111 34 is_stmt 0 discriminator 2 view .LVU398
 1416 00ee E21D     		adds	r2, r4, #7
 1417 00f0 C2ED009A 		vstr.32	s19, [r2]
 1418              	.LVL59:
 111:VoiceEnvelope.h ****     }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 78


 1419              		.loc 3 111 34 discriminator 2 view .LVU399
 1420              	.LBE1426:
 1421              	.LBE1425:
  40:VoiceEnvelope.h ****     }
 1422              		.loc 3 40 9 is_stmt 1 discriminator 2 view .LVU400
 1423              	.LBB1427:
 1424              	.LBI1427:
 114:VoiceEnvelope.h ****         float cu = value - 0.5f;
 1425              		.loc 3 114 10 discriminator 2 view .LVU401
 1426              	.LBB1428:
 115:VoiceEnvelope.h ****         release_curve_coefficient = 128.0f * cu * cu;
 1427              		.loc 3 115 9 discriminator 2 view .LVU402
 116:VoiceEnvelope.h ****     }
 1428              		.loc 3 116 9 discriminator 2 view .LVU403
 116:VoiceEnvelope.h ****     }
 1429              		.loc 3 116 35 is_stmt 0 discriminator 2 view .LVU404
 1430 00f4 04F10B02 		add	r2, r4, #11
 1431 00f8 C2ED009A 		vstr.32	s19, [r2]
 1432              	.LVL60:
 116:VoiceEnvelope.h ****     }
 1433              		.loc 3 116 35 discriminator 2 view .LVU405
 1434              	.LBE1428:
 1435              	.LBE1427:
 1436              	.LBE1435:
 1437              	.LBE1466:
 124:Polyphony.cpp ****         voice_envelopes_[i].SetShape(0.5f);
 1438              		.loc 1 124 9 is_stmt 1 discriminator 2 view .LVU406
 1439              	.LBB1467:
 1440              	.LBI1467:
  43:VoiceEnvelope.h ****         mode = new_mode;
 1441              		.loc 3 43 10 discriminator 2 view .LVU407
 1442              	.LBB1468:
  44:VoiceEnvelope.h ****     }
 1443              		.loc 3 44 9 discriminator 2 view .LVU408
 1444              	.LBE1468:
 1445              	.LBE1467:
 1446              	.LBB1470:
 1447              	.LBB1451:
 1448              	.LBB1444:
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 1449              		.loc 3 56 25 is_stmt 0 discriminator 2 view .LVU409
 1450 00fc 18EE902A 		vmov	r2, s17	@ int
 1451              	.LBE1444:
 1452              	.LBE1451:
 1453              	.LBE1470:
 1454              	.LBB1471:
 1455              	.LBB1469:
  44:VoiceEnvelope.h ****     }
 1456              		.loc 3 44 14 discriminator 2 view .LVU410
 1457 0100 2170     		strb	r1, [r4]
 1458              	.LVL61:
  44:VoiceEnvelope.h ****     }
 1459              		.loc 3 44 14 discriminator 2 view .LVU411
 1460              	.LBE1469:
 1461              	.LBE1471:
 125:Polyphony.cpp **** 
 1462              		.loc 1 125 9 is_stmt 1 discriminator 2 view .LVU412
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 79


 1463              	.LBB1472:
 1464              	.LBI1436:
  48:VoiceEnvelope.h ****         float curve;
 1465              		.loc 3 48 10 discriminator 2 view .LVU413
 1466              	.LBB1452:
  49:VoiceEnvelope.h ****         if (value < 0.5f) {
 1467              		.loc 3 49 9 discriminator 2 view .LVU414
  50:VoiceEnvelope.h ****             attack_time = min_attack_time;
 1468              		.loc 3 50 9 discriminator 2 view .LVU415
 1469              	.LBB1445:
  55:VoiceEnvelope.h ****             attack_time = static_cast<size_t>(time_range_2x * norm_val * norm_val) + min_attack_tim
 1470              		.loc 3 55 13 discriminator 2 view .LVU416
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 1471              		.loc 3 56 13 discriminator 2 view .LVU417
  56:VoiceEnvelope.h ****             decay_time = static_cast<size_t>(time_range_2x * (1.0f - value * value)) + min_decay_ti
 1472              		.loc 3 56 25 is_stmt 0 discriminator 2 view .LVU418
 1473 0102 C4F83320 		str	r2, [r4, #51]
  57:VoiceEnvelope.h ****             curve = 0.5f;
 1474              		.loc 3 57 13 is_stmt 1 discriminator 2 view .LVU419
  57:VoiceEnvelope.h ****             curve = 0.5f;
 1475              		.loc 3 57 24 is_stmt 0 discriminator 2 view .LVU420
 1476 0106 18EE102A 		vmov	r2, s16	@ int
 1477 010a C4F83720 		str	r2, [r4, #55]
  58:VoiceEnvelope.h ****         }
 1478              		.loc 3 58 13 is_stmt 1 discriminator 2 view .LVU421
 1479              	.LVL62:
  58:VoiceEnvelope.h ****         }
 1480              		.loc 3 58 13 is_stmt 0 discriminator 2 view .LVU422
 1481              	.LBE1445:
  60:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
 1482              		.loc 3 60 9 is_stmt 1 discriminator 2 view .LVU423
  60:VoiceEnvelope.h ****         decay_coefficient = 1.0f / decay_time;
 1483              		.loc 3 60 28 is_stmt 0 discriminator 2 view .LVU424
 1484 010e 04F12B02 		add	r2, r4, #43
 1485 0112 C2ED00CA 		vstr.32	s25, [r2]
  61:VoiceEnvelope.h ****         SetAttackCurve(curve);
 1486              		.loc 3 61 9 is_stmt 1 discriminator 2 view .LVU425
  61:VoiceEnvelope.h ****         SetAttackCurve(curve);
 1487              		.loc 3 61 27 is_stmt 0 discriminator 2 view .LVU426
 1488 0116 04F12F02 		add	r2, r4, #47
 1489              	.LBE1452:
 1490              	.LBE1472:
 115:Polyphony.cpp ****         patches_[i].engine = 0;      
 1491              		.loc 1 115 23 discriminator 2 view .LVU427
 1492 011a 4434     		adds	r4, r4, #68
 1493              	.LBB1473:
 1494              	.LBB1453:
  61:VoiceEnvelope.h ****         SetAttackCurve(curve);
 1495              		.loc 3 61 27 discriminator 2 view .LVU428
 1496 011c 82ED00CA 		vstr.32	s24, [r2]
  62:VoiceEnvelope.h ****         SetReleaseCurve(curve);
 1497              		.loc 3 62 9 is_stmt 1 discriminator 2 view .LVU429
 1498              	.LVL63:
  62:VoiceEnvelope.h ****         SetReleaseCurve(curve);
 1499              		.loc 3 62 9 is_stmt 0 discriminator 2 view .LVU430
 1500              	.LBE1453:
 1501              	.LBE1473:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 80


 1502              	.LBE1475:
 110:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
 1503              		.loc 3 110 9 is_stmt 1 discriminator 2 view .LVU431
 111:VoiceEnvelope.h ****     }
 1504              		.loc 3 111 9 discriminator 2 view .LVU432
 1505              	.LBB1476:
 1506              	.LBB1474:
 1507              	.LBB1454:
  63:VoiceEnvelope.h ****     }
 1508              		.loc 3 63 9 discriminator 2 view .LVU433
  63:VoiceEnvelope.h ****     }
 1509              		.loc 3 63 9 is_stmt 0 discriminator 2 view .LVU434
 1510              	.LBE1454:
 1511              	.LBE1474:
 1512              	.LBE1476:
 115:VoiceEnvelope.h ****         release_curve_coefficient = 128.0f * cu * cu;
 1513              		.loc 3 115 9 is_stmt 1 discriminator 2 view .LVU435
 116:VoiceEnvelope.h ****     }
 1514              		.loc 3 116 9 discriminator 2 view .LVU436
 1515              	.LBB1477:
 1516              		.loc 1 127 9 discriminator 2 view .LVU437
 1517              		.loc 1 127 15 is_stmt 0 discriminator 2 view .LVU438
 1518 0120 8022     		movs	r2, #128
 1519 0122 FFF7FEFF 		bl	memset
 1520              	.LVL64:
 115:Polyphony.cpp ****         patches_[i].engine = 0;      
 1521              		.loc 1 115 23 discriminator 2 view .LVU439
 1522 0126 4645     		cmp	r6, r8
 1523              		.loc 1 127 15 discriminator 2 view .LVU440
 1524 0128 0346     		mov	r3, r0
 115:Polyphony.cpp ****         patches_[i].engine = 0;      
 1525              		.loc 1 115 5 is_stmt 1 discriminator 2 view .LVU441
 1526              	.LVL65:
 115:Polyphony.cpp ****         patches_[i].engine = 0;      
 1527              		.loc 1 115 23 discriminator 2 view .LVU442
 1528 012a 03F18003 		add	r3, r3, #128
 1529 012e B8D1     		bne	.L36
 1530              	.LBE1477:
 128:Polyphony.cpp ****     }
 129:Polyphony.cpp **** }
 1531              		.loc 1 129 1 is_stmt 0 view .LVU443
 1532 0130 BDEC0C8B 		vldm	sp!, {d8-d13}
 1533              		.cfi_restore 90
 1534              		.cfi_restore 91
 1535              		.cfi_restore 88
 1536              		.cfi_restore 89
 1537              		.cfi_restore 86
 1538              		.cfi_restore 87
 1539              		.cfi_restore 84
 1540              		.cfi_restore 85
 1541              		.cfi_restore 82
 1542              		.cfi_restore 83
 1543              		.cfi_restore 80
 1544              		.cfi_restore 81
 1545              		.cfi_def_cfa_offset 24
 1546 0134 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1547              	.LVL66:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 81


 1548              	.L39:
 1549              		.loc 1 129 1 view .LVU444
 1550              		.align	2
 1551              	.L38:
 1552 0138 00000000 		.word	sample_rate
 1553 013c 00000000 		.word	0
 1554 0140 17B75139 		.word	961656599
 1555 0144 17B7D138 		.word	953267991
 1556 0148 CDCCCC3E 		.word	1053609165
 1557 014c 6F12033C 		.word	1006834287
 1558              		.cfi_endproc
 1559              	.LFE5807:
 1561              		.section	.text._ZN15PolyphonyEngine4InitEPN5daisy9DaisySeedE,"ax",%progbits
 1562              		.align	1
 1563              		.global	_ZN15PolyphonyEngine4InitEPN5daisy9DaisySeedE
 1564              		.syntax unified
 1565              		.thumb
 1566              		.thumb_func
 1568              	_ZN15PolyphonyEngine4InitEPN5daisy9DaisySeedE:
 1569              	.LVL67:
 1570              	.LFB5802:
  31:Polyphony.cpp ****     hw_ptr_ = hw;
 1571              		.loc 1 31 50 is_stmt 1 view -0
 1572              		.cfi_startproc
 1573              		@ args = 0, pretend = 0, frame = 0
 1574              		@ frame_needed = 0, uses_anonymous_args = 0
  32:Polyphony.cpp ****     AllocateVoices(); 
 1575              		.loc 1 32 5 view .LVU446
  32:Polyphony.cpp ****     AllocateVoices(); 
 1576              		.loc 1 32 13 is_stmt 0 view .LVU447
 1577 0000 00F54053 		add	r3, r0, #12288
  31:Polyphony.cpp ****     hw_ptr_ = hw;
 1578              		.loc 1 31 50 view .LVU448
 1579 0004 10B5     		push	{r4, lr}
 1580              		.cfi_def_cfa_offset 8
 1581              		.cfi_offset 4, -8
 1582              		.cfi_offset 14, -4
  31:Polyphony.cpp ****     hw_ptr_ = hw;
 1583              		.loc 1 31 50 view .LVU449
 1584 0006 0446     		mov	r4, r0
  32:Polyphony.cpp ****     AllocateVoices(); 
 1585              		.loc 1 32 13 view .LVU450
 1586 0008 C3F8281D 		str	r1, [r3, #3368]
  33:Polyphony.cpp ****     InitVoiceParameters(); 
 1587              		.loc 1 33 5 is_stmt 1 view .LVU451
  33:Polyphony.cpp ****     InitVoiceParameters(); 
 1588              		.loc 1 33 19 is_stmt 0 view .LVU452
 1589 000c FFF7FEFF 		bl	_ZN15PolyphonyEngine14AllocateVoicesEv
 1590              	.LVL68:
  34:Polyphony.cpp **** }
 1591              		.loc 1 34 5 is_stmt 1 view .LVU453
  34:Polyphony.cpp **** }
 1592              		.loc 1 34 24 is_stmt 0 view .LVU454
 1593 0010 2046     		mov	r0, r4
  35:Polyphony.cpp **** 
 1594              		.loc 1 35 1 view .LVU455
 1595 0012 BDE81040 		pop	{r4, lr}
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 82


 1596              		.cfi_restore 14
 1597              		.cfi_restore 4
 1598              		.cfi_def_cfa_offset 0
 1599              	.LVL69:
  34:Polyphony.cpp **** }
 1600              		.loc 1 34 24 view .LVU456
 1601 0016 FFF7FEBF 		b	_ZN15PolyphonyEngine19InitVoiceParametersEv
 1602              	.LVL70:
  34:Polyphony.cpp **** }
 1603              		.loc 1 34 24 view .LVU457
 1604              		.cfi_endproc
 1605              	.LFE5802:
 1607              		.section	.text._ZN15PolyphonyEngine16ProcessEnvelopesEb,"ax",%progbits
 1608              		.align	1
 1609              		.global	_ZN15PolyphonyEngine16ProcessEnvelopesEb
 1610              		.syntax unified
 1611              		.thumb
 1612              		.thumb_func
 1614              	_ZN15PolyphonyEngine16ProcessEnvelopesEb:
 1615              	.LVL71:
 1616              	.LFB5809:
 130:Polyphony.cpp **** 
 131:Polyphony.cpp **** void PolyphonyEngine::PrepVoiceParams(const RenderParameters& params) {
 132:Polyphony.cpp ****     bool percussive_engine = (params.engine_index > 7);
 133:Polyphony.cpp **** 
 134:Polyphony.cpp ****     float attack_value = 0.0f;
 135:Polyphony.cpp ****     float release_value = 0.0f;
 136:Polyphony.cpp ****     if (!percussive_engine) {
 137:Polyphony.cpp ****         float attack_raw = params.env_attack_val; 
 138:Polyphony.cpp ****         if (attack_raw < 0.2f) {
 139:Polyphony.cpp ****             attack_value = attack_raw * (attack_raw * 0.5f);
 140:Polyphony.cpp ****         } else {
 141:Polyphony.cpp ****             attack_value = attack_raw * attack_raw * attack_raw;
 142:Polyphony.cpp ****         }
 143:Polyphony.cpp ****         release_value = params.env_release_val * params.env_release_val * params.env_release_val;
 144:Polyphony.cpp ****     }
 145:Polyphony.cpp **** 
 146:Polyphony.cpp ****     float global_pitch_offset = params.pitch_val * 24.f - 12.f;
 147:Polyphony.cpp ****     float current_global_harmonics = params.harm_knob_val;
 148:Polyphony.cpp ****     float current_global_morph = params.morph_knob_val;
 149:Polyphony.cpp ****     float current_global_timbre = params.timbre_knob_val;
 150:Polyphony.cpp **** 
 151:Polyphony.cpp ****     for (int v = 0; v <= params.effective_num_voices - 1; ++v) { 
 152:Polyphony.cpp ****         PatchParams patch_params;
 153:Polyphony.cpp ****         patch_params.engine_idx = params.engine_index;
 154:Polyphony.cpp ****         patch_params.note = voice_note_[v];
 155:Polyphony.cpp ****         patch_params.global_pitch_offset = global_pitch_offset;
 156:Polyphony.cpp ****         patch_params.harmonics = current_global_harmonics;
 157:Polyphony.cpp ****         patch_params.timbre = current_global_timbre;
 158:Polyphony.cpp ****         patch_params.morph = current_global_morph;
 159:Polyphony.cpp ****         patch_params.arp_on = params.arp_on;
 160:Polyphony.cpp ****         patch_params.decay = release_value;
 161:Polyphony.cpp ****         
 162:Polyphony.cpp ****         UpdatePatchParams(patches_[v], patch_params);
 163:Polyphony.cpp **** 
 164:Polyphony.cpp ****         UpdateModAndEnv(
 165:Polyphony.cpp ****             modulations_[v],
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 83


 166:Polyphony.cpp ****             voice_envelopes_[v],
 167:Polyphony.cpp ****             percussive_engine,
 168:Polyphony.cpp ****             attack_value,
 169:Polyphony.cpp ****             release_value
 170:Polyphony.cpp ****         );
 171:Polyphony.cpp **** 
 172:Polyphony.cpp ****         if (!params.poly_mode && !params.arp_on) {
 173:Polyphony.cpp ****             UpdateMonoTrigger(
 174:Polyphony.cpp ****                 modulations_[v],
 175:Polyphony.cpp ****                 voice_active_[v],
 176:Polyphony.cpp ****                 engine_changed_flag_
 177:Polyphony.cpp ****             );
 178:Polyphony.cpp ****         }
 179:Polyphony.cpp ****         
 180:Polyphony.cpp ****         voices_[v].Render(patches_[v], modulations_[v], output_buffers_[v], BLOCK_SIZE);
 181:Polyphony.cpp **** 
 182:Polyphony.cpp ****         if (!params.poly_mode && !params.arp_on && (patches_[v].engine > 7) && v == 0) {
 183:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 184:Polyphony.cpp ****         }
 185:Polyphony.cpp ****     }
 186:Polyphony.cpp ****     
 187:Polyphony.cpp ****     int effective_voices = params.effective_num_voices; 
 188:Polyphony.cpp ****     for (int v = effective_voices; v < NUM_VOICES; ++v) {
 189:Polyphony.cpp ****          SilenceVoice(v);
 190:Polyphony.cpp ****     }
 191:Polyphony.cpp **** 
 192:Polyphony.cpp ****     if(engine_changed_flag_) {
 193:Polyphony.cpp ****         for(int v = 0; v < effective_voices; ++v) {
 194:Polyphony.cpp ****             RetriggerVoice(v);
 195:Polyphony.cpp ****         }
 196:Polyphony.cpp ****         engine_changed_flag_ = false;
 197:Polyphony.cpp ****     }
 198:Polyphony.cpp **** }
 199:Polyphony.cpp **** 
 200:Polyphony.cpp **** void PolyphonyEngine::ProcessEnvelopes(bool poly_mode) {
 1617              		.loc 1 200 56 is_stmt 1 view -0
 1618              		.cfi_startproc
 1619              		@ args = 0, pretend = 0, frame = 0
 1620              		@ frame_needed = 0, uses_anonymous_args = 0
 201:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
 1621              		.loc 1 201 5 view .LVU459
 200:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
 1622              		.loc 1 200 56 is_stmt 0 view .LVU460
 1623 0000 70B5     		push	{r4, r5, r6, lr}
 1624              		.cfi_def_cfa_offset 16
 1625              		.cfi_offset 4, -16
 1626              		.cfi_offset 5, -12
 1627              		.cfi_offset 6, -8
 1628              		.cfi_offset 14, -4
 1629              		.loc 1 201 11 view .LVU461
 1630 0002 00F57055 		add	r5, r0, #15360
 200:Polyphony.cpp ****     memset(mix_buffer_out_, 0, sizeof(mix_buffer_out_));
 1631              		.loc 1 200 56 view .LVU462
 1632 0006 0446     		mov	r4, r0
 1633 0008 0E46     		mov	r6, r1
 1634              		.loc 1 201 11 view .LVU463
 1635 000a 8022     		movs	r2, #128
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 84


 1636 000c 2435     		adds	r5, r5, #36
 1637 000e 0021     		movs	r1, #0
 1638              	.LVL72:
 1639              		.loc 1 201 11 view .LVU464
 1640 0010 2846     		mov	r0, r5
 1641              	.LVL73:
 1642              		.loc 1 201 11 view .LVU465
 1643 0012 FFF7FEFF 		bl	memset
 1644              	.LVL74:
 202:Polyphony.cpp ****     memset(mix_buffer_aux_, 0, sizeof(mix_buffer_aux_));
 1645              		.loc 1 202 5 is_stmt 1 view .LVU466
 1646              		.loc 1 202 11 is_stmt 0 view .LVU467
 1647 0016 04F57253 		add	r3, r4, #15488
 1648 001a 0021     		movs	r1, #0
 1649 001c 8022     		movs	r2, #128
 1650 001e 2433     		adds	r3, r3, #36
 1651 0020 1846     		mov	r0, r3
 1652 0022 FFF7FEFF 		bl	memset
 1653              	.LVL75:
 203:Polyphony.cpp **** 
 204:Polyphony.cpp ****     int voices_to_process = poly_mode ? NUM_VOICES : 1;
 1654              		.loc 1 204 39 view .LVU468
 1655 0026 002E     		cmp	r6, #0
 202:Polyphony.cpp ****     memset(mix_buffer_aux_, 0, sizeof(mix_buffer_aux_));
 1656              		.loc 1 202 11 view .LVU469
 1657 0028 0346     		mov	r3, r0
 1658              		.loc 1 204 5 is_stmt 1 view .LVU470
 1659              		.loc 1 204 39 is_stmt 0 view .LVU471
 1660 002a 1348     		ldr	r0, .L48
 1661 002c 14BF     		ite	ne
 1662 002e 0421     		movne	r1, #4
 1663 0030 0121     		moveq	r1, #1
 1664              	.LVL76:
 205:Polyphony.cpp ****     for (int v = 0; v < voices_to_process; ++v) {
 1665              		.loc 1 205 5 is_stmt 1 view .LVU472
 1666              	.LBB1478:
 1667              		.loc 1 205 23 view .LVU473
 1668 0032 C901     		lsls	r1, r1, #7
 1669              	.LVL77:
 1670              		.loc 1 205 23 is_stmt 0 view .LVU474
 1671 0034 A1F50171 		sub	r1, r1, #516
 1672              	.LVL78:
 1673              	.L44:
 1674              	.LBB1479:
 206:Polyphony.cpp ****         for (int i = 0; i < BLOCK_SIZE; ++i) {
 1675              		.loc 1 206 27 is_stmt 1 view .LVU475
 1676 0038 2A46     		mov	r2, r5
 1677              	.LVL79:
 1678              	.L43:
 207:Polyphony.cpp ****             mix_buffer_out_[i] += output_buffers_[v][i].out;
 1679              		.loc 1 207 13 discriminator 2 view .LVU476
 1680              		.loc 1 207 32 is_stmt 0 discriminator 2 view .LVU477
 1681 003a B2EC017A 		vldmia.32	r2!, {s14}
 1682 003e 145E     		ldrsh	r4, [r2, r0]
 206:Polyphony.cpp ****         for (int i = 0; i < BLOCK_SIZE; ++i) {
 1683              		.loc 1 206 27 discriminator 2 view .LVU478
 1684 0040 9A42     		cmp	r2, r3
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 85


 1685              		.loc 1 207 32 discriminator 2 view .LVU479
 1686 0042 07EE904A 		vmov	s15, r4	@ int
 208:Polyphony.cpp ****             mix_buffer_aux_[i] += output_buffers_[v][i].aux;
 1687              		.loc 1 208 57 discriminator 2 view .LVU480
 1688 0046 00F10204 		add	r4, r0, #2
 207:Polyphony.cpp ****             mix_buffer_out_[i] += output_buffers_[v][i].out;
 1689              		.loc 1 207 32 discriminator 2 view .LVU481
 1690 004a F8EEE77A 		vcvt.f32.s32	s15, s15
 1691              		.loc 1 208 32 discriminator 2 view .LVU482
 1692 004e 145F     		ldrsh	r4, [r2, r4]
 207:Polyphony.cpp ****             mix_buffer_out_[i] += output_buffers_[v][i].out;
 1693              		.loc 1 207 32 discriminator 2 view .LVU483
 1694 0050 77EE877A 		vadd.f32	s15, s15, s14
 1695 0054 42ED017A 		vstr.32	s15, [r2, #-4]
 1696              		.loc 1 208 13 is_stmt 1 discriminator 2 view .LVU484
 1697              		.loc 1 208 32 is_stmt 0 discriminator 2 view .LVU485
 1698 0058 07EE904A 		vmov	s15, r4	@ int
 1699 005c B8EEE77A 		vcvt.f32.s32	s14, s15
 1700 0060 D2ED1F7A 		vldr.32	s15, [r2, #124]
 1701 0064 77EE877A 		vadd.f32	s15, s15, s14
 1702 0068 C2ED1F7A 		vstr.32	s15, [r2, #124]
 206:Polyphony.cpp ****         for (int i = 0; i < BLOCK_SIZE; ++i) {
 1703              		.loc 1 206 9 is_stmt 1 discriminator 2 view .LVU486
 206:Polyphony.cpp ****         for (int i = 0; i < BLOCK_SIZE; ++i) {
 1704              		.loc 1 206 27 discriminator 2 view .LVU487
 1705 006c E5D1     		bne	.L43
 1706              	.LBE1479:
 205:Polyphony.cpp ****         for (int i = 0; i < BLOCK_SIZE; ++i) {
 1707              		.loc 1 205 5 discriminator 2 view .LVU488
 205:Polyphony.cpp ****         for (int i = 0; i < BLOCK_SIZE; ++i) {
 1708              		.loc 1 205 23 discriminator 2 view .LVU489
 1709 006e 8030     		adds	r0, r0, #128
 1710 0070 8842     		cmp	r0, r1
 1711 0072 E1D1     		bne	.L44
 1712              	.LBE1478:
 209:Polyphony.cpp ****         }
 210:Polyphony.cpp ****     }
 211:Polyphony.cpp **** }
 1713              		.loc 1 211 1 is_stmt 0 view .LVU490
 1714 0074 70BD     		pop	{r4, r5, r6, pc}
 1715              	.LVL80:
 1716              	.L49:
 1717              		.loc 1 211 1 view .LVU491
 1718 0076 00BF     		.align	2
 1719              	.L48:
 1720 0078 FCFDFFFF 		.word	-516
 1721              		.cfi_endproc
 1722              	.LFE5809:
 1724              		.section	.text._ZN15PolyphonyEngine17UpdatePatchParamsERN6plaits5PatchERK11PatchParams,"ax",%progb
 1725              		.align	1
 1726              		.global	_ZN15PolyphonyEngine17UpdatePatchParamsERN6plaits5PatchERK11PatchParams
 1727              		.syntax unified
 1728              		.thumb
 1729              		.thumb_func
 1731              	_ZN15PolyphonyEngine17UpdatePatchParamsERN6plaits5PatchERK11PatchParams:
 1732              	.LVL81:
 1733              	.LFB5810:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 86


 212:Polyphony.cpp **** 
 213:Polyphony.cpp **** void PolyphonyEngine::UpdatePatchParams(plaits::Patch& patch, const PatchParams& params) {
 1734              		.loc 1 213 90 is_stmt 1 view -0
 1735              		.cfi_startproc
 1736              		@ args = 0, pretend = 0, frame = 0
 1737              		@ frame_needed = 0, uses_anonymous_args = 0
 1738              		@ link register save eliminated.
 214:Polyphony.cpp ****     patch.note = params.note + params.global_pitch_offset;
 1739              		.loc 1 214 5 view .LVU493
 215:Polyphony.cpp ****     patch.engine = params.engine_idx;
 1740              		.loc 1 215 18 is_stmt 0 view .LVU494
 1741 0000 1368     		ldr	r3, [r2]
 214:Polyphony.cpp ****     patch.note = params.note + params.global_pitch_offset;
 1742              		.loc 1 214 30 view .LVU495
 1743 0002 D2ED017A 		vldr.32	s15, [r2, #4]
 1744 0006 92ED027A 		vldr.32	s14, [r2, #8]
 1745              		.loc 1 215 18 view .LVU496
 1746 000a CB61     		str	r3, [r1, #28]
 216:Polyphony.cpp ****     patch.harmonics = params.harmonics;
 1747              		.loc 1 216 21 view .LVU497
 1748 000c D368     		ldr	r3, [r2, #12]	@ float
 214:Polyphony.cpp ****     patch.note = params.note + params.global_pitch_offset;
 1749              		.loc 1 214 30 view .LVU498
 1750 000e 77EE877A 		vadd.f32	s15, s15, s14
 1751              		.loc 1 216 21 view .LVU499
 1752 0012 4B60     		str	r3, [r1, #4]	@ float
 217:Polyphony.cpp ****     patch.timbre = params.timbre;
 1753              		.loc 1 217 18 view .LVU500
 1754 0014 1369     		ldr	r3, [r2, #16]	@ float
 214:Polyphony.cpp ****     patch.engine = params.engine_idx;
 1755              		.loc 1 214 16 view .LVU501
 1756 0016 C1ED007A 		vstr.32	s15, [r1]
 215:Polyphony.cpp ****     patch.harmonics = params.harmonics;
 1757              		.loc 1 215 5 is_stmt 1 view .LVU502
 216:Polyphony.cpp ****     patch.timbre = params.timbre;
 1758              		.loc 1 216 5 view .LVU503
 1759              		.loc 1 217 5 view .LVU504
 1760              		.loc 1 217 18 is_stmt 0 view .LVU505
 1761 001a 8B60     		str	r3, [r1, #8]	@ float
 218:Polyphony.cpp ****     patch.morph = params.morph;
 1762              		.loc 1 218 5 is_stmt 1 view .LVU506
 1763              		.loc 1 218 17 is_stmt 0 view .LVU507
 1764 001c 5369     		ldr	r3, [r2, #20]	@ float
 219:Polyphony.cpp ****     patch.lpg_colour = 0.0f;
 220:Polyphony.cpp ****     patch.decay = params.decay;
 1765              		.loc 1 220 17 view .LVU508
 1766 001e D269     		ldr	r2, [r2, #28]	@ float
 1767              	.LVL82:
 218:Polyphony.cpp ****     patch.morph = params.morph;
 1768              		.loc 1 218 17 view .LVU509
 1769 0020 CB60     		str	r3, [r1, #12]	@ float
 219:Polyphony.cpp ****     patch.lpg_colour = 0.0f;
 1770              		.loc 1 219 5 is_stmt 1 view .LVU510
 219:Polyphony.cpp ****     patch.lpg_colour = 0.0f;
 1771              		.loc 1 219 22 is_stmt 0 view .LVU511
 1772 0022 0023     		movs	r3, #0
 1773              		.loc 1 220 17 view .LVU512
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 87


 1774 0024 0A62     		str	r2, [r1, #32]	@ float
 219:Polyphony.cpp ****     patch.lpg_colour = 0.0f;
 1775              		.loc 1 219 22 view .LVU513
 1776 0026 4B62     		str	r3, [r1, #36]	@ float
 1777              		.loc 1 220 5 is_stmt 1 view .LVU514
 221:Polyphony.cpp ****     patch.frequency_modulation_amount = 0.f;
 1778              		.loc 1 221 5 view .LVU515
 1779              		.loc 1 221 39 is_stmt 0 view .LVU516
 1780 0028 0B61     		str	r3, [r1, #16]	@ float
 222:Polyphony.cpp ****     patch.timbre_modulation_amount = 0.f;
 1781              		.loc 1 222 5 is_stmt 1 view .LVU517
 1782              		.loc 1 222 36 is_stmt 0 view .LVU518
 1783 002a 4B61     		str	r3, [r1, #20]	@ float
 223:Polyphony.cpp ****     patch.morph_modulation_amount = 0.f;
 1784              		.loc 1 223 5 is_stmt 1 view .LVU519
 1785              		.loc 1 223 35 is_stmt 0 view .LVU520
 1786 002c 8B61     		str	r3, [r1, #24]	@ float
 224:Polyphony.cpp **** }
 1787              		.loc 1 224 1 view .LVU521
 1788 002e 7047     		bx	lr
 1789              		.cfi_endproc
 1790              	.LFE5810:
 1792              		.section	.text._ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff,"a
 1793              		.align	1
 1794              		.global	_ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff
 1795              		.syntax unified
 1796              		.thumb
 1797              		.thumb_func
 1799              	_ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff:
 1800              	.LVL83:
 1801              	.LFB5811:
 225:Polyphony.cpp **** 
 226:Polyphony.cpp **** void PolyphonyEngine::UpdateModAndEnv(plaits::Modulations& mod, VoiceEnvelope& env, bool percussive
 1802              		.loc 1 226 150 is_stmt 1 view -0
 1803              		.cfi_startproc
 1804              		@ args = 0, pretend = 0, frame = 8
 1805              		@ frame_needed = 0, uses_anonymous_args = 0
 227:Polyphony.cpp ****     mod.engine = 0;
 1806              		.loc 1 227 5 view .LVU523
 1807              		.loc 1 227 16 is_stmt 0 view .LVU524
 1808 0000 DFED7E6A 		vldr.32	s13, .L85
 1809 0004 B7EE007A 		vmov.f32	s14, #1.0e+0
 226:Polyphony.cpp ****     mod.engine = 0;
 1810              		.loc 1 226 150 view .LVU525
 1811 0008 13B5     		push	{r0, r1, r4, lr}
 1812              		.cfi_def_cfa_offset 16
 1813              		.cfi_offset 4, -8
 1814              		.cfi_offset 14, -4
 1815              		.loc 1 227 16 view .LVU526
 1816 000a C1ED006A 		vstr.32	s13, [r1]
 228:Polyphony.cpp ****     mod.note = 0.0f; 
 1817              		.loc 1 228 5 is_stmt 1 view .LVU527
 1818              		.loc 1 228 14 is_stmt 0 view .LVU528
 1819 000e C1ED016A 		vstr.32	s13, [r1, #4]
 229:Polyphony.cpp ****     mod.frequency = 0.0f;
 1820              		.loc 1 229 5 is_stmt 1 view .LVU529
 1821              		.loc 1 229 19 is_stmt 0 view .LVU530
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 88


 1822 0012 C1ED026A 		vstr.32	s13, [r1, #8]
 230:Polyphony.cpp ****     mod.harmonics = 0.0f; 
 1823              		.loc 1 230 5 is_stmt 1 view .LVU531
 1824              		.loc 1 230 19 is_stmt 0 view .LVU532
 1825 0016 C1ED036A 		vstr.32	s13, [r1, #12]
 231:Polyphony.cpp ****     mod.timbre = 0.0f;
 1826              		.loc 1 231 5 is_stmt 1 view .LVU533
 1827              		.loc 1 231 16 is_stmt 0 view .LVU534
 1828 001a C1ED046A 		vstr.32	s13, [r1, #16]
 232:Polyphony.cpp ****     mod.morph = 0.0f; 
 1829              		.loc 1 232 5 is_stmt 1 view .LVU535
 1830              		.loc 1 232 15 is_stmt 0 view .LVU536
 1831 001e C1ED056A 		vstr.32	s13, [r1, #20]
 233:Polyphony.cpp **** 
 234:Polyphony.cpp ****     if (!percussive_engine) {
 1832              		.loc 1 234 5 is_stmt 1 view .LVU537
 1833              	.LBB1507:
 1834 0022 002B     		cmp	r3, #0
 1835 0024 40F0E180 		bne	.L52
 1836              	.LVL84:
 1837              		.loc 1 234 5 is_stmt 0 view .LVU538
 1838              	.LBE1507:
 1839              	.LBB1508:
 1840              	.LBI1508:
 226:Polyphony.cpp ****     mod.engine = 0;
 1841              		.loc 1 226 6 is_stmt 1 view .LVU539
 1842              	.LBB1509:
 1843              	.LBB1510:
 235:Polyphony.cpp ****         env.SetAttackTime(attack_value);
 1844              		.loc 1 235 9 view .LVU540
 1845              	.LBB1511:
 1846              	.LBI1511:
  67:VoiceEnvelope.h ****         // Map 0-1 value to attack time (exponential scaling)
 1847              		.loc 3 67 10 view .LVU541
 1848              	.LBB1512:
  70:VoiceEnvelope.h ****         
 1849              		.loc 3 70 9 view .LVU542
  73:VoiceEnvelope.h ****             // Extra fast attacks at the beginning of the range
 1850              		.loc 3 73 9 view .LVU543
 1851 0028 DFED754A 		vldr.32	s9, .L85+4
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 1852              		.loc 3 79 56 is_stmt 0 view .LVU544
 1853 002c 92ED045A 		vldr.32	s10, [r2, #16]
  73:VoiceEnvelope.h ****             // Extra fast attacks at the beginning of the range
 1854              		.loc 3 73 9 view .LVU545
 1855 0030 B4EEE40A 		vcmpe.f32	s0, s9
 1856 0034 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1857 0038 4CD5     		bpl	.L80
  75:VoiceEnvelope.h ****                                            (min_attack_time * 9.0f * value / 0.1f));
 1858              		.loc 3 75 13 is_stmt 1 view .LVU546
  76:VoiceEnvelope.h ****         } else {
 1859              		.loc 3 76 61 is_stmt 0 view .LVU547
 1860 003a B2EE026A 		vmov.f32	s12, #9.0e+0
  75:VoiceEnvelope.h ****                                            (min_attack_time * 9.0f * value / 0.1f));
 1861              		.loc 3 75 47 view .LVU548
 1862 003e D2ED055A 		vldr.32	s11, [r2, #20]
  76:VoiceEnvelope.h ****         } else {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 89


 1863              		.loc 3 76 61 view .LVU549
 1864 0042 25EE866A 		vmul.f32	s12, s11, s12
  76:VoiceEnvelope.h ****         } else {
 1865              		.loc 3 76 68 view .LVU550
 1866 0046 26EE006A 		vmul.f32	s12, s12, s0
  76:VoiceEnvelope.h ****         } else {
 1867              		.loc 3 76 76 view .LVU551
 1868 004a C6EE247A 		vdiv.f32	s15, s12, s9
  75:VoiceEnvelope.h ****                                            (min_attack_time * 9.0f * value / 0.1f));
 1869              		.loc 3 75 63 view .LVU552
 1870 004e 77EEA57A 		vadd.f32	s15, s15, s11
 1871              	.L82:
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 1872              		.loc 3 79 27 view .LVU553
 1873 0052 FCEEE77A 		vcvt.u32.f32	s15, s15
  86:VoiceEnvelope.h ****             // More exponential curve for punchy attacks
 1874              		.loc 3 86 9 view .LVU554
 1875 0056 DFED6B5A 		vldr.32	s11, .L85+8
 1876 005a B4EEE50A 		vcmpe.f32	s0, s11
  83:VoiceEnvelope.h ****         
 1877              		.loc 3 83 35 view .LVU555
 1878 005e B8EE676A 		vcvt.f32.u32	s12, s15
 1879 0062 C2ED0D7A 		vstr.32	s15, [r2, #52]	@ int
  83:VoiceEnvelope.h ****         
 1880              		.loc 3 83 9 is_stmt 1 view .LVU556
  86:VoiceEnvelope.h ****             // More exponential curve for punchy attacks
 1881              		.loc 3 86 9 is_stmt 0 view .LVU557
 1882 0066 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  83:VoiceEnvelope.h ****         
 1883              		.loc 3 83 35 view .LVU558
 1884 006a 87EE064A 		vdiv.f32	s8, s14, s12
  83:VoiceEnvelope.h ****         
 1885              		.loc 3 83 28 view .LVU559
 1886 006e 82ED0B4A 		vstr.32	s8, [r2, #44]
  86:VoiceEnvelope.h ****             // More exponential curve for punchy attacks
 1887              		.loc 3 86 9 is_stmt 1 view .LVU560
 1888 0072 42D5     		bpl	.L81
 1889              	.LVL85:
 1890              	.LBB1513:
 1891              	.LBI1513:
  67:VoiceEnvelope.h ****         // Map 0-1 value to attack time (exponential scaling)
 1892              		.loc 3 67 10 view .LVU561
 1893              	.LBB1514:
  88:VoiceEnvelope.h ****         } else {
 1894              		.loc 3 88 13 view .LVU562
 1895              	.LBB1515:
 1896              	.LBI1515:
 109:VoiceEnvelope.h ****         float cu = value - 0.5f;
 1897              		.loc 3 109 10 view .LVU563
 1898              	.LBB1516:
 110:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
 1899              		.loc 3 110 9 view .LVU564
 1900              	.LBE1516:
 1901              	.LBE1515:
  88:VoiceEnvelope.h ****         } else {
 1902              		.loc 3 88 41 is_stmt 0 view .LVU565
 1903 0074 35EEC06A 		vsub.f32	s12, s11, s0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 90


  88:VoiceEnvelope.h ****         } else {
 1904              		.loc 3 88 27 view .LVU566
 1905 0078 DFED635A 		vldr.32	s11, .L85+12
 1906 007c 36EE256A 		vadd.f32	s12, s12, s11
 1907              	.LVL86:
 1908              	.LBB1518:
 1909              	.LBB1517:
 110:VoiceEnvelope.h ****         attack_curve_coefficient = 128.0f * cu * cu;
 1910              		.loc 3 110 15 view .LVU567
 1911 0080 F6EE005A 		vmov.f32	s11, #5.0e-1
 1912 0084 36EE656A 		vsub.f32	s12, s12, s11
 1913              	.LVL87:
 111:VoiceEnvelope.h ****     }
 1914              		.loc 3 111 9 is_stmt 1 view .LVU568
 111:VoiceEnvelope.h ****     }
 1915              		.loc 3 111 43 is_stmt 0 view .LVU569
 1916 0088 DFED605A 		vldr.32	s11, .L85+16
 1917 008c 66EE255A 		vmul.f32	s11, s12, s11
 111:VoiceEnvelope.h ****     }
 1918              		.loc 3 111 48 view .LVU570
 1919 0090 25EE866A 		vmul.f32	s12, s11, s12
 1920              	.LVL88:
 1921              	.L56:
 111:VoiceEnvelope.h ****     }
 1922              		.loc 3 111 48 view .LVU571
 1923              	.LBE1517:
 1924              	.LBE1518:
 1925              	.LBE1514:
 1926              	.LBE1513:
 1927              	.LBE1512:
 1928              	.LBE1511:
 1929              	.LBB1522:
 1930              	.LBB1523:
  98:VoiceEnvelope.h ****         
 1931              		.loc 3 98 35 view .LVU572
 1932 0094 60EEA04A 		vmul.f32	s9, s1, s1
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 1933              		.loc 3 101 59 view .LVU573
 1934 0098 D2ED075A 		vldr.32	s11, [r2, #28]
 1935              	.LBE1523:
 1936              	.LBE1522:
 1937              	.LBB1529:
 1938              	.LBB1530:
 154:VoiceEnvelope.h ****             case ENV_IDLE:
 1939              		.loc 3 154 9 view .LVU574
 1940 009c 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 1941              	.LVL89:
 154:VoiceEnvelope.h ****             case ENV_IDLE:
 1942              		.loc 3 154 9 view .LVU575
 1943 009e 82ED026A 		vstr.32	s12, [r2, #8]
 1944              	.LVL90:
 154:VoiceEnvelope.h ****             case ENV_IDLE:
 1945              		.loc 3 154 9 view .LVU576
 1946              	.LBE1530:
 1947              	.LBE1529:
 236:Polyphony.cpp ****         env.SetReleaseTime(release_value);
 1948              		.loc 1 236 9 is_stmt 1 view .LVU577
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 91


 1949              	.LBB1548:
 1950              	.LBI1522:
  95:VoiceEnvelope.h ****         // Map 0-1 value to release time (exponential scaling)
 1951              		.loc 3 95 10 view .LVU578
 1952              	.LBB1528:
  98:VoiceEnvelope.h ****         
 1953              		.loc 3 98 9 view .LVU579
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 1954              		.loc 3 101 9 view .LVU580
  98:VoiceEnvelope.h ****         
 1955              		.loc 3 98 15 is_stmt 0 view .LVU581
 1956 00a2 64EEA00A 		vmul.f32	s1, s9, s1
 1957              	.LVL91:
 1958              	.LBB1524:
 1959              	.LBB1525:
 116:VoiceEnvelope.h ****     }
 1960              		.loc 3 116 35 view .LVU582
 1961 00a6 C2ED036A 		vstr.32	s13, [r2, #12]
 1962              	.LBE1525:
 1963              	.LBE1524:
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 1964              		.loc 3 101 59 view .LVU583
 1965 00aa E0EE855A 		vfma.f32	s11, s1, s10
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 1966              		.loc 3 101 22 view .LVU584
 1967 00ae FCEEE55A 		vcvt.u32.f32	s11, s11
 1968 00b2 15EE903A 		vmov	r3, s11	@ int
 1969              	.LVL92:
 101:VoiceEnvelope.h ****                                         (time_range_2x * value_cubed));
 1970              		.loc 3 101 20 view .LVU585
 1971 00b6 C2ED0E5A 		vstr.32	s11, [r2, #56]	@ int
 103:VoiceEnvelope.h ****         
 1972              		.loc 3 103 9 is_stmt 1 view .LVU586
 103:VoiceEnvelope.h ****         
 1973              		.loc 3 103 34 is_stmt 0 view .LVU587
 1974 00ba F8EE655A 		vcvt.f32.u32	s11, s11
 1975 00be 87EE255A 		vdiv.f32	s10, s14, s11
 103:VoiceEnvelope.h ****         
 1976              		.loc 3 103 27 view .LVU588
 1977 00c2 82ED0C5A 		vstr.32	s10, [r2, #48]
 106:VoiceEnvelope.h ****     }
 1978              		.loc 3 106 9 is_stmt 1 view .LVU589
 1979              	.LVL93:
 1980              	.LBB1527:
 1981              	.LBI1524:
 114:VoiceEnvelope.h ****         float cu = value - 0.5f;
 1982              		.loc 3 114 10 view .LVU590
 1983              	.LBB1526:
 115:VoiceEnvelope.h ****         release_curve_coefficient = 128.0f * cu * cu;
 1984              		.loc 3 115 9 view .LVU591
 116:VoiceEnvelope.h ****     }
 1985              		.loc 3 116 9 view .LVU592
 116:VoiceEnvelope.h ****     }
 1986              		.loc 3 116 9 is_stmt 0 view .LVU593
 1987              	.LBE1526:
 1988              	.LBE1527:
 1989              	.LBE1528:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 92


 1990              	.LBE1548:
 237:Polyphony.cpp ****         float env_value = env.Process();
 1991              		.loc 1 237 9 is_stmt 1 view .LVU594
 1992              	.LBB1549:
 1993              	.LBI1529:
 152:VoiceEnvelope.h ****         float ph;
 1994              		.loc 3 152 11 view .LVU595
 1995              	.LBB1545:
 153:VoiceEnvelope.h ****         switch (current_state) {
 1996              		.loc 3 153 9 view .LVU596
 154:VoiceEnvelope.h ****             case ENV_IDLE:
 1997              		.loc 3 154 9 view .LVU597
 1998 00c6 0428     		cmp	r0, #4
 1999 00c8 1CD8     		bhi	.L58
 2000 00ca DFE800F0 		tbb	[pc, r0]
 2001              	.L60:
 2002 00ce 19       		.byte	(.L64-.L60)/2
 2003 00cf 37       		.byte	(.L63-.L60)/2
 2004 00d0 55       		.byte	(.L62-.L60)/2
 2005 00d1 58       		.byte	(.L61-.L60)/2
 2006 00d2 78       		.byte	(.L59-.L60)/2
 2007              	.LVL94:
 2008 00d3 00       		.p2align 1
 2009              	.L80:
 154:VoiceEnvelope.h ****             case ENV_IDLE:
 2010              		.loc 3 154 9 is_stmt 0 view .LVU598
 2011              	.LBE1545:
 2012              	.LBE1549:
 2013              	.LBB1550:
 2014              	.LBB1521:
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 2015              		.loc 3 79 13 is_stmt 1 view .LVU599
  70:VoiceEnvelope.h ****         
 2016              		.loc 3 70 35 is_stmt 0 view .LVU600
 2017 00d4 60EE007A 		vmul.f32	s15, s0, s0
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 2018              		.loc 3 79 54 view .LVU601
 2019 00d8 9FED4D6A 		vldr.32	s12, .L85+20
  80:VoiceEnvelope.h ****         }
 2020              		.loc 3 80 59 view .LVU602
 2021 00dc F6EE005A 		vmov.f32	s11, #5.0e-1
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 2022              		.loc 3 79 54 view .LVU603
 2023 00e0 25EE066A 		vmul.f32	s12, s10, s12
  70:VoiceEnvelope.h ****         
 2024              		.loc 3 70 15 view .LVU604
 2025 00e4 67EE807A 		vmul.f32	s15, s15, s0
  80:VoiceEnvelope.h ****         }
 2026              		.loc 3 80 59 view .LVU605
 2027 00e8 65EE255A 		vmul.f32	s11, s10, s11
  80:VoiceEnvelope.h ****         }
 2028              		.loc 3 80 66 view .LVU606
 2029 00ec 67EEA57A 		vmul.f32	s15, s15, s11
  79:VoiceEnvelope.h ****                                            (time_range_2x * 0.5f * value_cubed));
 2030              		.loc 3 79 75 view .LVU607
 2031 00f0 F4EE005A 		vmov.f32	s11, #1.25e-1
 2032 00f4 E6EE257A 		vfma.f32	s15, s12, s11
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 93


 2033 00f8 ABE7     		b	.L82
 2034              	.L81:
 2035              	.LBB1519:
 2036              	.LBB1520:
 111:VoiceEnvelope.h ****     }
 2037              		.loc 3 111 34 view .LVU608
 2038 00fa 9FED406A 		vldr.32	s12, .L85
 2039 00fe C9E7     		b	.L56
 2040              	.LVL95:
 2041              	.L64:
 111:VoiceEnvelope.h ****     }
 2042              		.loc 3 111 34 view .LVU609
 2043              	.LBE1520:
 2044              	.LBE1519:
 2045              	.LBE1521:
 2046              	.LBE1550:
 2047              	.LBB1551:
 2048              	.LBB1546:
 155:VoiceEnvelope.h ****                 current_value = 0.0f;
 2049              		.loc 3 155 13 is_stmt 1 view .LVU610
 156:VoiceEnvelope.h ****                 break;
 2050              		.loc 3 156 17 view .LVU611
 156:VoiceEnvelope.h ****                 break;
 2051              		.loc 3 156 31 is_stmt 0 view .LVU612
 2052 0100 C2ED016A 		vstr.32	s13, [r2, #4]
 157:VoiceEnvelope.h **** 
 2053              		.loc 3 157 17 is_stmt 1 view .LVU613
 2054              	.L58:
 202:VoiceEnvelope.h ****     }
 2055              		.loc 3 202 9 view .LVU614
 2056              	.LBB1531:
 2057              	.LBB1532:
 2058              		.file 40 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h"
   1:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
   3:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** //
   5:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // any later version.
  10:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  11:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  16:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  20:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 94


  25:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** /*
  26:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  27:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  30:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  38:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  39:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  42:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  */
  50:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  51:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  */
  55:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  56:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  59:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  73:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** # include <type_traits>
  74:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  75:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus > 201703L
  76:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** # include <compare>
  77:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  78:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  79:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** {
  81:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 95


  82:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  83:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /*
  84:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    * A constexpr wrapper for __builtin_memcmp.
  85:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    * @param __num The number of elements of type _Tp (not bytes).
  86:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    */
  87:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Up>
  88:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
  89:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline int
  90:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
  91:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
  92:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  93:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
  94:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  95:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
  96:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
  97:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
  98:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  for(; __num > 0; ++__first1, ++__first2, --__num)
  99:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    if (*__first1 != *__first2)
 100:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      return *__first1 < *__first2 ? -1 : 1;
 101:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return 0;
 102:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 103:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       else
 104:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 105:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 106:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 107:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 108:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 109:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
 110:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
 111:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
 112:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _BoolType>
 113:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap
 114:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 115:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 116:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static void
 117:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 119:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    _ValueType1;
 121:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
 122:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  *__a = *__b;
 123:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  *__b = __tmp;
 124:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 125:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 126:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 127:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<>
 128:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap<true>
 129:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 130:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 131:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static void
 132:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 133:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 134:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  swap(*__a, *__b);
 135:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 136:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 137:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif // C++03
 138:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 96


 139:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 140:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 141:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 142:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 143:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 144:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   Nothing.
 145:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 146:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 147:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  iterators themselves.
 148:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 149:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 150:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 151:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline void
 152:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 153:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 154:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 155:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 156:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 157:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 158:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 159:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 160:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 161:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 162:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType1;
 163:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 164:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType2;
 165:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 166:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 167:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType2>)
 168:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 169:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType1>)
 170:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 171:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 172:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType1;
 173:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 174:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType2;
 175:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 176:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 177:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 178:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 179:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #else
 180:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 181:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // 187. iter_swap underspecified
 182:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       swap(*__a, *__b);
 183:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 184:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 185:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 186:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 187:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 188:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 189:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 190:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 191:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 192:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 193:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 194:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 195:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 97


 196:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  The ranges must not overlap.
 197:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 198:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 199:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 200:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _ForwardIterator2
 201:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 202:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 203:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 204:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 205:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 206:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 207:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 208:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 209:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 210:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 211:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 212:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 213:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __first2;
 214:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 215:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 216:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 217:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 218:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 219:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 220:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 221:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 222:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 223:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 224:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 225:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 226:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 227:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 228:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 229:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 230:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 231:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 232:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 233:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 234:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 235:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (__b < __a)
 236:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 237:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 238:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 239:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 240:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 241:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 242:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 243:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 244:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 245:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 246:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 247:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 248:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 249:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 250:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 251:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 252:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 98


 253:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 254:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 255:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 256:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 257:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 258:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 259:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (__a < __b)
 2059              		.loc 40 259 7 is_stmt 0 view .LVU615
 2060 0104 D2ED017A 		vldr.32	s15, [r2, #4]
 2061              	.LBE1532:
 2062              	.LBE1531:
 202:VoiceEnvelope.h ****     }
 2063              		.loc 3 202 49 view .LVU616
 2064 0108 CDED016A 		vstr.32	s13, [sp, #4]
 2065              	.LVL96:
 2066              	.LBB1536:
 2067              	.LBI1531:
 254:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 2068              		.loc 40 254 5 is_stmt 1 view .LVU617
 2069              	.LBB1533:
 2070              		.loc 40 259 7 is_stmt 0 view .LVU618
 2071 010c F5EEC07A 		vcmpe.f32	s15, #0
 2072              	.LBE1533:
 2073              	.LBE1536:
 202:VoiceEnvelope.h ****     }
 2074              		.loc 3 202 56 view .LVU619
 2075 0110 8DED007A 		vstr.32	s14, [sp]
 2076              	.LBB1537:
 2077              	.LBB1534:
 2078              		.loc 40 259 7 view .LVU620
 2079 0114 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2080              	.LBE1534:
 2081              	.LBE1537:
 202:VoiceEnvelope.h ****     }
 2082              		.loc 3 202 34 view .LVU621
 2083 0118 54BF     		ite	pl
 2084 011a 0432     		addpl	r2, r2, #4
 2085              	.LVL97:
 2086              	.LBB1538:
 2087              	.LBB1535:
 260:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 2088              		.loc 40 260 9 view .LVU622
 2089 011c 01AA     		addmi	r2, sp, #4
 2090              	.LVL98:
 2091              		.loc 40 260 9 view .LVU623
 2092              	.LBE1535:
 2093              	.LBE1538:
 2094              	.LBB1539:
 2095              	.LBI1539:
 230:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 2096              		.loc 40 230 5 is_stmt 1 view .LVU624
 2097              	.LBB1540:
 235:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 2098              		.loc 40 235 7 is_stmt 0 view .LVU625
 2099 011e D2ED007A 		vldr.32	s15, [r2]
 2100 0122 F4EEC77A 		vcmpe.f32	s15, s14
 2101 0126 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 99


 236:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 2102              		.loc 40 236 9 view .LVU626
 2103 012a C8BF     		it	gt
 2104 012c 6A46     		movgt	r2, sp
 2105              	.LVL99:
 236:/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 2106              		.loc 40 236 9 view .LVU627
 2107              	.LBE1540:
 2108              	.LBE1539:
 202:VoiceEnvelope.h ****     }
 2109              		.loc 3 202 60 view .LVU628
 2110 012e 1368     		ldr	r3, [r2]	@ float
 2111              	.LVL100:
 202:VoiceEnvelope.h ****     }
 2112              		.loc 3 202 60 view .LVU629
 2113              	.LBE1546:
 2114              	.LBE1551:
 238:Polyphony.cpp ****         mod.level = env_value;
 2115              		.loc 1 238 9 is_stmt 1 view .LVU630
 2116              		.loc 1 238 19 is_stmt 0 view .LVU631
 2117 0130 CB61     		str	r3, [r1, #28]	@ float
 239:Polyphony.cpp ****         mod.level_patched = true;
 2118              		.loc 1 239 9 is_stmt 1 view .LVU632
 2119              		.loc 1 239 27 is_stmt 0 view .LVU633
 2120 0132 0123     		movs	r3, #1
 2121              	.LVL101:
 2122              		.loc 1 239 27 view .LVU634
 2123 0134 81F82430 		strb	r3, [r1, #36]
 2124              	.LVL102:
 2125              	.L51:
 2126              		.loc 1 239 27 view .LVU635
 2127              	.LBE1510:
 2128              	.LBE1509:
 2129              	.LBE1508:
 240:Polyphony.cpp ****     } else {
 241:Polyphony.cpp ****         mod.level = 1.0f;
 242:Polyphony.cpp ****         mod.level_patched = false;
 243:Polyphony.cpp ****         mod.trigger_patched = true;
 244:Polyphony.cpp ****     }
 245:Polyphony.cpp **** }
 2130              		.loc 1 245 1 view .LVU636
 2131 0138 02B0     		add	sp, sp, #8
 2132              		.cfi_remember_state
 2133              		.cfi_def_cfa_offset 8
 2134              		@ sp needed
 2135 013a 10BD     		pop	{r4, pc}
 2136              	.LVL103:
 2137              	.L63:
 2138              		.cfi_restore_state
 2139              	.LBB1555:
 2140              	.LBB1554:
 2141              	.LBB1553:
 2142              	.LBB1552:
 2143              	.LBB1547:
 159:VoiceEnvelope.h ****                 ph = static_cast<float>(phase) * attack_coefficient;
 2144              		.loc 3 159 13 is_stmt 1 view .LVU637
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 100


 2145              		.loc 3 160 17 view .LVU638
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 2146              		.loc 3 160 41 is_stmt 0 view .LVU639
 2147 013c D36B     		ldr	r3, [r2, #60]
 2148              	.LBB1541:
 2149              	.LBB1542:
 218:VoiceEnvelope.h ****     }
 2150              		.loc 3 218 27 view .LVU640
 2151 013e B0EE475A 		vmov.f32	s10, s14
 2152              	.LBE1542:
 2153              	.LBE1541:
 162:VoiceEnvelope.h ****                     current_state = (mode == MODE_AR) ? ENV_DECAY : ENV_SUSTAIN;
 2154              		.loc 3 162 17 view .LVU641
 2155 0142 17EE900A 		vmov	r0, s15	@ int
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 2156              		.loc 3 160 22 view .LVU642
 2157 0146 05EE903A 		vmov	s11, r3	@ int
 162:VoiceEnvelope.h ****                     current_state = (mode == MODE_AR) ? ENV_DECAY : ENV_SUSTAIN;
 2158              		.loc 3 162 17 view .LVU643
 2159 014a 8342     		cmp	r3, r0
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 2160              		.loc 3 160 22 view .LVU644
 2161 014c F8EE655A 		vcvt.f32.u32	s11, s11
 160:VoiceEnvelope.h ****                 current_value = CalculateAttackAmplitude(ph);
 2162              		.loc 3 160 20 view .LVU645
 2163 0150 65EE845A 		vmul.f32	s11, s11, s8
 2164              	.LVL104:
 161:VoiceEnvelope.h ****                 if (phase >= attack_time) {
 2165              		.loc 3 161 17 is_stmt 1 view .LVU646
 2166              	.LBB1544:
 2167              	.LBI1541:
 217:VoiceEnvelope.h ****         return ph / (1.0f + attack_curve_coefficient * (1.0f - ph));
 2168              		.loc 3 217 11 view .LVU647
 2169              	.LBB1543:
 218:VoiceEnvelope.h ****     }
 2170              		.loc 3 218 9 view .LVU648
 218:VoiceEnvelope.h ****     }
 2171              		.loc 3 218 62 is_stmt 0 view .LVU649
 2172 0154 77EE654A 		vsub.f32	s9, s14, s11
 218:VoiceEnvelope.h ****     }
 2173              		.loc 3 218 27 view .LVU650
 2174 0158 A6EE245A 		vfma.f32	s10, s12, s9
 2175              	.LVL105:
 218:VoiceEnvelope.h ****     }
 2176              		.loc 3 218 67 view .LVU651
 2177 015c 85EE856A 		vdiv.f32	s12, s11, s10
 2178              	.LBE1543:
 2179              	.LBE1544:
 161:VoiceEnvelope.h ****                 if (phase >= attack_time) {
 2180              		.loc 3 161 31 view .LVU652
 2181 0160 82ED016A 		vstr.32	s12, [r2, #4]
 162:VoiceEnvelope.h ****                     current_state = (mode == MODE_AR) ? ENV_DECAY : ENV_SUSTAIN;
 2182              		.loc 3 162 17 is_stmt 1 view .LVU653
 2183 0164 3FD3     		bcc	.L84
 163:VoiceEnvelope.h ****                     phase = 0;
 2184              		.loc 3 163 21 view .LVU654
 163:VoiceEnvelope.h ****                     phase = 0;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 101


 2185              		.loc 3 163 55 is_stmt 0 view .LVU655
 2186 0166 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 2187 0168 002B     		cmp	r3, #0
 2188 016a 0CBF     		ite	eq
 2189 016c 0323     		moveq	r3, #3
 2190 016e 0223     		movne	r3, #2
 163:VoiceEnvelope.h ****                     phase = 0;
 2191              		.loc 3 163 35 view .LVU656
 2192 0170 1370     		strb	r3, [r2]
 164:VoiceEnvelope.h ****                 } else {
 2193              		.loc 3 164 21 is_stmt 1 view .LVU657
 164:VoiceEnvelope.h ****                 } else {
 2194              		.loc 3 164 27 is_stmt 0 view .LVU658
 2195 0172 0023     		movs	r3, #0
 2196              	.LVL106:
 2197              	.L83:
 198:VoiceEnvelope.h ****                 }
 2198              		.loc 3 198 26 view .LVU659
 2199 0174 D363     		str	r3, [r2, #60]
 2200 0176 C5E7     		b	.L58
 2201              	.L62:
 170:VoiceEnvelope.h ****                 current_value = 1.0f;
 2202              		.loc 3 170 13 is_stmt 1 view .LVU660
 171:VoiceEnvelope.h ****                 break;
 2203              		.loc 3 171 17 view .LVU661
 171:VoiceEnvelope.h ****                 break;
 2204              		.loc 3 171 31 is_stmt 0 view .LVU662
 2205 0178 82ED017A 		vstr.32	s14, [r2, #4]
 172:VoiceEnvelope.h **** 
 2206              		.loc 3 172 17 is_stmt 1 view .LVU663
 2207 017c C2E7     		b	.L58
 2208              	.L61:
 174:VoiceEnvelope.h ****                 // Use current_value as starting point for decay
 2209              		.loc 3 174 13 view .LVU664
 177:VoiceEnvelope.h ****                 if (phase == 0) {
 2210              		.loc 3 177 17 view .LVU665
 177:VoiceEnvelope.h ****                 if (phase == 0) {
 2211              		.loc 3 177 41 is_stmt 0 view .LVU666
 2212 017e D06B     		ldr	r0, [r2, #60]
 177:VoiceEnvelope.h ****                 if (phase == 0) {
 2213              		.loc 3 177 22 view .LVU667
 2214 0180 07EE900A 		vmov	s15, r0	@ int
 2215 0184 F8EE677A 		vcvt.f32.u32	s15, s15
 177:VoiceEnvelope.h ****                 if (phase == 0) {
 2216              		.loc 3 177 20 view .LVU668
 2217 0188 67EE857A 		vmul.f32	s15, s15, s10
 2218              	.LVL107:
 178:VoiceEnvelope.h ****                     // On first frame, use current value
 2219              		.loc 3 178 17 is_stmt 1 view .LVU669
 2220 018c 08B9     		cbnz	r0, .L67
 180:VoiceEnvelope.h ****                 }
 2221              		.loc 3 180 21 view .LVU670
 180:VoiceEnvelope.h ****                 }
 2222              		.loc 3 180 39 is_stmt 0 view .LVU671
 2223 018e 5468     		ldr	r4, [r2, #4]	@ float
 2224 0190 1464     		str	r4, [r2, #64]	@ float
 2225              	.L67:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 102


 182:VoiceEnvelope.h ****                 
 2226              		.loc 3 182 17 is_stmt 1 view .LVU672
 182:VoiceEnvelope.h ****                 
 2227              		.loc 3 182 59 is_stmt 0 view .LVU673
 2228 0192 37EE676A 		vsub.f32	s12, s14, s15
 182:VoiceEnvelope.h ****                 
 2229              		.loc 3 182 51 view .LVU674
 2230 0196 D2ED105A 		vldr.32	s11, [r2, #64]
 184:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 2231              		.loc 3 184 17 view .LVU675
 2232 019a 9842     		cmp	r0, r3
 182:VoiceEnvelope.h ****                 
 2233              		.loc 3 182 51 view .LVU676
 2234 019c 26EE256A 		vmul.f32	s12, s12, s11
 182:VoiceEnvelope.h ****                 
 2235              		.loc 3 182 73 view .LVU677
 2236 01a0 F0EE475A 		vmov.f32	s11, s14
 2237 01a4 E7EEA65A 		vfma.f32	s11, s15, s13
 182:VoiceEnvelope.h ****                 
 2238              		.loc 3 182 65 view .LVU678
 2239 01a8 C6EE257A 		vdiv.f32	s15, s12, s11
 2240              	.LVL108:
 182:VoiceEnvelope.h ****                 
 2241              		.loc 3 182 31 view .LVU679
 2242 01ac C2ED017A 		vstr.32	s15, [r2, #4]
 184:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 2243              		.loc 3 184 17 is_stmt 1 view .LVU680
 2244 01b0 02D3     		bcc	.L68
 2245              	.LVL109:
 2246              	.L69:
 185:VoiceEnvelope.h ****                     phase = 0;
 2247              		.loc 3 185 21 view .LVU681
 185:VoiceEnvelope.h ****                     phase = 0;
 2248              		.loc 3 185 35 is_stmt 0 view .LVU682
 2249 01b2 0023     		movs	r3, #0
 2250 01b4 1370     		strb	r3, [r2]
 186:VoiceEnvelope.h ****                 } else {
 2251              		.loc 3 186 21 is_stmt 1 view .LVU683
 2252 01b6 DDE7     		b	.L83
 2253              	.LVL110:
 2254              	.L68:
 188:VoiceEnvelope.h ****                 }
 2255              		.loc 3 188 21 view .LVU684
 188:VoiceEnvelope.h ****                 }
 2256              		.loc 3 188 26 is_stmt 0 view .LVU685
 2257 01b8 0130     		adds	r0, r0, #1
 2258              	.LVL111:
 188:VoiceEnvelope.h ****                 }
 2259              		.loc 3 188 26 view .LVU686
 2260 01ba D063     		str	r0, [r2, #60]
 2261              	.LVL112:
 188:VoiceEnvelope.h ****                 }
 2262              		.loc 3 188 26 view .LVU687
 2263 01bc A2E7     		b	.L58
 2264              	.LVL113:
 2265              	.L59:
 192:VoiceEnvelope.h ****                 current_value = reset_target - static_cast<float>(phase) * reset_coefficient;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 103


 2266              		.loc 3 192 13 is_stmt 1 view .LVU688
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 2267              		.loc 3 193 17 view .LVU689
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 2268              		.loc 3 193 67 is_stmt 0 view .LVU690
 2269 01be D36B     		ldr	r3, [r2, #60]
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 2270              		.loc 3 193 46 view .LVU691
 2271 01c0 D2ED095A 		vldr.32	s11, [r2, #36]
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 2272              		.loc 3 193 48 view .LVU692
 2273 01c4 07EE903A 		vmov	s15, r3	@ int
 2274 01c8 B8EE676A 		vcvt.f32.u32	s12, s15
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 2275              		.loc 3 193 46 view .LVU693
 2276 01cc D2ED0A7A 		vldr.32	s15, [r2, #40]
 2277 01d0 E6EE657A 		vfms.f32	s15, s12, s11
 193:VoiceEnvelope.h ****                 if (phase >= reset_time) {
 2278              		.loc 3 193 31 view .LVU694
 2279 01d4 C2ED017A 		vstr.32	s15, [r2, #4]
 194:VoiceEnvelope.h ****                     current_state = ENV_IDLE;
 2280              		.loc 3 194 17 is_stmt 1 view .LVU695
 2281 01d8 D2ED087A 		vldr.32	s15, [r2, #32]
 2282 01dc B4EEE76A 		vcmpe.f32	s12, s15
 2283 01e0 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2284 01e4 E5DA     		bge	.L69
 2285              	.L84:
 198:VoiceEnvelope.h ****                 }
 2286              		.loc 3 198 21 view .LVU696
 198:VoiceEnvelope.h ****                 }
 2287              		.loc 3 198 26 is_stmt 0 view .LVU697
 2288 01e6 0133     		adds	r3, r3, #1
 2289 01e8 C4E7     		b	.L83
 2290              	.LVL114:
 2291              	.L52:
 198:VoiceEnvelope.h ****                 }
 2292              		.loc 3 198 26 view .LVU698
 2293              	.LBE1547:
 2294              	.LBE1552:
 2295              	.LBE1553:
 2296              	.LBE1554:
 2297              	.LBE1555:
 2298              	.LBB1556:
 241:Polyphony.cpp ****         mod.level_patched = false;
 2299              		.loc 1 241 9 is_stmt 1 view .LVU699
 242:Polyphony.cpp ****         mod.trigger_patched = true;
 2300              		.loc 1 242 27 is_stmt 0 view .LVU700
 2301 01ea 0023     		movs	r3, #0
 2302              	.LVL115:
 241:Polyphony.cpp ****         mod.level_patched = false;
 2303              		.loc 1 241 19 view .LVU701
 2304 01ec 81ED077A 		vstr.32	s14, [r1, #28]
 242:Polyphony.cpp ****         mod.trigger_patched = true;
 2305              		.loc 1 242 9 is_stmt 1 view .LVU702
 242:Polyphony.cpp ****         mod.trigger_patched = true;
 2306              		.loc 1 242 27 is_stmt 0 view .LVU703
 2307 01f0 81F82430 		strb	r3, [r1, #36]
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 104


 243:Polyphony.cpp ****     }
 2308              		.loc 1 243 9 is_stmt 1 view .LVU704
 243:Polyphony.cpp ****     }
 2309              		.loc 1 243 29 is_stmt 0 view .LVU705
 2310 01f4 0123     		movs	r3, #1
 2311 01f6 81F82330 		strb	r3, [r1, #35]
 2312              	.LBE1556:
 2313              		.loc 1 245 1 view .LVU706
 2314 01fa 9DE7     		b	.L51
 2315              	.L86:
 2316              		.align	2
 2317              	.L85:
 2318 01fc 00000000 		.word	0
 2319 0200 CDCCCC3D 		.word	1036831949
 2320 0204 9A99993E 		.word	1050253722
 2321 0208 3333333F 		.word	1060320051
 2322 020c 00000043 		.word	1124073472
 2323 0210 6F12033B 		.word	990057071
 2324              		.cfi_endproc
 2325              	.LFE5811:
 2327              		.section	.text._ZN15PolyphonyEngine17UpdateMonoTriggerERN6plaits11ModulationsERbb,"ax",%progbits
 2328              		.align	1
 2329              		.global	_ZN15PolyphonyEngine17UpdateMonoTriggerERN6plaits11ModulationsERbb
 2330              		.syntax unified
 2331              		.thumb
 2332              		.thumb_func
 2334              	_ZN15PolyphonyEngine17UpdateMonoTriggerERN6plaits11ModulationsERbb:
 2335              	.LVL116:
 2336              	.LFB5812:
 246:Polyphony.cpp **** 
 247:Polyphony.cpp **** void PolyphonyEngine::UpdateMonoTrigger(plaits::Modulations& mod, bool& active_flag, bool engine_ch
 2337              		.loc 1 247 118 is_stmt 1 view -0
 2338              		.cfi_startproc
 2339              		@ args = 0, pretend = 0, frame = 0
 2340              		@ frame_needed = 0, uses_anonymous_args = 0
 2341              		@ link register save eliminated.
 248:Polyphony.cpp ****     if ((engine_changed_flag_param && active_flag) || !active_flag) {
 2342              		.loc 1 248 5 view .LVU708
 2343 0000 0BB9     		cbnz	r3, .L88
 2344              		.loc 1 248 52 is_stmt 0 discriminator 3 view .LVU709
 2345 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 2346              	.LVL117:
 2347              		.loc 1 248 52 discriminator 3 view .LVU710
 2348 0004 0BB9     		cbnz	r3, .L87
 2349              	.L88:
 249:Polyphony.cpp ****         mod.trigger = 0.0f; 
 2350              		.loc 1 249 9 is_stmt 1 view .LVU711
 2351              		.loc 1 249 21 is_stmt 0 view .LVU712
 2352 0006 0023     		movs	r3, #0
 2353 0008 8B61     		str	r3, [r1, #24]	@ float
 2354              	.L87:
 250:Polyphony.cpp ****     } 
 251:Polyphony.cpp **** }
 2355              		.loc 1 251 1 view .LVU713
 2356 000a 7047     		bx	lr
 2357              		.cfi_endproc
 2358              	.LFE5812:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 105


 2360              		.section	.text._ZN15PolyphonyEngine12SilenceVoiceEi,"ax",%progbits
 2361              		.align	1
 2362              		.global	_ZN15PolyphonyEngine12SilenceVoiceEi
 2363              		.syntax unified
 2364              		.thumb
 2365              		.thumb_func
 2367              	_ZN15PolyphonyEngine12SilenceVoiceEi:
 2368              	.LVL118:
 2369              	.LFB5813:
 252:Polyphony.cpp **** 
 253:Polyphony.cpp **** void PolyphonyEngine::SilenceVoice(int voice_idx) {
 2370              		.loc 1 253 51 is_stmt 1 view -0
 2371              		.cfi_startproc
 2372              		@ args = 0, pretend = 0, frame = 0
 2373              		@ frame_needed = 0, uses_anonymous_args = 0
 2374              		@ link register save eliminated.
 254:Polyphony.cpp ****     if (voice_idx >= 0 && voice_idx < NUM_VOICES) {
 2375              		.loc 1 254 5 view .LVU715
 2376 0000 0329     		cmp	r1, #3
 2377 0002 08D8     		bhi	.L90
 255:Polyphony.cpp ****         memset(output_buffers_[voice_idx], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 2378              		.loc 1 255 9 view .LVU716
 2379              		.loc 1 255 41 is_stmt 0 view .LVU717
 2380 0004 00EBC110 		add	r0, r0, r1, lsl #7
 2381              	.LVL119:
 2382              		.loc 1 255 15 view .LVU718
 2383 0008 8022     		movs	r2, #128
 2384 000a 0021     		movs	r1, #0
 2385              	.LVL120:
 2386              		.loc 1 255 15 view .LVU719
 2387 000c 00F56850 		add	r0, r0, #14848
 2388 0010 2430     		adds	r0, r0, #36
 2389 0012 FFF7FEBF 		b	memset
 2390              	.LVL121:
 2391              	.L90:
 256:Polyphony.cpp ****     }
 257:Polyphony.cpp **** }
 2392              		.loc 1 257 1 view .LVU720
 2393 0016 7047     		bx	lr
 2394              		.cfi_endproc
 2395              	.LFE5813:
 2397              		.section	.text._ZN15PolyphonyEngine14RetriggerVoiceEi,"ax",%progbits
 2398              		.align	1
 2399              		.global	_ZN15PolyphonyEngine14RetriggerVoiceEi
 2400              		.syntax unified
 2401              		.thumb
 2402              		.thumb_func
 2404              	_ZN15PolyphonyEngine14RetriggerVoiceEi:
 2405              	.LVL122:
 2406              	.LFB5814:
 258:Polyphony.cpp **** 
 259:Polyphony.cpp **** void PolyphonyEngine::RetriggerVoice(int voice_idx) {
 2407              		.loc 1 259 53 is_stmt 1 view -0
 2408              		.cfi_startproc
 2409              		@ args = 0, pretend = 0, frame = 8
 2410              		@ frame_needed = 0, uses_anonymous_args = 0
 260:Polyphony.cpp ****     if (voice_idx >= 0 && voice_idx < NUM_VOICES && voice_active_[voice_idx]) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 106


 2411              		.loc 1 260 5 view .LVU722
 2412              	.LBB1562:
 2413 0000 0329     		cmp	r1, #3
 2414              	.LBE1562:
 259:Polyphony.cpp ****     if (voice_idx >= 0 && voice_idx < NUM_VOICES && voice_active_[voice_idx]) {
 2415              		.loc 1 259 53 is_stmt 0 view .LVU723
 2416 0002 73B5     		push	{r0, r1, r4, r5, r6, lr}
 2417              		.cfi_def_cfa_offset 24
 2418              		.cfi_offset 4, -16
 2419              		.cfi_offset 5, -12
 2420              		.cfi_offset 6, -8
 2421              		.cfi_offset 14, -4
 259:Polyphony.cpp ****     if (voice_idx >= 0 && voice_idx < NUM_VOICES && voice_active_[voice_idx]) {
 2422              		.loc 1 259 53 view .LVU724
 2423 0004 0446     		mov	r4, r0
 2424 0006 0D46     		mov	r5, r1
 2425              	.LBB1563:
 2426              		.loc 1 260 5 view .LVU725
 2427 0008 27D8     		bhi	.L92
 2428              		.loc 1 260 76 discriminator 1 view .LVU726
 2429 000a 4218     		adds	r2, r0, r1
 2430 000c 43F61023 		movw	r3, #14864
 2431              		.loc 1 260 50 discriminator 1 view .LVU727
 2432 0010 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2433 0012 13B3     		cbz	r3, .L92
 2434              	.LVL123:
 2435              		.loc 1 260 50 discriminator 1 view .LVU728
 2436              	.LBE1563:
 2437              	.LBB1564:
 2438              	.LBI1564:
 259:Polyphony.cpp ****     if (voice_idx >= 0 && voice_idx < NUM_VOICES && voice_active_[voice_idx]) {
 2439              		.loc 1 259 6 is_stmt 1 view .LVU729
 2440              	.LBB1565:
 261:Polyphony.cpp ****         bool percussive_engine = (patches_[voice_idx].engine > 7);
 2441              		.loc 1 261 9 view .LVU730
 2442              		.loc 1 261 55 is_stmt 0 view .LVU731
 2443 0014 2823     		movs	r3, #40
 2444 0016 43F2DC72 		movw	r2, #14300
 2445 001a 03FB0103 		mla	r3, r3, r1, r0
 2446 001e 9E58     		ldr	r6, [r3, r2]
 2447              	.LVL124:
 262:Polyphony.cpp ****         if (!percussive_engine) {
 2448              		.loc 1 262 9 is_stmt 1 view .LVU732
 2449 0020 072E     		cmp	r6, #7
 2450 0022 0ADC     		bgt	.L96
 263:Polyphony.cpp ****             voice_envelopes_[voice_idx].Reset();
 2451              		.loc 1 263 13 view .LVU733
 2452              		.loc 1 263 46 is_stmt 0 view .LVU734
 2453 0024 4420     		movs	r0, #68
 2454              	.LVL125:
 2455              		.loc 1 263 46 view .LVU735
 2456 0026 00FB0140 		mla	r0, r0, r1, r4
 2457 002a 00F56450 		add	r0, r0, #14592
 2458 002e 0190     		str	r0, [sp, #4]
 2459 0030 FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 2460              	.LVL126:
 264:Polyphony.cpp ****             voice_envelopes_[voice_idx].Trigger();
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 107


 2461              		.loc 1 264 13 is_stmt 1 view .LVU736
 2462              		.loc 1 264 48 is_stmt 0 view .LVU737
 2463 0034 0198     		ldr	r0, [sp, #4]
 2464 0036 FFF7FEFF 		bl	_ZN13VoiceEnvelope7TriggerEv
 2465              	.LVL127:
 2466              	.L96:
 265:Polyphony.cpp ****         }
 266:Polyphony.cpp **** 
 267:Polyphony.cpp ****         modulations_[voice_idx].trigger = 1.0f;
 2467              		.loc 1 267 9 is_stmt 1 view .LVU738
 2468              		.loc 1 267 41 is_stmt 0 view .LVU739
 2469 003a 2821     		movs	r1, #40
 2470 003c 4FF07E52 		mov	r2, #1065353216
 268:Polyphony.cpp ****         if(percussive_engine) {
 2471              		.loc 1 268 9 view .LVU740
 2472 0040 072E     		cmp	r6, #7
 267:Polyphony.cpp ****         if(percussive_engine) {
 2473              		.loc 1 267 41 view .LVU741
 2474 0042 01FB0544 		mla	r4, r1, r5, r4
 2475              	.LVL128:
 267:Polyphony.cpp ****         if(percussive_engine) {
 2476              		.loc 1 267 41 view .LVU742
 2477 0046 04F56153 		add	r3, r4, #14400
 2478 004a 9A63     		str	r2, [r3, #56]	@ float
 2479 004c 03F13803 		add	r3, r3, #56
 2480              		.loc 1 268 9 is_stmt 1 view .LVU743
 269:Polyphony.cpp ****             modulations_[voice_idx].trigger_patched = true;
 2481              		.loc 1 269 13 view .LVU744
 2482              		.loc 1 269 53 is_stmt 0 view .LVU745
 2483 0050 C2BF     		ittt	gt
 2484 0052 0122     		movgt	r2, #1
 2485 0054 43F68303 		movwgt	r3, #14467
 2486 0058 E254     		strbgt	r2, [r4, r3]
 2487              	.LVL129:
 2488              	.L92:
 2489              		.loc 1 269 53 view .LVU746
 2490              	.LBE1565:
 2491              	.LBE1564:
 270:Polyphony.cpp ****         }
 271:Polyphony.cpp ****     }
 272:Polyphony.cpp **** }
 2492              		.loc 1 272 1 view .LVU747
 2493 005a 02B0     		add	sp, sp, #8
 2494              		.cfi_def_cfa_offset 16
 2495              		@ sp needed
 2496 005c 70BD     		pop	{r4, r5, r6, pc}
 2497              		.loc 1 272 1 view .LVU748
 2498              		.cfi_endproc
 2499              	.LFE5814:
 2501              		.section	.text._ZN15PolyphonyEngine15PrepVoiceParamsERKNS_16RenderParametersE,"ax",%progbits
 2502              		.align	1
 2503              		.global	_ZN15PolyphonyEngine15PrepVoiceParamsERKNS_16RenderParametersE
 2504              		.syntax unified
 2505              		.thumb
 2506              		.thumb_func
 2508              	_ZN15PolyphonyEngine15PrepVoiceParamsERKNS_16RenderParametersE:
 2509              	.LVL130:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 108


 2510              	.LFB5808:
 131:Polyphony.cpp ****     bool percussive_engine = (params.engine_index > 7);
 2511              		.loc 1 131 71 is_stmt 1 view -0
 2512              		.cfi_startproc
 2513              		@ args = 0, pretend = 0, frame = 32
 2514              		@ frame_needed = 0, uses_anonymous_args = 0
 132:Polyphony.cpp **** 
 2515              		.loc 1 132 5 view .LVU750
 132:Polyphony.cpp **** 
 2516              		.loc 1 132 38 is_stmt 0 view .LVU751
 2517 0000 0B68     		ldr	r3, [r1]
 132:Polyphony.cpp **** 
 2518              		.loc 1 132 10 view .LVU752
 2519 0002 072B     		cmp	r3, #7
 2520 0004 CCBF     		ite	gt
 2521 0006 0123     		movgt	r3, #1
 2522 0008 0023     		movle	r3, #0
 131:Polyphony.cpp ****     bool percussive_engine = (params.engine_index > 7);
 2523              		.loc 1 131 71 view .LVU753
 2524 000a 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2525              		.cfi_def_cfa_offset 36
 2526              		.cfi_offset 4, -36
 2527              		.cfi_offset 5, -32
 2528              		.cfi_offset 6, -28
 2529              		.cfi_offset 7, -24
 2530              		.cfi_offset 8, -20
 2531              		.cfi_offset 9, -16
 2532              		.cfi_offset 10, -12
 2533              		.cfi_offset 11, -8
 2534              		.cfi_offset 14, -4
 2535 000e 0546     		mov	r5, r0
 2536 0010 0C46     		mov	r4, r1
 2537 0012 2DED088B 		vpush.64	{d8, d9, d10, d11}
 2538              		.cfi_def_cfa_offset 68
 2539              		.cfi_offset 80, -68
 2540              		.cfi_offset 81, -64
 2541              		.cfi_offset 82, -60
 2542              		.cfi_offset 83, -56
 2543              		.cfi_offset 84, -52
 2544              		.cfi_offset 85, -48
 2545              		.cfi_offset 86, -44
 2546              		.cfi_offset 87, -40
 132:Polyphony.cpp **** 
 2547              		.loc 1 132 10 view .LVU754
 2548 0016 0BEE103A 		vmov	s22, r3	@ int
 2549              	.LVL131:
 134:Polyphony.cpp ****     float release_value = 0.0f;
 2550              		.loc 1 134 5 is_stmt 1 view .LVU755
 135:Polyphony.cpp ****     if (!percussive_engine) {
 2551              		.loc 1 135 5 view .LVU756
 136:Polyphony.cpp ****         float attack_raw = params.env_attack_val; 
 2552              		.loc 1 136 5 view .LVU757
 131:Polyphony.cpp ****     bool percussive_engine = (params.engine_index > 7);
 2553              		.loc 1 131 71 is_stmt 0 view .LVU758
 2554 001a 8BB0     		sub	sp, sp, #44
 2555              		.cfi_def_cfa_offset 112
 2556              	.LBB1566:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 109


 136:Polyphony.cpp ****         float attack_raw = params.env_attack_val; 
 2557              		.loc 1 136 5 view .LVU759
 2558 001c 00F38680 		bgt	.L113
 2559              	.LBB1567:
 137:Polyphony.cpp ****         if (attack_raw < 0.2f) {
 2560              		.loc 1 137 9 is_stmt 1 view .LVU760
 137:Polyphony.cpp ****         if (attack_raw < 0.2f) {
 2561              		.loc 1 137 15 is_stmt 0 view .LVU761
 2562 0020 91ED080A 		vldr.32	s0, [r1, #32]
 2563              	.LVL132:
 138:Polyphony.cpp ****             attack_value = attack_raw * (attack_raw * 0.5f);
 2564              		.loc 1 138 9 is_stmt 1 view .LVU762
 2565 0024 DFED537A 		vldr.32	s15, .L121
 2566 0028 B4EEE70A 		vcmpe.f32	s0, s15
 143:Polyphony.cpp ****     }
 2567              		.loc 1 143 32 is_stmt 0 view .LVU763
 2568 002c D1ED097A 		vldr.32	s15, [r1, #36]
 143:Polyphony.cpp ****     }
 2569              		.loc 1 143 48 view .LVU764
 2570 0030 67EEA78A 		vmul.f32	s17, s15, s15
 138:Polyphony.cpp ****             attack_value = attack_raw * (attack_raw * 0.5f);
 2571              		.loc 1 138 9 view .LVU765
 2572 0034 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 139:Polyphony.cpp ****         } else {
 2573              		.loc 1 139 13 is_stmt 1 view .LVU766
 143:Polyphony.cpp ****     }
 2574              		.loc 1 143 23 is_stmt 0 view .LVU767
 2575 0038 68EEA78A 		vmul.f32	s17, s17, s15
 139:Polyphony.cpp ****         } else {
 2576              		.loc 1 139 53 view .LVU768
 2577 003c 4ABF     		itet	mi
 2578 003e B6EE008A 		vmovmi.f32	s16, #5.0e-1
 141:Polyphony.cpp ****         }
 2579              		.loc 1 141 39 view .LVU769
 2580 0042 20EE008A 		vmulpl.f32	s16, s0, s0
 139:Polyphony.cpp ****         } else {
 2581              		.loc 1 139 53 view .LVU770
 2582 0046 20EE088A 		vmulmi.f32	s16, s0, s16
 141:Polyphony.cpp ****         }
 2583              		.loc 1 141 13 is_stmt 1 view .LVU771
 141:Polyphony.cpp ****         }
 2584              		.loc 1 141 26 is_stmt 0 view .LVU772
 2585 004a 28EE008A 		vmul.f32	s16, s16, s0
 2586              	.LVL133:
 143:Polyphony.cpp ****     }
 2587              		.loc 1 143 9 is_stmt 1 view .LVU773
 2588              	.L101:
 143:Polyphony.cpp ****     }
 2589              		.loc 1 143 9 is_stmt 0 view .LVU774
 2590              	.LBE1567:
 2591              	.LBE1566:
 146:Polyphony.cpp ****     float current_global_harmonics = params.harm_knob_val;
 2592              		.loc 1 146 5 is_stmt 1 view .LVU775
 146:Polyphony.cpp ****     float current_global_harmonics = params.harm_knob_val;
 2593              		.loc 1 146 11 is_stmt 0 view .LVU776
 2594 004e F3EE087A 		vmov.f32	s15, #2.4e+1
 2595 0052 94ED047A 		vldr.32	s14, [r4, #16]
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 110


 2596 0056 BAEE089A 		vmov.f32	s18, #-1.2e+1
 2597 005a 05F56858 		add	r8, r5, #14848
 2598 005e 05F56859 		add	r9, r5, #14848
 147:Polyphony.cpp ****     float current_global_morph = params.morph_knob_val;
 2599              		.loc 1 147 11 view .LVU777
 2600 0062 D4ED059A 		vldr.32	s19, [r4, #20]
 148:Polyphony.cpp ****     float current_global_timbre = params.timbre_knob_val;
 2601              		.loc 1 148 11 view .LVU778
 2602 0066 94ED06AA 		vldr.32	s20, [r4, #24]
 2603 006a 05F55F56 		add	r6, r5, #14272
 146:Polyphony.cpp ****     float current_global_harmonics = params.harm_knob_val;
 2604              		.loc 1 146 11 view .LVU779
 2605 006e A7EE279A 		vfma.f32	s18, s14, s15
 2606              	.LVL134:
 147:Polyphony.cpp ****     float current_global_morph = params.morph_knob_val;
 2607              		.loc 1 147 5 is_stmt 1 view .LVU780
 148:Polyphony.cpp ****     float current_global_timbre = params.timbre_knob_val;
 2608              		.loc 1 148 5 view .LVU781
 149:Polyphony.cpp **** 
 2609              		.loc 1 149 5 view .LVU782
 149:Polyphony.cpp **** 
 2610              		.loc 1 149 11 is_stmt 0 view .LVU783
 2611 0072 D4ED07AA 		vldr.32	s21, [r4, #28]
 2612              	.LVL135:
 151:Polyphony.cpp ****         PatchParams patch_params;
 2613              		.loc 1 151 5 is_stmt 1 view .LVU784
 151:Polyphony.cpp ****         PatchParams patch_params;
 2614              		.loc 1 151 5 is_stmt 0 view .LVU785
 2615 0076 08F12408 		add	r8, r8, #36
 2616 007a 09F11409 		add	r9, r9, #20
 2617 007e 05F5645A 		add	r10, r5, #14592
 2618              	.LBB1568:
 151:Polyphony.cpp ****         PatchParams patch_params;
 2619              		.loc 1 151 14 view .LVU786
 2620 0082 0027     		movs	r7, #0
 2621              	.LVL136:
 2622              	.L108:
 151:Polyphony.cpp ****         PatchParams patch_params;
 2623              		.loc 1 151 23 is_stmt 1 discriminator 1 view .LVU787
 151:Polyphony.cpp ****         PatchParams patch_params;
 2624              		.loc 1 151 33 is_stmt 0 discriminator 1 view .LVU788
 2625 0084 D4F808B0 		ldr	fp, [r4, #8]
 151:Polyphony.cpp ****         PatchParams patch_params;
 2626              		.loc 1 151 23 discriminator 1 view .LVU789
 2627 0088 BB45     		cmp	fp, r7
 2628 008a 54DD     		ble	.L114
 2629              	.LBB1569:
 152:Polyphony.cpp ****         patch_params.engine_idx = params.engine_index;
 2630              		.loc 1 152 9 is_stmt 1 view .LVU790
 153:Polyphony.cpp ****         patch_params.note = voice_note_[v];
 2631              		.loc 1 153 9 view .LVU791
 153:Polyphony.cpp ****         patch_params.note = voice_note_[v];
 2632              		.loc 1 153 33 is_stmt 0 view .LVU792
 2633 008c 2368     		ldr	r3, [r4]
 2634 008e 06F1A00B 		add	fp, r6, #160
 162:Polyphony.cpp **** 
 2635              		.loc 1 162 26 view .LVU793
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 111


 2636 0092 02AA     		add	r2, sp, #8
 2637 0094 3146     		mov	r1, r6
 153:Polyphony.cpp ****         patch_params.note = voice_note_[v];
 2638              		.loc 1 153 33 view .LVU794
 2639 0096 0293     		str	r3, [sp, #8]
 154:Polyphony.cpp ****         patch_params.global_pitch_offset = global_pitch_offset;
 2640              		.loc 1 154 9 is_stmt 1 view .LVU795
 162:Polyphony.cpp **** 
 2641              		.loc 1 162 26 is_stmt 0 view .LVU796
 2642 0098 2846     		mov	r0, r5
 154:Polyphony.cpp ****         patch_params.global_pitch_offset = global_pitch_offset;
 2643              		.loc 1 154 42 view .LVU797
 2644 009a 59F8043B 		ldr	r3, [r9], #4	@ float
 164:Polyphony.cpp ****             modulations_[v],
 2645              		.loc 1 164 24 view .LVU798
 2646 009e F0EE680A 		vmov.f32	s1, s17
 2647 00a2 B0EE480A 		vmov.f32	s0, s16
 155:Polyphony.cpp ****         patch_params.harmonics = current_global_harmonics;
 2648              		.loc 1 155 42 view .LVU799
 2649 00a6 8DED049A 		vstr.32	s18, [sp, #16]
 154:Polyphony.cpp ****         patch_params.global_pitch_offset = global_pitch_offset;
 2650              		.loc 1 154 27 view .LVU800
 2651 00aa 0393     		str	r3, [sp, #12]	@ float
 155:Polyphony.cpp ****         patch_params.harmonics = current_global_harmonics;
 2652              		.loc 1 155 9 is_stmt 1 view .LVU801
 156:Polyphony.cpp ****         patch_params.timbre = current_global_timbre;
 2653              		.loc 1 156 9 view .LVU802
 159:Polyphony.cpp ****         patch_params.decay = release_value;
 2654              		.loc 1 159 29 is_stmt 0 view .LVU803
 2655 00ac 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 156:Polyphony.cpp ****         patch_params.timbre = current_global_timbre;
 2656              		.loc 1 156 32 view .LVU804
 2657 00ae CDED059A 		vstr.32	s19, [sp, #20]
 157:Polyphony.cpp ****         patch_params.morph = current_global_morph;
 2658              		.loc 1 157 9 is_stmt 1 view .LVU805
 159:Polyphony.cpp ****         patch_params.decay = release_value;
 2659              		.loc 1 159 29 is_stmt 0 view .LVU806
 2660 00b2 8DF82030 		strb	r3, [sp, #32]
 157:Polyphony.cpp ****         patch_params.morph = current_global_morph;
 2661              		.loc 1 157 29 view .LVU807
 2662 00b6 CDED06AA 		vstr.32	s21, [sp, #24]
 158:Polyphony.cpp ****         patch_params.arp_on = params.arp_on;
 2663              		.loc 1 158 9 is_stmt 1 view .LVU808
 158:Polyphony.cpp ****         patch_params.arp_on = params.arp_on;
 2664              		.loc 1 158 28 is_stmt 0 view .LVU809
 2665 00ba 8DED07AA 		vstr.32	s20, [sp, #28]
 159:Polyphony.cpp ****         patch_params.decay = release_value;
 2666              		.loc 1 159 9 is_stmt 1 view .LVU810
 160:Polyphony.cpp ****         
 2667              		.loc 1 160 9 view .LVU811
 160:Polyphony.cpp ****         
 2668              		.loc 1 160 28 is_stmt 0 view .LVU812
 2669 00be CDED098A 		vstr.32	s17, [sp, #36]
 162:Polyphony.cpp **** 
 2670              		.loc 1 162 9 is_stmt 1 view .LVU813
 162:Polyphony.cpp **** 
 2671              		.loc 1 162 26 is_stmt 0 view .LVU814
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 112


 2672 00c2 FFF7FEFF 		bl	_ZN15PolyphonyEngine17UpdatePatchParamsERN6plaits5PatchERK11PatchParams
 2673              	.LVL137:
 164:Polyphony.cpp ****             modulations_[v],
 2674              		.loc 1 164 9 is_stmt 1 view .LVU815
 164:Polyphony.cpp ****             modulations_[v],
 2675              		.loc 1 164 24 is_stmt 0 view .LVU816
 2676 00c6 1BEE103A 		vmov	r3, s22	@ int
 2677 00ca 5246     		mov	r2, r10
 2678 00cc 5946     		mov	r1, fp
 2679 00ce FFF7FEFF 		bl	_ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff
 2680              	.LVL138:
 172:Polyphony.cpp ****             UpdateMonoTrigger(
 2681              		.loc 1 172 9 is_stmt 1 view .LVU817
 2682 00d2 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2683 00d4 63B9     		cbnz	r3, .L106
 2684              	.LVL139:
 172:Polyphony.cpp ****             UpdateMonoTrigger(
 2685              		.loc 1 172 31 is_stmt 0 discriminator 1 view .LVU818
 2686 00d6 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 2687 00d8 53B9     		cbnz	r3, .L106
 173:Polyphony.cpp ****                 modulations_[v],
 2688              		.loc 1 173 13 is_stmt 1 view .LVU819
 173:Polyphony.cpp ****                 modulations_[v],
 2689              		.loc 1 173 30 is_stmt 0 view .LVU820
 2690 00da 05F56852 		add	r2, r5, #14848
 2691 00de 05F54053 		add	r3, r5, #12288
 2692 00e2 2846     		mov	r0, r5
 2693 00e4 1032     		adds	r2, r2, #16
 2694 00e6 93F82C3D 		ldrb	r3, [r3, #3372]	@ zero_extendqisi2
 2695 00ea 3A44     		add	r2, r2, r7
 2696 00ec FFF7FEFF 		bl	_ZN15PolyphonyEngine17UpdateMonoTriggerERN6plaits11ModulationsERbb
 2697              	.LVL140:
 2698              	.L106:
 180:Polyphony.cpp **** 
 2699              		.loc 1 180 9 is_stmt 1 view .LVU821
 180:Polyphony.cpp **** 
 2700              		.loc 1 180 26 is_stmt 0 view .LVU822
 2701 00f0 2023     		movs	r3, #32
 2702 00f2 4FF45F60 		mov	r0, #3568
 2703 00f6 5A46     		mov	r2, fp
 2704 00f8 3146     		mov	r1, r6
 2705 00fa 0093     		str	r3, [sp]
 2706 00fc 4346     		mov	r3, r8
 2707 00fe 00FB0750 		mla	r0, r0, r7, r5
 2708 0102 FFF7FEFF 		bl	_ZN6plaits5Voice6RenderERKNS_5PatchERKNS_11ModulationsEPNS0_5FrameEj
 2709              	.LVL141:
 182:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 2710              		.loc 1 182 9 is_stmt 1 view .LVU823
 2711 0106 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2712 0108 4BB9     		cbnz	r3, .L107
 182:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 2713              		.loc 1 182 31 is_stmt 0 discriminator 1 view .LVU824
 2714 010a 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 2715 010c 3BB9     		cbnz	r3, .L107
 182:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 2716              		.loc 1 182 49 discriminator 2 view .LVU825
 2717 010e F369     		ldr	r3, [r6, #28]
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 113


 2718 0110 072B     		cmp	r3, #7
 2719 0112 04DD     		ble	.L107
 182:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 2720              		.loc 1 182 77 discriminator 3 view .LVU826
 2721 0114 1FB9     		cbnz	r7, .L107
 183:Polyphony.cpp ****         }
 2722              		.loc 1 183 13 is_stmt 1 view .LVU827
 183:Polyphony.cpp ****         }
 2723              		.loc 1 183 37 is_stmt 0 view .LVU828
 2724 0116 05F56153 		add	r3, r5, #14400
 2725 011a 0022     		movs	r2, #0
 2726 011c 9A63     		str	r2, [r3, #56]	@ float
 2727              	.L107:
 2728              	.LBE1569:
 151:Polyphony.cpp ****         PatchParams patch_params;
 2729              		.loc 1 151 5 is_stmt 1 discriminator 2 view .LVU829
 2730 011e 0137     		adds	r7, r7, #1
 2731              	.LVL142:
 151:Polyphony.cpp ****         PatchParams patch_params;
 2732              		.loc 1 151 5 is_stmt 0 discriminator 2 view .LVU830
 2733 0120 2836     		adds	r6, r6, #40
 2734 0122 08F18008 		add	r8, r8, #128
 2735 0126 0AF1440A 		add	r10, r10, #68
 2736 012a ABE7     		b	.L108
 2737              	.LVL143:
 2738              	.L113:
 151:Polyphony.cpp ****         PatchParams patch_params;
 2739              		.loc 1 151 5 discriminator 2 view .LVU831
 2740              	.LBE1568:
 135:Polyphony.cpp ****     if (!percussive_engine) {
 2741              		.loc 1 135 11 view .LVU832
 2742 012c DFED128A 		vldr.32	s17, .L121+4
 134:Polyphony.cpp ****     float release_value = 0.0f;
 2743              		.loc 1 134 11 view .LVU833
 2744 0130 B0EE688A 		vmov.f32	s16, s17
 2745 0134 8BE7     		b	.L101
 2746              	.LVL144:
 2747              	.L114:
 2748              	.LBB1570:
 151:Polyphony.cpp ****         PatchParams patch_params;
 2749              		.loc 1 151 33 view .LVU834
 2750 0136 5C46     		mov	r4, fp
 2751              	.LVL145:
 2752              	.L105:
 151:Polyphony.cpp ****         PatchParams patch_params;
 2753              		.loc 1 151 33 view .LVU835
 2754              	.LBE1570:
 2755              	.LBB1571:
 188:Polyphony.cpp ****          SilenceVoice(v);
 2756              		.loc 1 188 38 is_stmt 1 discriminator 3 view .LVU836
 2757 0138 032C     		cmp	r4, #3
 2758 013a 05DC     		bgt	.L109
 189:Polyphony.cpp ****     }
 2759              		.loc 1 189 10 discriminator 2 view .LVU837
 189:Polyphony.cpp ****     }
 2760              		.loc 1 189 22 is_stmt 0 discriminator 2 view .LVU838
 2761 013c 2146     		mov	r1, r4
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 114


 2762 013e 2846     		mov	r0, r5
 188:Polyphony.cpp ****          SilenceVoice(v);
 2763              		.loc 1 188 5 discriminator 2 view .LVU839
 2764 0140 0134     		adds	r4, r4, #1
 2765              	.LVL146:
 189:Polyphony.cpp ****     }
 2766              		.loc 1 189 22 discriminator 2 view .LVU840
 2767 0142 FFF7FEFF 		bl	_ZN15PolyphonyEngine12SilenceVoiceEi
 2768              	.LVL147:
 188:Polyphony.cpp ****          SilenceVoice(v);
 2769              		.loc 1 188 5 is_stmt 1 discriminator 2 view .LVU841
 188:Polyphony.cpp ****          SilenceVoice(v);
 2770              		.loc 1 188 5 is_stmt 0 discriminator 2 view .LVU842
 2771 0146 F7E7     		b	.L105
 2772              	.L109:
 188:Polyphony.cpp ****          SilenceVoice(v);
 2773              		.loc 1 188 5 discriminator 2 view .LVU843
 2774              	.LBE1571:
 192:Polyphony.cpp ****         for(int v = 0; v < effective_voices; ++v) {
 2775              		.loc 1 192 5 is_stmt 1 view .LVU844
 2776              	.LBB1572:
 192:Polyphony.cpp ****         for(int v = 0; v < effective_voices; ++v) {
 2777              		.loc 1 192 8 is_stmt 0 view .LVU845
 2778 0148 05F54056 		add	r6, r5, #12288
 192:Polyphony.cpp ****         for(int v = 0; v < effective_voices; ++v) {
 2779              		.loc 1 192 5 view .LVU846
 2780 014c 96F82C3D 		ldrb	r3, [r6, #3372]	@ zero_extendqisi2
 2781 0150 5BB1     		cbz	r3, .L100
 2782              	.LBB1573:
 2783              	.LBB1574:
 193:Polyphony.cpp ****             RetriggerVoice(v);
 2784              		.loc 1 193 17 view .LVU847
 2785 0152 0024     		movs	r4, #0
 2786              	.LVL148:
 2787              	.L112:
 193:Polyphony.cpp ****             RetriggerVoice(v);
 2788              		.loc 1 193 26 is_stmt 1 discriminator 3 view .LVU848
 2789 0154 A345     		cmp	fp, r4
 2790 0156 05DD     		ble	.L111
 194:Polyphony.cpp ****         }
 2791              		.loc 1 194 13 discriminator 2 view .LVU849
 194:Polyphony.cpp ****         }
 2792              		.loc 1 194 27 is_stmt 0 discriminator 2 view .LVU850
 2793 0158 2146     		mov	r1, r4
 2794 015a 2846     		mov	r0, r5
 193:Polyphony.cpp ****             RetriggerVoice(v);
 2795              		.loc 1 193 9 discriminator 2 view .LVU851
 2796 015c 0134     		adds	r4, r4, #1
 2797              	.LVL149:
 194:Polyphony.cpp ****         }
 2798              		.loc 1 194 27 discriminator 2 view .LVU852
 2799 015e FFF7FEFF 		bl	_ZN15PolyphonyEngine14RetriggerVoiceEi
 2800              	.LVL150:
 193:Polyphony.cpp ****             RetriggerVoice(v);
 2801              		.loc 1 193 9 is_stmt 1 discriminator 2 view .LVU853
 193:Polyphony.cpp ****             RetriggerVoice(v);
 2802              		.loc 1 193 9 is_stmt 0 discriminator 2 view .LVU854
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 115


 2803 0162 F7E7     		b	.L112
 2804              	.L111:
 193:Polyphony.cpp ****             RetriggerVoice(v);
 2805              		.loc 1 193 9 discriminator 2 view .LVU855
 2806              	.LBE1574:
 196:Polyphony.cpp ****     }
 2807              		.loc 1 196 9 is_stmt 1 view .LVU856
 196:Polyphony.cpp ****     }
 2808              		.loc 1 196 30 is_stmt 0 view .LVU857
 2809 0164 0023     		movs	r3, #0
 2810 0166 86F82C3D 		strb	r3, [r6, #3372]
 2811              	.LVL151:
 2812              	.L100:
 196:Polyphony.cpp ****     }
 2813              		.loc 1 196 30 view .LVU858
 2814              	.LBE1573:
 2815              	.LBE1572:
 198:Polyphony.cpp **** 
 2816              		.loc 1 198 1 view .LVU859
 2817 016a 0BB0     		add	sp, sp, #44
 2818              		.cfi_def_cfa_offset 68
 2819              		@ sp needed
 2820 016c BDEC088B 		vldm	sp!, {d8-d11}
 2821              		.cfi_restore 86
 2822              		.cfi_restore 87
 2823              		.cfi_restore 84
 2824              		.cfi_restore 85
 2825              		.cfi_restore 82
 2826              		.cfi_restore 83
 2827              		.cfi_restore 80
 2828              		.cfi_restore 81
 2829              		.cfi_def_cfa_offset 36
 2830              	.LVL152:
 198:Polyphony.cpp **** 
 2831              		.loc 1 198 1 view .LVU860
 2832 0170 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2833              	.LVL153:
 2834              	.L122:
 198:Polyphony.cpp **** 
 2835              		.loc 1 198 1 view .LVU861
 2836              		.align	2
 2837              	.L121:
 2838 0174 CDCC4C3E 		.word	1045220557
 2839 0178 00000000 		.word	0
 2840              		.cfi_endproc
 2841              	.LFE5808:
 2843              		.section	.text._ZN15PolyphonyEngine11RenderBlockERKNS_16RenderParametersE,"ax",%progbits
 2844              		.align	1
 2845              		.global	_ZN15PolyphonyEngine11RenderBlockERKNS_16RenderParametersE
 2846              		.syntax unified
 2847              		.thumb
 2848              		.thumb_func
 2850              	_ZN15PolyphonyEngine11RenderBlockERKNS_16RenderParametersE:
 2851              	.LVL154:
 2852              	.LFB5804:
  81:Polyphony.cpp ****     PrepVoiceParams(params);
 2853              		.loc 1 81 67 is_stmt 1 view -0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 116


 2854              		.cfi_startproc
 2855              		@ args = 0, pretend = 0, frame = 0
 2856              		@ frame_needed = 0, uses_anonymous_args = 0
  82:Polyphony.cpp ****     
 2857              		.loc 1 82 5 view .LVU863
  81:Polyphony.cpp ****     PrepVoiceParams(params);
 2858              		.loc 1 81 67 is_stmt 0 view .LVU864
 2859 0000 38B5     		push	{r3, r4, r5, lr}
 2860              		.cfi_def_cfa_offset 16
 2861              		.cfi_offset 3, -16
 2862              		.cfi_offset 4, -12
 2863              		.cfi_offset 5, -8
 2864              		.cfi_offset 14, -4
  81:Polyphony.cpp ****     PrepVoiceParams(params);
 2865              		.loc 1 81 67 view .LVU865
 2866 0002 0D46     		mov	r5, r1
 2867 0004 0446     		mov	r4, r0
  82:Polyphony.cpp ****     
 2868              		.loc 1 82 20 view .LVU866
 2869 0006 FFF7FEFF 		bl	_ZN15PolyphonyEngine15PrepVoiceParamsERKNS_16RenderParametersE
 2870              	.LVL155:
  84:Polyphony.cpp **** 
 2871              		.loc 1 84 5 is_stmt 1 view .LVU867
  84:Polyphony.cpp **** 
 2872              		.loc 1 84 21 is_stmt 0 view .LVU868
 2873 000a 2979     		ldrb	r1, [r5, #4]	@ zero_extendqisi2
 2874 000c 2046     		mov	r0, r4
 2875 000e FFF7FEFF 		bl	_ZN15PolyphonyEngine16ProcessEnvelopesEb
 2876              	.LVL156:
  86:Polyphony.cpp ****         modulations_[0].trigger = 0.0f;
 2877              		.loc 1 86 5 is_stmt 1 view .LVU869
 2878 0012 2B7B     		ldrb	r3, [r5, #12]	@ zero_extendqisi2
 2879 0014 43B1     		cbz	r3, .L123
  87:Polyphony.cpp ****         modulations_[0].trigger_patched = false; 
 2880              		.loc 1 87 9 view .LVU870
  87:Polyphony.cpp ****         modulations_[0].trigger_patched = false; 
 2881              		.loc 1 87 33 is_stmt 0 view .LVU871
 2882 0016 04F54054 		add	r4, r4, #12288
 2883              	.LVL157:
  87:Polyphony.cpp ****         modulations_[0].trigger_patched = false; 
 2884              		.loc 1 87 33 view .LVU872
 2885 001a 0022     		movs	r2, #0
 2886 001c 04F67803 		addw	r3, r4, #2168
 2887 0020 1A60     		str	r2, [r3]	@ float
  88:Polyphony.cpp ****     }
 2888              		.loc 1 88 9 is_stmt 1 view .LVU873
  88:Polyphony.cpp ****     }
 2889              		.loc 1 88 41 is_stmt 0 view .LVU874
 2890 0022 0023     		movs	r3, #0
 2891 0024 84F88338 		strb	r3, [r4, #2179]
 2892              	.LVL158:
 2893              	.L123:
  90:Polyphony.cpp **** 
 2894              		.loc 1 90 1 view .LVU875
 2895 0028 38BD     		pop	{r3, r4, r5, pc}
  90:Polyphony.cpp **** 
 2896              		.loc 1 90 1 view .LVU876
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 117


 2897              		.cfi_endproc
 2898              	.LFE5804:
 2900              		.section	.text._ZN15PolyphonyEngine11ClearVoicesEv,"ax",%progbits
 2901              		.align	1
 2902              		.global	_ZN15PolyphonyEngine11ClearVoicesEv
 2903              		.syntax unified
 2904              		.thumb
 2905              		.thumb_func
 2907              	_ZN15PolyphonyEngine11ClearVoicesEv:
 2908              	.LVL159:
 2909              	.LFB5815:
 273:Polyphony.cpp **** 
 274:Polyphony.cpp **** void PolyphonyEngine::ClearVoices() {
 2910              		.loc 1 274 37 is_stmt 1 view -0
 2911              		.cfi_startproc
 2912              		@ args = 0, pretend = 0, frame = 0
 2913              		@ frame_needed = 0, uses_anonymous_args = 0
 275:Polyphony.cpp ****     for (int v = 0; v < NUM_VOICES; ++v) {
 2914              		.loc 1 275 5 view .LVU878
 2915              	.LBB1575:
 2916              		.loc 1 275 23 view .LVU879
 2917              	.LBE1575:
 274:Polyphony.cpp ****     for (int v = 0; v < NUM_VOICES; ++v) {
 2918              		.loc 1 274 37 is_stmt 0 view .LVU880
 2919 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2920              		.cfi_def_cfa_offset 24
 2921              		.cfi_offset 4, -24
 2922              		.cfi_offset 5, -20
 2923              		.cfi_offset 6, -16
 2924              		.cfi_offset 7, -12
 2925              		.cfi_offset 8, -8
 2926              		.cfi_offset 14, -4
 2927 0004 00F56856 		add	r6, r0, #14848
 2928 0008 00F56155 		add	r5, r0, #14400
 2929 000c 00F56854 		add	r4, r0, #14848
 2930 0010 00F56457 		add	r7, r0, #14592
 2931 0014 1036     		adds	r6, r6, #16
 2932 0016 3835     		adds	r5, r5, #56
 2933 0018 2434     		adds	r4, r4, #36
 2934 001a B046     		mov	r8, r6
 2935              	.LVL160:
 2936              	.L129:
 2937              	.LBB1576:
 276:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 2938              		.loc 1 276 9 is_stmt 1 discriminator 2 view .LVU881
 2939              		.loc 1 276 34 is_stmt 0 discriminator 2 view .LVU882
 2940 001c 3846     		mov	r0, r7
 275:Polyphony.cpp ****     for (int v = 0; v < NUM_VOICES; ++v) {
 2941              		.loc 1 275 23 discriminator 2 view .LVU883
 2942 001e 4437     		adds	r7, r7, #68
 2943              		.loc 1 276 34 discriminator 2 view .LVU884
 2944 0020 FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 2945              	.LVL161:
 277:Polyphony.cpp ****         voice_active_[v] = false;
 2946              		.loc 1 277 9 is_stmt 1 discriminator 2 view .LVU885
 2947              		.loc 1 277 26 is_stmt 0 discriminator 2 view .LVU886
 2948 0024 0021     		movs	r1, #0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 118


 278:Polyphony.cpp ****         modulations_[v].trigger = 0.0f;
 2949              		.loc 1 278 33 discriminator 2 view .LVU887
 2950 0026 0023     		movs	r3, #0
 279:Polyphony.cpp ****         modulations_[v].trigger_patched = false;
 280:Polyphony.cpp ****         modulations_[v].level_patched = false; 
 281:Polyphony.cpp ****         memset(output_buffers_[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 2951              		.loc 1 281 15 discriminator 2 view .LVU888
 2952 0028 2046     		mov	r0, r4
 277:Polyphony.cpp ****         modulations_[v].trigger = 0.0f;
 2953              		.loc 1 277 26 discriminator 2 view .LVU889
 2954 002a 06F8011B 		strb	r1, [r6], #1
 2955              	.LVL162:
 278:Polyphony.cpp ****         modulations_[v].trigger = 0.0f;
 2956              		.loc 1 278 9 is_stmt 1 discriminator 2 view .LVU890
 2957              		.loc 1 281 15 is_stmt 0 discriminator 2 view .LVU891
 2958 002e 8022     		movs	r2, #128
 278:Polyphony.cpp ****         modulations_[v].trigger = 0.0f;
 2959              		.loc 1 278 33 discriminator 2 view .LVU892
 2960 0030 2B60     		str	r3, [r5]	@ float
 279:Polyphony.cpp ****         modulations_[v].trigger_patched = false;
 2961              		.loc 1 279 9 is_stmt 1 discriminator 2 view .LVU893
 275:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 2962              		.loc 1 275 23 is_stmt 0 discriminator 2 view .LVU894
 2963 0032 8034     		adds	r4, r4, #128
 279:Polyphony.cpp ****         modulations_[v].trigger_patched = false;
 2964              		.loc 1 279 41 discriminator 2 view .LVU895
 2965 0034 E972     		strb	r1, [r5, #11]
 280:Polyphony.cpp ****         memset(output_buffers_[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 2966              		.loc 1 280 9 is_stmt 1 discriminator 2 view .LVU896
 275:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 2967              		.loc 1 275 23 is_stmt 0 discriminator 2 view .LVU897
 2968 0036 2835     		adds	r5, r5, #40
 280:Polyphony.cpp ****         memset(output_buffers_[v], 0, sizeof(plaits::Voice::Frame) * BLOCK_SIZE);
 2969              		.loc 1 280 39 discriminator 2 view .LVU898
 2970 0038 05F81C1C 		strb	r1, [r5, #-28]
 2971              		.loc 1 281 9 is_stmt 1 discriminator 2 view .LVU899
 2972              		.loc 1 281 15 is_stmt 0 discriminator 2 view .LVU900
 2973 003c FFF7FEFF 		bl	memset
 2974              	.LVL163:
 275:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 2975              		.loc 1 275 5 is_stmt 1 discriminator 2 view .LVU901
 275:Polyphony.cpp ****         voice_envelopes_[v].Reset();
 2976              		.loc 1 275 23 discriminator 2 view .LVU902
 2977 0040 4745     		cmp	r7, r8
 2978 0042 EBD1     		bne	.L129
 2979              	.LBE1576:
 282:Polyphony.cpp ****     }
 283:Polyphony.cpp **** }
 2980              		.loc 1 283 1 is_stmt 0 view .LVU903
 2981 0044 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2982              		.loc 1 283 1 view .LVU904
 2983              		.cfi_endproc
 2984              	.LFE5815:
 2986              		.section	.text._ZN15PolyphonyEngine10PolyToMonoEi,"ax",%progbits
 2987              		.align	1
 2988              		.global	_ZN15PolyphonyEngine10PolyToMonoEi
 2989              		.syntax unified
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 119


 2990              		.thumb
 2991              		.thumb_func
 2993              	_ZN15PolyphonyEngine10PolyToMonoEi:
 2994              	.LVL164:
 2995              	.LFB5816:
 284:Polyphony.cpp **** 
 285:Polyphony.cpp **** void PolyphonyEngine::PolyToMono(int source_voice_idx) {
 2996              		.loc 1 285 56 is_stmt 1 view -0
 2997              		.cfi_startproc
 2998              		@ args = 0, pretend = 0, frame = 0
 2999              		@ frame_needed = 0, uses_anonymous_args = 0
 286:Polyphony.cpp ****     if (source_voice_idx < 0 || source_voice_idx >= NUM_VOICES) return;
 3000              		.loc 1 286 5 view .LVU906
 3001 0000 0329     		cmp	r1, #3
 285:Polyphony.cpp ****     if (source_voice_idx < 0 || source_voice_idx >= NUM_VOICES) return;
 3002              		.loc 1 285 56 is_stmt 0 view .LVU907
 3003 0002 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3004              		.cfi_def_cfa_offset 40
 3005              		.cfi_offset 3, -40
 3006              		.cfi_offset 4, -36
 3007              		.cfi_offset 5, -32
 3008              		.cfi_offset 6, -28
 3009              		.cfi_offset 7, -24
 3010              		.cfi_offset 8, -20
 3011              		.cfi_offset 9, -16
 3012              		.cfi_offset 10, -12
 3013              		.cfi_offset 11, -8
 3014              		.cfi_offset 14, -4
 3015 0006 0446     		mov	r4, r0
 3016 0008 0E46     		mov	r6, r1
 3017 000a 2DED028B 		vpush.64	{d8}
 3018              		.cfi_def_cfa_offset 48
 3019              		.cfi_offset 80, -48
 3020              		.cfi_offset 81, -44
 3021              		.loc 1 286 5 view .LVU908
 3022 000e 61D8     		bhi	.L131
 3023 0010 00F56458 		add	r8, r0, #14592
 3024 0014 00F56155 		add	r5, r0, #14400
 3025              	.LBB1581:
 3026              	.LBB1582:
 3027              	.LBB1583:
 287:Polyphony.cpp **** 
 288:Polyphony.cpp ****     for (int v = 0; v < NUM_VOICES; ++v) {
 3028              		.loc 1 288 14 view .LVU909
 3029 0018 0027     		movs	r7, #0
 3030 001a 3835     		adds	r5, r5, #56
 3031 001c C146     		mov	r9, r8
 3032              	.LVL165:
 3033              	.L134:
 289:Polyphony.cpp ****         if (v != source_voice_idx) {
 3034              		.loc 1 289 9 is_stmt 1 view .LVU910
 3035 001e BE42     		cmp	r6, r7
 3036 0020 0DD0     		beq	.L133
 290:Polyphony.cpp ****             voice_active_[v] = false;
 3037              		.loc 1 290 13 view .LVU911
 3038              		.loc 1 290 30 is_stmt 0 view .LVU912
 3039 0022 04F56853 		add	r3, r4, #14848
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 120


 3040 0026 4FF0000A 		mov	r10, #0
 291:Polyphony.cpp ****             voice_envelopes_[v].Reset();
 3041              		.loc 1 291 38 view .LVU913
 3042 002a 4046     		mov	r0, r8
 290:Polyphony.cpp ****             voice_active_[v] = false;
 3043              		.loc 1 290 30 view .LVU914
 3044 002c 1033     		adds	r3, r3, #16
 3045 002e 03F807A0 		strb	r10, [r3, r7]
 3046              		.loc 1 291 13 is_stmt 1 view .LVU915
 3047              		.loc 1 291 38 is_stmt 0 view .LVU916
 3048 0032 FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 3049              	.LVL166:
 292:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 3050              		.loc 1 292 13 is_stmt 1 view .LVU917
 3051              		.loc 1 292 37 is_stmt 0 view .LVU918
 3052 0036 0023     		movs	r3, #0
 293:Polyphony.cpp ****             modulations_[v].trigger_patched = false;
 3053              		.loc 1 293 45 view .LVU919
 3054 0038 85F80BA0 		strb	r10, [r5, #11]
 292:Polyphony.cpp ****             modulations_[v].trigger = 0.0f;
 3055              		.loc 1 292 37 view .LVU920
 3056 003c 2B60     		str	r3, [r5]	@ float
 3057              		.loc 1 293 13 is_stmt 1 view .LVU921
 3058              	.L133:
 288:Polyphony.cpp ****         if (v != source_voice_idx) {
 3059              		.loc 1 288 5 view .LVU922
 3060 003e 0137     		adds	r7, r7, #1
 3061              	.LVL167:
 288:Polyphony.cpp ****         if (v != source_voice_idx) {
 3062              		.loc 1 288 23 view .LVU923
 3063 0040 08F14408 		add	r8, r8, #68
 3064 0044 2835     		adds	r5, r5, #40
 3065 0046 042F     		cmp	r7, #4
 3066 0048 E9D1     		bne	.L134
 3067              	.LBE1583:
 294:Polyphony.cpp ****         }
 295:Polyphony.cpp ****     }
 296:Polyphony.cpp **** 
 297:Polyphony.cpp ****     if (voice_active_[source_voice_idx]) {
 3068              		.loc 1 297 5 view .LVU924
 3069              		.loc 1 297 39 is_stmt 0 view .LVU925
 3070 004a 04EB060B 		add	fp, r4, r6
 3071 004e 43F6102A 		movw	r10, #14864
 3072 0052 9FED288A 		vldr.32	s16, .L137
 3073 0056 04F54055 		add	r5, r4, #12288
 3074              		.loc 1 297 5 view .LVU926
 3075 005a 1BF80A70 		ldrb	r7, [fp, r10]	@ zero_extendqisi2
 3076              	.LVL168:
 3077              		.loc 1 297 5 view .LVU927
 3078 005e 002F     		cmp	r7, #0
 3079 0060 3CD0     		beq	.L135
 298:Polyphony.cpp ****         voice_active_[0] = true;
 3080              		.loc 1 298 9 is_stmt 1 view .LVU928
 3081              		.loc 1 298 26 is_stmt 0 view .LVU929
 3082 0062 0123     		movs	r3, #1
 299:Polyphony.cpp ****         voice_note_[0] = voice_note_[source_voice_idx];
 300:Polyphony.cpp ****         
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 121


 301:Polyphony.cpp ****         voice_envelopes_[0] = voice_envelopes_[source_voice_idx];
 3083              		.loc 1 301 29 view .LVU930
 3084 0064 4846     		mov	r0, r9
 302:Polyphony.cpp **** 
 303:Polyphony.cpp ****         modulations_[0].trigger = modulations_[source_voice_idx].trigger; 
 304:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
 3085              		.loc 1 304 74 view .LVU931
 3086 0066 43F68309 		movw	r9, #14467
 298:Polyphony.cpp ****         voice_note_[0] = voice_note_[source_voice_idx];
 3087              		.loc 1 298 26 view .LVU932
 3088 006a 85F8103A 		strb	r3, [r5, #2576]
 299:Polyphony.cpp ****         voice_note_[0] = voice_note_[source_voice_idx];
 3089              		.loc 1 299 9 is_stmt 1 view .LVU933
 299:Polyphony.cpp ****         voice_note_[0] = voice_note_[source_voice_idx];
 3090              		.loc 1 299 54 is_stmt 0 view .LVU934
 3091 006e 06F68463 		addw	r3, r6, #3716
 3092 0072 04EB8303 		add	r3, r4, r3, lsl #2
 3093 0076 5A68     		ldr	r2, [r3, #4]	@ float
 299:Polyphony.cpp ****         voice_note_[0] = voice_note_[source_voice_idx];
 3094              		.loc 1 299 24 view .LVU935
 3095 0078 05F61423 		addw	r3, r5, #2580
 3096 007c 1A60     		str	r2, [r3]	@ float
 301:Polyphony.cpp **** 
 3097              		.loc 1 301 9 is_stmt 1 view .LVU936
 301:Polyphony.cpp **** 
 3098              		.loc 1 301 29 is_stmt 0 view .LVU937
 3099 007e 4422     		movs	r2, #68
 3100 0080 02FB06F8 		mul	r8, r2, r6
 3101 0084 04EB0801 		add	r1, r4, r8
 3102 0088 01F56451 		add	r1, r1, #14592
 3103 008c FFF7FEFF 		bl	memcpy
 3104              	.LVL169:
 303:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
 3105              		.loc 1 303 9 is_stmt 1 view .LVU938
 303:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
 3106              		.loc 1 303 66 is_stmt 0 view .LVU939
 3107 0090 2821     		movs	r1, #40
 303:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
 3108              		.loc 1 303 33 view .LVU940
 3109 0092 05F67803 		addw	r3, r5, #2168
 305:Polyphony.cpp ****         modulations_[0].level = modulations_[source_voice_idx].level;
 306:Polyphony.cpp ****         modulations_[0].level_patched = modulations_[source_voice_idx].level_patched;
 307:Polyphony.cpp **** 
 308:Polyphony.cpp ****         voice_active_[source_voice_idx] = false;
 309:Polyphony.cpp ****         voice_envelopes_[source_voice_idx].Reset();
 3110              		.loc 1 309 49 view .LVU941
 3111 0096 08F56450 		add	r0, r8, #14592
 303:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
 3112              		.loc 1 303 66 view .LVU942
 3113 009a 01FB0646 		mla	r6, r1, r6, r4
 3114              	.LVL170:
 3115              		.loc 1 309 49 view .LVU943
 3116 009e 2044     		add	r0, r0, r4
 303:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
 3117              		.loc 1 303 66 view .LVU944
 3118 00a0 06F56157 		add	r7, r6, #14400
 3119 00a4 BA6B     		ldr	r2, [r7, #56]	@ float
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 122


 303:Polyphony.cpp ****         modulations_[0].trigger_patched = modulations_[source_voice_idx].trigger_patched;
 3120              		.loc 1 303 33 view .LVU945
 3121 00a6 1A60     		str	r2, [r3]	@ float
 304:Polyphony.cpp ****         modulations_[0].level = modulations_[source_voice_idx].level;
 3122              		.loc 1 304 9 is_stmt 1 view .LVU946
 304:Polyphony.cpp ****         modulations_[0].level = modulations_[source_voice_idx].level;
 3123              		.loc 1 304 74 is_stmt 0 view .LVU947
 3124 00a8 16F80930 		ldrb	r3, [r6, r9]	@ zero_extendqisi2
 305:Polyphony.cpp ****         modulations_[0].level = modulations_[source_voice_idx].level;
 3125              		.loc 1 305 64 view .LVU948
 3126 00ac FA6B     		ldr	r2, [r7, #60]	@ float
 304:Polyphony.cpp ****         modulations_[0].level = modulations_[source_voice_idx].level;
 3127              		.loc 1 304 41 view .LVU949
 3128 00ae 85F88338 		strb	r3, [r5, #2179]
 305:Polyphony.cpp ****         modulations_[0].level = modulations_[source_voice_idx].level;
 3129              		.loc 1 305 9 is_stmt 1 view .LVU950
 305:Polyphony.cpp ****         modulations_[0].level = modulations_[source_voice_idx].level;
 3130              		.loc 1 305 31 is_stmt 0 view .LVU951
 3131 00b2 05F67C03 		addw	r3, r5, #2172
 3132 00b6 1A60     		str	r2, [r3]	@ float
 306:Polyphony.cpp **** 
 3133              		.loc 1 306 9 is_stmt 1 view .LVU952
 306:Polyphony.cpp **** 
 3134              		.loc 1 306 72 is_stmt 0 view .LVU953
 3135 00b8 43F68403 		movw	r3, #14468
 3136 00bc F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 306:Polyphony.cpp **** 
 3137              		.loc 1 306 39 view .LVU954
 3138 00be 85F88438 		strb	r3, [r5, #2180]
 308:Polyphony.cpp ****         voice_envelopes_[source_voice_idx].Reset();
 3139              		.loc 1 308 9 is_stmt 1 view .LVU955
 308:Polyphony.cpp ****         voice_envelopes_[source_voice_idx].Reset();
 3140              		.loc 1 308 41 is_stmt 0 view .LVU956
 3141 00c2 0025     		movs	r5, #0
 3142 00c4 0BF80A50 		strb	r5, [fp, r10]
 3143              		.loc 1 309 9 is_stmt 1 view .LVU957
 3144              		.loc 1 309 49 is_stmt 0 view .LVU958
 3145 00c8 FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 3146              	.LVL171:
 310:Polyphony.cpp ****         modulations_[source_voice_idx].trigger = 0.0f;
 3147              		.loc 1 310 9 is_stmt 1 view .LVU959
 3148              		.loc 1 310 48 is_stmt 0 view .LVU960
 3149 00cc 87ED0E8A 		vstr.32	s16, [r7, #56]
 311:Polyphony.cpp ****         modulations_[source_voice_idx].trigger_patched = false;
 3150              		.loc 1 311 9 is_stmt 1 view .LVU961
 3151              		.loc 1 311 56 is_stmt 0 view .LVU962
 3152 00d0 06F80950 		strb	r5, [r6, r9]
 3153              	.L131:
 3154              		.loc 1 311 56 view .LVU963
 3155              	.LBE1582:
 3156              	.LBE1581:
 312:Polyphony.cpp ****     } else {
 313:Polyphony.cpp ****         voice_active_[0] = false;
 314:Polyphony.cpp ****         voice_envelopes_[0].Reset();
 315:Polyphony.cpp ****         modulations_[0].trigger = 0.0f;
 316:Polyphony.cpp ****         modulations_[0].trigger_patched = false;
 317:Polyphony.cpp ****     }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 123


 318:Polyphony.cpp **** }
 3157              		.loc 1 318 1 view .LVU964
 3158 00d4 BDEC028B 		vldm	sp!, {d8}
 3159              		.cfi_remember_state
 3160              		.cfi_restore 80
 3161              		.cfi_restore 81
 3162              		.cfi_def_cfa_offset 40
 3163 00d8 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3164              	.LVL172:
 3165              	.L135:
 3166              		.cfi_restore_state
 3167              	.LBB1585:
 3168              	.LBB1584:
 313:Polyphony.cpp ****         voice_envelopes_[0].Reset();
 3169              		.loc 1 313 9 is_stmt 1 view .LVU965
 314:Polyphony.cpp ****         modulations_[0].trigger = 0.0f;
 3170              		.loc 1 314 34 is_stmt 0 view .LVU966
 3171 00dc 4846     		mov	r0, r9
 313:Polyphony.cpp ****         voice_envelopes_[0].Reset();
 3172              		.loc 1 313 26 view .LVU967
 3173 00de 85F8107A 		strb	r7, [r5, #2576]
 314:Polyphony.cpp ****         modulations_[0].trigger = 0.0f;
 3174              		.loc 1 314 9 is_stmt 1 view .LVU968
 314:Polyphony.cpp ****         modulations_[0].trigger = 0.0f;
 3175              		.loc 1 314 34 is_stmt 0 view .LVU969
 3176 00e2 FFF7FEFF 		bl	_ZN13VoiceEnvelope5ResetEv
 3177              	.LVL173:
 315:Polyphony.cpp ****         modulations_[0].trigger_patched = false;
 3178              		.loc 1 315 9 is_stmt 1 view .LVU970
 315:Polyphony.cpp ****         modulations_[0].trigger_patched = false;
 3179              		.loc 1 315 33 is_stmt 0 view .LVU971
 3180 00e6 05F67803 		addw	r3, r5, #2168
 3181 00ea 83ED008A 		vstr.32	s16, [r3]
 316:Polyphony.cpp ****     }
 3182              		.loc 1 316 9 is_stmt 1 view .LVU972
 316:Polyphony.cpp ****     }
 3183              		.loc 1 316 41 is_stmt 0 view .LVU973
 3184 00ee 85F88378 		strb	r7, [r5, #2179]
 316:Polyphony.cpp ****     }
 3185              		.loc 1 316 41 view .LVU974
 3186 00f2 EFE7     		b	.L131
 3187              	.L138:
 3188              		.align	2
 3189              	.L137:
 3190 00f4 00000000 		.word	0
 3191              	.LBE1584:
 3192              	.LBE1585:
 3193              		.cfi_endproc
 3194              	.LFE5816:
 3196              		.section	.text._ZN15PolyphonyEngine14OnEngineChangeEii,"ax",%progbits
 3197              		.align	1
 3198              		.global	_ZN15PolyphonyEngine14OnEngineChangeEii
 3199              		.syntax unified
 3200              		.thumb
 3201              		.thumb_func
 3203              	_ZN15PolyphonyEngine14OnEngineChangeEii:
 3204              	.LVL174:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 124


 3205              	.LFB5817:
 319:Polyphony.cpp **** 
 320:Polyphony.cpp **** void PolyphonyEngine::OnEngineChange(int old_engine_idx, int new_engine_idx) {
 3206              		.loc 1 320 78 is_stmt 1 view -0
 3207              		.cfi_startproc
 3208              		@ args = 0, pretend = 0, frame = 0
 3209              		@ frame_needed = 0, uses_anonymous_args = 0
 3210              		@ link register save eliminated.
 321:Polyphony.cpp ****     bool prev_was_poly = (old_engine_idx <= 3);
 3211              		.loc 1 321 5 view .LVU976
 3212              		.loc 1 321 10 is_stmt 0 view .LVU977
 3213 0000 0329     		cmp	r1, #3
 320:Polyphony.cpp ****     bool prev_was_poly = (old_engine_idx <= 3);
 3214              		.loc 1 320 78 view .LVU978
 3215 0002 70B4     		push	{r4, r5, r6}
 3216              		.cfi_def_cfa_offset 12
 3217              		.cfi_offset 4, -12
 3218              		.cfi_offset 5, -8
 3219              		.cfi_offset 6, -4
 3220              		.loc 1 321 10 view .LVU979
 3221 0004 CCBF     		ite	gt
 3222 0006 0025     		movgt	r5, #0
 3223 0008 0125     		movle	r5, #1
 3224              	.LVL175:
 322:Polyphony.cpp ****     bool now_poly      = (new_engine_idx <= 3);
 3225              		.loc 1 322 5 is_stmt 1 view .LVU980
 3226              		.loc 1 322 10 is_stmt 0 view .LVU981
 3227 000a 032A     		cmp	r2, #3
 3228 000c CCBF     		ite	gt
 3229 000e 0024     		movgt	r4, #0
 3230 0010 0124     		movle	r4, #1
 3231              	.LVL176:
 323:Polyphony.cpp **** 
 324:Polyphony.cpp ****     if(old_engine_idx == new_engine_idx) {
 3232              		.loc 1 324 5 is_stmt 1 view .LVU982
 3233 0012 9142     		cmp	r1, r2
 3234 0014 1AD0     		beq	.L139
 325:Polyphony.cpp ****         return;
 326:Polyphony.cpp ****     }
 327:Polyphony.cpp **** 
 328:Polyphony.cpp ****     engine_changed_flag_ = true;
 3235              		.loc 1 328 5 view .LVU983
 3236              		.loc 1 328 26 is_stmt 0 view .LVU984
 3237 0016 00F54053 		add	r3, r0, #12288
 3238 001a 0126     		movs	r6, #1
 329:Polyphony.cpp **** 
 330:Polyphony.cpp ****     if(prev_was_poly == now_poly) {
 3239              		.loc 1 330 5 view .LVU985
 3240 001c A542     		cmp	r5, r4
 328:Polyphony.cpp **** 
 3241              		.loc 1 328 26 view .LVU986
 3242 001e 83F82C6D 		strb	r6, [r3, #3372]
 3243              		.loc 1 330 5 is_stmt 1 view .LVU987
 3244 0022 13D0     		beq	.L139
 331:Polyphony.cpp ****         return;
 332:Polyphony.cpp ****     }
 333:Polyphony.cpp **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 125


 334:Polyphony.cpp ****     if(prev_was_poly && !now_poly) {
 3245              		.loc 1 334 5 view .LVU988
 3246              	.LBB1586:
 3247 0024 0329     		cmp	r1, #3
 3248 0026 0BDC     		bgt	.L143
 3249              		.loc 1 334 22 is_stmt 0 discriminator 1 view .LVU989
 3250 0028 032A     		cmp	r2, #3
 3251 002a 09DD     		ble	.L143
 3252 002c 00F56853 		add	r3, r0, #14848
 3253              	.LBB1587:
 3254              	.LBB1588:
 335:Polyphony.cpp ****         int source_voice = -1;
 336:Polyphony.cpp ****         for(int v = 0; v < NUM_VOICES; ++v) {
 3255              		.loc 1 336 17 view .LVU990
 3256 0030 0021     		movs	r1, #0
 3257              	.LVL177:
 3258              		.loc 1 336 17 view .LVU991
 3259 0032 1033     		adds	r3, r3, #16
 3260              	.LVL178:
 3261              	.L145:
 337:Polyphony.cpp ****             if(voice_active_[v]) { source_voice = v; break; }
 3262              		.loc 1 337 13 is_stmt 1 view .LVU992
 3263              		.loc 1 337 31 is_stmt 0 view .LVU993
 3264 0034 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 3265              		.loc 1 337 13 view .LVU994
 3266 0038 2AB9     		cbnz	r2, .L144
 336:Polyphony.cpp ****             if(voice_active_[v]) { source_voice = v; break; }
 3267              		.loc 1 336 9 is_stmt 1 discriminator 2 view .LVU995
 3268 003a 0131     		adds	r1, r1, #1
 3269              	.LVL179:
 336:Polyphony.cpp ****             if(voice_active_[v]) { source_voice = v; break; }
 3270              		.loc 1 336 26 discriminator 2 view .LVU996
 3271 003c 0429     		cmp	r1, #4
 3272 003e F9D1     		bne	.L145
 3273              	.LVL180:
 3274              	.L143:
 336:Polyphony.cpp ****             if(voice_active_[v]) { source_voice = v; break; }
 3275              		.loc 1 336 26 is_stmt 0 discriminator 2 view .LVU997
 3276              	.LBE1588:
 3277              	.LBE1587:
 338:Polyphony.cpp ****         }
 339:Polyphony.cpp **** 
 340:Polyphony.cpp ****         if(source_voice != -1) {
 341:Polyphony.cpp ****             PolyToMono(source_voice);
 342:Polyphony.cpp ****         } else {
 343:Polyphony.cpp ****             ClearVoices();
 344:Polyphony.cpp ****         }
 345:Polyphony.cpp ****     }
 346:Polyphony.cpp ****     else {
 347:Polyphony.cpp ****         ClearVoices();
 3278              		.loc 1 347 9 is_stmt 1 view .LVU998
 3279              	.LBE1586:
 348:Polyphony.cpp ****     }
 349:Polyphony.cpp **** }
 3280              		.loc 1 349 1 is_stmt 0 view .LVU999
 3281 0040 70BC     		pop	{r4, r5, r6}
 3282              		.cfi_remember_state
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 126


 3283              		.cfi_restore 6
 3284              		.cfi_restore 5
 3285              		.cfi_restore 4
 3286              		.cfi_def_cfa_offset 0
 3287              	.LVL181:
 3288              	.LBB1591:
 347:Polyphony.cpp ****     }
 3289              		.loc 1 347 20 view .LVU1000
 3290 0042 FFF7FEBF 		b	_ZN15PolyphonyEngine11ClearVoicesEv
 3291              	.LVL182:
 3292              	.L144:
 3293              		.cfi_restore_state
 3294              	.LBB1589:
 340:Polyphony.cpp ****             PolyToMono(source_voice);
 3295              		.loc 1 340 9 is_stmt 1 view .LVU1001
 341:Polyphony.cpp ****         } else {
 3296              		.loc 1 341 13 view .LVU1002
 3297              	.LBE1589:
 3298              	.LBE1591:
 3299              		.loc 1 349 1 is_stmt 0 view .LVU1003
 3300 0046 70BC     		pop	{r4, r5, r6}
 3301              		.cfi_remember_state
 3302              		.cfi_restore 6
 3303              		.cfi_restore 5
 3304              		.cfi_restore 4
 3305              		.cfi_def_cfa_offset 0
 3306              	.LVL183:
 3307              	.LBB1592:
 3308              	.LBB1590:
 341:Polyphony.cpp ****         } else {
 3309              		.loc 1 341 23 view .LVU1004
 3310 0048 FFF7FEBF 		b	_ZN15PolyphonyEngine10PolyToMonoEi
 3311              	.LVL184:
 3312              	.L139:
 3313              		.cfi_restore_state
 341:Polyphony.cpp ****         } else {
 3314              		.loc 1 341 23 view .LVU1005
 3315              	.LBE1590:
 3316              	.LBE1592:
 3317              		.loc 1 349 1 view .LVU1006
 3318 004c 70BC     		pop	{r4, r5, r6}
 3319              		.cfi_restore 6
 3320              		.cfi_restore 5
 3321              		.cfi_restore 4
 3322              		.cfi_def_cfa_offset 0
 3323              	.LVL185:
 3324              		.loc 1 349 1 view .LVU1007
 3325 004e 7047     		bx	lr
 3326              		.cfi_endproc
 3327              	.LFE5817:
 3329              		.section	.text._ZNK15PolyphonyEngine17GetLastTouchStateEv,"ax",%progbits
 3330              		.align	1
 3331              		.global	_ZNK15PolyphonyEngine17GetLastTouchStateEv
 3332              		.syntax unified
 3333              		.thumb
 3334              		.thumb_func
 3336              	_ZNK15PolyphonyEngine17GetLastTouchStateEv:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 127


 3337              	.LVL186:
 3338              	.LFB5818:
 350:Polyphony.cpp **** 
 351:Polyphony.cpp **** uint16_t PolyphonyEngine::GetLastTouchState() const {
 3339              		.loc 1 351 53 is_stmt 1 view -0
 3340              		.cfi_startproc
 3341              		@ args = 0, pretend = 0, frame = 0
 3342              		@ frame_needed = 0, uses_anonymous_args = 0
 3343              		@ link register save eliminated.
 352:Polyphony.cpp ****     return last_touch_state_member_;
 3344              		.loc 1 352 5 view .LVU1009
 3345              		.loc 1 352 12 is_stmt 0 view .LVU1010
 3346 0000 00F54050 		add	r0, r0, #12288
 3347              	.LVL187:
 353:Polyphony.cpp **** }
 3348              		.loc 1 353 1 view .LVU1011
 3349 0004 B0F82E0D 		ldrh	r0, [r0, #3374]
 3350              	.LVL188:
 3351              		.loc 1 353 1 view .LVU1012
 3352 0008 7047     		bx	lr
 3353              		.cfi_endproc
 3354              	.LFE5818:
 3356              		.section	.text._ZN15PolyphonyEngine20UpdateLastTouchStateEt,"ax",%progbits
 3357              		.align	1
 3358              		.global	_ZN15PolyphonyEngine20UpdateLastTouchStateEt
 3359              		.syntax unified
 3360              		.thumb
 3361              		.thumb_func
 3363              	_ZN15PolyphonyEngine20UpdateLastTouchStateEt:
 3364              	.LVL189:
 3365              	.LFB5819:
 354:Polyphony.cpp **** 
 355:Polyphony.cpp **** void PolyphonyEngine::UpdateLastTouchState(uint16_t current_state) {
 3366              		.loc 1 355 68 is_stmt 1 view -0
 3367              		.cfi_startproc
 3368              		@ args = 0, pretend = 0, frame = 0
 3369              		@ frame_needed = 0, uses_anonymous_args = 0
 3370              		@ link register save eliminated.
 356:Polyphony.cpp ****     last_touch_state_member_ = current_state;
 3371              		.loc 1 356 5 view .LVU1014
 3372              		.loc 1 356 30 is_stmt 0 view .LVU1015
 3373 0000 00F54050 		add	r0, r0, #12288
 3374              	.LVL190:
 3375              		.loc 1 356 30 view .LVU1016
 3376 0004 A0F82E1D 		strh	r1, [r0, #3374]	@ movhi
 357:Polyphony.cpp **** }
 3377              		.loc 1 357 1 view .LVU1017
 3378 0008 7047     		bx	lr
 3379              		.cfi_endproc
 3380              	.LFE5819:
 3382              		.section	.text._ZN15PolyphonyEngine13FindFreeVoiceEi,"ax",%progbits
 3383              		.align	1
 3384              		.global	_ZN15PolyphonyEngine13FindFreeVoiceEi
 3385              		.syntax unified
 3386              		.thumb
 3387              		.thumb_func
 3389              	_ZN15PolyphonyEngine13FindFreeVoiceEi:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 128


 3390              	.LVL191:
 3391              	.LFB5820:
 358:Polyphony.cpp **** 
 359:Polyphony.cpp **** int PolyphonyEngine::FindFreeVoice(int max_voices) {
 3392              		.loc 1 359 52 is_stmt 1 view -0
 3393              		.cfi_startproc
 3394              		@ args = 0, pretend = 0, frame = 0
 3395              		@ frame_needed = 0, uses_anonymous_args = 0
 3396              		@ link register save eliminated.
 360:Polyphony.cpp ****     for (int i = 0; i < max_voices; ++i) {
 3397              		.loc 1 360 5 view .LVU1019
 3398              		.loc 1 360 5 is_stmt 0 view .LVU1020
 3399 0000 00F56853 		add	r3, r0, #14848
 3400              	.LBB1593:
 3401              		.loc 1 360 14 view .LVU1021
 3402 0004 0020     		movs	r0, #0
 3403              	.LVL192:
 3404              		.loc 1 360 14 view .LVU1022
 3405 0006 1033     		adds	r3, r3, #16
 3406              	.LVL193:
 3407              	.L151:
 3408              		.loc 1 360 23 is_stmt 1 discriminator 1 view .LVU1023
 3409 0008 8842     		cmp	r0, r1
 3410 000a 04DA     		bge	.L152
 361:Polyphony.cpp ****         if (!voice_active_[i]) {
 3411              		.loc 1 361 9 view .LVU1024
 3412              		.loc 1 361 29 is_stmt 0 view .LVU1025
 3413 000c 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 3414              		.loc 1 361 9 view .LVU1026
 3415 0010 1AB1     		cbz	r2, .L149
 360:Polyphony.cpp ****     for (int i = 0; i < max_voices; ++i) {
 3416              		.loc 1 360 5 is_stmt 1 discriminator 2 view .LVU1027
 3417 0012 0130     		adds	r0, r0, #1
 3418              	.LVL194:
 360:Polyphony.cpp ****     for (int i = 0; i < max_voices; ++i) {
 3419              		.loc 1 360 5 is_stmt 0 discriminator 2 view .LVU1028
 3420 0014 F8E7     		b	.L151
 3421              	.L152:
 360:Polyphony.cpp ****     for (int i = 0; i < max_voices; ++i) {
 3422              		.loc 1 360 5 discriminator 2 view .LVU1029
 3423              	.LBE1593:
 362:Polyphony.cpp ****             return i;
 363:Polyphony.cpp ****         }
 364:Polyphony.cpp ****     }
 365:Polyphony.cpp ****     
 366:Polyphony.cpp ****     return -1; 
 3424              		.loc 1 366 13 view .LVU1030
 3425 0016 4FF0FF30 		mov	r0, #-1
 3426              	.LVL195:
 3427              	.L149:
 367:Polyphony.cpp **** }
 3428              		.loc 1 367 1 view .LVU1031
 3429 001a 7047     		bx	lr
 3430              		.cfi_endproc
 3431              	.LFE5820:
 3433              		.section	.text._ZN15PolyphonyEngine14AssignMonoNoteEfb,"ax",%progbits
 3434              		.align	1
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 129


 3435              		.global	_ZN15PolyphonyEngine14AssignMonoNoteEfb
 3436              		.syntax unified
 3437              		.thumb
 3438              		.thumb_func
 3440              	_ZN15PolyphonyEngine14AssignMonoNoteEfb:
 3441              	.LVL196:
 3442              	.LFB5821:
 368:Polyphony.cpp **** 
 369:Polyphony.cpp **** void PolyphonyEngine::AssignMonoNote(float note, bool percussive_engine) {
 3443              		.loc 1 369 74 is_stmt 1 view -0
 3444              		.cfi_startproc
 3445              		@ args = 0, pretend = 0, frame = 0
 3446              		@ frame_needed = 0, uses_anonymous_args = 0
 370:Polyphony.cpp ****     voice_note_[0] = note;
 3447              		.loc 1 370 5 view .LVU1033
 369:Polyphony.cpp ****     voice_note_[0] = note;
 3448              		.loc 1 369 74 is_stmt 0 view .LVU1034
 3449 0000 38B5     		push	{r3, r4, r5, lr}
 3450              		.cfi_def_cfa_offset 16
 3451              		.cfi_offset 3, -16
 3452              		.cfi_offset 4, -12
 3453              		.cfi_offset 5, -8
 3454              		.cfi_offset 14, -4
 3455              		.loc 1 370 20 view .LVU1035
 3456 0002 00F54053 		add	r3, r0, #12288
 371:Polyphony.cpp ****     voice_active_[0] = true;
 372:Polyphony.cpp ****     modulations_[0].trigger = 1.0f;
 3457              		.loc 1 372 29 view .LVU1036
 3458 0006 4FF07E55 		mov	r5, #1065353216
 370:Polyphony.cpp ****     voice_active_[0] = true;
 3459              		.loc 1 370 20 view .LVU1037
 3460 000a 03F61422 		addw	r2, r3, #2580
 3461              		.loc 1 372 29 view .LVU1038
 3462 000e 03F67804 		addw	r4, r3, #2168
 370:Polyphony.cpp ****     voice_active_[0] = true;
 3463              		.loc 1 370 20 view .LVU1039
 3464 0012 82ED000A 		vstr.32	s0, [r2]
 371:Polyphony.cpp ****     voice_active_[0] = true;
 3465              		.loc 1 371 5 is_stmt 1 view .LVU1040
 371:Polyphony.cpp ****     voice_active_[0] = true;
 3466              		.loc 1 371 22 is_stmt 0 view .LVU1041
 3467 0016 0122     		movs	r2, #1
 3468 0018 83F8102A 		strb	r2, [r3, #2576]
 3469              		.loc 1 372 5 is_stmt 1 view .LVU1042
 3470              		.loc 1 372 29 is_stmt 0 view .LVU1043
 3471 001c 2560     		str	r5, [r4]	@ float
 373:Polyphony.cpp **** 
 374:Polyphony.cpp ****     if (percussive_engine) {
 3472              		.loc 1 374 5 is_stmt 1 view .LVU1044
 3473 001e 11B1     		cbz	r1, .L158
 375:Polyphony.cpp ****         modulations_[0].trigger_patched = true; 
 3474              		.loc 1 375 9 view .LVU1045
 3475              		.loc 1 375 41 is_stmt 0 view .LVU1046
 3476 0020 83F88328 		strb	r2, [r3, #2179]
 3477              	.LVL197:
 3478              	.L157:
 376:Polyphony.cpp ****     } else {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 130


 377:Polyphony.cpp ****         modulations_[0].trigger_patched = false;
 378:Polyphony.cpp ****         voice_envelopes_[0].Trigger(); 
 379:Polyphony.cpp ****     }
 380:Polyphony.cpp **** }
 3479              		.loc 1 380 1 view .LVU1047
 3480 0024 38BD     		pop	{r3, r4, r5, pc}
 3481              	.LVL198:
 3482              	.L158:
 377:Polyphony.cpp ****         voice_envelopes_[0].Trigger(); 
 3483              		.loc 1 377 9 is_stmt 1 view .LVU1048
 378:Polyphony.cpp ****     }
 3484              		.loc 1 378 36 is_stmt 0 view .LVU1049
 3485 0026 00F56450 		add	r0, r0, #14592
 3486              	.LVL199:
 377:Polyphony.cpp ****         voice_envelopes_[0].Trigger(); 
 3487              		.loc 1 377 41 view .LVU1050
 3488 002a 83F88318 		strb	r1, [r3, #2179]
 378:Polyphony.cpp ****     }
 3489              		.loc 1 378 9 is_stmt 1 view .LVU1051
 378:Polyphony.cpp ****     }
 3490              		.loc 1 378 36 is_stmt 0 view .LVU1052
 3491 002e FFF7FEFF 		bl	_ZN13VoiceEnvelope7TriggerEv
 3492              	.LVL200:
 3493              		.loc 1 380 1 view .LVU1053
 3494 0032 F7E7     		b	.L157
 3495              		.cfi_endproc
 3496              	.LFE5821:
 3498              		.section	.text._ZN15PolyphonyEngine16FindVoiceForNoteEfibi,"ax",%progbits
 3499              		.align	1
 3500              		.global	_ZN15PolyphonyEngine16FindVoiceForNoteEfibi
 3501              		.syntax unified
 3502              		.thumb
 3503              		.thumb_func
 3505              	_ZN15PolyphonyEngine16FindVoiceForNoteEfibi:
 3506              	.LVL201:
 3507              	.LFB5822:
 381:Polyphony.cpp **** 
 382:Polyphony.cpp **** int PolyphonyEngine::FindVoiceForNote(float note, int engine_index, bool poly_mode, int max_voices)
 3508              		.loc 1 382 101 is_stmt 1 view -0
 3509              		.cfi_startproc
 3510              		@ args = 0, pretend = 0, frame = 0
 3511              		@ frame_needed = 0, uses_anonymous_args = 0
 383:Polyphony.cpp ****     if (poly_mode) {
 3512              		.loc 1 383 5 view .LVU1055
 382:Polyphony.cpp ****     if (poly_mode) {
 3513              		.loc 1 382 101 is_stmt 0 view .LVU1056
 3514 0000 10B5     		push	{r4, lr}
 3515              		.cfi_def_cfa_offset 8
 3516              		.cfi_offset 4, -8
 3517              		.cfi_offset 14, -4
 3518              	.LBB1600:
 3519              		.loc 1 383 5 view .LVU1057
 3520 0002 DAB1     		cbz	r2, .L161
 3521 0004 00F56851 		add	r1, r0, #14848
 3522              	.LVL202:
 3523              		.loc 1 383 5 view .LVU1058
 3524 0008 00F56852 		add	r2, r0, #14848
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 131


 3525              	.LVL203:
 3526              	.LBB1601:
 384:Polyphony.cpp ****         for (int i = 0; i < max_voices; ++i) {
 3527              		.loc 1 384 18 view .LVU1059
 3528 000c 0020     		movs	r0, #0
 3529              	.LVL204:
 3530              		.loc 1 384 18 view .LVU1060
 3531 000e 1431     		adds	r1, r1, #20
 3532              	.LVL205:
 3533              		.loc 1 384 18 view .LVU1061
 3534 0010 1032     		adds	r2, r2, #16
 3535              	.LVL206:
 3536              	.L164:
 3537              		.loc 1 384 27 is_stmt 1 discriminator 1 view .LVU1062
 3538 0012 9842     		cmp	r0, r3
 3539 0014 2ADA     		bge	.L166
 385:Polyphony.cpp ****             if (voice_active_[i] && fabsf(voice_note_[i] - note) < 0.1f) {
 3540              		.loc 1 385 13 view .LVU1063
 3541              		.loc 1 385 32 is_stmt 0 view .LVU1064
 3542 0016 12F8014B 		ldrb	r4, [r2], #1	@ zero_extendqisi2
 3543              		.loc 1 385 13 view .LVU1065
 3544 001a 64B1     		cbz	r4, .L163
 3545              		.loc 1 385 58 discriminator 1 view .LVU1066
 3546 001c D1ED007A 		vldr.32	s15, [r1]
 3547              		.loc 1 385 34 discriminator 1 view .LVU1067
 3548 0020 9FED147A 		vldr.32	s14, .L171
 3549              		.loc 1 385 58 discriminator 1 view .LVU1068
 3550 0024 77EEC07A 		vsub.f32	s15, s15, s0
 3551              		.loc 1 385 42 discriminator 1 view .LVU1069
 3552 0028 F0EEE77A 		vabs.f32	s15, s15
 3553              		.loc 1 385 34 discriminator 1 view .LVU1070
 3554 002c F4EEC77A 		vcmpe.f32	s15, s14
 3555 0030 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3556 0034 19D4     		bmi	.L160
 3557              	.L163:
 384:Polyphony.cpp ****         for (int i = 0; i < max_voices; ++i) {
 3558              		.loc 1 384 9 is_stmt 1 discriminator 2 view .LVU1071
 3559 0036 0130     		adds	r0, r0, #1
 3560              	.LVL207:
 384:Polyphony.cpp ****         for (int i = 0; i < max_voices; ++i) {
 3561              		.loc 1 384 9 is_stmt 0 discriminator 2 view .LVU1072
 3562 0038 0431     		adds	r1, r1, #4
 3563 003a EAE7     		b	.L164
 3564              	.LVL208:
 3565              	.L161:
 384:Polyphony.cpp ****         for (int i = 0; i < max_voices; ++i) {
 3566              		.loc 1 384 9 discriminator 2 view .LVU1073
 3567              	.LBE1601:
 386:Polyphony.cpp ****                 return i;
 387:Polyphony.cpp ****             }
 388:Polyphony.cpp ****         }
 389:Polyphony.cpp ****     } else { 
 390:Polyphony.cpp ****         if (voice_active_[0] && fabsf(voice_note_[0] - note) < 0.1f) {
 3568              		.loc 1 390 9 is_stmt 1 view .LVU1074
 3569              		.loc 1 390 28 is_stmt 0 view .LVU1075
 3570 003c 00F54050 		add	r0, r0, #12288
 3571              	.LVL209:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 132


 3572              		.loc 1 390 9 view .LVU1076
 3573 0040 90F8103A 		ldrb	r3, [r0, #2576]	@ zero_extendqisi2
 3574              	.LVL210:
 3575              		.loc 1 390 9 view .LVU1077
 3576 0044 93B1     		cbz	r3, .L166
 3577              	.LVL211:
 3578              		.loc 1 390 9 view .LVU1078
 3579              	.LBE1600:
 3580              	.LBB1602:
 3581              	.LBI1602:
 382:Polyphony.cpp ****     if (poly_mode) {
 3582              		.loc 1 382 5 is_stmt 1 discriminator 1 view .LVU1079
 3583              	.LBB1603:
 3584              	.LBB1604:
 3585              		.loc 1 390 54 is_stmt 0 discriminator 1 view .LVU1080
 3586 0046 00F61420 		addw	r0, r0, #2580
 3587              	.LVL212:
 3588              		.loc 1 390 54 discriminator 1 view .LVU1081
 3589 004a D0ED007A 		vldr.32	s15, [r0]
 3590 004e 37EEC00A 		vsub.f32	s0, s15, s0
 3591              	.LVL213:
 3592              		.loc 1 390 30 discriminator 1 view .LVU1082
 3593 0052 DFED087A 		vldr.32	s15, .L171
 3594              		.loc 1 390 38 discriminator 1 view .LVU1083
 3595 0056 B0EEC00A 		vabs.f32	s0, s0
 3596              		.loc 1 390 30 discriminator 1 view .LVU1084
 3597 005a B4EEE70A 		vcmpe.f32	s0, s15
 3598 005e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3599 0062 54BF     		ite	pl
 3600 0064 4FF0FF30 		movpl	r0, #-1
 3601              	.LVL214:
 3602              		.loc 1 390 30 discriminator 1 view .LVU1085
 3603 0068 0020     		movmi	r0, #0
 3604              	.LVL215:
 3605              	.L160:
 3606              		.loc 1 390 30 discriminator 1 view .LVU1086
 3607              	.LBE1604:
 3608              	.LBE1603:
 3609              	.LBE1602:
 391:Polyphony.cpp ****             return 0;
 392:Polyphony.cpp ****         }
 393:Polyphony.cpp ****     }
 394:Polyphony.cpp ****     return -1;
 395:Polyphony.cpp **** }
 3610              		.loc 1 395 1 view .LVU1087
 3611 006a 10BD     		pop	{r4, pc}
 3612              	.LVL216:
 3613              	.L166:
 394:Polyphony.cpp **** }
 3614              		.loc 1 394 13 view .LVU1088
 3615 006c 4FF0FF30 		mov	r0, #-1
 3616 0070 FBE7     		b	.L160
 3617              	.L172:
 3618 0072 00BF     		.align	2
 3619              	.L171:
 3620 0074 CDCCCC3D 		.word	1036831949
 3621              		.cfi_endproc
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 133


 3622              	.LFE5822:
 3624              		.section	.text._ZN15PolyphonyEngine16HandleTouchInputEttibi,"ax",%progbits
 3625              		.align	1
 3626              		.global	_ZN15PolyphonyEngine16HandleTouchInputEttibi
 3627              		.syntax unified
 3628              		.thumb
 3629              		.thumb_func
 3631              	_ZN15PolyphonyEngine16HandleTouchInputEttibi:
 3632              	.LVL217:
 3633              	.LFB5803:
  37:Polyphony.cpp ****     bool percussive_engine = (engine_index > 7);
 3634              		.loc 1 37 169 is_stmt 1 view -0
 3635              		.cfi_startproc
 3636              		@ args = 8, pretend = 0, frame = 16
 3637              		@ frame_needed = 0, uses_anonymous_args = 0
  38:Polyphony.cpp **** 
 3638              		.loc 1 38 5 view .LVU1090
  37:Polyphony.cpp ****     bool percussive_engine = (engine_index > 7);
 3639              		.loc 1 37 169 is_stmt 0 view .LVU1091
 3640 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3641              		.cfi_def_cfa_offset 36
 3642              		.cfi_offset 4, -36
 3643              		.cfi_offset 5, -32
 3644              		.cfi_offset 6, -28
 3645              		.cfi_offset 7, -24
 3646              		.cfi_offset 8, -20
 3647              		.cfi_offset 9, -16
 3648              		.cfi_offset 10, -12
 3649              		.cfi_offset 11, -8
 3650              		.cfi_offset 14, -4
  38:Polyphony.cpp **** 
 3651              		.loc 1 38 10 view .LVU1092
 3652 0004 072B     		cmp	r3, #7
  37:Polyphony.cpp ****     bool percussive_engine = (engine_index > 7);
 3653              		.loc 1 37 169 view .LVU1093
 3654 0006 85B0     		sub	sp, sp, #20
 3655              		.cfi_def_cfa_offset 56
  37:Polyphony.cpp ****     bool percussive_engine = (engine_index > 7);
 3656              		.loc 1 37 169 view .LVU1094
 3657 0008 0446     		mov	r4, r0
 3658 000a 1F46     		mov	r7, r3
 3659 000c 9DF83880 		ldrb	r8, [sp, #56]	@ zero_extendqisi2
  38:Polyphony.cpp **** 
 3660              		.loc 1 38 10 view .LVU1095
 3661 0010 D8BF     		it	le
 3662 0012 4FF00009 		movle	r9, #0
  37:Polyphony.cpp ****     bool percussive_engine = (engine_index > 7);
 3663              		.loc 1 37 169 view .LVU1096
 3664 0016 DDF83CB0 		ldr	fp, [sp, #60]
  38:Polyphony.cpp **** 
 3665              		.loc 1 38 10 view .LVU1097
 3666 001a C8BF     		it	gt
 3667 001c 4FF00109 		movgt	r9, #1
 3668              	.LVL218:
  40:Polyphony.cpp ****         bool pad_currently_pressed = (current_touch_state_param >> i) & 1;
 3669              		.loc 1 40 5 is_stmt 1 view .LVU1098
 3670              	.LBB1605:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 134


  40:Polyphony.cpp ****         bool pad_currently_pressed = (current_touch_state_param >> i) & 1;
 3671              		.loc 1 40 23 view .LVU1099
 3672 0020 DFF808A1 		ldr	r10, .L194+4
  40:Polyphony.cpp ****         bool pad_currently_pressed = (current_touch_state_param >> i) & 1;
 3673              		.loc 1 40 14 is_stmt 0 view .LVU1100
 3674 0024 0025     		movs	r5, #0
 3675              	.LBE1605:
  37:Polyphony.cpp ****     bool percussive_engine = (engine_index > 7);
 3676              		.loc 1 37 169 view .LVU1101
 3677 0026 CDE90112 		strd	r1, r2, [sp, #4]
 3678              	.LVL219:
 3679              	.L179:
 3680              	.LBB1624:
 3681              	.LBB1606:
  41:Polyphony.cpp ****         bool pad_was_pressed = (last_touch_state_param >> i) & 1; 
 3682              		.loc 1 41 9 is_stmt 1 view .LVU1102
  42:Polyphony.cpp ****         float note_for_pad = PolyphonyEngine::kTouchMidiNotes_[i];
 3683              		.loc 1 42 9 view .LVU1103
  41:Polyphony.cpp ****         bool pad_was_pressed = (last_touch_state_param >> i) & 1; 
 3684              		.loc 1 41 65 is_stmt 0 view .LVU1104
 3685 002a 019A     		ldr	r2, [sp, #4]
  42:Polyphony.cpp ****         float note_for_pad = PolyphonyEngine::kTouchMidiNotes_[i];
 3686              		.loc 1 42 56 view .LVU1105
 3687 002c 029B     		ldr	r3, [sp, #8]
  41:Polyphony.cpp ****         bool pad_was_pressed = (last_touch_state_param >> i) & 1; 
 3688              		.loc 1 41 65 view .LVU1106
 3689 002e 42FA05F6 		asr	r6, r2, r5
  43:Polyphony.cpp **** 
 3690              		.loc 1 43 15 view .LVU1107
 3691 0032 BAEC010A 		vldmia.32	r10!, {s0}
  42:Polyphony.cpp ****         float note_for_pad = PolyphonyEngine::kTouchMidiNotes_[i];
 3692              		.loc 1 42 56 view .LVU1108
 3693 0036 2B41     		asrs	r3, r3, r5
 3694              	.LBB1607:
  45:Polyphony.cpp ****             if (poly_mode) {
 3695              		.loc 1 45 9 view .LVU1109
 3696 0038 16F00106 		ands	r6, r6, #1
 3697              	.LBE1607:
  42:Polyphony.cpp ****         float note_for_pad = PolyphonyEngine::kTouchMidiNotes_[i];
 3698              		.loc 1 42 62 view .LVU1110
 3699 003c 03F00103 		and	r3, r3, #1
 3700              	.LVL220:
  43:Polyphony.cpp **** 
 3701              		.loc 1 43 9 is_stmt 1 view .LVU1111
  45:Polyphony.cpp ****             if (poly_mode) {
 3702              		.loc 1 45 9 view .LVU1112
 3703              	.LBB1615:
 3704 0040 32D0     		beq	.L174
  45:Polyphony.cpp ****             if (poly_mode) {
 3705              		.loc 1 45 35 is_stmt 0 discriminator 1 view .LVU1113
 3706 0042 33BB     		cbnz	r3, .L175
 3707              	.LBE1615:
 3708              	.LBE1606:
 3709              	.LBE1624:
  46:Polyphony.cpp ****                 int voice_idx = FindFreeVoice(effective_num_voices); 
 3710              		.loc 1 46 13 is_stmt 1 view .LVU1114
 3711              	.LBB1625:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 135


 3712              	.LBB1620:
 3713              	.LBB1616:
 3714              	.LBB1608:
 3715 0044 B8F1000F 		cmp	r8, #0
 3716 0048 29D0     		beq	.L176
 3717              	.LBB1609:
  47:Polyphony.cpp ****                 if (voice_idx != -1) {
 3718              		.loc 1 47 17 view .LVU1115
  47:Polyphony.cpp ****                 if (voice_idx != -1) {
 3719              		.loc 1 47 46 is_stmt 0 view .LVU1116
 3720 004a 5946     		mov	r1, fp
 3721 004c 2046     		mov	r0, r4
 3722 004e FFF7FEFF 		bl	_ZN15PolyphonyEngine13FindFreeVoiceEi
 3723              	.LVL221:
  48:Polyphony.cpp ****                     voice_note_[voice_idx] = note_for_pad;
 3724              		.loc 1 48 17 is_stmt 1 view .LVU1117
 3725 0052 411C     		adds	r1, r0, #1
 3726 0054 1DD0     		beq	.L175
  49:Polyphony.cpp ****                     voice_active_[voice_idx] = true;
 3727              		.loc 1 49 21 view .LVU1118
  49:Polyphony.cpp ****                     voice_active_[voice_idx] = true;
 3728              		.loc 1 49 44 is_stmt 0 view .LVU1119
 3729 0056 00F68463 		addw	r3, r0, #3716
  50:Polyphony.cpp ****                     modulations_[voice_idx].trigger = 1.0f; 
 3730              		.loc 1 50 46 view .LVU1120
 3731 005a 2218     		adds	r2, r4, r0
 3732 005c 0121     		movs	r1, #1
  49:Polyphony.cpp ****                     voice_active_[voice_idx] = true;
 3733              		.loc 1 49 44 view .LVU1121
 3734 005e 04EB8303 		add	r3, r4, r3, lsl #2
 3735 0062 83ED010A 		vstr.32	s0, [r3, #4]
  50:Polyphony.cpp ****                     modulations_[voice_idx].trigger = 1.0f; 
 3736              		.loc 1 50 21 is_stmt 1 view .LVU1122
  50:Polyphony.cpp ****                     modulations_[voice_idx].trigger = 1.0f; 
 3737              		.loc 1 50 46 is_stmt 0 view .LVU1123
 3738 0066 43F61023 		movw	r3, #14864
 3739 006a D154     		strb	r1, [r2, r3]
  51:Polyphony.cpp ****                     if (percussive_engine) {
 3740              		.loc 1 51 21 is_stmt 1 view .LVU1124
  51:Polyphony.cpp ****                     if (percussive_engine) {
 3741              		.loc 1 51 53 is_stmt 0 view .LVU1125
 3742 006c 2823     		movs	r3, #40
 3743 006e 4FF07E51 		mov	r1, #1065353216
 3744 0072 03FB0043 		mla	r3, r3, r0, r4
 3745 0076 03F56152 		add	r2, r3, #14400
 3746 007a 9163     		str	r1, [r2, #56]	@ float
  52:Polyphony.cpp ****                         modulations_[voice_idx].trigger_patched = true;
 3747              		.loc 1 52 21 is_stmt 1 view .LVU1126
 3748 007c 43F68302 		movw	r2, #14467
 3749 0080 03F80290 		strb	r9, [r3, r2]
  57:Polyphony.cpp ****                 }
 3750              		.loc 1 57 21 view .LVU1127
  57:Polyphony.cpp ****                 }
 3751              		.loc 1 57 56 is_stmt 0 view .LVU1128
 3752 0084 4423     		movs	r3, #68
 3753 0086 03FB0040 		mla	r0, r3, r0, r4
 3754              	.LVL222:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 136


  57:Polyphony.cpp ****                 }
 3755              		.loc 1 57 56 view .LVU1129
 3756 008a 00F56450 		add	r0, r0, #14592
 3757 008e FFF7FEFF 		bl	_ZN13VoiceEnvelope7TriggerEv
 3758              	.LVL223:
 3759              	.L175:
  57:Polyphony.cpp ****                 }
 3760              		.loc 1 57 56 view .LVU1130
 3761              	.LBE1609:
 3762              	.LBE1608:
 3763              	.LBE1616:
 3764              	.LBE1620:
  40:Polyphony.cpp ****         bool pad_currently_pressed = (current_touch_state_param >> i) & 1;
 3765              		.loc 1 40 5 is_stmt 1 discriminator 2 view .LVU1131
 3766 0092 0135     		adds	r5, r5, #1
 3767              	.LVL224:
  40:Polyphony.cpp ****         bool pad_currently_pressed = (current_touch_state_param >> i) & 1;
 3768              		.loc 1 40 23 discriminator 2 view .LVU1132
 3769 0094 0C2D     		cmp	r5, #12
 3770 0096 C8D1     		bne	.L179
 3771              	.LBE1625:
  79:Polyphony.cpp **** 
 3772              		.loc 1 79 1 is_stmt 0 view .LVU1133
 3773 0098 05B0     		add	sp, sp, #20
 3774              		.cfi_remember_state
 3775              		.cfi_def_cfa_offset 36
 3776              		@ sp needed
 3777 009a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3778              	.LVL225:
 3779              	.L176:
 3780              		.cfi_restore_state
 3781              	.LBB1626:
 3782              	.LBB1621:
 3783              	.LBB1617:
 3784              	.LBB1610:
  60:Polyphony.cpp ****             }
 3785              		.loc 1 60 17 is_stmt 1 view .LVU1134
  60:Polyphony.cpp ****             }
 3786              		.loc 1 60 31 is_stmt 0 view .LVU1135
 3787 009e 4946     		mov	r1, r9
 3788 00a0 2046     		mov	r0, r4
 3789 00a2 FFF7FEFF 		bl	_ZN15PolyphonyEngine14AssignMonoNoteEfb
 3790              	.LVL226:
  60:Polyphony.cpp ****             }
 3791              		.loc 1 60 31 view .LVU1136
 3792 00a6 F4E7     		b	.L175
 3793              	.LVL227:
 3794              	.L174:
  60:Polyphony.cpp ****             }
 3795              		.loc 1 60 31 view .LVU1137
 3796              	.LBE1610:
 3797              	.LBE1617:
 3798              	.LBE1621:
 3799              	.LBE1626:
  62:Polyphony.cpp ****             if (poly_mode) {
 3800              		.loc 1 62 16 is_stmt 1 discriminator 1 view .LVU1138
 3801              	.LBB1627:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 137


 3802              	.LBB1622:
 3803              	.LBB1618:
 3804              	.LBB1611:
  62:Polyphony.cpp ****             if (poly_mode) {
 3805              		.loc 1 62 43 is_stmt 0 discriminator 1 view .LVU1139
 3806 00a8 002B     		cmp	r3, #0
 3807 00aa F2D0     		beq	.L175
 3808              	.LBE1611:
 3809              	.LBE1618:
 3810              	.LBE1622:
 3811              	.LBE1627:
  63:Polyphony.cpp ****                  int voice_idx = FindVoiceForNote(note_for_pad, engine_index, poly_mode, effective_
 3812              		.loc 1 63 13 is_stmt 1 view .LVU1140
 3813              	.LBB1628:
 3814              	.LBB1623:
 3815              	.LBB1619:
 3816              	.LBB1614:
 3817              	.LBB1612:
 3818 00ac B8F1000F 		cmp	r8, #0
 3819 00b0 1CD0     		beq	.L177
 3820              	.LBB1613:
  64:Polyphony.cpp ****                  if (voice_idx != -1) {
 3821              		.loc 1 64 18 view .LVU1141
  64:Polyphony.cpp ****                  if (voice_idx != -1) {
 3822              		.loc 1 64 50 is_stmt 0 view .LVU1142
 3823 00b2 5B46     		mov	r3, fp
 3824              	.LVL228:
  64:Polyphony.cpp ****                  if (voice_idx != -1) {
 3825              		.loc 1 64 50 view .LVU1143
 3826 00b4 0122     		movs	r2, #1
 3827 00b6 3946     		mov	r1, r7
 3828 00b8 2046     		mov	r0, r4
 3829 00ba FFF7FEFF 		bl	_ZN15PolyphonyEngine16FindVoiceForNoteEfibi
 3830              	.LVL229:
  65:Polyphony.cpp ****                      voice_active_[voice_idx] = false; 
 3831              		.loc 1 65 18 view .LVU1144
 3832 00be 421C     		adds	r2, r0, #1
  64:Polyphony.cpp ****                  if (voice_idx != -1) {
 3833              		.loc 1 64 50 view .LVU1145
 3834 00c0 0346     		mov	r3, r0
 3835              	.LVL230:
  65:Polyphony.cpp ****                      voice_active_[voice_idx] = false; 
 3836              		.loc 1 65 18 is_stmt 1 view .LVU1146
 3837 00c2 E6D0     		beq	.L175
  66:Polyphony.cpp ****                      voice_envelopes_[voice_idx].Release(); 
 3838              		.loc 1 66 22 view .LVU1147
  66:Polyphony.cpp ****                      voice_envelopes_[voice_idx].Release(); 
 3839              		.loc 1 66 47 is_stmt 0 view .LVU1148
 3840 00c4 2118     		adds	r1, r4, r0
  67:Polyphony.cpp ****                      modulations_[voice_idx].trigger_patched = false; 
 3841              		.loc 1 67 57 view .LVU1149
 3842 00c6 4420     		movs	r0, #68
 3843              	.LVL231:
  66:Polyphony.cpp ****                      voice_envelopes_[voice_idx].Release(); 
 3844              		.loc 1 66 47 view .LVU1150
 3845 00c8 43F61022 		movw	r2, #14864
  67:Polyphony.cpp ****                      modulations_[voice_idx].trigger_patched = false; 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 138


 3846              		.loc 1 67 57 view .LVU1151
 3847 00cc 0393     		str	r3, [sp, #12]
 3848 00ce 00FB0340 		mla	r0, r0, r3, r4
  66:Polyphony.cpp ****                      voice_envelopes_[voice_idx].Release(); 
 3849              		.loc 1 66 47 view .LVU1152
 3850 00d2 8E54     		strb	r6, [r1, r2]
  67:Polyphony.cpp ****                      modulations_[voice_idx].trigger_patched = false; 
 3851              		.loc 1 67 22 is_stmt 1 view .LVU1153
  67:Polyphony.cpp ****                      modulations_[voice_idx].trigger_patched = false; 
 3852              		.loc 1 67 57 is_stmt 0 view .LVU1154
 3853 00d4 00F56450 		add	r0, r0, #14592
 3854 00d8 FFF7FEFF 		bl	_ZN13VoiceEnvelope7ReleaseEv
 3855              	.LVL232:
  68:Polyphony.cpp ****                  }
 3856              		.loc 1 68 22 is_stmt 1 view .LVU1155
  68:Polyphony.cpp ****                  }
 3857              		.loc 1 68 62 is_stmt 0 view .LVU1156
 3858 00dc 2820     		movs	r0, #40
 3859 00de 039B     		ldr	r3, [sp, #12]
 3860 00e0 43F68302 		movw	r2, #14467
 3861 00e4 00FB0343 		mla	r3, r0, r3, r4
 3862 00e8 9E54     		strb	r6, [r3, r2]
 3863 00ea D2E7     		b	.L175
 3864              	.LVL233:
 3865              	.L177:
  68:Polyphony.cpp ****                  }
 3866              		.loc 1 68 62 view .LVU1157
 3867              	.LBE1613:
  71:Polyphony.cpp ****                     voice_active_[0] = false; 
 3868              		.loc 1 71 17 is_stmt 1 view .LVU1158
  71:Polyphony.cpp ****                     voice_active_[0] = false; 
 3869              		.loc 1 71 36 is_stmt 0 view .LVU1159
 3870 00ec 04F54056 		add	r6, r4, #12288
  71:Polyphony.cpp ****                     voice_active_[0] = false; 
 3871              		.loc 1 71 17 view .LVU1160
 3872 00f0 96F8103A 		ldrb	r3, [r6, #2576]	@ zero_extendqisi2
 3873              	.LVL234:
  71:Polyphony.cpp ****                     voice_active_[0] = false; 
 3874              		.loc 1 71 17 view .LVU1161
 3875 00f4 002B     		cmp	r3, #0
 3876 00f6 CCD0     		beq	.L175
  71:Polyphony.cpp ****                     voice_active_[0] = false; 
 3877              		.loc 1 71 60 discriminator 1 view .LVU1162
 3878 00f8 06F61423 		addw	r3, r6, #2580
  71:Polyphony.cpp ****                     voice_active_[0] = false; 
 3879              		.loc 1 71 38 discriminator 1 view .LVU1163
 3880 00fc 9FED0A7A 		vldr.32	s14, .L194
  71:Polyphony.cpp ****                     voice_active_[0] = false; 
 3881              		.loc 1 71 62 discriminator 1 view .LVU1164
 3882 0100 D3ED007A 		vldr.32	s15, [r3]
 3883 0104 77EEC07A 		vsub.f32	s15, s15, s0
  71:Polyphony.cpp ****                     voice_active_[0] = false; 
 3884              		.loc 1 71 46 discriminator 1 view .LVU1165
 3885 0108 F0EEE77A 		vabs.f32	s15, s15
  71:Polyphony.cpp ****                     voice_active_[0] = false; 
 3886              		.loc 1 71 38 discriminator 1 view .LVU1166
 3887 010c F4EEC77A 		vcmpe.f32	s15, s14
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 139


 3888 0110 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3889 0114 BDD5     		bpl	.L175
  72:Polyphony.cpp ****                     voice_envelopes_[0].Release();
 3890              		.loc 1 72 21 is_stmt 1 view .LVU1167
  73:Polyphony.cpp ****                     modulations_[0].trigger_patched = false;
 3891              		.loc 1 73 48 is_stmt 0 view .LVU1168
 3892 0116 04F56450 		add	r0, r4, #14592
  72:Polyphony.cpp ****                     voice_envelopes_[0].Release();
 3893              		.loc 1 72 38 view .LVU1169
 3894 011a 86F8108A 		strb	r8, [r6, #2576]
  73:Polyphony.cpp ****                     modulations_[0].trigger_patched = false;
 3895              		.loc 1 73 21 is_stmt 1 view .LVU1170
  73:Polyphony.cpp ****                     modulations_[0].trigger_patched = false;
 3896              		.loc 1 73 48 is_stmt 0 view .LVU1171
 3897 011e FFF7FEFF 		bl	_ZN13VoiceEnvelope7ReleaseEv
 3898              	.LVL235:
  74:Polyphony.cpp ****                 }
 3899              		.loc 1 74 21 is_stmt 1 view .LVU1172
  74:Polyphony.cpp ****                 }
 3900              		.loc 1 74 53 is_stmt 0 view .LVU1173
 3901 0122 86F88388 		strb	r8, [r6, #2179]
 3902 0126 B4E7     		b	.L175
 3903              	.L195:
 3904              		.align	2
 3905              	.L194:
 3906 0128 CDCCCC3D 		.word	1036831949
 3907 012c 00000000 		.word	.LANCHOR0
 3908              	.LBE1612:
 3909              	.LBE1614:
 3910              	.LBE1619:
 3911              	.LBE1623:
 3912              	.LBE1628:
 3913              		.cfi_endproc
 3914              	.LFE5803:
 3916              		.section	.text._ZN15PolyphonyEngine15TriggerArpVoiceEii,"ax",%progbits
 3917              		.align	1
 3918              		.global	_ZN15PolyphonyEngine15TriggerArpVoiceEii
 3919              		.syntax unified
 3920              		.thumb
 3921              		.thumb_func
 3923              	_ZN15PolyphonyEngine15TriggerArpVoiceEii:
 3924              	.LVL236:
 3925              	.LFB5823:
 396:Polyphony.cpp **** 
 397:Polyphony.cpp **** void PolyphonyEngine::TriggerArpVoice(int pad_idx, int current_engine_index_val) {
 3926              		.loc 1 397 82 is_stmt 1 view -0
 3927              		.cfi_startproc
 3928              		@ args = 0, pretend = 0, frame = 32
 3929              		@ frame_needed = 0, uses_anonymous_args = 0
 398:Polyphony.cpp ****     if (pad_idx < 0 || pad_idx >= 12) return;
 3930              		.loc 1 398 5 view .LVU1175
 3931 0000 0B29     		cmp	r1, #11
 397:Polyphony.cpp ****     if (pad_idx < 0 || pad_idx >= 12) return;
 3932              		.loc 1 397 82 is_stmt 0 view .LVU1176
 3933 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 3934              		.cfi_def_cfa_offset 20
 3935              		.cfi_offset 4, -20
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 140


 3936              		.cfi_offset 5, -16
 3937              		.cfi_offset 6, -12
 3938              		.cfi_offset 7, -8
 3939              		.cfi_offset 14, -4
 3940 0004 1646     		mov	r6, r2
 3941 0006 89B0     		sub	sp, sp, #36
 3942              		.cfi_def_cfa_offset 56
 3943              		.loc 1 398 5 view .LVU1177
 3944 0008 2ED8     		bhi	.L196
 399:Polyphony.cpp **** 
 400:Polyphony.cpp ****     float note_to_play = kTouchMidiNotes_[pad_idx];
 3945              		.loc 1 400 5 is_stmt 1 view .LVU1178
 3946              		.loc 1 400 11 is_stmt 0 view .LVU1179
 3947 000a 184B     		ldr	r3, .L199
 401:Polyphony.cpp ****     bool percussive = (current_engine_index_val > 7);
 402:Polyphony.cpp **** 
 403:Polyphony.cpp ****     voice_note_[0] = note_to_play;
 3948              		.loc 1 403 20 view .LVU1180
 3949 000c 00F54055 		add	r5, r0, #12288
 404:Polyphony.cpp ****     voice_active_[0] = true;
 3950              		.loc 1 404 22 view .LVU1181
 3951 0010 0127     		movs	r7, #1
 405:Polyphony.cpp **** 
 406:Polyphony.cpp ****     PatchParams patch_params;
 407:Polyphony.cpp ****     patch_params.engine_idx = current_engine_index_val;
 3952              		.loc 1 407 29 view .LVU1182
 3953 0012 0096     		str	r6, [sp]
 400:Polyphony.cpp ****     bool percussive = (current_engine_index_val > 7);
 3954              		.loc 1 400 11 view .LVU1183
 3955 0014 03EB8101 		add	r1, r3, r1, lsl #2
 3956              	.LVL237:
 403:Polyphony.cpp ****     voice_active_[0] = true;
 3957              		.loc 1 403 20 view .LVU1184
 3958 0018 05F61422 		addw	r2, r5, #2580
 3959              	.LVL238:
 408:Polyphony.cpp ****     patch_params.note = note_to_play;
 409:Polyphony.cpp ****     patch_params.global_pitch_offset = 0.0f;
 410:Polyphony.cpp ****     patch_params.harmonics = 0.5f;  // Default values
 411:Polyphony.cpp ****     patch_params.timbre = 0.5f;
 412:Polyphony.cpp ****     patch_params.morph = 0.5f;
 413:Polyphony.cpp ****     patch_params.arp_on = true;
 3960              		.loc 1 413 25 view .LVU1185
 3961 001c 8DF81870 		strb	r7, [sp, #24]
 400:Polyphony.cpp ****     bool percussive = (current_engine_index_val > 7);
 3962              		.loc 1 400 11 view .LVU1186
 3963 0020 0B68     		ldr	r3, [r1]	@ float
 3964              	.LVL239:
 401:Polyphony.cpp **** 
 3965              		.loc 1 401 5 is_stmt 1 view .LVU1187
 403:Polyphony.cpp ****     voice_active_[0] = true;
 3966              		.loc 1 403 5 view .LVU1188
 414:Polyphony.cpp ****     patch_params.decay = env_release_val;  // wire knob to arp decay
 415:Polyphony.cpp ****     
 416:Polyphony.cpp ****     UpdatePatchParams(patches_[0], patch_params);
 3967              		.loc 1 416 22 is_stmt 0 view .LVU1189
 3968 0022 00F55F51 		add	r1, r0, #14272
 403:Polyphony.cpp ****     voice_active_[0] = true;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 141


 3969              		.loc 1 403 20 view .LVU1190
 3970 0026 1360     		str	r3, [r2]	@ float
 404:Polyphony.cpp **** 
 3971              		.loc 1 404 5 is_stmt 1 view .LVU1191
 3972              		.loc 1 416 22 is_stmt 0 view .LVU1192
 3973 0028 6A46     		mov	r2, sp
 408:Polyphony.cpp ****     patch_params.global_pitch_offset = 0.0f;
 3974              		.loc 1 408 23 view .LVU1193
 3975 002a 0193     		str	r3, [sp, #4]	@ float
 409:Polyphony.cpp ****     patch_params.harmonics = 0.5f;  // Default values
 3976              		.loc 1 409 38 view .LVU1194
 3977 002c 0023     		movs	r3, #0
 3978              	.LVL240:
 404:Polyphony.cpp **** 
 3979              		.loc 1 404 22 view .LVU1195
 3980 002e 85F8107A 		strb	r7, [r5, #2576]
 406:Polyphony.cpp ****     patch_params.engine_idx = current_engine_index_val;
 3981              		.loc 1 406 5 is_stmt 1 view .LVU1196
 407:Polyphony.cpp ****     patch_params.note = note_to_play;
 3982              		.loc 1 407 5 view .LVU1197
 408:Polyphony.cpp ****     patch_params.global_pitch_offset = 0.0f;
 3983              		.loc 1 408 5 view .LVU1198
 409:Polyphony.cpp ****     patch_params.harmonics = 0.5f;  // Default values
 3984              		.loc 1 409 5 view .LVU1199
 409:Polyphony.cpp ****     patch_params.harmonics = 0.5f;  // Default values
 3985              		.loc 1 409 38 is_stmt 0 view .LVU1200
 3986 0032 0293     		str	r3, [sp, #8]	@ float
 410:Polyphony.cpp ****     patch_params.timbre = 0.5f;
 3987              		.loc 1 410 5 is_stmt 1 view .LVU1201
 410:Polyphony.cpp ****     patch_params.timbre = 0.5f;
 3988              		.loc 1 410 28 is_stmt 0 view .LVU1202
 3989 0034 4FF07C53 		mov	r3, #1056964608
 3990 0038 0393     		str	r3, [sp, #12]	@ float
 411:Polyphony.cpp ****     patch_params.morph = 0.5f;
 3991              		.loc 1 411 5 is_stmt 1 view .LVU1203
 411:Polyphony.cpp ****     patch_params.morph = 0.5f;
 3992              		.loc 1 411 25 is_stmt 0 view .LVU1204
 3993 003a 0493     		str	r3, [sp, #16]	@ float
 412:Polyphony.cpp ****     patch_params.arp_on = true;
 3994              		.loc 1 412 5 is_stmt 1 view .LVU1205
 412:Polyphony.cpp ****     patch_params.arp_on = true;
 3995              		.loc 1 412 24 is_stmt 0 view .LVU1206
 3996 003c 0593     		str	r3, [sp, #20]	@ float
 413:Polyphony.cpp ****     patch_params.decay = env_release_val;  // wire knob to arp decay
 3997              		.loc 1 413 5 is_stmt 1 view .LVU1207
 414:Polyphony.cpp ****     
 3998              		.loc 1 414 5 view .LVU1208
 414:Polyphony.cpp ****     
 3999              		.loc 1 414 24 is_stmt 0 view .LVU1209
 4000 003e 0C4B     		ldr	r3, .L199+4
 4001 0040 1B68     		ldr	r3, [r3]	@ float
 4002 0042 0793     		str	r3, [sp, #28]	@ float
 4003              		.loc 1 416 5 is_stmt 1 view .LVU1210
 4004              		.loc 1 416 22 is_stmt 0 view .LVU1211
 4005 0044 FFF7FEFF 		bl	_ZN15PolyphonyEngine17UpdatePatchParamsERN6plaits5PatchERK11PatchParams
 4006              	.LVL241:
 417:Polyphony.cpp **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 142


 418:Polyphony.cpp ****     modulations_[0].trigger = 1.0f;
 4007              		.loc 1 418 5 is_stmt 1 view .LVU1212
 4008              		.loc 1 418 29 is_stmt 0 view .LVU1213
 4009 0048 05F67803 		addw	r3, r5, #2168
 4010 004c 4FF07E52 		mov	r2, #1065353216
 419:Polyphony.cpp ****     modulations_[0].trigger_patched = true;
 420:Polyphony.cpp **** 
 421:Polyphony.cpp ****     if (!percussive) {
 4011              		.loc 1 421 5 view .LVU1214
 4012 0050 072E     		cmp	r6, #7
 418:Polyphony.cpp ****     modulations_[0].trigger_patched = true;
 4013              		.loc 1 418 29 view .LVU1215
 4014 0052 1A60     		str	r2, [r3]	@ float
 419:Polyphony.cpp ****     modulations_[0].trigger_patched = true;
 4015              		.loc 1 419 5 is_stmt 1 view .LVU1216
 419:Polyphony.cpp ****     modulations_[0].trigger_patched = true;
 4016              		.loc 1 419 37 is_stmt 0 view .LVU1217
 4017 0054 85F88378 		strb	r7, [r5, #2179]
 4018              		.loc 1 421 5 is_stmt 1 view .LVU1218
 4019 0058 06DC     		bgt	.L196
 422:Polyphony.cpp ****         voice_envelopes_[0].SetMode(VoiceEnvelope::MODE_AR);
 4020              		.loc 1 422 9 view .LVU1219
 4021              	.LVL242:
 4022              	.LBB1629:
 4023              	.LBI1629:
  43:VoiceEnvelope.h ****         mode = new_mode;
 4024              		.loc 3 43 10 view .LVU1220
 4025              	.LBB1630:
  44:VoiceEnvelope.h ****     }
 4026              		.loc 3 44 9 view .LVU1221
  44:VoiceEnvelope.h ****     }
 4027              		.loc 3 44 14 is_stmt 0 view .LVU1222
 4028 005a 0023     		movs	r3, #0
 4029              	.LBE1630:
 4030              	.LBE1629:
 423:Polyphony.cpp ****         voice_envelopes_[0].Trigger();
 4031              		.loc 1 423 36 view .LVU1223
 4032 005c 00F56450 		add	r0, r0, #14592
 4033              	.LVL243:
 4034              	.LBB1632:
 4035              	.LBB1631:
  44:VoiceEnvelope.h ****     }
 4036              		.loc 3 44 14 view .LVU1224
 4037 0060 85F80139 		strb	r3, [r5, #2305]
 4038              	.LVL244:
  44:VoiceEnvelope.h ****     }
 4039              		.loc 3 44 14 view .LVU1225
 4040              	.LBE1631:
 4041              	.LBE1632:
 4042              		.loc 1 423 9 is_stmt 1 view .LVU1226
 4043              		.loc 1 423 36 is_stmt 0 view .LVU1227
 4044 0064 FFF7FEFF 		bl	_ZN13VoiceEnvelope7TriggerEv
 4045              	.LVL245:
 4046              	.L196:
 424:Polyphony.cpp ****     }
 425:Polyphony.cpp **** }
 4047              		.loc 1 425 1 view .LVU1228
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 143


 4048 0068 09B0     		add	sp, sp, #36
 4049              		.cfi_def_cfa_offset 20
 4050              		@ sp needed
 4051 006a F0BD     		pop	{r4, r5, r6, r7, pc}
 4052              	.LVL246:
 4053              	.L200:
 4054              		.loc 1 425 1 view .LVU1229
 4055              		.align	2
 4056              	.L199:
 4057 006c 00000000 		.word	.LANCHOR0
 4058 0070 00000000 		.word	env_release_val
 4059              		.cfi_endproc
 4060              	.LFE5823:
 4062              		.section	.text._ZNK15PolyphonyEngine16IsAnyVoiceActiveEv,"ax",%progbits
 4063              		.align	1
 4064              		.global	_ZNK15PolyphonyEngine16IsAnyVoiceActiveEv
 4065              		.syntax unified
 4066              		.thumb
 4067              		.thumb_func
 4069              	_ZNK15PolyphonyEngine16IsAnyVoiceActiveEv:
 4070              	.LVL247:
 4071              	.LFB5824:
 426:Polyphony.cpp **** 
 427:Polyphony.cpp **** bool PolyphonyEngine::IsAnyVoiceActive() const {
 4072              		.loc 1 427 48 is_stmt 1 view -0
 4073              		.cfi_startproc
 4074              		@ args = 0, pretend = 0, frame = 0
 4075              		@ frame_needed = 0, uses_anonymous_args = 0
 4076              		@ link register save eliminated.
 428:Polyphony.cpp ****     for (int i = 0; i < NUM_VOICES; ++i) {
 4077              		.loc 1 428 5 view .LVU1231
 4078              	.LBB1633:
 4079              		.loc 1 428 23 view .LVU1232
 4080 0000 00F56852 		add	r2, r0, #14848
 4081 0004 00F56853 		add	r3, r0, #14848
 4082 0008 1032     		adds	r2, r2, #16
 4083 000a 1433     		adds	r3, r3, #20
 4084              	.LVL248:
 4085              	.L203:
 429:Polyphony.cpp ****         if (voice_active_[i]) {
 4086              		.loc 1 429 9 view .LVU1233
 4087              		.loc 1 429 28 is_stmt 0 view .LVU1234
 4088 000c 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 4089              	.LVL249:
 4090              		.loc 1 429 9 view .LVU1235
 4091 0010 08B9     		cbnz	r0, .L202
 428:Polyphony.cpp ****     for (int i = 0; i < NUM_VOICES; ++i) {
 4092              		.loc 1 428 5 is_stmt 1 discriminator 2 view .LVU1236
 4093              	.LVL250:
 428:Polyphony.cpp ****     for (int i = 0; i < NUM_VOICES; ++i) {
 4094              		.loc 1 428 23 discriminator 2 view .LVU1237
 4095 0012 9A42     		cmp	r2, r3
 4096 0014 FAD1     		bne	.L203
 4097              	.LVL251:
 4098              	.L202:
 428:Polyphony.cpp ****     for (int i = 0; i < NUM_VOICES; ++i) {
 4099              		.loc 1 428 23 is_stmt 0 discriminator 2 view .LVU1238
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 144


 4100              	.LBE1633:
 430:Polyphony.cpp ****             return true;
 431:Polyphony.cpp ****         }
 432:Polyphony.cpp ****     }
 433:Polyphony.cpp ****     return false;
 434:Polyphony.cpp **** }
 4101              		.loc 1 434 1 view .LVU1239
 4102 0016 7047     		bx	lr
 4103              		.cfi_endproc
 4104              	.LFE5824:
 4106              		.section	.text.startup._GLOBAL__sub_I_shared_buffer,"ax",%progbits
 4107              		.align	1
 4108              		.syntax unified
 4109              		.thumb
 4110              		.thumb_func
 4112              	_GLOBAL__sub_I_shared_buffer:
 4113              	.LFB6546:
 4114              		.loc 1 434 1 is_stmt 1 view -0
 4115              		.cfi_startproc
 4116              		@ args = 0, pretend = 0, frame = 0
 4117              		@ frame_needed = 0, uses_anonymous_args = 0
 4118              	.LBB1636:
 4119              	.LBI1636:
 4120              		.loc 1 434 1 view .LVU1241
 4121              	.LVL252:
 4122              		.loc 1 434 1 is_stmt 0 view .LVU1242
 4123              	.LBE1636:
 4124 0000 10B5     		push	{r4, lr}
 4125              		.cfi_def_cfa_offset 8
 4126              		.cfi_offset 4, -8
 4127              		.cfi_offset 14, -4
 4128              	.LBB1639:
 4129              	.LBB1637:
  10:Polyphony.cpp **** 
 4130              		.loc 1 10 17 view .LVU1243
 4131 0002 054C     		ldr	r4, .L206
 4132 0004 2046     		mov	r0, r4
 4133 0006 FFF7FEFF 		bl	_ZN15PolyphonyEngineC1Ev
 4134              	.LVL253:
 4135 000a 2046     		mov	r0, r4
 4136 000c 034A     		ldr	r2, .L206+4
 4137 000e 0449     		ldr	r1, .L206+8
 4138              	.LBE1637:
 4139              	.LBE1639:
 4140              		.loc 1 434 1 view .LVU1244
 4141 0010 BDE81040 		pop	{r4, lr}
 4142              		.cfi_restore 14
 4143              		.cfi_restore 4
 4144              		.cfi_def_cfa_offset 0
 4145              	.LBB1640:
 4146              	.LBB1638:
  10:Polyphony.cpp **** 
 4147              		.loc 1 10 17 view .LVU1245
 4148 0014 FFF7FEBF 		b	__aeabi_atexit
 4149              	.LVL254:
 4150              	.L207:
 4151              		.align	2
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 145


 4152              	.L206:
 4153 0018 00000000 		.word	poly_engine
 4154 001c 00000000 		.word	__dso_handle
 4155 0020 00000000 		.word	_ZN15PolyphonyEngineD1Ev
 4156              	.LBE1638:
 4157              	.LBE1640:
 4158              		.cfi_endproc
 4159              	.LFE6546:
 4161              		.section	.init_array,"aw",%init_array
 4162              		.align	2
 4163 0000 00000000 		.word	_GLOBAL__sub_I_shared_buffer(target1)
 4164              		.global	_ZN15PolyphonyEngine16kTouchMidiNotes_E
 4165              		.global	poly_engine
 4166              		.global	MAX_ENGINE_INDEX
 4167              		.global	shared_buffer
 4168              		.section	.bss.poly_engine,"aw",%nobits
 4169              		.align	2
 4172              	poly_engine:
 4173 0000 00000000 		.space	15664
 4173      00000000 
 4173      00000000 
 4173      00000000 
 4173      00000000 
 4174              		.section	.rodata.MAX_ENGINE_INDEX,"a"
 4175              		.align	2
 4178              	MAX_ENGINE_INDEX:
 4179 0000 0C000000 		.word	12
 4180              		.section	.rodata._ZN15PolyphonyEngine16kTouchMidiNotes_E,"a"
 4181              		.align	2
 4182              		.set	.LANCHOR0,. + 0
 4185              	_ZN15PolyphonyEngine16kTouchMidiNotes_E:
 4186 0000 00002042 		.word	1109393408
 4187 0004 00002442 		.word	1109655552
 4188 0008 00002C42 		.word	1110179840
 4189 000c 00003442 		.word	1110704128
 4190 0010 00003C42 		.word	1111228416
 4191 0014 00004042 		.word	1111490560
 4192 0018 00004842 		.word	1112014848
 4193 001c 00005042 		.word	1112539136
 4194 0020 00005442 		.word	1112801280
 4195 0024 00005C42 		.word	1113325568
 4196 0028 00006442 		.word	1113849856
 4197 002c 00006C42 		.word	1114374144
 4198              		.section	.sdram_bss,"aw"
 4201              	shared_buffer:
 4202 0000 00000000 		.space	262144
 4202      00000000 
 4202      00000000 
 4202      00000000 
 4202      00000000 
 4203              		.text
 4204              	.Letext0:
 4205              		.file 41 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/machine/_default_types.h"
 4206              		.file 42 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/_stdint.h"
 4207              		.file 43 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdint.h"
 4208              		.file 44 "/Library/DaisyToolchain/0.2.0/arm/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 4209              		.file 45 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cmath"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 146


 4210              		.file 46 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h"
 4211              		.file 47 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdlib"
 4212              		.file 48 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdint"
 4213              		.file 49 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/type_traits"
 4214              		.file 50 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/debug/debug.h"
 4215              		.file 51 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/arm-none-eabi/thumb/v
 4216              		.file 52 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/algorithmfwd.h"
 4217              		.file 53 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h"
 4218              		.file 54 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/exception_ptr.h"
 4219              		.file 55 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdarg"
 4220              		.file 56 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdio"
 4221              		.file 57 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstring"
 4222              		.file 58 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cwchar"
 4223              		.file 59 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/clocale"
 4224              		.file 60 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/basic_string.h"
 4225              		.file 61 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_iterator.h"
 4226              		.file 62 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/uses_allocator.h
 4227              		.file 63 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/tuple"
 4228              		.file 64 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/functional"
 4229              		.file 65 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/predefined_ops.h
 4230              		.file 66 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/_types.h"
 4231              		.file 67 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/reent.h"
 4232              		.file 68 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/lock.h"
 4233              		.file 69 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/math.h"
 4234              		.file 70 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdlib.h"
 4235              		.file 71 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/math.h"
 4236              		.file 72 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/stdlib.h"
 4237              		.file 73 "lib/libdaisy/src/daisy_core.h"
 4238              		.file 74 "lib/libdaisy/src/per/tim.h"
 4239              		.file 75 "lib/libdaisy/src/sys/system.h"
 4240              		.file 76 "lib/libdaisy/src/per/qspi.h"
 4241              		.file 77 "lib/libdaisy/src/per/dac.h"
 4242              		.file 78 "lib/libdaisy/src/per/gpio.h"
 4243              		.file 79 "lib/libdaisy/src/per/sai.h"
 4244              		.file 80 "lib/libdaisy/src/hid/audio.h"
 4245              		.file 81 "lib/libdaisy/src/per/adc.h"
 4246              		.file 82 "lib/libdaisy/src/hid/usb.h"
 4247              		.file 83 "lib/libdaisy/src/util/wav_format.h"
 4248              		.file 84 "lib/libdaisy/src/dev/sr_595.h"
 4249              		.file 85 "lib/libdaisy/src/dev/codec_ak4556.h"
 4250              		.file 86 "lib/libdaisy/src/dev/max11300.h"
 4251              		.file 87 "lib/libdaisy/src/daisy_seed.h"
 4252              		.file 88 "lib/libdaisy/src/dev/sdram.h"
 4253              		.file 89 "/Library/DaisyToolchain/0.2.0/arm/lib/gcc/arm-none-eabi/10.3.1/include/stdarg.h"
 4254              		.file 90 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdio.h"
 4255              		.file 91 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/string.h"
 4256              		.file 92 "lib/DaisySP/Source/Control/adenv.h"
 4257              		.file 93 "lib/DaisySP/Source/Utility/dsp.h"
 4258              		.file 94 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/wchar.h"
 4259              		.file 95 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/locale.h"
 4260              		.file 96 "eurorack/stmlib/stmlib.h"
 4261              		.file 97 "eurorack/stmlib/dsp/cosine_oscillator.h"
 4262              		.file 98 "eurorack/plaits/dsp/dsp.h"
 4263              		.file 99 "eurorack/plaits/dsp/oscillator/harmonic_oscillator.h"
 4264              		.file 100 "eurorack/plaits/dsp/engine/chord_engine.h"
 4265              		.file 101 "eurorack/plaits/dsp/oscillator/grainlet_oscillator.h"
 4266              		.file 102 "eurorack/plaits/dsp/noise/clocked_noise.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 147


 4267              		.file 103 "eurorack/plaits/dsp/noise/particle.h"
 4268              		.file 104 "eurorack/plaits/dsp/physical_modelling/string.h"
 4269              		.file 105 "eurorack/plaits/dsp/physical_modelling/string_voice.h"
 4270              		.file 106 "mpr121_daisy.h"
 4271              		.file 107 "Effects/BiquadFilters.h"
 4272              		.file 108 "Arpeggiator.h"
 4273              		.file 109 "Polyphony.h"
 4274              		.file 110 "Thaumazein.h"
 4275              		.file 111 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/new"
 4276              		.file 112 "<built-in>"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 148


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Polyphony.cpp
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:19     .text._ZN15PolyphonyEngineD2Ev:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:25     .text._ZN15PolyphonyEngineD2Ev:0000000000000000 _ZN15PolyphonyEngineD2Ev
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:25     .text._ZN15PolyphonyEngineD2Ev:0000000000000000 _ZN15PolyphonyEngineD1Ev
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:76     .text._ZN13VoiceEnvelope7TriggerEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:82     .text._ZN13VoiceEnvelope7TriggerEv:0000000000000000 _ZN13VoiceEnvelope7TriggerEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:181    .text._ZN13VoiceEnvelope7ReleaseEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:187    .text._ZN13VoiceEnvelope7ReleaseEv:0000000000000000 _ZN13VoiceEnvelope7ReleaseEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:266    .text._ZN13VoiceEnvelope5ResetEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:272    .text._ZN13VoiceEnvelope5ResetEv:0000000000000000 _ZN13VoiceEnvelope5ResetEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:311    .text._ZN15PolyphonyEngineC2Ev:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:317    .text._ZN15PolyphonyEngineC2Ev:0000000000000000 _ZN15PolyphonyEngineC2Ev
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:958    .text._ZN15PolyphonyEngineC2Ev:00000000000000dc $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:317    .text._ZN15PolyphonyEngineC2Ev:0000000000000000 _ZN15PolyphonyEngineC1Ev
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:977    .text._ZN15PolyphonyEngine11ResetVoicesEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:983    .text._ZN15PolyphonyEngine11ResetVoicesEv:0000000000000000 _ZN15PolyphonyEngine11ResetVoicesEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:1054   .text._ZN15PolyphonyEngine14AllocateVoicesEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:1060   .text._ZN15PolyphonyEngine14AllocateVoicesEv:0000000000000000 _ZN15PolyphonyEngine14AllocateVoicesEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:1163   .text._ZN15PolyphonyEngine14AllocateVoicesEv:0000000000000040 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:4201   .sdram_bss:0000000000000000 shared_buffer
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:1168   .text._ZN15PolyphonyEngine19InitVoiceParametersEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:1174   .text._ZN15PolyphonyEngine19InitVoiceParametersEv:0000000000000000 _ZN15PolyphonyEngine19InitVoiceParametersEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:1552   .text._ZN15PolyphonyEngine19InitVoiceParametersEv:0000000000000138 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:1562   .text._ZN15PolyphonyEngine4InitEPN5daisy9DaisySeedE:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:1568   .text._ZN15PolyphonyEngine4InitEPN5daisy9DaisySeedE:0000000000000000 _ZN15PolyphonyEngine4InitEPN5daisy9DaisySeedE
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:1608   .text._ZN15PolyphonyEngine16ProcessEnvelopesEb:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:1614   .text._ZN15PolyphonyEngine16ProcessEnvelopesEb:0000000000000000 _ZN15PolyphonyEngine16ProcessEnvelopesEb
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:1720   .text._ZN15PolyphonyEngine16ProcessEnvelopesEb:0000000000000078 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:1725   .text._ZN15PolyphonyEngine17UpdatePatchParamsERN6plaits5PatchERK11PatchParams:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:1731   .text._ZN15PolyphonyEngine17UpdatePatchParamsERN6plaits5PatchERK11PatchParams:0000000000000000 _ZN15PolyphonyEngine17UpdatePatchParamsERN6plaits5PatchERK11PatchParams
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:1793   .text._ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:1799   .text._ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff:0000000000000000 _ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:2002   .text._ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff:00000000000000ce $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:2318   .text._ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff:00000000000001fc $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:2328   .text._ZN15PolyphonyEngine17UpdateMonoTriggerERN6plaits11ModulationsERbb:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:2334   .text._ZN15PolyphonyEngine17UpdateMonoTriggerERN6plaits11ModulationsERbb:0000000000000000 _ZN15PolyphonyEngine17UpdateMonoTriggerERN6plaits11ModulationsERbb
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:2361   .text._ZN15PolyphonyEngine12SilenceVoiceEi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:2367   .text._ZN15PolyphonyEngine12SilenceVoiceEi:0000000000000000 _ZN15PolyphonyEngine12SilenceVoiceEi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:2398   .text._ZN15PolyphonyEngine14RetriggerVoiceEi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:2404   .text._ZN15PolyphonyEngine14RetriggerVoiceEi:0000000000000000 _ZN15PolyphonyEngine14RetriggerVoiceEi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:2502   .text._ZN15PolyphonyEngine15PrepVoiceParamsERKNS_16RenderParametersE:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:2508   .text._ZN15PolyphonyEngine15PrepVoiceParamsERKNS_16RenderParametersE:0000000000000000 _ZN15PolyphonyEngine15PrepVoiceParamsERKNS_16RenderParametersE
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:2838   .text._ZN15PolyphonyEngine15PrepVoiceParamsERKNS_16RenderParametersE:0000000000000174 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:2844   .text._ZN15PolyphonyEngine11RenderBlockERKNS_16RenderParametersE:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:2850   .text._ZN15PolyphonyEngine11RenderBlockERKNS_16RenderParametersE:0000000000000000 _ZN15PolyphonyEngine11RenderBlockERKNS_16RenderParametersE
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:2901   .text._ZN15PolyphonyEngine11ClearVoicesEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:2907   .text._ZN15PolyphonyEngine11ClearVoicesEv:0000000000000000 _ZN15PolyphonyEngine11ClearVoicesEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:2987   .text._ZN15PolyphonyEngine10PolyToMonoEi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:2993   .text._ZN15PolyphonyEngine10PolyToMonoEi:0000000000000000 _ZN15PolyphonyEngine10PolyToMonoEi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:3190   .text._ZN15PolyphonyEngine10PolyToMonoEi:00000000000000f4 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:3197   .text._ZN15PolyphonyEngine14OnEngineChangeEii:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:3203   .text._ZN15PolyphonyEngine14OnEngineChangeEii:0000000000000000 _ZN15PolyphonyEngine14OnEngineChangeEii
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:3330   .text._ZNK15PolyphonyEngine17GetLastTouchStateEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:3336   .text._ZNK15PolyphonyEngine17GetLastTouchStateEv:0000000000000000 _ZNK15PolyphonyEngine17GetLastTouchStateEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:3357   .text._ZN15PolyphonyEngine20UpdateLastTouchStateEt:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:3363   .text._ZN15PolyphonyEngine20UpdateLastTouchStateEt:0000000000000000 _ZN15PolyphonyEngine20UpdateLastTouchStateEt
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s 			page 149


/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:3383   .text._ZN15PolyphonyEngine13FindFreeVoiceEi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:3389   .text._ZN15PolyphonyEngine13FindFreeVoiceEi:0000000000000000 _ZN15PolyphonyEngine13FindFreeVoiceEi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:3434   .text._ZN15PolyphonyEngine14AssignMonoNoteEfb:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:3440   .text._ZN15PolyphonyEngine14AssignMonoNoteEfb:0000000000000000 _ZN15PolyphonyEngine14AssignMonoNoteEfb
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:3499   .text._ZN15PolyphonyEngine16FindVoiceForNoteEfibi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:3505   .text._ZN15PolyphonyEngine16FindVoiceForNoteEfibi:0000000000000000 _ZN15PolyphonyEngine16FindVoiceForNoteEfibi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:3620   .text._ZN15PolyphonyEngine16FindVoiceForNoteEfibi:0000000000000074 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:3625   .text._ZN15PolyphonyEngine16HandleTouchInputEttibi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:3631   .text._ZN15PolyphonyEngine16HandleTouchInputEttibi:0000000000000000 _ZN15PolyphonyEngine16HandleTouchInputEttibi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:3906   .text._ZN15PolyphonyEngine16HandleTouchInputEttibi:0000000000000128 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:3917   .text._ZN15PolyphonyEngine15TriggerArpVoiceEii:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:3923   .text._ZN15PolyphonyEngine15TriggerArpVoiceEii:0000000000000000 _ZN15PolyphonyEngine15TriggerArpVoiceEii
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:4057   .text._ZN15PolyphonyEngine15TriggerArpVoiceEii:000000000000006c $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:4063   .text._ZNK15PolyphonyEngine16IsAnyVoiceActiveEv:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:4069   .text._ZNK15PolyphonyEngine16IsAnyVoiceActiveEv:0000000000000000 _ZNK15PolyphonyEngine16IsAnyVoiceActiveEv
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:4107   .text.startup._GLOBAL__sub_I_shared_buffer:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:4112   .text.startup._GLOBAL__sub_I_shared_buffer:0000000000000000 _GLOBAL__sub_I_shared_buffer
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:4153   .text.startup._GLOBAL__sub_I_shared_buffer:0000000000000018 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:4172   .bss.poly_engine:0000000000000000 poly_engine
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:4162   .init_array:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:4185   .rodata._ZN15PolyphonyEngine16kTouchMidiNotes_E:0000000000000000 _ZN15PolyphonyEngine16kTouchMidiNotes_E
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:4178   .rodata.MAX_ENGINE_INDEX:0000000000000000 MAX_ENGINE_INDEX
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:4169   .bss.poly_engine:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:4175   .rodata.MAX_ENGINE_INDEX:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:4181   .rodata._ZN15PolyphonyEngine16kTouchMidiNotes_E:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:4202   .sdram_bss:0000000000000000 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:2008   .text._ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff:00000000000000d3 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//ccwHxkZj.s:2008   .text._ZN15PolyphonyEngine15UpdateModAndEnvERN6plaits11ModulationsER13VoiceEnvelopebff:00000000000000d4 $t

UNDEFINED SYMBOLS
_ZdlPvj
memset
_ZTVN6plaits14AdditiveEngineE
_ZTVN6plaits14BassDrumEngineE
_ZTVN6plaits8FMEngineE
_ZTVN6plaits11GrainEngineE
_ZTVN6plaits11HiHatEngineE
_ZTVN6plaits11ModalEngineE
_ZTVN6plaits11NoiseEngineE
_ZTVN6plaits14ParticleEngineE
_ZTVN6plaits15SnareDrumEngineE
_ZTVN6plaits12StringEngineE
_ZTVN6plaits11SwarmEngineE
_ZTVN6plaits19VirtualAnalogEngineE
_ZTVN6plaits17WaveshapingEngineE
_Znwj
_ZN6plaits5Voice4InitEPN6stmlib15BufferAllocatorE
sample_rate
_ZN6plaits5Voice6RenderERKNS_5PatchERKNS_11ModulationsEPNS0_5FrameEj
memcpy
env_release_val
__aeabi_atexit
__dso_handle
