ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"resonator.cc"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text._ZN6plaits9Resonator4InitEfi,"ax",%progbits
  19              		.align	1
  20              		.global	_ZN6plaits9Resonator4InitEfi
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	_ZN6plaits9Resonator4InitEfi:
  26              	.LVL0:
  27              	.LFB1517:
  28              		.file 1 "eurorack/plaits/dsp/physical_modelling/resonator.cc"
   1:eurorack/plaits/dsp/physical_modelling/resonator.cc **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/physical_modelling/resonator.cc **** //
   3:eurorack/plaits/dsp/physical_modelling/resonator.cc **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/physical_modelling/resonator.cc **** //
   5:eurorack/plaits/dsp/physical_modelling/resonator.cc **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/physical_modelling/resonator.cc **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/physical_modelling/resonator.cc **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/physical_modelling/resonator.cc **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/physical_modelling/resonator.cc **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/physical_modelling/resonator.cc **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/physical_modelling/resonator.cc **** // 
  12:eurorack/plaits/dsp/physical_modelling/resonator.cc **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/physical_modelling/resonator.cc **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/physical_modelling/resonator.cc **** // 
  15:eurorack/plaits/dsp/physical_modelling/resonator.cc **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/physical_modelling/resonator.cc **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/physical_modelling/resonator.cc **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/physical_modelling/resonator.cc **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/physical_modelling/resonator.cc **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/physical_modelling/resonator.cc **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/physical_modelling/resonator.cc **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/physical_modelling/resonator.cc **** // 
  23:eurorack/plaits/dsp/physical_modelling/resonator.cc **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/physical_modelling/resonator.cc **** //
  25:eurorack/plaits/dsp/physical_modelling/resonator.cc **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/physical_modelling/resonator.cc **** //
  27:eurorack/plaits/dsp/physical_modelling/resonator.cc **** // Resonator, taken from Rings' code but with fixed position.
  28:eurorack/plaits/dsp/physical_modelling/resonator.cc **** 
  29:eurorack/plaits/dsp/physical_modelling/resonator.cc **** #include "plaits/dsp/physical_modelling/resonator.h"
  30:eurorack/plaits/dsp/physical_modelling/resonator.cc **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 2


  31:eurorack/plaits/dsp/physical_modelling/resonator.cc **** #include <algorithm>
  32:eurorack/plaits/dsp/physical_modelling/resonator.cc **** 
  33:eurorack/plaits/dsp/physical_modelling/resonator.cc **** #include "stmlib/dsp/cosine_oscillator.h"
  34:eurorack/plaits/dsp/physical_modelling/resonator.cc **** #include "stmlib/dsp/dsp.h"
  35:eurorack/plaits/dsp/physical_modelling/resonator.cc **** #include "stmlib/dsp/units.h"
  36:eurorack/plaits/dsp/physical_modelling/resonator.cc **** 
  37:eurorack/plaits/dsp/physical_modelling/resonator.cc **** #include "plaits/resources.h"
  38:eurorack/plaits/dsp/physical_modelling/resonator.cc **** 
  39:eurorack/plaits/dsp/physical_modelling/resonator.cc **** namespace plaits {
  40:eurorack/plaits/dsp/physical_modelling/resonator.cc **** 
  41:eurorack/plaits/dsp/physical_modelling/resonator.cc **** using namespace std;
  42:eurorack/plaits/dsp/physical_modelling/resonator.cc **** using namespace stmlib;
  43:eurorack/plaits/dsp/physical_modelling/resonator.cc **** 
  44:eurorack/plaits/dsp/physical_modelling/resonator.cc **** void Resonator::Init(float position, int resolution) {
  29              		.loc 1 44 54 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  45:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   resolution_ = min(resolution, kMaxNumModes);
  34              		.loc 1 45 3 view .LVU1
  35              	.LBB32:
  36              	.LBB33:
  37              	.LBB34:
  38              	.LBB35:
  39              		.file 2 "eurorack/stmlib/dsp/cosine_oscillator.h"
   1:eurorack/stmlib/dsp/cosine_oscillator.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/stmlib/dsp/cosine_oscillator.h **** //
   3:eurorack/stmlib/dsp/cosine_oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/dsp/cosine_oscillator.h **** //
   5:eurorack/stmlib/dsp/cosine_oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/dsp/cosine_oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/dsp/cosine_oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/dsp/cosine_oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/dsp/cosine_oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/dsp/cosine_oscillator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/dsp/cosine_oscillator.h **** // 
  12:eurorack/stmlib/dsp/cosine_oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/dsp/cosine_oscillator.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/dsp/cosine_oscillator.h **** // 
  15:eurorack/stmlib/dsp/cosine_oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/dsp/cosine_oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/dsp/cosine_oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/dsp/cosine_oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/dsp/cosine_oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/dsp/cosine_oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/dsp/cosine_oscillator.h **** // THE SOFTWARE.
  22:eurorack/stmlib/dsp/cosine_oscillator.h **** // 
  23:eurorack/stmlib/dsp/cosine_oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/dsp/cosine_oscillator.h **** //
  25:eurorack/stmlib/dsp/cosine_oscillator.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/dsp/cosine_oscillator.h **** //
  27:eurorack/stmlib/dsp/cosine_oscillator.h **** // Cosine oscillator. Generates a cosine between 0.0 and 1.0 with minimal
  28:eurorack/stmlib/dsp/cosine_oscillator.h **** // CPU use.
  29:eurorack/stmlib/dsp/cosine_oscillator.h **** 
  30:eurorack/stmlib/dsp/cosine_oscillator.h **** #ifndef STMLIB_DSP_COSINE_OSCILLATOR_H_
  31:eurorack/stmlib/dsp/cosine_oscillator.h **** #define STMLIB_DSP_COSINE_OSCILLATOR_H_
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 3


  32:eurorack/stmlib/dsp/cosine_oscillator.h **** 
  33:eurorack/stmlib/dsp/cosine_oscillator.h **** #include "stmlib/stmlib.h"
  34:eurorack/stmlib/dsp/cosine_oscillator.h **** 
  35:eurorack/stmlib/dsp/cosine_oscillator.h **** #include <cmath>
  36:eurorack/stmlib/dsp/cosine_oscillator.h **** 
  37:eurorack/stmlib/dsp/cosine_oscillator.h **** namespace stmlib {
  38:eurorack/stmlib/dsp/cosine_oscillator.h **** 
  39:eurorack/stmlib/dsp/cosine_oscillator.h **** enum CosineOscillatorMode {
  40:eurorack/stmlib/dsp/cosine_oscillator.h ****   COSINE_OSCILLATOR_APPROXIMATE,
  41:eurorack/stmlib/dsp/cosine_oscillator.h ****   COSINE_OSCILLATOR_EXACT
  42:eurorack/stmlib/dsp/cosine_oscillator.h **** };
  43:eurorack/stmlib/dsp/cosine_oscillator.h **** 
  44:eurorack/stmlib/dsp/cosine_oscillator.h **** class CosineOscillator {
  45:eurorack/stmlib/dsp/cosine_oscillator.h ****  public:
  46:eurorack/stmlib/dsp/cosine_oscillator.h ****   CosineOscillator() { }
  47:eurorack/stmlib/dsp/cosine_oscillator.h ****   ~CosineOscillator() { }
  48:eurorack/stmlib/dsp/cosine_oscillator.h **** 
  49:eurorack/stmlib/dsp/cosine_oscillator.h ****   template<CosineOscillatorMode mode>
  50:eurorack/stmlib/dsp/cosine_oscillator.h ****   inline void Init(float frequency) {
  51:eurorack/stmlib/dsp/cosine_oscillator.h ****     if (mode == COSINE_OSCILLATOR_APPROXIMATE) {
  52:eurorack/stmlib/dsp/cosine_oscillator.h ****       InitApproximate(frequency);
  53:eurorack/stmlib/dsp/cosine_oscillator.h ****     } else {
  54:eurorack/stmlib/dsp/cosine_oscillator.h ****       iir_coefficient_ = 2.0f * cosf(2.0f * float(M_PI) * frequency);
  55:eurorack/stmlib/dsp/cosine_oscillator.h ****       initial_amplitude_ = iir_coefficient_ * 0.25f;
  56:eurorack/stmlib/dsp/cosine_oscillator.h ****     }
  57:eurorack/stmlib/dsp/cosine_oscillator.h ****     Start();
  58:eurorack/stmlib/dsp/cosine_oscillator.h ****   }
  59:eurorack/stmlib/dsp/cosine_oscillator.h ****   
  60:eurorack/stmlib/dsp/cosine_oscillator.h ****   inline void InitApproximate(float frequency) {
  61:eurorack/stmlib/dsp/cosine_oscillator.h ****     float sign = 16.0f;
  62:eurorack/stmlib/dsp/cosine_oscillator.h ****     frequency -= 0.25f;
  40              		.loc 2 62 15 is_stmt 0 view .LVU2
  41 0000 B5EE006A 		vmov.f32	s12, #2.5e-1
  42              	.LBE35:
  43              	.LBE34:
  44              	.LBE33:
  45              	.LBE32:
  46              		.loc 1 45 15 view .LVU3
  47 0004 1829     		cmp	r1, #24
  48 0006 0B46     		mov	r3, r1
  49 0008 F6EE005A 		vmov.f32	s11, #5.0e-1
  50 000c A8BF     		it	ge
  51 000e 1823     		movge	r3, #24
  52              	.LBB54:
  53              	.LBB50:
  54              	.LBB41:
  55              	.LBB36:
  56              		.loc 2 62 15 view .LVU4
  57 0010 30EE460A 		vsub.f32	s0, s0, s12
  58              	.LVL1:
  59              		.loc 2 62 15 view .LVU5
  60              	.LBE36:
  61              	.LBE41:
  62              	.LBE50:
  63              	.LBE54:
  64              		.loc 1 45 15 view .LVU6
  65 0014 0360     		str	r3, [r0]
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 4


  46:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   
  47:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   CosineOscillator amplitudes;
  66              		.loc 1 47 3 is_stmt 1 view .LVU7
  67              	.LVL2:
  68              	.LBB55:
  69              	.LBI55:
  46:eurorack/stmlib/dsp/cosine_oscillator.h ****   ~CosineOscillator() { }
  70              		.loc 2 46 3 view .LVU8
  46:eurorack/stmlib/dsp/cosine_oscillator.h ****   ~CosineOscillator() { }
  71              		.loc 2 46 3 is_stmt 0 view .LVU9
  72              	.LBE55:
  48:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   amplitudes.Init<COSINE_OSCILLATOR_APPROXIMATE>(position);
  73              		.loc 1 48 3 is_stmt 1 view .LVU10
  74              	.LBB56:
  75              	.LBI32:
  50:eurorack/stmlib/dsp/cosine_oscillator.h ****     if (mode == COSINE_OSCILLATOR_APPROXIMATE) {
  76              		.loc 2 50 15 view .LVU11
  77              	.LBB51:
  78              	.LBB42:
  79              	.LBI34:
  60:eurorack/stmlib/dsp/cosine_oscillator.h ****     float sign = 16.0f;
  80              		.loc 2 60 15 view .LVU12
  81              	.LBB37:
  61:eurorack/stmlib/dsp/cosine_oscillator.h ****     frequency -= 0.25f;
  82              		.loc 2 61 5 view .LVU13
  83              		.loc 2 62 5 view .LVU14
  63:eurorack/stmlib/dsp/cosine_oscillator.h ****     if (frequency < 0.0f) {
  84              		.loc 2 63 5 view .LVU15
  85 0016 B5EEC00A 		vcmpe.f32	s0, #0
  86 001a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  87 001e 25D5     		bpl	.L14
  64:eurorack/stmlib/dsp/cosine_oscillator.h ****       frequency = -frequency;
  88              		.loc 2 64 7 view .LVU16
  89              		.loc 2 64 17 is_stmt 0 view .LVU17
  90 0020 B1EE400A 		vneg.f32	s0, s0
  91              	.LVL3:
  92              	.L16:
  61:eurorack/stmlib/dsp/cosine_oscillator.h ****     frequency -= 0.25f;
  93              		.loc 2 61 11 view .LVU18
  94 0024 F3EE007A 		vmov.f32	s15, #1.6e+1
  95              	.L4:
  96              	.LVL4:
  65:eurorack/stmlib/dsp/cosine_oscillator.h ****     } else {
  66:eurorack/stmlib/dsp/cosine_oscillator.h ****       if (frequency > 0.5f) {
  67:eurorack/stmlib/dsp/cosine_oscillator.h ****         frequency -= 0.5f;
  68:eurorack/stmlib/dsp/cosine_oscillator.h ****       } else {
  69:eurorack/stmlib/dsp/cosine_oscillator.h ****         sign = -16.0f;
  70:eurorack/stmlib/dsp/cosine_oscillator.h ****       }
  71:eurorack/stmlib/dsp/cosine_oscillator.h ****     }
  72:eurorack/stmlib/dsp/cosine_oscillator.h ****     iir_coefficient_ = sign * frequency * (1.0f - 2.0f * frequency);
  97              		.loc 2 72 5 is_stmt 1 view .LVU19
  98              		.loc 2 72 29 is_stmt 0 view .LVU20
  99 0028 20EE277A 		vmul.f32	s14, s0, s15
 100 002c 021D     		adds	r2, r0, #4
 101              		.loc 2 72 49 view .LVU21
 102 002e F0EE006A 		vmov.f32	s13, #2.0e+0
 103              	.LBE37:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 5


 104              	.LBE42:
 105              	.LBE51:
 106              	.LBE56:
 107              	.LBB57:
  49:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   
  50:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   for (int i = 0; i < resolution; ++i) {
 108              		.loc 1 50 12 view .LVU22
 109 0032 0023     		movs	r3, #0
 110              	.LBE57:
 111              	.LBB64:
 112              	.LBB52:
 113              	.LBB43:
 114              	.LBB38:
 115              		.loc 2 72 49 view .LVU23
 116 0034 F7EE007A 		vmov.f32	s15, #1.0e+0
 117              	.LVL5:
 118              		.loc 2 72 49 view .LVU24
 119 0038 E0EE667A 		vfms.f32	s15, s0, s13
 120              		.loc 2 72 41 view .LVU25
 121 003c 67EE277A 		vmul.f32	s15, s14, s15
  73:eurorack/stmlib/dsp/cosine_oscillator.h ****     initial_amplitude_ = iir_coefficient_ * 0.25f;
 122              		.loc 2 73 5 is_stmt 1 view .LVU26
 123              	.LBE38:
 124              	.LBE43:
 125              	.LBB44:
 126              	.LBB45:
  74:eurorack/stmlib/dsp/cosine_oscillator.h ****   }
  75:eurorack/stmlib/dsp/cosine_oscillator.h ****   
  76:eurorack/stmlib/dsp/cosine_oscillator.h ****   inline void Start() {
  77:eurorack/stmlib/dsp/cosine_oscillator.h ****     y1_ = initial_amplitude_;
  78:eurorack/stmlib/dsp/cosine_oscillator.h ****     y0_ = 0.5f;
 127              		.loc 2 78 9 is_stmt 0 view .LVU27
 128 0040 B6EE007A 		vmov.f32	s14, #5.0e-1
 129              	.LBE45:
 130              	.LBE44:
 131              	.LBB47:
 132              	.LBB39:
  73:eurorack/stmlib/dsp/cosine_oscillator.h ****     initial_amplitude_ = iir_coefficient_ * 0.25f;
 133              		.loc 2 73 43 view .LVU28
 134 0044 67EE866A 		vmul.f32	s13, s15, s12
 135              	.LVL6:
  73:eurorack/stmlib/dsp/cosine_oscillator.h ****     initial_amplitude_ = iir_coefficient_ * 0.25f;
 136              		.loc 2 73 43 view .LVU29
 137              	.LBE39:
 138              	.LBE47:
 139              	.LBB48:
 140              	.LBI44:
  76:eurorack/stmlib/dsp/cosine_oscillator.h ****     y1_ = initial_amplitude_;
 141              		.loc 2 76 15 is_stmt 1 view .LVU30
 142              	.LBB46:
  77:eurorack/stmlib/dsp/cosine_oscillator.h ****     y0_ = 0.5f;
 143              		.loc 2 77 5 view .LVU31
 144              		.loc 2 78 5 view .LVU32
 145              	.L7:
 146              		.loc 2 78 5 is_stmt 0 view .LVU33
 147              	.LBE46:
 148              	.LBE48:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 6


 149              	.LBE52:
 150              	.LBE64:
 151              	.LBB65:
 152              		.loc 1 50 21 is_stmt 1 discriminator 3 view .LVU34
 153 0048 9942     		cmp	r1, r3
 154 004a 1ADD     		ble	.L6
  51:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     mode_amplitude_[i] = amplitudes.Next() * 0.25f;
 155              		.loc 1 51 5 view .LVU35
 156              	.LVL7:
 157              	.LBB58:
 158              	.LBI58:
  79:eurorack/stmlib/dsp/cosine_oscillator.h ****   }
  80:eurorack/stmlib/dsp/cosine_oscillator.h ****   
  81:eurorack/stmlib/dsp/cosine_oscillator.h ****   inline float value() const {
  82:eurorack/stmlib/dsp/cosine_oscillator.h ****     return y1_ + 0.5f;
  83:eurorack/stmlib/dsp/cosine_oscillator.h ****   }
  84:eurorack/stmlib/dsp/cosine_oscillator.h **** 
  85:eurorack/stmlib/dsp/cosine_oscillator.h ****   inline float Next() {
 159              		.loc 2 85 16 view .LVU36
 160              	.LBB59:
  86:eurorack/stmlib/dsp/cosine_oscillator.h ****     float temp = y0_;
 161              		.loc 2 86 5 view .LVU37
  87:eurorack/stmlib/dsp/cosine_oscillator.h ****     y0_ = iir_coefficient_ * y0_ - y1_;
 162              		.loc 2 87 5 view .LVU38
 163              		.loc 2 87 34 is_stmt 0 view .LVU39
 164 004c D7EE876A 		vfnms.f32	s13, s15, s14
 165              	.LVL8:
 166              		.loc 2 87 34 view .LVU40
 167              	.LBE59:
 168              	.LBE58:
  50:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     mode_amplitude_[i] = amplitudes.Next() * 0.25f;
 169              		.loc 1 50 3 view .LVU41
 170 0050 0133     		adds	r3, r3, #1
 171              	.LVL9:
 172              	.LBB62:
 173              	.LBB60:
 174              		.loc 2 87 34 view .LVU42
 175 0052 B0EE665A 		vmov.f32	s10, s13
 176              	.LVL10:
  88:eurorack/stmlib/dsp/cosine_oscillator.h ****     y1_ = temp;
 177              		.loc 2 88 5 is_stmt 1 view .LVU43
  89:eurorack/stmlib/dsp/cosine_oscillator.h ****     return temp + 0.5f;
 178              		.loc 2 89 5 view .LVU44
 179              		.loc 2 89 19 is_stmt 0 view .LVU45
 180 0056 77EE256A 		vadd.f32	s13, s14, s11
 181              	.LBE60:
 182              	.LBE62:
 183              		.loc 1 51 44 view .LVU46
 184 005a 66EE866A 		vmul.f32	s13, s13, s12
 185              		.loc 1 51 24 view .LVU47
 186 005e E2EC016A 		vstmia.32	r2!, {s13}
  50:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     mode_amplitude_[i] = amplitudes.Next() * 0.25f;
 187              		.loc 1 50 3 is_stmt 1 view .LVU48
 188              	.LVL11:
 189              	.LBB63:
 190              	.LBB61:
  88:eurorack/stmlib/dsp/cosine_oscillator.h ****     y1_ = temp;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 7


 191              		.loc 2 88 9 is_stmt 0 view .LVU49
 192 0062 F0EE476A 		vmov.f32	s13, s14
  87:eurorack/stmlib/dsp/cosine_oscillator.h ****     y1_ = temp;
 193              		.loc 2 87 9 view .LVU50
 194 0066 B0EE457A 		vmov.f32	s14, s10
 195              	.LVL12:
  87:eurorack/stmlib/dsp/cosine_oscillator.h ****     y1_ = temp;
 196              		.loc 2 87 9 view .LVU51
 197              	.LBE61:
 198              	.LBE63:
  50:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     mode_amplitude_[i] = amplitudes.Next() * 0.25f;
 199              		.loc 1 50 3 view .LVU52
 200 006a EDE7     		b	.L7
 201              	.LVL13:
 202              	.L14:
  50:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     mode_amplitude_[i] = amplitudes.Next() * 0.25f;
 203              		.loc 1 50 3 view .LVU53
 204              	.LBE65:
 205              	.LBB66:
 206              	.LBB53:
 207              	.LBB49:
 208              	.LBB40:
  66:eurorack/stmlib/dsp/cosine_oscillator.h ****         frequency -= 0.5f;
 209              		.loc 2 66 7 is_stmt 1 view .LVU54
 210 006c B4EEE50A 		vcmpe.f32	s0, s11
 211 0070 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 212 0074 02DD     		ble	.L15
  67:eurorack/stmlib/dsp/cosine_oscillator.h ****       } else {
 213              		.loc 2 67 9 view .LVU55
  67:eurorack/stmlib/dsp/cosine_oscillator.h ****       } else {
 214              		.loc 2 67 19 is_stmt 0 view .LVU56
 215 0076 30EE650A 		vsub.f32	s0, s0, s11
 216              	.LVL14:
  67:eurorack/stmlib/dsp/cosine_oscillator.h ****       } else {
 217              		.loc 2 67 19 view .LVU57
 218 007a D3E7     		b	.L16
 219              	.LVL15:
 220              	.L15:
  69:eurorack/stmlib/dsp/cosine_oscillator.h ****       }
 221              		.loc 2 69 14 view .LVU58
 222 007c FBEE007A 		vmov.f32	s15, #-1.6e+1
 223 0080 D2E7     		b	.L4
 224              	.LVL16:
 225              	.L6:
  69:eurorack/stmlib/dsp/cosine_oscillator.h ****       }
 226              		.loc 2 69 14 view .LVU59
 227 0082 00F1C002 		add	r2, r0, #192
 228              	.LVL17:
 229              	.L8:
  69:eurorack/stmlib/dsp/cosine_oscillator.h ****       }
 230              		.loc 2 69 14 view .LVU60
 231              	.LBE40:
 232              	.LBE49:
 233              	.LBE53:
 234              	.LBE66:
 235              	.LBB67:
  52:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 8


  53:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   
  54:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   for (int i = 0; i < kMaxNumModes / kModeBatchSize; ++i) {
  55:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     mode_filters_[i].Init();
 236              		.loc 1 55 5 is_stmt 1 discriminator 2 view .LVU61
 237              	.LBB68:
 238              	.LBI68:
 239              		.file 3 "eurorack/plaits/dsp/physical_modelling/resonator.h"
   1:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Copyright 2016 Emilie Gillet.
   2:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
   3:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
   5:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/plaits/dsp/physical_modelling/resonator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/plaits/dsp/physical_modelling/resonator.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/plaits/dsp/physical_modelling/resonator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/plaits/dsp/physical_modelling/resonator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/plaits/dsp/physical_modelling/resonator.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/plaits/dsp/physical_modelling/resonator.h **** // 
  12:eurorack/plaits/dsp/physical_modelling/resonator.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/plaits/dsp/physical_modelling/resonator.h **** // all copies or substantial portions of the Software.
  14:eurorack/plaits/dsp/physical_modelling/resonator.h **** // 
  15:eurorack/plaits/dsp/physical_modelling/resonator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/plaits/dsp/physical_modelling/resonator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/plaits/dsp/physical_modelling/resonator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/plaits/dsp/physical_modelling/resonator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/plaits/dsp/physical_modelling/resonator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/plaits/dsp/physical_modelling/resonator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/plaits/dsp/physical_modelling/resonator.h **** // THE SOFTWARE.
  22:eurorack/plaits/dsp/physical_modelling/resonator.h **** // 
  23:eurorack/plaits/dsp/physical_modelling/resonator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
  25:eurorack/plaits/dsp/physical_modelling/resonator.h **** // -----------------------------------------------------------------------------
  26:eurorack/plaits/dsp/physical_modelling/resonator.h **** //
  27:eurorack/plaits/dsp/physical_modelling/resonator.h **** // Resonator, taken from Rings' code but with fixed position.
  28:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  29:eurorack/plaits/dsp/physical_modelling/resonator.h **** #ifndef PLAITS_DSP_PHYSICAL_MODELLING_RESONATOR_H_
  30:eurorack/plaits/dsp/physical_modelling/resonator.h **** #define PLAITS_DSP_PHYSICAL_MODELLING_RESONATOR_H_
  31:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  32:eurorack/plaits/dsp/physical_modelling/resonator.h **** #include "stmlib/dsp/filter.h"
  33:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  34:eurorack/plaits/dsp/physical_modelling/resonator.h **** namespace plaits {
  35:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  36:eurorack/plaits/dsp/physical_modelling/resonator.h **** const int kMaxNumModes = 24;
  37:eurorack/plaits/dsp/physical_modelling/resonator.h **** const int kModeBatchSize = 4;
  38:eurorack/plaits/dsp/physical_modelling/resonator.h **** 
  39:eurorack/plaits/dsp/physical_modelling/resonator.h **** // We render 4 modes simultaneously since there are enough registers to hold
  40:eurorack/plaits/dsp/physical_modelling/resonator.h **** // all state variables.
  41:eurorack/plaits/dsp/physical_modelling/resonator.h **** template<int batch_size>
  42:eurorack/plaits/dsp/physical_modelling/resonator.h **** class ResonatorSvf {
  43:eurorack/plaits/dsp/physical_modelling/resonator.h ****  public:
  44:eurorack/plaits/dsp/physical_modelling/resonator.h ****   ResonatorSvf() { }
  45:eurorack/plaits/dsp/physical_modelling/resonator.h ****   ~ResonatorSvf() { }
  46:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
  47:eurorack/plaits/dsp/physical_modelling/resonator.h ****   void Init() {
 240              		.loc 3 47 8 discriminator 2 view .LVU62
 241              	.LBB69:
  48:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 9


 242              		.loc 3 48 23 discriminator 2 view .LVU63
  49:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1_[i] = state_2_[i] = 0.0f;
 243              		.loc 3 49 33 is_stmt 0 discriminator 2 view .LVU64
 244 0086 0023     		movs	r3, #0
 245              	.LBE69:
 246              	.LBE68:
  54:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     mode_filters_[i].Init();
 247              		.loc 1 54 21 discriminator 2 view .LVU65
 248 0088 2030     		adds	r0, r0, #32
 249              	.LBB71:
 250              	.LBB70:
 251              		.loc 3 49 33 discriminator 2 view .LVU66
 252 008a 4365     		str	r3, [r0, #84]	@ float
 253              		.loc 3 49 19 discriminator 2 view .LVU67
 254 008c 4364     		str	r3, [r0, #68]	@ float
  48:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
 255              		.loc 3 48 5 is_stmt 1 discriminator 2 view .LVU68
 256              	.LVL18:
  48:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
 257              		.loc 3 48 23 discriminator 2 view .LVU69
 258              		.loc 3 49 33 is_stmt 0 discriminator 2 view .LVU70
 259 008e 8365     		str	r3, [r0, #88]	@ float
 260              		.loc 3 49 19 discriminator 2 view .LVU71
 261 0090 8364     		str	r3, [r0, #72]	@ float
  48:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
 262              		.loc 3 48 5 is_stmt 1 discriminator 2 view .LVU72
 263              	.LVL19:
  48:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
 264              		.loc 3 48 23 discriminator 2 view .LVU73
 265              		.loc 3 49 33 is_stmt 0 discriminator 2 view .LVU74
 266 0092 C365     		str	r3, [r0, #92]	@ float
 267              		.loc 3 49 19 discriminator 2 view .LVU75
 268 0094 C364     		str	r3, [r0, #76]	@ float
  48:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
 269              		.loc 3 48 5 is_stmt 1 discriminator 2 view .LVU76
 270              	.LVL20:
  48:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
 271              		.loc 3 48 23 discriminator 2 view .LVU77
 272              		.loc 3 49 33 is_stmt 0 discriminator 2 view .LVU78
 273 0096 0366     		str	r3, [r0, #96]	@ float
 274              		.loc 3 49 19 discriminator 2 view .LVU79
 275 0098 0365     		str	r3, [r0, #80]	@ float
  48:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
 276              		.loc 3 48 5 is_stmt 1 discriminator 2 view .LVU80
 277              	.LVL21:
  48:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
 278              		.loc 3 48 23 discriminator 2 view .LVU81
  48:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
 279              		.loc 3 48 23 is_stmt 0 discriminator 2 view .LVU82
 280              	.LBE70:
 281              	.LBE71:
  54:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     mode_filters_[i].Init();
 282              		.loc 1 54 3 is_stmt 1 discriminator 2 view .LVU83
  54:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     mode_filters_[i].Init();
 283              		.loc 1 54 21 discriminator 2 view .LVU84
 284 009a 8242     		cmp	r2, r0
 285 009c F3D1     		bne	.L8
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 10


 286              	.LBE67:
  56:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   }
  57:eurorack/plaits/dsp/physical_modelling/resonator.cc **** }
 287              		.loc 1 57 1 is_stmt 0 view .LVU85
 288 009e 7047     		bx	lr
 289              		.cfi_endproc
 290              	.LFE1517:
 292              		.section	.text._ZN6plaits12ResonatorSvfILi4EE7ProcessILN6stmlib10FilterModeE1ELb1EEEvPKfS6_S6_S6_P
 293              		.align	1
 294              		.weak	_ZN6plaits12ResonatorSvfILi4EE7ProcessILN6stmlib10FilterModeE1ELb1EEEvPKfS6_S6_S6_Pfj
 295              		.syntax unified
 296              		.thumb
 297              		.thumb_func
 299              	_ZN6plaits12ResonatorSvfILi4EE7ProcessILN6stmlib10FilterModeE1ELb1EEEvPKfS6_S6_S6_Pfj:
 300              	.LVL22:
 301              	.LFB1532:
  50:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  51:eurorack/plaits/dsp/physical_modelling/resonator.h ****   }
  52:eurorack/plaits/dsp/physical_modelling/resonator.h ****   
  53:eurorack/plaits/dsp/physical_modelling/resonator.h ****   template<stmlib::FilterMode mode, bool add>
  54:eurorack/plaits/dsp/physical_modelling/resonator.h ****   void Process(
 302              		.loc 3 54 8 is_stmt 1 view -0
 303              		.cfi_startproc
 304              		@ args = 12, pretend = 0, frame = 96
 305              		@ frame_needed = 0, uses_anonymous_args = 0
 306              	.LBB80:
  55:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* f,
  56:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* q,
  57:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* gain,
  58:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* in,
  59:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float* out,
  60:eurorack/plaits/dsp/physical_modelling/resonator.h ****       size_t size) {
  61:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float g[batch_size];
  62:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float r[batch_size];
  63:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float r_plus_g[batch_size];
  64:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float h[batch_size];
  65:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float state_1[batch_size];
  66:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float state_2[batch_size];
  67:eurorack/plaits/dsp/physical_modelling/resonator.h ****     float gains[batch_size];
  68:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
 307              		.loc 3 68 23 view .LVU87
 308              	.LBE80:
  54:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* f,
 309              		.loc 3 54 8 is_stmt 0 view .LVU88
 310 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 311              		.cfi_def_cfa_offset 28
 312              		.cfi_offset 4, -28
 313              		.cfi_offset 5, -24
 314              		.cfi_offset 6, -20
 315              		.cfi_offset 7, -16
 316              		.cfi_offset 8, -12
 317              		.cfi_offset 9, -8
 318              		.cfi_offset 14, -4
 319 0004 99B0     		sub	sp, sp, #100
 320              		.cfi_def_cfa_offset 128
  54:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* f,
 321              		.loc 3 54 8 view .LVU89
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 11


 322 0006 0446     		mov	r4, r0
 323 0008 01F11008 		add	r8, r1, #16
 324 000c 229E     		ldr	r6, [sp, #136]
 325 000e 04A8     		add	r0, sp, #16
 326              	.LVL23:
  54:eurorack/plaits/dsp/physical_modelling/resonator.h ****       const float* f,
 327              		.loc 3 54 8 view .LVU90
 328 0010 0DF1200C 		add	ip, sp, #32
 329 0014 EE46     		mov	lr, sp
 330 0016 DDE92075 		ldrd	r7, r5, [sp, #128]
 331              	.LVL24:
 332              	.L18:
 333              	.LBB87:
  69:eurorack/plaits/dsp/physical_modelling/resonator.h ****       g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
 334              		.loc 3 69 58 view .LVU91
 335 001a B1EC017A 		vldmia.32	r1!, {s14}
 336              	.LVL25:
 337              	.LBB81:
 338              	.LBI81:
 339              		.file 4 "eurorack/stmlib/dsp/filter.h"
   1:eurorack/stmlib/dsp/filter.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/stmlib/dsp/filter.h **** //
   3:eurorack/stmlib/dsp/filter.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/dsp/filter.h **** //
   5:eurorack/stmlib/dsp/filter.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/dsp/filter.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/dsp/filter.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/dsp/filter.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/dsp/filter.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/dsp/filter.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/dsp/filter.h **** // 
  12:eurorack/stmlib/dsp/filter.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/dsp/filter.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/dsp/filter.h **** // 
  15:eurorack/stmlib/dsp/filter.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/dsp/filter.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/dsp/filter.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/dsp/filter.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/dsp/filter.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/dsp/filter.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/dsp/filter.h **** // THE SOFTWARE.
  22:eurorack/stmlib/dsp/filter.h **** // 
  23:eurorack/stmlib/dsp/filter.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/dsp/filter.h **** //
  25:eurorack/stmlib/dsp/filter.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/dsp/filter.h **** //
  27:eurorack/stmlib/dsp/filter.h **** // Zero-delay-feedback filters (one pole and SVF).
  28:eurorack/stmlib/dsp/filter.h **** // Naive SVF.
  29:eurorack/stmlib/dsp/filter.h **** 
  30:eurorack/stmlib/dsp/filter.h **** #ifndef STMLIB_DSP_FILTER_H_
  31:eurorack/stmlib/dsp/filter.h **** #define STMLIB_DSP_FILTER_H_
  32:eurorack/stmlib/dsp/filter.h **** 
  33:eurorack/stmlib/dsp/filter.h **** #include "stmlib/stmlib.h"
  34:eurorack/stmlib/dsp/filter.h **** 
  35:eurorack/stmlib/dsp/filter.h **** #include <cmath>
  36:eurorack/stmlib/dsp/filter.h **** #include <algorithm>
  37:eurorack/stmlib/dsp/filter.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 12


  38:eurorack/stmlib/dsp/filter.h **** namespace stmlib {
  39:eurorack/stmlib/dsp/filter.h **** 
  40:eurorack/stmlib/dsp/filter.h **** enum FilterMode {
  41:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_LOW_PASS,
  42:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_BAND_PASS,
  43:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_BAND_PASS_NORMALIZED,
  44:eurorack/stmlib/dsp/filter.h ****   FILTER_MODE_HIGH_PASS
  45:eurorack/stmlib/dsp/filter.h **** };
  46:eurorack/stmlib/dsp/filter.h **** 
  47:eurorack/stmlib/dsp/filter.h **** enum FrequencyApproximation {
  48:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_EXACT,
  49:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_ACCURATE,
  50:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_FAST,
  51:eurorack/stmlib/dsp/filter.h ****   FREQUENCY_DIRTY
  52:eurorack/stmlib/dsp/filter.h **** };
  53:eurorack/stmlib/dsp/filter.h **** 
  54:eurorack/stmlib/dsp/filter.h **** #define M_PI_F float(M_PI)
  55:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_2 M_PI * M_PI
  56:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_3 M_PI_POW_2 * M_PI
  57:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_5 M_PI_POW_3 * M_PI_POW_2
  58:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_7 M_PI_POW_5 * M_PI_POW_2
  59:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_9 M_PI_POW_7 * M_PI_POW_2
  60:eurorack/stmlib/dsp/filter.h **** #define M_PI_POW_11 M_PI_POW_9 * M_PI_POW_2
  61:eurorack/stmlib/dsp/filter.h **** 
  62:eurorack/stmlib/dsp/filter.h **** class DCBlocker {
  63:eurorack/stmlib/dsp/filter.h ****  public:
  64:eurorack/stmlib/dsp/filter.h ****   DCBlocker() { }
  65:eurorack/stmlib/dsp/filter.h ****   ~DCBlocker() { }
  66:eurorack/stmlib/dsp/filter.h ****   
  67:eurorack/stmlib/dsp/filter.h ****   void Init(float pole) {
  68:eurorack/stmlib/dsp/filter.h ****     x_ = 0.0f;
  69:eurorack/stmlib/dsp/filter.h ****     y_ = 0.0f;
  70:eurorack/stmlib/dsp/filter.h ****     pole_ = pole;
  71:eurorack/stmlib/dsp/filter.h ****   }
  72:eurorack/stmlib/dsp/filter.h ****   
  73:eurorack/stmlib/dsp/filter.h ****   inline void Process(float* in_out, size_t size) {
  74:eurorack/stmlib/dsp/filter.h ****     float x = x_;
  75:eurorack/stmlib/dsp/filter.h ****     float y = y_;
  76:eurorack/stmlib/dsp/filter.h ****     const float pole = pole_;
  77:eurorack/stmlib/dsp/filter.h ****     while (size--) {
  78:eurorack/stmlib/dsp/filter.h ****       float old_x = x;
  79:eurorack/stmlib/dsp/filter.h ****       x = *in_out;
  80:eurorack/stmlib/dsp/filter.h ****       *in_out++ = y = y * pole + x - old_x;
  81:eurorack/stmlib/dsp/filter.h ****     }
  82:eurorack/stmlib/dsp/filter.h ****     x_ = x;
  83:eurorack/stmlib/dsp/filter.h ****     y_ = y;
  84:eurorack/stmlib/dsp/filter.h ****   }
  85:eurorack/stmlib/dsp/filter.h ****   
  86:eurorack/stmlib/dsp/filter.h ****  private:
  87:eurorack/stmlib/dsp/filter.h ****   float pole_;
  88:eurorack/stmlib/dsp/filter.h ****   float x_;
  89:eurorack/stmlib/dsp/filter.h ****   float y_;
  90:eurorack/stmlib/dsp/filter.h **** };
  91:eurorack/stmlib/dsp/filter.h **** 
  92:eurorack/stmlib/dsp/filter.h **** class OnePole {
  93:eurorack/stmlib/dsp/filter.h ****  public:
  94:eurorack/stmlib/dsp/filter.h ****   OnePole() { }
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 13


  95:eurorack/stmlib/dsp/filter.h ****   ~OnePole() { }
  96:eurorack/stmlib/dsp/filter.h ****   
  97:eurorack/stmlib/dsp/filter.h ****   void Init() {
  98:eurorack/stmlib/dsp/filter.h ****     set_f<FREQUENCY_DIRTY>(0.01f);
  99:eurorack/stmlib/dsp/filter.h ****     Reset();
 100:eurorack/stmlib/dsp/filter.h ****   }
 101:eurorack/stmlib/dsp/filter.h ****   
 102:eurorack/stmlib/dsp/filter.h ****   void Reset() {
 103:eurorack/stmlib/dsp/filter.h ****     state_ = 0.0f;
 104:eurorack/stmlib/dsp/filter.h ****   }
 105:eurorack/stmlib/dsp/filter.h ****   
 106:eurorack/stmlib/dsp/filter.h ****   template<FrequencyApproximation approximation>
 107:eurorack/stmlib/dsp/filter.h ****   static inline float tan(float f) {
 340              		.loc 4 107 23 is_stmt 1 view .LVU92
 341              	.LBB82:
 108:eurorack/stmlib/dsp/filter.h ****     if (approximation == FREQUENCY_EXACT) {
 109:eurorack/stmlib/dsp/filter.h ****       // Clip coefficient to about 100.
 110:eurorack/stmlib/dsp/filter.h ****       f = f < 0.497f ? f : 0.497f;
 111:eurorack/stmlib/dsp/filter.h ****       return tanf(M_PI_F * f);
 112:eurorack/stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_DIRTY) {
 113:eurorack/stmlib/dsp/filter.h ****       // Optimized for frequencies below 8kHz.
 114:eurorack/stmlib/dsp/filter.h ****       const float a = 3.736e-01f * M_PI_POW_3;
 115:eurorack/stmlib/dsp/filter.h ****       return f * (M_PI_F + a * f * f);
 116:eurorack/stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_FAST) {
 117:eurorack/stmlib/dsp/filter.h ****       // The usual tangent approximation uses 3.1755e-01 and 2.033e-01, but
 118:eurorack/stmlib/dsp/filter.h ****       // the coefficients used here are optimized to minimize error for the
 119:eurorack/stmlib/dsp/filter.h ****       // 16Hz to 16kHz range, with a sample rate of 48kHz.
 120:eurorack/stmlib/dsp/filter.h ****       const float a = 3.260e-01f * M_PI_POW_3;
 121:eurorack/stmlib/dsp/filter.h ****       const float b = 1.823e-01f * M_PI_POW_5;
 122:eurorack/stmlib/dsp/filter.h ****       float f2 = f * f;
 123:eurorack/stmlib/dsp/filter.h ****       return f * (M_PI_F + f2 * (a + b * f2));
 342              		.loc 4 123 36 is_stmt 0 view .LVU93
 343 001e DFED557A 		vldr.32	s15, .L34
 122:eurorack/stmlib/dsp/filter.h ****       return f * (M_PI_F + f2 * (a + b * f2));
 344              		.loc 4 122 13 view .LVU94
 345 0022 27EE076A 		vmul.f32	s12, s14, s14
 346              	.LVL26:
 347              		.loc 4 123 36 view .LVU95
 348 0026 DFED546A 		vldr.32	s13, .L34+4
 349              	.LBE82:
 350              	.LBE81:
  68:eurorack/plaits/dsp/physical_modelling/resonator.h ****       g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
 351              		.loc 3 68 23 view .LVU96
 352 002a 4145     		cmp	r1, r8
 353              	.LBB85:
 354              	.LBB83:
 355              		.loc 4 123 36 view .LVU97
 356 002c E6EE276A 		vfma.f32	s13, s12, s15
 357              		.loc 4 123 26 view .LVU98
 358 0030 DFED527A 		vldr.32	s15, .L34+8
 359 0034 E6EE867A 		vfma.f32	s15, s13, s12
 360              	.LBE83:
 361              	.LBE85:
  70:eurorack/plaits/dsp/physical_modelling/resonator.h ****       r[i] = 1.0f / q[i];
 362              		.loc 3 70 24 view .LVU99
 363 0038 F2EC016A 		vldmia.32	r2!, {s13}
 364              		.loc 3 70 19 view .LVU100
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 14


 365 003c B7EE006A 		vmov.f32	s12, #1.0e+0
 366              	.LVL27:
 367              	.LBB86:
 368              	.LBB84:
 369              		.loc 4 123 45 view .LVU101
 370 0040 67EE877A 		vmul.f32	s15, s15, s14
 371              	.LVL28:
 372              		.loc 4 123 45 view .LVU102
 373              	.LBE84:
 374              	.LBE86:
 375              		.loc 3 70 19 view .LVU103
 376 0044 86EE267A 		vdiv.f32	s14, s12, s13
  69:eurorack/plaits/dsp/physical_modelling/resonator.h ****       r[i] = 1.0f / q[i];
 377              		.loc 3 69 12 view .LVU104
 378 0048 EEEC017A 		vstmia.32	lr!, {s15}
  71:eurorack/plaits/dsp/physical_modelling/resonator.h ****       h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
 379              		.loc 3 71 27 view .LVU105
 380 004c F0EE466A 		vmov.f32	s13, s12
 381 0050 E7EE276A 		vfma.f32	s13, s14, s15
 382              		.loc 3 71 41 view .LVU106
 383 0054 E7EEA76A 		vfma.f32	s13, s15, s15
  72:eurorack/plaits/dsp/physical_modelling/resonator.h ****       r_plus_g[i] = r[i] + g[i];
 384              		.loc 3 72 26 view .LVU107
 385 0058 77EE277A 		vadd.f32	s15, s14, s15
 386              		.loc 3 72 19 view .LVU108
 387 005c E0EC017A 		vstmia.32	r0!, {s15}
  68:eurorack/plaits/dsp/physical_modelling/resonator.h ****       g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
 388              		.loc 3 68 5 is_stmt 1 view .LVU109
  68:eurorack/plaits/dsp/physical_modelling/resonator.h ****       g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
 389              		.loc 3 68 23 view .LVU110
  71:eurorack/plaits/dsp/physical_modelling/resonator.h ****       h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
 390              		.loc 3 71 19 is_stmt 0 view .LVU111
 391 0060 C6EE265A 		vdiv.f32	s11, s12, s13
  71:eurorack/plaits/dsp/physical_modelling/resonator.h ****       h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
 392              		.loc 3 71 12 view .LVU112
 393 0064 ECEC015A 		vstmia.32	ip!, {s11}
  68:eurorack/plaits/dsp/physical_modelling/resonator.h ****       g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
 394              		.loc 3 68 23 view .LVU113
 395 0068 D7D1     		bne	.L18
  73:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1[i] = state_1_[i];
  74:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_2[i] = state_2_[i];
  75:eurorack/plaits/dsp/physical_modelling/resonator.h ****       gains[i] = gain[i];
 396              		.loc 3 75 16 view .LVU114
 397 006a 0DF1500C 		add	ip, sp, #80
 398 006e 03F1100E 		add	lr, r3, #16
 399              	.LVL29:
 400              	.L19:
 401              		.loc 3 75 16 view .LVU115
 402 0072 1868     		ldr	r0, [r3]	@ unaligned
 403 0074 0833     		adds	r3, r3, #8
 404 0076 53F8041C 		ldr	r1, [r3, #-4]	@ unaligned
 405 007a 6246     		mov	r2, ip
 406 007c 7345     		cmp	r3, lr
 407 007e 03C2     		stmia	r2!, {r0, r1}
 408 0080 9446     		mov	ip, r2
 409 0082 F6D1     		bne	.L19
 410 0084 04F11002 		add	r2, r4, #16
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 15


  74:eurorack/plaits/dsp/physical_modelling/resonator.h ****       gains[i] = gain[i];
 411              		.loc 3 74 18 view .LVU116
 412 0088 0DF1400E 		add	lr, sp, #64
 413              	.LVL30:
  74:eurorack/plaits/dsp/physical_modelling/resonator.h ****       gains[i] = gain[i];
 414              		.loc 3 74 18 view .LVU117
 415 008c 1346     		mov	r3, r2
 416 008e 02F11008 		add	r8, r2, #16
 417              	.LVL31:
 418              	.L20:
  74:eurorack/plaits/dsp/physical_modelling/resonator.h ****       gains[i] = gain[i];
 419              		.loc 3 74 18 view .LVU118
 420 0092 1868     		ldr	r0, [r3]	@ unaligned
 421 0094 0833     		adds	r3, r3, #8
 422 0096 53F8041C 		ldr	r1, [r3, #-4]	@ unaligned
 423 009a F446     		mov	ip, lr
 424 009c 4345     		cmp	r3, r8
 425 009e ACE80300 		stmia	ip!, {r0, r1}
 426 00a2 E646     		mov	lr, ip
 427 00a4 F5D1     		bne	.L20
  73:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1[i] = state_1_[i];
 428              		.loc 3 73 18 view .LVU119
 429 00a6 2346     		mov	r3, r4
 430 00a8 0DF1300E 		add	lr, sp, #48
 431 00ac 04F11008 		add	r8, r4, #16
 432              	.L21:
 433 00b0 1868     		ldr	r0, [r3]	@ unaligned
 434 00b2 0833     		adds	r3, r3, #8
 435 00b4 53F8041C 		ldr	r1, [r3, #-4]	@ unaligned
 436 00b8 F446     		mov	ip, lr
 437 00ba 4345     		cmp	r3, r8
 438 00bc ACE80300 		stmia	ip!, {r0, r1}
 439 00c0 E646     		mov	lr, ip
 440 00c2 F5D1     		bne	.L21
 441              	.L24:
 442              	.LVL32:
  73:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1[i] = state_1_[i];
 443              		.loc 3 73 18 view .LVU120
 444              	.LBE87:
  76:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  77:eurorack/plaits/dsp/physical_modelling/resonator.h ****     
  78:eurorack/plaits/dsp/physical_modelling/resonator.h ****     while (size--) {
 445              		.loc 3 78 5 is_stmt 1 view .LVU121
 446 00c4 013E     		subs	r6, r6, #1
 447              	.LVL33:
 448              		.loc 3 78 5 is_stmt 0 view .LVU122
 449 00c6 731C     		adds	r3, r6, #1
 450 00c8 10AB     		add	r3, sp, #64
 451 00ca 3AD0     		beq	.L22
 452              	.LVL34:
 453              	.LBB88:
  79:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float s_in = *in++;
 454              		.loc 3 79 13 view .LVU123
 455 00cc F7EC014A 		vldmia.32	r7!, {s9}
 456              	.LVL35:
 457              	.LBB89:
  80:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float s_out = 0.0f;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 16


  81:eurorack/plaits/dsp/physical_modelling/resonator.h ****       for (int i = 0; i < batch_size; ++i) {
 458              		.loc 3 81 25 is_stmt 1 view .LVU124
 459 00d0 0CA8     		add	r0, sp, #48
 460 00d2 0DF1500C 		add	ip, sp, #80
 461              	.LBE89:
  79:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float s_in = *in++;
 462              		.loc 3 79 13 is_stmt 0 view .LVU125
 463 00d6 EE46     		mov	lr, sp
 464 00d8 0DF12008 		add	r8, sp, #32
 465 00dc 0DF11009 		add	r9, sp, #16
 466              	.LBB93:
 467              		.loc 3 81 16 view .LVU126
 468 00e0 0021     		movs	r1, #0
 469              	.LBE93:
  80:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float s_out = 0.0f;
 470              		.loc 3 80 13 view .LVU127
 471 00e2 DFED275A 		vldr.32	s11, .L34+12
 472              	.LVL36:
 473              	.L23:
 474              	.LBB94:
 475              	.LBB90:
  82:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
 476              		.loc 3 82 32 discriminator 2 view .LVU128
 477 00e6 F0EE646A 		vmov.f32	s13, s9
 478              		.loc 3 82 55 discriminator 2 view .LVU129
 479 00ea D0ED007A 		vldr.32	s15, [r0]
 480              		.loc 3 82 42 discriminator 2 view .LVU130
 481 00ee B9EC017A 		vldmia.32	r9!, {s14}
 482              	.LBE90:
  81:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
 483              		.loc 3 81 7 discriminator 2 view .LVU131
 484 00f2 0131     		adds	r1, r1, #1
 485              	.LVL37:
 486              	.LBB91:
 487              		.loc 3 82 76 discriminator 2 view .LVU132
 488 00f4 B8EC016A 		vldmia.32	r8!, {s12}
 489              		.loc 3 82 32 discriminator 2 view .LVU133
 490 00f8 E7EE676A 		vfms.f32	s13, s14, s15
 491              		.loc 3 82 68 discriminator 2 view .LVU134
 492 00fc 93ED007A 		vldr.32	s14, [r3]
 493              	.LBE91:
  81:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
 494              		.loc 3 81 25 discriminator 2 view .LVU135
 495 0100 0429     		cmp	r1, #4
 496              	.LBB92:
 497              		.loc 3 82 59 discriminator 2 view .LVU136
 498 0102 76EEC76A 		vsub.f32	s13, s13, s14
 499              		.loc 3 82 21 discriminator 2 view .LVU137
 500 0106 66EE866A 		vmul.f32	s13, s13, s12
 501              	.LVL38:
  83:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float bp = g[i] * hp + state_1[i];
 502              		.loc 3 83 27 discriminator 2 view .LVU138
 503 010a BEEC016A 		vldmia.32	lr!, {s12}
 504              		.loc 3 83 21 discriminator 2 view .LVU139
 505 010e E6EE267A 		vfma.f32	s15, s12, s13
 506              	.LVL39:
  84:eurorack/plaits/dsp/physical_modelling/resonator.h ****         state_1[i] = g[i] * hp + bp;
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 17


  85:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float lp = g[i] * bp + state_2[i];
 507              		.loc 3 85 21 discriminator 2 view .LVU140
 508 0112 A6EE277A 		vfma.f32	s14, s12, s15
 509              	.LVL40:
  84:eurorack/plaits/dsp/physical_modelling/resonator.h ****         state_1[i] = g[i] * hp + bp;
 510              		.loc 3 84 32 discriminator 2 view .LVU141
 511 0116 B0EE675A 		vmov.f32	s10, s15
 512 011a A6EE265A 		vfma.f32	s10, s12, s13
  86:eurorack/plaits/dsp/physical_modelling/resonator.h ****         state_2[i] = g[i] * bp + lp;
 513              		.loc 3 86 32 discriminator 2 view .LVU142
 514 011e A6EE277A 		vfma.f32	s14, s12, s15
 515              	.LVL41:
  84:eurorack/plaits/dsp/physical_modelling/resonator.h ****         state_1[i] = g[i] * hp + bp;
 516              		.loc 3 84 20 discriminator 2 view .LVU143
 517 0122 A0EC015A 		vstmia.32	r0!, {s10}
 518              		.loc 3 86 20 discriminator 2 view .LVU144
 519 0126 A3EC017A 		vstmia.32	r3!, {s14}
 520              	.LVL42:
  87:eurorack/plaits/dsp/physical_modelling/resonator.h ****         s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
 521              		.loc 3 87 23 discriminator 2 view .LVU145
 522 012a BCEC017A 		vldmia.32	ip!, {s14}
 523              		.loc 3 87 15 discriminator 2 view .LVU146
 524 012e E7EE275A 		vfma.f32	s11, s14, s15
 525              	.LVL43:
 526              		.loc 3 87 15 discriminator 2 view .LVU147
 527              	.LBE92:
  81:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
 528              		.loc 3 81 7 is_stmt 1 discriminator 2 view .LVU148
  81:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
 529              		.loc 3 81 25 discriminator 2 view .LVU149
 530 0132 D8D1     		bne	.L23
 531              	.LVL44:
  81:eurorack/plaits/dsp/physical_modelling/resonator.h ****         const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
 532              		.loc 3 81 25 is_stmt 0 discriminator 2 view .LVU150
 533              	.LBE94:
  88:eurorack/plaits/dsp/physical_modelling/resonator.h ****       }
  89:eurorack/plaits/dsp/physical_modelling/resonator.h ****       if (add) {
  90:eurorack/plaits/dsp/physical_modelling/resonator.h ****         *out++ += s_out;
 534              		.loc 3 90 16 view .LVU151
 535 0134 F5EC017A 		vldmia.32	r5!, {s15}
 536              	.LVL45:
 537              		.loc 3 90 16 view .LVU152
 538 0138 77EEA57A 		vadd.f32	s15, s15, s11
 539 013c 45ED017A 		vstr.32	s15, [r5, #-4]
 540              	.LBE88:
  78:eurorack/plaits/dsp/physical_modelling/resonator.h ****       float s_in = *in++;
 541              		.loc 3 78 5 view .LVU153
 542 0140 C0E7     		b	.L24
 543              	.LVL46:
 544              	.L22:
 545              	.LBB95:
  91:eurorack/plaits/dsp/physical_modelling/resonator.h ****       } else {
  92:eurorack/plaits/dsp/physical_modelling/resonator.h ****         *out++ = s_out;
  93:eurorack/plaits/dsp/physical_modelling/resonator.h ****       }
  94:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  95:eurorack/plaits/dsp/physical_modelling/resonator.h ****     for (int i = 0; i < batch_size; ++i) {
  96:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_1_[i] = state_1[i];
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 18


 546              		.loc 3 96 19 view .LVU154
 547 0142 0CAD     		add	r5, sp, #48
 548              	.LVL47:
 549              	.L25:
 550              		.loc 3 96 19 view .LVU155
 551 0144 2E46     		mov	r6, r5
 552 0146 0834     		adds	r4, r4, #8
 553 0148 03CE     		ldmia	r6!, {r0, r1}
 554 014a 9E42     		cmp	r6, r3
 555 014c 44F8080C 		str	r0, [r4, #-8]	@ unaligned
 556 0150 44F8041C 		str	r1, [r4, #-4]	@ unaligned
 557 0154 3546     		mov	r5, r6
 558 0156 F5D1     		bne	.L25
  97:eurorack/plaits/dsp/physical_modelling/resonator.h ****       state_2_[i] = state_2[i];
 559              		.loc 3 97 19 view .LVU156
 560 0158 14AD     		add	r5, sp, #80
 561              	.LVL48:
 562              	.L26:
 563              		.loc 3 97 19 view .LVU157
 564 015a 1C46     		mov	r4, r3
 565 015c 0832     		adds	r2, r2, #8
 566 015e 03CC     		ldmia	r4!, {r0, r1}
 567 0160 AC42     		cmp	r4, r5
 568 0162 42F8080C 		str	r0, [r2, #-8]	@ unaligned
 569 0166 42F8041C 		str	r1, [r2, #-4]	@ unaligned
 570 016a 2346     		mov	r3, r4
 571 016c F5D1     		bne	.L26
 572              	.LBE95:
  98:eurorack/plaits/dsp/physical_modelling/resonator.h ****     }
  99:eurorack/plaits/dsp/physical_modelling/resonator.h ****   }
 573              		.loc 3 99 3 view .LVU158
 574 016e 19B0     		add	sp, sp, #100
 575              		.cfi_def_cfa_offset 28
 576              		@ sp needed
 577 0170 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 578              	.LVL49:
 579              	.L35:
 580              		.loc 3 99 3 view .LVU159
 581              		.align	2
 582              	.L34:
 583 0174 49265F42 		.word	1113531977
 584 0178 8FBA2141 		.word	1092729487
 585 017c DB0F4940 		.word	1078530011
 586 0180 00000000 		.word	0
 587              		.cfi_endproc
 588              	.LFE1532:
 590              		.section	.text._ZN6plaits9Resonator7ProcessEffffPKfPfj,"ax",%progbits
 591              		.align	1
 592              		.global	_ZN6plaits9Resonator7ProcessEffffPKfPfj
 593              		.syntax unified
 594              		.thumb
 595              		.thumb_func
 597              	_ZN6plaits9Resonator7ProcessEffffPKfPfj:
 598              	.LVL50:
 599              	.LFB1520:
  58:eurorack/plaits/dsp/physical_modelling/resonator.cc **** 
  59:eurorack/plaits/dsp/physical_modelling/resonator.cc **** inline float NthHarmonicCompensation(int n, float stiffness) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 19


  60:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   float stretch_factor = 1.0f;
  61:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   for (int i = 0; i < n - 1; ++i) {
  62:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     stretch_factor += stiffness;
  63:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     if (stiffness < 0.0f) {
  64:eurorack/plaits/dsp/physical_modelling/resonator.cc ****       stiffness *= 0.93f;
  65:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     } else {
  66:eurorack/plaits/dsp/physical_modelling/resonator.cc ****       stiffness *= 0.98f;
  67:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     }
  68:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   }
  69:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   return 1.0f / stretch_factor;
  70:eurorack/plaits/dsp/physical_modelling/resonator.cc **** }
  71:eurorack/plaits/dsp/physical_modelling/resonator.cc **** 
  72:eurorack/plaits/dsp/physical_modelling/resonator.cc **** void Resonator::Process(
  73:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     float f0,
  74:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     float structure,
  75:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     float brightness,
  76:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     float damping,
  77:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     const float* in,
  78:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     float* out,
  79:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     size_t size) {
 600              		.loc 1 79 18 is_stmt 1 view -0
 601              		.cfi_startproc
 602              		@ args = 0, pretend = 0, frame = 48
 603              		@ frame_needed = 0, uses_anonymous_args = 0
  80:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   float stiffness = Interpolate(lut_stiffness, structure, 64.0f);
 604              		.loc 1 80 3 view .LVU161
 605              	.LBB105:
 606              	.LBI105:
 607              		.file 5 "eurorack/stmlib/dsp/dsp.h"
   1:eurorack/stmlib/dsp/dsp.h **** // Copyright 2012 Emilie Gillet.
   2:eurorack/stmlib/dsp/dsp.h **** //
   3:eurorack/stmlib/dsp/dsp.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/dsp/dsp.h **** //
   5:eurorack/stmlib/dsp/dsp.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/dsp/dsp.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/dsp/dsp.h **** // in the Software without restriction, including without limitation the rights
   8:eurorack/stmlib/dsp/dsp.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/dsp/dsp.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/dsp/dsp.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/dsp/dsp.h **** // 
  12:eurorack/stmlib/dsp/dsp.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/dsp/dsp.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/dsp/dsp.h **** // 
  15:eurorack/stmlib/dsp/dsp.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/dsp/dsp.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/dsp/dsp.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/dsp/dsp.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/dsp/dsp.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/dsp/dsp.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/dsp/dsp.h **** // THE SOFTWARE.
  22:eurorack/stmlib/dsp/dsp.h **** // 
  23:eurorack/stmlib/dsp/dsp.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/dsp/dsp.h **** //
  25:eurorack/stmlib/dsp/dsp.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/dsp/dsp.h **** //
  27:eurorack/stmlib/dsp/dsp.h **** // DSP utility routines.
  28:eurorack/stmlib/dsp/dsp.h **** 
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 20


  29:eurorack/stmlib/dsp/dsp.h **** #ifndef STMLIB_UTILS_DSP_DSP_H_
  30:eurorack/stmlib/dsp/dsp.h **** #define STMLIB_UTILS_DSP_DSP_H_
  31:eurorack/stmlib/dsp/dsp.h **** 
  32:eurorack/stmlib/dsp/dsp.h **** #include "stmlib/stmlib.h"
  33:eurorack/stmlib/dsp/dsp.h **** 
  34:eurorack/stmlib/dsp/dsp.h **** #include <cmath>
  35:eurorack/stmlib/dsp/dsp.h **** #include <math.h>
  36:eurorack/stmlib/dsp/dsp.h **** 
  37:eurorack/stmlib/dsp/dsp.h **** namespace stmlib {
  38:eurorack/stmlib/dsp/dsp.h **** 
  39:eurorack/stmlib/dsp/dsp.h **** #define MAKE_INTEGRAL_FRACTIONAL(x) \
  40:eurorack/stmlib/dsp/dsp.h ****   int32_t x ## _integral = static_cast<int32_t>(x); \
  41:eurorack/stmlib/dsp/dsp.h ****   float x ## _fractional = x - static_cast<float>(x ## _integral);
  42:eurorack/stmlib/dsp/dsp.h **** 
  43:eurorack/stmlib/dsp/dsp.h **** inline float Interpolate(const float* table, float index, float size) {
 608              		.loc 5 43 14 view .LVU162
 609              	.LBB106:
  44:eurorack/stmlib/dsp/dsp.h ****   index *= size;
 610              		.loc 5 44 3 view .LVU163
 611              		.loc 5 44 9 is_stmt 0 view .LVU164
 612 0000 DFED627A 		vldr.32	s15, .L52
 613 0004 60EEA77A 		vmul.f32	s15, s1, s15
 614              	.LVL51:
  45:eurorack/stmlib/dsp/dsp.h ****   MAKE_INTEGRAL_FRACTIONAL(index)
 615              		.loc 5 45 3 is_stmt 1 view .LVU165
 616              	.LBE106:
 617              	.LBE105:
  79:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   float stiffness = Interpolate(lut_stiffness, structure, 64.0f);
 618              		.loc 1 79 18 is_stmt 0 view .LVU166
 619 0008 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 620              		.cfi_def_cfa_offset 36
 621              		.cfi_offset 4, -36
 622              		.cfi_offset 5, -32
 623              		.cfi_offset 6, -28
 624              		.cfi_offset 7, -24
 625              		.cfi_offset 8, -20
 626              		.cfi_offset 9, -16
 627              		.cfi_offset 10, -12
 628              		.cfi_offset 11, -8
 629              		.cfi_offset 14, -4
 630              	.LBB115:
 631              	.LBB107:
 632              		.loc 5 45 3 view .LVU167
 633 000c BDEEE77A 		vcvt.s32.f32	s14, s15
 634              	.LBE107:
 635              	.LBE115:
  79:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   float stiffness = Interpolate(lut_stiffness, structure, 64.0f);
 636              		.loc 1 79 18 view .LVU168
 637 0010 0546     		mov	r5, r0
 638 0012 9946     		mov	r9, r3
 639              	.LBB116:
 640              	.LBB108:
  46:eurorack/stmlib/dsp/dsp.h ****   float a = table[index_integral];
 641              		.loc 5 46 9 view .LVU169
 642 0014 5E48     		ldr	r0, .L52+4
 643              	.LVL52:
 644              		.loc 5 46 9 view .LVU170
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 21


 645              	.LBE108:
 646              	.LBE116:
  79:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   float stiffness = Interpolate(lut_stiffness, structure, 64.0f);
 647              		.loc 1 79 18 view .LVU171
 648 0016 9046     		mov	r8, r2
 649 0018 0F46     		mov	r7, r1
 650              	.LBB117:
 651              	.LBB109:
  45:eurorack/stmlib/dsp/dsp.h ****   MAKE_INTEGRAL_FRACTIONAL(index)
 652              		.loc 5 45 3 view .LVU172
 653 001a 17EE103A 		vmov	r3, s14	@ int
 654              	.LVL53:
  45:eurorack/stmlib/dsp/dsp.h ****   MAKE_INTEGRAL_FRACTIONAL(index)
 655              		.loc 5 45 3 is_stmt 1 view .LVU173
 656              		.loc 5 46 3 view .LVU174
  45:eurorack/stmlib/dsp/dsp.h ****   MAKE_INTEGRAL_FRACTIONAL(index)
 657              		.loc 5 45 3 is_stmt 0 view .LVU175
 658 001e B8EEC77A 		vcvt.f32.s32	s14, s14
 659              	.LBE109:
 660              	.LBE117:
 661              	.LBB118:
  81:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   f0 *= NthHarmonicCompensation(3, stiffness);
  82:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   
  83:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   float harmonic = f0;
  84:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   float stretch_factor = 1.0f;
  85:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   float q_sqrt = SemitonesToRatio(damping * 79.7f);
  86:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   float q = 500.0f * q_sqrt * q_sqrt;
  87:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   brightness *= 1.0f - structure * 0.3f;
  88:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   brightness *= 1.0f - damping * 0.3f;
  89:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   float q_loss = brightness * (2.0f - brightness) * 0.85f + 0.15f;
  90:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   
  91:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   float mode_q[kModeBatchSize];
  92:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   float mode_f[kModeBatchSize];
  93:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   float mode_a[kModeBatchSize];
  94:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   int batch_counter = 0;
  95:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   
  96:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  97:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   
  98:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   
  99:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   for (int i = 0; i < resolution_; ++i) {
 662              		.loc 1 99 12 view .LVU176
 663 0022 0026     		movs	r6, #0
 664              	.LBE118:
  96:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   
 665              		.loc 1 96 33 view .LVU177
 666 0024 05F1640A 		add	r10, r5, #100
 667              	.LBB121:
 668              	.LBB110:
 669              		.loc 5 46 9 view .LVU178
 670 0028 00EB8302 		add	r2, r0, r3, lsl #2
 671              	.LVL54:
 672              		.loc 5 46 9 view .LVU179
 673 002c 05F1040B 		add	fp, r5, #4
  45:eurorack/stmlib/dsp/dsp.h ****   float a = table[index_integral];
 674              		.loc 5 45 3 view .LVU180
 675 0030 77EEC77A 		vsub.f32	s15, s15, s14
 676              	.LVL55:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 22


  45:eurorack/stmlib/dsp/dsp.h ****   float a = table[index_integral];
 677              		.loc 5 45 3 view .LVU181
 678              	.LBE110:
 679              	.LBE121:
  94:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   
 680              		.loc 1 94 7 view .LVU182
 681 0034 3446     		mov	r4, r6
 682              	.LBB122:
 683              	.LBB111:
  47:eurorack/stmlib/dsp/dsp.h ****   float b = table[index_integral + 1];
  48:eurorack/stmlib/dsp/dsp.h ****   return a + (b - a) * index_fractional;
 684              		.loc 5 48 17 view .LVU183
 685 0036 92ED017A 		vldr.32	s14, [r2, #4]
 686              	.LBE111:
 687              	.LBE122:
  79:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   float stiffness = Interpolate(lut_stiffness, structure, 64.0f);
 688              		.loc 1 79 18 view .LVU184
 689 003a 2DED088B 		vpush.64	{d8, d9, d10, d11}
 690              		.cfi_def_cfa_offset 68
 691              		.cfi_offset 80, -68
 692              		.cfi_offset 81, -64
 693              		.cfi_offset 82, -60
 694              		.cfi_offset 83, -56
 695              		.cfi_offset 84, -52
 696              		.cfi_offset 85, -48
 697              		.cfi_offset 86, -44
 698              		.cfi_offset 87, -40
 699              	.LBB123:
 700              	.LBB112:
  46:eurorack/stmlib/dsp/dsp.h ****   float b = table[index_integral + 1];
 701              		.loc 5 46 9 view .LVU185
 702 003e 92ED008A 		vldr.32	s16, [r2]
 703              	.LVL56:
  47:eurorack/stmlib/dsp/dsp.h ****   float b = table[index_integral + 1];
 704              		.loc 5 47 3 is_stmt 1 view .LVU186
 705              		.loc 5 48 3 view .LVU187
 706              	.LBE112:
 707              	.LBE123:
 708              	.LBB124:
 709              	.LBB125:
 710              	.LBB126:
  62:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     if (stiffness < 0.0f) {
 711              		.loc 1 62 20 is_stmt 0 view .LVU188
 712 0042 B7EE009A 		vmov.f32	s18, #1.0e+0
 713              	.LBE126:
 714              	.LBE125:
 715              	.LBE124:
 716              	.LBB131:
 717              	.LBB132:
 718              		.file 6 "eurorack/stmlib/dsp/units.h"
   1:eurorack/stmlib/dsp/units.h **** // Copyright 2014 Emilie Gillet.
   2:eurorack/stmlib/dsp/units.h **** //
   3:eurorack/stmlib/dsp/units.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:eurorack/stmlib/dsp/units.h **** //
   5:eurorack/stmlib/dsp/units.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:eurorack/stmlib/dsp/units.h **** // of this software and associated documentation files (the "Software"), to deal
   7:eurorack/stmlib/dsp/units.h **** // in the Software without restriction, including without limitation the rights
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 23


   8:eurorack/stmlib/dsp/units.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:eurorack/stmlib/dsp/units.h **** // copies of the Software, and to permit persons to whom the Software is
  10:eurorack/stmlib/dsp/units.h **** // furnished to do so, subject to the following conditions:
  11:eurorack/stmlib/dsp/units.h **** // 
  12:eurorack/stmlib/dsp/units.h **** // The above copyright notice and this permission notice shall be included in
  13:eurorack/stmlib/dsp/units.h **** // all copies or substantial portions of the Software.
  14:eurorack/stmlib/dsp/units.h **** // 
  15:eurorack/stmlib/dsp/units.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:eurorack/stmlib/dsp/units.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:eurorack/stmlib/dsp/units.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:eurorack/stmlib/dsp/units.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:eurorack/stmlib/dsp/units.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:eurorack/stmlib/dsp/units.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:eurorack/stmlib/dsp/units.h **** // THE SOFTWARE.
  22:eurorack/stmlib/dsp/units.h **** // 
  23:eurorack/stmlib/dsp/units.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:eurorack/stmlib/dsp/units.h **** //
  25:eurorack/stmlib/dsp/units.h **** // -----------------------------------------------------------------------------
  26:eurorack/stmlib/dsp/units.h **** //
  27:eurorack/stmlib/dsp/units.h **** // Conversion from semitones to frequency ratio.
  28:eurorack/stmlib/dsp/units.h **** 
  29:eurorack/stmlib/dsp/units.h **** #ifndef STMLIB_DSP_UNITS_H_
  30:eurorack/stmlib/dsp/units.h **** #define STMLIB_DSP_UNITS_H_
  31:eurorack/stmlib/dsp/units.h **** 
  32:eurorack/stmlib/dsp/units.h **** #include "stmlib/stmlib.h"
  33:eurorack/stmlib/dsp/units.h **** #include "stmlib/dsp/dsp.h"
  34:eurorack/stmlib/dsp/units.h **** 
  35:eurorack/stmlib/dsp/units.h **** namespace stmlib {
  36:eurorack/stmlib/dsp/units.h **** 
  37:eurorack/stmlib/dsp/units.h **** extern const float lut_pitch_ratio_high[257];
  38:eurorack/stmlib/dsp/units.h **** extern const float lut_pitch_ratio_low[257];
  39:eurorack/stmlib/dsp/units.h **** 
  40:eurorack/stmlib/dsp/units.h **** inline float SemitonesToRatio(float semitones) {
  41:eurorack/stmlib/dsp/units.h ****   float pitch = semitones + 128.0f;
  42:eurorack/stmlib/dsp/units.h ****   MAKE_INTEGRAL_FRACTIONAL(pitch)
  43:eurorack/stmlib/dsp/units.h **** 
  44:eurorack/stmlib/dsp/units.h ****   return lut_pitch_ratio_high[pitch_integral] * \
  45:eurorack/stmlib/dsp/units.h ****       lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
 719              		.loc 6 45 74 view .LVU189
 720 0046 534A     		ldr	r2, .L52+8
 721              	.LBE132:
 722              	.LBE131:
  89:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   
 723              		.loc 1 89 37 view .LVU190
 724 0048 F0EE00BA 		vmov.f32	s23, #2.0e+0
 725              	.LBB138:
 726              	.LBB113:
 727              		.loc 5 48 17 view .LVU191
 728 004c 37EE487A 		vsub.f32	s14, s14, s16
 729              	.LBE113:
 730              	.LBE138:
  89:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   
 731              		.loc 1 89 9 view .LVU192
 732 0050 9FED51AA 		vldr.32	s20, .L52+12
  84:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   float q_sqrt = SemitonesToRatio(damping * 79.7f);
 733              		.loc 1 84 9 view .LVU193
 734 0054 B7EE00BA 		vmov.f32	s22, #1.0e+0
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 24


  79:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   float stiffness = Interpolate(lut_stiffness, structure, 64.0f);
 735              		.loc 1 79 18 view .LVU194
 736 0058 91B0     		sub	sp, sp, #68
 737              		.cfi_def_cfa_offset 136
 738              	.LBB139:
 739              	.LBB114:
 740              		.loc 5 48 24 view .LVU195
 741 005a A7EE878A 		vfma.f32	s16, s15, s14
 742              	.LVL57:
 743              		.loc 5 48 24 view .LVU196
 744              	.LBE114:
 745              	.LBE139:
  81:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   
 746              		.loc 1 81 3 is_stmt 1 view .LVU197
 747              	.LBB140:
 748              	.LBI124:
  59:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   float stretch_factor = 1.0f;
 749              		.loc 1 59 14 view .LVU198
 750              	.LBB129:
 751              	.LBB127:
  61:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     stretch_factor += stiffness;
 752              		.loc 1 61 21 view .LVU199
  62:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     if (stiffness < 0.0f) {
 753              		.loc 1 62 5 view .LVU200
  63:eurorack/plaits/dsp/physical_modelling/resonator.cc ****       stiffness *= 0.93f;
 754              		.loc 1 63 5 is_stmt 0 view .LVU201
 755 005e B5EEC08A 		vcmpe.f32	s16, #0
  62:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     if (stiffness < 0.0f) {
 756              		.loc 1 62 20 view .LVU202
 757 0062 38EE097A 		vadd.f32	s14, s16, s18
 758              	.LVL58:
  63:eurorack/plaits/dsp/physical_modelling/resonator.cc ****       stiffness *= 0.93f;
 759              		.loc 1 63 5 is_stmt 1 view .LVU203
 760 0066 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  66:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     }
 761              		.loc 1 66 7 view .LVU204
  66:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     }
 762              		.loc 1 66 17 is_stmt 0 view .LVU205
 763 006a 54BF     		ite	pl
 764 006c DFED4B7A 		vldrpl.32	s15, .L52+16
  64:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     } else {
 765              		.loc 1 64 7 is_stmt 1 view .LVU206
  64:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     } else {
 766              		.loc 1 64 17 is_stmt 0 view .LVU207
 767 0070 DFED4B7A 		vldrmi.32	s15, .L52+20
 768 0074 68EE277A 		vmul.f32	s15, s16, s15
 769              	.LVL59:
  61:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     stretch_factor += stiffness;
 770              		.loc 1 61 3 is_stmt 1 view .LVU208
  61:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     stretch_factor += stiffness;
 771              		.loc 1 61 21 view .LVU209
  62:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     if (stiffness < 0.0f) {
 772              		.loc 1 62 5 view .LVU210
  63:eurorack/plaits/dsp/physical_modelling/resonator.cc ****       stiffness *= 0.93f;
 773              		.loc 1 63 5 view .LVU211
  61:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     stretch_factor += stiffness;
 774              		.loc 1 61 3 view .LVU212
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 25


  61:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     stretch_factor += stiffness;
 775              		.loc 1 61 21 view .LVU213
 776              	.LBE127:
  69:eurorack/plaits/dsp/physical_modelling/resonator.cc **** }
 777              		.loc 1 69 3 view .LVU214
 778              	.LBB128:
  62:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     if (stiffness < 0.0f) {
 779              		.loc 1 62 20 is_stmt 0 view .LVU215
 780 0078 77EE277A 		vadd.f32	s15, s14, s15
 781              	.LBE128:
 782              	.LBE129:
 783              	.LBE140:
 784              	.LBB141:
 785              	.LBB133:
  41:eurorack/stmlib/dsp/units.h ****   MAKE_INTEGRAL_FRACTIONAL(pitch)
 786              		.loc 6 41 9 view .LVU216
 787 007c 9FED497A 		vldr.32	s14, .L52+24
 788              	.LBE133:
 789              	.LBE141:
 790              	.LBB142:
 791              	.LBB130:
  69:eurorack/plaits/dsp/physical_modelling/resonator.cc **** }
 792              		.loc 1 69 17 view .LVU217
 793 0080 C9EE279A 		vdiv.f32	s19, s18, s15
 794              	.LBE130:
 795              	.LBE142:
 796              	.LBB143:
 797              	.LBB134:
  41:eurorack/stmlib/dsp/units.h ****   MAKE_INTEGRAL_FRACTIONAL(pitch)
 798              		.loc 6 41 9 view .LVU218
 799 0084 DFED487A 		vldr.32	s15, .L52+28
 800 0088 E1EE877A 		vfma.f32	s15, s3, s14
  42:eurorack/stmlib/dsp/units.h **** 
 801              		.loc 6 42 3 view .LVU219
 802 008c BDEEE77A 		vcvt.s32.f32	s14, s15
 803 0090 F8EEC76A 		vcvt.f32.s32	s13, s14
  44:eurorack/stmlib/dsp/units.h ****       lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
 804              		.loc 6 44 45 view .LVU220
 805 0094 17EE101A 		vmov	r1, s14	@ int
 806              	.LVL60:
  44:eurorack/stmlib/dsp/units.h ****       lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
 807              		.loc 6 44 45 view .LVU221
 808              	.LBE134:
 809              	.LBE143:
  87:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   brightness *= 1.0f - damping * 0.3f;
 810              		.loc 1 87 22 view .LVU222
 811 0098 B0EE497A 		vmov.f32	s14, s18
  81:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   
 812              		.loc 1 81 6 view .LVU223
 813 009c 69EE809A 		vmul.f32	s19, s19, s0
 814              	.LVL61:
  83:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   float stretch_factor = 1.0f;
 815              		.loc 1 83 3 is_stmt 1 view .LVU224
  84:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   float q_sqrt = SemitonesToRatio(damping * 79.7f);
 816              		.loc 1 84 3 view .LVU225
  85:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   float q = 500.0f * q_sqrt * q_sqrt;
 817              		.loc 1 85 3 view .LVU226
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 26


 818              	.LBB144:
 819              	.LBI131:
  40:eurorack/stmlib/dsp/units.h ****   float pitch = semitones + 128.0f;
 820              		.loc 6 40 14 view .LVU227
 821              	.LBB135:
  41:eurorack/stmlib/dsp/units.h ****   MAKE_INTEGRAL_FRACTIONAL(pitch)
 822              		.loc 6 41 3 view .LVU228
  42:eurorack/stmlib/dsp/units.h **** 
 823              		.loc 6 42 3 view .LVU229
  42:eurorack/stmlib/dsp/units.h **** 
 824              		.loc 6 42 3 view .LVU230
  44:eurorack/stmlib/dsp/units.h ****       lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
 825              		.loc 6 44 3 view .LVU231
  42:eurorack/stmlib/dsp/units.h **** 
 826              		.loc 6 42 3 is_stmt 0 view .LVU232
 827 00a0 77EEE67A 		vsub.f32	s15, s15, s13
 828              	.LVL62:
  42:eurorack/stmlib/dsp/units.h **** 
 829              		.loc 6 42 3 view .LVU233
 830              	.LBE135:
 831              	.LBE144:
  87:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   brightness *= 1.0f - damping * 0.3f;
 832              		.loc 1 87 22 view .LVU234
 833 00a4 DFED416A 		vldr.32	s13, .L52+32
 834 00a8 A0EEE67A 		vfms.f32	s14, s1, s13
 835              	.LBB145:
 836              	.LBB136:
 837              		.loc 6 45 27 view .LVU235
 838 00ac FEEECC7A 		vcvt.s32.f32	s15, s15, #8
 839              	.LBE136:
 840              	.LBE145:
  83:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   float stretch_factor = 1.0f;
 841              		.loc 1 83 9 view .LVU236
 842 00b0 F0EE69AA 		vmov.f32	s21, s19
 843              	.LBB146:
 844              	.LBB137:
 845              		.loc 6 45 74 view .LVU237
 846 00b4 17EE903A 		vmov	r3, s15	@ int
 847 00b8 02EB8302 		add	r2, r2, r3, lsl #2
  44:eurorack/stmlib/dsp/units.h ****       lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
 848              		.loc 6 44 45 view .LVU238
 849 00bc 3C4B     		ldr	r3, .L52+36
 850 00be 03EB8103 		add	r3, r3, r1, lsl #2
 851              		.loc 6 45 74 view .LVU239
 852 00c2 D2ED008A 		vldr.32	s17, [r2]
 853 00c6 D3ED007A 		vldr.32	s15, [r3]
 854 00ca 68EEA77A 		vmul.f32	s15, s17, s15
 855              	.LVL63:
 856              		.loc 6 45 74 view .LVU240
 857              	.LBE137:
 858              	.LBE146:
  86:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   brightness *= 1.0f - structure * 0.3f;
 859              		.loc 1 86 3 is_stmt 1 view .LVU241
  86:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   brightness *= 1.0f - structure * 0.3f;
 860              		.loc 1 86 20 is_stmt 0 view .LVU242
 861 00ce DFED398A 		vldr.32	s17, .L52+40
 862 00d2 67EEA88A 		vmul.f32	s17, s15, s17
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 27


  86:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   brightness *= 1.0f - structure * 0.3f;
 863              		.loc 1 86 9 view .LVU243
 864 00d6 68EEA78A 		vmul.f32	s17, s17, s15
 865              	.LVL64:
  87:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   brightness *= 1.0f - damping * 0.3f;
 866              		.loc 1 87 3 is_stmt 1 view .LVU244
  87:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   brightness *= 1.0f - damping * 0.3f;
 867              		.loc 1 87 14 is_stmt 0 view .LVU245
 868 00da 67EE017A 		vmul.f32	s15, s14, s2
 869              	.LVL65:
  88:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   float q_loss = brightness * (2.0f - brightness) * 0.85f + 0.15f;
 870              		.loc 1 88 3 is_stmt 1 view .LVU246
  88:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   float q_loss = brightness * (2.0f - brightness) * 0.85f + 0.15f;
 871              		.loc 1 88 22 is_stmt 0 view .LVU247
 872 00de B0EE491A 		vmov.f32	s2, s18
 873 00e2 A1EEE61A 		vfms.f32	s2, s3, s13
  88:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   float q_loss = brightness * (2.0f - brightness) * 0.85f + 0.15f;
 874              		.loc 1 88 14 view .LVU248
 875 00e6 21EE271A 		vmul.f32	s2, s2, s15
 876              	.LVL66:
  89:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   
 877              		.loc 1 89 3 is_stmt 1 view .LVU249
  89:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   
 878              		.loc 1 89 37 is_stmt 0 view .LVU250
 879 00ea 7BEEC17A 		vsub.f32	s15, s23, s2
  89:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   
 880              		.loc 1 89 29 view .LVU251
 881 00ee 27EE811A 		vmul.f32	s2, s15, s2
 882              	.LVL67:
  89:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   
 883              		.loc 1 89 9 view .LVU252
 884 00f2 DFED317A 		vldr.32	s15, .L52+44
 885 00f6 A1EE27AA 		vfma.f32	s20, s2, s15
 886              	.LVL68:
  91:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   float mode_f[kModeBatchSize];
 887              		.loc 1 91 3 is_stmt 1 view .LVU253
  92:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   float mode_a[kModeBatchSize];
 888              		.loc 1 92 3 view .LVU254
  93:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   int batch_counter = 0;
 889              		.loc 1 93 3 view .LVU255
  94:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   
 890              		.loc 1 94 3 view .LVU256
  96:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   
 891              		.loc 1 96 3 view .LVU257
 892              		.loc 1 99 3 view .LVU258
 893              	.L46:
 894              	.LBB147:
 895              		.loc 1 99 21 discriminator 1 view .LVU259
 896 00fa 2B68     		ldr	r3, [r5]
 897 00fc B342     		cmp	r3, r6
 898 00fe 40DD     		ble	.L36
 899              	.LBB119:
 100:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     float mode_frequency = harmonic * stretch_factor;
 900              		.loc 1 100 5 view .LVU260
 901              		.loc 1 100 11 is_stmt 0 view .LVU261
 902 0100 6AEE8B7A 		vmul.f32	s15, s21, s22
 903              	.LVL69:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 28


 101:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     if (mode_frequency >= 0.499f) {
 904              		.loc 1 101 5 is_stmt 1 view .LVU262
 905 0104 9FED2D7A 		vldr.32	s14, .L52+48
 102:eurorack/plaits/dsp/physical_modelling/resonator.cc ****       mode_frequency = 0.499f;
 103:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     }
 104:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     const float mode_attenuation = 1.0f - mode_frequency * 2.0f;
 105:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     
 106:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     mode_f[batch_counter] = mode_frequency;
 107:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     mode_q[batch_counter] = 1.0f + mode_frequency * q;
 906              		.loc 1 107 34 is_stmt 0 view .LVU263
 907 0108 F0EE496A 		vmov.f32	s13, s18
 106:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     mode_q[batch_counter] = 1.0f + mode_frequency * q;
 908              		.loc 1 106 27 view .LVU264
 909 010c 10AB     		add	r3, sp, #64
 102:eurorack/plaits/dsp/physical_modelling/resonator.cc ****       mode_frequency = 0.499f;
 910              		.loc 1 102 22 view .LVU265
 911 010e F4EE477A 		vcmp.f32	s15, s14
 106:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     mode_q[batch_counter] = 1.0f + mode_frequency * q;
 912              		.loc 1 106 27 view .LVU266
 913 0112 03EB8403 		add	r3, r3, r4, lsl #2
 108:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
 109:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     ++batch_counter;
 914              		.loc 1 109 5 view .LVU267
 915 0116 0134     		adds	r4, r4, #1
 916              	.LVL70:
 102:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     }
 917              		.loc 1 102 22 view .LVU268
 918 0118 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 919 011c 67FE277A 		vselge.f32	s15, s14, s15
 920              	.LVL71:
 104:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     
 921              		.loc 1 104 5 is_stmt 1 view .LVU269
 104:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     
 922              		.loc 1 104 17 is_stmt 0 view .LVU270
 923 0120 B0EE497A 		vmov.f32	s14, s18
 107:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
 924              		.loc 1 107 34 view .LVU271
 925 0124 E8EEA76A 		vfma.f32	s13, s17, s15
 106:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     mode_q[batch_counter] = 1.0f + mode_frequency * q;
 926              		.loc 1 106 27 view .LVU272
 927 0128 43ED087A 		vstr.32	s15, [r3, #-32]
 110:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     
 111:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     if (batch_counter == kModeBatchSize) {
 928              		.loc 1 111 5 view .LVU273
 929 012c 042C     		cmp	r4, #4
 104:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     
 930              		.loc 1 104 17 view .LVU274
 931 012e A7EEEB7A 		vfms.f32	s14, s15, s23
 932              	.LVL72:
 106:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     mode_q[batch_counter] = 1.0f + mode_frequency * q;
 933              		.loc 1 106 5 is_stmt 1 view .LVU275
 107:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
 934              		.loc 1 107 5 view .LVU276
 108:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     ++batch_counter;
 935              		.loc 1 108 46 is_stmt 0 view .LVU277
 936 0132 FBEC017A 		vldmia.32	fp!, {s15}
 937              	.LVL73:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 29


 107:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
 938              		.loc 1 107 27 view .LVU278
 939 0136 43ED0C6A 		vstr.32	s13, [r3, #-48]
 108:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     ++batch_counter;
 940              		.loc 1 108 5 is_stmt 1 view .LVU279
 108:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     ++batch_counter;
 941              		.loc 1 108 48 is_stmt 0 view .LVU280
 942 013a 67EE877A 		vmul.f32	s15, s15, s14
 108:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     ++batch_counter;
 943              		.loc 1 108 27 view .LVU281
 944 013e 43ED047A 		vstr.32	s15, [r3, #-16]
 109:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     
 945              		.loc 1 109 5 is_stmt 1 view .LVU282
 946              	.LVL74:
 947              		.loc 1 111 5 view .LVU283
 948 0142 0BD1     		bne	.L42
 112:eurorack/plaits/dsp/physical_modelling/resonator.cc ****       batch_counter = 0;
 949              		.loc 1 112 7 view .LVU284
 950              	.LVL75:
 113:eurorack/plaits/dsp/physical_modelling/resonator.cc ****       batch_processor->Process<FILTER_MODE_BAND_PASS, true>(
 951              		.loc 1 113 7 view .LVU285
 952              		.loc 1 113 60 is_stmt 0 view .LVU286
 953 0144 5046     		mov	r0, r10
 112:eurorack/plaits/dsp/physical_modelling/resonator.cc ****       batch_counter = 0;
 954              		.loc 1 112 21 view .LVU287
 955 0146 0024     		movs	r4, #0
 114:eurorack/plaits/dsp/physical_modelling/resonator.cc ****           mode_f,
 115:eurorack/plaits/dsp/physical_modelling/resonator.cc ****           mode_q,
 116:eurorack/plaits/dsp/physical_modelling/resonator.cc ****           mode_a,
 117:eurorack/plaits/dsp/physical_modelling/resonator.cc ****           in,
 118:eurorack/plaits/dsp/physical_modelling/resonator.cc ****           out,
 119:eurorack/plaits/dsp/physical_modelling/resonator.cc ****           size);
 120:eurorack/plaits/dsp/physical_modelling/resonator.cc ****       ++batch_processor;
 956              		.loc 1 120 7 view .LVU288
 957 0148 0AF1200A 		add	r10, r10, #32
 958              	.LVL76:
 113:eurorack/plaits/dsp/physical_modelling/resonator.cc ****       batch_processor->Process<FILTER_MODE_BAND_PASS, true>(
 959              		.loc 1 113 60 view .LVU289
 960 014c 0CAB     		add	r3, sp, #48
 961              	.LVL77:
 113:eurorack/plaits/dsp/physical_modelling/resonator.cc ****       batch_processor->Process<FILTER_MODE_BAND_PASS, true>(
 962              		.loc 1 113 60 view .LVU290
 963 014e 04AA     		add	r2, sp, #16
 964 0150 08A9     		add	r1, sp, #32
 965 0152 0097     		str	r7, [sp]
 113:eurorack/plaits/dsp/physical_modelling/resonator.cc ****       batch_processor->Process<FILTER_MODE_BAND_PASS, true>(
 966              		.loc 1 113 60 view .LVU291
 967 0154 CDE90189 		strd	r8, r9, [sp, #4]
 968 0158 FFF7FEFF 		bl	_ZN6plaits12ResonatorSvfILi4EE7ProcessILN6stmlib10FilterModeE1ELb1EEEvPKfS6_S6_S6_Pfj
 969              	.LVL78:
 970              		.loc 1 120 7 is_stmt 1 view .LVU292
 971              	.L42:
 121:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     }
 122:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     
 123:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     stretch_factor += stiffness;
 972              		.loc 1 123 5 view .LVU293
 124:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     if (stiffness < 0.0f) {
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 30


 973              		.loc 1 124 5 is_stmt 0 view .LVU294
 974 015c B5EEC08A 		vcmpe.f32	s16, #0
 975              	.LBE119:
  99:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     float mode_frequency = harmonic * stretch_factor;
 976              		.loc 1 99 3 view .LVU295
 977 0160 0136     		adds	r6, r6, #1
 978              	.LVL79:
 979              	.LBB120:
 123:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     if (stiffness < 0.0f) {
 980              		.loc 1 123 20 view .LVU296
 981 0162 3BEE08BA 		vadd.f32	s22, s22, s16
 982              	.LVL80:
 983              		.loc 1 124 5 is_stmt 1 view .LVU297
 125:eurorack/plaits/dsp/physical_modelling/resonator.cc ****       // Make sure that the partials do not fold back into negative frequencies.
 126:eurorack/plaits/dsp/physical_modelling/resonator.cc ****       stiffness *= 0.93f;
 127:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     } else {
 128:eurorack/plaits/dsp/physical_modelling/resonator.cc ****       // This helps adding a few extra partials in the highest frequencies.
 129:eurorack/plaits/dsp/physical_modelling/resonator.cc ****       stiffness *= 0.98f;
 130:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     }
 131:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     harmonic += f0;
 984              		.loc 1 131 14 is_stmt 0 view .LVU298
 985 0166 7AEEA9AA 		vadd.f32	s21, s21, s19
 986              	.LVL81:
 124:eurorack/plaits/dsp/physical_modelling/resonator.cc ****       // Make sure that the partials do not fold back into negative frequencies.
 987              		.loc 1 124 5 view .LVU299
 988 016a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 126:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     } else {
 989              		.loc 1 126 7 is_stmt 1 view .LVU300
 132:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     q *= q_loss;
 990              		.loc 1 132 7 is_stmt 0 view .LVU301
 991 016e 68EE8A8A 		vmul.f32	s17, s17, s20
 992              	.LVL82:
 126:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     } else {
 993              		.loc 1 126 17 view .LVU302
 994 0172 4CBF     		ite	mi
 995 0174 DFED0A7A 		vldrmi.32	s15, .L52+20
 129:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     }
 996              		.loc 1 129 7 is_stmt 1 view .LVU303
 129:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     }
 997              		.loc 1 129 17 is_stmt 0 view .LVU304
 998 0178 DFED087A 		vldrpl.32	s15, .L52+16
 999 017c 28EE278A 		vmul.f32	s16, s16, s15
 1000              	.LVL83:
 131:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     q *= q_loss;
 1001              		.loc 1 131 5 is_stmt 1 view .LVU305
 1002              		.loc 1 132 5 view .LVU306
 1003              		.loc 1 132 5 is_stmt 0 view .LVU307
 1004              	.LBE120:
  99:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     float mode_frequency = harmonic * stretch_factor;
 1005              		.loc 1 99 3 is_stmt 1 view .LVU308
  99:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     float mode_frequency = harmonic * stretch_factor;
 1006              		.loc 1 99 3 is_stmt 0 view .LVU309
 1007 0180 BBE7     		b	.L46
 1008              	.L36:
  99:eurorack/plaits/dsp/physical_modelling/resonator.cc ****     float mode_frequency = harmonic * stretch_factor;
 1009              		.loc 1 99 3 view .LVU310
 1010              	.LBE147:
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 31


 133:eurorack/plaits/dsp/physical_modelling/resonator.cc ****   }
 134:eurorack/plaits/dsp/physical_modelling/resonator.cc **** }
 1011              		.loc 1 134 1 view .LVU311
 1012 0182 11B0     		add	sp, sp, #68
 1013              		.cfi_def_cfa_offset 68
 1014              		@ sp needed
 1015 0184 BDEC088B 		vldm	sp!, {d8-d11}
 1016              		.cfi_restore 86
 1017              		.cfi_restore 87
 1018              		.cfi_restore 84
 1019              		.cfi_restore 85
 1020              		.cfi_restore 82
 1021              		.cfi_restore 83
 1022              		.cfi_restore 80
 1023              		.cfi_restore 81
 1024              		.cfi_def_cfa_offset 36
 1025              	.LVL84:
 1026              		.loc 1 134 1 view .LVU312
 1027 0188 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1028              	.LVL85:
 1029              	.L53:
 1030              		.loc 1 134 1 view .LVU313
 1031              		.align	2
 1032              	.L52:
 1033 018c 00008042 		.word	1115684864
 1034 0190 00000000 		.word	_ZN6plaits13lut_stiffnessE
 1035 0194 00000000 		.word	_ZN6stmlib19lut_pitch_ratio_lowE
 1036 0198 9A99193E 		.word	1041865114
 1037 019c 48E17A3F 		.word	1065017672
 1038 01a0 7B146E3F 		.word	1064178811
 1039 01a4 66669F42 		.word	1117742694
 1040 01a8 00000043 		.word	1124073472
 1041 01ac 9A99993E 		.word	1050253722
 1042 01b0 00000000 		.word	_ZN6stmlib20lut_pitch_ratio_highE
 1043 01b4 0000FA43 		.word	1140457472
 1044 01b8 9A99593F 		.word	1062836634
 1045 01bc EE7CFF3E 		.word	1056931054
 1046              		.cfi_endproc
 1047              	.LFE1520:
 1049              		.text
 1050              	.Letext0:
 1051              		.file 7 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/machine/_default_types.h"
 1052              		.file 8 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/_stdint.h"
 1053              		.file 9 "/Library/DaisyToolchain/0.2.0/arm/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 1054              		.file 10 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cmath"
 1055              		.file 11 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h"
 1056              		.file 12 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/type_traits"
 1057              		.file 13 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/debug/debug.h"
 1058              		.file 14 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/cstdlib"
 1059              		.file 15 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/arm-none-eabi/thumb/v
 1060              		.file 16 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/algorithmfwd.h"
 1061              		.file 17 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h"
 1062              		.file 18 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/exception_ptr.h"
 1063              		.file 19 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/predefined_ops.h
 1064              		.file 20 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/math.h"
 1065              		.file 21 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/stdlib.h"
 1066              		.file 22 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/math.h"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 32


 1067              		.file 23 "eurorack/stmlib/stmlib.h"
 1068              		.file 24 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h"
 1069              		.file 25 "eurorack/plaits/resources.h"
 1070              		.file 26 "<built-in>"
ARM GAS  /var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s 			page 33


DEFINED SYMBOLS
                            *ABS*:0000000000000000 resonator.cc
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s:19     .text._ZN6plaits9Resonator4InitEfi:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s:25     .text._ZN6plaits9Resonator4InitEfi:0000000000000000 _ZN6plaits9Resonator4InitEfi
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s:293    .text._ZN6plaits12ResonatorSvfILi4EE7ProcessILN6stmlib10FilterModeE1ELb1EEEvPKfS6_S6_S6_Pfj:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s:299    .text._ZN6plaits12ResonatorSvfILi4EE7ProcessILN6stmlib10FilterModeE1ELb1EEEvPKfS6_S6_S6_Pfj:0000000000000000 _ZN6plaits12ResonatorSvfILi4EE7ProcessILN6stmlib10FilterModeE1ELb1EEEvPKfS6_S6_S6_Pfj
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s:583    .text._ZN6plaits12ResonatorSvfILi4EE7ProcessILN6stmlib10FilterModeE1ELb1EEEvPKfS6_S6_S6_Pfj:0000000000000174 $d
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s:591    .text._ZN6plaits9Resonator7ProcessEffffPKfPfj:0000000000000000 $t
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s:597    .text._ZN6plaits9Resonator7ProcessEffffPKfPfj:0000000000000000 _ZN6plaits9Resonator7ProcessEffffPKfPfj
/var/folders/9s/8rp0_f2s1n31qbztm3b5_fdh0000gn/T//cc88l80C.s:1033   .text._ZN6plaits9Resonator7ProcessEffffPKfPfj:000000000000018c $d

UNDEFINED SYMBOLS
_ZN6plaits13lut_stiffnessE
_ZN6stmlib19lut_pitch_ratio_lowE
_ZN6stmlib20lut_pitch_ratio_highE
